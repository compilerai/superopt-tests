==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x5 $x6)))
 (let (($x17 (and $x7 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x5 $x6)))
 (let (($x17 (and $x7 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x153 (= true false)))
 (let (($x154 (= $x153 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x143 (concat ?x140 (concat ?x137 ?x135)))))
 (let (($x146 (= ?x144 input.dst.llvm-%m)))
 (let (($x147 (= $x146 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x129 (concat ?x126 (concat ?x122 ?x120)))))
 (let (($x131 (= ?x130 input.dst.llvm-%n)))
 (let (($x132 (= $x131 true)))
 (let (($x114 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x101)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x91 $x94)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x59 $x95)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x50 $x62)))
 (let (($x79 (not $x39)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x42 $x72)))
 (let (($x87 (and (not $x56) $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x20 $x64)))
 (let (($x17 (not $x74)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x41)))
 (let (($x13 (and (not $x28) $x17)))
 (let (($x108 (and (and (and (and (and (and $x13 $x87) $x90) $x57) $x96) $x98) $x100)))
 (let (($x109 (and $x108 $x102)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x70 (or false (or false (and (and true (or $x47 $x49)) (or $x71 $x80))))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x110 (and $x12 $x109)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x117 (and $x112 $x116)))
 (let (($x133 (and $x117 $x132)))
 (let (($x148 (and $x133 $x147)))
 (let (($x89 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x149 (and $x89 $x148)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x150 (and $x21 $x149)))
 (let (($x69 (forall ((Lambda25 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x30 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x30 (_ bv1 32))))
 (=> $x85 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x44 (forall ((Lambda25 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x30 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x30 (_ bv1 32))))
 (= $x85 false)))))
 ))
 (let (($x52 (forall ((Lambda25 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x6 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x30 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x30 (_ bv0 32))))
 (=> $x9 $x54))))))
 ))
 (let (($x27 (forall ((Lambda25 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x30 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x30 (_ bv0 32))))
 (= $x9 true)))))
 ))
 (let (($x63 (and $x27 $x52)))
 (let (($x7 (and $x63 $x44)))
 (let (($x77 (and $x7 $x69)))
 (let (($x151 (and $x77 $x150)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x152 (and $x25 $x151)))
 (let (($x155 (=> $x152 $x154)))
 (not $x155)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x153 (= true false)))
 (let (($x154 (= $x153 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x143 (concat ?x140 (concat ?x137 ?x135)))))
 (let (($x146 (= ?x144 input.dst.llvm-%m)))
 (let (($x147 (= $x146 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x129 (concat ?x126 (concat ?x122 ?x120)))))
 (let (($x131 (= ?x130 input.dst.llvm-%n)))
 (let (($x132 (= $x131 true)))
 (let (($x114 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x101)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x91 $x94)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x59 $x95)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x50 $x62)))
 (let (($x79 (not $x39)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x42 $x72)))
 (let (($x87 (and (not $x56) $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x20 $x64)))
 (let (($x17 (not $x74)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x41)))
 (let (($x13 (and (not $x28) $x17)))
 (let (($x108 (and (and (and (and (and (and $x13 $x87) $x90) $x57) $x96) $x98) $x100)))
 (let (($x109 (and $x108 $x102)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x70 (or false (or false (and (and true (or $x47 $x49)) (or $x71 $x80))))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x110 (and $x12 $x109)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x117 (and $x112 $x116)))
 (let (($x133 (and $x117 $x132)))
 (let (($x148 (and $x133 $x147)))
 (let (($x89 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x149 (and $x89 $x148)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x150 (and $x21 $x149)))
 (let (($x69 (forall ((Lambda25 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x30 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x30 (_ bv1 32))))
 (=> $x85 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x44 (forall ((Lambda25 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x30 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x30 (_ bv1 32))))
 (= $x85 false)))))
 ))
 (let (($x52 (forall ((Lambda25 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x6 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x30 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x30 (_ bv0 32))))
 (=> $x9 $x54))))))
 ))
 (let (($x27 (forall ((Lambda25 (_ BitVec 32)) )(let (($x6 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x30 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x30 (_ bv0 32))))
 (= $x9 true)))))
 ))
 (let (($x63 (and $x27 $x52)))
 (let (($x7 (and $x63 $x44)))
 (let (($x77 (and $x7 $x69)))
 (let (($x151 (and $x77 $x150)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x152 (and $x25 $x151)))
 (let (($x155 (=> $x152 $x154)))
 (not $x155)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00020003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xeefcc268)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb421d650)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb421d653)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xeefcc26b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb421d650)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xeefcc268)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x117)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x115)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x24)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x91 $x107)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x58 $x99)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x57 $x82)))
 (let (($x15 (not $x7)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x73 $x61)))
 (let (($x88 (and (not $x97) $x15)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x72 $x98)))
 (let (($x64 (not $x32)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x11 $x102)))
 (let (($x67 (and (not $x56) $x64)))
 (let (($x121 (and (and (and (and (and (and $x67 $x88) $x94) $x39) $x112) $x114) $x116)))
 (let (($x122 (and $x121 $x118)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x84)))
 (let (($x86 (or false (or false (and (and true (or $x52 $x66)) (or $x18 $x101))))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x86)))
 (let (($x31 (and $x104 $x122)))
 (let (($x19 (= $x31 true)))
 (let (($x68 (= $x19 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x155 (concat ?x152 (concat ?x149 ?x147)))))
 (let (($x5 (= input.dst.llvm-%m ?x156)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x141 (concat ?x137 (concat ?x143 ?x133)))))
 (let (($x145 (= input.dst.llvm-%n ?x144)))
 (let (($x134 (and $x145 $x5)))
 (let (($x130 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x119 (and $x130 $x134)))
 (let (($x43 (and (and (and $x104 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x122) $x119)))
 (let (($x14 (= $x43 true)))
 (let (($x10 (= $x14 true)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x37 (and $x77 $x10)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x51 (and $x69 $x37)))
 (let (($x63 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x27 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x27 (_ bv1 32))))
 (=> $x28 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x20 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x27 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x27 (_ bv1 32))))
 (= $x28 false)))))
 ))
 (let (($x33 (forall ((Lambda25 (_ BitVec 32)) )(let (($x44 (= false false)))
 (let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x27 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x27 (_ bv0 32))))
 (=> $x54 $x44))))))
 ))
 (let (($x12 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x27 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x27 (_ bv0 32))))
 (= $x54 true)))))
 ))
 (let (($x45 (and $x12 $x33)))
 (let (($x50 (and $x45 $x20)))
 (let (($x85 (and $x50 $x63)))
 (let (($x40 (and $x85 $x51)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x60 (and $x48 $x40)))
 (let (($x81 (=> $x60 $x68)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x117)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x115)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x24)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x91 $x107)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x58 $x99)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x57 $x82)))
 (let (($x15 (not $x7)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x73 $x61)))
 (let (($x88 (and (not $x97) $x15)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x72 $x98)))
 (let (($x64 (not $x32)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x11 $x102)))
 (let (($x67 (and (not $x56) $x64)))
 (let (($x121 (and (and (and (and (and (and $x67 $x88) $x94) $x39) $x112) $x114) $x116)))
 (let (($x122 (and $x121 $x118)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x84)))
 (let (($x86 (or false (or false (and (and true (or $x52 $x66)) (or $x18 $x101))))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x86)))
 (let (($x31 (and $x104 $x122)))
 (let (($x19 (= $x31 true)))
 (let (($x68 (= $x19 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x155 (concat ?x152 (concat ?x149 ?x147)))))
 (let (($x5 (= input.dst.llvm-%m ?x156)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x141 (concat ?x137 (concat ?x143 ?x133)))))
 (let (($x145 (= input.dst.llvm-%n ?x144)))
 (let (($x134 (and $x145 $x5)))
 (let (($x130 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x119 (and $x130 $x134)))
 (let (($x43 (and (and (and $x104 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x122) $x119)))
 (let (($x14 (= $x43 true)))
 (let (($x10 (= $x14 true)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x37 (and $x77 $x10)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x51 (and $x69 $x37)))
 (let (($x63 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x27 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x27 (_ bv1 32))))
 (=> $x28 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x20 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x27 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x27 (_ bv1 32))))
 (= $x28 false)))))
 ))
 (let (($x33 (forall ((Lambda25 (_ BitVec 32)) )(let (($x44 (= false false)))
 (let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x27 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x27 (_ bv0 32))))
 (=> $x54 $x44))))))
 ))
 (let (($x12 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x27 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x27 (_ bv0 32))))
 (= $x54 true)))))
 ))
 (let (($x45 (and $x12 $x33)))
 (let (($x50 (and $x45 $x20)))
 (let (($x85 (and $x50 $x63)))
 (let (($x40 (and $x85 $x51)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x60 (and $x48 $x40)))
 (let (($x81 (=> $x60 $x68)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x46 (= $x49 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x81 (concat ?x31 (concat ?x51 ?x10)))))
 (let (($x89 (= input.dst.llvm-%m ?x157)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x134 (concat ?x153 (concat ?x148 ?x151)))))
 (let (($x43 (= input.dst.llvm-%n ?x119)))
 (let (($x80 (and $x43 $x89)))
 (let (($x145 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x146 (and $x145 $x80)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x131)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x127)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x116 $x118)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x115 $x122)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x91 $x79)))
 (let (($x107 (not $x24)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x39 $x124)))
 (let (($x112 (and (not $x58) $x107)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x88 $x128)))
 (let (($x94 (not $x83)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x82 $x7)))
 (let (($x108 (and (not $x15) $x94)))
 (let (($x143 (and (and (and (and (and (and $x108 $x112) $x113) $x126) $x76) $x123) $x130)))
 (let (($x133 (and $x143 $x138)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x97 (or false (or false (and (and true (or $x11 $x102)) (or $x32 $x64))))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x97)))
 (let (($x26 (and (and (and $x57 $x17) $x133) $x146)))
 (let (($x30 (= $x26 true)))
 (let (($x29 (= $x30 true)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x35 (and $x16 $x29)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x23 (and $x71 $x35)))
 (let (($x8 (forall ((Lambda25 (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x33 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x33 (_ bv1 32))))
 (=> $x55 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x65 (forall ((Lambda25 (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x33 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x33 (_ bv1 32))))
 (= $x55 false)))))
 ))
 (let (($x105 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (= false false)))
 (let (($x27 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x33 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x33 (_ bv0 32))))
 (=> $x45 $x20))))))
 ))
 (let (($x13 (forall ((Lambda25 (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x33 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x33 (_ bv0 32))))
 (= $x45 true)))))
 ))
 (let (($x111 (and $x13 $x105)))
 (let (($x59 (and $x111 $x65)))
 (let (($x66 (and $x59 $x8)))
 (let (($x38 (and $x66 $x23)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x47 (and $x48 $x38)))
 (let (($x78 (=> $x47 $x46)))
 (not $x78)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x46 (= $x49 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x81 (concat ?x31 (concat ?x51 ?x10)))))
 (let (($x89 (= input.dst.llvm-%m ?x157)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x134 (concat ?x153 (concat ?x148 ?x151)))))
 (let (($x43 (= input.dst.llvm-%n ?x119)))
 (let (($x80 (and $x43 $x89)))
 (let (($x145 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x146 (and $x145 $x80)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x131)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x127)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x116 $x118)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x115 $x122)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x91 $x79)))
 (let (($x107 (not $x24)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x39 $x124)))
 (let (($x112 (and (not $x58) $x107)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x88 $x128)))
 (let (($x94 (not $x83)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x82 $x7)))
 (let (($x108 (and (not $x15) $x94)))
 (let (($x143 (and (and (and (and (and (and $x108 $x112) $x113) $x126) $x76) $x123) $x130)))
 (let (($x133 (and $x143 $x138)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x97 (or false (or false (and (and true (or $x11 $x102)) (or $x32 $x64))))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x97)))
 (let (($x26 (and (and (and $x57 $x17) $x133) $x146)))
 (let (($x30 (= $x26 true)))
 (let (($x29 (= $x30 true)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x35 (and $x16 $x29)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x23 (and $x71 $x35)))
 (let (($x8 (forall ((Lambda25 (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x33 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x33 (_ bv1 32))))
 (=> $x55 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x65 (forall ((Lambda25 (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x33 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x33 (_ bv1 32))))
 (= $x55 false)))))
 ))
 (let (($x105 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (= false false)))
 (let (($x27 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x33 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x33 (_ bv0 32))))
 (=> $x45 $x20))))))
 ))
 (let (($x13 (forall ((Lambda25 (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x33 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x33 (_ bv0 32))))
 (= $x45 true)))))
 ))
 (let (($x111 (and $x13 $x105)))
 (let (($x59 (and $x111 $x65)))
 (let (($x66 (and $x59 $x8)))
 (let (($x38 (and $x66 $x23)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x47 (and $x48 $x38)))
 (let (($x78 (=> $x47 $x46)))
 (not $x78)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00024050)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00030114)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00024053)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00030117)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00024050)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00030114)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00024051) #x40
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x968afff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff4)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x968afffb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x968afff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff5) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x77)))
 (let (($x95 (= ?x100 input.dst.llvm-%n)))
 (let (($x74 (= $x95 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x41 (concat ?x49 (concat ?x23 ?x29)))))
 (let (($x90 (= input.dst.llvm-%m ?x101)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x80 (concat ?x19 (concat ?x37 ?x60)))))
 (let (($x26 (= input.dst.llvm-%n ?x146)))
 (let (($x14 (and $x26 $x90)))
 (let (($x43 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x155 (and $x43 $x14)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x154)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x144)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x131)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (and $x130 $x138)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x127 $x133)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x116 $x121)))
 (let (($x118 (not $x117)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x126 $x136)))
 (let (($x76 (and (not $x115) $x118)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x112 $x141)))
 (let (($x113 (not $x125)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x79 $x24)))
 (let (($x114 (and (not $x107) $x113)))
 (let (($x148 (and (and (and (and (and (and $x114 $x76) $x120) $x142) $x6) $x135) $x145)))
 (let (($x151 (and $x148 $x5)))
 (let (($x61 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x58 (or false (or false (and (and true (or $x82 $x7)) (or $x83 $x94))))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x58)))
 (let (($x53 (and (and (and $x91 $x61) $x151) $x155)))
 (let (($x25 (= $x53 true)))
 (let (($x12 (= $x25 true)))
 (let (($x98 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x44 (and $x98 $x12)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x21 (and $x87 $x44)))
 (let (($x96 (forall ((Lambda25 (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x75 (_ bv1 32))))
 (=> $x66 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x71 (forall ((Lambda25 (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x75 (_ bv1 32))))
 (= $x66 false)))))
 ))
 (let (($x93 (forall ((Lambda25 (_ BitVec 32)) )(let (($x69 (= false false)))
 (let (($x70 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x75 (_ bv0 32))))
 (=> $x105 $x69))))))
 ))
 (let (($x55 (forall ((Lambda25 (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x75 (_ bv0 32))))
 (= $x105 true)))))
 ))
 (let (($x84 (and $x55 $x93)))
 (let (($x18 (and $x84 $x71)))
 (let (($x102 (and $x18 $x96)))
 (let (($x50 (and $x102 $x21)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x63 (and $x106 $x50)))
 (let (($x158 (=> $x63 $x74)))
 (not $x158)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x77)))
 (let (($x95 (= ?x100 input.dst.llvm-%n)))
 (let (($x74 (= $x95 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x41 (concat ?x49 (concat ?x23 ?x29)))))
 (let (($x90 (= input.dst.llvm-%m ?x101)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x80 (concat ?x19 (concat ?x37 ?x60)))))
 (let (($x26 (= input.dst.llvm-%n ?x146)))
 (let (($x14 (and $x26 $x90)))
 (let (($x43 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x155 (and $x43 $x14)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x154)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x144)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x131)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (and $x130 $x138)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x127 $x133)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x116 $x121)))
 (let (($x118 (not $x117)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x126 $x136)))
 (let (($x76 (and (not $x115) $x118)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x112 $x141)))
 (let (($x113 (not $x125)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x79 $x24)))
 (let (($x114 (and (not $x107) $x113)))
 (let (($x148 (and (and (and (and (and (and $x114 $x76) $x120) $x142) $x6) $x135) $x145)))
 (let (($x151 (and $x148 $x5)))
 (let (($x61 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x58 (or false (or false (and (and true (or $x82 $x7)) (or $x83 $x94))))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x58)))
 (let (($x53 (and (and (and $x91 $x61) $x151) $x155)))
 (let (($x25 (= $x53 true)))
 (let (($x12 (= $x25 true)))
 (let (($x98 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x44 (and $x98 $x12)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x21 (and $x87 $x44)))
 (let (($x96 (forall ((Lambda25 (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x75 (_ bv1 32))))
 (=> $x66 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x71 (forall ((Lambda25 (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x75 (_ bv1 32))))
 (= $x66 false)))))
 ))
 (let (($x93 (forall ((Lambda25 (_ BitVec 32)) )(let (($x69 (= false false)))
 (let (($x70 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x75 (_ bv0 32))))
 (=> $x105 $x69))))))
 ))
 (let (($x55 (forall ((Lambda25 (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x75 (_ bv0 32))))
 (= $x105 true)))))
 ))
 (let (($x84 (and $x55 $x93)))
 (let (($x18 (and $x84 $x71)))
 (let (($x102 (and $x18 $x96)))
 (let (($x50 (and $x102 $x21)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x63 (and $x106 $x50)))
 (let (($x158 (=> $x63 $x74)))
 (not $x158)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x65)))
 (let (($x8 (= ?x52 input.spec-%var-n-1)))
 (let (($x16 (= $x8 true)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x95 (concat ?x85 (concat ?x21 ?x12)))))
 (let (($x158 (= input.dst.llvm-%m ?x74)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x14 (concat ?x46 (concat ?x35 ?x47)))))
 (let (($x53 (= input.dst.llvm-%n ?x155)))
 (let (($x159 (and $x53 $x158)))
 (let (($x26 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x64 (and $x26 $x159)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x68)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x119)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x154)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x145 $x5)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x144 $x151)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x130 $x143)))
 (let (($x138 (not $x131)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x142 $x150)))
 (let (($x6 (and (not $x127) $x138)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x76 $x134)))
 (let (($x120 (not $x137)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x121 $x117)))
 (let (($x123 (and (not $x118) $x120)))
 (let (($x37 (and (and (and (and (and (and $x123 $x6) $x139) $x152) $x62) $x156) $x43)))
 (let (($x60 (and $x37 $x89)))
 (let (($x124 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x115 (or false (or false (and (and true (or $x79 $x24)) (or $x125 $x113))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x115)))
 (let (($x81 (and (and (and $x116 $x124) $x60) $x64)))
 (let (($x33 (= $x81 true)))
 (let (($x109 (= $x33 true)))
 (let (($x128 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x104 (and $x128 $x109)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x48 (and $x129 $x104)))
 (let (($x17 (forall ((Lambda25 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x93 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x93 (_ bv1 32))))
 (=> $x56 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x72 (forall ((Lambda25 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x93 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x93 (_ bv1 32))))
 (= $x56 false)))))
 ))
 (let (($x34 (forall ((Lambda25 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x75 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x93 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x93 (_ bv0 32))))
 (=> $x84 $x71))))))
 ))
 (let (($x110 (forall ((Lambda25 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x93 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x93 (_ bv0 32))))
 (= $x84 true)))))
 ))
 (let (($x11 (and $x110 $x34)))
 (let (($x32 (and $x11 $x72)))
 (let (($x7 (and $x32 $x17)))
 (let (($x28 (and $x7 $x48)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x13 (and $x106 $x28)))
 (let (($x42 (=> $x13 $x16)))
 (not $x42)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x65)))
 (let (($x8 (= ?x52 input.spec-%var-n-1)))
 (let (($x16 (= $x8 true)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x95 (concat ?x85 (concat ?x21 ?x12)))))
 (let (($x158 (= input.dst.llvm-%m ?x74)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x14 (concat ?x46 (concat ?x35 ?x47)))))
 (let (($x53 (= input.dst.llvm-%n ?x155)))
 (let (($x159 (and $x53 $x158)))
 (let (($x26 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x64 (and $x26 $x159)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x68)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x119)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x154)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x145 $x5)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x144 $x151)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x130 $x143)))
 (let (($x138 (not $x131)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x142 $x150)))
 (let (($x6 (and (not $x127) $x138)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x76 $x134)))
 (let (($x120 (not $x137)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x121 $x117)))
 (let (($x123 (and (not $x118) $x120)))
 (let (($x37 (and (and (and (and (and (and $x123 $x6) $x139) $x152) $x62) $x156) $x43)))
 (let (($x60 (and $x37 $x89)))
 (let (($x124 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x115 (or false (or false (and (and true (or $x79 $x24)) (or $x125 $x113))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x115)))
 (let (($x81 (and (and (and $x116 $x124) $x60) $x64)))
 (let (($x33 (= $x81 true)))
 (let (($x109 (= $x33 true)))
 (let (($x128 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x104 (and $x128 $x109)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x48 (and $x129 $x104)))
 (let (($x17 (forall ((Lambda25 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x93 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x93 (_ bv1 32))))
 (=> $x56 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x72 (forall ((Lambda25 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x93 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x93 (_ bv1 32))))
 (= $x56 false)))))
 ))
 (let (($x34 (forall ((Lambda25 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x75 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x93 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x93 (_ bv0 32))))
 (=> $x84 $x71))))))
 ))
 (let (($x110 (forall ((Lambda25 (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x93 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x93 (_ bv0 32))))
 (= $x84 true)))))
 ))
 (let (($x11 (and $x110 $x34)))
 (let (($x32 (and $x11 $x72)))
 (let (($x7 (and $x32 $x17)))
 (let (($x28 (and $x7 $x48)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x13 (and $x106 $x28)))
 (let (($x42 (=> $x13 $x16)))
 (not $x42)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x18 ((_ extract 7 0) input.spec-%var-n-1)))
 (let (($x96 (= (_ bv0 8) ?x18)))
 (let (($x102 (= $x96 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x8 (concat ?x20 (concat ?x48 ?x109)))))
 (let (($x42 (= input.dst.llvm-%m ?x16)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x159 (concat ?x77 (concat ?x44 ?x63)))))
 (let (($x81 (= input.dst.llvm-%n ?x64)))
 (let (($x92 (and $x81 $x42)))
 (let (($x53 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x94 (and $x53 $x92)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x78)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x146)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x68)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x43 $x89)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x119 $x60)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x145 $x148)))
 (let (($x5 (not $x154)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x152 $x40)))
 (let (($x62 (and (not $x144) $x5)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x6 $x80)))
 (let (($x139 (not $x153)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x143 $x131)))
 (let (($x135 (and (not $x138) $x139)))
 (let (($x35 (and (and (and (and (and (and $x135 $x62) $x149) $x31) $x30) $x157) $x26)))
 (let (($x47 (and $x35 $x90)))
 (let (($x136 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x127 (or false (or false (and (and true (or $x121 $x117)) (or $x137 $x120))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x127)))
 (let (($x41 (and (and (and $x130 $x136) $x47) $x94)))
 (let (($x105 (= $x41 true)))
 (let (($x36 (= $x105 true)))
 (let (($x141 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x57 (and $x141 $x36)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x70 (and $x140 $x57)))
 (let (($x61 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x34 (_ bv1 32))))
 (=> $x15 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x88 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x34 (_ bv1 32))))
 (= $x15 false)))))
 ))
 (let (($x132 (forall ((Lambda25 (_ BitVec 32)) )(let (($x72 (= false false)))
 (let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x34 (_ bv0 32))))
 (=> $x11 $x72))))))
 ))
 (let (($x87 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x34 (_ bv0 32))))
 (= $x11 true)))))
 ))
 (let (($x82 (and $x87 $x132)))
 (let (($x83 (and $x82 $x88)))
 (let (($x24 (and $x83 $x61)))
 (let (($x55 (and $x24 $x70)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x69 (and $x106 $x55)))
 (let (($x98 (=> $x69 $x102)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x18 ((_ extract 7 0) input.spec-%var-n-1)))
 (let (($x96 (= (_ bv0 8) ?x18)))
 (let (($x102 (= $x96 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x8 (concat ?x20 (concat ?x48 ?x109)))))
 (let (($x42 (= input.dst.llvm-%m ?x16)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x159 (concat ?x77 (concat ?x44 ?x63)))))
 (let (($x81 (= input.dst.llvm-%n ?x64)))
 (let (($x92 (and $x81 $x42)))
 (let (($x53 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x94 (and $x53 $x92)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x78)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x146)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x68)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x43 $x89)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x119 $x60)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x145 $x148)))
 (let (($x5 (not $x154)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x152 $x40)))
 (let (($x62 (and (not $x144) $x5)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x6 $x80)))
 (let (($x139 (not $x153)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x143 $x131)))
 (let (($x135 (and (not $x138) $x139)))
 (let (($x35 (and (and (and (and (and (and $x135 $x62) $x149) $x31) $x30) $x157) $x26)))
 (let (($x47 (and $x35 $x90)))
 (let (($x136 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x127 (or false (or false (and (and true (or $x121 $x117)) (or $x137 $x120))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x127)))
 (let (($x41 (and (and (and $x130 $x136) $x47) $x94)))
 (let (($x105 (= $x41 true)))
 (let (($x36 (= $x105 true)))
 (let (($x141 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x57 (and $x141 $x36)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x70 (and $x140 $x57)))
 (let (($x61 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x34 (_ bv1 32))))
 (=> $x15 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x88 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x34 (_ bv1 32))))
 (= $x15 false)))))
 ))
 (let (($x132 (forall ((Lambda25 (_ BitVec 32)) )(let (($x72 (= false false)))
 (let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x34 (_ bv0 32))))
 (=> $x11 $x72))))))
 ))
 (let (($x87 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x34 (_ bv0 32))))
 (= $x11 true)))))
 ))
 (let (($x82 (and $x87 $x132)))
 (let (($x83 (and $x82 $x88)))
 (let (($x24 (and $x83 $x61)))
 (let (($x55 (and $x24 $x70)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x69 (and $x106 $x55)))
 (let (($x98 (=> $x69 $x102)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x40404000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #x40))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x152a8dd0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x81bccba0)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x81bccba3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x152a8dd3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x81bccba0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x152a8dd0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x81bccba0) #x40
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 ((_ extract 13 0) input.dst.llvm-%m)))
 (let (($x7 (= (_ bv0 14) ?x17)))
 (let (($x128 (= $x7 true)))
 (let ((?x36 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x102 (concat ?x59 (concat ?x70 ?x36)))))
 (let (($x99 (= input.dst.llvm-%m ?x98)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x92 (concat ?x65 (concat ?x104 ?x13)))))
 (let (($x41 (= input.dst.llvm-%n ?x94)))
 (let (($x113 (and $x41 $x99)))
 (let (($x81 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x114 (and $x81 $x113)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x100)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x155)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x26 $x90)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x146 $x47)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x43 $x37)))
 (let (($x89 (not $x68)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x31 $x38)))
 (let (($x30 (and (not $x119) $x89)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x62 $x14)))
 (let (($x149 (not $x19)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x148 $x154)))
 (let (($x156 (and (not $x5) $x149)))
 (let (($x44 (and (and (and (and (and (and $x156 $x30) $x51) $x49) $x25) $x101) $x53)))
 (let (($x63 (and $x44 $x158)))
 (let (($x150 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x144 (or false (or false (and (and true (or $x143 $x131)) (or $x153 $x139))))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x84 (and (and (and $x145 $x150) $x63) $x114)))
 (let (($x45 (= $x84 true)))
 (let (($x91 (= $x45 true)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x75 (and $x134 $x91)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x110 (and $x147 $x75)))
 (let (($x124 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x97 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x97 (_ bv1 32))))
 (=> $x24 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x140 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x97 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x97 (_ bv1 32))))
 (= $x24 false)))))
 ))
 (let (($x58 (forall ((Lambda25 (_ BitVec 32)) )(let (($x129 (= false false)))
 (let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x97 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x97 (_ bv0 32))))
 (=> $x132 $x129))))))
 ))
 (let (($x15 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x97 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x97 (_ bv0 32))))
 (= $x132 true)))))
 ))
 (let (($x54 (and $x15 $x58)))
 (let (($x125 (and $x54 $x140)))
 (let (($x117 (and $x125 $x124)))
 (let (($x71 (and $x117 $x110)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x86 (and $x112 $x71)))
 (let (($x122 (=> $x86 $x128)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 ((_ extract 13 0) input.dst.llvm-%m)))
 (let (($x7 (= (_ bv0 14) ?x17)))
 (let (($x128 (= $x7 true)))
 (let ((?x36 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x102 (concat ?x59 (concat ?x70 ?x36)))))
 (let (($x99 (= input.dst.llvm-%m ?x98)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x92 (concat ?x65 (concat ?x104 ?x13)))))
 (let (($x41 (= input.dst.llvm-%n ?x94)))
 (let (($x113 (and $x41 $x99)))
 (let (($x81 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x114 (and $x81 $x113)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x100)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x155)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x26 $x90)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x146 $x47)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x43 $x37)))
 (let (($x89 (not $x68)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x31 $x38)))
 (let (($x30 (and (not $x119) $x89)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x62 $x14)))
 (let (($x149 (not $x19)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x148 $x154)))
 (let (($x156 (and (not $x5) $x149)))
 (let (($x44 (and (and (and (and (and (and $x156 $x30) $x51) $x49) $x25) $x101) $x53)))
 (let (($x63 (and $x44 $x158)))
 (let (($x150 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x144 (or false (or false (and (and true (or $x143 $x131)) (or $x153 $x139))))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x84 (and (and (and $x145 $x150) $x63) $x114)))
 (let (($x45 (= $x84 true)))
 (let (($x91 (= $x45 true)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x75 (and $x134 $x91)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x110 (and $x147 $x75)))
 (let (($x124 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x97 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x97 (_ bv1 32))))
 (=> $x24 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x140 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x97 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x97 (_ bv1 32))))
 (= $x24 false)))))
 ))
 (let (($x58 (forall ((Lambda25 (_ BitVec 32)) )(let (($x129 (= false false)))
 (let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x97 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x97 (_ bv0 32))))
 (=> $x132 $x129))))))
 ))
 (let (($x15 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x97 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x97 (_ bv0 32))))
 (= $x132 true)))))
 ))
 (let (($x54 (and $x15 $x58)))
 (let (($x125 (and $x54 $x140)))
 (let (($x117 (and $x125 $x124)))
 (let (($x71 (and $x117 $x110)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x86 (and $x112 $x71)))
 (let (($x122 (=> $x86 $x128)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x40)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa9926614)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2a37f630)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2a37f633)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa9926617)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2a37f630)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa9926614)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x40)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 ((_ extract 5 0) input.dst.llvm-%m)))
 (let (($x61 (= (_ bv0 6) ?x79)))
 (let (($x141 (= $x61 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x128 (concat ?x32 (concat ?x110 ?x91)))))
 (let (($x73 (= input.dst.llvm-%m ?x122)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x113 (concat ?x18 (concat ?x57 ?x69)))))
 (let (($x84 (= input.dst.llvm-%n ?x114)))
 (let (($x120 (and $x84 $x73)))
 (let (($x41 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x123 (and $x41 $x120)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x52)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x64)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x155 $x100)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x85 $x158)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x146 $x26)))
 (let (($x78 (not $x35)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x157 $x49)))
 (let (($x47 (and (not $x50) $x78)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x89 $x30)))
 (let (($x46 (not $x159)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x43 $x37)))
 (let (($x12 (and (not $x68) $x46)))
 (let (($x104 (and (and (and (and (and (and $x12 $x47) $x77) $x101) $x63) $x74) $x81)))
 (let (($x13 (and $x104 $x42)))
 (let (($x152 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x38 (or false (or false (and (and true (or $x33 $x148)) (or $x14 $x19))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x38)))
 (let (($x34 (and (and (and $x60 $x152) $x13) $x123)))
 (let (($x106 (= $x34 true)))
 (let (($x116 (= $x106 true)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x111 (and $x153 $x116)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x56 (and $x138 $x111)))
 (let (($x143 (forall ((Lambda25 (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x83 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x83 (_ bv1 32))))
 (=> $x117 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x147 (forall ((Lambda25 (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x83 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x83 (_ bv1 32))))
 (= $x117 false)))))
 ))
 (let (($x115 (forall ((Lambda25 (_ BitVec 32)) )(let (($x107 (= false false)))
 (let (($x11 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x83 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x83 (_ bv0 32))))
 (=> $x58 $x107))))))
 ))
 (let (($x24 (forall ((Lambda25 (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x83 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x83 (_ bv0 32))))
 (= $x58 true)))))
 ))
 (let (($x67 (and $x24 $x115)))
 (let (($x76 (and $x67 $x147)))
 (let (($x136 (and $x76 $x143)))
 (let (($x87 (and $x136 $x56)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x72 (and $x27 $x87)))
 (let (($x133 (=> $x72 $x141)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 ((_ extract 5 0) input.dst.llvm-%m)))
 (let (($x61 (= (_ bv0 6) ?x79)))
 (let (($x141 (= $x61 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x128 (concat ?x32 (concat ?x110 ?x91)))))
 (let (($x73 (= input.dst.llvm-%m ?x122)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x113 (concat ?x18 (concat ?x57 ?x69)))))
 (let (($x84 (= input.dst.llvm-%n ?x114)))
 (let (($x120 (and $x84 $x73)))
 (let (($x41 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x123 (and $x41 $x120)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x52)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x64)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x155 $x100)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x85 $x158)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x146 $x26)))
 (let (($x78 (not $x35)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x157 $x49)))
 (let (($x47 (and (not $x50) $x78)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x89 $x30)))
 (let (($x46 (not $x159)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x43 $x37)))
 (let (($x12 (and (not $x68) $x46)))
 (let (($x104 (and (and (and (and (and (and $x12 $x47) $x77) $x101) $x63) $x74) $x81)))
 (let (($x13 (and $x104 $x42)))
 (let (($x152 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x38 (or false (or false (and (and true (or $x33 $x148)) (or $x14 $x19))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x38)))
 (let (($x34 (and (and (and $x60 $x152) $x13) $x123)))
 (let (($x106 (= $x34 true)))
 (let (($x116 (= $x106 true)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x111 (and $x153 $x116)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x56 (and $x138 $x111)))
 (let (($x143 (forall ((Lambda25 (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x83 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x83 (_ bv1 32))))
 (=> $x117 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x147 (forall ((Lambda25 (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x83 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x83 (_ bv1 32))))
 (= $x117 false)))))
 ))
 (let (($x115 (forall ((Lambda25 (_ BitVec 32)) )(let (($x107 (= false false)))
 (let (($x11 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x83 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x83 (_ bv0 32))))
 (=> $x58 $x107))))))
 ))
 (let (($x24 (forall ((Lambda25 (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x83 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x83 (_ bv0 32))))
 (= $x58 true)))))
 ))
 (let (($x67 (and $x24 $x115)))
 (let (($x76 (and $x67 $x147)))
 (let (($x136 (and $x76 $x143)))
 (let (($x87 (and $x136 $x56)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x72 (and $x27 $x87)))
 (let (($x133 (=> $x72 $x141)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x04))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x910e555c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6a2e5580)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6a2e5583)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x910e555f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6a2e5580)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x910e555c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08080808)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x08080808)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 ((_ extract 5 0) input.dst.llvm-%m)))
 (let ((?x140 ((_ extract 5 0) input.spec-%var-n-1)))
 (let ((?x124 (bvmul ?x140 (_ bv63 6))))
 (let ((?x137 (bvneg ?x124)))
 (let (($x151 (= ?x137 ?x130)))
 (let (($x103 (= $x151 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x141 (concat ?x88 (concat ?x56 ?x116)))))
 (let (($x39 (= input.dst.llvm-%m ?x133)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x120 (concat ?x17 (concat ?x75 ?x86)))))
 (let (($x34 (= input.dst.llvm-%n ?x123)))
 (let (($x80 (and $x34 $x39)))
 (let (($x84 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x139 (and $x84 $x80)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x96)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x94)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x81 $x42)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x64 $x13)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x155 $x53)))
 (let (($x100 (not $x44)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x101 $x28)))
 (let (($x63 (and (not $x85) $x100)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x47 $x92)))
 (let (($x77 (not $x25)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x26 $x35)))
 (let (($x23 (and (not $x78) $x77)))
 (let (($x57 (and (and (and (and (and (and $x23 $x63) $x95) $x20) $x8) $x16) $x41)))
 (let (($x69 (and $x57 $x99)))
 (let (($x31 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x50 (or false (or false (and (and true (or $x43 $x37)) (or $x159 $x46))))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x50)))
 (let (($x97 (and (and (and $x146 $x31) $x69) $x139)))
 (let (($x112 (= $x97 true)))
 (let (($x127 (= $x112 true)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x93 (and $x62 $x127)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x82 (and $x5 $x93)))
 (let (($x142 (forall ((Lambda25 (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x125 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x125 (_ bv1 32))))
 (=> $x136 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x138 (forall ((Lambda25 (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x125 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x125 (_ bv1 32))))
 (= $x136 false)))))
 ))
 (let (($x134 (forall ((Lambda25 (_ BitVec 32)) )(let (($x118 (= false false)))
 (let (($x58 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x125 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x125 (_ bv0 32))))
 (=> $x115 $x118))))))
 ))
 (let (($x117 (forall ((Lambda25 (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x125 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x125 (_ bv0 32))))
 (= $x115 true)))))
 ))
 (let (($x126 (and $x117 $x134)))
 (let (($x6 (and $x126 $x138)))
 (let (($x148 (and $x6 $x142)))
 (let (($x15 (and $x148 $x82)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x129 (and $x27 $x15)))
 (let (($x160 (=> $x129 $x103)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 ((_ extract 5 0) input.dst.llvm-%m)))
 (let ((?x140 ((_ extract 5 0) input.spec-%var-n-1)))
 (let ((?x124 (bvmul ?x140 (_ bv63 6))))
 (let ((?x137 (bvneg ?x124)))
 (let (($x151 (= ?x137 ?x130)))
 (let (($x103 (= $x151 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x141 (concat ?x88 (concat ?x56 ?x116)))))
 (let (($x39 (= input.dst.llvm-%m ?x133)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x120 (concat ?x17 (concat ?x75 ?x86)))))
 (let (($x34 (= input.dst.llvm-%n ?x123)))
 (let (($x80 (and $x34 $x39)))
 (let (($x84 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x139 (and $x84 $x80)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x96)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x94)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x81 $x42)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x64 $x13)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x155 $x53)))
 (let (($x100 (not $x44)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x101 $x28)))
 (let (($x63 (and (not $x85) $x100)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x47 $x92)))
 (let (($x77 (not $x25)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x26 $x35)))
 (let (($x23 (and (not $x78) $x77)))
 (let (($x57 (and (and (and (and (and (and $x23 $x63) $x95) $x20) $x8) $x16) $x41)))
 (let (($x69 (and $x57 $x99)))
 (let (($x31 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x50 (or false (or false (and (and true (or $x43 $x37)) (or $x159 $x46))))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x50)))
 (let (($x97 (and (and (and $x146 $x31) $x69) $x139)))
 (let (($x112 (= $x97 true)))
 (let (($x127 (= $x112 true)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x93 (and $x62 $x127)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x82 (and $x5 $x93)))
 (let (($x142 (forall ((Lambda25 (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x125 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x125 (_ bv1 32))))
 (=> $x136 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x138 (forall ((Lambda25 (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x125 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x125 (_ bv1 32))))
 (= $x136 false)))))
 ))
 (let (($x134 (forall ((Lambda25 (_ BitVec 32)) )(let (($x118 (= false false)))
 (let (($x58 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x125 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x125 (_ bv0 32))))
 (=> $x115 $x118))))))
 ))
 (let (($x117 (forall ((Lambda25 (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x125 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x125 (_ bv0 32))))
 (= $x115 true)))))
 ))
 (let (($x126 (and $x117 $x134)))
 (let (($x6 (and $x126 $x138)))
 (let (($x148 (and $x6 $x142)))
 (let (($x15 (and $x148 $x82)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x129 (and $x27 $x15)))
 (let (($x160 (=> $x129 $x103)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x20000010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00080000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x01010100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x20000013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00080003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x20000010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00080000) #x00
      #x01))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x77262b9c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x95531bb8)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x20202000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x95531bbb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x77262b9f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x95531bb8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x77262b9c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x20202000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x20202000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x95531bb8) #x00
      #x20))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x107 (= (_ bv0 2) ?x24)))
 (let (($x147 (= $x107 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x137 (concat ?x140 (concat ?x82 ?x127)))))
 (let (($x151 (= input.dst.llvm-%m ?x130)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x80 (concat ?x79 (concat ?x111 ?x72)))))
 (let (($x97 (= input.dst.llvm-%n ?x139)))
 (let (($x103 (and $x97 $x151)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x160 (and $x34 $x103)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x7)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x114)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x41 $x99)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x94 $x69)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x81 $x104)))
 (let (($x42 (not $x52)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x20 $x55)))
 (let (($x8 (and (not $x64) $x42)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x63 $x113)))
 (let (($x95 (not $x65)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x53 $x44)))
 (let (($x74 (and (not $x100) $x95)))
 (let (($x75 (and (and (and (and (and (and $x74 $x8) $x48) $x59) $x102) $x98) $x84)))
 (let (($x86 (and $x75 $x73)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x45)))
 (let (($x85 (or false (or false (and (and true (or $x26 $x35)) (or $x25 $x77))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x149 (and (and (and $x155 $x49) $x86) $x160)))
 (let (($x106 (= $x149 true)))
 (let (($x128 (= $x106 true)))
 (let (($x30 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x11 (and $x30 $x128)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x66 (and $x51 $x11)))
 (let (($x152 (forall ((Lambda25 (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x76 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x76 (_ bv1 32))))
 (=> $x148 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x5 (forall ((Lambda25 (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x76 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x76 (_ bv1 32))))
 (= $x148 false)))))
 ))
 (let (($x40 (forall ((Lambda25 (_ BitVec 32)) )(let (($x131 (= false false)))
 (let (($x132 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x76 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x76 (_ bv0 32))))
 (=> $x134 $x131))))))
 ))
 (let (($x136 (forall ((Lambda25 (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x76 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x76 (_ bv0 32))))
 (= $x134 true)))))
 ))
 (let (($x150 (and $x136 $x40)))
 (let (($x14 (and $x150 $x5)))
 (let (($x37 (and $x14 $x152)))
 (let (($x144 (and $x37 $x66)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x9 (and $x27 $x144)))
 (let (($x108 (=> $x9 $x147)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x107 (= (_ bv0 2) ?x24)))
 (let (($x147 (= $x107 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x137 (concat ?x140 (concat ?x82 ?x127)))))
 (let (($x151 (= input.dst.llvm-%m ?x130)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x80 (concat ?x79 (concat ?x111 ?x72)))))
 (let (($x97 (= input.dst.llvm-%n ?x139)))
 (let (($x103 (and $x97 $x151)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x160 (and $x34 $x103)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x7)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x114)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x41 $x99)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x94 $x69)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x81 $x104)))
 (let (($x42 (not $x52)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x20 $x55)))
 (let (($x8 (and (not $x64) $x42)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x63 $x113)))
 (let (($x95 (not $x65)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x53 $x44)))
 (let (($x74 (and (not $x100) $x95)))
 (let (($x75 (and (and (and (and (and (and $x74 $x8) $x48) $x59) $x102) $x98) $x84)))
 (let (($x86 (and $x75 $x73)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x45)))
 (let (($x85 (or false (or false (and (and true (or $x26 $x35)) (or $x25 $x77))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x149 (and (and (and $x155 $x49) $x86) $x160)))
 (let (($x106 (= $x149 true)))
 (let (($x128 (= $x106 true)))
 (let (($x30 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x11 (and $x30 $x128)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x66 (and $x51 $x11)))
 (let (($x152 (forall ((Lambda25 (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x76 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x76 (_ bv1 32))))
 (=> $x148 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x5 (forall ((Lambda25 (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x76 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x76 (_ bv1 32))))
 (= $x148 false)))))
 ))
 (let (($x40 (forall ((Lambda25 (_ BitVec 32)) )(let (($x131 (= false false)))
 (let (($x132 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x76 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x76 (_ bv0 32))))
 (=> $x134 $x131))))))
 ))
 (let (($x136 (forall ((Lambda25 (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x76 (ite $x132 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (= ?x76 (_ bv0 32))))
 (= $x134 true)))))
 ))
 (let (($x150 (and $x136 $x40)))
 (let (($x14 (and $x150 $x5)))
 (let (($x37 (and $x14 $x152)))
 (let (($x144 (and $x37 $x66)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x9 (and $x27 $x144)))
 (let (($x108 (=> $x9 $x147)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x142 (= $x33 true)))
 (let (($x62 (= $x142 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x107 (concat ?x9 (concat ?x11 ?x106)))))
 (let (($x108 (= input.dst.llvm-%m ?x147)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x151 (concat ?x15 (concat ?x140 ?x137)))))
 (let (($x160 (= input.dst.llvm-%n ?x103)))
 (let (($x143 (and $x160 $x108)))
 (let (($x139 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x12 (and $x139 $x143)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x34)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x122)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x114 $x7)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x32 $x73)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x94 $x41)))
 (let (($x96 (not $x57)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x16 $x59)))
 (let (($x69 (and (not $x71) $x96)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x42 $x8)))
 (let (($x18 (not $x120)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x81 $x104)))
 (let (($x91 (and (not $x52) $x18)))
 (let (($x88 (and (and (and (and (and (and $x91 $x69) $x17) $x98) $x86) $x110) $x123)))
 (let (($x111 (and $x88 $x61)))
 (let (($x101 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x55 (or false (or false (and (and true (or $x161 $x53)) (or $x113 $x65))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x55)))
 (let (($x125 (and (and (and $x13 $x101) $x111) $x12)))
 (let (($x21 (= $x125 true)))
 (let (($x60 (= $x21 true)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x83 (and $x25 $x60)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x67 (and $x78 $x83)))
 (let (($x26 (forall ((Lambda25 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x6 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x6 (_ bv1 32))))
 (=> $x37 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x51 (forall ((Lambda25 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x6 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x6 (_ bv1 32))))
 (= $x37 false)))))
 ))
 (let (($x38 (forall ((Lambda25 (_ BitVec 32)) )(let (($x154 (= false false)))
 (let (($x115 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x6 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x6 (_ bv0 32))))
 (=> $x40 $x154))))))
 ))
 (let (($x148 (forall ((Lambda25 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x6 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x6 (_ bv0 32))))
 (= $x40 true)))))
 ))
 (let (($x105 (and $x148 $x38)))
 (let (($x89 (and $x105 $x51)))
 (let (($x31 (and $x89 $x26)))
 (let (($x117 (and $x31 $x67)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x118 (and $x29 $x117)))
 (let (($x90 (=> $x118 $x62)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x142 (= $x33 true)))
 (let (($x62 (= $x142 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x107 (concat ?x9 (concat ?x11 ?x106)))))
 (let (($x108 (= input.dst.llvm-%m ?x147)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x151 (concat ?x15 (concat ?x140 ?x137)))))
 (let (($x160 (= input.dst.llvm-%n ?x103)))
 (let (($x143 (and $x160 $x108)))
 (let (($x139 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x12 (and $x139 $x143)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x34)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x122)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x75)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x114 $x7)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x32 $x73)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x94 $x41)))
 (let (($x96 (not $x57)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x16 $x59)))
 (let (($x69 (and (not $x71) $x96)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x42 $x8)))
 (let (($x18 (not $x120)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x81 $x104)))
 (let (($x91 (and (not $x52) $x18)))
 (let (($x88 (and (and (and (and (and (and $x91 $x69) $x17) $x98) $x86) $x110) $x123)))
 (let (($x111 (and $x88 $x61)))
 (let (($x101 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x55 (or false (or false (and (and true (or $x161 $x53)) (or $x113 $x65))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x55)))
 (let (($x125 (and (and (and $x13 $x101) $x111) $x12)))
 (let (($x21 (= $x125 true)))
 (let (($x60 (= $x21 true)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x83 (and $x25 $x60)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x67 (and $x78 $x83)))
 (let (($x26 (forall ((Lambda25 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x6 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x6 (_ bv1 32))))
 (=> $x37 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x51 (forall ((Lambda25 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x6 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x6 (_ bv1 32))))
 (= $x37 false)))))
 ))
 (let (($x38 (forall ((Lambda25 (_ BitVec 32)) )(let (($x154 (= false false)))
 (let (($x115 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x6 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x6 (_ bv0 32))))
 (=> $x40 $x154))))))
 ))
 (let (($x148 (forall ((Lambda25 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x6 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x6 (_ bv0 32))))
 (= $x40 true)))))
 ))
 (let (($x105 (and $x148 $x38)))
 (let (($x89 (and $x105 $x51)))
 (let (($x31 (and $x89 $x26)))
 (let (($x117 (and $x31 $x67)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x118 (and $x29 $x117)))
 (let (($x90 (=> $x118 $x62)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9e14882c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7fffd828)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffd82b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9e14882f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7fffd828)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9e14882c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x9e14882c) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x152 (= $x43 true)))
 (let (($x159 (= $x152 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x142 (concat ?x118 (concat ?x83 ?x21)))))
 (let (($x90 (= input.dst.llvm-%m ?x62)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x108 (concat ?x66 (concat ?x9 ?x107)))))
 (let (($x12 (= input.dst.llvm-%n ?x143)))
 (let (($x135 (and $x12 $x90)))
 (let (($x103 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x77 (and $x103 $x135)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x139)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x56)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x122 $x34)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x79 $x61)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x32 $x114)))
 (let (($x75 (not $x84)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x70 $x98)))
 (let (($x73 (and (not $x116) $x75)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x96 $x69)))
 (let (($x102 (not $x39)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x94 $x41)))
 (let (($x80 (and (not $x57) $x102)))
 (let (($x129 (and (and (and (and (and (and $x80 $x73) $x87) $x110) $x111) $x72) $x133)))
 (let (($x140 (and $x129 $x97)))
 (let (($x74 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x59 (or false (or false (and (and true (or $x112 $x81)) (or $x8 $x120))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x59)))
 (let (($x76 (and (and (and $x99 $x74) $x140) $x77)))
 (let (($x27 (= $x76 true)))
 (let (($x50 (= $x27 true)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x58 (and $x113 $x50)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x126 (and $x44 $x58)))
 (let (($x161 (forall ((Lambda25 (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x14 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x14 (_ bv1 32))))
 (=> $x31 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x78 (forall ((Lambda25 (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x14 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x14 (_ bv1 32))))
 (= $x31 false)))))
 ))
 (let (($x30 (forall ((Lambda25 (_ BitVec 32)) )(let (($x68 (= false false)))
 (let (($x134 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x14 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x14 (_ bv0 32))))
 (=> $x38 $x68))))))
 ))
 (let (($x37 (forall ((Lambda25 (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x14 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x14 (_ bv0 32))))
 (= $x38 true)))))
 ))
 (let (($x156 (and $x37 $x30)))
 (let (($x109 (and $x156 $x78)))
 (let (($x157 (and $x109 $x161)))
 (let (($x136 (and $x157 $x126)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x131 (and $x46 $x136)))
 (let (($x146 (=> $x131 $x159)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x152 (= $x43 true)))
 (let (($x159 (= $x152 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x142 (concat ?x118 (concat ?x83 ?x21)))))
 (let (($x90 (= input.dst.llvm-%m ?x62)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x108 (concat ?x66 (concat ?x9 ?x107)))))
 (let (($x12 (= input.dst.llvm-%n ?x143)))
 (let (($x135 (and $x12 $x90)))
 (let (($x103 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x77 (and $x103 $x135)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x139)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x56)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x122 $x34)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x79 $x61)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x32 $x114)))
 (let (($x75 (not $x84)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x70 $x98)))
 (let (($x73 (and (not $x116) $x75)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x96 $x69)))
 (let (($x102 (not $x39)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x94 $x41)))
 (let (($x80 (and (not $x57) $x102)))
 (let (($x129 (and (and (and (and (and (and $x80 $x73) $x87) $x110) $x111) $x72) $x133)))
 (let (($x140 (and $x129 $x97)))
 (let (($x74 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x59 (or false (or false (and (and true (or $x112 $x81)) (or $x8 $x120))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x59)))
 (let (($x76 (and (and (and $x99 $x74) $x140) $x77)))
 (let (($x27 (= $x76 true)))
 (let (($x50 (= $x27 true)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x58 (and $x113 $x50)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x126 (and $x44 $x58)))
 (let (($x161 (forall ((Lambda25 (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x14 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x14 (_ bv1 32))))
 (=> $x31 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x78 (forall ((Lambda25 (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x14 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x14 (_ bv1 32))))
 (= $x31 false)))))
 ))
 (let (($x30 (forall ((Lambda25 (_ BitVec 32)) )(let (($x68 (= false false)))
 (let (($x134 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x14 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x14 (_ bv0 32))))
 (=> $x38 $x68))))))
 ))
 (let (($x37 (forall ((Lambda25 (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x14 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x14 (_ bv0 32))))
 (= $x38 true)))))
 ))
 (let (($x156 (and $x37 $x30)))
 (let (($x109 (and $x156 $x78)))
 (let (($x157 (and $x109 $x161)))
 (let (($x136 (and $x157 $x126)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x131 (and $x46 $x136)))
 (let (($x146 (=> $x131 $x159)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000b) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x092c2850)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x092c2853)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x092c2850)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x45 (= $x51 true)))
 (let (($x26 (= $x45 true)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x152 (concat ?x131 (concat ?x58 ?x27)))))
 (let (($x146 (= input.dst.llvm-%m ?x159)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x90 (concat ?x67 (concat ?x118 ?x142)))))
 (let (($x77 (= input.dst.llvm-%n ?x135)))
 (let (($x158 (and $x77 $x146)))
 (let (($x143 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x65 (and $x143 $x158)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x103)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x93)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x56 $x139)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x15 $x97)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x123 (and $x79 $x122)))
 (let (($x88 (not $x123)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x19 $x110)))
 (let (($x61 (and (not $x82) $x88)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x75 $x73)))
 (let (($x86 (not $x130)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x32 $x114)))
 (let (($x151 (and (not $x84) $x86)))
 (let (($x144 (and (and (and (and (and (and $x151 $x61) $x127) $x72) $x140) $x137) $x121)))
 (let (($x9 (and $x144 $x160)))
 (let (($x91 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x98 (or false (or false (and (and true (or $x149 $x94)) (or $x69 $x39))))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x6 (and (and (and $x7 $x91) $x9) $x65)))
 (let (($x29 (= $x6 true)))
 (let (($x28 (= $x29 true)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x132 (and $x8 $x28)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x150 (and $x104 $x132)))
 (let (($x112 (forall ((Lambda25 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x89 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x89 (_ bv1 32))))
 (=> $x157 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x44 (forall ((Lambda25 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x89 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x89 (_ bv1 32))))
 (= $x157 false)))))
 ))
 (let (($x25 (forall ((Lambda25 (_ BitVec 32)) )(let (($x35 (= false false)))
 (let (($x40 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x89 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x89 (_ bv0 32))))
 (=> $x30 $x35))))))
 ))
 (let (($x31 (forall ((Lambda25 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x89 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x89 (_ bv0 32))))
 (= $x30 true)))))
 ))
 (let (($x155 (and $x31 $x25)))
 (let (($x100 (and $x155 $x44)))
 (let (($x23 (and $x100 $x112)))
 (let (($x148 (and $x23 $x150)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x154 (and $x92 $x148)))
 (let (($x47 (=> $x154 $x26)))
 (not $x47))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x45 (= $x51 true)))
 (let (($x26 (= $x45 true)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x152 (concat ?x131 (concat ?x58 ?x27)))))
 (let (($x146 (= input.dst.llvm-%m ?x159)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x90 (concat ?x67 (concat ?x118 ?x142)))))
 (let (($x77 (= input.dst.llvm-%n ?x135)))
 (let (($x158 (and $x77 $x146)))
 (let (($x143 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x65 (and $x143 $x158)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x103)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x93)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x56 $x139)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x15 $x97)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x123 (and $x79 $x122)))
 (let (($x88 (not $x123)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x19 $x110)))
 (let (($x61 (and (not $x82) $x88)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x75 $x73)))
 (let (($x86 (not $x130)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x32 $x114)))
 (let (($x151 (and (not $x84) $x86)))
 (let (($x144 (and (and (and (and (and (and $x151 $x61) $x127) $x72) $x140) $x137) $x121)))
 (let (($x9 (and $x144 $x160)))
 (let (($x91 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x98 (or false (or false (and (and true (or $x149 $x94)) (or $x69 $x39))))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x6 (and (and (and $x7 $x91) $x9) $x65)))
 (let (($x29 (= $x6 true)))
 (let (($x28 (= $x29 true)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x132 (and $x8 $x28)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x150 (and $x104 $x132)))
 (let (($x112 (forall ((Lambda25 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x89 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x89 (_ bv1 32))))
 (=> $x157 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x44 (forall ((Lambda25 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x89 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x89 (_ bv1 32))))
 (= $x157 false)))))
 ))
 (let (($x25 (forall ((Lambda25 (_ BitVec 32)) )(let (($x35 (= false false)))
 (let (($x40 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x89 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x89 (_ bv0 32))))
 (=> $x30 $x35))))))
 ))
 (let (($x31 (forall ((Lambda25 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x89 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x89 (_ bv0 32))))
 (= $x30 true)))))
 ))
 (let (($x155 (and $x31 $x25)))
 (let (($x100 (and $x155 $x44)))
 (let (($x23 (and $x100 $x112)))
 (let (($x148 (and $x23 $x150)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x154 (and $x92 $x148)))
 (let (($x47 (=> $x154 $x26)))
 (not $x47))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x166 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x172 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x162 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x162 (_ bv1 32)))))
 ))
 (let (($x165 (forall ((Lambda25 (_ BitVec 32)) )(= true (= (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 ))
 (let (($x167 (and $x165 $x166)))
 (let (($x173 (and $x167 $x172)))
 (let (($x174 (and $x173 $x166)))
 (let (($x175 (= $x174 true)))
 (let (($x176 (= $x175 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x26 (concat ?x154 (concat ?x132 ?x29)))))
 (let (($x85 (= input.dst.llvm-%m ?x47)))
 (let ((?x152 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x158 (concat ?x146 (concat ?x126 (concat ?x131 ?x152)))))
 (let (($x65 (= input.dst.llvm-%n ?x158)))
 (let (($x120 (and $x65 $x85)))
 (let (($x135 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x76 (and $x135 $x120)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x143)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x128)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x144)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (and $x93 $x103)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x66 $x160)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x15 $x56)))
 (let (($x129 (not $x133)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x141 $x72)))
 (let (($x97 (and (not $x11) $x129)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x88 $x61)))
 (let (($x111 (not $x147)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x79 $x122)))
 (let (($x108 (and (not $x123) $x111)))
 (let (($x117 (and (and (and (and (and (and $x108 $x97) $x106) $x137) $x9) $x107) $x54)))
 (let (($x118 (and $x117 $x12)))
 (let (($x80 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x91)))
 (let (($x110 (or false (or false (and (and true (or $x125 $x32)) (or $x73 $x130))))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x110)))
 (let (($x46 (and (and (and $x34 $x80) $x118) $x76)))
 (let (($x20 (= $x46 true)))
 (let (($x115 (= $x20 true)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x105 (and $x69 $x115)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x37 (and $x41 $x105)))
 (let (($x149 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x109 (_ bv1 32))))
 (=> $x23 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x109 (_ bv1 32))))
 (= $x23 false)))))
 ))
 (let (($x113 (forall ((Lambda25 (_ BitVec 32)) )(let (($x53 (= false false)))
 (let (($x38 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x109 (_ bv0 32))))
 (=> $x25 $x53))))))
 ))
 (let (($x157 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x109 (_ bv0 32))))
 (= $x25 true)))))
 ))
 (let (($x13 (and $x157 $x113)))
 (let (($x52 (and $x13 $x104)))
 (let (($x95 (and $x52 $x149)))
 (let (($x68 (and $x95 $x37)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x78 (and $x42 $x68)))
 (let (($x177 (=> $x78 $x176)))
 (not $x177)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x166 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x172 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x162 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x162 (_ bv1 32)))))
 ))
 (let (($x165 (forall ((Lambda25 (_ BitVec 32)) )(= true (= (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 ))
 (let (($x167 (and $x165 $x166)))
 (let (($x173 (and $x167 $x172)))
 (let (($x174 (and $x173 $x166)))
 (let (($x175 (= $x174 true)))
 (let (($x176 (= $x175 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x26 (concat ?x154 (concat ?x132 ?x29)))))
 (let (($x85 (= input.dst.llvm-%m ?x47)))
 (let ((?x152 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x158 (concat ?x146 (concat ?x126 (concat ?x131 ?x152)))))
 (let (($x65 (= input.dst.llvm-%n ?x158)))
 (let (($x120 (and $x65 $x85)))
 (let (($x135 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x76 (and $x135 $x120)))
 (let ((?x143 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x143)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x128)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x144)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (and $x93 $x103)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x66 $x160)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x15 $x56)))
 (let (($x129 (not $x133)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x141 $x72)))
 (let (($x97 (and (not $x11) $x129)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x88 $x61)))
 (let (($x111 (not $x147)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x79 $x122)))
 (let (($x108 (and (not $x123) $x111)))
 (let (($x117 (and (and (and (and (and (and $x108 $x97) $x106) $x137) $x9) $x107) $x54)))
 (let (($x118 (and $x117 $x12)))
 (let (($x80 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x91)))
 (let (($x110 (or false (or false (and (and true (or $x125 $x32)) (or $x73 $x130))))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x110)))
 (let (($x46 (and (and (and $x34 $x80) $x118) $x76)))
 (let (($x20 (= $x46 true)))
 (let (($x115 (= $x20 true)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x105 (and $x69 $x115)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x37 (and $x41 $x105)))
 (let (($x149 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x109 (_ bv1 32))))
 (=> $x23 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x109 (_ bv1 32))))
 (= $x23 false)))))
 ))
 (let (($x113 (forall ((Lambda25 (_ BitVec 32)) )(let (($x53 (= false false)))
 (let (($x38 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x109 (_ bv0 32))))
 (=> $x25 $x53))))))
 ))
 (let (($x157 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x109 (_ bv0 32))))
 (= $x25 true)))))
 ))
 (let (($x13 (and $x157 $x113)))
 (let (($x52 (and $x13 $x104)))
 (let (($x95 (and $x52 $x149)))
 (let (($x68 (and $x95 $x37)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x78 (and $x42 $x68)))
 (let (($x177 (=> $x78 $x176)))
 (not $x177)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x101 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x161 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%m)) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x156 (_ bv1 32)))))
 ))
 (let (($x44 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%m)) (_ bv1 32) (_ bv0 32))))
 (= true (= ?x156 (_ bv0 32)))))
 ))
 (let (($x112 (and $x44 $x101)))
 (let (($x36 (and $x112 $x161)))
 (let (($x55 (and $x36 $x101)))
 (let (($x71 (= $x55 true)))
 (let (($x64 (= $x71 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x145 (concat ?x78 (concat ?x105 ?x20)))))
 (let (($x163 (= input.dst.llvm-%m ?x162)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x85 (concat ?x150 (concat ?x154 ?x26)))))
 (let (($x76 (= input.dst.llvm-%n ?x120)))
 (let (($x164 (and $x76 $x163)))
 (let (($x158 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x165 (and $x158 $x164)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x135)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x60)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (and $x128 $x143)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x67 $x12)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (and $x66 $x93)))
 (let (($x144 (not $x121)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x124 $x137)))
 (let (($x160 (and (not $x83) $x144)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x129 $x97)))
 (let (($x140 (not $x62)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x15 $x56)))
 (let (($x90 (and (not $x133) $x140)))
 (let (($x136 (and (and (and (and (and (and $x90 $x160) $x21) $x107) $x118) $x142) $x138)))
 (let (($x131 (and $x136 $x77)))
 (let (($x151 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x80 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x80)))
 (let (($x72 (or false (or false (and (and true (or $x33 $x79)) (or $x61 $x147))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x72)))
 (let (($x170 (and (and (and $x139 $x151) $x131) $x165)))
 (let (($x171 (= $x170 true)))
 (let (($x172 (= $x171 true)))
 (let (($x73 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x173 (and $x73 $x172)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x174 (and $x114 $x173)))
 (let (($x125 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x100 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x100 (_ bv1 32))))
 (=> $x95 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x41 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x100 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x100 (_ bv1 32))))
 (= $x95 false)))))
 ))
 (let (($x8 (forall ((Lambda25 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x100 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x100 (_ bv0 32))))
 (=> $x113 $x81))))))
 ))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x100 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x100 (_ bv0 32))))
 (= $x113 true)))))
 ))
 (let (($x99 (and $x23 $x8)))
 (let (($x57 (and $x99 $x41)))
 (let (($x18 (and $x57 $x125)))
 (let (($x175 (and $x18 $x174)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x176 (and $x96 $x175)))
 (let (($x168 (=> $x176 $x64)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x101 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x161 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%m)) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x156 (_ bv1 32)))))
 ))
 (let (($x44 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%m)) (_ bv1 32) (_ bv0 32))))
 (= true (= ?x156 (_ bv0 32)))))
 ))
 (let (($x112 (and $x44 $x101)))
 (let (($x36 (and $x112 $x161)))
 (let (($x55 (and $x36 $x101)))
 (let (($x71 (= $x55 true)))
 (let (($x64 (= $x71 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x145 (concat ?x78 (concat ?x105 ?x20)))))
 (let (($x163 (= input.dst.llvm-%m ?x162)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x85 (concat ?x150 (concat ?x154 ?x26)))))
 (let (($x76 (= input.dst.llvm-%n ?x120)))
 (let (($x164 (and $x76 $x163)))
 (let (($x158 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x165 (and $x158 $x164)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x135)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x60)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (and $x128 $x143)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x67 $x12)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (and $x66 $x93)))
 (let (($x144 (not $x121)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x124 $x137)))
 (let (($x160 (and (not $x83) $x144)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x129 $x97)))
 (let (($x140 (not $x62)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x15 $x56)))
 (let (($x90 (and (not $x133) $x140)))
 (let (($x136 (and (and (and (and (and (and $x90 $x160) $x21) $x107) $x118) $x142) $x138)))
 (let (($x131 (and $x136 $x77)))
 (let (($x151 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x80 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x80)))
 (let (($x72 (or false (or false (and (and true (or $x33 $x79)) (or $x61 $x147))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x72)))
 (let (($x170 (and (and (and $x139 $x151) $x131) $x165)))
 (let (($x171 (= $x170 true)))
 (let (($x172 (= $x171 true)))
 (let (($x73 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x173 (and $x73 $x172)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x174 (and $x114 $x173)))
 (let (($x125 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x100 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x100 (_ bv1 32))))
 (=> $x95 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x41 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x100 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x100 (_ bv1 32))))
 (= $x95 false)))))
 ))
 (let (($x8 (forall ((Lambda25 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x100 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x100 (_ bv0 32))))
 (=> $x113 $x81))))))
 ))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x100 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x100 (_ bv0 32))))
 (= $x113 true)))))
 ))
 (let (($x99 (and $x23 $x8)))
 (let (($x57 (and $x99 $x41)))
 (let (($x18 (and $x57 $x125)))
 (let (($x175 (and $x18 $x174)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x176 (and $x96 $x175)))
 (let (($x168 (=> $x176 $x64)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun Lambda25!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda25!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xddbf7764)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2fb4bde0)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2fb4bde3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xddbf7767)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2fb4bde0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xddbf7764)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xddbf7764) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x178 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x155 (_ bv1 32)))))
 ))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (= true (= ?x155 (_ bv0 32)))))
 ))
 (let (($x149 (and $x104 $x74)))
 (let (($x39 (and $x149 $x178)))
 (let (($x6 (and $x39 $x74)))
 (let (($x43 (= $x6 true)))
 (let (($x89 (= $x43 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x134 (concat ?x176 (concat ?x173 ?x171)))))
 (let (($x31 (= input.dst.llvm-%m ?x156)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x163 (concat ?x37 (concat ?x78 ?x145)))))
 (let (($x165 (= input.dst.llvm-%n ?x164)))
 (let (($x35 (and $x165 $x31)))
 (let (($x120 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x44 (and $x120 $x35)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x158)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x50)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (and $x60 $x135)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x126 $x77)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x67 $x128)))
 (let (($x117 (not $x54)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x24 $x107)))
 (let (($x12 (and (not $x58) $x117)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x144 $x160)))
 (let (($x9 (not $x159)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x66 $x93)))
 (let (($x146 (and (not $x121) $x9)))
 (let (($x148 (and (and (and (and (and (and $x146 $x12) $x27) $x142) $x131) $x152) $x5)))
 (let (($x154 (and $x148 $x65)))
 (let (($x108 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x137 (or false (or false (and (and true (or $x166 $x15)) (or $x97 $x62))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x137)))
 (let (($x116 (and (and (and $x103 $x108) $x154) $x44)))
 (let (($x49 (= $x116 true)))
 (let (($x161 (= $x49 true)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x36 (and $x61 $x161)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x55 (and $x122 $x36)))
 (let (($x33 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x52 (_ bv1 32))))
 (=> $x18 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x114 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x52 (_ bv1 32))))
 (= $x18 false)))))
 ))
 (let (($x69 (forall ((Lambda25 (_ BitVec 32)) )(let (($x94 (= false false)))
 (let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x52 (_ bv0 32))))
 (=> $x8 $x94))))))
 ))
 (let (($x95 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x52 (_ bv0 32))))
 (= $x8 true)))))
 ))
 (let (($x7 (and $x95 $x69)))
 (let (($x84 (and $x7 $x114)))
 (let (($x102 (and $x84 $x33)))
 (let (($x71 (and $x102 $x55)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x64 (and $x10 $x71)))
 (let (($x48 (=> $x64 $x89)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x178 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x155 (_ bv1 32)))))
 ))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (= true (= ?x155 (_ bv0 32)))))
 ))
 (let (($x149 (and $x104 $x74)))
 (let (($x39 (and $x149 $x178)))
 (let (($x6 (and $x39 $x74)))
 (let (($x43 (= $x6 true)))
 (let (($x89 (= $x43 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x134 (concat ?x176 (concat ?x173 ?x171)))))
 (let (($x31 (= input.dst.llvm-%m ?x156)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x163 (concat ?x37 (concat ?x78 ?x145)))))
 (let (($x165 (= input.dst.llvm-%n ?x164)))
 (let (($x35 (and $x165 $x31)))
 (let (($x120 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x44 (and $x120 $x35)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x158)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x50)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (and $x60 $x135)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x126 $x77)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x67 $x128)))
 (let (($x117 (not $x54)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x24 $x107)))
 (let (($x12 (and (not $x58) $x117)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x144 $x160)))
 (let (($x9 (not $x159)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x66 $x93)))
 (let (($x146 (and (not $x121) $x9)))
 (let (($x148 (and (and (and (and (and (and $x146 $x12) $x27) $x142) $x131) $x152) $x5)))
 (let (($x154 (and $x148 $x65)))
 (let (($x108 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x137 (or false (or false (and (and true (or $x166 $x15)) (or $x97 $x62))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x137)))
 (let (($x116 (and (and (and $x103 $x108) $x154) $x44)))
 (let (($x49 (= $x116 true)))
 (let (($x161 (= $x49 true)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x36 (and $x61 $x161)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x55 (and $x122 $x36)))
 (let (($x33 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x52 (_ bv1 32))))
 (=> $x18 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x114 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x52 (_ bv1 32))))
 (= $x18 false)))))
 ))
 (let (($x69 (forall ((Lambda25 (_ BitVec 32)) )(let (($x94 (= false false)))
 (let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x52 (_ bv0 32))))
 (=> $x8 $x94))))))
 ))
 (let (($x95 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x52 (_ bv0 32))))
 (= $x8 true)))))
 ))
 (let (($x7 (and $x95 $x69)))
 (let (($x84 (and $x7 $x114)))
 (let (($x102 (and $x84 $x33)))
 (let (($x71 (and $x102 $x55)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x64 (and $x10 $x71)))
 (let (($x48 (=> $x64 $x89)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x060080b4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x03806cb0)
  (define-fun Lambda25!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x060080b7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x03806cb3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x060080b4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x03806cb0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x060080b4) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda25!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0d7ffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff7ffff8)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff7ffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0d7fffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff7ffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0d7ffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xff7ffff8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x169 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x13 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x13 (_ bv1 32)))))
 ))
 (let (($x41 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x13 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (= true (= ?x13 (_ bv0 32)))))
 ))
 (let (($x125 (and $x41 $x91)))
 (let (($x130 (and $x125 $x169)))
 (let (($x46 (and $x130 $x91)))
 (let (($x45 (= $x46 true)))
 (let (($x109 (= $x45 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x40 (concat ?x64 (concat ?x36 ?x49)))))
 (let (($x157 (= input.dst.llvm-%m ?x155)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x31 (concat ?x174 (concat ?x176 ?x134)))))
 (let (($x44 (= input.dst.llvm-%n ?x35)))
 (let (($x53 (and $x44 $x157)))
 (let (($x164 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x104 (and $x164 $x53)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x120)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x28)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x148)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x50 $x158)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x150 $x65)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x126 $x60)))
 (let (($x136 (not $x138)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x14 $x142)))
 (let (($x77 (and (not $x132) $x136)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x117 $x12)))
 (let (($x118 (not $x47)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x67 $x128)))
 (let (($x85 (and (not $x54) $x118)))
 (let (($x68 (and (and (and (and (and (and $x85 $x77) $x29) $x152) $x154) $x26) $x51)))
 (let (($x78 (and $x68 $x76)))
 (let (($x90 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x107 (or false (or false (and (and true (or $x101 $x66)) (or $x160 $x159))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x107)))
 (let (($x82 (and (and (and $x143 $x90) $x78) $x104)))
 (let (($x177 (= $x82 true)))
 (let (($x178 (= $x177 true)))
 (let (($x97 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x39 (and $x97 $x178)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x6 (and $x56 $x39)))
 (let (($x166 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x57 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x57 (_ bv1 32))))
 (=> $x102 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x122 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x57 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x57 (_ bv1 32))))
 (= $x102 false)))))
 ))
 (let (($x73 (forall ((Lambda25 (_ BitVec 32)) )(let (($x32 (= false false)))
 (let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x57 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x57 (_ bv0 32))))
 (=> $x69 $x32))))))
 ))
 (let (($x18 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x57 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x57 (_ bv0 32))))
 (= $x69 true)))))
 ))
 (let (($x34 (and $x18 $x73)))
 (let (($x123 (and $x34 $x122)))
 (let (($x86 (and $x123 $x166)))
 (let (($x43 (and $x86 $x6)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x89 (and $x88 $x43)))
 (let (($x17 (=> $x89 $x109)))
 (not $x17)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x169 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x13 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x13 (_ bv1 32)))))
 ))
 (let (($x41 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x13 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (= true (= ?x13 (_ bv0 32)))))
 ))
 (let (($x125 (and $x41 $x91)))
 (let (($x130 (and $x125 $x169)))
 (let (($x46 (and $x130 $x91)))
 (let (($x45 (= $x46 true)))
 (let (($x109 (= $x45 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x40 (concat ?x64 (concat ?x36 ?x49)))))
 (let (($x157 (= input.dst.llvm-%m ?x155)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x31 (concat ?x174 (concat ?x176 ?x134)))))
 (let (($x44 (= input.dst.llvm-%n ?x35)))
 (let (($x53 (and $x44 $x157)))
 (let (($x164 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x104 (and $x164 $x53)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x120)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x28)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x148)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x50 $x158)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x150 $x65)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x126 $x60)))
 (let (($x136 (not $x138)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x14 $x142)))
 (let (($x77 (and (not $x132) $x136)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x117 $x12)))
 (let (($x118 (not $x47)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x67 $x128)))
 (let (($x85 (and (not $x54) $x118)))
 (let (($x68 (and (and (and (and (and (and $x85 $x77) $x29) $x152) $x154) $x26) $x51)))
 (let (($x78 (and $x68 $x76)))
 (let (($x90 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x107 (or false (or false (and (and true (or $x101 $x66)) (or $x160 $x159))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x107)))
 (let (($x82 (and (and (and $x143 $x90) $x78) $x104)))
 (let (($x177 (= $x82 true)))
 (let (($x178 (= $x177 true)))
 (let (($x97 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x39 (and $x97 $x178)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x6 (and $x56 $x39)))
 (let (($x166 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x57 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x57 (_ bv1 32))))
 (=> $x102 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x122 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x57 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x57 (_ bv1 32))))
 (= $x102 false)))))
 ))
 (let (($x73 (forall ((Lambda25 (_ BitVec 32)) )(let (($x32 (= false false)))
 (let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x57 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x57 (_ bv0 32))))
 (=> $x69 $x32))))))
 ))
 (let (($x18 (forall ((Lambda25 (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x57 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x57 (_ bv0 32))))
 (= $x69 true)))))
 ))
 (let (($x34 (and $x18 $x73)))
 (let (($x123 (and $x34 $x122)))
 (let (($x86 (and $x123 $x166)))
 (let (($x43 (and $x86 $x6)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x89 (and $x88 $x43)))
 (let (($x17 (=> $x89 $x109)))
 (not $x17)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x060080b4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x03806cb0)
  (define-fun Lambda25!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x060080b7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x03806cb3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x060080b4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x03806cb0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x060080b4) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda25!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0d7ffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff7ffff8)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff7ffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0d7fffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff7ffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0d7ffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xff7ffff8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x205 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x209))))
 (let ((?x186 (input.spec-%tmpvar-10.E0%0%d.1.1 Lambda25)))
 (let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x72 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x72 (_ bv1 32))))
 (=> $x181 (= ?x186 ?x215))))))))))
 ))
 (let (($x183 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x72 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x72 (_ bv1 32))))
 (= $x181 (bvuge ?x33 (_ bv1 32))))))))
 ))
 (let (($x153 (forall ((Lambda25 (_ BitVec 32)) )(let (($x122 (= false false)))
 (let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x72 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x72 (_ bv0 32))))
 (=> $x83 $x122))))))
 ))
 (let (($x59 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x72 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x72 (_ bv0 32))))
 (= $x83 (= ?x33 (_ bv0 32))))))))
 ))
 (let (($x100 (and $x59 $x153)))
 (let (($x184 (and $x100 $x183)))
 (let (($x219 (and $x184 $x218)))
 (let (($x220 (= $x219 true)))
 (let (($x221 (= $x220 true)))
 (let ((?x178 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x13 (concat ?x19 (concat ?x6 ?x178)))))
 (let (($x81 (= input.dst.llvm-%m ?x23)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x53 (concat ?x70 (concat ?x161 ?x71)))))
 (let (($x82 (= input.dst.llvm-%n ?x104)))
 (let (($x41 (and $x82 $x81)))
 (let (($x44 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x91 (and $x44 $x41)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x165)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x119)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x51 $x76)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x28 $x78)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (and $x50 $x5)))
 (let (($x158 (not $x148)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x152 $x105)))
 (let (($x154 (and (not $x150) $x158)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x77 $x162)))
 (let (($x29 (not $x131)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x60 $x138)))
 (let (($x167 (and (not $x136) $x29)))
 (let (($x176 (and (and (and (and (and (and $x167 $x154) $x112) $x37) $x149) $x115) $x164)))
 (let (($x134 (and $x176 $x156)))
 (let (($x24 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x132 (or false (or false (and (and true (or $x67 $x128)) (or $x47 $x118))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x168 (and (and (and $x126 $x24) $x134) $x91)))
 (let (($x169 (= $x168 true)))
 (let (($x130 (= $x169 true)))
 (let (($x144 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x46 (and $x144 $x130)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x45 (and $x121 $x46)))
 (let (($x111 (forall ((Lambda25 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x73 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x73 (_ bv1 32))))
 (=> $x15 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x133 (forall ((Lambda25 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x73 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x73 (_ bv1 32))))
 (= $x15 false)))))
 ))
 (let (($x139 (forall ((Lambda25 (_ BitVec 32)) )(let (($x122 (= false false)))
 (let (($x57 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x73 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x73 (_ bv0 32))))
 (=> $x34 $x122))))))
 ))
 (let (($x79 (forall ((Lambda25 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x73 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x73 (_ bv0 32))))
 (= $x34 true)))))
 ))
 (let (($x151 (and $x79 $x139)))
 (let (($x106 (and $x151 $x133)))
 (let (($x66 (and $x106 $x111)))
 (let (($x109 (and $x66 $x45)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x17 (and $x88 $x109)))
 (let (($x222 (=> $x17 $x221)))
 (not $x222))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x205 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x209))))
 (let ((?x186 (input.spec-%tmpvar-10.E0%0%d.1.1 Lambda25)))
 (let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x72 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x72 (_ bv1 32))))
 (=> $x181 (= ?x186 ?x215))))))))))
 ))
 (let (($x183 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x72 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x72 (_ bv1 32))))
 (= $x181 (bvuge ?x33 (_ bv1 32))))))))
 ))
 (let (($x153 (forall ((Lambda25 (_ BitVec 32)) )(let (($x122 (= false false)))
 (let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x72 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x72 (_ bv0 32))))
 (=> $x83 $x122))))))
 ))
 (let (($x59 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x72 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x72 (_ bv0 32))))
 (= $x83 (= ?x33 (_ bv0 32))))))))
 ))
 (let (($x100 (and $x59 $x153)))
 (let (($x184 (and $x100 $x183)))
 (let (($x219 (and $x184 $x218)))
 (let (($x220 (= $x219 true)))
 (let (($x221 (= $x220 true)))
 (let ((?x178 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x13 (concat ?x19 (concat ?x6 ?x178)))))
 (let (($x81 (= input.dst.llvm-%m ?x23)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x53 (concat ?x70 (concat ?x161 ?x71)))))
 (let (($x82 (= input.dst.llvm-%n ?x104)))
 (let (($x41 (and $x82 $x81)))
 (let (($x44 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x91 (and $x44 $x41)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x165)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x119)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x51 $x76)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x28 $x78)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (and $x50 $x5)))
 (let (($x158 (not $x148)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x152 $x105)))
 (let (($x154 (and (not $x150) $x158)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x77 $x162)))
 (let (($x29 (not $x131)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x60 $x138)))
 (let (($x167 (and (not $x136) $x29)))
 (let (($x176 (and (and (and (and (and (and $x167 $x154) $x112) $x37) $x149) $x115) $x164)))
 (let (($x134 (and $x176 $x156)))
 (let (($x24 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x132 (or false (or false (and (and true (or $x67 $x128)) (or $x47 $x118))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x168 (and (and (and $x126 $x24) $x134) $x91)))
 (let (($x169 (= $x168 true)))
 (let (($x130 (= $x169 true)))
 (let (($x144 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x46 (and $x144 $x130)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x45 (and $x121 $x46)))
 (let (($x111 (forall ((Lambda25 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x73 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x73 (_ bv1 32))))
 (=> $x15 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x133 (forall ((Lambda25 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x73 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x73 (_ bv1 32))))
 (= $x15 false)))))
 ))
 (let (($x139 (forall ((Lambda25 (_ BitVec 32)) )(let (($x122 (= false false)))
 (let (($x57 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x73 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x73 (_ bv0 32))))
 (=> $x34 $x122))))))
 ))
 (let (($x79 (forall ((Lambda25 (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x73 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x73 (_ bv0 32))))
 (= $x34 true)))))
 ))
 (let (($x151 (and $x79 $x139)))
 (let (($x106 (and $x151 $x133)))
 (let (($x66 (and $x106 $x111)))
 (let (($x109 (and $x66 $x45)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x17 (and $x88 $x109)))
 (let (($x222 (=> $x17 $x221)))
 (not $x222))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun Lambda25!2 () (_ BitVec 32)
    #x3fffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #xfc
      #x00))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda25!2 () (_ BitVec 32)
    #x3ffffffe)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x184 (= false true)))
 (let (($x186 (= $x184 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x114 (concat ?x129 (concat ?x45 ?x130)))))
 (let (($x80 (= input.dst.llvm-%m ?x94)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x41 (concat ?x96 (concat ?x39 ?x89)))))
 (let (($x168 (= input.dst.llvm-%n ?x91)))
 (let (($x33 (and $x168 $x80)))
 (let (($x82 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x127 (and $x82 $x33)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x92)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x35)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x164 $x156)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x119 $x134)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x51 $x68)))
 (let (($x76 (not $x120)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x37 $x171)))
 (let (($x149 (and (not $x28) $x76)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x154 $x31)))
 (let (($x112 (not $x20)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x5 $x148)))
 (let (($x26 (and (not $x158) $x112)))
 (let (($x161 (and (and (and (and (and (and $x26 $x149) $x145) $x175) $x11) $x16) $x44)))
 (let (($x71 (and $x161 $x157)))
 (let (($x142 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x125)))
 (let (($x150 (or false (or false (and (and true (or $x60 $x138)) (or $x131 $x29))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x170 (and (and (and $x50 $x142) $x71) $x127)))
 (let (($x153 (= $x170 true)))
 (let (($x100 (= $x153 true)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x181 (and $x12 $x100)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x180 (and $x27 $x181)))
 (let (($x90 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x139 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x139 (_ bv1 32))))
 (=> $x93 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x21 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x139 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x139 (_ bv1 32))))
 (= $x93 false)))))
 ))
 (let (($x108 (forall ((Lambda25 (_ BitVec 32)) )(let (($x133 (= false false)))
 (let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x139 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x139 (_ bv0 32))))
 (=> $x151 $x133))))))
 ))
 (let (($x56 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x139 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x139 (_ bv0 32))))
 (= $x151 true)))))
 ))
 (let (($x101 (and $x56 $x108)))
 (let (($x160 (and $x101 $x21)))
 (let (($x128 (and $x160 $x90)))
 (let (($x182 (and $x128 $x180)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x183 (and $x88 $x182)))
 (let (($x189 (=> $x183 $x186)))
 (not $x189)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x184 (= false true)))
 (let (($x186 (= $x184 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x114 (concat ?x129 (concat ?x45 ?x130)))))
 (let (($x80 (= input.dst.llvm-%m ?x94)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x41 (concat ?x96 (concat ?x39 ?x89)))))
 (let (($x168 (= input.dst.llvm-%n ?x91)))
 (let (($x33 (and $x168 $x80)))
 (let (($x82 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x127 (and $x82 $x33)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x92)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x35)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x164 $x156)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x119 $x134)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x51 $x68)))
 (let (($x76 (not $x120)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x37 $x171)))
 (let (($x149 (and (not $x28) $x76)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x154 $x31)))
 (let (($x112 (not $x20)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x5 $x148)))
 (let (($x26 (and (not $x158) $x112)))
 (let (($x161 (and (and (and (and (and (and $x26 $x149) $x145) $x175) $x11) $x16) $x44)))
 (let (($x71 (and $x161 $x157)))
 (let (($x142 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x125)))
 (let (($x150 (or false (or false (and (and true (or $x60 $x138)) (or $x131 $x29))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x170 (and (and (and $x50 $x142) $x71) $x127)))
 (let (($x153 (= $x170 true)))
 (let (($x100 (= $x153 true)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x181 (and $x12 $x100)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x180 (and $x27 $x181)))
 (let (($x90 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x139 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x139 (_ bv1 32))))
 (=> $x93 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x21 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x139 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x139 (_ bv1 32))))
 (= $x93 false)))))
 ))
 (let (($x108 (forall ((Lambda25 (_ BitVec 32)) )(let (($x133 (= false false)))
 (let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x139 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x139 (_ bv0 32))))
 (=> $x151 $x133))))))
 ))
 (let (($x56 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x139 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x139 (_ bv0 32))))
 (= $x151 true)))))
 ))
 (let (($x101 (and $x56 $x108)))
 (let (($x160 (and $x101 $x21)))
 (let (($x128 (and $x160 $x90)))
 (let (($x182 (and $x128 $x180)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x183 (and $x88 $x182)))
 (let (($x189 (=> $x183 $x186)))
 (not $x189)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x20000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe85473a0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8330bb50)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8330bb53)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe85473a3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8330bb50)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe85473a0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x46 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x222 (= $x46 false)))
 (let (($x223 (= $x222 true)))
 (let ((?x209 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x209)))
 (let (($x215 (= ?x212 input.dst.llvm-%n)))
 (let (($x216 (= $x215 true)))
 (let (($x211 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x211 true)))
 (let (($x205 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x213 (= $x205 true)))
 (let (($x214 (= $x213 true)))
 (let (($x66 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x66 true)))
 (let (($x135 (= $x144 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x61 (= $x122 true)))
 (let (($x106 (= $x61 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x8 true)))
 (let (($x57 (= $x143 true)))
 (let ((?x130 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvadd input.dst.llvm-%m ?x130)))
 (let (($x183 (bvugt ?x109 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd ?x109 (_ bv3 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x100 (bvugt ?x109 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x204 (or false (or false (and (and true (or $x153 $x100)) (or $x182 $x183))))))
 (let (($x169 (=> (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32))) $x204)))
 (let (($x94 (=> (and $x46 (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32)))) $x204)))
 (let (($x80 (= $x94 true)))
 (let (($x13 (= $x80 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x41)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x38)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x92 $x59)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x161 $x36)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x165 $x156)))
 (let (($x11 (not $x134)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x119 $x164)))
 (let (($x172 (and (not $x176) $x11)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x174 $x145)))
 (let (($x115 (not $x49)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x14 $x142)))
 (let (($x55 (and (not $x53) $x115)))
 (let (($x6 (and (and (and (and (and (and $x55 $x172) $x64) $x44) $x155) $x82) $x81)))
 (let (($x23 (and $x6 $x178)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x120 (or false (or false (and (and true (or $x154 $x31)) (or $x171 $x28))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x120)))
 (let (($x91 (and $x149 $x23)))
 (let (($x168 (= $x91 true)))
 (let (($x83 (= $x168 true)))
 (let ((?x167 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x152 (= (_ bv0 2) ?x167)))
 (let (($x105 (= $x152 true)))
 (let (($x114 (and $x105 $x83)))
 (let (($x34 (and $x114 $x13)))
 (let (($x79 (and $x34 $x57)))
 (let (($x111 (and $x79 $x106)))
 (let (($x140 (and $x111 $x135)))
 (let (($x210 (and $x140 $x214)))
 (let (($x208 (and $x210 $x207)))
 (let (($x217 (and $x208 $x216)))
 (let (($x131 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x218 (and $x131 $x217)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x219 (and $x136 $x218)))
 (let (($x60 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x124 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x124 (_ bv1 32))))
 (=> $x128 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x27 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x124 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x124 (_ bv1 32))))
 (= $x128 false)))))
 ))
 (let (($x107 (forall ((Lambda25 (_ BitVec 32)) )(let (($x121 (= false false)))
 (let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x124 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x124 (_ bv0 32))))
 (=> $x108 $x121))))))
 ))
 (let (($x93 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x124 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x124 (_ bv0 32))))
 (= $x108 true)))))
 ))
 (let (($x74 (and $x93 $x107)))
 (let (($x117 (and $x74 $x27)))
 (let (($x24 (and $x117 $x60)))
 (let (($x220 (and $x24 $x219)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x221 (and $x88 $x220)))
 (let (($x159 (=> $x221 $x223)))
 (not $x159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x46 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x222 (= $x46 false)))
 (let (($x223 (= $x222 true)))
 (let ((?x209 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x209)))
 (let (($x215 (= ?x212 input.dst.llvm-%n)))
 (let (($x216 (= $x215 true)))
 (let (($x211 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x211 true)))
 (let (($x205 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x213 (= $x205 true)))
 (let (($x214 (= $x213 true)))
 (let (($x66 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x66 true)))
 (let (($x135 (= $x144 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x61 (= $x122 true)))
 (let (($x106 (= $x61 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x8 true)))
 (let (($x57 (= $x143 true)))
 (let ((?x130 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvadd input.dst.llvm-%m ?x130)))
 (let (($x183 (bvugt ?x109 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd ?x109 (_ bv3 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x100 (bvugt ?x109 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x204 (or false (or false (and (and true (or $x153 $x100)) (or $x182 $x183))))))
 (let (($x169 (=> (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32))) $x204)))
 (let (($x94 (=> (and $x46 (bvule ?x109 (bvsub (bvadd ?x109 (_ bv4 32)) (_ bv1 32)))) $x204)))
 (let (($x80 (= $x94 true)))
 (let (($x13 (= $x80 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x41)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x38)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x92 $x59)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x161 $x36)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x165 $x156)))
 (let (($x11 (not $x134)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x119 $x164)))
 (let (($x172 (and (not $x176) $x11)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x174 $x145)))
 (let (($x115 (not $x49)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x14 $x142)))
 (let (($x55 (and (not $x53) $x115)))
 (let (($x6 (and (and (and (and (and (and $x55 $x172) $x64) $x44) $x155) $x82) $x81)))
 (let (($x23 (and $x6 $x178)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x120 (or false (or false (and (and true (or $x154 $x31)) (or $x171 $x28))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x120)))
 (let (($x91 (and $x149 $x23)))
 (let (($x168 (= $x91 true)))
 (let (($x83 (= $x168 true)))
 (let ((?x167 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x152 (= (_ bv0 2) ?x167)))
 (let (($x105 (= $x152 true)))
 (let (($x114 (and $x105 $x83)))
 (let (($x34 (and $x114 $x13)))
 (let (($x79 (and $x34 $x57)))
 (let (($x111 (and $x79 $x106)))
 (let (($x140 (and $x111 $x135)))
 (let (($x210 (and $x140 $x214)))
 (let (($x208 (and $x210 $x207)))
 (let (($x217 (and $x208 $x216)))
 (let (($x131 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x218 (and $x131 $x217)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x219 (and $x136 $x218)))
 (let (($x60 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x124 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x124 (_ bv1 32))))
 (=> $x128 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x27 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x124 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x124 (_ bv1 32))))
 (= $x128 false)))))
 ))
 (let (($x107 (forall ((Lambda25 (_ BitVec 32)) )(let (($x121 (= false false)))
 (let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x124 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x124 (_ bv0 32))))
 (=> $x108 $x121))))))
 ))
 (let (($x93 (forall ((Lambda25 (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x124 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x124 (_ bv0 32))))
 (= $x108 true)))))
 ))
 (let (($x74 (and $x93 $x107)))
 (let (($x117 (and $x74 $x27)))
 (let (($x24 (and $x117 $x60)))
 (let (($x220 (and $x24 $x219)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x221 (and $x88 $x220)))
 (let (($x159 (=> $x221 $x223)))
 (not $x159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfd000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfd000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfd000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfd000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x13f07c18)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf5627c04)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xf7242c04)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf5627c07)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x13f07c1b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf5627c04)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x13f07c18)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x195 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x263 (= $x195 false)))
 (let (($x264 (= $x263 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x20)))
 (let (($x256 (= ?x112 input.dst.llvm-%n)))
 (let (($x257 (= $x256 true)))
 (let (($x253 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x254 (= $x253 true)))
 (let (($x249 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x250 (= $x249 true)))
 (let (($x251 (= $x250 true)))
 (let (($x245 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x246 (= $x245 true)))
 (let (($x247 (= $x246 true)))
 (let (($x241 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x242 (= $x241 true)))
 (let (($x243 (= $x242 true)))
 (let ((?x198 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x201 (bvadd input.dst.llvm-%m ?x198)))
 (let (($x232 (bvugt ?x201 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x226 (bvadd ?x201 (_ bv3 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x228 (bvugt ?x201 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x226)))
 (let (($x236 (or false (or false (and (and true (or $x227 $x228)) (or $x231 $x232))))))
 (let (($x238 (=> (bvule ?x201 (bvsub (bvadd ?x201 (_ bv4 32)) (_ bv1 32))) $x236)))
 (let (($x202 (=> (and $x195 (bvule ?x201 (bvsub (bvadd ?x201 (_ bv4 32)) (_ bv1 32)))) $x236)))
 (let (($x203 (= $x202 true)))
 (let (($x239 (= $x203 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (= $x197 true)))
 (let (($x194 (= $x193 true)))
 (let (($x185 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x98))))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv2 32))) ?x25)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv3 32))) ?x99)))
 (let ((?x47 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x205 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x221 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x221 (_ bv1 32))))
 (=> $x56 (= ?x47 ?x87)))))))))))
 ))
 (let (($x21 (forall ((Lambda25 (_ BitVec 32)) )(let (($x218 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x219 (ite $x218 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x221 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x221 (_ bv1 32))))
 (= $x56 (bvuge ?x219 (_ bv1 32)))))))))
 ))
 (let (($x72 (forall ((Lambda25 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x205 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x221 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x221 (_ bv0 32))))
 (=> $x222 $x54))))))
 ))
 (let (($x159 (forall ((Lambda25 (_ BitVec 32)) )(let (($x218 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x219 (ite $x218 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x221 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x221 (_ bv0 32))))
 (= $x222 (= ?x219 (_ bv0 32)))))))))
 ))
 (let (($x102 (and $x159 $x72)))
 (let (($x67 (and $x102 $x21)))
 (let (($x190 (and $x67 $x185)))
 (let (($x191 (= $x190 true)))
 (let (($x199 (= $x191 true)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x13)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x94)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x204)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x183)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (and $x180 $x184)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x181 $x186)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (and $x46 $x45)))
 (let (($x109 (not $x130)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x114 $x17)))
 (let (($x127 (and (not $x129) $x109)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x41 $x178)))
 (let (($x91 (not $x23)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x172 $x43)))
 (let (($x83 (and (not $x6) $x91)))
 (let (($x61 (and (and (and (and (and (and $x83 $x127) $x170) $x100) $x189) $x169) $x80)))
 (let (($x106 (and $x61 $x34)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x89 (or false (or false (and (and true (or $x19 $x161)) (or $x36 $x155))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x89)))
 (let (($x111 (and $x81 $x106)))
 (let (($x66 (= $x111 true)))
 (let (($x144 (= $x66 true)))
 (let (($x70 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x165 (= $x70 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x119 (= $x55 true)))
 (let (($x164 (= $x119 true)))
 (let (($x174 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x145 (= $x174 true)))
 (let (($x49 (= $x145 true)))
 (let (($x14 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x142 (= $x14 true)))
 (let (($x53 (= $x142 true)))
 (let ((?x78 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x51 (= (_ bv0 2) ?x78)))
 (let (($x68 (= $x51 true)))
 (let (($x26 (= ?x112 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x171 (= $x26 true)))
 (let (($x120 (and $x171 $x68)))
 (let (($x175 (and $x120 $x53)))
 (let (($x115 (and $x175 $x49)))
 (let (($x176 (and $x115 $x164)))
 (let (($x156 (and $x176 $x165)))
 (let (($x135 (and $x156 $x144)))
 (let (($x200 (and $x135 $x199)))
 (let (($x192 (and $x200 $x194)))
 (let (($x240 (and $x192 $x239)))
 (let (($x244 (and $x240 $x243)))
 (let (($x248 (and $x244 $x247)))
 (let (($x252 (and $x248 $x251)))
 (let (($x255 (and $x252 $x254)))
 (let (($x258 (and $x255 $x257)))
 (let (($x158 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x259 (and $x158 $x258)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x260 (and $x148 $x259)))
 (let (($x48 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x160 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x160 (_ bv1 32))))
 (=> $x24 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x136 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x160 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x160 (_ bv1 32))))
 (= $x24 false)))))
 ))
 (let (($x12 (forall ((Lambda25 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x160 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x160 (_ bv0 32))))
 (=> $x107 $x54))))))
 ))
 (let (($x128 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x160 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x160 (_ bv0 32))))
 (= $x107 true)))))
 ))
 (let (($x146 (and $x128 $x12)))
 (let (($x163 (and $x146 $x136)))
 (let (($x5 (and $x163 $x48)))
 (let (($x261 (and $x5 $x260)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x262 (and $x88 $x261)))
 (let (($x265 (=> $x262 $x264)))
 (not $x265)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x195 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x263 (= $x195 false)))
 (let (($x264 (= $x263 true)))
 (let ((?x20 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x20)))
 (let (($x256 (= ?x112 input.dst.llvm-%n)))
 (let (($x257 (= $x256 true)))
 (let (($x253 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x254 (= $x253 true)))
 (let (($x249 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x250 (= $x249 true)))
 (let (($x251 (= $x250 true)))
 (let (($x245 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x246 (= $x245 true)))
 (let (($x247 (= $x246 true)))
 (let (($x241 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x242 (= $x241 true)))
 (let (($x243 (= $x242 true)))
 (let ((?x198 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x201 (bvadd input.dst.llvm-%m ?x198)))
 (let (($x232 (bvugt ?x201 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x226 (bvadd ?x201 (_ bv3 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x228 (bvugt ?x201 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x226)))
 (let (($x236 (or false (or false (and (and true (or $x227 $x228)) (or $x231 $x232))))))
 (let (($x238 (=> (bvule ?x201 (bvsub (bvadd ?x201 (_ bv4 32)) (_ bv1 32))) $x236)))
 (let (($x202 (=> (and $x195 (bvule ?x201 (bvsub (bvadd ?x201 (_ bv4 32)) (_ bv1 32)))) $x236)))
 (let (($x203 (= $x202 true)))
 (let (($x239 (= $x203 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (= $x197 true)))
 (let (($x194 (= $x193 true)))
 (let (($x185 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x98))))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv2 32))) ?x25)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv3 32))) ?x99)))
 (let ((?x47 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x205 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x221 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x221 (_ bv1 32))))
 (=> $x56 (= ?x47 ?x87)))))))))))
 ))
 (let (($x21 (forall ((Lambda25 (_ BitVec 32)) )(let (($x218 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x219 (ite $x218 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x221 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x221 (_ bv1 32))))
 (= $x56 (bvuge ?x219 (_ bv1 32)))))))))
 ))
 (let (($x72 (forall ((Lambda25 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x205 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x221 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x221 (_ bv0 32))))
 (=> $x222 $x54))))))
 ))
 (let (($x159 (forall ((Lambda25 (_ BitVec 32)) )(let (($x218 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x219 (ite $x218 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x221 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x221 (_ bv0 32))))
 (= $x222 (= ?x219 (_ bv0 32)))))))))
 ))
 (let (($x102 (and $x159 $x72)))
 (let (($x67 (and $x102 $x21)))
 (let (($x190 (and $x67 $x185)))
 (let (($x191 (= $x190 true)))
 (let (($x199 (= $x191 true)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x13)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x94)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x204)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x183)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (and $x180 $x184)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x181 $x186)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (and $x46 $x45)))
 (let (($x109 (not $x130)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x114 $x17)))
 (let (($x127 (and (not $x129) $x109)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x41 $x178)))
 (let (($x91 (not $x23)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x172 $x43)))
 (let (($x83 (and (not $x6) $x91)))
 (let (($x61 (and (and (and (and (and (and $x83 $x127) $x170) $x100) $x189) $x169) $x80)))
 (let (($x106 (and $x61 $x34)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x89 (or false (or false (and (and true (or $x19 $x161)) (or $x36 $x155))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x89)))
 (let (($x111 (and $x81 $x106)))
 (let (($x66 (= $x111 true)))
 (let (($x144 (= $x66 true)))
 (let (($x70 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x165 (= $x70 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x119 (= $x55 true)))
 (let (($x164 (= $x119 true)))
 (let (($x174 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x145 (= $x174 true)))
 (let (($x49 (= $x145 true)))
 (let (($x14 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x142 (= $x14 true)))
 (let (($x53 (= $x142 true)))
 (let ((?x78 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x51 (= (_ bv0 2) ?x78)))
 (let (($x68 (= $x51 true)))
 (let (($x26 (= ?x112 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x171 (= $x26 true)))
 (let (($x120 (and $x171 $x68)))
 (let (($x175 (and $x120 $x53)))
 (let (($x115 (and $x175 $x49)))
 (let (($x176 (and $x115 $x164)))
 (let (($x156 (and $x176 $x165)))
 (let (($x135 (and $x156 $x144)))
 (let (($x200 (and $x135 $x199)))
 (let (($x192 (and $x200 $x194)))
 (let (($x240 (and $x192 $x239)))
 (let (($x244 (and $x240 $x243)))
 (let (($x248 (and $x244 $x247)))
 (let (($x252 (and $x248 $x251)))
 (let (($x255 (and $x252 $x254)))
 (let (($x258 (and $x255 $x257)))
 (let (($x158 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x259 (and $x158 $x258)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x260 (and $x148 $x259)))
 (let (($x48 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x160 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x160 (_ bv1 32))))
 (=> $x24 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x136 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x160 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x160 (_ bv1 32))))
 (= $x24 false)))))
 ))
 (let (($x12 (forall ((Lambda25 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x160 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x160 (_ bv0 32))))
 (=> $x107 $x54))))))
 ))
 (let (($x128 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x160 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x160 (_ bv0 32))))
 (= $x107 true)))))
 ))
 (let (($x146 (and $x128 $x12)))
 (let (($x163 (and $x146 $x136)))
 (let (($x5 (and $x163 $x48)))
 (let (($x261 (and $x5 $x260)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x262 (and $x88 $x261)))
 (let (($x265 (=> $x262 $x264)))
 (not $x265)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x115a0c20)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x84000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd0d60444)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x115a0c23)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd0d60447)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x115a0c20)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd0d60444)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x84000003 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x84000002 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x84000001 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x84000000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x36964eec)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb8cf1dc0)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x33570ff4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb8cf1dc3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x36964eef)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb8cf1dc0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x36964eec)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x33570ff7 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x33570ff6 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x33570ff5 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x33570ff4 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (not $x107)))
 (let (($x30 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x113 (not $x30)))
 (let (($x166 (or $x113 $x18)))
 (let (($x58 (= $x166 true)))
 (let (($x103 (= $x58 true)))
 (let ((?x132 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x132)))
 (let (($x90 (= ?x118 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x90 true)))
 (let ((?x211 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x211)))
 (let (($x215 (= ?x208 input.dst.llvm-%n)))
 (let (($x9 (= $x215 true)))
 (let (($x206 (= ?x208 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x209 (= $x206 true)))
 (let (($x213 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x126 (= $x213 true)))
 (let (($x140 (= $x126 true)))
 (let (($x60 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x60 true)))
 (let (($x29 (= $x77 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x121 (= $x93 true)))
 (let (($x27 (= $x121 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x162 (= $x75 true)))
 (let (($x150 (= $x162 true)))
 (let (($x265 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x252 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x252))))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv2 32))) ?x256)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv3 32))) ?x259)))
 (let ((?x234 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x63 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x63 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x193 (_ bv1 32))))
 (=> $x229 (= ?x234 ?x262)))))))))))
 ))
 (let (($x231 (forall ((Lambda25 (_ BitVec 32)) )(let (($x200 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x196 (ite $x200 (_ bv1 32) (_ bv0 32))))
 (let (($x63 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x63 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x193 (_ bv1 32))))
 (= $x229 (bvuge ?x196 (_ bv1 32)))))))))
 ))
 (let (($x224 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (= false false)))
 (let (($x63 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x63 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (=> $x194 $x145))))))
 ))
 (let (($x195 (forall ((Lambda25 (_ BitVec 32)) )(let (($x200 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x196 (ite $x200 (_ bv1 32) (_ bv0 32))))
 (let (($x63 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x63 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (= $x194 (= ?x196 (_ bv0 32)))))))))
 ))
 (let (($x225 (and $x195 $x224)))
 (let (($x232 (and $x225 $x231)))
 (let (($x266 (and $x232 $x265)))
 (let (($x11 (= $x266 true)))
 (let (($x177 (= $x11 true)))
 (let (($x95 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x147 (= $x95 true)))
 (let (($x32 (= $x147 true)))
 (let (($x65 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x40 (= $x65 true)))
 (let (($x187 (= $x40 true)))
 (let (($x15 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x133 (= $x15 true)))
 (let (($x21 (= $x133 true)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x222)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x205)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x13 $x106)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x61 $x111)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x183 $x184)))
 (let (($x189 (not $x186)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x181 $x180)))
 (let (($x204 (and (not $x182) $x189)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x85 $x170)))
 (let (($x153 (not $x143)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x43 $x6)))
 (let (($x57 (and (not $x8) $x153)))
 (let (($x223 (and (and (and (and (and (and $x57 $x204) $x122) $x80) $x66) $x135) $x221)))
 (let (($x159 (and $x223 $x217)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x178)))
 (let (($x130 (or false (or false (and (and true (or $x23 $x91)) (or $x17 $x129))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x50 (and $x127 $x159)))
 (let (($x72 (= $x50 true)))
 (let (($x102 (= $x72 true)))
 (let ((?x82 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x89 (= (_ bv0 2) ?x82)))
 (let (($x81 (= $x89 true)))
 (let (($x56 (and $x81 $x102)))
 (let (($x67 (and $x56 $x21)))
 (let (($x98 (and $x67 $x187)))
 (let (($x141 (and $x98 $x32)))
 (let (($x42 (and $x141 $x177)))
 (let (($x101 (and $x42 $x150)))
 (let (($x125 (and $x101 $x27)))
 (let (($x167 (and $x125 $x29)))
 (let (($x214 (and $x167 $x140)))
 (let (($x212 (and $x214 $x209)))
 (let (($x151 (and $x212 $x9)))
 (let (($x69 (and $x151 $x188)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x86 (and $x39 $x69)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x97 (and $x36 $x86)))
 (let (($x92 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x142 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x142 (_ bv1 32))))
 (=> $x70 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x156 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x142 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x142 (_ bv1 32))))
 (= $x70 false)))))
 ))
 (let (($x55 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (= false false)))
 (let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x142 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x142 (_ bv0 32))))
 (=> $x53 $x145))))))
 ))
 (let (($x174 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x142 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x142 (_ bv0 32))))
 (= $x53 true)))))
 ))
 (let (($x119 (and $x174 $x55)))
 (let (($x16 (and $x119 $x156)))
 (let (($x157 (and $x16 $x92)))
 (let (($x84 (and $x157 $x97)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x123 (and $x26 $x84)))
 (let ((?x139 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x88 (bvadd input.dst.llvm-%m ?x139)))
 (let (($x148 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd ?x88 (_ bv3 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x131 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x31 (or false (or false (and (and true (or $x163 $x131)) (or $x76 $x148))))))
 (let (($x112 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) $x31)))
 (let (($x74 (=> (and $x107 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) $x31)))
 (let (($x137 (and $x74 $x123)))
 (let (($x62 (=> $x137 $x103)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (not $x107)))
 (let (($x30 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x113 (not $x30)))
 (let (($x166 (or $x113 $x18)))
 (let (($x58 (= $x166 true)))
 (let (($x103 (= $x58 true)))
 (let ((?x132 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x132)))
 (let (($x90 (= ?x118 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x90 true)))
 (let ((?x211 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x211)))
 (let (($x215 (= ?x208 input.dst.llvm-%n)))
 (let (($x9 (= $x215 true)))
 (let (($x206 (= ?x208 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x209 (= $x206 true)))
 (let (($x213 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x126 (= $x213 true)))
 (let (($x140 (= $x126 true)))
 (let (($x60 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x60 true)))
 (let (($x29 (= $x77 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x121 (= $x93 true)))
 (let (($x27 (= $x121 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x162 (= $x75 true)))
 (let (($x150 (= $x162 true)))
 (let (($x265 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x252 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x252))))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv2 32))) ?x256)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv3 32))) ?x259)))
 (let ((?x234 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x63 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x63 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x193 (_ bv1 32))))
 (=> $x229 (= ?x234 ?x262)))))))))))
 ))
 (let (($x231 (forall ((Lambda25 (_ BitVec 32)) )(let (($x200 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x196 (ite $x200 (_ bv1 32) (_ bv0 32))))
 (let (($x63 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x63 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x193 (_ bv1 32))))
 (= $x229 (bvuge ?x196 (_ bv1 32)))))))))
 ))
 (let (($x224 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (= false false)))
 (let (($x63 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x63 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (=> $x194 $x145))))))
 ))
 (let (($x195 (forall ((Lambda25 (_ BitVec 32)) )(let (($x200 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x196 (ite $x200 (_ bv1 32) (_ bv0 32))))
 (let (($x63 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x63 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (= $x194 (= ?x196 (_ bv0 32)))))))))
 ))
 (let (($x225 (and $x195 $x224)))
 (let (($x232 (and $x225 $x231)))
 (let (($x266 (and $x232 $x265)))
 (let (($x11 (= $x266 true)))
 (let (($x177 (= $x11 true)))
 (let (($x95 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x147 (= $x95 true)))
 (let (($x32 (= $x147 true)))
 (let (($x65 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x40 (= $x65 true)))
 (let (($x187 (= $x40 true)))
 (let (($x15 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x133 (= $x15 true)))
 (let (($x21 (= $x133 true)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x222)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x205)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x13 $x106)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x61 $x111)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x183 $x184)))
 (let (($x189 (not $x186)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x181 $x180)))
 (let (($x204 (and (not $x182) $x189)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x85 $x170)))
 (let (($x153 (not $x143)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x43 $x6)))
 (let (($x57 (and (not $x8) $x153)))
 (let (($x223 (and (and (and (and (and (and $x57 $x204) $x122) $x80) $x66) $x135) $x221)))
 (let (($x159 (and $x223 $x217)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x178)))
 (let (($x130 (or false (or false (and (and true (or $x23 $x91)) (or $x17 $x129))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x50 (and $x127 $x159)))
 (let (($x72 (= $x50 true)))
 (let (($x102 (= $x72 true)))
 (let ((?x82 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x89 (= (_ bv0 2) ?x82)))
 (let (($x81 (= $x89 true)))
 (let (($x56 (and $x81 $x102)))
 (let (($x67 (and $x56 $x21)))
 (let (($x98 (and $x67 $x187)))
 (let (($x141 (and $x98 $x32)))
 (let (($x42 (and $x141 $x177)))
 (let (($x101 (and $x42 $x150)))
 (let (($x125 (and $x101 $x27)))
 (let (($x167 (and $x125 $x29)))
 (let (($x214 (and $x167 $x140)))
 (let (($x212 (and $x214 $x209)))
 (let (($x151 (and $x212 $x9)))
 (let (($x69 (and $x151 $x188)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x86 (and $x39 $x69)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x97 (and $x36 $x86)))
 (let (($x92 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x142 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x142 (_ bv1 32))))
 (=> $x70 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x156 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x142 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x142 (_ bv1 32))))
 (= $x70 false)))))
 ))
 (let (($x55 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (= false false)))
 (let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x142 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x142 (_ bv0 32))))
 (=> $x53 $x145))))))
 ))
 (let (($x174 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x142 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x142 (_ bv0 32))))
 (= $x53 true)))))
 ))
 (let (($x119 (and $x174 $x55)))
 (let (($x16 (and $x119 $x156)))
 (let (($x157 (and $x16 $x92)))
 (let (($x84 (and $x157 $x97)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x123 (and $x26 $x84)))
 (let ((?x139 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x88 (bvadd input.dst.llvm-%m ?x139)))
 (let (($x148 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd ?x88 (_ bv3 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x131 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x31 (or false (or false (and (and true (or $x163 $x131)) (or $x76 $x148))))))
 (let (($x112 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) $x31)))
 (let (($x74 (=> (and $x107 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) $x31)))
 (let (($x137 (and $x74 $x123)))
 (let (($x62 (=> $x137 $x103)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x288 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x289 (bvmul (_ bv4294967295 32) ?x288)))
 (let ((?x290 (bvneg ?x289)))
 (let (($x292 (= ?x290 ?x291)))
 (let (($x293 (= $x292 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x277 (bvneg ?x276)))
 (let (($x278 (= ?x277 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x279 (= $x278 true)))
 (let (($x272 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x273 (= $x272 true)))
 (let (($x274 (= $x273 true)))
 (let (($x268 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x269 (= $x268 true)))
 (let (($x270 (= $x269 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (= $x245 true)))
 (let (($x249 (= $x248 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x240 (= $x239 true)))
 (let (($x203 (= $x240 true)))
 (let (($x202 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x25))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv2 32))) ?x179)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv3 32))) ?x198)))
 (let ((?x172 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x213 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x90 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x90 (_ bv1 32))))
 (=> $x58 (= ?x172 ?x227)))))))))))
 ))
 (let (($x62 (forall ((Lambda25 (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x132 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x90 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x90 (_ bv1 32))))
 (= $x58 (bvuge ?x132 (_ bv1 32)))))))))
 ))
 (let (($x123 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (= false false)))
 (let (($x213 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x90 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x90 (_ bv0 32))))
 (=> $x188 $x38))))))
 ))
 (let (($x86 (forall ((Lambda25 (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x132 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x90 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x90 (_ bv0 32))))
 (= $x188 (= ?x132 (_ bv0 32)))))))))
 ))
 (let (($x137 (and $x86 $x123)))
 (let (($x267 (and $x137 $x62)))
 (let (($x246 (and $x267 $x202)))
 (let (($x247 (= $x246 true)))
 (let (($x243 (= $x247 true)))
 (let (($x125 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x60 (= $x125 true)))
 (let (($x77 (= $x60 true)))
 (let (($x101 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x93 (= $x101 true)))
 (let (($x121 (= $x93 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x259 (bvsub ?x12 ?x117)))
 (let (($x265 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x259) (bvult ?x12 ?x259))))
 (let (($x255 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x253 (ite $x255 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x257 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x258 (bvmul (_ bv4 64) ?x257)))
 (let ((?x254 ((_ extract 63 32) ?x258)))
 (let (($x256 (= ?x254 ?x253)))
 (let (($x266 (and $x256 $x265)))
 (let (($x261 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x11 (and $x261 $x266)))
 (let (($x177 (= true $x11)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x42 (=> $x134 $x177)))
 (let (($x75 (= $x42 true)))
 (let (($x162 (= $x75 true)))
 (let (($x232 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x234 (= $x232 true)))
 (let (($x236 (= $x234 true)))
 (let (($x228 (= $x134 true)))
 (let (($x230 (= $x228 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x193)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x141)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x65 $x187)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x47 $x98)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x217 $x159)))
 (let (($x72 (not $x50)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x221 $x223)))
 (let (($x56 (and (not $x222) $x72)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x66 $x219)))
 (let (($x135 (not $x144)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x79 $x183)))
 (let (($x205 (and (not $x111) $x135)))
 (let (($x192 (and (and (and (and (and (and $x205 $x56) $x133) $x67) $x95) $x32) $x63)))
 (let (($x195 (and $x192 $x194)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x207 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x13 (or false (or false (and (and true (or $x204 $x207)) (or $x216 $x94))))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x13)))
 (let (($x201 (and $x106 $x195)))
 (let (($x224 (= $x201 true)))
 (let (($x225 (= $x224 true)))
 (let ((?x153 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x57 (= (_ bv0 2) ?x153)))
 (let (($x181 (= $x57 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x127)))
 (let (($x100 (= ?x43 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x85 (= $x100 true)))
 (let (($x6 (= ?x43 input.dst.llvm-%n)))
 (let (($x8 (= $x6 true)))
 (let (($x170 (and $x8 $x85)))
 (let (($x180 (and $x170 $x181)))
 (let (($x229 (and $x180 $x225)))
 (let (($x231 (and $x229 $x230)))
 (let (($x251 (and $x231 $x236)))
 (let (($x150 (and $x251 $x162)))
 (let (($x27 (and $x150 $x121)))
 (let (($x29 (and $x27 $x77)))
 (let (($x244 (and $x29 $x243)))
 (let (($x241 (and $x244 $x203)))
 (let (($x250 (and $x241 $x249)))
 (let (($x271 (and $x250 $x270)))
 (let (($x275 (and $x271 $x274)))
 (let (($x280 (and $x275 $x279)))
 (let (($x45 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x282 (and (not $x45) $x280)))
 (let (($x33 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x283 (and $x33 $x282)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x284 (and $x114 $x283)))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x70 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x70 (_ bv1 32))))
 (=> $x59 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x39 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x70 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x70 (_ bv1 32))))
 (= $x59 false)))))
 ))
 (let (($x92 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (= false false)))
 (let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x70 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x70 (_ bv0 32))))
 (=> $x165 $x38))))))
 ))
 (let (($x16 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x70 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x70 (_ bv0 32))))
 (= $x165 true)))))
 ))
 (let (($x157 (and $x16 $x92)))
 (let (($x104 (and $x157 $x39)))
 (let (($x91 (and $x104 $x23)))
 (let (($x285 (and $x91 $x284)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x286 (and $x78 $x285)))
 (let (($x158 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd ?x12 (_ bv3 32))))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x48 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x128 (or false (or false (and (and true (or $x105 $x48)) (or $x154 $x158))))))
 (let (($x28 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x128)))
 (let (($x88 (=> (and $x134 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x128)))
 (let (($x287 (and $x88 $x286)))
 (let (($x294 (=> $x287 $x293)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x288 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x289 (bvmul (_ bv4294967295 32) ?x288)))
 (let ((?x290 (bvneg ?x289)))
 (let (($x292 (= ?x290 ?x291)))
 (let (($x293 (= $x292 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x277 (bvneg ?x276)))
 (let (($x278 (= ?x277 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x279 (= $x278 true)))
 (let (($x272 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x273 (= $x272 true)))
 (let (($x274 (= $x273 true)))
 (let (($x268 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x269 (= $x268 true)))
 (let (($x270 (= $x269 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (= $x245 true)))
 (let (($x249 (= $x248 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x240 (= $x239 true)))
 (let (($x203 (= $x240 true)))
 (let (($x202 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x25))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv2 32))) ?x179)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv3 32))) ?x198)))
 (let ((?x172 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x213 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x90 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x90 (_ bv1 32))))
 (=> $x58 (= ?x172 ?x227)))))))))))
 ))
 (let (($x62 (forall ((Lambda25 (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x132 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x90 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x90 (_ bv1 32))))
 (= $x58 (bvuge ?x132 (_ bv1 32)))))))))
 ))
 (let (($x123 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (= false false)))
 (let (($x213 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x90 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x90 (_ bv0 32))))
 (=> $x188 $x38))))))
 ))
 (let (($x86 (forall ((Lambda25 (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x132 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x90 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x90 (_ bv0 32))))
 (= $x188 (= ?x132 (_ bv0 32)))))))))
 ))
 (let (($x137 (and $x86 $x123)))
 (let (($x267 (and $x137 $x62)))
 (let (($x246 (and $x267 $x202)))
 (let (($x247 (= $x246 true)))
 (let (($x243 (= $x247 true)))
 (let (($x125 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x60 (= $x125 true)))
 (let (($x77 (= $x60 true)))
 (let (($x101 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x93 (= $x101 true)))
 (let (($x121 (= $x93 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x259 (bvsub ?x12 ?x117)))
 (let (($x265 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x259) (bvult ?x12 ?x259))))
 (let (($x255 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x253 (ite $x255 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x257 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x258 (bvmul (_ bv4 64) ?x257)))
 (let ((?x254 ((_ extract 63 32) ?x258)))
 (let (($x256 (= ?x254 ?x253)))
 (let (($x266 (and $x256 $x265)))
 (let (($x261 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x11 (and $x261 $x266)))
 (let (($x177 (= true $x11)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x42 (=> $x134 $x177)))
 (let (($x75 (= $x42 true)))
 (let (($x162 (= $x75 true)))
 (let (($x232 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x234 (= $x232 true)))
 (let (($x236 (= $x234 true)))
 (let (($x228 (= $x134 true)))
 (let (($x230 (= $x228 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x193)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x141)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x65 $x187)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x47 $x98)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x217 $x159)))
 (let (($x72 (not $x50)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x221 $x223)))
 (let (($x56 (and (not $x222) $x72)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x66 $x219)))
 (let (($x135 (not $x144)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x79 $x183)))
 (let (($x205 (and (not $x111) $x135)))
 (let (($x192 (and (and (and (and (and (and $x205 $x56) $x133) $x67) $x95) $x32) $x63)))
 (let (($x195 (and $x192 $x194)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x207 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x13 (or false (or false (and (and true (or $x204 $x207)) (or $x216 $x94))))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x13)))
 (let (($x201 (and $x106 $x195)))
 (let (($x224 (= $x201 true)))
 (let (($x225 (= $x224 true)))
 (let ((?x153 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x57 (= (_ bv0 2) ?x153)))
 (let (($x181 (= $x57 true)))
 (let ((?x127 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x127)))
 (let (($x100 (= ?x43 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x85 (= $x100 true)))
 (let (($x6 (= ?x43 input.dst.llvm-%n)))
 (let (($x8 (= $x6 true)))
 (let (($x170 (and $x8 $x85)))
 (let (($x180 (and $x170 $x181)))
 (let (($x229 (and $x180 $x225)))
 (let (($x231 (and $x229 $x230)))
 (let (($x251 (and $x231 $x236)))
 (let (($x150 (and $x251 $x162)))
 (let (($x27 (and $x150 $x121)))
 (let (($x29 (and $x27 $x77)))
 (let (($x244 (and $x29 $x243)))
 (let (($x241 (and $x244 $x203)))
 (let (($x250 (and $x241 $x249)))
 (let (($x271 (and $x250 $x270)))
 (let (($x275 (and $x271 $x274)))
 (let (($x280 (and $x275 $x279)))
 (let (($x45 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x282 (and (not $x45) $x280)))
 (let (($x33 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x283 (and $x33 $x282)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x284 (and $x114 $x283)))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x70 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x70 (_ bv1 32))))
 (=> $x59 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x39 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x70 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x70 (_ bv1 32))))
 (= $x59 false)))))
 ))
 (let (($x92 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (= false false)))
 (let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x70 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x70 (_ bv0 32))))
 (=> $x165 $x38))))))
 ))
 (let (($x16 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x70 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x70 (_ bv0 32))))
 (= $x165 true)))))
 ))
 (let (($x157 (and $x16 $x92)))
 (let (($x104 (and $x157 $x39)))
 (let (($x91 (and $x104 $x23)))
 (let (($x285 (and $x91 $x284)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x286 (and $x78 $x285)))
 (let (($x158 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd ?x12 (_ bv3 32))))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x48 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x128 (or false (or false (and (and true (or $x105 $x48)) (or $x154 $x158))))))
 (let (($x28 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x128)))
 (let (($x88 (=> (and $x134 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x128)))
 (let (($x287 (and $x88 $x286)))
 (let (($x294 (=> $x287 $x293)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x149 (bvule ?x120 (_ bv3 32))))
 (let (($x37 (= $x149 true)))
 (let (($x14 (= $x37 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x212)))
 (let (($x30 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x30 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x208 (= $x211 true)))
 (let (($x206 (= $x208 true)))
 (let (($x167 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x140 (= $x167 true)))
 (let (($x214 (= $x140 true)))
 (let (($x168 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x41 (= $x168 true)))
 (let (($x126 (= $x41 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x182)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x294)))
 (let ((?x292 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x292)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x288)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x290 (and $x287 $x289)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (and $x286 $x290)))
 (let (($x285 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x275 $x276)))
 (let (($x278 (not $x277)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x272 $x273)))
 (let (($x280 (and (not $x274) $x278)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (and $x249 $x250)))
 (let (($x269 (not $x268)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x110 $x99)))
 (let (($x271 (and (not $x248) $x269)))
 (let (($x55 (and (and (and (and (and (and $x271 $x280) $x283) $x285) $x291) $x293) $x295)))
 (let (($x119 (and $x55 $x124)))
 (let (($x243 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x238 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x227)))
 (let (($x203 (or false (or false (and (and true (or $x233 $x238)) (or $x247 $x243))))))
 (let (($x245 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x203)))
 (let (($x35 (and $x245 $x119)))
 (let (($x71 (= $x35 true)))
 (let (($x36 (= $x71 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x49 (= (_ bv0 2) ?x226)))
 (let (($x185 (= $x49 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x172 true)))
 (let (($x116 (= $x171 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x166 true)))
 (let (($x62 (= $x103 true)))
 (let (($x84 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x123 (= $x84 true)))
 (let (($x137 (= $x123 true)))
 (let (($x151 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x101))))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv2 32))) ?x125)))
 (let ((?x188 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv3 32))) ?x29)))
 (let ((?x242 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x67 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x193 (_ bv1 32))))
 (=> $x236 (= ?x242 ?x188)))))))))))
 ))
 (let (($x252 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x63 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x193 (_ bv1 32))))
 (= $x236 (bvuge ?x63 (_ bv1 32)))))))))
 ))
 (let (($x229 (forall ((Lambda25 (_ BitVec 32)) )(let (($x104 (= false false)))
 (let (($x67 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (=> $x194 $x104))))))
 ))
 (let (($x201 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x63 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (= $x194 (= ?x63 (_ bv0 32)))))))))
 ))
 (let (($x228 (and $x201 $x229)))
 (let (($x260 (and $x228 $x252)))
 (let (($x132 (and $x260 $x151)))
 (let (($x118 (= $x132 true)))
 (let (($x69 (= $x118 true)))
 (let ((?x159 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x159)))
 (let (($x15 (= ?x50 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x133 (= $x15 true)))
 (let (($x72 (= ?x50 input.dst.llvm-%n)))
 (let (($x56 (= $x72 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x111 (bvsub ?x12 ?x117)))
 (let (($x144 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x111) (bvult ?x12 ?x111))))
 (let (($x13 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x79 (ite $x13 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x80 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x218 (bvmul (_ bv4 64) ?x80)))
 (let ((?x61 ((_ extract 63 32) ?x218)))
 (let (($x183 (= ?x61 ?x79)))
 (let (($x135 (and $x183 $x144)))
 (let (($x216 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x205 (and $x216 $x135)))
 (let (($x221 (= true $x205)))
 (let (($x108 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (=> $x108 $x221)))
 (let (($x222 (= $x223 true)))
 (let (($x102 (= $x222 true)))
 (let (($x34 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x189 (= $x34 true)))
 (let (($x204 (= $x189 true)))
 (let (($x184 (= $x108 true)))
 (let (($x186 (= $x184 true)))
 (let (($x207 (and $x186 $x204)))
 (let (($x217 (and $x207 $x102)))
 (let (($x199 (and $x217 $x56)))
 (let (($x191 (and $x199 $x133)))
 (let (($x86 (and $x191 $x69)))
 (let (($x58 (and $x86 $x137)))
 (let (($x267 (and $x58 $x62)))
 (let (($x25 (and $x267 $x116)))
 (let (($x190 (and $x25 $x185)))
 (let (($x82 (and $x190 $x36)))
 (let (($x160 (and $x82 $x126)))
 (let (($x210 (and $x160 $x214)))
 (let (($x209 (and $x210 $x206)))
 (let (($x18 (and $x209 $x113)))
 (let (($x180 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x51 (and (not $x180) $x18)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x96 (and $x57 $x51)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x44 (and $x170 $x96)))
 (let (($x8 (forall ((Lambda25 (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x157 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x157 (_ bv1 32))))
 (=> $x114 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x129 (forall ((Lambda25 (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x157 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x157 (_ bv1 32))))
 (= $x114 false)))))
 ))
 (let (($x178 (forall ((Lambda25 (_ BitVec 32)) )(let (($x104 (= false false)))
 (let (($x165 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x157 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x157 (_ bv0 32))))
 (=> $x59 $x104))))))
 ))
 (let (($x39 (forall ((Lambda25 (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x157 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x157 (_ bv0 32))))
 (= $x59 true)))))
 ))
 (let (($x23 (and $x39 $x178)))
 (let (($x33 (and $x23 $x129)))
 (let (($x100 (and $x33 $x8)))
 (let (($x19 (and $x100 $x44)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x164 (and $x53 $x19)))
 (let (($x112 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd ?x12 (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x5 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x48)))
 (let (($x88 (or false (or false (and (and true (or $x76 $x5)) (or $x31 $x112))))))
 (let (($x78 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x88)))
 (let (($x136 (=> (and $x108 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x88)))
 (let (($x176 (and $x136 $x164)))
 (let (($x64 (=> $x176 $x14)))
 (not $x64)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x149 (bvule ?x120 (_ bv3 32))))
 (let (($x37 (= $x149 true)))
 (let (($x14 (= $x37 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x212)))
 (let (($x30 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x30 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x208 (= $x211 true)))
 (let (($x206 (= $x208 true)))
 (let (($x167 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x140 (= $x167 true)))
 (let (($x214 (= $x140 true)))
 (let (($x168 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x41 (= $x168 true)))
 (let (($x126 (= $x41 true)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x182)))
 (let ((?x294 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x294)))
 (let ((?x292 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x292)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x288)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x290 (and $x287 $x289)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (and $x286 $x290)))
 (let (($x285 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x275 $x276)))
 (let (($x278 (not $x277)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x272 $x273)))
 (let (($x280 (and (not $x274) $x278)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (and $x249 $x250)))
 (let (($x269 (not $x268)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (and $x110 $x99)))
 (let (($x271 (and (not $x248) $x269)))
 (let (($x55 (and (and (and (and (and (and $x271 $x280) $x283) $x285) $x291) $x293) $x295)))
 (let (($x119 (and $x55 $x124)))
 (let (($x243 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x238 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x227)))
 (let (($x203 (or false (or false (and (and true (or $x233 $x238)) (or $x247 $x243))))))
 (let (($x245 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x203)))
 (let (($x35 (and $x245 $x119)))
 (let (($x71 (= $x35 true)))
 (let (($x36 (= $x71 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x49 (= (_ bv0 2) ?x226)))
 (let (($x185 (= $x49 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x172 true)))
 (let (($x116 (= $x171 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x166 true)))
 (let (($x62 (= $x103 true)))
 (let (($x84 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x123 (= $x84 true)))
 (let (($x137 (= $x123 true)))
 (let (($x151 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x101))))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv2 32))) ?x125)))
 (let ((?x188 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x101 (_ bv3 32))) ?x29)))
 (let ((?x242 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x67 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x193 (_ bv1 32))))
 (=> $x236 (= ?x242 ?x188)))))))))))
 ))
 (let (($x252 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x63 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x193 (_ bv1 32))))
 (= $x236 (bvuge ?x63 (_ bv1 32)))))))))
 ))
 (let (($x229 (forall ((Lambda25 (_ BitVec 32)) )(let (($x104 (= false false)))
 (let (($x67 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (=> $x194 $x104))))))
 ))
 (let (($x201 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x63 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x193 (_ bv0 32))))
 (= $x194 (= ?x63 (_ bv0 32)))))))))
 ))
 (let (($x228 (and $x201 $x229)))
 (let (($x260 (and $x228 $x252)))
 (let (($x132 (and $x260 $x151)))
 (let (($x118 (= $x132 true)))
 (let (($x69 (= $x118 true)))
 (let ((?x159 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x159)))
 (let (($x15 (= ?x50 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x133 (= $x15 true)))
 (let (($x72 (= ?x50 input.dst.llvm-%n)))
 (let (($x56 (= $x72 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x111 (bvsub ?x12 ?x117)))
 (let (($x144 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x111) (bvult ?x12 ?x111))))
 (let (($x13 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x79 (ite $x13 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x80 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x218 (bvmul (_ bv4 64) ?x80)))
 (let ((?x61 ((_ extract 63 32) ?x218)))
 (let (($x183 (= ?x61 ?x79)))
 (let (($x135 (and $x183 $x144)))
 (let (($x216 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x205 (and $x216 $x135)))
 (let (($x221 (= true $x205)))
 (let (($x108 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (=> $x108 $x221)))
 (let (($x222 (= $x223 true)))
 (let (($x102 (= $x222 true)))
 (let (($x34 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x189 (= $x34 true)))
 (let (($x204 (= $x189 true)))
 (let (($x184 (= $x108 true)))
 (let (($x186 (= $x184 true)))
 (let (($x207 (and $x186 $x204)))
 (let (($x217 (and $x207 $x102)))
 (let (($x199 (and $x217 $x56)))
 (let (($x191 (and $x199 $x133)))
 (let (($x86 (and $x191 $x69)))
 (let (($x58 (and $x86 $x137)))
 (let (($x267 (and $x58 $x62)))
 (let (($x25 (and $x267 $x116)))
 (let (($x190 (and $x25 $x185)))
 (let (($x82 (and $x190 $x36)))
 (let (($x160 (and $x82 $x126)))
 (let (($x210 (and $x160 $x214)))
 (let (($x209 (and $x210 $x206)))
 (let (($x18 (and $x209 $x113)))
 (let (($x180 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x51 (and (not $x180) $x18)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x96 (and $x57 $x51)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x44 (and $x170 $x96)))
 (let (($x8 (forall ((Lambda25 (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x157 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x157 (_ bv1 32))))
 (=> $x114 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x129 (forall ((Lambda25 (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x157 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x157 (_ bv1 32))))
 (= $x114 false)))))
 ))
 (let (($x178 (forall ((Lambda25 (_ BitVec 32)) )(let (($x104 (= false false)))
 (let (($x165 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x157 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x157 (_ bv0 32))))
 (=> $x59 $x104))))))
 ))
 (let (($x39 (forall ((Lambda25 (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x157 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x157 (_ bv0 32))))
 (= $x59 true)))))
 ))
 (let (($x23 (and $x39 $x178)))
 (let (($x33 (and $x23 $x129)))
 (let (($x100 (and $x33 $x8)))
 (let (($x19 (and $x100 $x44)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x164 (and $x53 $x19)))
 (let (($x112 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd ?x12 (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x5 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x48)))
 (let (($x88 (or false (or false (and (and true (or $x76 $x5)) (or $x31 $x112))))))
 (let (($x78 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x88)))
 (let (($x136 (=> (and $x108 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x88)))
 (let (($x176 (and $x136 $x164)))
 (let (($x64 (=> $x176 $x14)))
 (not $x64)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5e80000c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x04000008)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5e80000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0400000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5e80000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x04000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbafaa600)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfda97604)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x1fa81878)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfda97607)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbafaa603)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfda97604)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbafaa600)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x1fa8187b (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x1fa8187a (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x1fa81879 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x1fa81878 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x253 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x259 (bvule ?x253 (_ bv4 32))))
 (let (($x266 (= $x259 true)))
 (let (($x42 (= $x266 true)))
 (let ((?x230 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x231 (bvneg ?x230)))
 (let (($x232 (= ?x231 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x232 true)))
 (let (($x95 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x196 (= $x95 true)))
 (let (($x147 (= $x196 true)))
 (let (($x65 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x40 (= $x65 true)))
 (let (($x187 (= $x40 true)))
 (let (($x200 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x257 (= $x200 true)))
 (let (($x21 (= $x257 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x175)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x87)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (and $x176 $x149)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x164 $x37)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x209 $x212)))
 (let (($x30 (not $x97)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x211 $x208)))
 (let (($x18 (and (not $x206) $x30)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x126 $x160)))
 (let (($x140 (not $x167)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x290 $x291)))
 (let (($x210 (and (not $x41) $x140)))
 (let (($x89 (and (and (and (and (and (and $x210 $x18) $x96) $x19) $x14) $x52) $x138)))
 (let (($x91 (and $x89 $x156)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x293 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x293)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x293)))
 (let (($x36 (or false (or false (and (and true (or $x115 $x294)) (or $x182 $x124))))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x36)))
 (let (($x83 (and $x168 $x91)))
 (let (($x46 (= $x83 true)))
 (let (($x130 (= $x46 true)))
 (let ((?x81 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x286 (= (_ bv0 2) ?x81)))
 (let (($x287 (= $x286 true)))
 (let (($x282 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x283 (= $x282 true)))
 (let (($x174 (= $x283 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x277 true)))
 (let (($x280 (= $x278 true)))
 (let (($x273 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x240 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x240))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x240 (_ bv2 32))) ?x99)))
 (let ((?x269 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x240 (_ bv3 32))) ?x249)))
 (let ((?x116 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x242 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x9 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x9 (_ bv1 32))))
 (=> $x103 (= ?x116 ?x269)))))))))))
 ))
 (let (($x267 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x29 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x9 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x9 (_ bv1 32))))
 (= $x103 (bvuge ?x29 (_ bv1 32)))))))))
 ))
 (let (($x86 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x242 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x9 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x9 (_ bv0 32))))
 (=> $x215 $x33))))))
 ))
 (let (($x132 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x29 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x9 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x9 (_ bv0 32))))
 (= $x215 (= ?x29 (_ bv0 32)))))))))
 ))
 (let (($x84 (and $x132 $x86)))
 (let (($x172 (and $x84 $x267)))
 (let (($x274 (and $x172 $x273)))
 (let (($x279 (= $x274 true)))
 (let (($x275 (= $x279 true)))
 (let ((?x201 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x201)))
 (let (($x234 (= ?x225 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x251 (= $x234 true)))
 (let (($x229 (= ?x225 input.dst.llvm-%n)))
 (let (($x228 (= $x229 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x15 (bvsub ?x12 ?x117)))
 (let (($x193 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x15) (bvult ?x12 ?x15))))
 (let (($x50 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x56 (ite $x50 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x102 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x217 (bvmul (_ bv4 64) ?x102)))
 (let ((?x159 ((_ extract 63 32) ?x217)))
 (let (($x199 (= ?x159 ?x56)))
 (let (($x194 (and $x199 $x193)))
 (let (($x223 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x197 (and $x223 $x194)))
 (let (($x32 (= true $x197)))
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (=> $x139 $x32)))
 (let (($x63 (= $x141 true)))
 (let (($x192 (= $x63 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x219 (= $x66 true)))
 (let (($x144 (= $x219 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x183 (= $x79 true)))
 (let (($x220 (= $x183 true)))
 (let (($x13 (= $x139 true)))
 (let (($x106 (= $x13 true)))
 (let (($x111 (and $x106 $x220)))
 (let (($x135 (and $x111 $x144)))
 (let (($x195 (and $x135 $x192)))
 (let (($x236 (and $x195 $x228)))
 (let (($x252 (and $x236 $x251)))
 (let (($x276 (and $x252 $x275)))
 (let (($x68 (and $x276 $x280)))
 (let (($x284 (and $x68 $x174)))
 (let (($x288 (and $x284 $x287)))
 (let (($x127 (and $x288 $x130)))
 (let (($x47 (and $x127 $x21)))
 (let (($x98 (and $x47 $x187)))
 (let (($x224 (and $x98 $x147)))
 (let (($x254 (and $x224 $x261)))
 (let (($x61 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x11 (and (not $x61) $x254)))
 (let (($x80 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x177 (and $x80 $x11)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x264 (and $x122 $x177)))
 (let (($x204 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x23 (_ bv1 32))))
 (=> $x170 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x153 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x23 (_ bv1 32))))
 (= $x170 false)))))
 ))
 (let (($x6 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x59 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x23 (_ bv0 32))))
 (=> $x114 $x33))))))
 ))
 (let (($x129 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x23 (_ bv0 32))))
 (= $x114 true)))))
 ))
 (let (($x8 (and $x129 $x6)))
 (let (($x57 (and $x8 $x153)))
 (let (($x207 (and $x57 $x204)))
 (let (($x265 (and $x207 $x264)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x256 (and $x70 $x265)))
 (let (($x128 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd ?x12 (_ bv3 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x154 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x136 (or false (or false (and (and true (or $x148 $x154)) (or $x74 $x128))))))
 (let (($x53 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x136)))
 (let (($x163 (=> (and $x139 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x136)))
 (let (($x262 (and $x163 $x256)))
 (let (($x75 (=> $x262 $x42)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x253 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x259 (bvule ?x253 (_ bv4 32))))
 (let (($x266 (= $x259 true)))
 (let (($x42 (= $x266 true)))
 (let ((?x230 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x231 (bvneg ?x230)))
 (let (($x232 (= ?x231 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x232 true)))
 (let (($x95 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x196 (= $x95 true)))
 (let (($x147 (= $x196 true)))
 (let (($x65 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x40 (= $x65 true)))
 (let (($x187 (= $x40 true)))
 (let (($x200 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x257 (= $x200 true)))
 (let (($x21 (= $x257 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x175)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x87)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (and $x176 $x149)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x164 $x37)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x209 $x212)))
 (let (($x30 (not $x97)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x211 $x208)))
 (let (($x18 (and (not $x206) $x30)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x126 $x160)))
 (let (($x140 (not $x167)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x290 $x291)))
 (let (($x210 (and (not $x41) $x140)))
 (let (($x89 (and (and (and (and (and (and $x210 $x18) $x96) $x19) $x14) $x52) $x138)))
 (let (($x91 (and $x89 $x156)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x293 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x293)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x293)))
 (let (($x36 (or false (or false (and (and true (or $x115 $x294)) (or $x182 $x124))))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x36)))
 (let (($x83 (and $x168 $x91)))
 (let (($x46 (= $x83 true)))
 (let (($x130 (= $x46 true)))
 (let ((?x81 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x286 (= (_ bv0 2) ?x81)))
 (let (($x287 (= $x286 true)))
 (let (($x282 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x283 (= $x282 true)))
 (let (($x174 (= $x283 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x277 true)))
 (let (($x280 (= $x278 true)))
 (let (($x273 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x240 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x240))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x240 (_ bv2 32))) ?x99)))
 (let ((?x269 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x240 (_ bv3 32))) ?x249)))
 (let ((?x116 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x242 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x9 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x9 (_ bv1 32))))
 (=> $x103 (= ?x116 ?x269)))))))))))
 ))
 (let (($x267 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x29 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x9 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x9 (_ bv1 32))))
 (= $x103 (bvuge ?x29 (_ bv1 32)))))))))
 ))
 (let (($x86 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x242 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x9 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x9 (_ bv0 32))))
 (=> $x215 $x33))))))
 ))
 (let (($x132 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x29 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x9 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x9 (_ bv0 32))))
 (= $x215 (= ?x29 (_ bv0 32)))))))))
 ))
 (let (($x84 (and $x132 $x86)))
 (let (($x172 (and $x84 $x267)))
 (let (($x274 (and $x172 $x273)))
 (let (($x279 (= $x274 true)))
 (let (($x275 (= $x279 true)))
 (let ((?x201 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x201)))
 (let (($x234 (= ?x225 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x251 (= $x234 true)))
 (let (($x229 (= ?x225 input.dst.llvm-%n)))
 (let (($x228 (= $x229 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x15 (bvsub ?x12 ?x117)))
 (let (($x193 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x15) (bvult ?x12 ?x15))))
 (let (($x50 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x56 (ite $x50 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x102 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x217 (bvmul (_ bv4 64) ?x102)))
 (let ((?x159 ((_ extract 63 32) ?x217)))
 (let (($x199 (= ?x159 ?x56)))
 (let (($x194 (and $x199 $x193)))
 (let (($x223 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x197 (and $x223 $x194)))
 (let (($x32 (= true $x197)))
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (=> $x139 $x32)))
 (let (($x63 (= $x141 true)))
 (let (($x192 (= $x63 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x219 (= $x66 true)))
 (let (($x144 (= $x219 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x183 (= $x79 true)))
 (let (($x220 (= $x183 true)))
 (let (($x13 (= $x139 true)))
 (let (($x106 (= $x13 true)))
 (let (($x111 (and $x106 $x220)))
 (let (($x135 (and $x111 $x144)))
 (let (($x195 (and $x135 $x192)))
 (let (($x236 (and $x195 $x228)))
 (let (($x252 (and $x236 $x251)))
 (let (($x276 (and $x252 $x275)))
 (let (($x68 (and $x276 $x280)))
 (let (($x284 (and $x68 $x174)))
 (let (($x288 (and $x284 $x287)))
 (let (($x127 (and $x288 $x130)))
 (let (($x47 (and $x127 $x21)))
 (let (($x98 (and $x47 $x187)))
 (let (($x224 (and $x98 $x147)))
 (let (($x254 (and $x224 $x261)))
 (let (($x61 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x11 (and (not $x61) $x254)))
 (let (($x80 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x177 (and $x80 $x11)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x264 (and $x122 $x177)))
 (let (($x204 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x23 (_ bv1 32))))
 (=> $x170 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x153 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x23 (_ bv1 32))))
 (= $x170 false)))))
 ))
 (let (($x6 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x59 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x23 (_ bv0 32))))
 (=> $x114 $x33))))))
 ))
 (let (($x129 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x23 (_ bv0 32))))
 (= $x114 true)))))
 ))
 (let (($x8 (and $x129 $x6)))
 (let (($x57 (and $x8 $x153)))
 (let (($x207 (and $x57 $x204)))
 (let (($x265 (and $x207 $x264)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x256 (and $x70 $x265)))
 (let (($x128 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd ?x12 (_ bv3 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x154 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x136 (or false (or false (and (and true (or $x148 $x154)) (or $x74 $x128))))))
 (let (($x53 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x136)))
 (let (($x163 (=> (and $x139 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x136)))
 (let (($x262 (and $x163 $x256)))
 (let (($x75 (=> $x262 $x42)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4f1d9f8c)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x07fa9858)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x07fa985b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4f1d9f8f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x07fa9858)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4f1d9f8c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x89269010)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa43f5804)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000011)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x89269013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa43f5807)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x89269010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa43f5804)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000011)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000011)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x202 (bvule ?x49 (_ bv4294967294 32))))
 (let (($x246 (= $x202 true)))
 (let (($x227 (= $x246 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x213)))
 (let (($x263 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x263 true)))
 (let (($x25 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x260 (= $x25 true)))
 (let (($x150 (= $x260 true)))
 (let (($x181 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x181 true)))
 (let (($x186 (= $x184 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x162)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x42)))
 (let ((?x259 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x266 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x259)))
 (let ((?x265 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x265)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x262 (and $x264 $x256)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x177 $x262)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x95 $x196)))
 (let (($x224 (not $x147)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x40 $x187)))
 (let (($x231 (and (not $x98) $x224)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x127 $x200)))
 (let (($x21 (not $x257)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x176 $x120)))
 (let (($x65 (and (not $x130) $x21)))
 (let (($x104 (and (and (and (and (and (and $x65 $x231) $x261) $x11) $x253) $x266) $x75)))
 (let (($x109 (and $x104 $x289)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x91 (or false (or false (and (and true (or $x161 $x64)) (or $x87 $x138))))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x91)))
 (let (($x178 (and $x46 $x109)))
 (let (($x45 (= $x178 true)))
 (let (($x100 (= $x45 true)))
 (let ((?x145 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x44 (= (_ bv0 2) ?x145)))
 (let (($x19 (= $x44 true)))
 (let (($x30 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x30 true)))
 (let (($x281 (= $x18 true)))
 (let (($x113 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x209 (= $x113 true)))
 (let (($x212 (= $x209 true)))
 (let (($x140 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x124))))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv2 32))) ?x36)))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv3 32))) ?x291)))
 (let ((?x68 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x86 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x270 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x270 (_ bv1 32))))
 (=> $x275 (= ?x68 ?x126)))))))))))
 ))
 (let (($x277 (forall ((Lambda25 (_ BitVec 32)) )(let (($x268 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x241 (ite $x268 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x270 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x270 (_ bv1 32))))
 (= $x275 (bvuge ?x241 (_ bv1 32)))))))))
 ))
 (let (($x269 (forall ((Lambda25 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x86 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x270 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x270 (_ bv0 32))))
 (=> $x245 $x57))))))
 ))
 (let (($x203 (forall ((Lambda25 (_ BitVec 32)) )(let (($x268 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x241 (ite $x268 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x270 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x270 (_ bv0 32))))
 (= $x245 (= ?x241 (_ bv0 32)))))))))
 ))
 (let (($x271 (and $x203 $x269)))
 (let (($x278 (and $x271 $x277)))
 (let (($x210 (and $x278 $x140)))
 (let (($x211 (= $x210 true)))
 (let (($x208 (= $x211 true)))
 (let ((?x215 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x215)))
 (let (($x188 (= ?x93 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x151 (= $x188 true)))
 (let (($x27 (= ?x93 input.dst.llvm-%n)))
 (let (($x125 (= $x27 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x192 (bvsub ?x12 ?x117)))
 (let (($x229 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x192) (bvult ?x12 ?x192))))
 (let (($x197 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x141 (ite $x197 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x67 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x193 (bvmul (_ bv4 64) ?x67)))
 (let ((?x194 ((_ extract 63 32) ?x193)))
 (let (($x63 (= ?x194 ?x141)))
 (let (($x228 (and $x63 $x229)))
 (let (($x15 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x236 (and $x15 $x228)))
 (let (($x234 (= true $x236)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x134 $x234)))
 (let (($x252 (= $x251 true)))
 (let (($x242 (= $x252 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x50 (= $x159 true)))
 (let (($x72 (= $x50 true)))
 (let (($x222 (= $x134 true)))
 (let (($x102 (= $x222 true)))
 (let (($x56 (and $x102 $x72)))
 (let (($x9 (and $x56 $x242)))
 (let (($x29 (and $x9 $x125)))
 (let (($x132 (and $x29 $x151)))
 (let (($x206 (and $x132 $x208)))
 (let (($x97 (and $x206 $x212)))
 (let (($x51 (and $x97 $x281)))
 (let (($x38 (and $x51 $x19)))
 (let (($x85 (and $x38 $x100)))
 (let (($x258 (and $x85 $x186)))
 (let (($x101 (and $x258 $x150)))
 (let (($x77 (and $x101 $x60)))
 (let (($x223 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x118 (and (not $x223) $x77)))
 (let (($x205 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x123 (and $x205 $x118)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x137 (and $x219 $x123)))
 (let (($x220 (forall ((Lambda25 (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x8 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x8 (_ bv1 32))))
 (=> $x122 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x94 (forall ((Lambda25 (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x8 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x8 (_ bv1 32))))
 (= $x122 false)))))
 ))
 (let (($x189 (forall ((Lambda25 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x114 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x8 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x8 (_ bv0 32))))
 (=> $x170 $x57))))))
 ))
 (let (($x153 (forall ((Lambda25 (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x8 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x8 (_ bv0 32))))
 (= $x170 true)))))
 ))
 (let (($x204 (and $x153 $x189)))
 (let (($x80 (and $x204 $x94)))
 (let (($x111 (and $x80 $x220)))
 (let (($x58 (and $x111 $x137)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x171 (and $x157 $x58)))
 (let (($x88 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd ?x12 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x31 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x163 (or false (or false (and (and true (or $x173 $x31)) (or $x28 $x88))))))
 (let (($x70 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x163)))
 (let (($x152 (=> (and $x134 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x163)))
 (let (($x226 (and $x152 $x171)))
 (let (($x233 (=> $x226 $x227)))
 (not $x233)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x202 (bvule ?x49 (_ bv4294967294 32))))
 (let (($x246 (= $x202 true)))
 (let (($x227 (= $x246 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x213)))
 (let (($x263 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x263 true)))
 (let (($x25 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x260 (= $x25 true)))
 (let (($x150 (= $x260 true)))
 (let (($x181 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x181 true)))
 (let (($x186 (= $x184 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x162)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x42)))
 (let ((?x259 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x266 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x259)))
 (let ((?x265 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x265)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x262 (and $x264 $x256)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x177 $x262)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x95 $x196)))
 (let (($x224 (not $x147)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x40 $x187)))
 (let (($x231 (and (not $x98) $x224)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x127 $x200)))
 (let (($x21 (not $x257)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x176 $x120)))
 (let (($x65 (and (not $x130) $x21)))
 (let (($x104 (and (and (and (and (and (and $x65 $x231) $x261) $x11) $x253) $x266) $x75)))
 (let (($x109 (and $x104 $x289)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x91 (or false (or false (and (and true (or $x161 $x64)) (or $x87 $x138))))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x91)))
 (let (($x178 (and $x46 $x109)))
 (let (($x45 (= $x178 true)))
 (let (($x100 (= $x45 true)))
 (let ((?x145 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x44 (= (_ bv0 2) ?x145)))
 (let (($x19 (= $x44 true)))
 (let (($x30 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x30 true)))
 (let (($x281 (= $x18 true)))
 (let (($x113 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x209 (= $x113 true)))
 (let (($x212 (= $x209 true)))
 (let (($x140 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x124))))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv2 32))) ?x36)))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv3 32))) ?x291)))
 (let ((?x68 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x86 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x270 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x270 (_ bv1 32))))
 (=> $x275 (= ?x68 ?x126)))))))))))
 ))
 (let (($x277 (forall ((Lambda25 (_ BitVec 32)) )(let (($x268 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x241 (ite $x268 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x270 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x270 (_ bv1 32))))
 (= $x275 (bvuge ?x241 (_ bv1 32)))))))))
 ))
 (let (($x269 (forall ((Lambda25 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x86 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x270 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x270 (_ bv0 32))))
 (=> $x245 $x57))))))
 ))
 (let (($x203 (forall ((Lambda25 (_ BitVec 32)) )(let (($x268 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x241 (ite $x268 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x270 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x270 (_ bv0 32))))
 (= $x245 (= ?x241 (_ bv0 32)))))))))
 ))
 (let (($x271 (and $x203 $x269)))
 (let (($x278 (and $x271 $x277)))
 (let (($x210 (and $x278 $x140)))
 (let (($x211 (= $x210 true)))
 (let (($x208 (= $x211 true)))
 (let ((?x215 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x215)))
 (let (($x188 (= ?x93 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x151 (= $x188 true)))
 (let (($x27 (= ?x93 input.dst.llvm-%n)))
 (let (($x125 (= $x27 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x192 (bvsub ?x12 ?x117)))
 (let (($x229 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x192) (bvult ?x12 ?x192))))
 (let (($x197 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x141 (ite $x197 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x67 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x193 (bvmul (_ bv4 64) ?x67)))
 (let ((?x194 ((_ extract 63 32) ?x193)))
 (let (($x63 (= ?x194 ?x141)))
 (let (($x228 (and $x63 $x229)))
 (let (($x15 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x236 (and $x15 $x228)))
 (let (($x234 (= true $x236)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x134 $x234)))
 (let (($x252 (= $x251 true)))
 (let (($x242 (= $x252 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x50 (= $x159 true)))
 (let (($x72 (= $x50 true)))
 (let (($x222 (= $x134 true)))
 (let (($x102 (= $x222 true)))
 (let (($x56 (and $x102 $x72)))
 (let (($x9 (and $x56 $x242)))
 (let (($x29 (and $x9 $x125)))
 (let (($x132 (and $x29 $x151)))
 (let (($x206 (and $x132 $x208)))
 (let (($x97 (and $x206 $x212)))
 (let (($x51 (and $x97 $x281)))
 (let (($x38 (and $x51 $x19)))
 (let (($x85 (and $x38 $x100)))
 (let (($x258 (and $x85 $x186)))
 (let (($x101 (and $x258 $x150)))
 (let (($x77 (and $x101 $x60)))
 (let (($x223 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x118 (and (not $x223) $x77)))
 (let (($x205 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x123 (and $x205 $x118)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x137 (and $x219 $x123)))
 (let (($x220 (forall ((Lambda25 (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x8 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x8 (_ bv1 32))))
 (=> $x122 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x94 (forall ((Lambda25 (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x8 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x8 (_ bv1 32))))
 (= $x122 false)))))
 ))
 (let (($x189 (forall ((Lambda25 (_ BitVec 32)) )(let (($x57 (= false false)))
 (let (($x114 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x8 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x8 (_ bv0 32))))
 (=> $x170 $x57))))))
 ))
 (let (($x153 (forall ((Lambda25 (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x8 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x8 (_ bv0 32))))
 (= $x170 true)))))
 ))
 (let (($x204 (and $x153 $x189)))
 (let (($x80 (and $x204 $x94)))
 (let (($x111 (and $x80 $x220)))
 (let (($x58 (and $x111 $x137)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x171 (and $x157 $x58)))
 (let (($x88 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd ?x12 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x31 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x163 (or false (or false (and (and true (or $x173 $x31)) (or $x28 $x88))))))
 (let (($x70 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x163)))
 (let (($x152 (=> (and $x134 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x163)))
 (let (($x226 (and $x152 $x171)))
 (let (($x233 (=> $x226 $x227)))
 (not $x233)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 210 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x285 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x287 (bvsge ?x285 (_ bv0 32))))
 (let (($x82 (= $x287 true)))
 (let (($x294 (= $x82 true)))
 (let ((?x272 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x272)))
 (let (($x274 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x280 (= $x274 true)))
 (let (($x116 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x237 (= $x116 true)))
 (let (($x239 (= $x237 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x62 (= $x166 true)))
 (let (($x267 (= $x62 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x33)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x255)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x233 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x233)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (and $x227 $x190)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x246 $x164)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (and $x60 $x77)))
 (let (($x123 (not $x118)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x263 (and $x213 $x90)))
 (let (($x58 (and (not $x263) $x123)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x186 $x258)))
 (let (($x260 (not $x25)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x262 $x253)))
 (let (($x101 (and (not $x184) $x260)))
 (let (($x13 (and (and (and (and (and (and $x101 $x58) $x226) $x202) $x146) $x17) $x39)))
 (let (($x106 (and $x13 $x43)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x266)))
 (let (($x100 (or false (or false (and (and true (or $x16 $x42)) (or $x162 $x289))))))
 (let (($x181 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x84 (and $x181 $x106)))
 (let (($x282 (= $x84 true)))
 (let (($x69 (= $x282 true)))
 (let ((?x155 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x177 (= (_ bv0 2) ?x155)))
 (let (($x264 (= $x177 true)))
 (let (($x232 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x261 (= $x232 true)))
 (let (($x165 (= $x261 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x224 (= $x147 true)))
 (let (($x231 (= $x224 true)))
 (let (($x187 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x156))))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x156 (_ bv2 32))) ?x120)))
 (let ((?x21 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x156 (_ bv3 32))) ?x127)))
 (let ((?x281 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x279 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x119 (_ bv1 32))))
 (=> $x209 (= ?x281 ?x21)))))))))))
 ))
 (let (($x97 (forall ((Lambda25 (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x35 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x119 (_ bv1 32))))
 (= $x209 (bvuge ?x35 (_ bv1 32)))))))))
 ))
 (let (($x140 (forall ((Lambda25 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x279 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x119 (_ bv0 32))))
 (=> $x36 $x80))))))
 ))
 (let (($x126 (forall ((Lambda25 (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x35 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x119 (_ bv0 32))))
 (= $x36 (= ?x35 (_ bv0 32)))))))))
 ))
 (let (($x210 (and $x126 $x140)))
 (let (($x30 (and $x210 $x97)))
 (let (($x98 (and $x30 $x187)))
 (let (($x230 (= $x98 true)))
 (let (($x95 (= $x230 true)))
 (let ((?x268 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x241 (bvneg ?x268)))
 (let (($x249 (= ?x241 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x269 (= $x249 true)))
 (let (($x248 (= ?x241 input.dst.llvm-%n)))
 (let (($x110 (= $x248 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x93 (bvsub ?x12 ?x117)))
 (let (($x188 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x93) (bvult ?x12 ?x93))))
 (let (($x252 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x9 (ite $x252 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x236 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x234 (bvmul (_ bv4 64) ?x236)))
 (let ((?x251 ((_ extract 63 32) ?x234)))
 (let (($x215 (= ?x251 ?x9)))
 (let (($x151 (and $x215 $x188)))
 (let (($x229 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x132 (and $x229 $x151)))
 (let (($x86 (= true $x132)))
 (let (($x108 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x270 (=> $x108 $x86)))
 (let (($x245 (= $x270 true)))
 (let (($x250 (= $x245 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x63 (= $x141 true)))
 (let (($x195 (= $x63 true)))
 (let (($x194 (= $x108 true)))
 (let (($x197 (= $x194 true)))
 (let (($x192 (and $x197 $x195)))
 (let (($x240 (and $x192 $x250)))
 (let (($x203 (and $x240 $x110)))
 (let (($x271 (and $x203 $x269)))
 (let (($x196 (and $x271 $x95)))
 (let (($x26 (and $x196 $x231)))
 (let (($x254 (and $x26 $x165)))
 (let (($x265 (and $x254 $x264)))
 (let (($x103 (and $x265 $x69)))
 (let (($x172 (and $x103 $x267)))
 (let (($x99 (and $x172 $x239)))
 (let (($x174 (and $x99 $x280)))
 (let (($x193 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x293 (and (not $x193) $x174)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x115 (and $x191 $x293)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x142 (and $x199 $x115)))
 (let (($x50 (forall ((Lambda25 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x204 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x204 (_ bv1 32))))
 (=> $x219 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x135 (forall ((Lambda25 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x204 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x204 (_ bv1 32))))
 (= $x219 false)))))
 ))
 (let (($x183 (forall ((Lambda25 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x170 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x204 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x204 (_ bv0 32))))
 (=> $x122 $x80))))))
 ))
 (let (($x94 (forall ((Lambda25 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x204 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x204 (_ bv0 32))))
 (= $x122 true)))))
 ))
 (let (($x220 (and $x94 $x183)))
 (let (($x205 (and $x220 $x135)))
 (let (($x72 (and $x205 $x50)))
 (let (($x292 (and $x72 $x142)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x81 (and $x23 $x292)))
 (let (($x136 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd ?x12 (_ bv3 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x74 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x152 (or false (or false (and (and true (or $x158 $x74)) (or $x78 $x136))))))
 (let (($x157 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x152)))
 (let (($x48 (=> (and $x108 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x152)))
 (let (($x286 (and $x48 $x81)))
 (let (($x295 (=> $x286 $x294)))
 (not $x295)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x285 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x287 (bvsge ?x285 (_ bv0 32))))
 (let (($x82 (= $x287 true)))
 (let (($x294 (= $x82 true)))
 (let ((?x272 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x272)))
 (let (($x274 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x280 (= $x274 true)))
 (let (($x116 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x237 (= $x116 true)))
 (let (($x239 (= $x237 true)))
 (let (($x166 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x62 (= $x166 true)))
 (let (($x267 (= $x62 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x33)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x255)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x233 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x233)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (and $x227 $x190)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x246 $x164)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x118 (and $x60 $x77)))
 (let (($x123 (not $x118)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x263 (and $x213 $x90)))
 (let (($x58 (and (not $x263) $x123)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x186 $x258)))
 (let (($x260 (not $x25)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x262 $x253)))
 (let (($x101 (and (not $x184) $x260)))
 (let (($x13 (and (and (and (and (and (and $x101 $x58) $x226) $x202) $x146) $x17) $x39)))
 (let (($x106 (and $x13 $x43)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x266 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x266)))
 (let (($x100 (or false (or false (and (and true (or $x16 $x42)) (or $x162 $x289))))))
 (let (($x181 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x84 (and $x181 $x106)))
 (let (($x282 (= $x84 true)))
 (let (($x69 (= $x282 true)))
 (let ((?x155 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x177 (= (_ bv0 2) ?x155)))
 (let (($x264 (= $x177 true)))
 (let (($x232 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x261 (= $x232 true)))
 (let (($x165 (= $x261 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x224 (= $x147 true)))
 (let (($x231 (= $x224 true)))
 (let (($x187 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x156))))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x156 (_ bv2 32))) ?x120)))
 (let ((?x21 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x156 (_ bv3 32))) ?x127)))
 (let ((?x281 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x279 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x119 (_ bv1 32))))
 (=> $x209 (= ?x281 ?x21)))))))))))
 ))
 (let (($x97 (forall ((Lambda25 (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x35 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x119 (_ bv1 32))))
 (= $x209 (bvuge ?x35 (_ bv1 32)))))))))
 ))
 (let (($x140 (forall ((Lambda25 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x279 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x119 (_ bv0 32))))
 (=> $x36 $x80))))))
 ))
 (let (($x126 (forall ((Lambda25 (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x35 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x119 (_ bv0 32))))
 (= $x36 (= ?x35 (_ bv0 32)))))))))
 ))
 (let (($x210 (and $x126 $x140)))
 (let (($x30 (and $x210 $x97)))
 (let (($x98 (and $x30 $x187)))
 (let (($x230 (= $x98 true)))
 (let (($x95 (= $x230 true)))
 (let ((?x268 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x241 (bvneg ?x268)))
 (let (($x249 (= ?x241 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x269 (= $x249 true)))
 (let (($x248 (= ?x241 input.dst.llvm-%n)))
 (let (($x110 (= $x248 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x93 (bvsub ?x12 ?x117)))
 (let (($x188 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x93) (bvult ?x12 ?x93))))
 (let (($x252 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x9 (ite $x252 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x236 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x234 (bvmul (_ bv4 64) ?x236)))
 (let ((?x251 ((_ extract 63 32) ?x234)))
 (let (($x215 (= ?x251 ?x9)))
 (let (($x151 (and $x215 $x188)))
 (let (($x229 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x132 (and $x229 $x151)))
 (let (($x86 (= true $x132)))
 (let (($x108 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x270 (=> $x108 $x86)))
 (let (($x245 (= $x270 true)))
 (let (($x250 (= $x245 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x63 (= $x141 true)))
 (let (($x195 (= $x63 true)))
 (let (($x194 (= $x108 true)))
 (let (($x197 (= $x194 true)))
 (let (($x192 (and $x197 $x195)))
 (let (($x240 (and $x192 $x250)))
 (let (($x203 (and $x240 $x110)))
 (let (($x271 (and $x203 $x269)))
 (let (($x196 (and $x271 $x95)))
 (let (($x26 (and $x196 $x231)))
 (let (($x254 (and $x26 $x165)))
 (let (($x265 (and $x254 $x264)))
 (let (($x103 (and $x265 $x69)))
 (let (($x172 (and $x103 $x267)))
 (let (($x99 (and $x172 $x239)))
 (let (($x174 (and $x99 $x280)))
 (let (($x193 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x293 (and (not $x193) $x174)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x115 (and $x191 $x293)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x142 (and $x199 $x115)))
 (let (($x50 (forall ((Lambda25 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x204 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x204 (_ bv1 32))))
 (=> $x219 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x135 (forall ((Lambda25 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x204 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x204 (_ bv1 32))))
 (= $x219 false)))))
 ))
 (let (($x183 (forall ((Lambda25 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x170 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x204 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x204 (_ bv0 32))))
 (=> $x122 $x80))))))
 ))
 (let (($x94 (forall ((Lambda25 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x204 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x204 (_ bv0 32))))
 (= $x122 true)))))
 ))
 (let (($x220 (and $x94 $x183)))
 (let (($x205 (and $x220 $x135)))
 (let (($x72 (and $x205 $x50)))
 (let (($x292 (and $x72 $x142)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x81 (and $x23 $x292)))
 (let (($x136 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd ?x12 (_ bv3 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x74 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x152 (or false (or false (and (and true (or $x158 $x74)) (or $x78 $x136))))))
 (let (($x157 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x152)))
 (let (($x48 (=> (and $x108 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x152)))
 (let (($x286 (and $x48 $x81)))
 (let (($x295 (=> $x286 $x294)))
 (not $x295)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 210 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (bvule ?x19 (_ bv4294967294 32))))
 (let (($x64 (= $x37 true)))
 (let (($x87 (= $x64 true)))
 (let ((?x211 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x211)))
 (let (($x206 (= ?x208 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x206 true)))
 (let (($x124 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (= $x124 true)))
 (let (($x214 (= $x41 true)))
 (let (($x278 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x278 true)))
 (let (($x283 (= $x68 true)))
 (let (($x102 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x20 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x20))))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x20 (_ bv2 32))) ?x129)))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x20 (_ bv3 32))) ?x189)))
 (let ((?x99 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x226 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x255 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x255 (_ bv1 32))))
 (=> $x267 (= ?x99 ?x66)))))))))))
 ))
 (let (($x116 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x17 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x255 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x255 (_ bv1 32))))
 (= $x267 (bvuge ?x17 (_ bv1 32)))))))))
 ))
 (let (($x84 (forall ((Lambda25 (_ BitVec 32)) )(let (($x205 (= false false)))
 (let (($x226 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x255 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x255 (_ bv0 32))))
 (=> $x39 $x205))))))
 ))
 (let (($x33 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x17 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x255 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x255 (_ bv0 32))))
 (= $x39 (= ?x17 (_ bv0 32)))))))))
 ))
 (let (($x282 (and $x33 $x84)))
 (let (($x237 (and $x282 $x116)))
 (let (($x276 (and $x237 $x102)))
 (let (($x51 (= $x276 true)))
 (let (($x275 (= $x51 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x260 (bvsub ?x12 ?x117)))
 (let (($x263 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x260) (bvult ?x12 ?x260))))
 (let (($x186 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x258 (ite $x186 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x253 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x184 (bvmul (_ bv4 64) ?x253)))
 (let ((?x150 ((_ extract 63 32) ?x184)))
 (let (($x25 (= ?x150 ?x258)))
 (let (($x137 (and $x25 $x263)))
 (let (($x181 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x60 (and $x181 $x137)))
 (let (($x77 (= true $x60)))
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (=> $x139 $x77)))
 (let (($x123 (= $x118 true)))
 (let (($x58 (= $x123 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x289 (= $x162 true)))
 (let (($x109 (= $x289 true)))
 (let (($x42 (= $x139 true)))
 (let (($x75 (= $x42 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x261)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x232 (= (_ bv0 32) ?x26)))
 (let ((?x224 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x224)))
 (let ((?x230 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (and $x98 $x95)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x187 $x196)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x130 $x47)))
 (let (($x176 (not $x46)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x200 $x257)))
 (let (($x120 (and (not $x83) $x176)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x97 $x30)))
 (let (($x96 (not $x281)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x269 $x271)))
 (let (($x156 (and (not $x212) $x96)))
 (let (($x265 (and (and (and (and (and (and $x156 $x120) $x21) $x40) $x147) $x231) $x232)))
 (let (($x7 (and $x265 $x165)))
 (let (($x291 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x288 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x36)))
 (let (($x210 (or false (or false (and (and true (or $x168 $x288)) (or $x71 $x291))))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x210)))
 (let (($x259 (and $x113 $x7)))
 (let (($x85 (= $x259 true)))
 (let (($x266 (= $x85 true)))
 (let (($x241 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x248 (= $x241 true)))
 (let (($x110 (= $x248 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x250 (= (_ bv0 2) ?x245)))
 (let (($x240 (= $x250 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x27)))
 (let (($x151 (= ?x93 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x132 (= $x151 true)))
 (let (($x125 (= ?x93 input.dst.llvm-%n)))
 (let (($x29 (= $x125 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x242 (= $x252 true)))
 (let (($x9 (= $x242 true)))
 (let (($x188 (and $x9 $x29)))
 (let (($x86 (and $x188 $x132)))
 (let (($x268 (and $x86 $x240)))
 (let (($x203 (and $x268 $x110)))
 (let (($x16 (and $x203 $x266)))
 (let (($x104 (and $x16 $x75)))
 (let (($x178 (and $x104 $x109)))
 (let (($x6 (and $x178 $x58)))
 (let (($x277 (and $x6 $x275)))
 (let (($x182 (and $x277 $x283)))
 (let (($x160 (and $x182 $x214)))
 (let (($x145 (and $x160 $x18)))
 (let (($x234 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x52 (and (not $x234) $x145)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x92 (and $x228 $x52)))
 (let (($x201 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x14 (and $x201 $x92)))
 (let (($x63 (forall ((Lambda25 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x220 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x220 (_ bv1 32))))
 (=> $x199 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x15 (forall ((Lambda25 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x220 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x220 (_ bv1 32))))
 (= $x199 false)))))
 ))
 (let (($x159 (forall ((Lambda25 (_ BitVec 32)) )(let (($x205 (= false false)))
 (let (($x122 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x220 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x220 (_ bv0 32))))
 (=> $x219 $x205))))))
 ))
 (let (($x135 (forall ((Lambda25 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x220 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x220 (_ bv0 32))))
 (= $x219 true)))))
 ))
 (let (($x50 (and $x135 $x159)))
 (let (($x191 (and $x50 $x15)))
 (let (($x195 (and $x191 $x63)))
 (let (($x161 (and $x195 $x14)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x38 (and $x8 $x161)))
 (let (($x163 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd ?x12 (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x28 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x48 (or false (or false (and (and true (or $x112 $x28)) (or $x53 $x163))))))
 (let (($x23 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x48)))
 (let (($x5 (=> (and $x139 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x48)))
 (let (($x149 (and $x5 $x38)))
 (let (($x138 (=> $x149 $x87)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (bvule ?x19 (_ bv4294967294 32))))
 (let (($x64 (= $x37 true)))
 (let (($x87 (= $x64 true)))
 (let ((?x211 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x211)))
 (let (($x206 (= ?x208 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x206 true)))
 (let (($x124 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (= $x124 true)))
 (let (($x214 (= $x41 true)))
 (let (($x278 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x278 true)))
 (let (($x283 (= $x68 true)))
 (let (($x102 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x20 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x20))))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x20 (_ bv2 32))) ?x129)))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x20 (_ bv3 32))) ?x189)))
 (let ((?x99 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x226 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x255 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x255 (_ bv1 32))))
 (=> $x267 (= ?x99 ?x66)))))))))))
 ))
 (let (($x116 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x17 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x255 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x255 (_ bv1 32))))
 (= $x267 (bvuge ?x17 (_ bv1 32)))))))))
 ))
 (let (($x84 (forall ((Lambda25 (_ BitVec 32)) )(let (($x205 (= false false)))
 (let (($x226 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x255 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x255 (_ bv0 32))))
 (=> $x39 $x205))))))
 ))
 (let (($x33 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x17 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x255 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x255 (_ bv0 32))))
 (= $x39 (= ?x17 (_ bv0 32)))))))))
 ))
 (let (($x282 (and $x33 $x84)))
 (let (($x237 (and $x282 $x116)))
 (let (($x276 (and $x237 $x102)))
 (let (($x51 (= $x276 true)))
 (let (($x275 (= $x51 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x260 (bvsub ?x12 ?x117)))
 (let (($x263 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x260) (bvult ?x12 ?x260))))
 (let (($x186 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x258 (ite $x186 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x253 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x184 (bvmul (_ bv4 64) ?x253)))
 (let ((?x150 ((_ extract 63 32) ?x184)))
 (let (($x25 (= ?x150 ?x258)))
 (let (($x137 (and $x25 $x263)))
 (let (($x181 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x60 (and $x181 $x137)))
 (let (($x77 (= true $x60)))
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (=> $x139 $x77)))
 (let (($x123 (= $x118 true)))
 (let (($x58 (= $x123 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x289 (= $x162 true)))
 (let (($x109 (= $x289 true)))
 (let (($x42 (= $x139 true)))
 (let (($x75 (= $x42 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x261)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x232 (= (_ bv0 32) ?x26)))
 (let ((?x224 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x224)))
 (let ((?x230 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (and $x98 $x95)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x187 $x196)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x130 $x47)))
 (let (($x176 (not $x46)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x200 $x257)))
 (let (($x120 (and (not $x83) $x176)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x97 $x30)))
 (let (($x96 (not $x281)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x269 $x271)))
 (let (($x156 (and (not $x212) $x96)))
 (let (($x265 (and (and (and (and (and (and $x156 $x120) $x21) $x40) $x147) $x231) $x232)))
 (let (($x7 (and $x265 $x165)))
 (let (($x291 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x288 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x36)))
 (let (($x210 (or false (or false (and (and true (or $x168 $x288)) (or $x71 $x291))))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x210)))
 (let (($x259 (and $x113 $x7)))
 (let (($x85 (= $x259 true)))
 (let (($x266 (= $x85 true)))
 (let (($x241 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x248 (= $x241 true)))
 (let (($x110 (= $x248 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x250 (= (_ bv0 2) ?x245)))
 (let (($x240 (= $x250 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x27)))
 (let (($x151 (= ?x93 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x132 (= $x151 true)))
 (let (($x125 (= ?x93 input.dst.llvm-%n)))
 (let (($x29 (= $x125 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x242 (= $x252 true)))
 (let (($x9 (= $x242 true)))
 (let (($x188 (and $x9 $x29)))
 (let (($x86 (and $x188 $x132)))
 (let (($x268 (and $x86 $x240)))
 (let (($x203 (and $x268 $x110)))
 (let (($x16 (and $x203 $x266)))
 (let (($x104 (and $x16 $x75)))
 (let (($x178 (and $x104 $x109)))
 (let (($x6 (and $x178 $x58)))
 (let (($x277 (and $x6 $x275)))
 (let (($x182 (and $x277 $x283)))
 (let (($x160 (and $x182 $x214)))
 (let (($x145 (and $x160 $x18)))
 (let (($x234 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x52 (and (not $x234) $x145)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x92 (and $x228 $x52)))
 (let (($x201 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x14 (and $x201 $x92)))
 (let (($x63 (forall ((Lambda25 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x220 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x220 (_ bv1 32))))
 (=> $x199 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x15 (forall ((Lambda25 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x220 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x220 (_ bv1 32))))
 (= $x199 false)))))
 ))
 (let (($x159 (forall ((Lambda25 (_ BitVec 32)) )(let (($x205 (= false false)))
 (let (($x122 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x220 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x220 (_ bv0 32))))
 (=> $x219 $x205))))))
 ))
 (let (($x135 (forall ((Lambda25 (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x220 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x220 (_ bv0 32))))
 (= $x219 true)))))
 ))
 (let (($x50 (and $x135 $x159)))
 (let (($x191 (and $x50 $x15)))
 (let (($x195 (and $x191 $x63)))
 (let (($x161 (and $x195 $x14)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x38 (and $x8 $x161)))
 (let (($x163 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd ?x12 (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x28 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x48 (or false (or false (and (and true (or $x112 $x28)) (or $x53 $x163))))))
 (let (($x23 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x48)))
 (let (($x5 (=> (and $x139 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x48)))
 (let (($x149 (and $x5 $x38)))
 (let (($x138 (=> $x149 $x87)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 210 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x174 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (bvsge ?x174 (_ bv0 32))))
 (let (($x285 (= $x142 true)))
 (let (($x294 (= $x285 true)))
 (let ((?x69 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x69)))
 (let (($x166 (= ?x103 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x166 true)))
 (let (($x233 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (= $x233 true)))
 (let (($x164 (= $x190 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x202 true)))
 (let (($x246 (= $x207 true)))
 (let (($x197 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x131))))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv2 32))) ?x153)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv3 32))) ?x183)))
 (let ((?x160 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x172 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x129 (_ bv1 32))))
 (=> $x283 (= ?x160 ?x56)))))))))))
 ))
 (let (($x124 (forall ((Lambda25 (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x121 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x129 (_ bv1 32))))
 (= $x283 (bvuge ?x121 (_ bv1 32)))))))))
 ))
 (let (($x276 (forall ((Lambda25 (_ BitVec 32)) )(let (($x191 (= false false)))
 (let (($x172 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x129 (_ bv0 32))))
 (=> $x189 $x191))))))
 ))
 (let (($x221 (forall ((Lambda25 (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x121 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x129 (_ bv0 32))))
 (= $x189 (= ?x121 (_ bv0 32)))))))))
 ))
 (let (($x51 (and $x221 $x276)))
 (let (($x41 (and $x51 $x124)))
 (let (($x180 (and $x41 $x197)))
 (let (($x272 (= $x180 true)))
 (let (($x171 (= $x272 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x39 (bvsub ?x12 ?x117)))
 (let (($x17 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x39) (bvult ?x12 ?x39))))
 (let (($x6 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x226 (ite $x6 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x118 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x123 (bvmul (_ bv4 64) ?x118)))
 (let ((?x58 ((_ extract 63 32) ?x123)))
 (let (($x255 (= ?x58 ?x226)))
 (let (($x218 (and $x255 $x17)))
 (let (($x60 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x13 (and $x60 $x218)))
 (let (($x33 (= true $x13)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (=> $x134 $x33)))
 (let (($x84 (= $x106 true)))
 (let (($x282 (= $x84 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x260 (= $x101 true)))
 (let (($x213 (= $x260 true)))
 (let (($x186 (= $x134 true)))
 (let (($x258 (= $x186 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x75)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x16)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x266 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x261)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x265 $x165)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (and $x232 $x7)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x98 $x230)))
 (let (($x196 (not $x95)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x40 $x155)))
 (let (($x177 (and (not $x187) $x196)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x120 $x254)))
 (let (($x21 (not $x127)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x113 $x269)))
 (let (($x65 (and (not $x176) $x21)))
 (let (($x100 (and (and (and (and (and (and $x65 $x177) $x231) $x26) $x259) $x266) $x42)))
 (let (($x181 (and $x100 $x104)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x130 (or false (or false (and (and true (or $x97 $x30)) (or $x156 $x200))))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x262 (and $x46 $x181)))
 (let (($x253 (= $x262 true)))
 (let (($x184 (= $x253 true)))
 (let (($x291 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x126 (= $x291 true)))
 (let (($x167 (= $x126 true)))
 (let ((?x288 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x290 (= (_ bv0 2) ?x288)))
 (let (($x35 (= $x290 true)))
 (let ((?x241 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x241)))
 (let (($x119 (= ?x248 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x209 (= $x119 true)))
 (let (($x110 (= ?x248 input.dst.llvm-%n)))
 (let (($x203 (= $x110 true)))
 (let (($x245 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x250 (= $x245 true)))
 (let (($x240 (= $x250 true)))
 (let (($x279 (and $x240 $x203)))
 (let (($x36 (and $x279 $x209)))
 (let (($x71 (and $x36 $x35)))
 (let (($x140 (and $x71 $x167)))
 (let (($x150 (and $x140 $x184)))
 (let (($x25 (and $x150 $x258)))
 (let (($x90 (and $x25 $x213)))
 (let (($x267 (and $x90 $x282)))
 (let (($x49 (and $x267 $x171)))
 (let (($x227 (and $x49 $x246)))
 (let (($x43 (and $x227 $x164)))
 (let (($x274 (and $x43 $x239)))
 (let (($x86 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x287 (and (not $x86) $x274)))
 (let (($x151 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x82 (and $x151 $x287)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x81 (and $x125 $x82)))
 (let (($x215 (forall ((Lambda25 (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x50 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x50 (_ bv1 32))))
 (=> $x201 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x229 (forall ((Lambda25 (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x50 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x50 (_ bv1 32))))
 (= $x201 false)))))
 ))
 (let (($x141 (forall ((Lambda25 (_ BitVec 32)) )(let (($x191 (= false false)))
 (let (($x219 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x50 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x50 (_ bv0 32))))
 (=> $x199 $x191))))))
 ))
 (let (($x15 (forall ((Lambda25 (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x50 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x50 (_ bv0 32))))
 (= $x199 true)))))
 ))
 (let (($x63 (and $x15 $x141)))
 (let (($x228 (and $x63 $x229)))
 (let (($x27 (and $x228 $x215)))
 (let (($x286 (and $x27 $x81)))
 (let (($x204 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x293 (and $x204 $x286)))
 (let (($x152 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd ?x12 (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x78 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x5 (or false (or false (and (and true (or $x128 $x78)) (or $x70 $x152))))))
 (let (($x8 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x5)))
 (let (($x154 (=> (and $x134 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x5)))
 (let (($x115 (and $x154 $x293)))
 (let (($x295 (=> $x115 $x294)))
 (not $x295)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x174 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (bvsge ?x174 (_ bv0 32))))
 (let (($x285 (= $x142 true)))
 (let (($x294 (= $x285 true)))
 (let ((?x69 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x69)))
 (let (($x166 (= ?x103 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x166 true)))
 (let (($x233 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (= $x233 true)))
 (let (($x164 (= $x190 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x202 true)))
 (let (($x246 (= $x207 true)))
 (let (($x197 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x131))))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv2 32))) ?x153)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv3 32))) ?x183)))
 (let ((?x160 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x172 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x129 (_ bv1 32))))
 (=> $x283 (= ?x160 ?x56)))))))))))
 ))
 (let (($x124 (forall ((Lambda25 (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x121 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x129 (_ bv1 32))))
 (= $x283 (bvuge ?x121 (_ bv1 32)))))))))
 ))
 (let (($x276 (forall ((Lambda25 (_ BitVec 32)) )(let (($x191 (= false false)))
 (let (($x172 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x129 (_ bv0 32))))
 (=> $x189 $x191))))))
 ))
 (let (($x221 (forall ((Lambda25 (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x121 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x129 (_ bv0 32))))
 (= $x189 (= ?x121 (_ bv0 32)))))))))
 ))
 (let (($x51 (and $x221 $x276)))
 (let (($x41 (and $x51 $x124)))
 (let (($x180 (and $x41 $x197)))
 (let (($x272 (= $x180 true)))
 (let (($x171 (= $x272 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x39 (bvsub ?x12 ?x117)))
 (let (($x17 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x39) (bvult ?x12 ?x39))))
 (let (($x6 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x226 (ite $x6 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x118 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x123 (bvmul (_ bv4 64) ?x118)))
 (let ((?x58 ((_ extract 63 32) ?x123)))
 (let (($x255 (= ?x58 ?x226)))
 (let (($x218 (and $x255 $x17)))
 (let (($x60 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x13 (and $x60 $x218)))
 (let (($x33 (= true $x13)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (=> $x134 $x33)))
 (let (($x84 (= $x106 true)))
 (let (($x282 (= $x84 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x260 (= $x101 true)))
 (let (($x213 (= $x260 true)))
 (let (($x186 (= $x134 true)))
 (let (($x258 (= $x186 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x75)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x16)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x266 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x261)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x265 $x165)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (and $x232 $x7)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x98 $x230)))
 (let (($x196 (not $x95)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (and $x40 $x155)))
 (let (($x177 (and (not $x187) $x196)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x120 $x254)))
 (let (($x21 (not $x127)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x113 $x269)))
 (let (($x65 (and (not $x176) $x21)))
 (let (($x100 (and (and (and (and (and (and $x65 $x177) $x231) $x26) $x259) $x266) $x42)))
 (let (($x181 (and $x100 $x104)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x130 (or false (or false (and (and true (or $x97 $x30)) (or $x156 $x200))))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x262 (and $x46 $x181)))
 (let (($x253 (= $x262 true)))
 (let (($x184 (= $x253 true)))
 (let (($x291 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x126 (= $x291 true)))
 (let (($x167 (= $x126 true)))
 (let ((?x288 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x290 (= (_ bv0 2) ?x288)))
 (let (($x35 (= $x290 true)))
 (let ((?x241 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x241)))
 (let (($x119 (= ?x248 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x209 (= $x119 true)))
 (let (($x110 (= ?x248 input.dst.llvm-%n)))
 (let (($x203 (= $x110 true)))
 (let (($x245 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x250 (= $x245 true)))
 (let (($x240 (= $x250 true)))
 (let (($x279 (and $x240 $x203)))
 (let (($x36 (and $x279 $x209)))
 (let (($x71 (and $x36 $x35)))
 (let (($x140 (and $x71 $x167)))
 (let (($x150 (and $x140 $x184)))
 (let (($x25 (and $x150 $x258)))
 (let (($x90 (and $x25 $x213)))
 (let (($x267 (and $x90 $x282)))
 (let (($x49 (and $x267 $x171)))
 (let (($x227 (and $x49 $x246)))
 (let (($x43 (and $x227 $x164)))
 (let (($x274 (and $x43 $x239)))
 (let (($x86 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x287 (and (not $x86) $x274)))
 (let (($x151 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x82 (and $x151 $x287)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x81 (and $x125 $x82)))
 (let (($x215 (forall ((Lambda25 (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x50 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x50 (_ bv1 32))))
 (=> $x201 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x229 (forall ((Lambda25 (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x50 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x50 (_ bv1 32))))
 (= $x201 false)))))
 ))
 (let (($x141 (forall ((Lambda25 (_ BitVec 32)) )(let (($x191 (= false false)))
 (let (($x219 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x50 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x50 (_ bv0 32))))
 (=> $x199 $x191))))))
 ))
 (let (($x15 (forall ((Lambda25 (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x50 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x50 (_ bv0 32))))
 (= $x199 true)))))
 ))
 (let (($x63 (and $x15 $x141)))
 (let (($x228 (and $x63 $x229)))
 (let (($x27 (and $x228 $x215)))
 (let (($x286 (and $x27 $x81)))
 (let (($x204 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x293 (and $x204 $x286)))
 (let (($x152 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd ?x12 (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x78 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x5 (or false (or false (and (and true (or $x128 $x78)) (or $x70 $x152))))))
 (let (($x8 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x5)))
 (let (($x154 (=> (and $x134 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x5)))
 (let (($x115 (and $x154 $x293)))
 (let (($x295 (=> $x115 $x294)))
 (not $x295)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 210 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x14 (bvule ?x145 input.dst.llvm-%n)))
 (let (($x19 (= $x14 true)))
 (let (($x87 (= $x19 true)))
 (let ((?x275 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x277 (bvneg ?x275)))
 (let (($x278 (= ?x277 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x278 true)))
 (let ((?x291 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x291)))
 (let (($x111 (= ?x126 input.dst.llvm-%n)))
 (let (($x292 (= $x111 true)))
 (let (($x273 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x256 (= $x273 true)))
 (let (($x20 (= $x256 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x211 true)))
 (let (($x237 (= $x62 true)))
 (let (($x192 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x295 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x295))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x295 (_ bv2 32))) ?x122)))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x295 (_ bv3 32))) ?x94)))
 (let ((?x233 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x51 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x216 (_ bv1 32))))
 (=> $x49 (= ?x233 ?x159)))))))))))
 ))
 (let (($x207 (forall ((Lambda25 (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x80 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x216 (_ bv1 32))))
 (= $x49 (bvuge ?x80 (_ bv1 32)))))))))
 ))
 (let (($x67 (forall ((Lambda25 (_ BitVec 32)) )(let (($x228 (= false false)))
 (let (($x51 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x216 (_ bv0 32))))
 (=> $x284 $x228))))))
 ))
 (let (($x153 (forall ((Lambda25 (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x80 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x216 (_ bv0 32))))
 (= $x284 (= ?x80 (_ bv0 32)))))))))
 ))
 (let (($x194 (and $x153 $x67)))
 (let (($x246 (and $x194 $x207)))
 (let (($x236 (and $x246 $x192)))
 (let (($x251 (= $x236 true)))
 (let (($x252 (= $x251 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x267 (bvsub ?x12 ?x117)))
 (let (($x34 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x267) (bvult ?x12 ?x267))))
 (let (($x106 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x84 (ite $x106 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvmul (_ bv4 64) ?x218)))
 (let ((?x33 ((_ extract 63 32) ?x13)))
 (let (($x282 (= ?x33 ?x84)))
 (let (($x57 (and $x282 $x34)))
 (let (($x59 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x143 (and $x59 $x57)))
 (let (($x121 (= true $x143)))
 (let (($x108 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x114 (=> $x108 $x121)))
 (let (($x66 (= $x114 true)))
 (let (($x221 (= $x66 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x6 true)))
 (let (($x255 (= $x226 true)))
 (let (($x118 (= $x108 true)))
 (let (($x123 (= $x118 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x184)))
 (let ((?x262 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x262)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x45 $x42)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x266 $x100)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (and $x26 $x109)))
 (let (($x265 (not $x232)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x231 $x289)))
 (let (($x165 (and (not $x264) $x265)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x230 $x95)))
 (let (($x177 (not $x196)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x83 $x91)))
 (let (($x224 (and (not $x98) $x177)))
 (let (($x213 (and (and (and (and (and (and $x224 $x165) $x259) $x85) $x75) $x181) $x253)))
 (let (($x90 (and $x213 $x150)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x155 (or false (or false (and (and true (or $x269 $x176)) (or $x254 $x127))))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x263 (and $x147 $x90)))
 (let (($x137 (= $x263 true)))
 (let (($x60 (= $x137 true)))
 (let (($x281 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x96 (= $x281 true)))
 (let (($x156 (= $x96 true)))
 (let ((?x47 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x175 (= (_ bv0 2) ?x47)))
 (let (($x97 (= $x175 true)))
 (let (($x167 (= ?x126 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x140 (= $x167 true)))
 (let (($x288 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x288 true)))
 (let (($x35 (= $x290 true)))
 (let (($x271 (and $x35 $x140)))
 (let (($x30 (and $x271 $x97)))
 (let (($x200 (and $x30 $x156)))
 (let (($x77 (and $x200 $x60)))
 (let (($x58 (and $x77 $x123)))
 (let (($x169 (and $x58 $x255)))
 (let (($x102 (and $x169 $x221)))
 (let (($x116 (and $x102 $x252)))
 (let (($x99 (and $x116 $x237)))
 (let (($x61 (and $x99 $x20)))
 (let (($x222 (and $x61 $x292)))
 (let (($x206 (and $x222 $x214)))
 (let (($x36 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x37 (and (not $x36) $x206)))
 (let (($x119 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x64 (and $x119 $x37)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x38 (and $x110 $x64)))
 (let (($x268 (forall ((Lambda25 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x63 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x63 (_ bv1 32))))
 (=> $x125 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x188 (forall ((Lambda25 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x63 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x63 (_ bv1 32))))
 (= $x125 false)))))
 ))
 (let (($x9 (forall ((Lambda25 (_ BitVec 32)) )(let (($x228 (= false false)))
 (let (($x199 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x63 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x63 (_ bv0 32))))
 (=> $x201 $x228))))))
 ))
 (let (($x229 (forall ((Lambda25 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x63 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x63 (_ bv0 32))))
 (= $x201 true)))))
 ))
 (let (($x215 (and $x229 $x9)))
 (let (($x151 (and $x215 $x188)))
 (let (($x241 (and $x151 $x268)))
 (let (($x149 (and $x241 $x38)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x52 (and $x220 $x149)))
 (let (($x48 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd ?x12 (_ bv3 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x53 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x78)))
 (let (($x154 (or false (or false (and (and true (or $x88 $x53)) (or $x157 $x48))))))
 (let (($x204 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x154)))
 (let (($x31 (=> (and $x108 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x154)))
 (let (($x92 (and $x31 $x52)))
 (let (($x138 (=> $x92 $x87)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x14 (bvule ?x145 input.dst.llvm-%n)))
 (let (($x19 (= $x14 true)))
 (let (($x87 (= $x19 true)))
 (let ((?x275 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x277 (bvneg ?x275)))
 (let (($x278 (= ?x277 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x278 true)))
 (let ((?x291 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x291)))
 (let (($x111 (= ?x126 input.dst.llvm-%n)))
 (let (($x292 (= $x111 true)))
 (let (($x273 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x256 (= $x273 true)))
 (let (($x20 (= $x256 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (= $x211 true)))
 (let (($x237 (= $x62 true)))
 (let (($x192 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x295 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x295))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x295 (_ bv2 32))) ?x122)))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x295 (_ bv3 32))) ?x94)))
 (let ((?x233 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x51 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x216 (_ bv1 32))))
 (=> $x49 (= ?x233 ?x159)))))))))))
 ))
 (let (($x207 (forall ((Lambda25 (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x80 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x216 (_ bv1 32))))
 (= $x49 (bvuge ?x80 (_ bv1 32)))))))))
 ))
 (let (($x67 (forall ((Lambda25 (_ BitVec 32)) )(let (($x228 (= false false)))
 (let (($x51 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x216 (_ bv0 32))))
 (=> $x284 $x228))))))
 ))
 (let (($x153 (forall ((Lambda25 (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x80 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x216 (_ bv0 32))))
 (= $x284 (= ?x80 (_ bv0 32)))))))))
 ))
 (let (($x194 (and $x153 $x67)))
 (let (($x246 (and $x194 $x207)))
 (let (($x236 (and $x246 $x192)))
 (let (($x251 (= $x236 true)))
 (let (($x252 (= $x251 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x267 (bvsub ?x12 ?x117)))
 (let (($x34 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x267) (bvult ?x12 ?x267))))
 (let (($x106 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x84 (ite $x106 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvmul (_ bv4 64) ?x218)))
 (let ((?x33 ((_ extract 63 32) ?x13)))
 (let (($x282 (= ?x33 ?x84)))
 (let (($x57 (and $x282 $x34)))
 (let (($x59 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x143 (and $x59 $x57)))
 (let (($x121 (= true $x143)))
 (let (($x108 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x114 (=> $x108 $x121)))
 (let (($x66 (= $x114 true)))
 (let (($x221 (= $x66 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x6 true)))
 (let (($x255 (= $x226 true)))
 (let (($x118 (= $x108 true)))
 (let (($x123 (= $x118 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x184)))
 (let ((?x262 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x262)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x45 $x42)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x266 $x100)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (and $x26 $x109)))
 (let (($x265 (not $x232)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x231 $x289)))
 (let (($x165 (and (not $x264) $x265)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x230 $x95)))
 (let (($x177 (not $x196)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x83 $x91)))
 (let (($x224 (and (not $x98) $x177)))
 (let (($x213 (and (and (and (and (and (and $x224 $x165) $x259) $x85) $x75) $x181) $x253)))
 (let (($x90 (and $x213 $x150)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x155 (or false (or false (and (and true (or $x269 $x176)) (or $x254 $x127))))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x263 (and $x147 $x90)))
 (let (($x137 (= $x263 true)))
 (let (($x60 (= $x137 true)))
 (let (($x281 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x96 (= $x281 true)))
 (let (($x156 (= $x96 true)))
 (let ((?x47 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x175 (= (_ bv0 2) ?x47)))
 (let (($x97 (= $x175 true)))
 (let (($x167 (= ?x126 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x140 (= $x167 true)))
 (let (($x288 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x288 true)))
 (let (($x35 (= $x290 true)))
 (let (($x271 (and $x35 $x140)))
 (let (($x30 (and $x271 $x97)))
 (let (($x200 (and $x30 $x156)))
 (let (($x77 (and $x200 $x60)))
 (let (($x58 (and $x77 $x123)))
 (let (($x169 (and $x58 $x255)))
 (let (($x102 (and $x169 $x221)))
 (let (($x116 (and $x102 $x252)))
 (let (($x99 (and $x116 $x237)))
 (let (($x61 (and $x99 $x20)))
 (let (($x222 (and $x61 $x292)))
 (let (($x206 (and $x222 $x214)))
 (let (($x36 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x37 (and (not $x36) $x206)))
 (let (($x119 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x64 (and $x119 $x37)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x38 (and $x110 $x64)))
 (let (($x268 (forall ((Lambda25 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x63 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x63 (_ bv1 32))))
 (=> $x125 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x188 (forall ((Lambda25 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x63 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x63 (_ bv1 32))))
 (= $x125 false)))))
 ))
 (let (($x9 (forall ((Lambda25 (_ BitVec 32)) )(let (($x228 (= false false)))
 (let (($x199 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x63 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x63 (_ bv0 32))))
 (=> $x201 $x228))))))
 ))
 (let (($x229 (forall ((Lambda25 (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x63 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x63 (_ bv0 32))))
 (= $x201 true)))))
 ))
 (let (($x215 (and $x229 $x9)))
 (let (($x151 (and $x215 $x188)))
 (let (($x241 (and $x151 $x268)))
 (let (($x149 (and $x241 $x38)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x52 (and $x220 $x149)))
 (let (($x48 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd ?x12 (_ bv3 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x53 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x78)))
 (let (($x154 (or false (or false (and (and true (or $x88 $x53)) (or $x157 $x48))))))
 (let (($x204 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x154)))
 (let (($x31 (=> (and $x108 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x154)))
 (let (($x92 (and $x31 $x52)))
 (let (($x138 (=> $x92 $x87)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x344 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x53 (bvadd ?x12 (_ bv3 32))))
 (let ((?x316 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x12 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x319 (store ?x316 (bvadd ?x12 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x322 (store ?x319 (bvadd ?x12 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x324 (store ?x322 ?x53 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x338 (concat (select ?x324 (bvadd ?x52 (_ bv2 32))) (concat (select ?x324 (bvadd ?x52 (_ bv1 32))) (select ?x324 ?x52)))))
 (let ((?x62 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x10 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x342 (= (ite $x10 input.spec-%var-i-0.L2%7%bbentry ?x62) (concat (select ?x324 (bvadd ?x52 (_ bv3 32))) ?x338))))
 (let ((?x297 (ite (or (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25) $x10) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x297 (_ bv1 32))))
 (=> $x309 $x342))))))))))))))))
 ))
 (let (($x311 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (bvule (_ bv0 32) Lambda25)))
 (let (($x243 (and $x294 (bvult Lambda25 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x244 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x297 (ite (or $x153 $x10) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x297 (_ bv1 32))))
 (= $x309 (bvuge ?x244 (_ bv1 32)))))))))))
 ))
 (let (($x303 (forall ((Lambda25 (_ BitVec 32)) )(let (($x151 (= false false)))
 (let (($x10 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x297 (ite (or $x153 $x10) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (= ?x297 (_ bv0 32))))
 (=> $x298 $x151)))))))
 ))
 (let (($x300 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (bvule (_ bv0 32) Lambda25)))
 (let (($x243 (and $x294 (bvult Lambda25 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x244 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x297 (ite (or $x153 $x10) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (= ?x297 (_ bv0 32))))
 (= $x298 (= ?x244 (_ bv0 32)))))))))))
 ))
 (let (($x304 (and $x300 $x303)))
 (let (($x312 (and $x304 $x311)))
 (let (($x345 (and $x312 $x344)))
 (let (($x346 (= $x345 true)))
 (let (($x347 (= $x346 true)))
 (let ((?x197 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x197)))
 (let (($x272 (= ?x180 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (= $x272 true)))
 (let ((?x208 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x249 (= (_ bv0 2) ?x208)))
 (let (($x131 (= $x249 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x182 (= $x68 true)))
 (let (($x124 (= $x182 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x283 (= $x245 true)))
 (let (($x190 (= $x283 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x27 true)))
 (let (($x132 (= $x93 true)))
 (let (($x135 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x52))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv2 32))) ?x19)))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv3 32))) ?x89)))
 (let ((?x62 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x287 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x287 (_ bv1 32))))
 (=> $x236 (= ?x62 ?x219)))))))))))
 ))
 (let (($x252 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (bvule (_ bv0 32) Lambda25)))
 (let ((?x205 (ite (and $x294 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x287 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x287 (_ bv1 32))))
 (= $x236 (bvuge ?x205 (_ bv1 32)))))))))
 ))
 (let (($x122 (forall ((Lambda25 (_ BitVec 32)) )(let (($x151 (= false false)))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x287 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x287 (_ bv0 32))))
 (=> $x144 $x151))))))
 ))
 (let (($x210 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (bvule (_ bv0 32) Lambda25)))
 (let ((?x205 (ite (and $x294 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x287 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x287 (_ bv0 32))))
 (= $x144 (= ?x205 (_ bv0 32)))))))))
 ))
 (let (($x94 (and $x210 $x122)))
 (let (($x116 (and $x94 $x252)))
 (let (($x191 (and $x116 $x135)))
 (let (($x32 (= $x191 true)))
 (let (($x141 (= $x32 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x114 (bvsub ?x12 ?x117)))
 (let (($x51 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x114) (bvult ?x12 ?x114))))
 (let (($x57 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x143 (ite $x57 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x189 (bvmul (_ bv4 64) ?x129)))
 (let ((?x34 ((_ extract 63 32) ?x189)))
 (let (($x121 (= ?x34 ?x143)))
 (let (($x216 (and $x121 $x51)))
 (let (($x172 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x284 (and $x172 $x216)))
 (let (($x72 (= true $x284)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (=> $x134 $x72)))
 (let (($x161 (= $x223 true)))
 (let (($x80 (= $x161 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x13 (= $x218 true)))
 (let (($x33 (= $x13 true)))
 (let (($x39 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x146 (= $x39 true)))
 (let (($x59 (= $x146 true)))
 (let (($x6 (= $x134 true)))
 (let (($x226 (= $x6 true)))
 (let ((?x262 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x262)))
 (let ((?x181 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x181)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x45 $x42)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x266 $x100)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x232 $x265)))
 (let (($x186 (not $x165)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x261 $x26)))
 (let (($x259 (and (not $x109) $x186)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x196 $x177)))
 (let (($x231 (not $x224)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x113 $x269)))
 (let (($x264 (and (not $x95) $x231)))
 (let (($x137 (and (and (and (and (and (and $x264 $x259) $x178) $x25) $x75) $x104) $x260)))
 (let (($x60 (and $x137 $x253)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x120)))
 (let (($x98 (or false (or false (and (and true (or $x254 $x127)) (or $x40 $x155))))))
 (let (($x230 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x77 (and $x230 $x60)))
 (let (($x118 (= $x77 true)))
 (let (($x123 (= $x118 true)))
 (let ((?x30 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x30)))
 (let (($x200 (= ?x281 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x130 (= $x200 true)))
 (let (($x96 (= ?x281 input.dst.llvm-%n)))
 (let (($x156 (= $x96 true)))
 (let (($x46 (and $x156 $x130)))
 (let (($x58 (and $x46 $x123)))
 (let (($x255 (and $x58 $x226)))
 (let (($x17 (and $x255 $x59)))
 (let (($x106 (and $x17 $x33)))
 (let (($x79 (and $x106 $x80)))
 (let (($x234 (and $x79 $x141)))
 (let (($x270 (and $x234 $x132)))
 (let (($x276 (and $x270 $x190)))
 (let (($x41 (and $x276 $x124)))
 (let (($x183 (and $x41 $x131)))
 (let (($x43 (and $x183 $x227)))
 (let (($x175 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x293 (and (not $x175) $x43)))
 (let (($x212 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x115 (and $x212 $x293)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x82 (and $x167 $x115)))
 (let (($x71 (forall ((Lambda25 (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x215 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x215 (_ bv1 32))))
 (=> $x110 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x279 (forall ((Lambda25 (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x215 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x215 (_ bv1 32))))
 (= $x110 false)))))
 ))
 (let (($x240 (forall ((Lambda25 (_ BitVec 32)) )(let (($x151 (= false false)))
 (let (($x201 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x215 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x215 (_ bv0 32))))
 (=> $x125 $x151))))))
 ))
 (let (($x188 (forall ((Lambda25 (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x215 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x215 (_ bv0 32))))
 (= $x125 true)))))
 ))
 (let (($x268 (and $x188 $x240)))
 (let (($x119 (and $x268 $x279)))
 (let (($x291 (and $x119 $x71)))
 (let (($x81 (and $x291 $x82)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x166 (and $x50 $x81)))
 (let (($x5 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd ?x12 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x70 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x31 (or false (or false (and (and true (or $x136 $x70)) (or $x23 $x5))))))
 (let (($x220 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x31)))
 (let (($x74 (=> (and $x134 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x31)))
 (let (($x239 (and $x74 $x166)))
 (let (($x348 (=> $x239 $x347)))
 (not $x348))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x344 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x53 (bvadd ?x12 (_ bv3 32))))
 (let ((?x316 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x12 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x319 (store ?x316 (bvadd ?x12 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x322 (store ?x319 (bvadd ?x12 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x324 (store ?x322 ?x53 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x338 (concat (select ?x324 (bvadd ?x52 (_ bv2 32))) (concat (select ?x324 (bvadd ?x52 (_ bv1 32))) (select ?x324 ?x52)))))
 (let ((?x62 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x10 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x342 (= (ite $x10 input.spec-%var-i-0.L2%7%bbentry ?x62) (concat (select ?x324 (bvadd ?x52 (_ bv3 32))) ?x338))))
 (let ((?x297 (ite (or (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25) $x10) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x297 (_ bv1 32))))
 (=> $x309 $x342))))))))))))))))
 ))
 (let (($x311 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (bvule (_ bv0 32) Lambda25)))
 (let (($x243 (and $x294 (bvult Lambda25 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x244 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x297 (ite (or $x153 $x10) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x297 (_ bv1 32))))
 (= $x309 (bvuge ?x244 (_ bv1 32)))))))))))
 ))
 (let (($x303 (forall ((Lambda25 (_ BitVec 32)) )(let (($x151 (= false false)))
 (let (($x10 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x297 (ite (or $x153 $x10) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (= ?x297 (_ bv0 32))))
 (=> $x298 $x151)))))))
 ))
 (let (($x300 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (bvule (_ bv0 32) Lambda25)))
 (let (($x243 (and $x294 (bvult Lambda25 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x244 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x297 (ite (or $x153 $x10) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (= ?x297 (_ bv0 32))))
 (= $x298 (= ?x244 (_ bv0 32)))))))))))
 ))
 (let (($x304 (and $x300 $x303)))
 (let (($x312 (and $x304 $x311)))
 (let (($x345 (and $x312 $x344)))
 (let (($x346 (= $x345 true)))
 (let (($x347 (= $x346 true)))
 (let ((?x197 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x197)))
 (let (($x272 (= ?x180 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (= $x272 true)))
 (let ((?x208 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x249 (= (_ bv0 2) ?x208)))
 (let (($x131 (= $x249 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x182 (= $x68 true)))
 (let (($x124 (= $x182 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x283 (= $x245 true)))
 (let (($x190 (= $x283 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x27 true)))
 (let (($x132 (= $x93 true)))
 (let (($x135 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x52))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv2 32))) ?x19)))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x52 (_ bv3 32))) ?x89)))
 (let ((?x62 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x287 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x287 (_ bv1 32))))
 (=> $x236 (= ?x62 ?x219)))))))))))
 ))
 (let (($x252 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (bvule (_ bv0 32) Lambda25)))
 (let ((?x205 (ite (and $x294 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x287 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x287 (_ bv1 32))))
 (= $x236 (bvuge ?x205 (_ bv1 32)))))))))
 ))
 (let (($x122 (forall ((Lambda25 (_ BitVec 32)) )(let (($x151 (= false false)))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x287 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x287 (_ bv0 32))))
 (=> $x144 $x151))))))
 ))
 (let (($x210 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (bvule (_ bv0 32) Lambda25)))
 (let ((?x205 (ite (and $x294 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x287 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x287 (_ bv0 32))))
 (= $x144 (= ?x205 (_ bv0 32)))))))))
 ))
 (let (($x94 (and $x210 $x122)))
 (let (($x116 (and $x94 $x252)))
 (let (($x191 (and $x116 $x135)))
 (let (($x32 (= $x191 true)))
 (let (($x141 (= $x32 true)))
 (let ((?x117 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvadd input.dst.llvm-%m ?x117)))
 (let ((?x114 (bvsub ?x12 ?x117)))
 (let (($x51 (ite (bvsge ?x117 (_ bv0 32)) (bvuge ?x12 ?x114) (bvult ?x12 ?x114))))
 (let (($x57 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x143 (ite $x57 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x189 (bvmul (_ bv4 64) ?x129)))
 (let ((?x34 ((_ extract 63 32) ?x189)))
 (let (($x121 (= ?x34 ?x143)))
 (let (($x216 (and $x121 $x51)))
 (let (($x172 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x284 (and $x172 $x216)))
 (let (($x72 (= true $x284)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (=> $x134 $x72)))
 (let (($x161 (= $x223 true)))
 (let (($x80 (= $x161 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x13 (= $x218 true)))
 (let (($x33 (= $x13 true)))
 (let (($x39 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x146 (= $x39 true)))
 (let (($x59 (= $x146 true)))
 (let (($x6 (= $x134 true)))
 (let (($x226 (= $x6 true)))
 (let ((?x262 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x262)))
 (let ((?x181 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x181)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x45 $x42)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x266 $x100)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x232 $x265)))
 (let (($x186 (not $x165)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x261 $x26)))
 (let (($x259 (and (not $x109) $x186)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x196 $x177)))
 (let (($x231 (not $x224)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x113 $x269)))
 (let (($x264 (and (not $x95) $x231)))
 (let (($x137 (and (and (and (and (and (and $x264 $x259) $x178) $x25) $x75) $x104) $x260)))
 (let (($x60 (and $x137 $x253)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x120)))
 (let (($x98 (or false (or false (and (and true (or $x254 $x127)) (or $x40 $x155))))))
 (let (($x230 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x77 (and $x230 $x60)))
 (let (($x118 (= $x77 true)))
 (let (($x123 (= $x118 true)))
 (let ((?x30 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x30)))
 (let (($x200 (= ?x281 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x130 (= $x200 true)))
 (let (($x96 (= ?x281 input.dst.llvm-%n)))
 (let (($x156 (= $x96 true)))
 (let (($x46 (and $x156 $x130)))
 (let (($x58 (and $x46 $x123)))
 (let (($x255 (and $x58 $x226)))
 (let (($x17 (and $x255 $x59)))
 (let (($x106 (and $x17 $x33)))
 (let (($x79 (and $x106 $x80)))
 (let (($x234 (and $x79 $x141)))
 (let (($x270 (and $x234 $x132)))
 (let (($x276 (and $x270 $x190)))
 (let (($x41 (and $x276 $x124)))
 (let (($x183 (and $x41 $x131)))
 (let (($x43 (and $x183 $x227)))
 (let (($x175 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x293 (and (not $x175) $x43)))
 (let (($x212 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x115 (and $x212 $x293)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x82 (and $x167 $x115)))
 (let (($x71 (forall ((Lambda25 (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x215 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x215 (_ bv1 32))))
 (=> $x110 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x279 (forall ((Lambda25 (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x215 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x215 (_ bv1 32))))
 (= $x110 false)))))
 ))
 (let (($x240 (forall ((Lambda25 (_ BitVec 32)) )(let (($x151 (= false false)))
 (let (($x201 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x215 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x215 (_ bv0 32))))
 (=> $x125 $x151))))))
 ))
 (let (($x188 (forall ((Lambda25 (_ BitVec 32)) )(let (($x201 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x215 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x215 (_ bv0 32))))
 (= $x125 true)))))
 ))
 (let (($x268 (and $x188 $x240)))
 (let (($x119 (and $x268 $x279)))
 (let (($x291 (and $x119 $x71)))
 (let (($x81 (and $x291 $x82)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x166 (and $x50 $x81)))
 (let (($x5 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd ?x12 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x70 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x31 (or false (or false (and (and true (or $x136 $x70)) (or $x23 $x5))))))
 (let (($x220 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) $x31)))
 (let (($x74 (=> (and $x134 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) $x31)))
 (let (($x239 (and $x74 $x166)))
 (let (($x348 (=> $x239 $x347)))
 (not $x348))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x187 (bvmul (_ bv4294967295 32) ?x139)))
 (let ((?x76 (bvneg ?x187)))
 (let (($x225 (= ?x76 ?x199)))
 (let (($x18 (= $x225 true)))
 (let ((?x334 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x336 (bvneg ?x334)))
 (let (($x338 (= ?x336 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x340 (= $x338 true)))
 (let (($x324 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x339 (= $x324 true)))
 (let (($x337 (= $x339 true)))
 (let (($x321 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x320 (= $x321 true)))
 (let (($x322 (= $x320 true)))
 (let (($x316 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x318 (= $x316 true)))
 (let (($x317 (= $x318 true)))
 (let (($x311 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x142 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x142))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv2 32))) ?x235)))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv3 32))) ?x302)))
 (let ((?x208 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x52 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x191 (_ bv1 32))))
 (=> $x68 (= ?x208 ?x309)))))))))))
 ))
 (let (($x124 (forall ((Lambda25 (_ BitVec 32)) )(let (($x133 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x280 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x191 (_ bv1 32))))
 (= $x68 (bvuge ?x280 (_ bv1 32)))))))))
 ))
 (let (($x132 (forall ((Lambda25 (_ BitVec 32)) )(let (($x36 (= false false)))
 (let (($x52 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (= ?x191 (_ bv0 32))))
 (=> $x32 $x36))))))
 ))
 (let (($x234 (forall ((Lambda25 (_ BitVec 32)) )(let (($x133 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x280 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (= ?x191 (_ bv0 32))))
 (= $x32 (= ?x280 (_ bv0 32)))))))))
 ))
 (let (($x270 (and $x234 $x132)))
 (let (($x41 (and $x270 $x124)))
 (let (($x312 (and $x41 $x311)))
 (let (($x341 (= $x312 true)))
 (let (($x315 (= $x341 true)))
 (let ((?x12 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x148 (bvadd input.dst.llvm-%m ?x12)))
 (let ((?x44 (bvsub ?x148 ?x12)))
 (let (($x94 (ite (bvsge ?x12 (_ bv0 32)) (bvuge ?x148 ?x44) (bvult ?x148 ?x44))))
 (let (($x295 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x205 (ite $x295 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x144 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x294 (bvmul (_ bv4 64) ?x144)))
 (let ((?x164 ((_ extract 63 32) ?x294)))
 (let (($x217 (= ?x164 ?x205)))
 (let (($x236 (and $x217 $x94)))
 (let (($x153 (= (bvand ?x148 (_ bv4294967292 32)) ?x148)))
 (let (($x192 (and $x153 $x236)))
 (let (($x251 (= true $x192)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (=> $x134 $x251)))
 (let (($x116 (= $x252 true)))
 (let (($x62 (= $x116 true)))
 (let (($x284 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x284 true)))
 (let (($x223 (= $x72 true)))
 (let (($x221 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x102 (= $x221 true)))
 (let (($x51 (= $x102 true)))
 (let (($x143 (= $x134 true)))
 (let (($x121 (= $x143 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x17)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x146)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (and $x123 $x6)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (and $x118 $x226)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x263 (and $x101 $x104)))
 (let (($x181 (not $x263)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x100 $x75)))
 (let (($x137 (and (not $x90) $x181)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x266 (and $x25 $x150)))
 (let (($x45 (not $x266)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x177 $x224)))
 (let (($x42 (and (not $x85) $x45)))
 (let (($x172 (and (and (and (and (and (and $x42 $x137) $x253) $x77) $x255) $x39) $x59)))
 (let (($x267 (and $x172 $x218)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x258 (or false (or false (and (and true (or $x26 $x109)) (or $x265 $x165))))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x258)))
 (let (($x129 (and $x184 $x267)))
 (let (($x189 (= $x129 true)))
 (let (($x34 (= $x189 true)))
 (let ((?x113 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x269 (= (_ bv0 2) ?x113)))
 (let (($x95 (= $x269 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x65)))
 (let (($x83 (= ?x40 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x91 (= $x83 true)))
 (let (($x155 (= ?x40 input.dst.llvm-%n)))
 (let (($x147 (= $x155 true)))
 (let (($x98 (and $x147 $x91)))
 (let (($x289 (and $x98 $x95)))
 (let (($x57 (and $x289 $x34)))
 (let (($x66 (and $x57 $x121)))
 (let (($x216 (and $x66 $x51)))
 (let (($x161 (and $x216 $x223)))
 (let (($x99 (and $x161 $x62)))
 (let (($x314 (and $x99 $x315)))
 (let (($x319 (and $x314 $x317)))
 (let (($x323 (and $x319 $x322)))
 (let (($x335 (and $x323 $x337)))
 (let (($x342 (and $x335 $x340)))
 (let (($x127 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x344 (and (not $x127) $x342)))
 (let (($x120 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x345 (and $x120 $x344)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x346 (and $x176 $x345)))
 (let (($x200 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x110 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x110 (_ bv1 32))))
 (=> $x140 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x212 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x110 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x110 (_ bv1 32))))
 (= $x140 false)))))
 ))
 (let (($x71 (forall ((Lambda25 (_ BitVec 32)) )(let (($x36 (= false false)))
 (let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x110 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x110 (_ bv0 32))))
 (=> $x203 $x36))))))
 ))
 (let (($x119 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x110 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x110 (_ bv0 32))))
 (= $x203 true)))))
 ))
 (let (($x291 (and $x119 $x71)))
 (let (($x47 (and $x291 $x212)))
 (let (($x130 (and $x47 $x200)))
 (let (($x347 (and $x130 $x346)))
 (let (($x201 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x348 (and $x201 $x347)))
 (let (($x204 (bvugt ?x148 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd ?x148 (_ bv3 32))))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x152 (bvugt ?x148 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x158 (or false (or false (and (and true (or $x157 $x152)) (or $x154 $x204))))))
 (let (($x63 (=> (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32))) $x158)))
 (let (($x112 (=> (and $x134 (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32)))) $x158)))
 (let (($x349 (and $x112 $x348)))
 (let (($x15 (=> $x349 $x18)))
 (not $x15)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x187 (bvmul (_ bv4294967295 32) ?x139)))
 (let ((?x76 (bvneg ?x187)))
 (let (($x225 (= ?x76 ?x199)))
 (let (($x18 (= $x225 true)))
 (let ((?x334 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x336 (bvneg ?x334)))
 (let (($x338 (= ?x336 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x340 (= $x338 true)))
 (let (($x324 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x339 (= $x324 true)))
 (let (($x337 (= $x339 true)))
 (let (($x321 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x320 (= $x321 true)))
 (let (($x322 (= $x320 true)))
 (let (($x316 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x318 (= $x316 true)))
 (let (($x317 (= $x318 true)))
 (let (($x311 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x142 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x142))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv2 32))) ?x235)))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv3 32))) ?x302)))
 (let ((?x208 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x52 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x191 (_ bv1 32))))
 (=> $x68 (= ?x208 ?x309)))))))))))
 ))
 (let (($x124 (forall ((Lambda25 (_ BitVec 32)) )(let (($x133 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x280 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x191 (_ bv1 32))))
 (= $x68 (bvuge ?x280 (_ bv1 32)))))))))
 ))
 (let (($x132 (forall ((Lambda25 (_ BitVec 32)) )(let (($x36 (= false false)))
 (let (($x52 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (= ?x191 (_ bv0 32))))
 (=> $x32 $x36))))))
 ))
 (let (($x234 (forall ((Lambda25 (_ BitVec 32)) )(let (($x133 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x280 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (= ?x191 (_ bv0 32))))
 (= $x32 (= ?x280 (_ bv0 32)))))))))
 ))
 (let (($x270 (and $x234 $x132)))
 (let (($x41 (and $x270 $x124)))
 (let (($x312 (and $x41 $x311)))
 (let (($x341 (= $x312 true)))
 (let (($x315 (= $x341 true)))
 (let ((?x12 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x148 (bvadd input.dst.llvm-%m ?x12)))
 (let ((?x44 (bvsub ?x148 ?x12)))
 (let (($x94 (ite (bvsge ?x12 (_ bv0 32)) (bvuge ?x148 ?x44) (bvult ?x148 ?x44))))
 (let (($x295 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x205 (ite $x295 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x144 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x294 (bvmul (_ bv4 64) ?x144)))
 (let ((?x164 ((_ extract 63 32) ?x294)))
 (let (($x217 (= ?x164 ?x205)))
 (let (($x236 (and $x217 $x94)))
 (let (($x153 (= (bvand ?x148 (_ bv4294967292 32)) ?x148)))
 (let (($x192 (and $x153 $x236)))
 (let (($x251 (= true $x192)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (=> $x134 $x251)))
 (let (($x116 (= $x252 true)))
 (let (($x62 (= $x116 true)))
 (let (($x284 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x284 true)))
 (let (($x223 (= $x72 true)))
 (let (($x221 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x102 (= $x221 true)))
 (let (($x51 (= $x102 true)))
 (let (($x143 (= $x134 true)))
 (let (($x121 (= $x143 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x17)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x146)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (and $x123 $x6)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (and $x118 $x226)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x263 (and $x101 $x104)))
 (let (($x181 (not $x263)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x100 $x75)))
 (let (($x137 (and (not $x90) $x181)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x266 (and $x25 $x150)))
 (let (($x45 (not $x266)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x177 $x224)))
 (let (($x42 (and (not $x85) $x45)))
 (let (($x172 (and (and (and (and (and (and $x42 $x137) $x253) $x77) $x255) $x39) $x59)))
 (let (($x267 (and $x172 $x218)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x258 (or false (or false (and (and true (or $x26 $x109)) (or $x265 $x165))))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x258)))
 (let (($x129 (and $x184 $x267)))
 (let (($x189 (= $x129 true)))
 (let (($x34 (= $x189 true)))
 (let ((?x113 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x269 (= (_ bv0 2) ?x113)))
 (let (($x95 (= $x269 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x65)))
 (let (($x83 (= ?x40 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x91 (= $x83 true)))
 (let (($x155 (= ?x40 input.dst.llvm-%n)))
 (let (($x147 (= $x155 true)))
 (let (($x98 (and $x147 $x91)))
 (let (($x289 (and $x98 $x95)))
 (let (($x57 (and $x289 $x34)))
 (let (($x66 (and $x57 $x121)))
 (let (($x216 (and $x66 $x51)))
 (let (($x161 (and $x216 $x223)))
 (let (($x99 (and $x161 $x62)))
 (let (($x314 (and $x99 $x315)))
 (let (($x319 (and $x314 $x317)))
 (let (($x323 (and $x319 $x322)))
 (let (($x335 (and $x323 $x337)))
 (let (($x342 (and $x335 $x340)))
 (let (($x127 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x344 (and (not $x127) $x342)))
 (let (($x120 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x345 (and $x120 $x344)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x346 (and $x176 $x345)))
 (let (($x200 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x110 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x110 (_ bv1 32))))
 (=> $x140 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x212 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x110 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x110 (_ bv1 32))))
 (= $x140 false)))))
 ))
 (let (($x71 (forall ((Lambda25 (_ BitVec 32)) )(let (($x36 (= false false)))
 (let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x110 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x110 (_ bv0 32))))
 (=> $x203 $x36))))))
 ))
 (let (($x119 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x110 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x110 (_ bv0 32))))
 (= $x203 true)))))
 ))
 (let (($x291 (and $x119 $x71)))
 (let (($x47 (and $x291 $x212)))
 (let (($x130 (and $x47 $x200)))
 (let (($x347 (and $x130 $x346)))
 (let (($x201 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x348 (and $x201 $x347)))
 (let (($x204 (bvugt ?x148 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd ?x148 (_ bv3 32))))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x152 (bvugt ?x148 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x158 (or false (or false (and (and true (or $x157 $x152)) (or $x154 $x204))))))
 (let (($x63 (=> (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32))) $x158)))
 (let (($x112 (=> (and $x134 (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32)))) $x158)))
 (let (($x349 (and $x112 $x348)))
 (let (($x15 (=> $x349 $x18)))
 (not $x15)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x167 (not $x134)))
 (let (($x290 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x126 (not $x290)))
 (let (($x175 (or $x126 $x167)))
 (let (($x30 (= $x175 true)))
 (let (($x281 (= $x30 true)))
 (let ((?x73 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x73)))
 (let (($x28 (= ?x196 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x229 (= $x28 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x139)))
 (let (($x18 (= ?x187 input.dst.llvm-%n)))
 (let (($x15 (= $x18 true)))
 (let (($x76 (= ?x187 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x199 (= $x76 true)))
 (let (($x345 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x346 (= $x345 true)))
 (let (($x347 (= $x346 true)))
 (let (($x338 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x340 (= $x338 true)))
 (let (($x342 (= $x340 true)))
 (let (($x337 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x335 (= $x337 true)))
 (let (($x334 (= $x335 true)))
 (let (($x320 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x309))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv2 32))) ?x312)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv3 32))) ?x314)))
 (let ((?x68 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x287 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x252 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x252 (_ bv1 32))))
 (=> $x141 (= ?x68 ?x317)))))))))))
 ))
 (let (($x93 (forall ((Lambda25 (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x192 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x287 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x252 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x252 (_ bv1 32))))
 (= $x141 (bvuge ?x192 (_ bv1 32)))))))))
 ))
 (let (($x32 (forall ((Lambda25 (_ BitVec 32)) )(let (($x69 (= false false)))
 (let (($x287 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x252 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x252 (_ bv0 32))))
 (=> $x116 $x69))))))
 ))
 (let (($x99 (forall ((Lambda25 (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x192 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x287 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x252 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x252 (_ bv0 32))))
 (= $x116 (= ?x192 (_ bv0 32)))))))))
 ))
 (let (($x219 (and $x99 $x32)))
 (let (($x132 (and $x219 $x93)))
 (let (($x322 (and $x132 $x320)))
 (let (($x323 (= $x322 true)))
 (let (($x324 (= $x323 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x161 (= $x223 true)))
 (let (($x80 (= $x161 true)))
 (let (($x51 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x51 true)))
 (let (($x284 (= $x216 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x59)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x282)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x6)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x255 (and $x58 $x226)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x123 $x255)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x181 $x137)))
 (let (($x262 (not $x13)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x263 (and $x101 $x104)))
 (let (($x33 (and (not $x263) $x262)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x45 $x42)))
 (let (($x75 (not $x100)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x266 (and $x26 $x109)))
 (let (($x260 (and (not $x266) $x75)))
 (let (($x34 (and (and (and (and (and (and $x260 $x33) $x77) $x118) $x84) $x39) $x146)))
 (let (($x57 (and $x34 $x172)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x265 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x258 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x265)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x265)))
 (let (($x16 (or false (or false (and (and true (or $x165 $x186)) (or $x258 $x184))))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x16)))
 (let (($x143 (and $x150 $x57)))
 (let (($x121 (= $x143 true)))
 (let (($x66 (= $x121 true)))
 (let ((?x231 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x264 (= (_ bv0 2) ?x231)))
 (let (($x178 (= $x264 true)))
 (let (($x114 (and $x178 $x66)))
 (let (($x72 (and $x114 $x284)))
 (let (($x79 (and $x72 $x80)))
 (let (($x339 (and $x79 $x324)))
 (let (($x336 (and $x339 $x334)))
 (let (($x344 (and $x336 $x342)))
 (let (($x348 (and $x344 $x347)))
 (let (($x225 (and $x348 $x199)))
 (let (($x228 (and $x225 $x15)))
 (let (($x188 (and $x228 $x229)))
 (let (($x95 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x97 (and $x95 $x188)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x215 (and $x230 $x97)))
 (let (($x83 (forall ((Lambda25 (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x140 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x140 (_ bv1 32))))
 (=> $x11 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x120 (forall ((Lambda25 (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x140 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x140 (_ bv1 32))))
 (= $x11 false)))))
 ))
 (let (($x200 (forall ((Lambda25 (_ BitVec 32)) )(let (($x69 (= false false)))
 (let (($x279 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x140 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x140 (_ bv0 32))))
 (=> $x271 $x69))))))
 ))
 (let (($x47 (forall ((Lambda25 (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x140 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x140 (_ bv0 32))))
 (= $x271 true)))))
 ))
 (let (($x130 (and $x47 $x200)))
 (let (($x254 (and $x130 $x120)))
 (let (($x91 (and $x254 $x83)))
 (let (($x250 (and $x91 $x215)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x240 (and $x29 $x250)))
 (let ((?x148 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%m ?x148)))
 (let (($x74 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd ?x78 (_ bv3 32))))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x5 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x173 (or false (or false (and (and true (or $x48 $x5)) (or $x220 $x74))))))
 (let (($x125 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x173)))
 (let (($x53 (=> (and $x134 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x173)))
 (let (($x268 (and $x53 $x240)))
 (let (($x257 (=> $x268 $x281)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x167 (not $x134)))
 (let (($x290 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x126 (not $x290)))
 (let (($x175 (or $x126 $x167)))
 (let (($x30 (= $x175 true)))
 (let (($x281 (= $x30 true)))
 (let ((?x73 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x73)))
 (let (($x28 (= ?x196 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x229 (= $x28 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x139)))
 (let (($x18 (= ?x187 input.dst.llvm-%n)))
 (let (($x15 (= $x18 true)))
 (let (($x76 (= ?x187 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x199 (= $x76 true)))
 (let (($x345 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x346 (= $x345 true)))
 (let (($x347 (= $x346 true)))
 (let (($x338 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x340 (= $x338 true)))
 (let (($x342 (= $x340 true)))
 (let (($x337 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x335 (= $x337 true)))
 (let (($x334 (= $x335 true)))
 (let (($x320 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x309))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv2 32))) ?x312)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv3 32))) ?x314)))
 (let ((?x68 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x287 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x252 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x252 (_ bv1 32))))
 (=> $x141 (= ?x68 ?x317)))))))))))
 ))
 (let (($x93 (forall ((Lambda25 (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x192 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x287 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x252 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x252 (_ bv1 32))))
 (= $x141 (bvuge ?x192 (_ bv1 32)))))))))
 ))
 (let (($x32 (forall ((Lambda25 (_ BitVec 32)) )(let (($x69 (= false false)))
 (let (($x287 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x252 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x252 (_ bv0 32))))
 (=> $x116 $x69))))))
 ))
 (let (($x99 (forall ((Lambda25 (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x192 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x287 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x252 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x252 (_ bv0 32))))
 (= $x116 (= ?x192 (_ bv0 32)))))))))
 ))
 (let (($x219 (and $x99 $x32)))
 (let (($x132 (and $x219 $x93)))
 (let (($x322 (and $x132 $x320)))
 (let (($x323 (= $x322 true)))
 (let (($x324 (= $x323 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x161 (= $x223 true)))
 (let (($x80 (= $x161 true)))
 (let (($x51 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x51 true)))
 (let (($x284 (= $x216 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x59)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x282)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x6)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x255 (and $x58 $x226)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x123 $x255)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x181 $x137)))
 (let (($x262 (not $x13)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x263 (and $x101 $x104)))
 (let (($x33 (and (not $x263) $x262)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x45 $x42)))
 (let (($x75 (not $x100)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x266 (and $x26 $x109)))
 (let (($x260 (and (not $x266) $x75)))
 (let (($x34 (and (and (and (and (and (and $x260 $x33) $x77) $x118) $x84) $x39) $x146)))
 (let (($x57 (and $x34 $x172)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x265 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x258 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x265)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x265)))
 (let (($x16 (or false (or false (and (and true (or $x165 $x186)) (or $x258 $x184))))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x16)))
 (let (($x143 (and $x150 $x57)))
 (let (($x121 (= $x143 true)))
 (let (($x66 (= $x121 true)))
 (let ((?x231 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x264 (= (_ bv0 2) ?x231)))
 (let (($x178 (= $x264 true)))
 (let (($x114 (and $x178 $x66)))
 (let (($x72 (and $x114 $x284)))
 (let (($x79 (and $x72 $x80)))
 (let (($x339 (and $x79 $x324)))
 (let (($x336 (and $x339 $x334)))
 (let (($x344 (and $x336 $x342)))
 (let (($x348 (and $x344 $x347)))
 (let (($x225 (and $x348 $x199)))
 (let (($x228 (and $x225 $x15)))
 (let (($x188 (and $x228 $x229)))
 (let (($x95 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x97 (and $x95 $x188)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x215 (and $x230 $x97)))
 (let (($x83 (forall ((Lambda25 (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x140 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x140 (_ bv1 32))))
 (=> $x11 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x120 (forall ((Lambda25 (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x140 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x140 (_ bv1 32))))
 (= $x11 false)))))
 ))
 (let (($x200 (forall ((Lambda25 (_ BitVec 32)) )(let (($x69 (= false false)))
 (let (($x279 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x140 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x140 (_ bv0 32))))
 (=> $x271 $x69))))))
 ))
 (let (($x47 (forall ((Lambda25 (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x140 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x140 (_ bv0 32))))
 (= $x271 true)))))
 ))
 (let (($x130 (and $x47 $x200)))
 (let (($x254 (and $x130 $x120)))
 (let (($x91 (and $x254 $x83)))
 (let (($x250 (and $x91 $x215)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x240 (and $x29 $x250)))
 (let ((?x148 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%m ?x148)))
 (let (($x74 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd ?x78 (_ bv3 32))))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x5 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x173 (or false (or false (and (and true (or $x48 $x5)) (or $x220 $x74))))))
 (let (($x125 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x173)))
 (let (($x53 (=> (and $x134 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x173)))
 (let (($x268 (and $x53 $x240)))
 (let (($x257 (=> $x268 $x281)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x134)))
 (let (($x298 (= $x131 false)))
 (let (($x208 (= $x298 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x89)))
 (let (($x280 (= ?x133 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x270 (= $x280 true)))
 (let ((?x266 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x266)))
 (let (($x44 (= ?x90 input.dst.llvm-%n)))
 (let (($x55 (= $x44 true)))
 (let (($x295 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x205 (= $x295 true)))
 (let (($x217 (= $x205 true)))
 (let (($x276 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x276 true)))
 (let (($x294 (= $x153 true)))
 (let (($x176 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x249 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x249))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv2 32))) ?x151)))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv3 32))) ?x110)))
 (let ((?x15 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x334 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x334 (_ bv1 32))))
 (=> $x187 (= ?x15 ?x291)))))))))))
 ))
 (let (($x199 (forall ((Lambda25 (_ BitVec 32)) )(let (($x339 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x337 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x334 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x334 (_ bv1 32))))
 (= $x187 (bvuge ?x337 (_ bv1 32)))))))))
 ))
 (let (($x345 (forall ((Lambda25 (_ BitVec 32)) )(let (($x343 (= false false)))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x334 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (= ?x334 (_ bv0 32))))
 (=> $x336 $x343))))))
 ))
 (let (($x340 (forall ((Lambda25 (_ BitVec 32)) )(let (($x339 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x337 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x334 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (= ?x334 (_ bv0 32))))
 (= $x336 (= ?x337 (_ bv0 32)))))))))
 ))
 (let (($x346 (and $x340 $x345)))
 (let (($x225 (and $x346 $x199)))
 (let (($x127 (and $x225 $x176)))
 (let (($x65 (= $x127 true)))
 (let (($x40 (= $x65 true)))
 (let (($x316 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x318 (= $x316 true)))
 (let (($x303 (= $x318 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x99)))
 (let ((?x251 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x251)))
 (let ((?x236 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x236)))
 (let ((?x252 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x252)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x287 $x116)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x79 $x94)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x114 $x221)))
 (let (($x51 (not $x102)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x143 $x121)))
 (let (($x284 (and (not $x66) $x51)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x282 $x146)))
 (let (($x59 (not $x34)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x33 $x17)))
 (let (($x57 (and (not $x189) $x59)))
 (let (($x93 (and (and (and (and (and (and $x57 $x284) $x223) $x80) $x122) $x192) $x62)))
 (let (($x132 (and $x93 $x191)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x129 (or false (or false (and (and true (or $x106 $x118)) (or $x58 $x6))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x129)))
 (let (($x68 (and $x39 $x132)))
 (let (($x182 (= $x68 true)))
 (let (($x302 (= $x182 true)))
 (let (($x253 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x181 (= $x253 true)))
 (let (($x137 (= $x181 true)))
 (let ((?x260 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x101 (= (_ bv0 2) ?x260)))
 (let (($x104 (= $x101 true)))
 (let (($x45 (= ?x90 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x42 (= $x45 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x150 (= $x16 true)))
 (let (($x26 (= $x150 true)))
 (let (($x100 (and $x26 $x42)))
 (let (($x263 (and $x100 $x104)))
 (let (($x13 (and $x263 $x137)))
 (let (($x309 (and $x13 $x302)))
 (let (($x341 (and $x309 $x303)))
 (let (($x144 (and $x341 $x40)))
 (let (($x164 (and $x144 $x294)))
 (let (($x210 (and $x164 $x217)))
 (let (($x52 (and $x210 $x55)))
 (let (($x124 (and $x52 $x270)))
 (let (($x177 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x41 (and $x177 $x124)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x300 (and $x213 $x41)))
 (let (($x165 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x11 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x11 (_ bv1 32))))
 (=> $x113 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x95 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x11 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x11 (_ bv1 32))))
 (= $x113 false)))))
 ))
 (let (($x83 (forall ((Lambda25 (_ BitVec 32)) )(let (($x343 (= false false)))
 (let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x11 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x11 (_ bv0 32))))
 (=> $x162 $x343))))))
 ))
 (let (($x254 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x11 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x11 (_ bv0 32))))
 (= $x162 true)))))
 ))
 (let (($x91 (and $x254 $x83)))
 (let (($x289 (and $x91 $x95)))
 (let (($x186 (and $x289 $x165)))
 (let (($x243 (and $x186 $x300)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x304 (and $x279 $x243)))
 (let ((?x78 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x136 (bvadd input.dst.llvm-%m ?x78)))
 (let (($x112 (bvugt ?x136 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd ?x136 (_ bv3 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x204 (bvugt ?x136 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x50 (or false (or false (and (and true (or $x8 $x204)) (or $x63 $x112))))))
 (let (($x203 (=> (bvule ?x136 (bvsub (bvadd ?x136 (_ bv4 32)) (_ bv1 32))) $x50)))
 (let (($x163 (=> (and $x134 (bvule ?x136 (bvsub (bvadd ?x136 (_ bv4 32)) (_ bv1 32)))) $x50)))
 (let (($x293 (and $x163 $x304)))
 (let (($x142 (=> $x293 $x208)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x134)))
 (let (($x298 (= $x131 false)))
 (let (($x208 (= $x298 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x89)))
 (let (($x280 (= ?x133 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x270 (= $x280 true)))
 (let ((?x266 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x266)))
 (let (($x44 (= ?x90 input.dst.llvm-%n)))
 (let (($x55 (= $x44 true)))
 (let (($x295 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x205 (= $x295 true)))
 (let (($x217 (= $x205 true)))
 (let (($x276 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x276 true)))
 (let (($x294 (= $x153 true)))
 (let (($x176 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x249 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x249))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv2 32))) ?x151)))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv3 32))) ?x110)))
 (let ((?x15 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x334 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x334 (_ bv1 32))))
 (=> $x187 (= ?x15 ?x291)))))))))))
 ))
 (let (($x199 (forall ((Lambda25 (_ BitVec 32)) )(let (($x339 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x337 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x334 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x334 (_ bv1 32))))
 (= $x187 (bvuge ?x337 (_ bv1 32)))))))))
 ))
 (let (($x345 (forall ((Lambda25 (_ BitVec 32)) )(let (($x343 (= false false)))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x334 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (= ?x334 (_ bv0 32))))
 (=> $x336 $x343))))))
 ))
 (let (($x340 (forall ((Lambda25 (_ BitVec 32)) )(let (($x339 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x337 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x334 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (= ?x334 (_ bv0 32))))
 (= $x336 (= ?x337 (_ bv0 32)))))))))
 ))
 (let (($x346 (and $x340 $x345)))
 (let (($x225 (and $x346 $x199)))
 (let (($x127 (and $x225 $x176)))
 (let (($x65 (= $x127 true)))
 (let (($x40 (= $x65 true)))
 (let (($x316 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x318 (= $x316 true)))
 (let (($x303 (= $x318 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x99)))
 (let ((?x251 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x251)))
 (let ((?x236 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x236)))
 (let ((?x252 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x252)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x287 $x116)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x79 $x94)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x114 $x221)))
 (let (($x51 (not $x102)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x143 $x121)))
 (let (($x284 (and (not $x66) $x51)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x282 $x146)))
 (let (($x59 (not $x34)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x33 $x17)))
 (let (($x57 (and (not $x189) $x59)))
 (let (($x93 (and (and (and (and (and (and $x57 $x284) $x223) $x80) $x122) $x192) $x62)))
 (let (($x132 (and $x93 $x191)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x129 (or false (or false (and (and true (or $x106 $x118)) (or $x58 $x6))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x129)))
 (let (($x68 (and $x39 $x132)))
 (let (($x182 (= $x68 true)))
 (let (($x302 (= $x182 true)))
 (let (($x253 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x181 (= $x253 true)))
 (let (($x137 (= $x181 true)))
 (let ((?x260 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x101 (= (_ bv0 2) ?x260)))
 (let (($x104 (= $x101 true)))
 (let (($x45 (= ?x90 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x42 (= $x45 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x150 (= $x16 true)))
 (let (($x26 (= $x150 true)))
 (let (($x100 (and $x26 $x42)))
 (let (($x263 (and $x100 $x104)))
 (let (($x13 (and $x263 $x137)))
 (let (($x309 (and $x13 $x302)))
 (let (($x341 (and $x309 $x303)))
 (let (($x144 (and $x341 $x40)))
 (let (($x164 (and $x144 $x294)))
 (let (($x210 (and $x164 $x217)))
 (let (($x52 (and $x210 $x55)))
 (let (($x124 (and $x52 $x270)))
 (let (($x177 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x41 (and $x177 $x124)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x300 (and $x213 $x41)))
 (let (($x165 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x11 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x11 (_ bv1 32))))
 (=> $x113 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x95 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x11 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x11 (_ bv1 32))))
 (= $x113 false)))))
 ))
 (let (($x83 (forall ((Lambda25 (_ BitVec 32)) )(let (($x343 (= false false)))
 (let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x11 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x11 (_ bv0 32))))
 (=> $x162 $x343))))))
 ))
 (let (($x254 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x11 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x11 (_ bv0 32))))
 (= $x162 true)))))
 ))
 (let (($x91 (and $x254 $x83)))
 (let (($x289 (and $x91 $x95)))
 (let (($x186 (and $x289 $x165)))
 (let (($x243 (and $x186 $x300)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x304 (and $x279 $x243)))
 (let ((?x78 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x136 (bvadd input.dst.llvm-%m ?x78)))
 (let (($x112 (bvugt ?x136 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd ?x136 (_ bv3 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x204 (bvugt ?x136 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x50 (or false (or false (and (and true (or $x8 $x204)) (or $x63 $x112))))))
 (let (($x203 (=> (bvule ?x136 (bvsub (bvadd ?x136 (_ bv4 32)) (_ bv1 32))) $x50)))
 (let (($x163 (=> (and $x134 (bvule ?x136 (bvsub (bvadd ?x136 (_ bv4 32)) (_ bv1 32)))) $x50)))
 (let (($x293 (and $x163 $x304)))
 (let (($x142 (=> $x293 $x208)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x260dd09a)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x260dd09a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x260dd09a)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x260dd09a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x260dd09a)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x260dd09a x!0)
         (ite (bvule #x260dd09b x!0) #x260dd09b #x260dd09a)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x59062be0)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x59062be0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xba921838)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xea5e056c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x59062be0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x59062be0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xea5e056f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xba92183b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xea5e056c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xba921838)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x59062be0)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x59062be0 x!0)
         (ite (bvule #x59062be1 x!0) #x59062be1 #x59062be0)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x290 (or $x215 $x107)))
 (let (($x175 (= $x290 true)))
 (let (($x30 (= $x175 true)))
 (let ((?x18 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x18)))
 (let (($x28 (= ?x196 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x28 true)))
 (let ((?x319 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x321 (bvneg ?x319)))
 (let (($x347 (= ?x321 input.dst.llvm-%n)))
 (let (($x348 (= $x347 true)))
 (let (($x320 (= ?x321 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x322 (= $x320 true)))
 (let (($x315 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x308 (= $x315 true)))
 (let (($x312 (= $x308 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (= $x7 true)))
 (let (($x311 (= $x232 true)))
 (let (($x155 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (= $x155 true)))
 (let (($x230 (= $x98 true)))
 (let (($x178 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x300 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x131 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x300))))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x300 (_ bv2 32))) ?x131)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x300 (_ bv3 32))) ?x142)))
 (let ((?x40 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x337 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x249 (_ bv1 32))))
 (=> $x96 (= ?x40 ?x70)))))))))))
 ))
 (let (($x176 (forall ((Lambda25 (_ BitVec 32)) )(let (($x15 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x73 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x249 (_ bv1 32))))
 (= $x96 (bvuge ?x73 (_ bv1 32)))))))))
 ))
 (let (($x261 (forall ((Lambda25 (_ BitVec 32)) )(let (($x289 (= false false)))
 (let (($x337 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x249 (_ bv0 32))))
 (=> $x35 $x289))))))
 ))
 (let (($x250 (forall ((Lambda25 (_ BitVec 32)) )(let (($x15 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x73 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x249 (_ bv0 32))))
 (= $x35 (= ?x73 (_ bv0 32)))))))))
 ))
 (let (($x128 (and $x250 $x261)))
 (let (($x127 (and $x128 $x176)))
 (let (($x140 (and $x127 $x178)))
 (let (($x156 (= $x140 true)))
 (let (($x200 (= $x156 true)))
 (let (($x334 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x336 (= $x334 true)))
 (let (($x324 (= $x336 true)))
 (let (($x318 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x303 (= $x318 true)))
 (let (($x341 (= $x303 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x135)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x94)))
 (let ((?x252 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x252)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x161 $x141)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x219 $x79)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x66 $x216)))
 (let (($x221 (not $x114)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (and $x57 $x143)))
 (let (($x51 (and (not $x121) $x221)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x189 $x172)))
 (let (($x146 (not $x282)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x13 $x60)))
 (let (($x59 (and (not $x17) $x146)))
 (let (($x99 (and (and (and (and (and (and $x59 $x51) $x32) $x223) $x287) $x116) $x122)))
 (let (($x191 (and $x99 $x236)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x129 (or false (or false (and (and true (or $x106 $x118)) (or $x58 $x6))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x129)))
 (let (($x132 (and $x33 $x191)))
 (let (($x68 (= $x132 true)))
 (let (($x182 (= $x68 true)))
 (let ((?x263 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x253 (= (_ bv0 2) ?x263)))
 (let (($x181 (= $x253 true)))
 (let (($x302 (and $x181 $x182)))
 (let (($x310 (and $x302 $x341)))
 (let (($x323 (and $x310 $x324)))
 (let (($x130 (and $x323 $x200)))
 (let (($x231 (and $x130 $x230)))
 (let (($x228 (and $x231 $x311)))
 (let (($x314 (and $x228 $x312)))
 (let (($x342 (and $x314 $x322)))
 (let (($x349 (and $x342 $x348)))
 (let (($x167 (and $x349 $x126)))
 (let (($x101 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x240 (and $x101 $x167)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x268 (and $x100 $x240)))
 (let (($x90 (forall ((Lambda25 (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x91 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x91 (_ bv1 32))))
 (=> $x213 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x184 (forall ((Lambda25 (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x91 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x91 (_ bv1 32))))
 (= $x213 false)))))
 ))
 (let (($x265 (forall ((Lambda25 (_ BitVec 32)) )(let (($x289 (= false false)))
 (let (($x162 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x91 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x91 (_ bv0 32))))
 (=> $x113 $x289))))))
 ))
 (let (($x95 (forall ((Lambda25 (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x91 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x91 (_ bv0 32))))
 (= $x113 true)))))
 ))
 (let (($x165 (and $x95 $x265)))
 (let (($x177 (and $x165 $x184)))
 (let (($x45 (and $x177 $x90)))
 (let (($x188 (and $x45 $x268)))
 (let (($x271 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x97 (and $x271 $x188)))
 (let ((?x78 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x136 (bvadd input.dst.llvm-%m ?x78)))
 (let (($x125 (bvugt ?x136 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd ?x136 (_ bv3 32))))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x31 (bvugt ?x136 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x204)))
 (let (($x163 (or false (or false (and (and true (or $x220 $x31)) (or $x173 $x125))))))
 (let (($x279 (=> (bvule ?x136 (bvsub (bvadd ?x136 (_ bv4 32)) (_ bv1 32))) $x163)))
 (let (($x152 (=> (and $x107 (bvule ?x136 (bvsub (bvadd ?x136 (_ bv4 32)) (_ bv1 32)))) $x163)))
 (let (($x229 (and $x152 $x97)))
 (let (($x281 (=> $x229 $x30)))
 (not $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x290 (or $x215 $x107)))
 (let (($x175 (= $x290 true)))
 (let (($x30 (= $x175 true)))
 (let ((?x18 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x18)))
 (let (($x28 (= ?x196 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x28 true)))
 (let ((?x319 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x321 (bvneg ?x319)))
 (let (($x347 (= ?x321 input.dst.llvm-%n)))
 (let (($x348 (= $x347 true)))
 (let (($x320 (= ?x321 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x322 (= $x320 true)))
 (let (($x315 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x308 (= $x315 true)))
 (let (($x312 (= $x308 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (= $x7 true)))
 (let (($x311 (= $x232 true)))
 (let (($x155 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (= $x155 true)))
 (let (($x230 (= $x98 true)))
 (let (($x178 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x300 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x131 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x300))))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x300 (_ bv2 32))) ?x131)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x300 (_ bv3 32))) ?x142)))
 (let ((?x40 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x337 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x249 (_ bv1 32))))
 (=> $x96 (= ?x40 ?x70)))))))))))
 ))
 (let (($x176 (forall ((Lambda25 (_ BitVec 32)) )(let (($x15 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x73 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x249 (_ bv1 32))))
 (= $x96 (bvuge ?x73 (_ bv1 32)))))))))
 ))
 (let (($x261 (forall ((Lambda25 (_ BitVec 32)) )(let (($x289 (= false false)))
 (let (($x337 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x249 (_ bv0 32))))
 (=> $x35 $x289))))))
 ))
 (let (($x250 (forall ((Lambda25 (_ BitVec 32)) )(let (($x15 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x73 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x249 (_ bv0 32))))
 (= $x35 (= ?x73 (_ bv0 32)))))))))
 ))
 (let (($x128 (and $x250 $x261)))
 (let (($x127 (and $x128 $x176)))
 (let (($x140 (and $x127 $x178)))
 (let (($x156 (= $x140 true)))
 (let (($x200 (= $x156 true)))
 (let (($x334 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x336 (= $x334 true)))
 (let (($x324 (= $x336 true)))
 (let (($x318 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x303 (= $x318 true)))
 (let (($x341 (= $x303 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x135)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x94)))
 (let ((?x252 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x252)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x161 $x141)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x219 $x79)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x66 $x216)))
 (let (($x221 (not $x114)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (and $x57 $x143)))
 (let (($x51 (and (not $x121) $x221)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x189 $x172)))
 (let (($x146 (not $x282)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x13 $x60)))
 (let (($x59 (and (not $x17) $x146)))
 (let (($x99 (and (and (and (and (and (and $x59 $x51) $x32) $x223) $x287) $x116) $x122)))
 (let (($x191 (and $x99 $x236)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x129 (or false (or false (and (and true (or $x106 $x118)) (or $x58 $x6))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x129)))
 (let (($x132 (and $x33 $x191)))
 (let (($x68 (= $x132 true)))
 (let (($x182 (= $x68 true)))
 (let ((?x263 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x253 (= (_ bv0 2) ?x263)))
 (let (($x181 (= $x253 true)))
 (let (($x302 (and $x181 $x182)))
 (let (($x310 (and $x302 $x341)))
 (let (($x323 (and $x310 $x324)))
 (let (($x130 (and $x323 $x200)))
 (let (($x231 (and $x130 $x230)))
 (let (($x228 (and $x231 $x311)))
 (let (($x314 (and $x228 $x312)))
 (let (($x342 (and $x314 $x322)))
 (let (($x349 (and $x342 $x348)))
 (let (($x167 (and $x349 $x126)))
 (let (($x101 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x240 (and $x101 $x167)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x268 (and $x100 $x240)))
 (let (($x90 (forall ((Lambda25 (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x91 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x91 (_ bv1 32))))
 (=> $x213 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x184 (forall ((Lambda25 (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x91 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x91 (_ bv1 32))))
 (= $x213 false)))))
 ))
 (let (($x265 (forall ((Lambda25 (_ BitVec 32)) )(let (($x289 (= false false)))
 (let (($x162 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x91 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x91 (_ bv0 32))))
 (=> $x113 $x289))))))
 ))
 (let (($x95 (forall ((Lambda25 (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x91 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x91 (_ bv0 32))))
 (= $x113 true)))))
 ))
 (let (($x165 (and $x95 $x265)))
 (let (($x177 (and $x165 $x184)))
 (let (($x45 (and $x177 $x90)))
 (let (($x188 (and $x45 $x268)))
 (let (($x271 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x97 (and $x271 $x188)))
 (let ((?x78 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x136 (bvadd input.dst.llvm-%m ?x78)))
 (let (($x125 (bvugt ?x136 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd ?x136 (_ bv3 32))))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x31 (bvugt ?x136 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x204)))
 (let (($x163 (or false (or false (and (and true (or $x220 $x31)) (or $x173 $x125))))))
 (let (($x279 (=> (bvule ?x136 (bvsub (bvadd ?x136 (_ bv4 32)) (_ bv1 32))) $x163)))
 (let (($x152 (=> (and $x107 (bvule ?x136 (bvsub (bvadd ?x136 (_ bv4 32)) (_ bv1 32)))) $x163)))
 (let (($x229 (and $x152 $x97)))
 (let (($x281 (=> $x229 $x30)))
 (not $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x16 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x188))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv2 32))) ?x290)))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv3 32))) ?x281)))
 (let ((?x311 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x243 (_ bv1 32))))
 (=> $x98 (= ?x311 ?x157)))))))))))
 ))
 (let (($x280 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x89 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x243 (_ bv1 32))))
 (= $x98 (bvuge ?x89 (_ bv1 32))))))))
 ))
 (let (($x178 (forall ((Lambda25 (_ BitVec 32)) )(let (($x8 (= false false)))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x243 (_ bv0 32))))
 (=> $x131 $x8))))))
 ))
 (let (($x55 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x89 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x243 (_ bv0 32))))
 (= $x131 (= ?x89 (_ bv0 32))))))))
 ))
 (let (($x295 (and $x55 $x178)))
 (let (($x270 (and $x295 $x280)))
 (let (($x124 (and $x270 $x16)))
 (let (($x247 (= $x124 true)))
 (let (($x235 (= $x247 true)))
 (let ((?x263 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x263)))
 (let (($x338 (= ?x253 input.dst.llvm-%n)))
 (let (($x340 (= $x338 true)))
 (let ((?x26 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x335 (= (_ bv0 2) ?x26)))
 (let (($x144 (= $x335 true)))
 (let (($x264 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x264 true)))
 (let (($x259 (= $x186 true)))
 (let (($x231 (forall ((Lambda25 (_ BitVec 32)) )(let (($x298 (bvule (_ bv0 32) Lambda25)))
 (let ((?x304 (ite (and $x298 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x243 (_ bv1 32))))
 (= $x98 (bvuge ?x304 (_ bv1 32)))))))))
 ))
 (let (($x70 (forall ((Lambda25 (_ BitVec 32)) )(let (($x298 (bvule (_ bv0 32) Lambda25)))
 (let ((?x304 (ite (and $x298 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x243 (_ bv0 32))))
 (= $x131 (= ?x304 (_ bv0 32)))))))))
 ))
 (let (($x140 (and $x70 $x178)))
 (let (($x7 (and $x140 $x231)))
 (let (($x69 (and $x7 $x16)))
 (let (($x343 (= $x69 true)))
 (let (($x147 (= $x343 true)))
 (let (($x71 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x250 (not $x71)))
 (let (($x21 (= $x250 true)))
 (let (($x261 (= $x21 true)))
 (let ((?x341 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x310 (= (_ bv0 32) ?x341)))
 (let ((?x318 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x303 (= (_ bv0 32) ?x318)))
 (let ((?x309 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x309)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x132)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x236 $x68)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x302 (and $x135 $x182)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x141 $x79)))
 (let (($x62 (not $x287)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x219 $x161)))
 (let (($x116 (and (not $x80) $x62)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (and $x284 $x32)))
 (let (($x72 (not $x234)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x84 $x129)))
 (let (($x251 (and (not $x192) $x72)))
 (let (($x249 (and (and (and (and (and (and $x251 $x116) $x94) $x99) $x302) $x316) $x303)))
 (let (($x35 (and $x249 $x310)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x114 (or false (or false (and (and true (or $x189 $x172)) (or $x143 $x121))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x225 (and $x51 $x35)))
 (let (($x199 (= $x225 true)))
 (let (($x15 (= $x199 true)))
 (let (($x267 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x123 (= $x267 true)))
 (let (($x58 (= $x123 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x39 true)))
 (let (($x106 (= $x218 true)))
 (let (($x181 (= ?x253 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x77 (= $x181 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x100)))
 (let (($x260 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x260 true)))
 (let (($x109 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x266 (= $x109 true)))
 (let (($x90 (= $x266 true)))
 (let (($x258 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x258 true)))
 (let (($x177 (= $x184 true)))
 (let (($x45 (and $x177 $x90)))
 (let (($x104 (and $x45 $x101)))
 (let (($x169 (and $x104 $x77)))
 (let (($x118 (and $x169 $x106)))
 (let (($x6 (and $x118 $x58)))
 (let (($x73 (and $x6 $x15)))
 (let (($x128 (and $x73 $x261)))
 (let (($x83 (and $x128 $x147)))
 (let (($x224 (and $x83 $x259)))
 (let (($x339 (and $x224 $x144)))
 (let (($x344 (and $x339 $x340)))
 (let (($x165 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x345 (and $x165 $x344)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x346 (and $x25 $x345)))
 (let (($x269 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x187 (and $x269 $x346)))
 (let (($x254 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x154 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x154 (_ bv1 32))))
 (=> $x125 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x50 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x154 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x154 (_ bv1 32))))
 (= $x125 false)))))
 ))
 (let (($x63 (forall ((Lambda25 (_ BitVec 32)) )(let (($x8 (= false false)))
 (let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x154 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x154 (_ bv0 32))))
 (=> $x88 $x8))))))
 ))
 (let (($x220 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x154 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x154 (_ bv0 32))))
 (= $x88 true)))))
 ))
 (let (($x158 (and $x220 $x63)))
 (let (($x203 (and $x158 $x50)))
 (let (($x91 (and $x203 $x254)))
 (let (($x139 (and $x91 $x187)))
 (let (($x134 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x76 (and $x134 $x139)))
 (let (($x149 (=> $x76 $x235)))
 (not $x149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x16 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x188))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv2 32))) ?x290)))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv3 32))) ?x281)))
 (let ((?x311 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x243 (_ bv1 32))))
 (=> $x98 (= ?x311 ?x157)))))))))))
 ))
 (let (($x280 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x89 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x243 (_ bv1 32))))
 (= $x98 (bvuge ?x89 (_ bv1 32))))))))
 ))
 (let (($x178 (forall ((Lambda25 (_ BitVec 32)) )(let (($x8 (= false false)))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x243 (_ bv0 32))))
 (=> $x131 $x8))))))
 ))
 (let (($x55 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x89 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x243 (_ bv0 32))))
 (= $x131 (= ?x89 (_ bv0 32))))))))
 ))
 (let (($x295 (and $x55 $x178)))
 (let (($x270 (and $x295 $x280)))
 (let (($x124 (and $x270 $x16)))
 (let (($x247 (= $x124 true)))
 (let (($x235 (= $x247 true)))
 (let ((?x263 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x263)))
 (let (($x338 (= ?x253 input.dst.llvm-%n)))
 (let (($x340 (= $x338 true)))
 (let ((?x26 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x335 (= (_ bv0 2) ?x26)))
 (let (($x144 (= $x335 true)))
 (let (($x264 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x264 true)))
 (let (($x259 (= $x186 true)))
 (let (($x231 (forall ((Lambda25 (_ BitVec 32)) )(let (($x298 (bvule (_ bv0 32) Lambda25)))
 (let ((?x304 (ite (and $x298 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x243 (_ bv1 32))))
 (= $x98 (bvuge ?x304 (_ bv1 32)))))))))
 ))
 (let (($x70 (forall ((Lambda25 (_ BitVec 32)) )(let (($x298 (bvule (_ bv0 32) Lambda25)))
 (let ((?x304 (ite (and $x298 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x243 (_ bv0 32))))
 (= $x131 (= ?x304 (_ bv0 32)))))))))
 ))
 (let (($x140 (and $x70 $x178)))
 (let (($x7 (and $x140 $x231)))
 (let (($x69 (and $x7 $x16)))
 (let (($x343 (= $x69 true)))
 (let (($x147 (= $x343 true)))
 (let (($x71 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x250 (not $x71)))
 (let (($x21 (= $x250 true)))
 (let (($x261 (= $x21 true)))
 (let ((?x341 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x310 (= (_ bv0 32) ?x341)))
 (let ((?x318 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x303 (= (_ bv0 32) ?x318)))
 (let ((?x309 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x309)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x132)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x236 $x68)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x302 (and $x135 $x182)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x141 $x79)))
 (let (($x62 (not $x287)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x219 $x161)))
 (let (($x116 (and (not $x80) $x62)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (and $x284 $x32)))
 (let (($x72 (not $x234)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x84 $x129)))
 (let (($x251 (and (not $x192) $x72)))
 (let (($x249 (and (and (and (and (and (and $x251 $x116) $x94) $x99) $x302) $x316) $x303)))
 (let (($x35 (and $x249 $x310)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x114 (or false (or false (and (and true (or $x189 $x172)) (or $x143 $x121))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x225 (and $x51 $x35)))
 (let (($x199 (= $x225 true)))
 (let (($x15 (= $x199 true)))
 (let (($x267 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x123 (= $x267 true)))
 (let (($x58 (= $x123 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x39 true)))
 (let (($x106 (= $x218 true)))
 (let (($x181 (= ?x253 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x77 (= $x181 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x100)))
 (let (($x260 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x260 true)))
 (let (($x109 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x266 (= $x109 true)))
 (let (($x90 (= $x266 true)))
 (let (($x258 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x258 true)))
 (let (($x177 (= $x184 true)))
 (let (($x45 (and $x177 $x90)))
 (let (($x104 (and $x45 $x101)))
 (let (($x169 (and $x104 $x77)))
 (let (($x118 (and $x169 $x106)))
 (let (($x6 (and $x118 $x58)))
 (let (($x73 (and $x6 $x15)))
 (let (($x128 (and $x73 $x261)))
 (let (($x83 (and $x128 $x147)))
 (let (($x224 (and $x83 $x259)))
 (let (($x339 (and $x224 $x144)))
 (let (($x344 (and $x339 $x340)))
 (let (($x165 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x345 (and $x165 $x344)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x346 (and $x25 $x345)))
 (let (($x269 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x187 (and $x269 $x346)))
 (let (($x254 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x154 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x154 (_ bv1 32))))
 (=> $x125 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x50 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x154 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x154 (_ bv1 32))))
 (= $x125 false)))))
 ))
 (let (($x63 (forall ((Lambda25 (_ BitVec 32)) )(let (($x8 (= false false)))
 (let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x154 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x154 (_ bv0 32))))
 (=> $x88 $x8))))))
 ))
 (let (($x220 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x154 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x154 (_ bv0 32))))
 (= $x88 true)))))
 ))
 (let (($x158 (and $x220 $x63)))
 (let (($x203 (and $x158 $x50)))
 (let (($x91 (and $x203 $x254)))
 (let (($x139 (and $x91 $x187)))
 (let (($x134 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x76 (and $x134 $x139)))
 (let (($x149 (=> $x76 $x235)))
 (not $x149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (not $x108)))
 (let (($x167 (or $x108 $x126)))
 (let (($x240 (= $x167 true)))
 (let (($x119 (= $x240 true)))
 (let ((?x319 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x319)))
 (let (($x28 (= ?x196 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x348 (= $x28 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x51)))
 (let (($x130 (= ?x84 input.dst.llvm-%n)))
 (let (($x232 (= $x130 true)))
 (let (($x262 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x36 (= $x262 true)))
 (let (($x156 (= $x36 true)))
 (let (($x276 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (= $x276 true)))
 (let (($x300 (= $x41 true)))
 (let (($x228 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x136 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x136))))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv2 32))) ?x5)))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv3 32))) ?x173)))
 (let ((?x153 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x175 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x264 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x264 (_ bv1 32))))
 (=> $x345 (= ?x153 ?x23)))))))))))
 ))
 (let (($x187 (forall ((Lambda25 (_ BitVec 32)) )(let (($x343 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x147 (ite $x343 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x264 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x264 (_ bv1 32))))
 (= $x345 (bvuge ?x147 (_ bv1 32)))))))))
 ))
 (let (($x335 (forall ((Lambda25 (_ BitVec 32)) )(let (($x263 (= false false)))
 (let (($x175 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x264 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x264 (_ bv0 32))))
 (=> $x186 $x263))))))
 ))
 (let (($x224 (forall ((Lambda25 (_ BitVec 32)) )(let (($x343 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x147 (ite $x343 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x264 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x264 (_ bv0 32))))
 (= $x186 (= ?x147 (_ bv0 32)))))))))
 ))
 (let (($x144 (and $x224 $x335)))
 (let (($x139 (and $x144 $x187)))
 (let (($x96 (and $x139 $x228)))
 (let (($x176 (= $x96 true)))
 (let (($x127 (= $x176 true)))
 (let (($x317 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x188 (= $x317 true)))
 (let (($x244 (= $x188 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x70)))
 (let ((?x293 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x293)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x304 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x243)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (and $x291 $x131)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x128 $x298)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (and $x35 $x225)))
 (let (($x15 (not $x199)))
 (let (($x341 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x249 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (and $x249 $x341)))
 (let (($x257 (and (not $x310) $x15)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (and $x323 $x309)))
 (let (($x337 (not $x316)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x79 $x287)))
 (let (($x303 (and (not $x302) $x337)))
 (let (($x231 (and (and (and (and (and (and $x303 $x257) $x250) $x261) $x210) $x304) $x142)))
 (let (($x7 (and $x231 $x47)))
 (let (($x324 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x334 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x334)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x334)))
 (let (($x132 (or false (or false (and (and true (or $x93 $x94)) (or $x99 $x324))))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x311 (and $x182 $x7)))
 (let (($x315 (= $x311 true)))
 (let (($x312 (= $x315 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x161 (= $x219 true)))
 (let (($x80 (= $x161 true)))
 (let ((?x32 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x234 (= (_ bv0 2) ?x32)))
 (let (($x72 (= $x234 true)))
 (let (($x129 (= ?x84 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x192 (= $x129 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x66 (= $x102 true)))
 (let (($x216 (= $x66 true)))
 (let (($x223 (and $x216 $x192)))
 (let (($x251 (and $x223 $x72)))
 (let (($x252 (and $x251 $x80)))
 (let (($x268 (and $x252 $x312)))
 (let (($x137 (and $x268 $x244)))
 (let (($x40 (and $x137 $x127)))
 (let (($x299 (and $x40 $x300)))
 (let (($x200 (and $x299 $x156)))
 (let (($x314 (and $x200 $x232)))
 (let (($x349 (and $x314 $x348)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x320 (and $x143 $x349)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x322 (and $x282 $x320)))
 (let (($x189 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x75 (_ bv1 32))))
 (=> $x106 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x267 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x75 (_ bv1 32))))
 (= $x106 false)))))
 ))
 (let (($x77 (forall ((Lambda25 (_ BitVec 32)) )(let (($x263 (= false false)))
 (let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x75 (_ bv0 32))))
 (=> $x260 $x263))))))
 ))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x75 (_ bv0 32))))
 (= $x260 true)))))
 ))
 (let (($x169 (and $x104 $x77)))
 (let (($x123 (and $x169 $x267)))
 (let (($x17 (and $x123 $x189)))
 (let (($x321 (and $x17 $x322)))
 (let (($x258 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x342 (and $x258 $x321)))
 (let ((?x29 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x154 (bvadd input.dst.llvm-%m ?x29)))
 (let (($x269 (bvugt ?x154 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd ?x154 (_ bv3 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x279 (bvugt ?x154 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x265 (or false (or false (and (and true (or $x203 $x279)) (or $x113 $x269))))))
 (let (($x213 (=> (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32))) $x265)))
 (let (($x204 (=> (and $x108 (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32)))) $x265)))
 (let (($x18 (and $x204 $x342)))
 (let (($x54 (=> $x18 $x119)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (not $x108)))
 (let (($x167 (or $x108 $x126)))
 (let (($x240 (= $x167 true)))
 (let (($x119 (= $x240 true)))
 (let ((?x319 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x319)))
 (let (($x28 (= ?x196 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x348 (= $x28 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x51)))
 (let (($x130 (= ?x84 input.dst.llvm-%n)))
 (let (($x232 (= $x130 true)))
 (let (($x262 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x36 (= $x262 true)))
 (let (($x156 (= $x36 true)))
 (let (($x276 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (= $x276 true)))
 (let (($x300 (= $x41 true)))
 (let (($x228 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x136 (bvadd (bvmul Lambda25 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x136))))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv2 32))) ?x5)))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv3 32))) ?x173)))
 (let ((?x153 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x175 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x264 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x264 (_ bv1 32))))
 (=> $x345 (= ?x153 ?x23)))))))))))
 ))
 (let (($x187 (forall ((Lambda25 (_ BitVec 32)) )(let (($x343 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x147 (ite $x343 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x264 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x264 (_ bv1 32))))
 (= $x345 (bvuge ?x147 (_ bv1 32)))))))))
 ))
 (let (($x335 (forall ((Lambda25 (_ BitVec 32)) )(let (($x263 (= false false)))
 (let (($x175 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x264 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x264 (_ bv0 32))))
 (=> $x186 $x263))))))
 ))
 (let (($x224 (forall ((Lambda25 (_ BitVec 32)) )(let (($x343 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x147 (ite $x343 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x264 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x264 (_ bv0 32))))
 (= $x186 (= ?x147 (_ bv0 32)))))))))
 ))
 (let (($x144 (and $x224 $x335)))
 (let (($x139 (and $x144 $x187)))
 (let (($x96 (and $x139 $x228)))
 (let (($x176 (= $x96 true)))
 (let (($x127 (= $x176 true)))
 (let (($x317 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x188 (= $x317 true)))
 (let (($x244 (= $x188 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x70)))
 (let ((?x293 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x293)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x304 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x243)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (and $x291 $x131)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x128 $x298)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (and $x35 $x225)))
 (let (($x15 (not $x199)))
 (let (($x341 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x249 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (and $x249 $x341)))
 (let (($x257 (and (not $x310) $x15)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (and $x323 $x309)))
 (let (($x337 (not $x316)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x79 $x287)))
 (let (($x303 (and (not $x302) $x337)))
 (let (($x231 (and (and (and (and (and (and $x303 $x257) $x250) $x261) $x210) $x304) $x142)))
 (let (($x7 (and $x231 $x47)))
 (let (($x324 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x334 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x334)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x334)))
 (let (($x132 (or false (or false (and (and true (or $x93 $x94)) (or $x99 $x324))))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x311 (and $x182 $x7)))
 (let (($x315 (= $x311 true)))
 (let (($x312 (= $x315 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x161 (= $x219 true)))
 (let (($x80 (= $x161 true)))
 (let ((?x32 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x234 (= (_ bv0 2) ?x32)))
 (let (($x72 (= $x234 true)))
 (let (($x129 (= ?x84 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x192 (= $x129 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x66 (= $x102 true)))
 (let (($x216 (= $x66 true)))
 (let (($x223 (and $x216 $x192)))
 (let (($x251 (and $x223 $x72)))
 (let (($x252 (and $x251 $x80)))
 (let (($x268 (and $x252 $x312)))
 (let (($x137 (and $x268 $x244)))
 (let (($x40 (and $x137 $x127)))
 (let (($x299 (and $x40 $x300)))
 (let (($x200 (and $x299 $x156)))
 (let (($x314 (and $x200 $x232)))
 (let (($x349 (and $x314 $x348)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x320 (and $x143 $x349)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x322 (and $x282 $x320)))
 (let (($x189 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x75 (_ bv1 32))))
 (=> $x106 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x267 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x75 (_ bv1 32))))
 (= $x106 false)))))
 ))
 (let (($x77 (forall ((Lambda25 (_ BitVec 32)) )(let (($x263 (= false false)))
 (let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x75 (_ bv0 32))))
 (=> $x260 $x263))))))
 ))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x75 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x75 (_ bv0 32))))
 (= $x260 true)))))
 ))
 (let (($x169 (and $x104 $x77)))
 (let (($x123 (and $x169 $x267)))
 (let (($x17 (and $x123 $x189)))
 (let (($x321 (and $x17 $x322)))
 (let (($x258 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x342 (and $x258 $x321)))
 (let ((?x29 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x154 (bvadd input.dst.llvm-%m ?x29)))
 (let (($x269 (bvugt ?x154 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd ?x154 (_ bv3 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x279 (bvugt ?x154 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x265 (or false (or false (and (and true (or $x203 $x279)) (or $x113 $x269))))))
 (let (($x213 (=> (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32))) $x265)))
 (let (($x204 (=> (and $x108 (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32)))) $x265)))
 (let (($x18 (and $x204 $x342)))
 (let (($x54 (=> $x18 $x119)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x316 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x337 (= (_ bv0 32) ?x316)))
 (let ((?x323 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x323)))
 (let ((?x302 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x318 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x302)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x132)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x236 $x182)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x135 $x79)))
 (let (($x324 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x62 $x116)))
 (let (($x334 (not $x68)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (and $x161 $x80)))
 (let (($x94 (and (not $x252) $x334)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (and $x284 $x32)))
 (let (($x72 (not $x234)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x129 $x192)))
 (let (($x219 (and (not $x223) $x72)))
 (let (($x35 (and (and (and (and (and (and $x219 $x94) $x122) $x324) $x287) $x318) $x309)))
 (let (($x225 (and $x35 $x337)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x114 (or false (or false (and (and true (or $x17 $x172)) (or $x57 $x121))))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x345 (and $x84 $x225)))
 (let (($x344 (= $x345 true)))
 (let (($x346 (= $x344 true)))
 (let ((?x140 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x210 (concat ?x243 (concat ?x261 ?x140)))))
 (let (($x147 (= ?x155 input.dst.llvm-%n)))
 (let (($x83 (= $x147 true)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x312 (concat ?x315 (concat ?x47 (concat ?x142 ?x230)))))
 (let (($x69 (= ?x312 input.dst.llvm-%m)))
 (let (($x16 (= $x69 true)))
 (let (($x268 (= input.dst.llvm-%m ?x312)))
 (let (($x208 (= input.dst.llvm-%n ?x155)))
 (let (($x317 (and $x208 $x268)))
 (let (($x178 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x188 (and $x178 $x317)))
 (let (($x175 (and (and (and $x84 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x225) $x188)))
 (let (($x264 (= $x175 true)))
 (let (($x186 (= $x264 true)))
 (let (($x343 (and $x186 $x16)))
 (let (($x259 (and $x343 $x83)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x224 (and $x77 $x259)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x26 (and $x104 $x224)))
 (let (($x75 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x53 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x53 (_ bv1 32))))
 (=> $x95 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x25 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x53 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x53 (_ bv1 32))))
 (= $x95 false)))))
 ))
 (let (($x254 (forall ((Lambda25 (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x53 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x53 (_ bv0 32))))
 (=> $x50 $x279))))))
 ))
 (let (($x125 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x53 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x53 (_ bv0 32))))
 (= $x50 true)))))
 ))
 (let (($x113 (and $x125 $x254)))
 (let (($x265 (and $x113 $x25)))
 (let (($x260 (and $x265 $x75)))
 (let (($x335 (and $x260 $x26)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x144 (and $x117 $x335)))
 (let (($x187 (=> $x144 $x346)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x316 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x337 (= (_ bv0 32) ?x316)))
 (let ((?x323 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x323)))
 (let ((?x302 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x318 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x302)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x132)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x236 $x182)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x135 $x79)))
 (let (($x324 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x62 $x116)))
 (let (($x334 (not $x68)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (and $x161 $x80)))
 (let (($x94 (and (not $x252) $x334)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (and $x284 $x32)))
 (let (($x72 (not $x234)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x129 $x192)))
 (let (($x219 (and (not $x223) $x72)))
 (let (($x35 (and (and (and (and (and (and $x219 $x94) $x122) $x324) $x287) $x318) $x309)))
 (let (($x225 (and $x35 $x337)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x114 (or false (or false (and (and true (or $x17 $x172)) (or $x57 $x121))))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x345 (and $x84 $x225)))
 (let (($x344 (= $x345 true)))
 (let (($x346 (= $x344 true)))
 (let ((?x140 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x210 (concat ?x243 (concat ?x261 ?x140)))))
 (let (($x147 (= ?x155 input.dst.llvm-%n)))
 (let (($x83 (= $x147 true)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x312 (concat ?x315 (concat ?x47 (concat ?x142 ?x230)))))
 (let (($x69 (= ?x312 input.dst.llvm-%m)))
 (let (($x16 (= $x69 true)))
 (let (($x268 (= input.dst.llvm-%m ?x312)))
 (let (($x208 (= input.dst.llvm-%n ?x155)))
 (let (($x317 (and $x208 $x268)))
 (let (($x178 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x188 (and $x178 $x317)))
 (let (($x175 (and (and (and $x84 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x225) $x188)))
 (let (($x264 (= $x175 true)))
 (let (($x186 (= $x264 true)))
 (let (($x343 (and $x186 $x16)))
 (let (($x259 (and $x343 $x83)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x224 (and $x77 $x259)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x26 (and $x104 $x224)))
 (let (($x75 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x53 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x53 (_ bv1 32))))
 (=> $x95 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x25 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x53 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x53 (_ bv1 32))))
 (= $x95 false)))))
 ))
 (let (($x254 (forall ((Lambda25 (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x53 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x53 (_ bv0 32))))
 (=> $x50 $x279))))))
 ))
 (let (($x125 (forall ((Lambda25 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x53 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x53 (_ bv0 32))))
 (= $x50 true)))))
 ))
 (let (($x113 (and $x125 $x254)))
 (let (($x265 (and $x113 $x25)))
 (let (($x260 (and $x265 $x75)))
 (let (($x335 (and $x260 $x26)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x144 (and $x117 $x335)))
 (let (($x187 (=> $x144 $x346)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x269)))
 (let (($x258 (= ?x213 input.dst.llvm-%n)))
 (let (($x85 (= $x258 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x343 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x335 (concat ?x259 (concat ?x343 ?x69)))))
 (let (($x154 (= ?x144 input.dst.llvm-%n)))
 (let (($x220 (= $x154 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x234 (concat ?x32 (concat ?x192 (concat ?x118 ?x114)))))
 (let (($x344 (= input.dst.llvm-%m ?x234)))
 (let (($x345 (= input.dst.llvm-%n ?x144)))
 (let (($x346 (and $x345 $x344)))
 (let (($x264 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x187 (and $x264 $x346)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x47)))
 (let ((?x315 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x315)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (and $x261 $x98)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x21 $x131)))
 (let (($x243 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x15 $x257)))
 (let (($x71 (not $x178)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (and $x225 $x137)))
 (let (($x210 (and (not $x199) $x71)))
 (let (($x323 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x309 (and $x73 $x323)))
 (let (($x35 (not $x309)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x310 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x310 $x302)))
 (let (($x337 (and (not $x318) $x35)))
 (let (($x268 (and (and (and (and (and (and $x337 $x210) $x128) $x243) $x155) $x311) $x70)))
 (let (($x317 (and $x268 $x293)))
 (let (($x93 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x341 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x336 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x182 (or false (or false (and (and true (or $x303 $x336)) (or $x341 $x135))))))
 (let (($x287 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x106 (and (and (and $x287 $x93) $x317) $x187)))
 (let (($x304 (= $x106 true)))
 (let (($x250 (= $x304 true)))
 (let (($x219 (= ?x234 input.dst.llvm-%m)))
 (let (($x161 (= $x219 true)))
 (let (($x108 (and $x161 $x250)))
 (let (($x148 (and $x108 $x220)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x63 (and $x143 $x148)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x165 (and $x146 $x63)))
 (let (($x34 (forall ((Lambda25 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x254 (_ bv1 32))))
 (=> $x101 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x263 (forall ((Lambda25 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x254 (_ bv1 32))))
 (= $x101 false)))))
 ))
 (let (($x109 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x53 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x254 (_ bv0 32))))
 (=> $x113 $x25))))))
 ))
 (let (($x289 (forall ((Lambda25 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x254 (_ bv0 32))))
 (= $x113 true)))))
 ))
 (let (($x90 (and $x289 $x109)))
 (let (($x181 (and $x90 $x263)))
 (let (($x172 (and $x181 $x34)))
 (let (($x158 (and $x172 $x165)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x11 (and $x117 $x158)))
 (let (($x153 (=> $x11 $x85)))
 (not $x153)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x269)))
 (let (($x258 (= ?x213 input.dst.llvm-%n)))
 (let (($x85 (= $x258 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x343 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x335 (concat ?x259 (concat ?x343 ?x69)))))
 (let (($x154 (= ?x144 input.dst.llvm-%n)))
 (let (($x220 (= $x154 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x234 (concat ?x32 (concat ?x192 (concat ?x118 ?x114)))))
 (let (($x344 (= input.dst.llvm-%m ?x234)))
 (let (($x345 (= input.dst.llvm-%n ?x144)))
 (let (($x346 (and $x345 $x344)))
 (let (($x264 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x187 (and $x264 $x346)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x47)))
 (let ((?x315 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x315)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (and $x261 $x98)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x21 $x131)))
 (let (($x243 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x15 $x257)))
 (let (($x71 (not $x178)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (and $x225 $x137)))
 (let (($x210 (and (not $x199) $x71)))
 (let (($x323 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x309 (and $x73 $x323)))
 (let (($x35 (not $x309)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x310 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x310 $x302)))
 (let (($x337 (and (not $x318) $x35)))
 (let (($x268 (and (and (and (and (and (and $x337 $x210) $x128) $x243) $x155) $x311) $x70)))
 (let (($x317 (and $x268 $x293)))
 (let (($x93 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x341 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x336 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x182 (or false (or false (and (and true (or $x303 $x336)) (or $x341 $x135))))))
 (let (($x287 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x106 (and (and (and $x287 $x93) $x317) $x187)))
 (let (($x304 (= $x106 true)))
 (let (($x250 (= $x304 true)))
 (let (($x219 (= ?x234 input.dst.llvm-%m)))
 (let (($x161 (= $x219 true)))
 (let (($x108 (and $x161 $x250)))
 (let (($x148 (and $x108 $x220)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x63 (and $x143 $x148)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x165 (and $x146 $x63)))
 (let (($x34 (forall ((Lambda25 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x254 (_ bv1 32))))
 (=> $x101 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x263 (forall ((Lambda25 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x254 (_ bv1 32))))
 (= $x101 false)))))
 ))
 (let (($x109 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x53 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x254 (_ bv0 32))))
 (=> $x113 $x25))))))
 ))
 (let (($x289 (forall ((Lambda25 (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x254 (_ bv0 32))))
 (= $x113 true)))))
 ))
 (let (($x90 (and $x289 $x109)))
 (let (($x181 (and $x90 $x263)))
 (let (($x172 (and $x181 $x34)))
 (let (($x158 (and $x172 $x165)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x11 (and $x117 $x158)))
 (let (($x153 (=> $x11 $x85)))
 (not $x153)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x75 (= (_ bv0 2) ?x265)))
 (let (($x260 (= $x75 true)))
 (let ((?x250 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x11 (concat ?x63 (concat ?x154 ?x250)))))
 (let (($x186 (= ?x91 input.dst.llvm-%m)))
 (let (($x78 (= $x186 true)))
 (let (($x269 (= input.dst.llvm-%m ?x91)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x341 (concat ?x99 (concat ?x334 (concat ?x79 ?x62)))))
 (let (($x106 (= input.dst.llvm-%n ?x341)))
 (let (($x213 (and $x106 $x269)))
 (let (($x187 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x258 (and $x187 $x213)))
 (let ((?x335 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x335)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x264)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (and $x268 $x293)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x70 $x317)))
 (let (($x315 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x140 $x98)))
 (let (($x155 (not $x131)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x231 $x21)))
 (let (($x208 (and (not $x261) $x155)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x210 $x142)))
 (let (($x230 (not $x128)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x182 $x178)))
 (let (($x243 (and (not $x71) $x230)))
 (let (($x224 (and (and (and (and (and (and $x243 $x208) $x312) $x315) $x169) $x175) $x26)))
 (let (($x144 (and $x224 $x83)))
 (let (($x132 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x337 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x310 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x310)))
 (let (($x318 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x302 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x310)))
 (let (($x298 (or false (or false (and (and true (or $x302 $x318)) (or $x35 $x337))))))
 (let (($x257 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x298)))
 (let (($x89 (and (and (and $x257 $x132) $x144) $x258)))
 (let (($x102 (= $x89 true)))
 (let (($x80 (= $x102 true)))
 (let (($x135 (= ?x341 input.dst.llvm-%n)))
 (let (($x236 (= $x135 true)))
 (let (($x66 (and $x236 $x80)))
 (let (($x50 (and $x66 $x78)))
 (let (($x223 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x6 (and $x223 $x50)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x29 (and $x118 $x6)))
 (let (($x129 (forall ((Lambda25 (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x109 (_ bv1 32))))
 (=> $x282 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x59 (forall ((Lambda25 (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x109 (_ bv1 32))))
 (= $x282 false)))))
 ))
 (let (($x189 (forall ((Lambda25 (_ BitVec 32)) )(let (($x263 (= false false)))
 (let (($x254 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x109 (_ bv0 32))))
 (=> $x90 $x263))))))
 ))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x109 (_ bv0 32))))
 (= $x90 true)))))
 ))
 (let (($x17 (and $x104 $x189)))
 (let (($x57 (and $x17 $x59)))
 (let (($x192 (and $x57 $x129)))
 (let (($x125 (and $x192 $x29)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x279 (and $x117 $x125)))
 (let (($x77 (=> $x279 $x260)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x75 (= (_ bv0 2) ?x265)))
 (let (($x260 (= $x75 true)))
 (let ((?x250 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x11 (concat ?x63 (concat ?x154 ?x250)))))
 (let (($x186 (= ?x91 input.dst.llvm-%m)))
 (let (($x78 (= $x186 true)))
 (let (($x269 (= input.dst.llvm-%m ?x91)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x341 (concat ?x99 (concat ?x334 (concat ?x79 ?x62)))))
 (let (($x106 (= input.dst.llvm-%n ?x341)))
 (let (($x213 (and $x106 $x269)))
 (let (($x187 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x258 (and $x187 $x213)))
 (let ((?x335 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x335)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x264)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (and $x268 $x293)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x70 $x317)))
 (let (($x315 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x140 $x98)))
 (let (($x155 (not $x131)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x231 $x21)))
 (let (($x208 (and (not $x261) $x155)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x210 $x142)))
 (let (($x230 (not $x128)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x182 $x178)))
 (let (($x243 (and (not $x71) $x230)))
 (let (($x224 (and (and (and (and (and (and $x243 $x208) $x312) $x315) $x169) $x175) $x26)))
 (let (($x144 (and $x224 $x83)))
 (let (($x132 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x337 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x310 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x310)))
 (let (($x318 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x302 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x310)))
 (let (($x298 (or false (or false (and (and true (or $x302 $x318)) (or $x35 $x337))))))
 (let (($x257 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x298)))
 (let (($x89 (and (and (and $x257 $x132) $x144) $x258)))
 (let (($x102 (= $x89 true)))
 (let (($x80 (= $x102 true)))
 (let (($x135 (= ?x341 input.dst.llvm-%n)))
 (let (($x236 (= $x135 true)))
 (let (($x66 (and $x236 $x80)))
 (let (($x50 (and $x66 $x78)))
 (let (($x223 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x6 (and $x223 $x50)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x29 (and $x118 $x6)))
 (let (($x129 (forall ((Lambda25 (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x109 (_ bv1 32))))
 (=> $x282 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x59 (forall ((Lambda25 (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x109 (_ bv1 32))))
 (= $x282 false)))))
 ))
 (let (($x189 (forall ((Lambda25 (_ BitVec 32)) )(let (($x263 (= false false)))
 (let (($x254 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x109 (_ bv0 32))))
 (=> $x90 $x263))))))
 ))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x109 (_ bv0 32))))
 (= $x90 true)))))
 ))
 (let (($x17 (and $x104 $x189)))
 (let (($x57 (and $x17 $x59)))
 (let (($x192 (and $x57 $x129)))
 (let (($x125 (and $x192 $x29)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x279 (and $x117 $x125)))
 (let (($x77 (=> $x279 $x260)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x34)))
 (let (($x143 (= ?x172 input.spec-%var-n-1)))
 (let (($x251 (= $x143 true)))
 (let ((?x298 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x210 (concat ?x178 (concat ?x132 ?x298)))))
 (let (($x77 (= input.dst.llvm-%m ?x142)))
 (let ((?x287 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x323 (concat ?x139 (concat ?x15 ?x287)))))
 (let (($x260 (= input.dst.llvm-%n ?x35)))
 (let (($x51 (and $x260 $x77)))
 (let (($x75 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x72 (and $x75 $x51)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x80)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x89)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x220)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x250 $x165)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x154 $x91)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x346 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x346 $x187)))
 (let (($x158 (not $x106)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x344 (and $x153 $x345)))
 (let (($x148 (and (not $x344) $x158)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x264 $x26)))
 (let (($x335 (not $x224)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x7 $x175)))
 (let (($x144 (and (not $x147) $x335)))
 (let (($x125 (and (and (and (and (and (and $x144 $x148) $x63) $x108) $x269) $x258) $x102)))
 (let (($x279 (and $x125 $x66)))
 (let (($x261 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x268 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x208 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x311 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x208)))
 (let (($x169 (or false (or false (and (and true (or $x259 $x311)) (or $x70 $x268))))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x169)))
 (let (($x219 (and (and (and $x188 $x261) $x279) $x72)))
 (let (($x8 (= $x219 true)))
 (let (($x113 (= $x8 true)))
 (let (($x230 (= ?x142 input.dst.llvm-%m)))
 (let (($x243 (= $x230 true)))
 (let (($x337 (= ?x35 input.dst.llvm-%n)))
 (let (($x225 (= $x337 true)))
 (let (($x231 (and $x225 $x243)))
 (let (($x216 (and $x231 $x113)))
 (let (($x336 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x53 (and $x336 $x216)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x289 (and $x79 $x53)))
 (let (($x303 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x189 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x189 (_ bv1 32))))
 (=> $x84 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x114 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x189 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x189 (_ bv1 32))))
 (= $x84 false)))))
 ))
 (let (($x32 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (= false false)))
 (let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x189 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x189 (_ bv0 32))))
 (=> $x17 $x59))))))
 ))
 (let (($x146 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x189 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x189 (_ bv0 32))))
 (= $x17 true)))))
 ))
 (let (($x244 (and $x146 $x32)))
 (let (($x267 (and $x244 $x114)))
 (let (($x334 (and $x267 $x303)))
 (let (($x25 (and $x334 $x289)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x204 (and $x117 $x25)))
 (let (($x284 (=> $x204 $x251)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x34)))
 (let (($x143 (= ?x172 input.spec-%var-n-1)))
 (let (($x251 (= $x143 true)))
 (let ((?x298 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x210 (concat ?x178 (concat ?x132 ?x298)))))
 (let (($x77 (= input.dst.llvm-%m ?x142)))
 (let ((?x287 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x323 (concat ?x139 (concat ?x15 ?x287)))))
 (let (($x260 (= input.dst.llvm-%n ?x35)))
 (let (($x51 (and $x260 $x77)))
 (let (($x75 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x72 (and $x75 $x51)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x80)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x89)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x220)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x250 $x165)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x154 $x91)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x346 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x346 $x187)))
 (let (($x158 (not $x106)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x344 (and $x153 $x345)))
 (let (($x148 (and (not $x344) $x158)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x264 $x26)))
 (let (($x335 (not $x224)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x7 $x175)))
 (let (($x144 (and (not $x147) $x335)))
 (let (($x125 (and (and (and (and (and (and $x144 $x148) $x63) $x108) $x269) $x258) $x102)))
 (let (($x279 (and $x125 $x66)))
 (let (($x261 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x268 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x208 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x311 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x208)))
 (let (($x169 (or false (or false (and (and true (or $x259 $x311)) (or $x70 $x268))))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x169)))
 (let (($x219 (and (and (and $x188 $x261) $x279) $x72)))
 (let (($x8 (= $x219 true)))
 (let (($x113 (= $x8 true)))
 (let (($x230 (= ?x142 input.dst.llvm-%m)))
 (let (($x243 (= $x230 true)))
 (let (($x337 (= ?x35 input.dst.llvm-%n)))
 (let (($x225 (= $x337 true)))
 (let (($x231 (and $x225 $x243)))
 (let (($x216 (and $x231 $x113)))
 (let (($x336 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x53 (and $x336 $x216)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x289 (and $x79 $x53)))
 (let (($x303 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x189 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x189 (_ bv1 32))))
 (=> $x84 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x114 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x189 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x189 (_ bv1 32))))
 (= $x84 false)))))
 ))
 (let (($x32 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (= false false)))
 (let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x189 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x189 (_ bv0 32))))
 (=> $x17 $x59))))))
 ))
 (let (($x146 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x189 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x189 (_ bv0 32))))
 (= $x17 true)))))
 ))
 (let (($x244 (and $x146 $x32)))
 (let (($x267 (and $x244 $x114)))
 (let (($x334 (and $x267 $x303)))
 (let (($x25 (and $x334 $x289)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x204 (and $x117 $x25)))
 (let (($x284 (=> $x204 $x251)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x57 (= $x123 true)))
 (let (($x129 (= $x57 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x204 (concat ?x25 (concat ?x216 (concat ?x219 ?x51)))))
 (let (($x135 (= ?x204 input.dst.llvm-%n)))
 (let (($x203 (= $x135 true)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x142 (concat ?x132 (concat ?x210 ?x199)))))
 (let (($x34 (= input.dst.llvm-%m ?x128)))
 (let (($x181 (= input.dst.llvm-%n ?x204)))
 (let (($x172 (and $x181 $x34)))
 (let (($x260 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x143 (and $x260 $x172)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x29)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x258 (= (_ bv0 32) ?x213)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x269)))
 (let ((?x250 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x250)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x154 $x220)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x50 $x165)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x346 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x346 $x187)))
 (let (($x158 (not $x106)))
 (let (($x344 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x345 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x345 $x344)))
 (let (($x186 (and (not $x11) $x158)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x264 $x26)))
 (let (($x335 (not $x224)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x175 $x147)))
 (let (($x153 (and (not $x83) $x335)))
 (let (($x304 (and (and (and (and (and (and $x153 $x186) $x63) $x108) $x91) $x6) $x258)))
 (let (($x162 (and $x304 $x89)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x293 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x311 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x312 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x311)))
 (let (($x261 (or false (or false (and (and true (or $x312 $x16)) (or $x47 $x293))))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x261)))
 (let (($x60 (and (and (and $x7 $x69) $x162) $x143)))
 (let (($x324 (= $x60 true)))
 (let (($x21 (= $x324 true)))
 (let (($x243 (= ?x128 input.dst.llvm-%m)))
 (let (($x231 (= $x243 true)))
 (let (($x137 (and $x231 $x21)))
 (let (($x90 (and $x137 $x203)))
 (let (($x318 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (and $x318 $x90)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x254 (and $x15 $x161)))
 (let (($x302 (forall ((Lambda25 (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x32 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x32 (_ bv1 32))))
 (=> $x116 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x62 (forall ((Lambda25 (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x32 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x32 (_ bv1 32))))
 (= $x116 false)))))
 ))
 (let (($x99 (forall ((Lambda25 (_ BitVec 32)) )(let (($x114 (= false false)))
 (let (($x189 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x32 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x32 (_ bv0 32))))
 (=> $x244 $x114))))))
 ))
 (let (($x118 (forall ((Lambda25 (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x32 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x32 (_ bv0 32))))
 (= $x244 true)))))
 ))
 (let (($x94 (and $x118 $x99)))
 (let (($x68 (and $x94 $x62)))
 (let (($x139 (and $x68 $x302)))
 (let (($x104 (and $x139 $x254)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x263 (and $x117 $x104)))
 (let (($x192 (=> $x263 $x129)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x57 (= $x123 true)))
 (let (($x129 (= $x57 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x204 (concat ?x25 (concat ?x216 (concat ?x219 ?x51)))))
 (let (($x135 (= ?x204 input.dst.llvm-%n)))
 (let (($x203 (= $x135 true)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x142 (concat ?x132 (concat ?x210 ?x199)))))
 (let (($x34 (= input.dst.llvm-%m ?x128)))
 (let (($x181 (= input.dst.llvm-%n ?x204)))
 (let (($x172 (and $x181 $x34)))
 (let (($x260 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x143 (and $x260 $x172)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x29)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x258 (= (_ bv0 32) ?x213)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x269)))
 (let ((?x250 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x250)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x154 $x220)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x50 $x165)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x346 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x346 $x187)))
 (let (($x158 (not $x106)))
 (let (($x344 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x345 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x345 $x344)))
 (let (($x186 (and (not $x11) $x158)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x264 $x26)))
 (let (($x335 (not $x224)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x175 $x147)))
 (let (($x153 (and (not $x83) $x335)))
 (let (($x304 (and (and (and (and (and (and $x153 $x186) $x63) $x108) $x91) $x6) $x258)))
 (let (($x162 (and $x304 $x89)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x293 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x311 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x312 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x311)))
 (let (($x261 (or false (or false (and (and true (or $x312 $x16)) (or $x47 $x293))))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x261)))
 (let (($x60 (and (and (and $x7 $x69) $x162) $x143)))
 (let (($x324 (= $x60 true)))
 (let (($x21 (= $x324 true)))
 (let (($x243 (= ?x128 input.dst.llvm-%m)))
 (let (($x231 (= $x243 true)))
 (let (($x137 (and $x231 $x21)))
 (let (($x90 (and $x137 $x203)))
 (let (($x318 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (and $x318 $x90)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x254 (and $x15 $x161)))
 (let (($x302 (forall ((Lambda25 (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x32 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x32 (_ bv1 32))))
 (=> $x116 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x62 (forall ((Lambda25 (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x32 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x32 (_ bv1 32))))
 (= $x116 false)))))
 ))
 (let (($x99 (forall ((Lambda25 (_ BitVec 32)) )(let (($x114 (= false false)))
 (let (($x189 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x32 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x32 (_ bv0 32))))
 (=> $x244 $x114))))))
 ))
 (let (($x118 (forall ((Lambda25 (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x32 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x32 (_ bv0 32))))
 (= $x244 true)))))
 ))
 (let (($x94 (and $x118 $x99)))
 (let (($x68 (and $x94 $x62)))
 (let (($x139 (and $x68 $x302)))
 (let (($x104 (and $x139 $x254)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x263 (and $x117 $x104)))
 (let (($x192 (=> $x263 $x129)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x31 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x112 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x112 (_ bv1 32)))))
 ))
 (let (($x201 (forall ((Lambda25 (_ BitVec 32)) )(= true (= (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 ))
 (let (($x12 (and $x201 $x31)))
 (let (($x271 (and $x12 $x23)))
 (let (($x46 (and $x271 $x31)))
 (let (($x228 (= $x46 true)))
 (let (($x96 (= $x228 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x263 (concat ?x161 (concat ?x135 ?x21)))))
 (let (($x17 (= ?x123 input.dst.llvm-%m)))
 (let (($x236 (= $x17 true)))
 (let (($x57 (= input.dst.llvm-%m ?x123)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x343 (concat ?x155 (concat ?x191 ?x131)))))
 (let (($x60 (= input.dst.llvm-%n ?x47)))
 (let (($x129 (and $x60 $x57)))
 (let (($x143 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x192 (and $x143 $x129)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x25)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x260)))
 (let ((?x265 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x265)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (and $x304 $x89)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (and $x258 $x162)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x250 $x220)))
 (let (($x91 (not $x165)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x80 $x50)))
 (let (($x269 (and (not $x154) $x91)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x186 $x102)))
 (let (($x125 (not $x63)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x261 $x106)))
 (let (($x108 (and (not $x158) $x125)))
 (let (($x53 (and (and (and (and (and (and $x108 $x269) $x279) $x213) $x284) $x75) $x289)))
 (let (($x204 (and $x53 $x113)))
 (let (($x188 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x335 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x148 (or false (or false (and (and true (or $x147 $x83)) (or $x335 $x153))))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x148)))
 (let (($x140 (and (and (and $x187 $x188) $x204) $x192)))
 (let (($x337 (= $x140 true)))
 (let (($x77 (= $x337 true)))
 (let (($x293 (= ?x47 input.dst.llvm-%n)))
 (let (($x317 (= $x293 true)))
 (let (($x95 (and $x317 $x77)))
 (let (($x109 (and $x95 $x236)))
 (let (($x298 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x146 (and $x298 $x109)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x59 (and $x210 $x146)))
 (let (($x257 (forall ((Lambda25 (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x99 (_ bv1 32))))
 (=> $x252 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x287 (forall ((Lambda25 (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x99 (_ bv1 32))))
 (= $x252 false)))))
 ))
 (let (($x323 (forall ((Lambda25 (_ BitVec 32)) )(let (($x62 (= false false)))
 (let (($x32 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x99 (_ bv0 32))))
 (=> $x94 $x62))))))
 ))
 (let (($x79 (forall ((Lambda25 (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x99 (_ bv0 32))))
 (= $x94 true)))))
 ))
 (let (($x310 (and $x79 $x323)))
 (let (($x93 (and $x310 $x287)))
 (let (($x132 (and $x93 $x257)))
 (let (($x121 (and $x132 $x59)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x267 (and $x117 $x121)))
 (let (($x176 (=> $x267 $x96)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x31 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x112 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x112 (_ bv1 32)))))
 ))
 (let (($x201 (forall ((Lambda25 (_ BitVec 32)) )(= true (= (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 ))
 (let (($x12 (and $x201 $x31)))
 (let (($x271 (and $x12 $x23)))
 (let (($x46 (and $x271 $x31)))
 (let (($x228 (= $x46 true)))
 (let (($x96 (= $x228 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x263 (concat ?x161 (concat ?x135 ?x21)))))
 (let (($x17 (= ?x123 input.dst.llvm-%m)))
 (let (($x236 (= $x17 true)))
 (let (($x57 (= input.dst.llvm-%m ?x123)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x343 (concat ?x155 (concat ?x191 ?x131)))))
 (let (($x60 (= input.dst.llvm-%n ?x47)))
 (let (($x129 (and $x60 $x57)))
 (let (($x143 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x192 (and $x143 $x129)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x25)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x260)))
 (let ((?x265 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x265)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (and $x304 $x89)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (and $x258 $x162)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x250 $x220)))
 (let (($x91 (not $x165)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x80 $x50)))
 (let (($x269 (and (not $x154) $x91)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x186 $x102)))
 (let (($x125 (not $x63)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x261 $x106)))
 (let (($x108 (and (not $x158) $x125)))
 (let (($x53 (and (and (and (and (and (and $x108 $x269) $x279) $x213) $x284) $x75) $x289)))
 (let (($x204 (and $x53 $x113)))
 (let (($x188 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x335 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x148 (or false (or false (and (and true (or $x147 $x83)) (or $x335 $x153))))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x148)))
 (let (($x140 (and (and (and $x187 $x188) $x204) $x192)))
 (let (($x337 (= $x140 true)))
 (let (($x77 (= $x337 true)))
 (let (($x293 (= ?x47 input.dst.llvm-%n)))
 (let (($x317 (= $x293 true)))
 (let (($x95 (and $x317 $x77)))
 (let (($x109 (and $x95 $x236)))
 (let (($x298 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x146 (and $x298 $x109)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x59 (and $x210 $x146)))
 (let (($x257 (forall ((Lambda25 (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x99 (_ bv1 32))))
 (=> $x252 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x287 (forall ((Lambda25 (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x99 (_ bv1 32))))
 (= $x252 false)))))
 ))
 (let (($x323 (forall ((Lambda25 (_ BitVec 32)) )(let (($x62 (= false false)))
 (let (($x32 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x99 (_ bv0 32))))
 (=> $x94 $x62))))))
 ))
 (let (($x79 (forall ((Lambda25 (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x99 (_ bv0 32))))
 (= $x94 true)))))
 ))
 (let (($x310 (and $x79 $x323)))
 (let (($x93 (and $x310 $x287)))
 (let (($x132 (and $x93 $x257)))
 (let (($x121 (and $x132 $x59)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x267 (and $x117 $x121)))
 (let (($x176 (=> $x267 $x96)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460687/query
