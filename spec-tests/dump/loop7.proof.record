==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x5 $x6)))
 (let (($x17 (and $x7 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x5 $x6)))
 (let (($x17 (and $x7 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (= true false)))
 (let (($x146 (= $x145 true)))
 (let (($x138 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x124 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x124 false)))
 ))
 (let (($x139 (and $x128 $x138)))
 (let (($x140 (= $x139 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x113 (concat ?x110 (concat ?x107 ?x105)))))
 (let (($x116 (= ?x114 input.dst.llvm-%m)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 (concat ?x91 ?x57)))))
 (let (($x100 (= ?x99 input.dst.llvm-%n)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x18)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x89)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (and $x39 $x12)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x32 $x28)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x41 $x45)))
 (let (($x42 (not $x11)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x46 $x49)))
 (let (($x50 (and (not $x56) $x42)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x76 $x85)))
 (let (($x68 (not $x22)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x40 $x33)))
 (let (($x67 (and (not $x31) $x68)))
 (let (($x83 (and (and (and (and (and (and $x67 $x50) $x62) $x71) $x65) $x82) $x53)))
 (let (($x61 (and $x83 $x47)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x17)))
 (let (($x15 (or false (or false (and (and true (or $x79 $x86)) (or $x27 $x54))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x13 (and $x60 $x61)))
 (let (($x64 (= $x13 true)))
 (let (($x74 (= $x64 true)))
 (let (($x87 (= $x74 true)))
 (let (($x10 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x37 (= $x10 true)))
 (let (($x51 (= $x37 true)))
 (let (($x30 (= $x51 true)))
 (let (($x88 (and $x30 $x87)))
 (let (($x103 (and $x88 $x102)))
 (let (($x119 (and $x103 $x118)))
 (let (($x141 (and $x119 $x140)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and $x34 $x141)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x14 $x142)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x36 $x143)))
 (let (($x147 (=> $x144 $x146)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (= true false)))
 (let (($x146 (= $x145 true)))
 (let (($x138 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x124 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x124 false)))
 ))
 (let (($x139 (and $x128 $x138)))
 (let (($x140 (= $x139 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x113 (concat ?x110 (concat ?x107 ?x105)))))
 (let (($x116 (= ?x114 input.dst.llvm-%m)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 (concat ?x91 ?x57)))))
 (let (($x100 (= ?x99 input.dst.llvm-%n)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x18)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x89)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (and $x39 $x12)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x32 $x28)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x41 $x45)))
 (let (($x42 (not $x11)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x46 $x49)))
 (let (($x50 (and (not $x56) $x42)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x76 $x85)))
 (let (($x68 (not $x22)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x40 $x33)))
 (let (($x67 (and (not $x31) $x68)))
 (let (($x83 (and (and (and (and (and (and $x67 $x50) $x62) $x71) $x65) $x82) $x53)))
 (let (($x61 (and $x83 $x47)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x17)))
 (let (($x15 (or false (or false (and (and true (or $x79 $x86)) (or $x27 $x54))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x13 (and $x60 $x61)))
 (let (($x64 (= $x13 true)))
 (let (($x74 (= $x64 true)))
 (let (($x87 (= $x74 true)))
 (let (($x10 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x37 (= $x10 true)))
 (let (($x51 (= $x37 true)))
 (let (($x30 (= $x51 true)))
 (let (($x88 (and $x30 $x87)))
 (let (($x103 (and $x88 $x102)))
 (let (($x119 (and $x103 $x118)))
 (let (($x141 (and $x119 $x140)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and $x34 $x141)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x14 $x142)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x36 $x143)))
 (let (($x147 (=> $x144 $x146)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1be5ee7c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1303f310)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1303f313)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1be5ee7f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1303f310)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1be5ee7c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x11)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x39)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x41 $x97)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x73 $x74)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x56 $x13)))
 (let (($x76 (not $x72)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x20 $x90)))
 (let (($x92 (and (not $x71) $x76)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x27 $x30)))
 (let (($x95 (not $x96)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x86 $x5)))
 (let (($x18 (and (not $x81) $x95)))
 (let (($x65 (and (and (and (and (and (and $x18 $x92) $x7) $x57) $x52) $x22) $x66)))
 (let (($x8 (and $x65 $x89)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x44 (or false (or false (and (and true (or $x79 $x28)) (or $x60 $x83))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x120 (and $x51 $x8)))
 (let (($x122 (= $x120 true)))
 (let (($x126 (= $x122 true)))
 (let (($x148 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x128 false)))
 ))
 (let (($x143 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x77 (and $x143 $x148)))
 (let (($x104 (= $x77 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x113 (concat ?x102 ?x100)))))
 (let (($x105 (= input.dst.llvm-%m ?x107)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x19 (concat ?x80 (concat ?x78 ?x61)))))
 (let (($x45 (= input.dst.llvm-%n ?x94)))
 (let (($x108 (and $x45 $x105)))
 (let (($x114 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x51) $x8)))
 (let (($x115 (and $x114 $x108)))
 (let (($x14 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x116 (and $x14 $x115)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x119 (= $x118 true)))
 (let (($x58 (and $x119 $x104)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x29 $x58)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x55 $x125)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x17 $x133)))
 (let (($x134 (=> $x131 $x126)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x11)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x39)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x41 $x97)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x73 $x74)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x56 $x13)))
 (let (($x76 (not $x72)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x20 $x90)))
 (let (($x92 (and (not $x71) $x76)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x27 $x30)))
 (let (($x95 (not $x96)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x86 $x5)))
 (let (($x18 (and (not $x81) $x95)))
 (let (($x65 (and (and (and (and (and (and $x18 $x92) $x7) $x57) $x52) $x22) $x66)))
 (let (($x8 (and $x65 $x89)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x44 (or false (or false (and (and true (or $x79 $x28)) (or $x60 $x83))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x120 (and $x51 $x8)))
 (let (($x122 (= $x120 true)))
 (let (($x126 (= $x122 true)))
 (let (($x148 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x128 false)))
 ))
 (let (($x143 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x77 (and $x143 $x148)))
 (let (($x104 (= $x77 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x113 (concat ?x102 ?x100)))))
 (let (($x105 (= input.dst.llvm-%m ?x107)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x19 (concat ?x80 (concat ?x78 ?x61)))))
 (let (($x45 (= input.dst.llvm-%n ?x94)))
 (let (($x108 (and $x45 $x105)))
 (let (($x114 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x51) $x8)))
 (let (($x115 (and $x114 $x108)))
 (let (($x14 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x116 (and $x14 $x115)))
 (let (($x117 (= $x116 true)))
 (let (($x118 (= $x117 true)))
 (let (($x119 (= $x118 true)))
 (let (($x58 (and $x119 $x104)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x29 $x58)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x55 $x125)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x17 $x133)))
 (let (($x134 (=> $x131 $x126)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x139 (= $x146 true)))
 (let (($x42 (forall ((input.ind-%var73X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var73X)))
 (=> $x147 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var73X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var72X)))
 (= $x147 false)))
 ))
 (let (($x31 (and $x58 $x42)))
 (let (($x132 (= $x31 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x107 (concat ?x100 (concat ?x113 ?x106)))))
 (let (($x108 (= input.dst.llvm-%m ?x105)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x91 (concat ?x78 (concat ?x62 ?x24)))))
 (let (($x45 (= input.dst.llvm-%n ?x94)))
 (let (($x115 (and $x45 $x108)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x68)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x52)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x57 $x41)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x67 $x16)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x72 (not $x13)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x20 $x90)))
 (let (($x92 (and (not $x71) $x72)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x96 (not $x30)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x21 $x85)))
 (let (($x18 (and (not $x81) $x96)))
 (let (($x89 (and (and (and (and (and (and $x18 $x92) $x59) $x26) $x47) $x74) $x46)))
 (let (($x8 (and $x89 $x22)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x111 (or false (or false (and (and true (or $x98 $x82)) (or $x40 $x99))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x111)))
 (let (($x35 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x118 (and (and (and $x35 $x5) $x8) $x115)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x119 (and $x43 $x118)))
 (let (($x127 (= $x119 true)))
 (let (($x128 (= $x127 true)))
 (let (($x137 (= $x128 true)))
 (let (($x138 (and $x137 $x132)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x36 $x138)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x136 (and $x48 $x123)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x145 (and $x25 $x136)))
 (let (($x124 (=> $x145 $x139)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x139 (= $x146 true)))
 (let (($x42 (forall ((input.ind-%var73X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var73X)))
 (=> $x147 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var73X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var72X)))
 (= $x147 false)))
 ))
 (let (($x31 (and $x58 $x42)))
 (let (($x132 (= $x31 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x107 (concat ?x100 (concat ?x113 ?x106)))))
 (let (($x108 (= input.dst.llvm-%m ?x105)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x91 (concat ?x78 (concat ?x62 ?x24)))))
 (let (($x45 (= input.dst.llvm-%n ?x94)))
 (let (($x115 (and $x45 $x108)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x68)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x52)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x57 $x41)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x67 $x16)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x72 (not $x13)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x20 $x90)))
 (let (($x92 (and (not $x71) $x72)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x96 (not $x30)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x21 $x85)))
 (let (($x18 (and (not $x81) $x96)))
 (let (($x89 (and (and (and (and (and (and $x18 $x92) $x59) $x26) $x47) $x74) $x46)))
 (let (($x8 (and $x89 $x22)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x111 (or false (or false (and (and true (or $x98 $x82)) (or $x40 $x99))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x111)))
 (let (($x35 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x118 (and (and (and $x35 $x5) $x8) $x115)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x119 (and $x43 $x118)))
 (let (($x127 (= $x119 true)))
 (let (($x128 (= $x127 true)))
 (let (($x137 (= $x128 true)))
 (let (($x138 (and $x137 $x132)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x36 $x138)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x136 (and $x48 $x123)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x145 (and $x25 $x136)))
 (let (($x124 (=> $x145 $x139)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x02020200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00002003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02020202)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x02020202)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00002000) #x00
      #x02))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x68e71c7c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfe7ffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfe7ffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x68e71c7f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfe7ffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x68e71c7c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfe7ffff9) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x133)))
 (let (($x144 (= ?x134 input.dst.llvm-%n)))
 (let (($x129 (= $x144 true)))
 (let (($x32 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x42 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x42 false)))
 ))
 (let (($x148 (and $x123 $x32)))
 (let (($x122 (= $x148 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x108 (concat ?x101 (concat ?x112 ?x102)))))
 (let (($x118 (= input.dst.llvm-%m ?x115)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x94 (concat ?x24 (concat ?x87 ?x91)))))
 (let (($x109 (= input.dst.llvm-%n ?x45)))
 (let (($x119 (and $x109 $x118)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x74)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x65)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x66 $x33)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x26 $x73)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x72 (not $x13)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x90 $x71)))
 (let (($x75 (and (not $x76) $x72)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x96 (not $x30)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x86 $x79)))
 (let (($x20 (and (not $x95) $x96)))
 (let (($x8 (and (and (and (and (and (and $x20 $x75) $x59) $x7) $x41) $x47) $x97)))
 (let (($x117 (and $x8 $x11)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x21 (or false (or false (and (and true (or $x60 $x9)) (or $x44 $x51))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x35 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x137 (and (and (and $x35 $x81) $x117) $x119)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x143 (and $x43 $x137)))
 (let (($x147 (= $x143 true)))
 (let (($x104 (= $x147 true)))
 (let (($x58 (= $x104 true)))
 (let (($x131 (and $x58 $x122)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (and $x36 $x131)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x142 (and $x12 $x141)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x77 (and $x55 $x142)))
 (let (($x135 (=> $x77 $x129)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x133)))
 (let (($x144 (= ?x134 input.dst.llvm-%n)))
 (let (($x129 (= $x144 true)))
 (let (($x32 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x42 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x42 false)))
 ))
 (let (($x148 (and $x123 $x32)))
 (let (($x122 (= $x148 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x108 (concat ?x101 (concat ?x112 ?x102)))))
 (let (($x118 (= input.dst.llvm-%m ?x115)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x94 (concat ?x24 (concat ?x87 ?x91)))))
 (let (($x109 (= input.dst.llvm-%n ?x45)))
 (let (($x119 (and $x109 $x118)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x74)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x65)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x66 $x33)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x26 $x73)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x72 (not $x13)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x90 $x71)))
 (let (($x75 (and (not $x76) $x72)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x96 (not $x30)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x86 $x79)))
 (let (($x20 (and (not $x95) $x96)))
 (let (($x8 (and (and (and (and (and (and $x20 $x75) $x59) $x7) $x41) $x47) $x97)))
 (let (($x117 (and $x8 $x11)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x21 (or false (or false (and (and true (or $x60 $x9)) (or $x44 $x51))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x21)))
 (let (($x35 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x137 (and (and (and $x35 $x81) $x117) $x119)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x143 (and $x43 $x137)))
 (let (($x147 (= $x143 true)))
 (let (($x104 (= $x147 true)))
 (let (($x58 (= $x104 true)))
 (let (($x131 (and $x58 $x122)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (and $x36 $x131)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x142 (and $x12 $x141)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x77 (and $x55 $x142)))
 (let (($x135 (=> $x77 $x129)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x120 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x132 (bvmul ?x120 (_ bv256 16))))
 (let (($x145 (= ?x132 ?x140)))
 (let (($x10 (= $x145 true)))
 (let (($x121 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x110 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x110 false)))
 ))
 (let (($x23 (and $x131 $x121)))
 (let (($x107 (= $x23 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x115 (concat ?x102 (concat ?x101 ?x108)))))
 (let (($x119 (= input.dst.llvm-%m ?x118)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x53 (concat ?x87 (concat ?x19 ?x61)))))
 (let (($x109 (= input.dst.llvm-%n ?x45)))
 (let (($x137 (and $x109 $x119)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x16)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x41)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x7 $x66)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x39 $x67)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x90 $x71)))
 (let (($x75 (and (not $x76) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x98 $x85)))
 (let (($x20 (and (not $x95) $x30)))
 (let (($x11 (and (and (and (and (and (and $x20 $x75) $x93) $x46) $x57) $x73) $x68)))
 (let (($x117 (and $x11 $x47)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x127 (or false (or false (and (and true (or $x40 $x83)) (or $x111 $x5))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x127)))
 (let (($x6 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x104 (and (and (and $x6 $x79) $x117) $x137)))
 (let (($x29 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x58 (and $x29 $x104)))
 (let (($x70 (= $x58 true)))
 (let (($x42 (= $x70 true)))
 (let (($x138 (= $x42 true)))
 (let (($x64 (and $x138 $x107)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x31 (and $x69 $x64)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x37 $x31)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x25 $x124)))
 (let (($x125 (=> $x146 $x10)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x120 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x132 (bvmul ?x120 (_ bv256 16))))
 (let (($x145 (= ?x132 ?x140)))
 (let (($x10 (= $x145 true)))
 (let (($x121 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x110 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x110 false)))
 ))
 (let (($x23 (and $x131 $x121)))
 (let (($x107 (= $x23 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x115 (concat ?x102 (concat ?x101 ?x108)))))
 (let (($x119 (= input.dst.llvm-%m ?x118)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x53 (concat ?x87 (concat ?x19 ?x61)))))
 (let (($x109 (= input.dst.llvm-%n ?x45)))
 (let (($x137 (and $x109 $x119)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x16)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x41)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (and $x7 $x66)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x39 $x67)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x90 $x71)))
 (let (($x75 (and (not $x76) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x98 $x85)))
 (let (($x20 (and (not $x95) $x30)))
 (let (($x11 (and (and (and (and (and (and $x20 $x75) $x93) $x46) $x57) $x73) $x68)))
 (let (($x117 (and $x11 $x47)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x127 (or false (or false (and (and true (or $x40 $x83)) (or $x111 $x5))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x127)))
 (let (($x6 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x104 (and (and (and $x6 $x79) $x117) $x137)))
 (let (($x29 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x58 (and $x29 $x104)))
 (let (($x70 (= $x58 true)))
 (let (($x42 (= $x70 true)))
 (let (($x138 (= $x42 true)))
 (let (($x64 (and $x138 $x107)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x31 (and $x69 $x64)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x37 $x31)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x25 $x124)))
 (let (($x125 (=> $x146 $x10)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x10
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x139 (= (_ bv0 2) ?x123)))
 (let (($x148 (= $x139 true)))
 (let (($x149 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var107X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var107X) (_ bv0 32)))))
 ))
 (let (($x31 (forall ((input.ind-%var106X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var106X)))
 (= $x121 false)))
 ))
 (let (($x35 (and $x31 $x149)))
 (let (($x28 (= $x35 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x119 (concat ?x100 (concat ?x106 ?x112)))))
 (let (($x104 (= input.dst.llvm-%m ?x137)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x45 (concat ?x61 (concat ?x80 ?x53)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x58 (and $x103 $x104)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x73)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x8)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x97 $x89)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x46 $x26)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x86 $x60)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x117 (and (and (and (and (and (and $x90 $x22) $x93) $x59) $x66) $x57) $x33)))
 (let (($x147 (and $x117 $x74)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x98 (or false (or false (and (and true (or $x44 $x38)) (or $x21 $x81))))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x6 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x138 (and (and (and $x6 $x95) $x147) $x58)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x49 (and $x36 $x138)))
 (let (($x110 (= $x49 true)))
 (let (($x122 (= $x110 true)))
 (let (($x131 (= $x122 true)))
 (let (($x105 (and $x131 $x28)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x48 $x105)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x32 (and $x17 $x114)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x43 $x32)))
 (let (($x134 (=> $x133 $x148)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x139 (= (_ bv0 2) ?x123)))
 (let (($x148 (= $x139 true)))
 (let (($x149 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var107X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var107X) (_ bv0 32)))))
 ))
 (let (($x31 (forall ((input.ind-%var106X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var106X)))
 (= $x121 false)))
 ))
 (let (($x35 (and $x31 $x149)))
 (let (($x28 (= $x35 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x119 (concat ?x100 (concat ?x106 ?x112)))))
 (let (($x104 (= input.dst.llvm-%m ?x137)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x45 (concat ?x61 (concat ?x80 ?x53)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x58 (and $x103 $x104)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x73)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x8)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x97 $x89)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x46 $x26)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x86 $x60)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x117 (and (and (and (and (and (and $x90 $x22) $x93) $x59) $x66) $x57) $x33)))
 (let (($x147 (and $x117 $x74)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x98 (or false (or false (and (and true (or $x44 $x38)) (or $x21 $x81))))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x6 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x138 (and (and (and $x6 $x95) $x147) $x58)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x49 (and $x36 $x138)))
 (let (($x110 (= $x49 true)))
 (let (($x122 (= $x110 true)))
 (let (($x131 (= $x122 true)))
 (let (($x105 (and $x131 $x28)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (and $x48 $x105)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x32 (and $x17 $x114)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x43 $x32)))
 (let (($x134 (=> $x133 $x148)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x107)))
 (let (($x146 (= ?x140 input.spec-%var-n-1)))
 (let (($x145 (= $x146 true)))
 (let (($x50 (forall ((input.ind-%var113X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var113X)))
 (=> $x125 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var113X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var112X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var112X)))
 (= $x125 false)))
 ))
 (let (($x115 (and $x105 $x50)))
 (let (($x78 (= $x115 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x137 (concat ?x112 (concat ?x100 ?x119)))))
 (let (($x58 (= input.dst.llvm-%m ?x104)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x62 (concat ?x80 (concat ?x94 ?x91)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x138 (and $x103 $x58)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x67)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x66)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x46)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (and $x59 $x97)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x65 $x39)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x40 $x85)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x74 (and (and (and (and (and (and $x90 $x22) $x52) $x68) $x7) $x26) $x16)))
 (let (($x147 (and $x74 $x57)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x70 (or false (or false (and (and true (or $x111 $x51)) (or $x127 $x79))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x122 (and (and (and $x34 $x60) $x147) $x138)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (and $x69 $x122)))
 (let (($x135 (= $x131 true)))
 (let (($x121 (= $x135 true)))
 (let (($x64 (= $x121 true)))
 (let (($x23 (and $x64 $x78)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x12 $x23)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x63 $x132)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x25 $x120)))
 (let (($x141 (=> $x126 $x145)))
 (not $x141)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x107)))
 (let (($x146 (= ?x140 input.spec-%var-n-1)))
 (let (($x145 (= $x146 true)))
 (let (($x50 (forall ((input.ind-%var113X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var113X)))
 (=> $x125 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var113X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var112X (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var112X)))
 (= $x125 false)))
 ))
 (let (($x115 (and $x105 $x50)))
 (let (($x78 (= $x115 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x137 (concat ?x112 (concat ?x100 ?x119)))))
 (let (($x58 (= input.dst.llvm-%m ?x104)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x62 (concat ?x80 (concat ?x94 ?x91)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x138 (and $x103 $x58)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x67)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x66)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x46)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (and $x59 $x97)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x65 $x39)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x40 $x85)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x74 (and (and (and (and (and (and $x90 $x22) $x52) $x68) $x7) $x26) $x16)))
 (let (($x147 (and $x74 $x57)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x70 (or false (or false (and (and true (or $x111 $x51)) (or $x127 $x79))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x122 (and (and (and $x34 $x60) $x147) $x138)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (and $x69 $x122)))
 (let (($x135 (= $x131 true)))
 (let (($x121 (= $x135 true)))
 (let (($x64 (= $x121 true)))
 (let (($x23 (and $x64 $x78)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x12 $x23)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x63 $x132)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x25 $x120)))
 (let (($x141 (=> $x126 $x145)))
 (not $x141)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 ((_ extract 0 0) input.spec-%var-n-1)))
 (let (($x35 (= (_ bv0 1) ?x130)))
 (let (($x139 (= $x35 true)))
 (let (($x144 (forall ((input.ind-%var119X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var119X)))
 (=> $x142 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var119X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var118X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var118X)))
 (= $x142 false)))
 ))
 (let (($x9 (and $x23 $x144)))
 (let (($x118 (= $x9 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x104 (concat ?x119 (concat ?x112 ?x137)))))
 (let (($x138 (= input.dst.llvm-%m ?x58)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x53 (concat ?x94 (concat ?x61 ?x87)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x122 (and $x103 $x138)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x89)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x7)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x68 $x59)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x93 $x11)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x13 $x75)))
 (let (($x84 (not $x92)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x30 $x20)))
 (let (($x88 (not $x18)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x99 $x86)))
 (let (($x90 (and (not $x96) $x88)))
 (let (($x57 (and (and (and (and (and (and $x90 $x22) $x41) $x8) $x46) $x39) $x117)))
 (let (($x147 (and $x57 $x26)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x49 (or false (or false (and (and true (or $x5 $x21)) (or $x143 $x98))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x49)))
 (let (($x14 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x121 (and (and (and $x14 $x85) $x147) $x122)))
 (let (($x48 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (and $x48 $x121)))
 (let (($x10 (= $x64 true)))
 (let (($x125 (= $x10 true)))
 (let (($x28 (= $x125 true)))
 (let (($x128 (and $x28 $x118)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x37 $x128)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x123 (and $x15 $x149)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x43 $x123)))
 (let (($x32 (=> $x133 $x139)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 ((_ extract 0 0) input.spec-%var-n-1)))
 (let (($x35 (= (_ bv0 1) ?x130)))
 (let (($x139 (= $x35 true)))
 (let (($x144 (forall ((input.ind-%var119X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var119X)))
 (=> $x142 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var119X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var118X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var118X)))
 (= $x142 false)))
 ))
 (let (($x9 (and $x23 $x144)))
 (let (($x118 (= $x9 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x104 (concat ?x119 (concat ?x112 ?x137)))))
 (let (($x138 (= input.dst.llvm-%m ?x58)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x53 (concat ?x94 (concat ?x61 ?x87)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x122 (and $x103 $x138)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x89)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x7)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x68 $x59)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x93 $x11)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x13 $x75)))
 (let (($x84 (not $x92)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x30 $x20)))
 (let (($x88 (not $x18)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x99 $x86)))
 (let (($x90 (and (not $x96) $x88)))
 (let (($x57 (and (and (and (and (and (and $x90 $x22) $x41) $x8) $x46) $x39) $x117)))
 (let (($x147 (and $x57 $x26)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x49 (or false (or false (and (and true (or $x5 $x21)) (or $x143 $x98))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x49)))
 (let (($x14 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x121 (and (and (and $x14 $x85) $x147) $x122)))
 (let (($x48 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (and $x48 $x121)))
 (let (($x10 (= $x64 true)))
 (let (($x125 (= $x10 true)))
 (let (($x28 (= $x125 true)))
 (let (($x128 (and $x28 $x118)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x37 $x128)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x123 (and $x15 $x149)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x43 $x123)))
 (let (($x32 (=> $x133 $x139)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x01010100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000000) #x00
      #x01))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x07fd6e10)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x264070b8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x264070bb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x07fd6e13)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x264070b8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x07fd6e10)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x264070b8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x140 (= $x115 true)))
 (let (($x120 (= $x140 true)))
 (let (($x82 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var133X)))
 (=> $x141 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var133X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var132X)))
 (= $x141 false)))
 ))
 (let (($x113 (and $x128 $x82)))
 (let (($x42 (= $x113 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x58 (concat ?x137 (concat ?x119 ?x104)))))
 (let (($x122 (= input.dst.llvm-%m ?x138)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x91 (concat ?x61 (concat ?x80 ?x19)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x121 (and $x103 $x122)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x97)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x46)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x8 $x68)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x52 $x33)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x13)))
 (let (($x92 (not $x75)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x92)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x30)))
 (let (($x18 (not $x20)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x38 $x40)))
 (let (($x90 (and (not $x96) $x18)))
 (let (($x26 (and (and (and (and (and (and $x90 $x22) $x47) $x66) $x65) $x11) $x74)))
 (let (($x147 (and $x26 $x39)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x131 (or false (or false (and (and true (or $x116 $x127)) (or $x95 $x70))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x131)))
 (let (($x29 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x125 (and (and (and $x29 $x86) $x147) $x121)))
 (let (($x12 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x28 (and $x12 $x125)))
 (let (($x134 (= $x28 true)))
 (let (($x142 (= $x134 true)))
 (let (($x78 (= $x142 true)))
 (let (($x50 (and $x78 $x42)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x17 $x50)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x54 $x107)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x34 $x126)))
 (let (($x146 (=> $x105 $x120)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x140 (= $x115 true)))
 (let (($x120 (= $x140 true)))
 (let (($x82 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var133X)))
 (=> $x141 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var133X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var132X)))
 (= $x141 false)))
 ))
 (let (($x113 (and $x128 $x82)))
 (let (($x42 (= $x113 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x58 (concat ?x137 (concat ?x119 ?x104)))))
 (let (($x122 (= input.dst.llvm-%m ?x138)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x91 (concat ?x61 (concat ?x80 ?x19)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x121 (and $x103 $x122)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x97)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x46)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x8 $x68)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x52 $x33)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x13)))
 (let (($x92 (not $x75)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x92)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x30)))
 (let (($x18 (not $x20)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x38 $x40)))
 (let (($x90 (and (not $x96) $x18)))
 (let (($x26 (and (and (and (and (and (and $x90 $x22) $x47) $x66) $x65) $x11) $x74)))
 (let (($x147 (and $x26 $x39)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x131 (or false (or false (and (and true (or $x116 $x127)) (or $x95 $x70))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x131)))
 (let (($x29 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x125 (and (and (and $x29 $x86) $x147) $x121)))
 (let (($x12 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x28 (and $x12 $x125)))
 (let (($x134 (= $x28 true)))
 (let (($x142 (= $x134 true)))
 (let (($x78 (= $x142 true)))
 (let (($x50 (and $x78 $x42)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x17 $x50)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x54 $x107)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x34 $x126)))
 (let (($x146 (=> $x105 $x120)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8cb1d010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffbfffbc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffbfffbf)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8cb1d013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffbfffbc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8cb1d010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x8cb1d010) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x9 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x35 (= $x9 true)))
 (let (($x123 (= $x35 true)))
 (let (($x44 (forall ((input.ind-%var147X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var147X)))
 (=> $x148 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var147X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var146X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var146X)))
 (= $x148 false)))
 ))
 (let (($x101 (and $x50 $x44)))
 (let (($x110 (= $x101 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x138 (concat ?x104 (concat ?x137 ?x58)))))
 (let (($x121 (= input.dst.llvm-%m ?x122)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x87 (concat ?x80 (concat ?x94 ?x24)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x125 (and $x103 $x121)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x59)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x65)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x66 $x8)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x41 $x16)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x75 (not $x13)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x20 (not $x30)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x51 $x99)))
 (let (($x90 (and (not $x96) $x20)))
 (let (($x39 (and (and (and (and (and (and $x90 $x22) $x73) $x7) $x93) $x33) $x57)))
 (let (($x147 (and $x39 $x11)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x64 (or false (or false (and (and true (or $x81 $x143)) (or $x60 $x49))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x64)))
 (let (($x36 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x142 (and (and (and $x36 $x40) $x147) $x125)))
 (let (($x37 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x78 (and $x37 $x142)))
 (let (($x145 (= $x78 true)))
 (let (($x141 (= $x145 true)))
 (let (($x118 (= $x141 true)))
 (let (($x144 (and $x118 $x110)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x63 $x144)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x6 $x130)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x14 $x133)))
 (let (($x139 (=> $x23 $x123)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x9 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x35 (= $x9 true)))
 (let (($x123 (= $x35 true)))
 (let (($x44 (forall ((input.ind-%var147X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var147X)))
 (=> $x148 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var147X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var146X (_ BitVec 32)) )(let (($x148 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var146X)))
 (= $x148 false)))
 ))
 (let (($x101 (and $x50 $x44)))
 (let (($x110 (= $x101 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x138 (concat ?x104 (concat ?x137 ?x58)))))
 (let (($x121 (= input.dst.llvm-%m ?x122)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x87 (concat ?x80 (concat ?x94 ?x24)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x125 (and $x103 $x121)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x59)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x65)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x66 $x8)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x41 $x16)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x75 (not $x13)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x20 (not $x30)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x51 $x99)))
 (let (($x90 (and (not $x96) $x20)))
 (let (($x39 (and (and (and (and (and (and $x90 $x22) $x73) $x7) $x93) $x33) $x57)))
 (let (($x147 (and $x39 $x11)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x64 (or false (or false (and (and true (or $x81 $x143)) (or $x60 $x49))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x64)))
 (let (($x36 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x142 (and (and (and $x36 $x40) $x147) $x125)))
 (let (($x37 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x78 (and $x37 $x142)))
 (let (($x145 (= $x78 true)))
 (let (($x141 (= $x145 true)))
 (let (($x118 (= $x141 true)))
 (let (($x144 (and $x118 $x110)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x63 $x144)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x6 $x130)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x14 $x133)))
 (let (($x139 (=> $x23 $x123)))
 (not $x139))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00002003) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4e32a4d0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4e32a4d3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4e32a4d0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffb) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x31 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x113 (= $x31 true)))
 (let (($x140 (= $x113 true)))
 (let (($x111 (forall ((input.ind-%var161X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var161X)))
 (=> $x114 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var161X) (_ bv0 32)))))
 ))
 (let (($x144 (forall ((input.ind-%var160X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var160X)))
 (= $x114 false)))
 ))
 (let (($x102 (and $x144 $x111)))
 (let (($x135 (= $x102 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x122 (concat ?x58 (concat ?x104 ?x138)))))
 (let (($x125 (= input.dst.llvm-%m ?x121)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x19 (concat ?x94 (concat ?x61 ?x45)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x142 (and $x103 $x125)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x68)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x93)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x7 $x66)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x47 $x117)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x21 $x38)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x11 (and (and (and (and (and (and $x90 $x22) $x67) $x46) $x52) $x16) $x26)))
 (let (($x147 (and $x11 $x33)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x28 (or false (or false (and (and true (or $x79 $x95)) (or $x85 $x131))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x28)))
 (let (($x69 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x141 (and (and (and $x69 $x99) $x147) $x142)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (and $x17 $x141)))
 (let (($x32 (= $x118 true)))
 (let (($x148 (= $x32 true)))
 (let (($x42 (= $x148 true)))
 (let (($x82 (and $x42 $x135)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x15 $x82)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x105 (and $x25 $x115)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x29 $x105)))
 (let (($x126 (=> $x128 $x140)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x31 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x113 (= $x31 true)))
 (let (($x140 (= $x113 true)))
 (let (($x111 (forall ((input.ind-%var161X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var161X)))
 (=> $x114 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var161X) (_ bv0 32)))))
 ))
 (let (($x144 (forall ((input.ind-%var160X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var160X)))
 (= $x114 false)))
 ))
 (let (($x102 (and $x144 $x111)))
 (let (($x135 (= $x102 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x122 (concat ?x58 (concat ?x104 ?x138)))))
 (let (($x125 (= input.dst.llvm-%m ?x121)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x19 (concat ?x94 (concat ?x61 ?x45)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x142 (and $x103 $x125)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x68)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x93)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x7 $x66)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x47 $x117)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x21 $x38)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x11 (and (and (and (and (and (and $x90 $x22) $x67) $x46) $x52) $x16) $x26)))
 (let (($x147 (and $x11 $x33)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x28 (or false (or false (and (and true (or $x79 $x95)) (or $x85 $x131))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x28)))
 (let (($x69 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x141 (and (and (and $x69 $x99) $x147) $x142)))
 (let (($x17 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (and $x17 $x141)))
 (let (($x32 (= $x118 true)))
 (let (($x148 (= $x32 true)))
 (let (($x42 (= $x148 true)))
 (let (($x82 (and $x42 $x135)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x15 $x82)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x105 (and $x25 $x115)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x29 $x105)))
 (let (($x126 (=> $x128 $x140)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x191 (forall ((input.ind-%var179X (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul input.ind-%var179X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x182))))
 (let ((?x159 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var179X)))
 (let (($x123 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var179X)))
 (=> $x123 (= ?x159 ?x188))))))))
 ))
 (let (($x155 (forall ((input.ind-%var178X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var178X)))
 (= $x123 (and (bvule (_ bv0 32) input.ind-%var178X) (bvult input.ind-%var178X (_ bv0 32))))))
 ))
 (let (($x192 (and $x155 $x191)))
 (let (($x101 (= true true)))
 (let (($x193 (and $x101 $x192)))
 (let (($x194 (= $x193 true)))
 (let (($x108 (forall ((input.ind-%var171X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var171X)))
 (=> $x132 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var171X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var170X)))
 (= $x132 false)))
 ))
 (let (($x10 (and $x82 $x108)))
 (let (($x44 (= $x10 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x121 (concat ?x138 (concat ?x58 ?x122)))))
 (let (($x142 (= input.dst.llvm-%m ?x125)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x24 (concat ?x61 (concat ?x80 ?x62)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x141 (and $x103 $x142)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x8)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x52)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x46 $x7)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x73 $x74)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x127 $x51)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x33 (and (and (and (and (and (and $x90 $x22) $x89) $x65) $x41) $x117) $x39)))
 (let (($x147 (and $x33 $x16)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x78 (or false (or false (and (and true (or $x98 $x60)) (or $x86 $x64))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x48 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x148 (and (and (and $x48 $x38) $x147) $x141)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x42 (and $x63 $x148)))
 (let (($x146 (= $x42 true)))
 (let (($x114 (= $x146 true)))
 (let (($x110 (= $x114 true)))
 (let (($x9 (and $x110 $x44)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x23 (and $x54 $x9)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x50 (and $x43 $x23)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x77 (and $x29 $x50)))
 (let (($x195 (=> $x77 $x194)))
 (not $x195)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x191 (forall ((input.ind-%var179X (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul input.ind-%var179X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x182))))
 (let ((?x159 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var179X)))
 (let (($x123 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var179X)))
 (=> $x123 (= ?x159 ?x188))))))))
 ))
 (let (($x155 (forall ((input.ind-%var178X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var178X)))
 (= $x123 (and (bvule (_ bv0 32) input.ind-%var178X) (bvult input.ind-%var178X (_ bv0 32))))))
 ))
 (let (($x192 (and $x155 $x191)))
 (let (($x101 (= true true)))
 (let (($x193 (and $x101 $x192)))
 (let (($x194 (= $x193 true)))
 (let (($x108 (forall ((input.ind-%var171X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var171X)))
 (=> $x132 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var171X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var170X)))
 (= $x132 false)))
 ))
 (let (($x10 (and $x82 $x108)))
 (let (($x44 (= $x10 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x121 (concat ?x138 (concat ?x58 ?x122)))))
 (let (($x142 (= input.dst.llvm-%m ?x125)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x24 (concat ?x61 (concat ?x80 ?x62)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x141 (and $x103 $x142)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x8)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x52)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x46 $x7)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x73 $x74)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x127 $x51)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x33 (and (and (and (and (and (and $x90 $x22) $x89) $x65) $x41) $x117) $x39)))
 (let (($x147 (and $x33 $x16)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x78 (or false (or false (and (and true (or $x98 $x60)) (or $x86 $x64))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x48 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x148 (and (and (and $x48 $x38) $x147) $x141)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x42 (and $x63 $x148)))
 (let (($x146 (= $x42 true)))
 (let (($x114 (= $x146 true)))
 (let (($x110 (= $x114 true)))
 (let (($x9 (and $x110 $x44)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x23 (and $x54 $x9)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x50 (and $x43 $x23)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x77 (and $x29 $x50)))
 (let (($x195 (=> $x77 $x194)))
 (not $x195)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002f94)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var179X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002fc8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002f97)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00002fcb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002f94)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002fc8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var178X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffff78)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var179X!1 () (_ BitVec 32)
    #x005fffc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x01ffff7c)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x100000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x01ffff7f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffff7b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x01ffff7c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xffffff78)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff78) #xf8
    (ite (= x!0 #xffffff7b) #x10
    (ite (= x!0 #x117ffffb) #x08
      #x00))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (forall ((input.ind-%var211X (_ BitVec 32)) )(let ((?x169 (bvadd (bvmul input.ind-%var211X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x165))))
 (let ((?x116 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var211X)))
 (let (($x181 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var211X)))
 (=> $x181 (= ?x116 ?x133))))))))
 ))
 (let (($x194 (forall ((input.ind-%var210X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var210X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var210X) (bvult input.ind-%var210X input.dst.llvm-%m)))))
 ))
 (let (($x126 (and $x194 $x105)))
 (let (($x183 (= true true)))
 (let (($x175 (and $x183 $x126)))
 (let (($x157 (= $x175 true)))
 (let (($x155 (forall ((input.ind-%var205X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var205X)))
 (=> $x5 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var205X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var204X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var204X)))
 (= $x5 false)))
 ))
 (let (($x159 (and $x9 $x155)))
 (let (($x162 (= $x159 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x125 (concat ?x122 (concat ?x138 ?x121)))))
 (let (($x141 (= input.dst.llvm-%m ?x142)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x45 (concat ?x80 (concat ?x94 ?x53)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x148 (and $x103 $x141)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x66)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x41)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x65 $x46)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x67 $x57)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x13 $x75)))
 (let (($x84 (not $x92)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x30 $x20)))
 (let (($x88 (not $x18)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x143 $x21)))
 (let (($x90 (and (not $x96) $x88)))
 (let (($x16 (and (and (and (and (and (and $x90 $x22) $x97) $x93) $x47) $x74) $x11)))
 (let (($x147 (and $x16 $x117)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x118 (or false (or false (and (and true (or $x70 $x85)) (or $x40 $x28))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x118)))
 (let (($x12 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x114 (and (and (and $x12 $x51) $x147) $x148)))
 (let (($x15 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (and $x15 $x114)))
 (let (($x139 (= $x110 true)))
 (let (($x132 (= $x139 true)))
 (let (($x135 (= $x132 true)))
 (let (($x177 (and $x135 $x162)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x178 (and $x6 $x177)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x186 (and $x34 $x178)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x187 (and $x55 $x186)))
 (let (($x176 (=> $x187 $x157)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (forall ((input.ind-%var211X (_ BitVec 32)) )(let ((?x169 (bvadd (bvmul input.ind-%var211X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x165))))
 (let ((?x116 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var211X)))
 (let (($x181 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var211X)))
 (=> $x181 (= ?x116 ?x133))))))))
 ))
 (let (($x194 (forall ((input.ind-%var210X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var210X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var210X) (bvult input.ind-%var210X input.dst.llvm-%m)))))
 ))
 (let (($x126 (and $x194 $x105)))
 (let (($x183 (= true true)))
 (let (($x175 (and $x183 $x126)))
 (let (($x157 (= $x175 true)))
 (let (($x155 (forall ((input.ind-%var205X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var205X)))
 (=> $x5 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var205X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var204X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var204X)))
 (= $x5 false)))
 ))
 (let (($x159 (and $x9 $x155)))
 (let (($x162 (= $x159 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x125 (concat ?x122 (concat ?x138 ?x121)))))
 (let (($x141 (= input.dst.llvm-%m ?x142)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x45 (concat ?x80 (concat ?x94 ?x53)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x148 (and $x103 $x141)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x66)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x41)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x65 $x46)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x67 $x57)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x13 $x75)))
 (let (($x84 (not $x92)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x30 $x20)))
 (let (($x88 (not $x18)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x143 $x21)))
 (let (($x90 (and (not $x96) $x88)))
 (let (($x16 (and (and (and (and (and (and $x90 $x22) $x97) $x93) $x47) $x74) $x11)))
 (let (($x147 (and $x16 $x117)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x118 (or false (or false (and (and true (or $x70 $x85)) (or $x40 $x28))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x118)))
 (let (($x12 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x114 (and (and (and $x12 $x51) $x147) $x148)))
 (let (($x15 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (and $x15 $x114)))
 (let (($x139 (= $x110 true)))
 (let (($x132 (= $x139 true)))
 (let (($x135 (= $x132 true)))
 (let (($x177 (and $x135 $x162)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x178 (and $x6 $x177)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x186 (and $x34 $x178)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x187 (and $x55 $x186)))
 (let (($x176 (=> $x187 $x157)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var211X!1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000004) #xfc
      #x00)))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var210X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var211X!1 () (_ BitVec 32)
    #x0c006210)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8ffffbf8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x806040b8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8ffffbfb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8ffffbf8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x40
    (ite (= x!0 #xb061c8fb) #x04
    (ite (= x!0 #xfffffffc) #xb8
    (ite (= x!0 #xffffffff) #x80
    (ite (= x!0 #xfffffffe) #x60
      #x00))))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (forall ((input.ind-%var243X (_ BitVec 32)) )(let ((?x160 (bvadd (bvmul input.ind-%var243X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x128))))
 (let ((?x81 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var243X)))
 (let (($x167 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var243X)))
 (=> $x167 (= ?x81 ?x180))))))))
 ))
 (let (($x157 (forall ((input.ind-%var242X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var242X)))
 (= $x167 (and (bvule (_ bv0 32) input.ind-%var242X) (bvult input.ind-%var242X input.dst.llvm-%n)))))
 ))
 (let (($x151 (and $x157 $x50)))
 (let (($x168 (= true true)))
 (let (($x164 (and $x168 $x151)))
 (let (($x196 (= $x164 true)))
 (let (($x194 (forall ((input.ind-%var237X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var237X)))
 (=> $x154 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var237X) (_ bv0 32)))))
 ))
 (let (($x177 (forall ((input.ind-%var236X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var236X)))
 (= $x154 false)))
 ))
 (let (($x116 (and $x177 $x194)))
 (let (($x111 (= $x116 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x142 (concat ?x121 (concat ?x122 ?x125)))))
 (let (($x148 (= input.dst.llvm-%m ?x141)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x62 (concat ?x94 (concat ?x61 ?x91)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x114 (and $x103 $x148)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x7)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x47)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x93 $x65)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x89 $x26)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x13)))
 (let (($x92 (not $x75)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x92)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x30)))
 (let (($x18 (not $x20)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x95 $x127)))
 (let (($x90 (and (not $x96) $x18)))
 (let (($x117 (and (and (and (and (and (and $x90 $x22) $x59) $x52) $x73) $x57) $x33)))
 (let (($x147 (and $x117 $x74)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x42 (or false (or false (and (and true (or $x49 $x86)) (or $x99 $x78))))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x37 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x132 (and (and (and $x37 $x21) $x147) $x114)))
 (let (($x54 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (and $x54 $x132)))
 (let (($x120 (= $x135 true)))
 (let (($x5 (= $x120 true)))
 (let (($x44 (= $x5 true)))
 (let (($x173 (and $x44 $x111)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x25 $x173)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x102 (and $x14 $x169)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x140 (and $x36 $x102)))
 (let (($x172 (=> $x140 $x196)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (forall ((input.ind-%var243X (_ BitVec 32)) )(let ((?x160 (bvadd (bvmul input.ind-%var243X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x128))))
 (let ((?x81 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var243X)))
 (let (($x167 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var243X)))
 (=> $x167 (= ?x81 ?x180))))))))
 ))
 (let (($x157 (forall ((input.ind-%var242X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var242X)))
 (= $x167 (and (bvule (_ bv0 32) input.ind-%var242X) (bvult input.ind-%var242X input.dst.llvm-%n)))))
 ))
 (let (($x151 (and $x157 $x50)))
 (let (($x168 (= true true)))
 (let (($x164 (and $x168 $x151)))
 (let (($x196 (= $x164 true)))
 (let (($x194 (forall ((input.ind-%var237X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var237X)))
 (=> $x154 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var237X) (_ bv0 32)))))
 ))
 (let (($x177 (forall ((input.ind-%var236X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var236X)))
 (= $x154 false)))
 ))
 (let (($x116 (and $x177 $x194)))
 (let (($x111 (= $x116 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x142 (concat ?x121 (concat ?x122 ?x125)))))
 (let (($x148 (= input.dst.llvm-%m ?x141)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x62 (concat ?x94 (concat ?x61 ?x91)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x114 (and $x103 $x148)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x7)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x47)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x93 $x65)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x89 $x26)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x13)))
 (let (($x92 (not $x75)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x92)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x30)))
 (let (($x18 (not $x20)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x95 $x127)))
 (let (($x90 (and (not $x96) $x18)))
 (let (($x117 (and (and (and (and (and (and $x90 $x22) $x59) $x52) $x73) $x57) $x33)))
 (let (($x147 (and $x117 $x74)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x42 (or false (or false (and (and true (or $x49 $x86)) (or $x99 $x78))))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x37 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x132 (and (and (and $x37 $x21) $x147) $x114)))
 (let (($x54 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (and $x54 $x132)))
 (let (($x120 (= $x135 true)))
 (let (($x5 (= $x120 true)))
 (let (($x44 (= $x5 true)))
 (let (($x173 (and $x44 $x111)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x25 $x173)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x102 (and $x14 $x169)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x140 (and $x36 $x102)))
 (let (($x172 (=> $x140 $x196)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var243X!1 () (_ BitVec 32)
    #x3fffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #xfc
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var242X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var243X!1 () (_ BitVec 32)
    #x3fffffc0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #xf8
    (ite (= x!0 #xfffffff0) #x01
      #x00)))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x185 (forall ((input.ind-%var271X (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul input.ind-%var271X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x179))))
 (=> false (= (_ bv0 32) ?x77))))))
 ))
 (let (($x50 (forall ((input.ind-%var270X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var270X) (bvult input.ind-%var270X (_ bv0 32)))))
 ))
 (let (($x113 (and $x50 $x185)))
 (let (($x129 (= true true)))
 (let (($x159 (and $x129 $x113)))
 (let (($x191 (= $x159 true)))
 (let (($x157 (forall ((input.ind-%var265X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var265X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var265X) (_ bv0 32)))))
 ))
 (let (($x173 (forall ((input.ind-%var264X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var264X)))
 (= $x193 false)))
 ))
 (let (($x81 (and $x173 $x157)))
 (let (($x108 (= $x81 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x148 (concat ?x141 (concat ?x125 (concat ?x121 ?x142)))))
 (let (($x114 (= input.dst.llvm-%m ?x148)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x53 (concat ?x61 (concat ?x80 ?x87)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x132 (and $x103 $x114)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x46)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x73)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x89)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (and $x52 $x93)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x97 $x39)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x75 (not $x13)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x20 (not $x30)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x60 $x143)))
 (let (($x90 (and (not $x96) $x20)))
 (let (($x74 (and (and (and (and (and (and $x90 $x22) $x68) $x41) $x67) $x26) $x16)))
 (let (($x147 (and $x74 $x57)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x110 (or false (or false (and (and true (or $x131 $x40)) (or $x38 $x118))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x110)))
 (let (($x17 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x5 (and (and (and $x17 $x127) $x147) $x132)))
 (let (($x6 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x44 (and $x6 $x5)))
 (let (($x153 (= $x44 true)))
 (let (($x154 (= $x153 true)))
 (let (($x162 (= $x154 true)))
 (let (($x124 (and $x162 $x108)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x160 (and $x43 $x124)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x10 (and $x29 $x160)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x152 (and $x55 $x10)))
 (let (($x166 (=> $x152 $x191)))
 (not $x166)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x185 (forall ((input.ind-%var271X (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul input.ind-%var271X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x179))))
 (=> false (= (_ bv0 32) ?x77))))))
 ))
 (let (($x50 (forall ((input.ind-%var270X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var270X) (bvult input.ind-%var270X (_ bv0 32)))))
 ))
 (let (($x113 (and $x50 $x185)))
 (let (($x129 (= true true)))
 (let (($x159 (and $x129 $x113)))
 (let (($x191 (= $x159 true)))
 (let (($x157 (forall ((input.ind-%var265X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var265X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var265X) (_ bv0 32)))))
 ))
 (let (($x173 (forall ((input.ind-%var264X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var264X)))
 (= $x193 false)))
 ))
 (let (($x81 (and $x173 $x157)))
 (let (($x108 (= $x81 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x148 (concat ?x141 (concat ?x125 (concat ?x121 ?x142)))))
 (let (($x114 (= input.dst.llvm-%m ?x148)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x53 (concat ?x61 (concat ?x80 ?x87)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x132 (and $x103 $x114)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x46)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x73)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x89)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (and $x52 $x93)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x97 $x39)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x75 (not $x13)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x20 (not $x30)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x60 $x143)))
 (let (($x90 (and (not $x96) $x20)))
 (let (($x74 (and (and (and (and (and (and $x90 $x22) $x68) $x41) $x67) $x26) $x16)))
 (let (($x147 (and $x74 $x57)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x110 (or false (or false (and (and true (or $x131 $x40)) (or $x38 $x118))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x110)))
 (let (($x17 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x5 (and (and (and $x17 $x127) $x147) $x132)))
 (let (($x6 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x44 (and $x6 $x5)))
 (let (($x153 (= $x44 true)))
 (let (($x154 (= $x153 true)))
 (let (($x162 (= $x154 true)))
 (let (($x124 (and $x162 $x108)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x160 (and $x43 $x124)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x10 (and $x29 $x160)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x152 (and $x55 $x10)))
 (let (($x166 (=> $x152 $x191)))
 (not $x166)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x128 (forall ((input.ind-%var283X (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul input.ind-%var283X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x112))))
 (=> false (= (_ bv0 32) ?x105))))))
 ))
 (let (($x159 (forall ((input.ind-%var282X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var282X) (bvult input.ind-%var282X input.dst.llvm-%m))))
 ))
 (let (($x102 (and $x159 $x128)))
 (let (($x101 (= true true)))
 (let (($x150 (and $x101 $x102)))
 (let (($x48 (= $x150 true)))
 (let (($x196 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var277X)))
 (=> $x175 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var277X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var276X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var276X)))
 (= $x175 false)))
 ))
 (let (($x165 (and $x124 $x196)))
 (let (($x174 (= $x165 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x148 (concat ?x142 (concat ?x125 ?x141)))))
 (let (($x132 (= input.dst.llvm-%m ?x114)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x91 (concat ?x80 (concat ?x94 ?x19)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x5 (and $x103 $x132)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x65)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x67)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x41 $x52)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x59 $x11)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x85 $x95)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x57 (and (and (and (and (and (and $x90 $x22) $x8) $x47) $x89) $x39) $x117)))
 (let (($x147 (and $x57 $x26)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x135 (or false (or false (and (and true (or $x64 $x99)) (or $x51 $x42))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x63 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x154 (and (and (and $x63 $x143) $x147) $x5)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x162 (and $x25 $x154)))
 (let (($x192 (= $x162 true)))
 (let (($x193 (= $x192 true)))
 (let (($x111 (= $x193 true)))
 (let (($x182 (and $x111 $x174)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x23 (and $x34 $x182)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x134 $x23)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x31 (and $x36 $x82)))
 (let (($x171 (=> $x31 $x48)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x128 (forall ((input.ind-%var283X (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul input.ind-%var283X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x112))))
 (=> false (= (_ bv0 32) ?x105))))))
 ))
 (let (($x159 (forall ((input.ind-%var282X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var282X) (bvult input.ind-%var282X input.dst.llvm-%m))))
 ))
 (let (($x102 (and $x159 $x128)))
 (let (($x101 (= true true)))
 (let (($x150 (and $x101 $x102)))
 (let (($x48 (= $x150 true)))
 (let (($x196 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var277X)))
 (=> $x175 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var277X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var276X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var276X)))
 (= $x175 false)))
 ))
 (let (($x165 (and $x124 $x196)))
 (let (($x174 (= $x165 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x148 (concat ?x142 (concat ?x125 ?x141)))))
 (let (($x132 (= input.dst.llvm-%m ?x114)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x91 (concat ?x80 (concat ?x94 ?x19)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x5 (and $x103 $x132)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x65)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x67)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x41 $x52)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x59 $x11)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x85 $x95)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x57 (and (and (and (and (and (and $x90 $x22) $x8) $x47) $x89) $x39) $x117)))
 (let (($x147 (and $x57 $x26)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x135 (or false (or false (and (and true (or $x64 $x99)) (or $x51 $x42))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x63 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x154 (and (and (and $x63 $x143) $x147) $x5)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x162 (and $x25 $x154)))
 (let (($x192 (= $x162 true)))
 (let (($x193 (= $x192 true)))
 (let (($x111 (= $x193 true)))
 (let (($x182 (and $x111 $x174)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x23 (and $x34 $x182)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x134 $x23)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x31 (and $x36 $x82)))
 (let (($x171 (=> $x31 $x48)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var282X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd5ff4000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd5ff9244)
  (define-fun input.ind-%var282X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd5ff9247)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd5ff4003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd5ff9244)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd5ff4000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd5ff4000) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x77 (forall ((input.ind-%var303X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var303X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x194))))
 (=> false (= (_ bv0 32) ?x163))))))
 ))
 (let (($x150 (forall ((input.ind-%var302X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var302X) (bvult input.ind-%var302X input.dst.llvm-%n))))
 ))
 (let (($x10 (and $x150 $x77)))
 (let (($x181 (= true true)))
 (let (($x188 (and $x181 $x10)))
 (let (($x177 (= $x188 true)))
 (let (($x133 (forall ((input.ind-%var297X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var297X)))
 (=> $x50 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var297X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var296X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var296X)))
 (= $x50 false)))
 ))
 (let (($x100 (and $x182 $x133)))
 (let (($x178 (= $x100 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x114 (concat ?x141 (concat ?x142 ?x148)))))
 (let (($x5 (= input.dst.llvm-%m ?x132)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x87 (concat ?x94 (concat ?x61 ?x24)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x154 (and $x103 $x5)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x93)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x89)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x47 $x41)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x68 $x33)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x86 $x60)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x26 (and (and (and (and (and (and $x90 $x22) $x66) $x73) $x97) $x11) $x74)))
 (let (($x147 (and $x26 $x39)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x44 (or false (or false (and (and true (or $x28 $x38)) (or $x21 $x110))))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x15 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x193 (and (and (and $x15 $x95) $x147) $x154)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x111 (and $x43 $x193)))
 (let (($x126 (= $x111 true)))
 (let (($x175 (= $x126 true)))
 (let (($x108 (= $x175 true)))
 (let (($x187 (and $x108 $x178)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (and $x14 $x187)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x145 $x116)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x32 (and $x55 $x12)))
 (let (($x183 (=> $x32 $x177)))
 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x77 (forall ((input.ind-%var303X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var303X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x194))))
 (=> false (= (_ bv0 32) ?x163))))))
 ))
 (let (($x150 (forall ((input.ind-%var302X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var302X) (bvult input.ind-%var302X input.dst.llvm-%n))))
 ))
 (let (($x10 (and $x150 $x77)))
 (let (($x181 (= true true)))
 (let (($x188 (and $x181 $x10)))
 (let (($x177 (= $x188 true)))
 (let (($x133 (forall ((input.ind-%var297X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var297X)))
 (=> $x50 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var297X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var296X (_ BitVec 32)) )(let (($x50 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var296X)))
 (= $x50 false)))
 ))
 (let (($x100 (and $x182 $x133)))
 (let (($x178 (= $x100 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x114 (concat ?x141 (concat ?x142 ?x148)))))
 (let (($x5 (= input.dst.llvm-%m ?x132)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x87 (concat ?x94 (concat ?x61 ?x24)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x154 (and $x103 $x5)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x93)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x89)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x47 $x41)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x68 $x33)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x86 $x60)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x26 (and (and (and (and (and (and $x90 $x22) $x66) $x73) $x97) $x11) $x74)))
 (let (($x147 (and $x26 $x39)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x44 (or false (or false (and (and true (or $x28 $x38)) (or $x21 $x110))))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x15 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x193 (and (and (and $x15 $x95) $x147) $x154)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x111 (and $x43 $x193)))
 (let (($x126 (= $x111 true)))
 (let (($x175 (= $x126 true)))
 (let (($x108 (= $x175 true)))
 (let (($x187 (and $x108 $x178)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (and $x14 $x187)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x145 $x116)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x32 (and $x55 $x12)))
 (let (($x183 (=> $x32 $x177)))
 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var302X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var302X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x22b8c5c0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffb8c5bc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffb8c5bf)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x22b8c5c3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffb8c5bc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x22b8c5c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffb8c5bc) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (= false true)))
 (let (($x146 (= $x140 true)))
 (let (($x176 (forall ((input.ind-%var317X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var317X)))
 (=> $x159 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var317X) (_ bv0 32)))))
 ))
 (let (($x187 (forall ((input.ind-%var316X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var316X)))
 (= $x159 false)))
 ))
 (let (($x107 (and $x187 $x176)))
 (let (($x172 (= $x107 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x132 (concat ?x148 (concat ?x141 ?x114)))))
 (let (($x154 (= input.dst.llvm-%m ?x5)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x19 (concat ?x61 (concat ?x80 ?x45)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x193 (and $x103 $x154)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x52)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x97)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x68)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x73 $x47)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x8 $x16)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x13 $x75)))
 (let (($x84 (not $x92)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x30 $x20)))
 (let (($x88 (not $x18)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x40 $x85)))
 (let (($x90 (and (not $x96) $x88)))
 (let (($x39 (and (and (and (and (and (and $x90 $x22) $x7) $x67) $x59) $x33) $x57)))
 (let (($x147 (and $x39 $x11)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x162 (or false (or false (and (and true (or $x78 $x51)) (or $x127 $x135))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x54 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x175 (and (and (and $x54 $x60) $x147) $x193)))
 (let (($x34 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x108 (and $x34 $x175)))
 (let (($x189 (= $x108 true)))
 (let (($x50 (= $x189 true)))
 (let (($x174 (= $x50 true)))
 (let (($x156 (and $x174 $x172)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x29 $x156)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x164 $x81)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x167 (and $x36 $x119)))
 (let (($x169 (=> $x167 $x146)))
 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (= false true)))
 (let (($x146 (= $x140 true)))
 (let (($x176 (forall ((input.ind-%var317X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var317X)))
 (=> $x159 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var317X) (_ bv0 32)))))
 ))
 (let (($x187 (forall ((input.ind-%var316X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var316X)))
 (= $x159 false)))
 ))
 (let (($x107 (and $x187 $x176)))
 (let (($x172 (= $x107 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x132 (concat ?x148 (concat ?x141 ?x114)))))
 (let (($x154 (= input.dst.llvm-%m ?x5)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x19 (concat ?x61 (concat ?x80 ?x45)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x193 (and $x103 $x154)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x52)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x97)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x68)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x73 $x47)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x8 $x16)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x13 $x75)))
 (let (($x84 (not $x92)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x30 $x20)))
 (let (($x88 (not $x18)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x40 $x85)))
 (let (($x90 (and (not $x96) $x88)))
 (let (($x39 (and (and (and (and (and (and $x90 $x22) $x7) $x67) $x59) $x33) $x57)))
 (let (($x147 (and $x39 $x11)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x162 (or false (or false (and (and true (or $x78 $x51)) (or $x127 $x135))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x54 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x175 (and (and (and $x54 $x60) $x147) $x193)))
 (let (($x34 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x108 (and $x34 $x175)))
 (let (($x189 (= $x108 true)))
 (let (($x50 (= $x189 true)))
 (let (($x174 (= $x50 true)))
 (let (($x156 (and $x174 $x172)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x29 $x156)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x164 $x81)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x167 (and $x36 $x119)))
 (let (($x169 (=> $x167 $x146)))
 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x3bbc5ef0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf56312d4)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf56312d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x3bbc5ef3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf56312d4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x3bbc5ef0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x41)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x59)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x67 $x73)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x66 $x117)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x13)))
 (let (($x92 (not $x75)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x92)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x30)))
 (let (($x18 (not $x20)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x99 $x86)))
 (let (($x90 (and (not $x96) $x18)))
 (let (($x11 (and (and (and (and (and (and $x90 $x22) $x46) $x89) $x68) $x16) $x26)))
 (let (($x147 (and $x11 $x33)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x111 (or false (or false (and (and true (or $x118 $x21)) (or $x143 $x44))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x111)))
 (let (($x144 (and $x85 $x147)))
 (let (($x12 (= $x144 true)))
 (let (($x128 (= $x12 true)))
 (let (($x153 (forall ((input.ind-%var331X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var331X)))
 (=> $x150 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var331X) (_ bv0 32)))))
 ))
 (let (($x156 (forall ((input.ind-%var330X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var330X)))
 (= $x150 false)))
 ))
 (let (($x133 (and $x156 $x153)))
 (let (($x158 (= $x133 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x154 (concat ?x5 (concat ?x114 (concat ?x148 ?x132)))))
 (let (($x193 (= input.dst.llvm-%m ?x154)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x24 (concat ?x80 (concat ?x94 ?x62)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x175 (and $x103 $x193)))
 (let (($x189 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x85) $x147)))
 (let (($x50 (and $x189 $x175)))
 (let (($x14 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x174 (and $x14 $x50)))
 (let (($x113 (= $x174 true)))
 (let (($x159 (= $x113 true)))
 (let (($x178 (= $x159 true)))
 (let (($x32 (and $x178 $x158)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x134 $x32)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x101 (and $x166 $x182)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x55 $x101)))
 (let (($x48 (=> $x100 $x128)))
 (not $x48))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x41)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x59)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x67 $x73)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x66 $x117)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x13)))
 (let (($x92 (not $x75)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x92)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x30)))
 (let (($x18 (not $x20)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x99 $x86)))
 (let (($x90 (and (not $x96) $x18)))
 (let (($x11 (and (and (and (and (and (and $x90 $x22) $x46) $x89) $x68) $x16) $x26)))
 (let (($x147 (and $x11 $x33)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x111 (or false (or false (and (and true (or $x118 $x21)) (or $x143 $x44))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x111)))
 (let (($x144 (and $x85 $x147)))
 (let (($x12 (= $x144 true)))
 (let (($x128 (= $x12 true)))
 (let (($x153 (forall ((input.ind-%var331X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var331X)))
 (=> $x150 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var331X) (_ bv0 32)))))
 ))
 (let (($x156 (forall ((input.ind-%var330X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var330X)))
 (= $x150 false)))
 ))
 (let (($x133 (and $x156 $x153)))
 (let (($x158 (= $x133 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x154 (concat ?x5 (concat ?x114 (concat ?x148 ?x132)))))
 (let (($x193 (= input.dst.llvm-%m ?x154)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x24 (concat ?x80 (concat ?x94 ?x62)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x175 (and $x103 $x193)))
 (let (($x189 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x85) $x147)))
 (let (($x50 (and $x189 $x175)))
 (let (($x14 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x174 (and $x14 $x50)))
 (let (($x113 (= $x174 true)))
 (let (($x159 (= $x113 true)))
 (let (($x178 (= $x159 true)))
 (let (($x32 (and $x178 $x158)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x134 $x32)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x101 (and $x166 $x182)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x55 $x101)))
 (let (($x48 (=> $x100 $x128)))
 (not $x48))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x169 (= $x107 true)))
 (let (($x138 (forall ((input.ind-%var337X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var337X)))
 (=> $x58 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var337X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var336X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var336X)))
 (= $x58 false)))
 ))
 (let (($x192 (and $x32 $x138)))
 (let (($x176 (= $x192 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x193 (concat ?x154 (concat ?x132 (concat ?x114 ?x5)))))
 (let (($x175 (= input.dst.llvm-%m ?x193)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x45 (concat ?x94 (concat ?x61 ?x53)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x50 (and $x103 $x175)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x47)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x68)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x89 $x67)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x7 $x74)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x75 (not $x13)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x20 (not $x30)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x38 $x40)))
 (let (($x90 (and (not $x96) $x20)))
 (let (($x33 (and (and (and (and (and (and $x90 $x22) $x65) $x97) $x8) $x117) $x39)))
 (let (($x147 (and $x33 $x16)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x108 (or false (or false (and (and true (or $x42 $x127)) (or $x95 $x162))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x25 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x159 (and (and (and $x25 $x86) $x147) $x50)))
 (let (($x29 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x178 (and $x29 $x159)))
 (let (($x102 (= $x178 true)))
 (let (($x150 (= $x102 true)))
 (let (($x172 (= $x150 true)))
 (let (($x146 (and $x172 $x176)))
 (let (($x145 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x145 $x146)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x171 $x167)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x36 $x187)))
 (let (($x119 (=> $x181 $x169)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x169 (= $x107 true)))
 (let (($x138 (forall ((input.ind-%var337X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var337X)))
 (=> $x58 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var337X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var336X (_ BitVec 32)) )(let (($x58 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var336X)))
 (= $x58 false)))
 ))
 (let (($x192 (and $x32 $x138)))
 (let (($x176 (= $x192 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x193 (concat ?x154 (concat ?x132 (concat ?x114 ?x5)))))
 (let (($x175 (= input.dst.llvm-%m ?x193)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x45 (concat ?x94 (concat ?x61 ?x53)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x50 (and $x103 $x175)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x47)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x68)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x89 $x67)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x7 $x74)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x75 (not $x13)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x20 (not $x30)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x38 $x40)))
 (let (($x90 (and (not $x96) $x20)))
 (let (($x33 (and (and (and (and (and (and $x90 $x22) $x65) $x97) $x8) $x117) $x39)))
 (let (($x147 (and $x33 $x16)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x108 (or false (or false (and (and true (or $x42 $x127)) (or $x95 $x162))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x25 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x159 (and (and (and $x25 $x86) $x147) $x50)))
 (let (($x29 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x178 (and $x29 $x159)))
 (let (($x102 (= $x178 true)))
 (let (($x150 (= $x102 true)))
 (let (($x172 (= $x150 true)))
 (let (($x146 (and $x172 $x176)))
 (let (($x145 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x145 $x146)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x171 $x167)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x36 $x187)))
 (let (($x119 (=> $x181 $x169)))
 (not $x119)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x02020200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00002003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02020202)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x02020202)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00002000) #x00
      #x02))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x68e71c7c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfe7ffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfe7ffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x68e71c7f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfe7ffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x68e71c7c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfe7ffff9) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x101)))
 (let (($x81 (= ?x48 input.dst.llvm-%n)))
 (let (($x116 (= $x81 true)))
 (let (($x126 (forall ((input.ind-%var351X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var351X)))
 (=> $x64 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var351X) (_ bv0 32)))))
 ))
 (let (($x146 (forall ((input.ind-%var350X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var350X)))
 (= $x64 false)))
 ))
 (let (($x153 (and $x146 $x126)))
 (let (($x12 (= $x153 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x193 (concat ?x5 (concat ?x132 ?x154)))))
 (let (($x50 (= input.dst.llvm-%m ?x175)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x62 (concat ?x61 (concat ?x80 ?x91)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x159 (and $x103 $x50)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x73)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x8)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x97 $x89)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x46 $x57)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x51 $x99)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x16 (and (and (and (and (and (and $x90 $x22) $x93) $x59) $x66) $x74) $x11)))
 (let (($x147 (and $x16 $x117)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x174 (or false (or false (and (and true (or $x110 $x143)) (or $x60 $x111))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x174)))
 (let (($x43 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x150 (and (and (and $x43 $x40) $x147) $x159)))
 (let (($x134 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x172 (and $x134 $x150)))
 (let (($x131 (= $x172 true)))
 (let (($x58 (= $x131 true)))
 (let (($x158 (= $x58 true)))
 (let (($x100 (and $x158 $x12)))
 (let (($x164 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x164 $x100)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x140 (and $x15 $x156)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x55 $x140)))
 (let (($x163 (=> $x133 $x116)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x101)))
 (let (($x81 (= ?x48 input.dst.llvm-%n)))
 (let (($x116 (= $x81 true)))
 (let (($x126 (forall ((input.ind-%var351X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var351X)))
 (=> $x64 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var351X) (_ bv0 32)))))
 ))
 (let (($x146 (forall ((input.ind-%var350X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var350X)))
 (= $x64 false)))
 ))
 (let (($x153 (and $x146 $x126)))
 (let (($x12 (= $x153 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x193 (concat ?x5 (concat ?x132 ?x154)))))
 (let (($x50 (= input.dst.llvm-%m ?x175)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x62 (concat ?x61 (concat ?x80 ?x91)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x159 (and $x103 $x50)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x73)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x8)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x97 $x89)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x46 $x57)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x51 $x99)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x16 (and (and (and (and (and (and $x90 $x22) $x93) $x59) $x66) $x74) $x11)))
 (let (($x147 (and $x16 $x117)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x174 (or false (or false (and (and true (or $x110 $x143)) (or $x60 $x111))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x174)))
 (let (($x43 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x150 (and (and (and $x43 $x40) $x147) $x159)))
 (let (($x134 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x172 (and $x134 $x150)))
 (let (($x131 (= $x172 true)))
 (let (($x58 (= $x131 true)))
 (let (($x158 (= $x58 true)))
 (let (($x100 (and $x158 $x12)))
 (let (($x164 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x164 $x100)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x140 (and $x15 $x156)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x55 $x140)))
 (let (($x163 (=> $x133 $x116)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x32 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x192 (bvmul ?x32 (_ bv256 16))))
 (let (($x187 (= ?x192 ?x119)))
 (let (($x194 (= $x187 true)))
 (let (($x179 (forall ((input.ind-%var357X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var357X)))
 (=> $x122 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var357X) (_ bv0 32)))))
 ))
 (let (($x100 (forall ((input.ind-%var356X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var356X)))
 (= $x122 false)))
 ))
 (let (($x78 (and $x100 $x179)))
 (let (($x121 (= $x78 true)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x175 (concat ?x154 (concat ?x5 ?x193)))))
 (let (($x159 (= input.dst.llvm-%m ?x50)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x53 (concat ?x80 (concat ?x94 ?x87)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x150 (and $x103 $x159)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x67)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x66)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x46)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x59 $x97)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x65 $x26)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x21 $x38)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x117 (and (and (and (and (and (and $x90 $x22) $x52) $x68) $x7) $x57) $x33)))
 (let (($x147 (and $x117 $x74)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x178 (or false (or false (and (and true (or $x135 $x95)) (or $x85 $x108))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x178)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x58 (and (and (and $x34 $x99) $x147) $x150)))
 (let (($x145 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x158 (and $x145 $x58)))
 (let (($x35 (= $x158 true)))
 (let (($x64 (= $x35 true)))
 (let (($x176 (= $x64 true)))
 (let (($x189 (and $x176 $x121)))
 (let (($x166 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (and $x166 $x189)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x54 $x138)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x36 $x169)))
 (let (($x182 (=> $x181 $x194)))
 (not $x182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 ((_ extract 15 0) input.dst.llvm-%m)))
 (let ((?x32 ((_ extract 15 0) input.spec-%var-n-1)))
 (let ((?x192 (bvmul ?x32 (_ bv256 16))))
 (let (($x187 (= ?x192 ?x119)))
 (let (($x194 (= $x187 true)))
 (let (($x179 (forall ((input.ind-%var357X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var357X)))
 (=> $x122 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var357X) (_ bv0 32)))))
 ))
 (let (($x100 (forall ((input.ind-%var356X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var356X)))
 (= $x122 false)))
 ))
 (let (($x78 (and $x100 $x179)))
 (let (($x121 (= $x78 true)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x175 (concat ?x154 (concat ?x5 ?x193)))))
 (let (($x159 (= input.dst.llvm-%m ?x50)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x53 (concat ?x80 (concat ?x94 ?x87)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x150 (and $x103 $x159)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x67)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x66)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x46)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x59 $x97)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x65 $x26)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x21 $x38)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x117 (and (and (and (and (and (and $x90 $x22) $x52) $x68) $x7) $x57) $x33)))
 (let (($x147 (and $x117 $x74)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x178 (or false (or false (and (and true (or $x135 $x95)) (or $x85 $x108))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x178)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x58 (and (and (and $x34 $x99) $x147) $x150)))
 (let (($x145 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x158 (and $x145 $x58)))
 (let (($x35 (= $x158 true)))
 (let (($x64 (= $x35 true)))
 (let (($x176 (= $x64 true)))
 (let (($x189 (and $x176 $x121)))
 (let (($x166 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (and $x166 $x189)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x54 $x138)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x36 $x169)))
 (let (($x182 (=> $x181 $x194)))
 (not $x182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x10
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x146 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x107 (= (_ bv0 2) ?x146)))
 (let (($x153 (= $x107 true)))
 (let (($x182 (forall ((input.ind-%var371X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var371X)))
 (=> $x163 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var371X) (_ bv0 32)))))
 ))
 (let (($x189 (forall ((input.ind-%var370X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var370X)))
 (= $x163 false)))
 ))
 (let (($x184 (and $x189 $x182)))
 (let (($x118 (= $x184 true)))
 (let ((?x175 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x50 (concat ?x193 (concat ?x154 ?x175)))))
 (let (($x150 (= input.dst.llvm-%m ?x159)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x91 (concat ?x94 (concat ?x61 ?x19)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x58 (and $x103 $x150)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x89)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x7)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (and $x68 $x59)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x93 $x39)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x13 $x75)))
 (let (($x84 (not $x92)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x30 $x20)))
 (let (($x88 (not $x18)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x127 $x51)))
 (let (($x90 (and (not $x96) $x88)))
 (let (($x74 (and (and (and (and (and (and $x90 $x22) $x41) $x8) $x46) $x26) $x16)))
 (let (($x147 (and $x74 $x57)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x172 (or false (or false (and (and true (or $x44 $x60)) (or $x86 $x174))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x172)))
 (let (($x14 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x64 (and (and (and $x14 $x38) $x147) $x58)))
 (let (($x164 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x176 (and $x164 $x64)))
 (let (($x28 (= $x176 true)))
 (let (($x122 (= $x28 true)))
 (let (($x12 (= $x122 true)))
 (let (($x125 (and $x12 $x118)))
 (let (($x171 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (and $x171 $x125)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x6 $x113)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x55 $x126)))
 (let (($x48 (=> $x101 $x153)))
 (not $x48))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x146 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x107 (= (_ bv0 2) ?x146)))
 (let (($x153 (= $x107 true)))
 (let (($x182 (forall ((input.ind-%var371X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var371X)))
 (=> $x163 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var371X) (_ bv0 32)))))
 ))
 (let (($x189 (forall ((input.ind-%var370X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var370X)))
 (= $x163 false)))
 ))
 (let (($x184 (and $x189 $x182)))
 (let (($x118 (= $x184 true)))
 (let ((?x175 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x50 (concat ?x193 (concat ?x154 ?x175)))))
 (let (($x150 (= input.dst.llvm-%m ?x159)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x91 (concat ?x94 (concat ?x61 ?x19)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x58 (and $x103 $x150)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x89)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x7)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (and $x68 $x59)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x93 $x39)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x13 $x75)))
 (let (($x84 (not $x92)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x30 $x20)))
 (let (($x88 (not $x18)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x127 $x51)))
 (let (($x90 (and (not $x96) $x88)))
 (let (($x74 (and (and (and (and (and (and $x90 $x22) $x41) $x8) $x46) $x26) $x16)))
 (let (($x147 (and $x74 $x57)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x172 (or false (or false (and (and true (or $x44 $x60)) (or $x86 $x174))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x172)))
 (let (($x14 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x64 (and (and (and $x14 $x38) $x147) $x58)))
 (let (($x164 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x176 (and $x164 $x64)))
 (let (($x28 (= $x176 true)))
 (let (($x122 (= $x28 true)))
 (let (($x12 (= $x122 true)))
 (let (($x125 (and $x12 $x118)))
 (let (($x171 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (and $x171 $x125)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x6 $x113)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x55 $x126)))
 (let (($x48 (=> $x101 $x153)))
 (not $x48))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x78 ((_ extract 0 0) input.spec-%var-n-1)))
 (let (($x192 (= (_ bv0 1) ?x78)))
 (let (($x169 (= $x192 true)))
 (let (($x42 (forall ((input.ind-%var377X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var377X)))
 (=> $x194 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var377X) (_ bv0 32)))))
 ))
 (let (($x125 (forall ((input.ind-%var376X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var376X)))
 (= $x194 false)))
 ))
 (let (($x142 (and $x125 $x42)))
 (let (($x102 (= $x142 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x159 (concat ?x175 (concat ?x193 ?x50)))))
 (let (($x58 (= input.dst.llvm-%m ?x150)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x87 (concat ?x61 (concat ?x80 ?x24)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x64 (and $x103 $x58)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x97)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x46)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x8 $x68)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x52 $x11)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x13)))
 (let (($x92 (not $x75)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x92)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x30)))
 (let (($x18 (not $x20)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x143 $x21)))
 (let (($x90 (and (not $x96) $x18)))
 (let (($x57 (and (and (and (and (and (and $x90 $x22) $x47) $x66) $x65) $x39) $x117)))
 (let (($x147 (and $x57 $x26)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x158 (or false (or false (and (and true (or $x162 $x85)) (or $x40 $x178))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x158)))
 (let (($x29 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x122 (and (and (and $x29 $x51) $x147) $x64)))
 (let (($x166 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (and $x166 $x122)))
 (let (($x116 (= $x12 true)))
 (let (($x163 (= $x116 true)))
 (let (($x121 (= $x163 true)))
 (let (($x179 (and $x121 $x102)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x15 $x179)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x181 (and $x25 $x144)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x36 $x181)))
 (let (($x119 (=> $x100 $x169)))
 (not $x119))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x78 ((_ extract 0 0) input.spec-%var-n-1)))
 (let (($x192 (= (_ bv0 1) ?x78)))
 (let (($x169 (= $x192 true)))
 (let (($x42 (forall ((input.ind-%var377X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var377X)))
 (=> $x194 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var377X) (_ bv0 32)))))
 ))
 (let (($x125 (forall ((input.ind-%var376X (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var376X)))
 (= $x194 false)))
 ))
 (let (($x142 (and $x125 $x42)))
 (let (($x102 (= $x142 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x159 (concat ?x175 (concat ?x193 ?x50)))))
 (let (($x58 (= input.dst.llvm-%m ?x150)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x87 (concat ?x61 (concat ?x80 ?x24)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x64 (and $x103 $x58)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x97)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x46)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x8 $x68)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x52 $x11)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x13)))
 (let (($x92 (not $x75)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x92)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x30)))
 (let (($x18 (not $x20)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x143 $x21)))
 (let (($x90 (and (not $x96) $x18)))
 (let (($x57 (and (and (and (and (and (and $x90 $x22) $x47) $x66) $x65) $x39) $x117)))
 (let (($x147 (and $x57 $x26)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x158 (or false (or false (and (and true (or $x162 $x85)) (or $x40 $x178))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x158)))
 (let (($x29 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x122 (and (and (and $x29 $x51) $x147) $x64)))
 (let (($x166 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (and $x166 $x122)))
 (let (($x116 (= $x12 true)))
 (let (($x163 (= $x116 true)))
 (let (($x121 (= $x163 true)))
 (let (($x179 (and $x121 $x102)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x15 $x179)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x181 (and $x25 $x144)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x36 $x181)))
 (let (($x119 (=> $x100 $x169)))
 (not $x119))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x01010100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000000) #x00
      #x01))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x07fd6e10)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x264070b8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x264070bb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x07fd6e13)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x264070b8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x07fd6e10)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x264070b8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x184 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x107 (= $x184 true)))
 (let (($x126 (= $x107 true)))
 (let (($x110 (forall ((input.ind-%var391X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var391X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var391X) (_ bv0 32)))))
 ))
 (let (($x179 (forall ((input.ind-%var390X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var390X)))
 (= $x140 false)))
 ))
 (let (($x141 (and $x179 $x110)))
 (let (($x131 (= $x141 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x150 (concat ?x50 (concat ?x175 ?x159)))))
 (let (($x64 (= input.dst.llvm-%m ?x58)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x19 (concat ?x80 (concat ?x94 ?x45)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x122 (and $x103 $x64)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x59)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x65)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x66 $x8)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x41 $x33)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x75 (not $x13)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x20 (not $x30)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x95 $x127)))
 (let (($x90 (and (not $x96) $x20)))
 (let (($x26 (and (and (and (and (and (and $x90 $x22) $x73) $x7) $x93) $x11) $x74)))
 (let (($x147 (and $x26 $x39)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x176 (or false (or false (and (and true (or $x111 $x86)) (or $x99 $x172))))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x176)))
 (let (($x134 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x163 (and (and (and $x134 $x21) $x147) $x122)))
 (let (($x171 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x121 (and $x171 $x163)))
 (let (($x187 (= $x121 true)))
 (let (($x194 (= $x187 true)))
 (let (($x118 (= $x194 true)))
 (let (($x182 (and $x118 $x131)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and $x54 $x182)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x101 (and $x43 $x146)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x55 $x101)))
 (let (($x153 (=> $x189 $x126)))
 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x184 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x107 (= $x184 true)))
 (let (($x126 (= $x107 true)))
 (let (($x110 (forall ((input.ind-%var391X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var391X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var391X) (_ bv0 32)))))
 ))
 (let (($x179 (forall ((input.ind-%var390X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var390X)))
 (= $x140 false)))
 ))
 (let (($x141 (and $x179 $x110)))
 (let (($x131 (= $x141 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x150 (concat ?x50 (concat ?x175 ?x159)))))
 (let (($x64 (= input.dst.llvm-%m ?x58)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x19 (concat ?x80 (concat ?x94 ?x45)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x122 (and $x103 $x64)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x59)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x65)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x66 $x8)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x41 $x33)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x75 (not $x13)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x20 (not $x30)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x95 $x127)))
 (let (($x90 (and (not $x96) $x20)))
 (let (($x26 (and (and (and (and (and (and $x90 $x22) $x73) $x7) $x93) $x11) $x74)))
 (let (($x147 (and $x26 $x39)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x176 (or false (or false (and (and true (or $x111 $x86)) (or $x99 $x172))))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x176)))
 (let (($x134 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x163 (and (and (and $x134 $x21) $x147) $x122)))
 (let (($x171 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x121 (and $x171 $x163)))
 (let (($x187 (= $x121 true)))
 (let (($x194 (= $x187 true)))
 (let (($x118 (= $x194 true)))
 (let (($x182 (and $x118 $x131)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and $x54 $x182)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x101 (and $x43 $x146)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x55 $x101)))
 (let (($x153 (=> $x189 $x126)))
 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8cb1d010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffbfffbc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffbfffbf)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8cb1d013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffbfffbc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8cb1d010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x8cb1d010) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x142 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x192 (= $x142 true)))
 (let (($x181 (= $x192 true)))
 (let (($x135 (forall ((input.ind-%var405X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var405X)))
 (=> $x156 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var405X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var404X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var404X)))
 (= $x156 false)))
 ))
 (let (($x148 (and $x182 $x135)))
 (let (($x35 (= $x148 true)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x58 (concat ?x159 (concat ?x50 ?x150)))))
 (let (($x122 (= input.dst.llvm-%m ?x64)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x24 (concat ?x94 (concat ?x61 ?x62)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x163 (and $x103 $x122)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x68)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x93)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x7 $x66)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x47 $x16)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x60 $x143)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x39 (and (and (and (and (and (and $x90 $x22) $x67) $x46) $x52) $x33) $x57)))
 (let (($x147 (and $x39 $x11)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x12 (or false (or false (and (and true (or $x108 $x40)) (or $x38 $x158))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x12)))
 (let (($x145 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x194 (and (and (and $x145 $x127) $x147) $x163)))
 (let (($x15 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (and $x15 $x194)))
 (let (($x48 (= $x118 true)))
 (let (($x140 (= $x48 true)))
 (let (($x102 (= $x140 true)))
 (let (($x42 (and $x102 $x35)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x6 $x42)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x34 $x78)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x125 (and $x36 $x100)))
 (let (($x169 (=> $x125 $x181)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x142 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x192 (= $x142 true)))
 (let (($x181 (= $x192 true)))
 (let (($x135 (forall ((input.ind-%var405X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var405X)))
 (=> $x156 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var405X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var404X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var404X)))
 (= $x156 false)))
 ))
 (let (($x148 (and $x182 $x135)))
 (let (($x35 (= $x148 true)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x58 (concat ?x159 (concat ?x50 ?x150)))))
 (let (($x122 (= input.dst.llvm-%m ?x64)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x24 (concat ?x94 (concat ?x61 ?x62)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x163 (and $x103 $x122)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x68)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x93)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x7 $x66)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x47 $x16)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x60 $x143)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x39 (and (and (and (and (and (and $x90 $x22) $x67) $x46) $x52) $x33) $x57)))
 (let (($x147 (and $x39 $x11)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x12 (or false (or false (and (and true (or $x108 $x40)) (or $x38 $x158))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x12)))
 (let (($x145 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x194 (and (and (and $x145 $x127) $x147) $x163)))
 (let (($x15 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (and $x15 $x194)))
 (let (($x48 (= $x118 true)))
 (let (($x140 (= $x48 true)))
 (let (($x102 (= $x140 true)))
 (let (($x42 (and $x102 $x35)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x6 $x42)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x34 $x78)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x125 (and $x36 $x100)))
 (let (($x169 (=> $x125 $x181)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00002003) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4e32a4d0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4e32a4d3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4e32a4d0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffb) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x128 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x141 (= $x128 true)))
 (let (($x107 (= $x141 true)))
 (let (($x44 (forall ((input.ind-%var419X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var419X)))
 (=> $x138 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var419X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var418X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var418X)))
 (= $x138 false)))
 ))
 (let (($x114 (and $x42 $x44)))
 (let (($x28 (= $x114 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x64 (concat ?x150 (concat ?x159 ?x58)))))
 (let (($x163 (= input.dst.llvm-%m ?x122)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x45 (concat ?x61 (concat ?x80 ?x53)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x194 (and $x103 $x163)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x8)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x52)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x46 $x7)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x73 $x117)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x85 $x95)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x11 (and (and (and (and (and (and $x90 $x22) $x89) $x65) $x41) $x16) $x26)))
 (let (($x147 (and $x11 $x33)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x121 (or false (or false (and (and true (or $x174 $x99)) (or $x51 $x176))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x121)))
 (let (($x164 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x140 (and (and (and $x164 $x143) $x147) $x194)))
 (let (($x54 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x102 (and $x54 $x140)))
 (let (($x119 (= $x102 true)))
 (let (($x156 (= $x119 true)))
 (let (($x131 (= $x156 true)))
 (let (($x110 (and $x131 $x28)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and $x25 $x110)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x14 $x184)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x55 $x189)))
 (let (($x101 (=> $x179 $x107)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x128 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x141 (= $x128 true)))
 (let (($x107 (= $x141 true)))
 (let (($x44 (forall ((input.ind-%var419X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var419X)))
 (=> $x138 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var419X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var418X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var418X)))
 (= $x138 false)))
 ))
 (let (($x114 (and $x42 $x44)))
 (let (($x28 (= $x114 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x64 (concat ?x150 (concat ?x159 ?x58)))))
 (let (($x163 (= input.dst.llvm-%m ?x122)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x45 (concat ?x61 (concat ?x80 ?x53)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x194 (and $x103 $x163)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x8)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x52)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x46 $x7)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x73 $x117)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x85 $x95)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x11 (and (and (and (and (and (and $x90 $x22) $x89) $x65) $x41) $x16) $x26)))
 (let (($x147 (and $x11 $x33)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x121 (or false (or false (and (and true (or $x174 $x99)) (or $x51 $x176))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x121)))
 (let (($x164 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x140 (and (and (and $x164 $x143) $x147) $x194)))
 (let (($x54 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x102 (and $x54 $x140)))
 (let (($x119 (= $x102 true)))
 (let (($x156 (= $x119 true)))
 (let (($x131 (= $x156 true)))
 (let (($x110 (and $x131 $x28)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and $x25 $x110)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x14 $x184)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x55 $x189)))
 (let (($x101 (=> $x179 $x107)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x186 (forall ((input.ind-%var431X (_ BitVec 32)) )(let ((?x123 (bvadd (bvmul input.ind-%var431X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x112))))
 (let ((?x120 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var431X)))
 (let (($x181 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var431X)))
 (=> $x181 (= ?x120 ?x168))))))))
 ))
 (let (($x151 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var430X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var430X) (bvult input.ind-%var430X input.dst.llvm-%m)))))
 ))
 (let (($x190 (and $x151 $x186)))
 (let (($x148 (= true true)))
 (let (($x115 (and $x148 $x190)))
 (let (($x130 (= $x115 true)))
 (let (($x132 (forall ((input.ind-%var425X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var425X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var425X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var424X)))
 (= $x113 false)))
 ))
 (let (($x116 (and $x110 $x132)))
 (let (($x135 (= $x116 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x122 (concat ?x58 (concat ?x150 ?x64)))))
 (let (($x194 (= input.dst.llvm-%m ?x163)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x62 (concat ?x80 (concat ?x94 ?x91)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x140 (and $x103 $x194)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x66)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x41)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x65 $x46)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x67 $x74)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x13 $x75)))
 (let (($x84 (not $x92)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x30 $x20)))
 (let (($x88 (not $x18)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x86 $x60)))
 (let (($x90 (and (not $x96) $x88)))
 (let (($x33 (and (and (and (and (and (and $x90 $x22) $x97) $x93) $x47) $x117) $x39)))
 (let (($x147 (and $x33 $x16)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x118 (or false (or false (and (and true (or $x178 $x38)) (or $x21 $x12))))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x118)))
 (let (($x166 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x156 (and (and (and $x166 $x95) $x147) $x140)))
 (let (($x6 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (and $x6 $x156)))
 (let (($x153 (= $x131 true)))
 (let (($x138 (= $x153 true)))
 (let (($x35 (= $x138 true)))
 (let (($x142 (and $x35 $x135)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x43 $x142)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x182 (and $x29 $x125)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x32 (and $x36 $x182)))
 (let (($x149 (=> $x32 $x130)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x186 (forall ((input.ind-%var431X (_ BitVec 32)) )(let ((?x123 (bvadd (bvmul input.ind-%var431X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x112))))
 (let ((?x120 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var431X)))
 (let (($x181 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var431X)))
 (=> $x181 (= ?x120 ?x168))))))))
 ))
 (let (($x151 (forall ((input.ind-%var430X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var430X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var430X) (bvult input.ind-%var430X input.dst.llvm-%m)))))
 ))
 (let (($x190 (and $x151 $x186)))
 (let (($x148 (= true true)))
 (let (($x115 (and $x148 $x190)))
 (let (($x130 (= $x115 true)))
 (let (($x132 (forall ((input.ind-%var425X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var425X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var425X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var424X)))
 (= $x113 false)))
 ))
 (let (($x116 (and $x110 $x132)))
 (let (($x135 (= $x116 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x122 (concat ?x58 (concat ?x150 ?x64)))))
 (let (($x194 (= input.dst.llvm-%m ?x163)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x62 (concat ?x80 (concat ?x94 ?x91)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x140 (and $x103 $x194)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x66)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x41)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x65 $x46)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x67 $x74)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x13 $x75)))
 (let (($x84 (not $x92)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x30 $x20)))
 (let (($x88 (not $x18)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x86 $x60)))
 (let (($x90 (and (not $x96) $x88)))
 (let (($x33 (and (and (and (and (and (and $x90 $x22) $x97) $x93) $x47) $x117) $x39)))
 (let (($x147 (and $x33 $x16)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x118 (or false (or false (and (and true (or $x178 $x38)) (or $x21 $x12))))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x118)))
 (let (($x166 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x156 (and (and (and $x166 $x95) $x147) $x140)))
 (let (($x6 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (and $x6 $x156)))
 (let (($x153 (= $x131 true)))
 (let (($x138 (= $x153 true)))
 (let (($x35 (= $x138 true)))
 (let (($x142 (and $x35 $x135)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x43 $x142)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x182 (and $x29 $x125)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x32 (and $x36 $x182)))
 (let (($x149 (=> $x32 $x130)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var431X!1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000004) #xfc
      #x00)))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var430X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8ffffbf8)
  (define-fun input.ind-%var431X!1 () (_ BitVec 32)
    #x0c006210)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x806040b8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8ffffbfb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8ffffbf8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x40
    (ite (= x!0 #xfffffffc) #xb8
    (ite (= x!0 #xffffffff) #x80
    (ite (= x!0 #xfffffffe) #x60
    (ite (= x!0 #xb061c8fb) #x04
      #x00))))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x189 (forall ((input.ind-%var459X (_ BitVec 32)) )(let ((?x129 (bvadd (bvmul input.ind-%var459X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x155))))
 (let ((?x111 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var459X)))
 (let (($x106 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var459X)))
 (=> $x106 (= ?x111 ?x100))))))))
 ))
 (let (($x130 (forall ((input.ind-%var458X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var458X)))
 (= $x106 (and (bvule (_ bv0 32) input.ind-%var458X) (bvult input.ind-%var458X (_ bv0 32))))))
 ))
 (let (($x101 (and $x130 $x189)))
 (let (($x170 (= true true)))
 (let (($x157 (and $x170 $x101)))
 (let (($x49 (= $x157 true)))
 (let (($x151 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var453X)))
 (=> $x162 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var453X) (_ bv0 32)))))
 ))
 (let (($x142 (forall ((input.ind-%var452X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var452X)))
 (= $x162 false)))
 ))
 (let (($x120 (and $x142 $x151)))
 (let (($x23 (= $x120 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x194 (concat ?x163 (concat ?x64 (concat ?x58 ?x122)))))
 (let (($x140 (= input.dst.llvm-%m ?x194)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x53 (concat ?x94 (concat ?x61 ?x87)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x156 (and $x103 $x140)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x7)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x47)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x93 $x65)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x89 $x57)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x13)))
 (let (($x92 (not $x75)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x92)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x30)))
 (let (($x18 (not $x20)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x40 $x85)))
 (let (($x90 (and (not $x96) $x18)))
 (let (($x16 (and (and (and (and (and (and $x90 $x22) $x59) $x52) $x73) $x74) $x11)))
 (let (($x147 (and $x16 $x117)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x102 (or false (or false (and (and true (or $x172 $x51)) (or $x127 $x121))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x102)))
 (let (($x171 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x138 (and (and (and $x171 $x60) $x147) $x156)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x35 (and $x25 $x138)))
 (let (($x169 (= $x35 true)))
 (let (($x113 (= $x169 true)))
 (let (($x28 (= $x113 true)))
 (let (($x180 (and $x28 $x23)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x34 $x180)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x185 (and $x134 $x123)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x55 $x185)))
 (let (($x137 (=> $x173 $x49)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x189 (forall ((input.ind-%var459X (_ BitVec 32)) )(let ((?x129 (bvadd (bvmul input.ind-%var459X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x155))))
 (let ((?x111 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var459X)))
 (let (($x106 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var459X)))
 (=> $x106 (= ?x111 ?x100))))))))
 ))
 (let (($x130 (forall ((input.ind-%var458X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var458X)))
 (= $x106 (and (bvule (_ bv0 32) input.ind-%var458X) (bvult input.ind-%var458X (_ bv0 32))))))
 ))
 (let (($x101 (and $x130 $x189)))
 (let (($x170 (= true true)))
 (let (($x157 (and $x170 $x101)))
 (let (($x49 (= $x157 true)))
 (let (($x151 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var453X)))
 (=> $x162 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var453X) (_ bv0 32)))))
 ))
 (let (($x142 (forall ((input.ind-%var452X (_ BitVec 32)) )(let (($x162 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var452X)))
 (= $x162 false)))
 ))
 (let (($x120 (and $x142 $x151)))
 (let (($x23 (= $x120 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x194 (concat ?x163 (concat ?x64 (concat ?x58 ?x122)))))
 (let (($x140 (= input.dst.llvm-%m ?x194)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x53 (concat ?x94 (concat ?x61 ?x87)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x156 (and $x103 $x140)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x7)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x47)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x93 $x65)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x89 $x57)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x13)))
 (let (($x92 (not $x75)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x92)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x30)))
 (let (($x18 (not $x20)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x40 $x85)))
 (let (($x90 (and (not $x96) $x18)))
 (let (($x16 (and (and (and (and (and (and $x90 $x22) $x59) $x52) $x73) $x74) $x11)))
 (let (($x147 (and $x16 $x117)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x102 (or false (or false (and (and true (or $x172 $x51)) (or $x127 $x121))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x102)))
 (let (($x171 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x138 (and (and (and $x171 $x60) $x147) $x156)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x35 (and $x25 $x138)))
 (let (($x169 (= $x35 true)))
 (let (($x113 (= $x169 true)))
 (let (($x28 (= $x113 true)))
 (let (($x180 (and $x28 $x23)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x34 $x180)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x185 (and $x134 $x123)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x55 $x185)))
 (let (($x137 (=> $x173 $x49)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002f94)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var459X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002fc8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002f97)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00002fcb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002f94)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002fc8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var458X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffff78)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x01ffff7c)
  (define-fun input.ind-%var459X!1 () (_ BitVec 32)
    #x005fffc0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x100000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x01ffff7f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffff7b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x01ffff7c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xffffff78)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff78) #xf8
    (ite (= x!0 #xffffff7b) #x10
    (ite (= x!0 #x117ffffb) #x08
      #x00))))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x182 (forall ((input.ind-%var487X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var487X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x196))))
 (let ((?x108 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var487X)))
 (let (($x70 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var487X)))
 (=> $x70 (= ?x108 ?x165))))))))
 ))
 (let (($x49 (forall ((input.ind-%var486X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var486X)))
 (= $x70 (and (bvule (_ bv0 32) input.ind-%var486X) (bvult input.ind-%var486X input.dst.llvm-%n)))))
 ))
 (let (($x10 (and $x49 $x182)))
 (let (($x124 (= true true)))
 (let (($x79 (and $x124 $x10)))
 (let (($x195 (= $x79 true)))
 (let (($x130 (forall ((input.ind-%var481X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var481X)))
 (=> $x183 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var481X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var480X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var480X)))
 (= $x183 false)))
 ))
 (let (($x111 (and $x180 $x130)))
 (let (($x44 (= $x111 true)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x194 (concat ?x122 (concat ?x64 ?x163)))))
 (let (($x156 (= input.dst.llvm-%m ?x140)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x91 (concat ?x61 (concat ?x80 ?x19)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x138 (and $x103 $x156)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x46)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x73)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x89)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x52 $x93)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x97 $x26)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x75 (not $x13)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x20 (not $x30)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x99 $x86)))
 (let (($x90 (and (not $x96) $x20)))
 (let (($x117 (and (and (and (and (and (and $x90 $x22) $x68) $x41) $x67) $x57) $x33)))
 (let (($x147 (and $x117 $x74)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x131 (or false (or false (and (and true (or $x158 $x21)) (or $x143 $x118))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x131)))
 (let (($x15 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x113 (and (and (and $x15 $x85) $x147) $x138)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x28 (and $x43 $x113)))
 (let (($x126 (= $x28 true)))
 (let (($x162 (= $x126 true)))
 (let (($x135 (= $x162 true)))
 (let (($x152 (and $x135 $x44)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and $x14 $x152)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x145 $x129)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x107 (and $x36 $x114)))
 (let (($x160 (=> $x107 $x195)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x182 (forall ((input.ind-%var487X (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul input.ind-%var487X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x196))))
 (let ((?x108 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var487X)))
 (let (($x70 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var487X)))
 (=> $x70 (= ?x108 ?x165))))))))
 ))
 (let (($x49 (forall ((input.ind-%var486X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var486X)))
 (= $x70 (and (bvule (_ bv0 32) input.ind-%var486X) (bvult input.ind-%var486X input.dst.llvm-%n)))))
 ))
 (let (($x10 (and $x49 $x182)))
 (let (($x124 (= true true)))
 (let (($x79 (and $x124 $x10)))
 (let (($x195 (= $x79 true)))
 (let (($x130 (forall ((input.ind-%var481X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var481X)))
 (=> $x183 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var481X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var480X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var480X)))
 (= $x183 false)))
 ))
 (let (($x111 (and $x180 $x130)))
 (let (($x44 (= $x111 true)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x194 (concat ?x122 (concat ?x64 ?x163)))))
 (let (($x156 (= input.dst.llvm-%m ?x140)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x91 (concat ?x61 (concat ?x80 ?x19)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x138 (and $x103 $x156)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x46)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x73)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x89)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x52 $x93)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x97 $x26)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x84 $x56)))
 (let (($x75 (not $x13)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x88 $x27)))
 (let (($x20 (not $x30)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x99 $x86)))
 (let (($x90 (and (not $x96) $x20)))
 (let (($x117 (and (and (and (and (and (and $x90 $x22) $x68) $x41) $x67) $x57) $x33)))
 (let (($x147 (and $x117 $x74)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x131 (or false (or false (and (and true (or $x158 $x21)) (or $x143 $x118))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x131)))
 (let (($x15 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x113 (and (and (and $x15 $x85) $x147) $x138)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x28 (and $x43 $x113)))
 (let (($x126 (= $x28 true)))
 (let (($x162 (= $x126 true)))
 (let (($x135 (= $x162 true)))
 (let (($x152 (and $x135 $x44)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and $x14 $x152)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x145 $x129)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x107 (and $x36 $x114)))
 (let (($x160 (=> $x107 $x195)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var487X!1 () (_ BitVec 32)
    #x3fffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #xfc
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var486X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.ind-%var487X!1 () (_ BitVec 32)
    #x3fffffc0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #xf8
    (ite (= x!0 #xfffffff0) #x01
      #x00)))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x104 (= false true)))
 (let (($x81 (= $x104 true)))
 (let (($x49 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var509X)))
 (=> $x115 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var509X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var508X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var508X)))
 (= $x115 false)))
 ))
 (let (($x108 (and $x152 $x49)))
 (let (($x132 (= $x108 true)))
 (let ((?x194 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x140 (concat ?x163 (concat ?x122 ?x194)))))
 (let (($x138 (= input.dst.llvm-%m ?x156)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x87 (concat ?x80 (concat ?x94 ?x24)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x113 (and $x103 $x138)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x65)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x67)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (and $x41 $x52)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x59 $x39)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x38 $x40)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x74 (and (and (and (and (and (and $x90 $x22) $x8) $x47) $x89) $x26) $x16)))
 (let (($x147 (and $x74 $x57)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x35 (or false (or false (and (and true (or $x176 $x127)) (or $x95 $x102))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x35)))
 (let (($x54 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x162 (and (and (and $x54 $x86) $x147) $x113)))
 (let (($x34 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (and $x34 $x162)))
 (let (($x177 (= $x135 true)))
 (let (($x183 (= $x177 true)))
 (let (($x23 (= $x183 true)))
 (let (($x133 (and $x23 $x132)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x192 (and $x29 $x133)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x69 $x192)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x188 (and $x55 $x116)))
 (let (($x184 (=> $x188 $x81)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x104 (= false true)))
 (let (($x81 (= $x104 true)))
 (let (($x49 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var509X)))
 (=> $x115 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var509X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var508X (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var508X)))
 (= $x115 false)))
 ))
 (let (($x108 (and $x152 $x49)))
 (let (($x132 (= $x108 true)))
 (let ((?x194 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x140 (concat ?x163 (concat ?x122 ?x194)))))
 (let (($x138 (= input.dst.llvm-%m ?x156)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x87 (concat ?x80 (concat ?x94 ?x24)))))
 (let (($x103 (= input.dst.llvm-%n ?x109)))
 (let (($x113 (and $x103 $x138)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x65)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x67)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (and $x41 $x52)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x59 $x39)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x13 (not $x56)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x13)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x30 (not $x27)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x38 $x40)))
 (let (($x90 (and (not $x96) $x30)))
 (let (($x74 (and (and (and (and (and (and $x90 $x22) $x8) $x47) $x89) $x26) $x16)))
 (let (($x147 (and $x74 $x57)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x35 (or false (or false (and (and true (or $x176 $x127)) (or $x95 $x102))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x35)))
 (let (($x54 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x162 (and (and (and $x54 $x86) $x147) $x113)))
 (let (($x34 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (and $x34 $x162)))
 (let (($x177 (= $x135 true)))
 (let (($x183 (= $x177 true)))
 (let (($x23 (= $x183 true)))
 (let (($x133 (and $x23 $x132)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x192 (and $x29 $x133)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x69 $x192)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x188 (and $x55 $x116)))
 (let (($x184 (=> $x188 $x81)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x3bbc5ef0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf56312d4)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf56312d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x3bbc5ef3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf56312d4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x3bbc5ef0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x91 false)))
 (let (($x142 (= $x139 true)))
 (let (($x9 (forall ((input.ind-%var523X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var523X)))
 (=> $x168 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var523X) (_ bv0 32)))))
 ))
 (let (($x79 (forall ((input.ind-%var522X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var522X)))
 (= $x168 false)))
 ))
 (let (($x154 (and $x79 $x9)))
 (let (($x123 (= $x154 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x111)))
 (let (($x114 (= ?x189 input.dst.llvm-%n)))
 (let (($x77 (= $x114 true)))
 (let (($x137 (= $x77 true)))
 (let (($x130 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x130 true)))
 (let (($x107 (= $x70 true)))
 (let (($x184 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x184 true)))
 (let (($x178 (= $x179 true)))
 (let (($x175 (= $x178 true)))
 (let (($x192 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (= $x192 true)))
 (let (($x188 (= $x116 true)))
 (let (($x104 (= $x188 true)))
 (let (($x157 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x49 (= $x157 true)))
 (let (($x108 (= $x49 true)))
 (let (($x132 (= $x108 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x115 true)))
 (let (($x152 (= $x44 true)))
 (let (($x124 (= $x152 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x62 (bvadd input.dst.llvm-%m ?x24)))
 (let (($x159 (bvugt ?x62 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd ?x62 (_ bv3 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x58 (bvugt ?x62 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x162 (or false (or false (and (and true (or $x163 $x58)) (or $x150 $x159))))))
 (let (($x177 (=> (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32))) $x162)))
 (let (($x109 (=> (and $x91 (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32)))) $x162)))
 (let (($x103 (= $x109 true)))
 (let (($x183 (= $x103 true)))
 (let (($x23 (= $x183 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x93)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x89)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x47 $x41)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x68 $x11)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x51 $x99)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x57 (and (and (and (and (and (and $x90 $x22) $x66) $x73) $x97) $x39) $x117)))
 (let (($x147 (and $x57 $x26)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x28 (or false (or false (and (and true (or $x12 $x143)) (or $x60 $x131))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x28)))
 (let (($x126 (and $x40 $x147)))
 (let (($x169 (= $x126 true)))
 (let (($x45 (= $x169 true)))
 (let (($x87 (= $x45 true)))
 (let ((?x34 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x43 (= (_ bv0 2) ?x34)))
 (let (($x25 (= $x43 true)))
 (let (($x6 (= $x25 true)))
 (let (($x61 (and $x6 $x87)))
 (let (($x190 (and $x61 $x23)))
 (let (($x101 (and $x190 $x124)))
 (let (($x133 (and $x101 $x132)))
 (let (($x81 (and $x133 $x104)))
 (let (($x153 (and $x81 $x175)))
 (let (($x180 (and $x153 $x107)))
 (let (($x144 (and $x180 $x137)))
 (let (($x173 (and $x144 $x123)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and $x69 $x173)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x37 (and $x187 $x166)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x155 (and $x15 $x37)))
 (let (($x148 (=> $x155 $x142)))
 (not $x148)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x91 false)))
 (let (($x142 (= $x139 true)))
 (let (($x9 (forall ((input.ind-%var523X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var523X)))
 (=> $x168 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var523X) (_ bv0 32)))))
 ))
 (let (($x79 (forall ((input.ind-%var522X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var522X)))
 (= $x168 false)))
 ))
 (let (($x154 (and $x79 $x9)))
 (let (($x123 (= $x154 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x111)))
 (let (($x114 (= ?x189 input.dst.llvm-%n)))
 (let (($x77 (= $x114 true)))
 (let (($x137 (= $x77 true)))
 (let (($x130 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x130 true)))
 (let (($x107 (= $x70 true)))
 (let (($x184 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x184 true)))
 (let (($x178 (= $x179 true)))
 (let (($x175 (= $x178 true)))
 (let (($x192 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (= $x192 true)))
 (let (($x188 (= $x116 true)))
 (let (($x104 (= $x188 true)))
 (let (($x157 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x49 (= $x157 true)))
 (let (($x108 (= $x49 true)))
 (let (($x132 (= $x108 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x115 true)))
 (let (($x152 (= $x44 true)))
 (let (($x124 (= $x152 true)))
 (let ((?x24 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x62 (bvadd input.dst.llvm-%m ?x24)))
 (let (($x159 (bvugt ?x62 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd ?x62 (_ bv3 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x58 (bvugt ?x62 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x162 (or false (or false (and (and true (or $x163 $x58)) (or $x150 $x159))))))
 (let (($x177 (=> (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32))) $x162)))
 (let (($x109 (=> (and $x91 (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32)))) $x162)))
 (let (($x103 (= $x109 true)))
 (let (($x183 (= $x103 true)))
 (let (($x23 (= $x183 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x93)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x89)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x47 $x41)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x68 $x11)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x71 $x76)))
 (let (($x22 (and (not $x72) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x51 $x99)))
 (let (($x90 (and (not $x96) $x27)))
 (let (($x57 (and (and (and (and (and (and $x90 $x22) $x66) $x73) $x97) $x39) $x117)))
 (let (($x147 (and $x57 $x26)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x28 (or false (or false (and (and true (or $x12 $x143)) (or $x60 $x131))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x28)))
 (let (($x126 (and $x40 $x147)))
 (let (($x169 (= $x126 true)))
 (let (($x45 (= $x169 true)))
 (let (($x87 (= $x45 true)))
 (let ((?x34 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x43 (= (_ bv0 2) ?x34)))
 (let (($x25 (= $x43 true)))
 (let (($x6 (= $x25 true)))
 (let (($x61 (and $x6 $x87)))
 (let (($x190 (and $x61 $x23)))
 (let (($x101 (and $x190 $x124)))
 (let (($x133 (and $x101 $x132)))
 (let (($x81 (and $x133 $x104)))
 (let (($x153 (and $x81 $x175)))
 (let (($x180 (and $x153 $x107)))
 (let (($x144 (and $x180 $x137)))
 (let (($x173 (and $x144 $x123)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and $x69 $x173)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x37 (and $x187 $x166)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x155 (and $x15 $x37)))
 (let (($x148 (=> $x155 $x142)))
 (not $x148)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfff7fff0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffff0d9c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfff81000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffff0d9f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffff0d9c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x39)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x74)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x16 $x33)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x73 $x59)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x21 $x38)))
 (let (($x71 (and (not $x30) $x27)))
 (let (($x147 (and (and (and (and (and (and $x71 $x46) $x66) $x8) $x41) $x97) $x52)))
 (let (($x126 (and $x147 $x65)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x51 (or false (or false (and (and true (or $x121 $x95)) (or $x85 $x35))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x77 (and $x96 $x126)))
 (let (($x137 (= $x77 true)))
 (let (($x144 (= $x137 true)))
 (let (($x70 (forall ((input.ind-%var536X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var536X)))
 (= $x108 false)))
 ))
 (let (($x179 (forall ((input.ind-%var537X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var537X)))
 (=> $x108 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var537X) (_ bv0 32)))))
 ))
 (let (($x107 (and $x179 $x70)))
 (let (($x180 (= $x107 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x177 (concat ?x162 (concat ?x156 (concat ?x194 ?x58)))))
 (let (($x109 (= input.dst.llvm-%m ?x177)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x140 (concat ?x24 (concat ?x53 ?x87)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x103 (and $x64 $x109)))
 (let (($x23 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x96) $x126)))
 (let (($x190 (and $x23 $x103)))
 (let (($x145 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x115 (and $x145 $x190)))
 (let (($x44 (= $x115 true)))
 (let (($x152 (= $x44 true)))
 (let (($x124 (= $x152 true)))
 (let (($x170 (and $x124 $x180)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x55 $x170)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x36 $x111)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x29 $x189)))
 (let (($x165 (=> $x114 $x144)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x39)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x74)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x16 $x33)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x73 $x59)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x21 $x38)))
 (let (($x71 (and (not $x30) $x27)))
 (let (($x147 (and (and (and (and (and (and $x71 $x46) $x66) $x8) $x41) $x97) $x52)))
 (let (($x126 (and $x147 $x65)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x51 (or false (or false (and (and true (or $x121 $x95)) (or $x85 $x35))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x77 (and $x96 $x126)))
 (let (($x137 (= $x77 true)))
 (let (($x144 (= $x137 true)))
 (let (($x70 (forall ((input.ind-%var536X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var536X)))
 (= $x108 false)))
 ))
 (let (($x179 (forall ((input.ind-%var537X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var537X)))
 (=> $x108 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var537X) (_ bv0 32)))))
 ))
 (let (($x107 (and $x179 $x70)))
 (let (($x180 (= $x107 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x177 (concat ?x162 (concat ?x156 (concat ?x194 ?x58)))))
 (let (($x109 (= input.dst.llvm-%m ?x177)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x140 (concat ?x24 (concat ?x53 ?x87)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x103 (and $x64 $x109)))
 (let (($x23 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x96) $x126)))
 (let (($x190 (and $x23 $x103)))
 (let (($x145 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x115 (and $x145 $x190)))
 (let (($x44 (= $x115 true)))
 (let (($x152 (= $x44 true)))
 (let (($x124 (= $x152 true)))
 (let (($x170 (and $x124 $x180)))
 (let (($x55 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x55 $x170)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x36 $x111)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x29 $x189)))
 (let (($x165 (=> $x114 $x144)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x188)))
 (let (($x104 (= ?x157 input.dst.llvm-%n)))
 (let (($x195 (= $x104 true)))
 (let (($x163 (forall ((input.ind-%var543X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var543X)))
 (=> $x130 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var543X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var542X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var542X)))
 (= $x130 false)))
 ))
 (let (($x45 (and $x170 $x163)))
 (let (($x132 (= $x45 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x177 (concat ?x58 (concat ?x156 ?x162)))))
 (let (($x103 (= input.dst.llvm-%m ?x109)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x62 (concat ?x53 (concat ?x91 ?x50)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x190 (and $x64 $x103)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x11)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x41)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x8 $x16)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x67 $x68)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x22 $x75)))
 (let (($x84 (not $x92)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x90 $x20)))
 (let (($x88 (not $x18)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x127 $x99)))
 (let (($x71 (and (not $x30) $x88)))
 (let (($x65 (and (and (and (and (and (and $x71 $x46) $x7) $x117) $x47) $x59) $x93)))
 (let (($x126 (and $x65 $x97)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x183 (or false (or false (and (and true (or $x118 $x60)) (or $x86 $x28))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x183)))
 (let (($x43 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x152 (and (and (and $x43 $x38) $x126) $x190)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x124 (and $x69 $x152)))
 (let (($x49 (= $x124 true)))
 (let (($x108 (= $x49 true)))
 (let (($x192 (= $x108 true)))
 (let (($x116 (and $x192 $x132)))
 (let (($x161 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (and $x161 $x116)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x134 $x101)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x15 $x133)))
 (let (($x10 (=> $x175 $x195)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x188 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x188)))
 (let (($x104 (= ?x157 input.dst.llvm-%n)))
 (let (($x195 (= $x104 true)))
 (let (($x163 (forall ((input.ind-%var543X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var543X)))
 (=> $x130 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var543X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var542X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var542X)))
 (= $x130 false)))
 ))
 (let (($x45 (and $x170 $x163)))
 (let (($x132 (= $x45 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x177 (concat ?x58 (concat ?x156 ?x162)))))
 (let (($x103 (= input.dst.llvm-%m ?x109)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x62 (concat ?x53 (concat ?x91 ?x50)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x190 (and $x64 $x103)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x11)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x41)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x8 $x16)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x67 $x68)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x22 $x75)))
 (let (($x84 (not $x92)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x84)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x90 $x20)))
 (let (($x88 (not $x18)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x127 $x99)))
 (let (($x71 (and (not $x30) $x88)))
 (let (($x65 (and (and (and (and (and (and $x71 $x46) $x7) $x117) $x47) $x59) $x93)))
 (let (($x126 (and $x65 $x97)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x183 (or false (or false (and (and true (or $x118 $x60)) (or $x86 $x28))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x183)))
 (let (($x43 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x152 (and (and (and $x43 $x38) $x126) $x190)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x124 (and $x69 $x152)))
 (let (($x49 (= $x124 true)))
 (let (($x108 (= $x49 true)))
 (let (($x192 (= $x108 true)))
 (let (($x116 (and $x192 $x132)))
 (let (($x161 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (and $x161 $x116)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x134 $x101)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x15 $x133)))
 (let (($x10 (=> $x175 $x195)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x184 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x107 (= (_ bv0 2) ?x184)))
 (let (($x144 (= $x107 true)))
 (let (($x79 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var549X)))
 (=> $x158 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var549X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var548X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var548X)))
 (= $x158 false)))
 ))
 (let (($x176 (and $x116 $x79)))
 (let (($x113 (= $x176 true)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x109 (concat ?x162 (concat ?x58 ?x177)))))
 (let (($x190 (= input.dst.llvm-%m ?x103)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x87 (concat ?x91 (concat ?x24 ?x80)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x152 (and $x64 $x190)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x33)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x47)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x117 $x8)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x66 $x57)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x22)))
 (let (($x92 (not $x75)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x92)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x90)))
 (let (($x18 (not $x20)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x143 $x21)))
 (let (($x71 (and (not $x30) $x18)))
 (let (($x97 (and (and (and (and (and (and $x71 $x46) $x89) $x74) $x73) $x68) $x147)))
 (let (($x126 (and $x97 $x59)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x115 (or false (or false (and (and true (or $x102 $x85)) (or $x40 $x51))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x115)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x108 (and (and (and $x34 $x99) $x126) $x152)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x192 (and $x55 $x108)))
 (let (($x179 (= $x192 true)))
 (let (($x130 (= $x179 true)))
 (let (($x180 (= $x130 true)))
 (let (($x169 (and $x180 $x113)))
 (let (($x187 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and $x187 $x169)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x54 $x70)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x29 $x137)))
 (let (($x189 (=> $x114 $x144)))
 (not $x189))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x184 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x107 (= (_ bv0 2) ?x184)))
 (let (($x144 (= $x107 true)))
 (let (($x79 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var549X)))
 (=> $x158 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var549X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var548X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var548X)))
 (= $x158 false)))
 ))
 (let (($x176 (and $x116 $x79)))
 (let (($x113 (= $x176 true)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x109 (concat ?x162 (concat ?x58 ?x177)))))
 (let (($x190 (= input.dst.llvm-%m ?x103)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x87 (concat ?x91 (concat ?x24 ?x80)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x152 (and $x64 $x190)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x33)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x47)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x67)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x117 $x8)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x66 $x57)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x56 $x22)))
 (let (($x92 (not $x75)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x92)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x27 $x90)))
 (let (($x18 (not $x20)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x143 $x21)))
 (let (($x71 (and (not $x30) $x18)))
 (let (($x97 (and (and (and (and (and (and $x71 $x46) $x89) $x74) $x73) $x68) $x147)))
 (let (($x126 (and $x97 $x59)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x115 (or false (or false (and (and true (or $x102 $x85)) (or $x40 $x51))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x115)))
 (let (($x34 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x108 (and (and (and $x34 $x99) $x126) $x152)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x192 (and $x55 $x108)))
 (let (($x179 (= $x192 true)))
 (let (($x130 (= $x179 true)))
 (let (($x180 (= $x130 true)))
 (let (($x169 (and $x180 $x113)))
 (let (($x187 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and $x187 $x169)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x54 $x70)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x29 $x137)))
 (let (($x189 (=> $x114 $x144)))
 (not $x189))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x45)))
 (let (($x133 (= ?x157 input.spec-%var-n-1)))
 (let (($x104 (= $x133 true)))
 (let (($x12 (forall ((input.ind-%var555X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var555X)))
 (=> $x10 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var555X) (_ bv0 32)))))
 ))
 (let (($x169 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var554X)))
 (= $x10 false)))
 ))
 (let (($x138 (and $x169 $x12)))
 (let (($x23 (= $x138 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x103 (concat ?x177 (concat ?x162 ?x109)))))
 (let (($x152 (= input.dst.llvm-%m ?x190)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x50 (concat ?x24 (concat ?x53 ?x94)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x108 (and $x64 $x152)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x16)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x73)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (and $x74 $x117)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x7 $x52)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x84 $x56)))
 (let (($x75 (not $x22)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x88 $x27)))
 (let (($x20 (not $x90)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x95 $x127)))
 (let (($x71 (and (not $x30) $x20)))
 (let (($x59 (and (and (and (and (and (and $x71 $x46) $x26) $x41) $x67) $x57) $x65)))
 (let (($x126 (and $x59 $x68)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x124 (or false (or false (and (and true (or $x131 $x86)) (or $x96 $x183))))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x124)))
 (let (($x14 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x130 (and (and (and $x14 $x21) $x126) $x108)))
 (let (($x161 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x180 (and $x161 $x130)))
 (let (($x168 (= $x180 true)))
 (let (($x158 (= $x168 true)))
 (let (($x132 (= $x158 true)))
 (let (($x163 (and $x132 $x23)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x188 (and $x36 $x163)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x175 (and $x6 $x188)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x170 (and $x15 $x175)))
 (let (($x111 (=> $x170 $x104)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x45)))
 (let (($x133 (= ?x157 input.spec-%var-n-1)))
 (let (($x104 (= $x133 true)))
 (let (($x12 (forall ((input.ind-%var555X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var555X)))
 (=> $x10 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var555X) (_ bv0 32)))))
 ))
 (let (($x169 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x10 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var554X)))
 (= $x10 false)))
 ))
 (let (($x138 (and $x169 $x12)))
 (let (($x23 (= $x138 true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x103 (concat ?x177 (concat ?x162 ?x109)))))
 (let (($x152 (= input.dst.llvm-%m ?x190)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x50 (concat ?x24 (concat ?x53 ?x94)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x108 (and $x64 $x152)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x16)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x73)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (and $x74 $x117)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x7 $x52)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x84 $x56)))
 (let (($x75 (not $x22)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x75)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x88 $x27)))
 (let (($x20 (not $x90)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x95 $x127)))
 (let (($x71 (and (not $x30) $x20)))
 (let (($x59 (and (and (and (and (and (and $x71 $x46) $x26) $x41) $x67) $x57) $x65)))
 (let (($x126 (and $x59 $x68)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x124 (or false (or false (and (and true (or $x131 $x86)) (or $x96 $x183))))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x124)))
 (let (($x14 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x130 (and (and (and $x14 $x21) $x126) $x108)))
 (let (($x161 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x180 (and $x161 $x130)))
 (let (($x168 (= $x180 true)))
 (let (($x158 (= $x168 true)))
 (let (($x132 (= $x158 true)))
 (let (($x163 (and $x132 $x23)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x188 (and $x36 $x163)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x175 (and $x6 $x188)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x170 (and $x15 $x175)))
 (let (($x111 (=> $x170 $x104)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x116 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x153 (= $x116 true)))
 (let (($x176 (= $x153 true)))
 (let (($x178 (forall ((input.ind-%var561X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var561X)))
 (=> $x165 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var561X) (_ bv0 32)))))
 ))
 (let (($x163 (forall ((input.ind-%var560X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var560X)))
 (= $x165 false)))
 ))
 (let (($x121 (and $x163 $x178)))
 (let (($x150 (= $x121 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x152 (concat ?x190 (concat ?x109 (concat ?x177 ?x103)))))
 (let (($x108 (= input.dst.llvm-%m ?x152)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x80 (concat ?x53 (concat ?x91 ?x61)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x130 (and $x64 $x108)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x8)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x67)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (and $x41 $x74)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x89 $x93)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x22 (not $x56)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x22)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x90 (not $x27)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x60 $x143)))
 (let (($x71 (and (not $x30) $x90)))
 (let (($x68 (and (and (and (and (and (and $x71 $x46) $x39) $x47) $x66) $x52) $x97)))
 (let (($x126 (and $x68 $x57)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x192 (or false (or false (and (and true (or $x35 $x40)) (or $x38 $x115))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x192)))
 (let (($x145 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x158 (and (and (and $x145 $x127) $x126) $x130)))
 (let (($x187 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x132 (and $x187 $x158)))
 (let (($x195 (= $x132 true)))
 (let (($x10 (= $x195 true)))
 (let (($x113 (= $x10 true)))
 (let (($x44 (and $x113 $x150)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (and $x134 $x44)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x184 (and $x25 $x79)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x29 $x184)))
 (let (($x107 (=> $x114 $x176)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x116 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x153 (= $x116 true)))
 (let (($x176 (= $x153 true)))
 (let (($x178 (forall ((input.ind-%var561X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var561X)))
 (=> $x165 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var561X) (_ bv0 32)))))
 ))
 (let (($x163 (forall ((input.ind-%var560X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var560X)))
 (= $x165 false)))
 ))
 (let (($x121 (and $x163 $x178)))
 (let (($x150 (= $x121 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x152 (concat ?x190 (concat ?x109 (concat ?x177 ?x103)))))
 (let (($x108 (= input.dst.llvm-%m ?x152)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x80 (concat ?x53 (concat ?x91 ?x61)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x130 (and $x64 $x108)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x8)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x67)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (and $x41 $x74)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x89 $x93)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x92 $x84)))
 (let (($x22 (not $x56)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x22)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x18 $x88)))
 (let (($x90 (not $x27)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x60 $x143)))
 (let (($x71 (and (not $x30) $x90)))
 (let (($x68 (and (and (and (and (and (and $x71 $x46) $x39) $x47) $x66) $x52) $x97)))
 (let (($x126 (and $x68 $x57)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x192 (or false (or false (and (and true (or $x35 $x40)) (or $x38 $x115))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x192)))
 (let (($x145 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x158 (and (and (and $x145 $x127) $x126) $x130)))
 (let (($x187 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x132 (and $x187 $x158)))
 (let (($x195 (= $x132 true)))
 (let (($x10 (= $x195 true)))
 (let (($x113 (= $x10 true)))
 (let (($x44 (and $x113 $x150)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (and $x134 $x44)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x184 (and $x25 $x79)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x29 $x184)))
 (let (($x107 (=> $x114 $x176)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (forall ((input.ind-%var573X (_ BitVec 32)) )(let ((?x193 (bvadd (bvmul input.ind-%var573X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x98))))
 (=> false (= (_ bv0 32) ?x32))))))
 ))
 (let (($x9 (forall ((input.ind-%var572X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var572X) (bvult input.ind-%var572X (_ bv0 32)))))
 ))
 (let (($x141 (and $x9 $x82)))
 (let (($x138 (= true true)))
 (let (($x120 (and $x138 $x141)))
 (let (($x186 (= $x120 true)))
 (let (($x122 (forall ((input.ind-%var567X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var567X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var567X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var566X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var566X)))
 (= $x111 false)))
 ))
 (let (($x49 (and $x44 $x122)))
 (let (($x12 (= $x49 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x152 (concat ?x103 (concat ?x109 ?x190)))))
 (let (($x130 (= input.dst.llvm-%m ?x108)))
 (let ((?x140 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x94 (concat ?x91 (concat ?x24 ?x140)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x158 (and $x64 $x130)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x117)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x66)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x89)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (and $x47 $x41)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x26 $x147)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x85 $x95)))
 (let (($x71 (and (not $x30) $x27)))
 (let (($x57 (and (and (and (and (and (and $x71 $x46) $x11) $x73) $x7) $x93) $x59)))
 (let (($x126 (and $x57 $x52)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x180 (or false (or false (and (and true (or $x28 $x96)) (or $x99 $x124))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x180)))
 (let (($x69 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x10 (and (and (and $x69 $x143) $x126) $x158)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (and $x36 $x10)))
 (let (($x189 (= $x113 true)))
 (let (($x165 (= $x189 true)))
 (let (($x23 (= $x165 true)))
 (let (($x45 (and $x23 $x12)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x54 $x45)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x43 $x170)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x15 $x169)))
 (let (($x17 (=> $x81 $x186)))
 (not $x17)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (forall ((input.ind-%var573X (_ BitVec 32)) )(let ((?x193 (bvadd (bvmul input.ind-%var573X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x98))))
 (=> false (= (_ bv0 32) ?x32))))))
 ))
 (let (($x9 (forall ((input.ind-%var572X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var572X) (bvult input.ind-%var572X (_ bv0 32)))))
 ))
 (let (($x141 (and $x9 $x82)))
 (let (($x138 (= true true)))
 (let (($x120 (and $x138 $x141)))
 (let (($x186 (= $x120 true)))
 (let (($x122 (forall ((input.ind-%var567X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var567X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var567X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var566X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var566X)))
 (= $x111 false)))
 ))
 (let (($x49 (and $x44 $x122)))
 (let (($x12 (= $x49 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x152 (concat ?x103 (concat ?x109 ?x190)))))
 (let (($x130 (= input.dst.llvm-%m ?x108)))
 (let ((?x140 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x94 (concat ?x91 (concat ?x24 ?x140)))))
 (let (($x64 (= input.dst.llvm-%n ?x135)))
 (let (($x158 (and $x64 $x130)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x117)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x66)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x89)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (and $x47 $x41)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x26 $x147)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x75 $x92)))
 (let (($x56 (not $x84)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x76 $x72)))
 (let (($x46 (and (not $x13) $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x20 $x18)))
 (let (($x27 (not $x88)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x85 $x95)))
 (let (($x71 (and (not $x30) $x27)))
 (let (($x57 (and (and (and (and (and (and $x71 $x46) $x11) $x73) $x7) $x93) $x59)))
 (let (($x126 (and $x57 $x52)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x180 (or false (or false (and (and true (or $x28 $x96)) (or $x99 $x124))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x180)))
 (let (($x69 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x10 (and (and (and $x69 $x143) $x126) $x158)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (and $x36 $x10)))
 (let (($x189 (= $x113 true)))
 (let (($x165 (= $x189 true)))
 (let (($x23 (= $x165 true)))
 (let (($x45 (and $x23 $x12)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x54 $x45)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x43 $x170)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x15 $x169)))
 (let (($x17 (=> $x81 $x186)))
 (not $x17)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x44 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (= $x44 false)))
 (let (($x277 (= $x276 true)))
 (let (($x269 (forall ((input.ind-%var603X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var603X)))
 (=> $x139 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var603X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var602X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var602X)))
 (= $x139 false)))
 ))
 (let (($x270 (and $x263 $x269)))
 (let (($x271 (= $x270 true)))
 (let (($x256 (forall ((input.ind-%var597X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var597X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x247)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x250)))
 (let ((?x202 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var597X)))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var597X)))
 (=> $x78 (= ?x202 ?x253)))))))))
 ))
 (let (($x222 (forall ((input.ind-%var596X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var596X) (bvult input.ind-%var596X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var596X)))
 (= $x78 $x220))))
 ))
 (let (($x257 (and $x222 $x256)))
 (let (($x258 (= $x257 true)))
 (let (($x208 (forall ((input.ind-%var591X (_ BitVec 32)) )(let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var591X)))
 (=> $x78 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var591X) (_ bv0 32)))))
 ))
 (let (($x198 (forall ((input.ind-%var590X (_ BitVec 32)) )(let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var590X)))
 (= $x78 false)))
 ))
 (let (($x209 (and $x198 $x208)))
 (let (($x210 (= $x209 true)))
 (let (($x31 (forall ((input.ind-%var583X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var583X)))
 (=> $x139 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var583X) (_ bv0 32)))))
 ))
 (let (($x191 (forall ((input.ind-%var582X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var582X)))
 (= $x139 false)))
 ))
 (let (($x188 (and $x191 $x31)))
 (let (($x167 (= $x188 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x134)))
 (let (($x37 (= ?x36 input.dst.llvm-%n)))
 (let (($x163 (= $x37 true)))
 (let (($x77 (= $x163 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (= $x114 true)))
 (let (($x175 (= $x157 true)))
 (let (($x159 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x159 true)))
 (let (($x178 (= $x179 true)))
 (let (($x153 (= $x178 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x17 (= $x186 true)))
 (let (($x100 (= $x17 true)))
 (let (($x145 (= $x100 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x164 (= $x5 true)))
 (let (($x82 (= $x164 true)))
 (let (($x141 (= $x82 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x129 true)))
 (let (($x98 (= $x160 true)))
 (let (($x105 (= $x98 true)))
 (let ((?x137 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x118 (bvadd input.dst.llvm-%m ?x137)))
 (let (($x106 (bvugt ?x118 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd ?x118 (_ bv3 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x138 (bvugt ?x118 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x193 (or false (or false (and (and true (or $x81 $x138)) (or $x151 $x106))))))
 (let (($x125 (=> (bvule ?x118 (bvsub (bvadd ?x118 (_ bv4 32)) (_ bv1 32))) $x193)))
 (let (($x49 (=> (and $x44 (bvule ?x118 (bvsub (bvadd ?x118 (_ bv4 32)) (_ bv1 32)))) $x193)))
 (let (($x12 (= $x49 true)))
 (let (($x110 (= $x12 true)))
 (let (($x128 (= $x110 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x162)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x177)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (and $x24 $x61)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x80 $x135)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x117 $x52)))
 (let (($x195 (not $x126)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x66 $x59)))
 (let (($x62 (and (not $x57) $x195)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x147 $x7)))
 (let (($x74 (not $x68)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x71 $x76)))
 (let (($x8 (and (not $x41) $x74)))
 (let (($x158 (and (and (and (and (and (and $x8 $x62) $x53) $x91) $x64) $x152) $x103)))
 (let (($x10 (and $x158 $x109)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x47 (or false (or false (and (and true (or $x84 $x56)) (or $x67 $x39))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x113 (and $x89 $x10)))
 (let (($x189 (= $x113 true)))
 (let (($x165 (= $x189 true)))
 (let (($x23 (= $x165 true)))
 (let (($x30 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x90 (= $x30 true)))
 (let (($x20 (= $x90 true)))
 (let (($x180 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x180 true)))
 (let (($x132 (= $x143 true)))
 (let (($x85 (= $x132 true)))
 (let (($x115 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x124 (= $x115 true)))
 (let (($x21 (= $x124 true)))
 (let (($x192 (= $x21 true)))
 (let (($x96 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x96 true)))
 (let (($x38 (= $x51 true)))
 (let (($x183 (= $x38 true)))
 (let ((?x86 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x60 (= (_ bv0 2) ?x86)))
 (let (($x35 (= $x60 true)))
 (let (($x40 (= $x35 true)))
 (let (($x187 (= ?x36 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (= $x187 true)))
 (let (($x55 (= $x161 true)))
 (let (($x28 (and $x55 $x40)))
 (let (($x99 (and $x28 $x183)))
 (let (($x127 (and $x99 $x192)))
 (let (($x95 (and $x127 $x85)))
 (let (($x18 (and $x95 $x20)))
 (let (($x104 (and $x18 $x23)))
 (let (($x119 (and $x104 $x128)))
 (let (($x32 (and $x119 $x105)))
 (let (($x120 (and $x32 $x141)))
 (let (($x102 (and $x120 $x145)))
 (let (($x79 (and $x102 $x153)))
 (let (($x166 (and $x79 $x175)))
 (let (($x174 (and $x166 $x77)))
 (let (($x185 (and $x174 $x167)))
 (let (($x211 (and $x185 $x210)))
 (let (($x259 (and $x211 $x258)))
 (let (($x272 (and $x259 $x271)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x273 (and $x43 $x272)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x6 $x273)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x29 $x274)))
 (let (($x278 (=> $x275 $x277)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x44 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (= $x44 false)))
 (let (($x277 (= $x276 true)))
 (let (($x269 (forall ((input.ind-%var603X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var603X)))
 (=> $x139 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var603X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var602X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var602X)))
 (= $x139 false)))
 ))
 (let (($x270 (and $x263 $x269)))
 (let (($x271 (= $x270 true)))
 (let (($x256 (forall ((input.ind-%var597X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var597X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x247)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x250)))
 (let ((?x202 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var597X)))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var597X)))
 (=> $x78 (= ?x202 ?x253)))))))))
 ))
 (let (($x222 (forall ((input.ind-%var596X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var596X) (bvult input.ind-%var596X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var596X)))
 (= $x78 $x220))))
 ))
 (let (($x257 (and $x222 $x256)))
 (let (($x258 (= $x257 true)))
 (let (($x208 (forall ((input.ind-%var591X (_ BitVec 32)) )(let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var591X)))
 (=> $x78 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var591X) (_ bv0 32)))))
 ))
 (let (($x198 (forall ((input.ind-%var590X (_ BitVec 32)) )(let (($x78 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var590X)))
 (= $x78 false)))
 ))
 (let (($x209 (and $x198 $x208)))
 (let (($x210 (= $x209 true)))
 (let (($x31 (forall ((input.ind-%var583X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var583X)))
 (=> $x139 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var583X) (_ bv0 32)))))
 ))
 (let (($x191 (forall ((input.ind-%var582X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var582X)))
 (= $x139 false)))
 ))
 (let (($x188 (and $x191 $x31)))
 (let (($x167 (= $x188 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x134)))
 (let (($x37 (= ?x36 input.dst.llvm-%n)))
 (let (($x163 (= $x37 true)))
 (let (($x77 (= $x163 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (= $x114 true)))
 (let (($x175 (= $x157 true)))
 (let (($x159 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x159 true)))
 (let (($x178 (= $x179 true)))
 (let (($x153 (= $x178 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x17 (= $x186 true)))
 (let (($x100 (= $x17 true)))
 (let (($x145 (= $x100 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x164 (= $x5 true)))
 (let (($x82 (= $x164 true)))
 (let (($x141 (= $x82 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x129 true)))
 (let (($x98 (= $x160 true)))
 (let (($x105 (= $x98 true)))
 (let ((?x137 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x118 (bvadd input.dst.llvm-%m ?x137)))
 (let (($x106 (bvugt ?x118 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd ?x118 (_ bv3 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x138 (bvugt ?x118 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x193 (or false (or false (and (and true (or $x81 $x138)) (or $x151 $x106))))))
 (let (($x125 (=> (bvule ?x118 (bvsub (bvadd ?x118 (_ bv4 32)) (_ bv1 32))) $x193)))
 (let (($x49 (=> (and $x44 (bvule ?x118 (bvsub (bvadd ?x118 (_ bv4 32)) (_ bv1 32)))) $x193)))
 (let (($x12 (= $x49 true)))
 (let (($x110 (= $x12 true)))
 (let (($x128 (= $x110 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x162)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x177)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (and $x24 $x61)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x80 $x135)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x117 $x52)))
 (let (($x195 (not $x126)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x66 $x59)))
 (let (($x62 (and (not $x57) $x195)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x147 $x7)))
 (let (($x74 (not $x68)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x71 $x76)))
 (let (($x8 (and (not $x41) $x74)))
 (let (($x158 (and (and (and (and (and (and $x8 $x62) $x53) $x91) $x64) $x152) $x103)))
 (let (($x10 (and $x158 $x109)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x47 (or false (or false (and (and true (or $x84 $x56)) (or $x67 $x39))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x113 (and $x89 $x10)))
 (let (($x189 (= $x113 true)))
 (let (($x165 (= $x189 true)))
 (let (($x23 (= $x165 true)))
 (let (($x30 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x90 (= $x30 true)))
 (let (($x20 (= $x90 true)))
 (let (($x180 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x180 true)))
 (let (($x132 (= $x143 true)))
 (let (($x85 (= $x132 true)))
 (let (($x115 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x124 (= $x115 true)))
 (let (($x21 (= $x124 true)))
 (let (($x192 (= $x21 true)))
 (let (($x96 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x96 true)))
 (let (($x38 (= $x51 true)))
 (let (($x183 (= $x38 true)))
 (let ((?x86 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x60 (= (_ bv0 2) ?x86)))
 (let (($x35 (= $x60 true)))
 (let (($x40 (= $x35 true)))
 (let (($x187 (= ?x36 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (= $x187 true)))
 (let (($x55 (= $x161 true)))
 (let (($x28 (and $x55 $x40)))
 (let (($x99 (and $x28 $x183)))
 (let (($x127 (and $x99 $x192)))
 (let (($x95 (and $x127 $x85)))
 (let (($x18 (and $x95 $x20)))
 (let (($x104 (and $x18 $x23)))
 (let (($x119 (and $x104 $x128)))
 (let (($x32 (and $x119 $x105)))
 (let (($x120 (and $x32 $x141)))
 (let (($x102 (and $x120 $x145)))
 (let (($x79 (and $x102 $x153)))
 (let (($x166 (and $x79 $x175)))
 (let (($x174 (and $x166 $x77)))
 (let (($x185 (and $x174 $x167)))
 (let (($x211 (and $x185 $x210)))
 (let (($x259 (and $x211 $x258)))
 (let (($x272 (and $x259 $x271)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x273 (and $x43 $x272)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x6 $x273)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x29 $x274)))
 (let (($x278 (=> $x275 $x277)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10008008)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x0b002004)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1a008000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1000800b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1a008003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10008008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1a008000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x0b002007 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0b002006 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0b002005 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0b002004 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) a!1 #x00000000)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd51c5c00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3bde5888)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x0e1c6d1c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3bde588b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd51c5c03)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3bde5888)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd51c5c00)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x0e1c6d1f (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0e1c6d1e (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0e1c6d1d (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x0e1c6d1c (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) a!1 #x00000000)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x296 (not $x43)))
 (let (($x294 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (not $x294)))
 (let (($x297 (or $x295 $x296)))
 (let (($x298 (= $x297 true)))
 (let (($x299 (= $x298 true)))
 (let (($x286 (forall ((input.ind-%var723X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var723X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var723X) (_ bv0 32)))))
 ))
 (let (($x280 (forall ((input.ind-%var722X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var722X)))
 (= $x218 false)))
 ))
 (let (($x287 (and $x280 $x286)))
 (let (($x288 (= $x287 true)))
 (let (($x262 (forall ((input.ind-%var717X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var717X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x144))))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv2 32))) ?x261)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv3 32))) ?x184)))
 (let ((?x272 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var717X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var717X)))
 (=> $x256 (= ?x272 ?x200)))))))))
 ))
 (let (($x136 (forall ((input.ind-%var716X (_ BitVec 32)) )(let (($x199 (and (bvule (_ bv0 32) input.ind-%var716X) (bvult input.ind-%var716X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var716X)))
 (= $x256 $x199))))
 ))
 (let (($x224 (and $x136 $x262)))
 (let (($x241 (= $x224 true)))
 (let (($x278 (forall ((input.ind-%var711X (_ BitVec 32)) )(let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var711X)))
 (=> $x256 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var711X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var710X (_ BitVec 32)) )(let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var710X)))
 (= $x256 false)))
 ))
 (let (($x279 (and $x263 $x278)))
 (let (($x88 (= $x279 true)))
 (let (($x244 (forall ((input.ind-%var705X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var705X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var705X) (_ bv0 32)))))
 ))
 (let (($x226 (forall ((input.ind-%var704X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var704X)))
 (= $x218 false)))
 ))
 (let (($x247 (and $x226 $x244)))
 (let (($x250 (= $x247 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x198)))
 (let (($x206 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let ((?x191 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x191)))
 (let (($x167 (= ?x133 input.dst.llvm-%n)))
 (let (($x185 (= $x167 true)))
 (let (($x78 (= $x185 true)))
 (let (($x107 (= ?x133 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (= $x107 true)))
 (let (($x31 (= $x196 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x174 (= $x77 true)))
 (let (($x172 (= $x174 true)))
 (let (($x139 (= $x172 true)))
 (let (($x157 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x175 (= $x157 true)))
 (let (($x166 (= $x175 true)))
 (let (($x37 (= $x166 true)))
 (let (($x179 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x179 true)))
 (let (($x153 (= $x178 true)))
 (let (($x79 (= $x153 true)))
 (let (($x17 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x17 true)))
 (let (($x145 (= $x100 true)))
 (let (($x102 (= $x145 true)))
 (let (($x164 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x82 (= $x164 true)))
 (let (($x141 (= $x82 true)))
 (let (($x120 (= $x141 true)))
 (let (($x160 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x98 (= $x160 true)))
 (let (($x105 (= $x98 true)))
 (let (($x32 (= $x105 true)))
 (let ((?x29 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x48 (bvadd input.dst.llvm-%m ?x29)))
 (let ((?x101 (bvsub ?x48 ?x29)))
 (let (($x173 (ite (bvsge ?x29 (_ bv0 32)) (bvuge ?x48 ?x101) (bvult ?x48 ?x101))))
 (let (($x169 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x138 (ite $x169 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x45 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvmul (_ bv4 64) ?x45)))
 (let ((?x112 ((_ extract 63 32) ?x170)))
 (let (($x171 (= ?x112 ?x138)))
 (let (($x182 (and $x171 $x173)))
 (let (($x137 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x193 (and $x137 $x182)))
 (let (($x125 (= true $x193)))
 (let (($x49 (=> $x43 $x125)))
 (let (($x12 (= $x49 true)))
 (let (($x110 (= $x12 true)))
 (let (($x128 (= $x110 true)))
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x23 (= $x165 true)))
 (let (($x104 (= $x23 true)))
 (let (($x111 (= $x104 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x135)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x87)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (and $x58 $x91)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x53 $x156)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x59 $x57)))
 (let (($x117 (not $x168)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x74 $x8)))
 (let (($x126 (and (not $x66) $x117)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x76 $x41)))
 (let (($x147 (not $x93)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x65 $x22)))
 (let (($x68 (and (not $x71) $x147)))
 (let (($x103 (and (and (and (and (and (and $x68 $x126) $x62) $x94) $x80) $x140) $x61)))
 (let (($x158 (and $x103 $x64)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x26 (or false (or false (and (and true (or $x56 $x46)) (or $x67 $x11))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x26)))
 (let (($x162 (and $x89 $x158)))
 (let (($x109 (= $x162 true)))
 (let (($x10 (= $x109 true)))
 (let (($x113 (= $x10 true)))
 (let ((?x90 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x20 (= (_ bv0 2) ?x90)))
 (let (($x18 (= $x20 true)))
 (let (($x72 (= $x18 true)))
 (let (($x189 (and $x72 $x113)))
 (let (($x150 (and $x189 $x111)))
 (let (($x119 (and $x150 $x128)))
 (let (($x5 (and $x119 $x32)))
 (let (($x186 (and $x5 $x120)))
 (let (($x159 (and $x186 $x102)))
 (let (($x114 (and $x159 $x79)))
 (let (($x163 (and $x114 $x37)))
 (let (($x148 (and $x163 $x139)))
 (let (($x188 (and $x148 $x31)))
 (let (($x197 (and $x188 $x78)))
 (let (($x209 (and $x197 $x208)))
 (let (($x253 (and $x209 $x250)))
 (let (($x27 (and $x253 $x88)))
 (let (($x267 (and $x27 $x241)))
 (let (($x289 (and $x267 $x288)))
 (let (($x95 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x95 $x289)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x143 $x290)))
 (let (($x192 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x192 $x291)))
 (let (($x51 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd ?x48 (_ bv3 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x60 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x115 (or false (or false (and (and true (or $x86 $x60)) (or $x96 $x51))))))
 (let (($x21 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x14 (=> (and $x43 (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x293 (and $x14 $x292)))
 (let (($x300 (=> $x293 $x299)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x296 (not $x43)))
 (let (($x294 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (not $x294)))
 (let (($x297 (or $x295 $x296)))
 (let (($x298 (= $x297 true)))
 (let (($x299 (= $x298 true)))
 (let (($x286 (forall ((input.ind-%var723X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var723X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var723X) (_ bv0 32)))))
 ))
 (let (($x280 (forall ((input.ind-%var722X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var722X)))
 (= $x218 false)))
 ))
 (let (($x287 (and $x280 $x286)))
 (let (($x288 (= $x287 true)))
 (let (($x262 (forall ((input.ind-%var717X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var717X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x144))))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv2 32))) ?x261)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv3 32))) ?x184)))
 (let ((?x272 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var717X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var717X)))
 (=> $x256 (= ?x272 ?x200)))))))))
 ))
 (let (($x136 (forall ((input.ind-%var716X (_ BitVec 32)) )(let (($x199 (and (bvule (_ bv0 32) input.ind-%var716X) (bvult input.ind-%var716X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var716X)))
 (= $x256 $x199))))
 ))
 (let (($x224 (and $x136 $x262)))
 (let (($x241 (= $x224 true)))
 (let (($x278 (forall ((input.ind-%var711X (_ BitVec 32)) )(let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var711X)))
 (=> $x256 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var711X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var710X (_ BitVec 32)) )(let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var710X)))
 (= $x256 false)))
 ))
 (let (($x279 (and $x263 $x278)))
 (let (($x88 (= $x279 true)))
 (let (($x244 (forall ((input.ind-%var705X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var705X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var705X) (_ bv0 32)))))
 ))
 (let (($x226 (forall ((input.ind-%var704X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var704X)))
 (= $x218 false)))
 ))
 (let (($x247 (and $x226 $x244)))
 (let (($x250 (= $x247 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x198)))
 (let (($x206 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let ((?x191 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x191)))
 (let (($x167 (= ?x133 input.dst.llvm-%n)))
 (let (($x185 (= $x167 true)))
 (let (($x78 (= $x185 true)))
 (let (($x107 (= ?x133 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (= $x107 true)))
 (let (($x31 (= $x196 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x174 (= $x77 true)))
 (let (($x172 (= $x174 true)))
 (let (($x139 (= $x172 true)))
 (let (($x157 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x175 (= $x157 true)))
 (let (($x166 (= $x175 true)))
 (let (($x37 (= $x166 true)))
 (let (($x179 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x179 true)))
 (let (($x153 (= $x178 true)))
 (let (($x79 (= $x153 true)))
 (let (($x17 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (= $x17 true)))
 (let (($x145 (= $x100 true)))
 (let (($x102 (= $x145 true)))
 (let (($x164 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x82 (= $x164 true)))
 (let (($x141 (= $x82 true)))
 (let (($x120 (= $x141 true)))
 (let (($x160 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x98 (= $x160 true)))
 (let (($x105 (= $x98 true)))
 (let (($x32 (= $x105 true)))
 (let ((?x29 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x48 (bvadd input.dst.llvm-%m ?x29)))
 (let ((?x101 (bvsub ?x48 ?x29)))
 (let (($x173 (ite (bvsge ?x29 (_ bv0 32)) (bvuge ?x48 ?x101) (bvult ?x48 ?x101))))
 (let (($x169 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x138 (ite $x169 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x45 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvmul (_ bv4 64) ?x45)))
 (let ((?x112 ((_ extract 63 32) ?x170)))
 (let (($x171 (= ?x112 ?x138)))
 (let (($x182 (and $x171 $x173)))
 (let (($x137 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x193 (and $x137 $x182)))
 (let (($x125 (= true $x193)))
 (let (($x49 (=> $x43 $x125)))
 (let (($x12 (= $x49 true)))
 (let (($x110 (= $x12 true)))
 (let (($x128 (= $x110 true)))
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x23 (= $x165 true)))
 (let (($x104 (= $x23 true)))
 (let (($x111 (= $x104 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x135)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x87)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (and $x58 $x91)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x53 $x156)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x59 $x57)))
 (let (($x117 (not $x168)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x74 $x8)))
 (let (($x126 (and (not $x66) $x117)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x76 $x41)))
 (let (($x147 (not $x93)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x65 $x22)))
 (let (($x68 (and (not $x71) $x147)))
 (let (($x103 (and (and (and (and (and (and $x68 $x126) $x62) $x94) $x80) $x140) $x61)))
 (let (($x158 (and $x103 $x64)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x26 (or false (or false (and (and true (or $x56 $x46)) (or $x67 $x11))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x26)))
 (let (($x162 (and $x89 $x158)))
 (let (($x109 (= $x162 true)))
 (let (($x10 (= $x109 true)))
 (let (($x113 (= $x10 true)))
 (let ((?x90 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x20 (= (_ bv0 2) ?x90)))
 (let (($x18 (= $x20 true)))
 (let (($x72 (= $x18 true)))
 (let (($x189 (and $x72 $x113)))
 (let (($x150 (and $x189 $x111)))
 (let (($x119 (and $x150 $x128)))
 (let (($x5 (and $x119 $x32)))
 (let (($x186 (and $x5 $x120)))
 (let (($x159 (and $x186 $x102)))
 (let (($x114 (and $x159 $x79)))
 (let (($x163 (and $x114 $x37)))
 (let (($x148 (and $x163 $x139)))
 (let (($x188 (and $x148 $x31)))
 (let (($x197 (and $x188 $x78)))
 (let (($x209 (and $x197 $x208)))
 (let (($x253 (and $x209 $x250)))
 (let (($x27 (and $x253 $x88)))
 (let (($x267 (and $x27 $x241)))
 (let (($x289 (and $x267 $x288)))
 (let (($x95 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x95 $x289)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x143 $x290)))
 (let (($x192 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x192 $x291)))
 (let (($x51 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd ?x48 (_ bv3 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x60 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x115 (or false (or false (and (and true (or $x86 $x60)) (or $x96 $x51))))))
 (let (($x21 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x14 (=> (and $x43 (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x293 (and $x14 $x292)))
 (let (($x300 (=> $x293 $x299)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x304 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x264 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x302 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x303 (bvneg ?x302)))
 (let (($x305 (= ?x303 ?x304)))
 (let (($x306 (= $x305 true)))
 (let (($x176 (forall ((input.ind-%var747X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var747X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var747X) (_ bv0 32)))))
 ))
 (let (($x265 (forall ((input.ind-%var746X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var746X)))
 (= $x256 false)))
 ))
 (let (($x270 (and $x265 $x176)))
 (let (($x275 (= $x270 true)))
 (let (($x231 (forall ((input.ind-%var741X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var741X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x42))))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x42 (_ bv2 32))) ?x215)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x42 (_ bv3 32))) ?x235)))
 (let ((?x200 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var741X)))
 (let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var741X)))
 (=> $x234 (= ?x200 ?x237)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var740X (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) input.ind-%var740X) (bvult input.ind-%var740X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var740X)))
 (= $x234 $x296))))
 ))
 (let (($x236 (and $x298 $x231)))
 (let (($x283 (= $x236 true)))
 (let (($x267 (forall ((input.ind-%var735X (_ BitVec 32)) )(let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var735X)))
 (=> $x234 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var735X) (_ bv0 32)))))
 ))
 (let (($x260 (forall ((input.ind-%var734X (_ BitVec 32)) )(let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var734X)))
 (= $x234 false)))
 ))
 (let (($x280 (and $x260 $x267)))
 (let (($x286 (= $x280 true)))
 (let (($x136 (forall ((input.ind-%var729X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var729X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var729X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var728X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var728X)))
 (= $x256 false)))
 ))
 (let (($x212 (and $x276 $x136)))
 (let (($x155 (= $x212 true)))
 (let ((?x222 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x222)))
 (let (($x252 (= ?x226 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x78 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x197 (= $x78 true)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x196 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x31 (= $x196 true)))
 (let (($x188 (= $x31 true)))
 (let (($x167 (= $x188 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x139 true)))
 (let (($x191 (= $x148 true)))
 (let (($x133 (= $x191 true)))
 (let (($x37 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x163 (= $x37 true)))
 (let (($x77 (= $x163 true)))
 (let (($x174 (= $x77 true)))
 (let (($x79 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x114 (= $x79 true)))
 (let (($x157 (= $x114 true)))
 (let (($x175 (= $x157 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x164 (bvsub ?x187 ?x123)))
 (let (($x186 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x164) (bvult ?x187 ?x164))))
 (let (($x105 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x32 (ite $x105 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x160 (bvmul (_ bv4 64) ?x129)))
 (let ((?x98 ((_ extract 63 32) ?x160)))
 (let (($x5 (= ?x98 ?x32)))
 (let (($x17 (and $x5 $x186)))
 (let (($x128 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x100 (and $x128 $x17)))
 (let (($x145 (= true $x100)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (=> $x134 $x145)))
 (let (($x159 (= $x102 true)))
 (let (($x179 (= $x159 true)))
 (let (($x178 (= $x179 true)))
 (let (($x173 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x182 (= $x173 true)))
 (let (($x193 (= $x182 true)))
 (let (($x125 (= $x193 true)))
 (let (($x151 (= $x134 true)))
 (let (($x101 (= $x151 true)))
 (let (($x106 (= $x101 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x104)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x165)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x158)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x64 $x162)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x135 $x109)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x91 $x156)))
 (let (($x130 (not $x80)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x53 $x58)))
 (let (($x140 (and (not $x50) $x130)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x195 $x62)))
 (let (($x190 (not $x194)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x22 $x71)))
 (let (($x152 (and (not $x108) $x190)))
 (let (($x45 (and (and (and (and (and (and $x152 $x140) $x87) $x103) $x10) $x189) $x23)))
 (let (($x170 (and $x45 $x111)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x168 (or false (or false (and (and true (or $x93 $x147)) (or $x8 $x66))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x168)))
 (let (($x112 (and $x126 $x170)))
 (let (($x169 (= $x112 true)))
 (let (($x81 (= $x169 true)))
 (let (($x138 (= $x81 true)))
 (let ((?x39 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x73 (= (_ bv0 2) ?x39)))
 (let (($x97 (= $x73 true)))
 (let (($x26 (= $x97 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x89 (and $x67 $x26)))
 (let (($x171 (and $x89 $x138)))
 (let (($x9 (and $x171 $x106)))
 (let (($x49 (and $x9 $x125)))
 (let (($x153 (and $x49 $x178)))
 (let (($x166 (and $x153 $x175)))
 (let (($x172 (and $x166 $x174)))
 (let (($x107 (and $x172 $x133)))
 (let (($x185 (and $x107 $x167)))
 (let (($x206 (and $x185 $x202)))
 (let (($x218 (and $x206 $x219)))
 (let (($x244 (and $x218 $x246)))
 (let (($x144 (and $x244 $x155)))
 (let (($x287 (and $x144 $x286)))
 (let (($x221 (and $x287 $x283)))
 (let (($x239 (and $x221 $x275)))
 (let (($x18 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x223 (and (not $x18) $x239)))
 (let (($x90 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x90 $x223)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x85 $x266)))
 (let (($x180 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x282 (and $x180 $x284)))
 (let (($x99 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x187 (_ bv3 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x28 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x25 (or false (or false (and (and true (or $x40 $x28)) (or $x183 $x99))))))
 (let (($x127 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x48 (=> (and $x134 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x285 (and $x48 $x282)))
 (let (($x307 (=> $x285 $x306)))
 (not $x307)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x304 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x264 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x302 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x303 (bvneg ?x302)))
 (let (($x305 (= ?x303 ?x304)))
 (let (($x306 (= $x305 true)))
 (let (($x176 (forall ((input.ind-%var747X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var747X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var747X) (_ bv0 32)))))
 ))
 (let (($x265 (forall ((input.ind-%var746X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var746X)))
 (= $x256 false)))
 ))
 (let (($x270 (and $x265 $x176)))
 (let (($x275 (= $x270 true)))
 (let (($x231 (forall ((input.ind-%var741X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var741X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x42))))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x42 (_ bv2 32))) ?x215)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x42 (_ bv3 32))) ?x235)))
 (let ((?x200 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var741X)))
 (let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var741X)))
 (=> $x234 (= ?x200 ?x237)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var740X (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) input.ind-%var740X) (bvult input.ind-%var740X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var740X)))
 (= $x234 $x296))))
 ))
 (let (($x236 (and $x298 $x231)))
 (let (($x283 (= $x236 true)))
 (let (($x267 (forall ((input.ind-%var735X (_ BitVec 32)) )(let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var735X)))
 (=> $x234 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var735X) (_ bv0 32)))))
 ))
 (let (($x260 (forall ((input.ind-%var734X (_ BitVec 32)) )(let (($x234 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var734X)))
 (= $x234 false)))
 ))
 (let (($x280 (and $x260 $x267)))
 (let (($x286 (= $x280 true)))
 (let (($x136 (forall ((input.ind-%var729X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var729X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var729X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var728X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var728X)))
 (= $x256 false)))
 ))
 (let (($x212 (and $x276 $x136)))
 (let (($x155 (= $x212 true)))
 (let ((?x222 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x222)))
 (let (($x252 (= ?x226 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x78 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x197 (= $x78 true)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x196 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x31 (= $x196 true)))
 (let (($x188 (= $x31 true)))
 (let (($x167 (= $x188 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x139 true)))
 (let (($x191 (= $x148 true)))
 (let (($x133 (= $x191 true)))
 (let (($x37 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x163 (= $x37 true)))
 (let (($x77 (= $x163 true)))
 (let (($x174 (= $x77 true)))
 (let (($x79 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x114 (= $x79 true)))
 (let (($x157 (= $x114 true)))
 (let (($x175 (= $x157 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x164 (bvsub ?x187 ?x123)))
 (let (($x186 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x164) (bvult ?x187 ?x164))))
 (let (($x105 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x32 (ite $x105 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x160 (bvmul (_ bv4 64) ?x129)))
 (let ((?x98 ((_ extract 63 32) ?x160)))
 (let (($x5 (= ?x98 ?x32)))
 (let (($x17 (and $x5 $x186)))
 (let (($x128 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x100 (and $x128 $x17)))
 (let (($x145 (= true $x100)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (=> $x134 $x145)))
 (let (($x159 (= $x102 true)))
 (let (($x179 (= $x159 true)))
 (let (($x178 (= $x179 true)))
 (let (($x173 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x182 (= $x173 true)))
 (let (($x193 (= $x182 true)))
 (let (($x125 (= $x193 true)))
 (let (($x151 (= $x134 true)))
 (let (($x101 (= $x151 true)))
 (let (($x106 (= $x101 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x104)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x165)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x158)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x64 $x162)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x135 $x109)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x91 $x156)))
 (let (($x130 (not $x80)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x53 $x58)))
 (let (($x140 (and (not $x50) $x130)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x195 $x62)))
 (let (($x190 (not $x194)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x22 $x71)))
 (let (($x152 (and (not $x108) $x190)))
 (let (($x45 (and (and (and (and (and (and $x152 $x140) $x87) $x103) $x10) $x189) $x23)))
 (let (($x170 (and $x45 $x111)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x168 (or false (or false (and (and true (or $x93 $x147)) (or $x8 $x66))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x168)))
 (let (($x112 (and $x126 $x170)))
 (let (($x169 (= $x112 true)))
 (let (($x81 (= $x169 true)))
 (let (($x138 (= $x81 true)))
 (let ((?x39 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x73 (= (_ bv0 2) ?x39)))
 (let (($x97 (= $x73 true)))
 (let (($x26 (= $x97 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x89 (and $x67 $x26)))
 (let (($x171 (and $x89 $x138)))
 (let (($x9 (and $x171 $x106)))
 (let (($x49 (and $x9 $x125)))
 (let (($x153 (and $x49 $x178)))
 (let (($x166 (and $x153 $x175)))
 (let (($x172 (and $x166 $x174)))
 (let (($x107 (and $x172 $x133)))
 (let (($x185 (and $x107 $x167)))
 (let (($x206 (and $x185 $x202)))
 (let (($x218 (and $x206 $x219)))
 (let (($x244 (and $x218 $x246)))
 (let (($x144 (and $x244 $x155)))
 (let (($x287 (and $x144 $x286)))
 (let (($x221 (and $x287 $x283)))
 (let (($x239 (and $x221 $x275)))
 (let (($x18 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x223 (and (not $x18) $x239)))
 (let (($x90 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x90 $x223)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x85 $x266)))
 (let (($x180 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x282 (and $x180 $x284)))
 (let (($x99 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x187 (_ bv3 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x28 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x35)))
 (let (($x25 (or false (or false (and (and true (or $x40 $x28)) (or $x183 $x99))))))
 (let (($x127 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x48 (=> (and $x134 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x285 (and $x48 $x282)))
 (let (($x307 (=> $x285 $x306)))
 (not $x307)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x248 (bvule ?x255 (_ bv3 32))))
 (let (($x300 (= $x248 true)))
 (let (($x146 (= $x300 true)))
 (let (($x292 (forall ((input.ind-%var771X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var771X)))
 (=> $x88 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var771X) (_ bv0 32)))))
 ))
 (let (($x271 (forall ((input.ind-%var770X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var770X)))
 (= $x88 false)))
 ))
 (let (($x203 (and $x271 $x292)))
 (let (($x63 (= $x203 true)))
 (let (($x211 (forall ((input.ind-%var765X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var765X)))
 (=> $x297 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var765X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var764X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var764X)))
 (= $x297 false)))
 ))
 (let (($x251 (and $x288 $x211)))
 (let (($x269 (= $x251 true)))
 (let (($x277 (forall ((input.ind-%var759X (_ BitVec 32)) )(let ((?x302 (bvadd (bvmul input.ind-%var759X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x302))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv2 32))) ?x306)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv3 32))) ?x15)))
 (let ((?x235 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var759X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var759X)))
 (=> $x297 (= ?x235 ?x205)))))))))
 ))
 (let (($x70 (forall ((input.ind-%var758X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var758X) (bvult input.ind-%var758X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var758X)))
 (= $x297 $x229))))
 ))
 (let (($x279 (and $x70 $x277)))
 (let (($x213 (= $x279 true)))
 (let (($x280 (forall ((input.ind-%var753X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var753X)))
 (=> $x88 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var753X) (_ bv0 32)))))
 ))
 (let (($x212 (forall ((input.ind-%var752X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var752X)))
 (= $x88 false)))
 ))
 (let (($x286 (and $x212 $x280)))
 (let (($x287 (= $x286 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x226)))
 (let (($x245 (= ?x252 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x208 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x197 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x31 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x188 (= $x31 true)))
 (let (($x167 (= $x188 true)))
 (let (($x185 (= $x167 true)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x157)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x79)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x145)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x100 $x102)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x17 $x159)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x160 $x98)))
 (let (($x32 (not $x105)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x128 $x119)))
 (let (($x82 (and (not $x129) $x32)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x182 $x193)))
 (let (($x49 (not $x125)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x189 $x118)))
 (let (($x110 (and (not $x173) $x49)))
 (let (($x172 (and (and (and (and (and (and $x110 $x82) $x141) $x186) $x179) $x153) $x114)))
 (let (($x139 (and $x172 $x175)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x45)))
 (let (($x101 (or false (or false (and (and true (or $x104 $x111)) (or $x169 $x81))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x148 (and $x9 $x139)))
 (let (($x191 (= $x148 true)))
 (let (($x133 (= $x191 true)))
 (let (($x107 (= $x133 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x162 (= $x158 true)))
 (let (($x109 (= $x162 true)))
 (let (($x10 (= $x109 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x61 true)))
 (let (($x116 (= $x103 true)))
 (let (($x135 (= $x116 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x140 true)))
 (let (($x177 (= $x150 true)))
 (let (($x87 (= $x177 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x91 (= (_ bv0 2) ?x24)))
 (let (($x156 (= $x91 true)))
 (let (($x80 (= $x156 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x71)))
 (let (($x190 (= ?x108 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (= $x190 true)))
 (let (($x53 (= $x152 true)))
 (let (($x94 (= ?x108 input.dst.llvm-%n)))
 (let (($x195 (= $x94 true)))
 (let (($x62 (= $x195 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x41 (bvsub ?x187 ?x123)))
 (let (($x74 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x41) (bvult ?x187 ?x41))))
 (let (($x89 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x76 (ite $x89 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x73 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x97 (bvmul (_ bv4 64) ?x73)))
 (let ((?x26 ((_ extract 63 32) ?x97)))
 (let (($x117 (= ?x26 ?x76)))
 (let (($x8 (and $x117 $x74)))
 (let (($x11 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x66 (and $x11 $x8)))
 (let (($x52 (= true $x66)))
 (let (($x122 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (=> $x122 $x52)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let (($x126 (= $x168 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x122 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x22 (and $x16 $x126)))
 (let (($x194 (and $x22 $x62)))
 (let (($x58 (and $x194 $x53)))
 (let (($x130 (and $x58 $x80)))
 (let (($x44 (and $x130 $x87)))
 (let (($x64 (and $x44 $x135)))
 (let (($x137 (and $x64 $x10)))
 (let (($x196 (and $x137 $x107)))
 (let (($x78 (and $x196 $x185)))
 (let (($x207 (and $x78 $x206)))
 (let (($x222 (and $x207 $x218)))
 (let (($x253 (and $x222 $x244)))
 (let (($x295 (and $x253 $x287)))
 (let (($x184 (and $x295 $x213)))
 (let (($x273 (and $x184 $x269)))
 (let (($x121 (and $x273 $x63)))
 (let (($x154 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and (not $x154) $x121)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and $x20 $x19)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x293 (and $x95 $x240)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x261 (and $x143 $x293)))
 (let (($x21 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd ?x187 (_ bv3 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x83 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x48 (or false (or false (and (and true (or $x96 $x83)) (or $x115 $x21))))))
 (let (($x180 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x48)))
 (let (($x131 (=> (and $x122 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x48)))
 (let (($x262 (and $x131 $x261)))
 (let (($x249 (=> $x262 $x146)))
 (not $x249)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x248 (bvule ?x255 (_ bv3 32))))
 (let (($x300 (= $x248 true)))
 (let (($x146 (= $x300 true)))
 (let (($x292 (forall ((input.ind-%var771X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var771X)))
 (=> $x88 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var771X) (_ bv0 32)))))
 ))
 (let (($x271 (forall ((input.ind-%var770X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var770X)))
 (= $x88 false)))
 ))
 (let (($x203 (and $x271 $x292)))
 (let (($x63 (= $x203 true)))
 (let (($x211 (forall ((input.ind-%var765X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var765X)))
 (=> $x297 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var765X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var764X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var764X)))
 (= $x297 false)))
 ))
 (let (($x251 (and $x288 $x211)))
 (let (($x269 (= $x251 true)))
 (let (($x277 (forall ((input.ind-%var759X (_ BitVec 32)) )(let ((?x302 (bvadd (bvmul input.ind-%var759X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x302))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv2 32))) ?x306)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x302 (_ bv3 32))) ?x15)))
 (let ((?x235 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var759X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var759X)))
 (=> $x297 (= ?x235 ?x205)))))))))
 ))
 (let (($x70 (forall ((input.ind-%var758X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var758X) (bvult input.ind-%var758X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var758X)))
 (= $x297 $x229))))
 ))
 (let (($x279 (and $x70 $x277)))
 (let (($x213 (= $x279 true)))
 (let (($x280 (forall ((input.ind-%var753X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var753X)))
 (=> $x88 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var753X) (_ bv0 32)))))
 ))
 (let (($x212 (forall ((input.ind-%var752X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var752X)))
 (= $x88 false)))
 ))
 (let (($x286 (and $x212 $x280)))
 (let (($x287 (= $x286 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x226)))
 (let (($x245 (= ?x252 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x208 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x197 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x31 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x188 (= $x31 true)))
 (let (($x167 (= $x188 true)))
 (let (($x185 (= $x167 true)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x157)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x79)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x145)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x100 $x102)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x17 $x159)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x160 $x98)))
 (let (($x32 (not $x105)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x128 $x119)))
 (let (($x82 (and (not $x129) $x32)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x182 $x193)))
 (let (($x49 (not $x125)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x189 $x118)))
 (let (($x110 (and (not $x173) $x49)))
 (let (($x172 (and (and (and (and (and (and $x110 $x82) $x141) $x186) $x179) $x153) $x114)))
 (let (($x139 (and $x172 $x175)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x45)))
 (let (($x101 (or false (or false (and (and true (or $x104 $x111)) (or $x169 $x81))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x148 (and $x9 $x139)))
 (let (($x191 (= $x148 true)))
 (let (($x133 (= $x191 true)))
 (let (($x107 (= $x133 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x162 (= $x158 true)))
 (let (($x109 (= $x162 true)))
 (let (($x10 (= $x109 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x61 true)))
 (let (($x116 (= $x103 true)))
 (let (($x135 (= $x116 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x140 true)))
 (let (($x177 (= $x150 true)))
 (let (($x87 (= $x177 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x91 (= (_ bv0 2) ?x24)))
 (let (($x156 (= $x91 true)))
 (let (($x80 (= $x156 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x71)))
 (let (($x190 (= ?x108 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (= $x190 true)))
 (let (($x53 (= $x152 true)))
 (let (($x94 (= ?x108 input.dst.llvm-%n)))
 (let (($x195 (= $x94 true)))
 (let (($x62 (= $x195 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x41 (bvsub ?x187 ?x123)))
 (let (($x74 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x41) (bvult ?x187 ?x41))))
 (let (($x89 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x76 (ite $x89 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x73 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x97 (bvmul (_ bv4 64) ?x73)))
 (let ((?x26 ((_ extract 63 32) ?x97)))
 (let (($x117 (= ?x26 ?x76)))
 (let (($x8 (and $x117 $x74)))
 (let (($x11 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x66 (and $x11 $x8)))
 (let (($x52 (= true $x66)))
 (let (($x122 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (=> $x122 $x52)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let (($x126 (= $x168 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x122 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x22 (and $x16 $x126)))
 (let (($x194 (and $x22 $x62)))
 (let (($x58 (and $x194 $x53)))
 (let (($x130 (and $x58 $x80)))
 (let (($x44 (and $x130 $x87)))
 (let (($x64 (and $x44 $x135)))
 (let (($x137 (and $x64 $x10)))
 (let (($x196 (and $x137 $x107)))
 (let (($x78 (and $x196 $x185)))
 (let (($x207 (and $x78 $x206)))
 (let (($x222 (and $x207 $x218)))
 (let (($x253 (and $x222 $x244)))
 (let (($x295 (and $x253 $x287)))
 (let (($x184 (and $x295 $x213)))
 (let (($x273 (and $x184 $x269)))
 (let (($x121 (and $x273 $x63)))
 (let (($x154 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and (not $x154) $x121)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and $x20 $x19)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x293 (and $x95 $x240)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x261 (and $x143 $x293)))
 (let (($x21 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd ?x187 (_ bv3 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x83 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x48 (or false (or false (and (and true (or $x96 $x83)) (or $x115 $x21))))))
 (let (($x180 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x48)))
 (let (($x131 (=> (and $x122 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x48)))
 (let (($x262 (and $x131 $x261)))
 (let (($x249 (=> $x262 $x146)))
 (not $x249)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 213 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x54 (bvsle ?x204 (_ bv3 32))))
 (let (($x181 (= $x54 true)))
 (let (($x243 (= $x181 true)))
 (let (($x257 (forall ((input.ind-%var795X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var795X)))
 (=> $x216 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var795X) (_ bv0 32)))))
 ))
 (let (($x296 (forall ((input.ind-%var794X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var794X)))
 (= $x216 false)))
 ))
 (let (($x230 (and $x296 $x257)))
 (let (($x144 (= $x230 true)))
 (let (($x265 (forall ((input.ind-%var789X (_ BitVec 32)) )(let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var789X)))
 (=> $x307 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var789X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var788X (_ BitVec 32)) )(let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var788X)))
 (= $x307 false)))
 ))
 (let (($x239 (and $x231 $x265)))
 (let (($x284 (= $x239 true)))
 (let (($x214 (forall ((input.ind-%var783X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var783X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x248))))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x248 (_ bv2 32))) ?x258)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x248 (_ bv3 32))) ?x298)))
 (let ((?x301 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var783X)))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var783X)))
 (=> $x307 (= ?x301 ?x260)))))))))
 ))
 (let (($x277 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x259 (and (bvule (_ bv0 32) input.ind-%var782X) (bvult input.ind-%var782X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var782X)))
 (= $x307 $x259))))
 ))
 (let (($x215 (and $x277 $x214)))
 (let (($x294 (= $x215 true)))
 (let (($x227 (forall ((input.ind-%var777X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var777X)))
 (=> $x216 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var777X) (_ bv0 32)))))
 ))
 (let (($x286 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var776X)))
 (= $x216 false)))
 ))
 (let (($x264 (and $x286 $x227)))
 (let (($x302 (= $x264 true)))
 (let ((?x252 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x252)))
 (let (($x246 (= ?x245 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x198 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x188 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x167 (= $x188 true)))
 (let (($x185 (= $x167 true)))
 (let (($x78 (= $x185 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x153)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x77)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (and $x163 $x100)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x186 $x145)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x160 $x98)))
 (let (($x32 (not $x105)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x119 $x129)))
 (let (($x166 (and (not $x5) $x32)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x182 $x193)))
 (let (($x49 (not $x125)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x23 $x106)))
 (let (($x128 (and (not $x12) $x49)))
 (let (($x139 (and (and (and (and (and (and $x128 $x166) $x141) $x120) $x102) $x179) $x178)))
 (let (($x148 (and $x139 $x174)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x189 (or false (or false (and (and true (or $x170 $x112)) (or $x138 $x171))))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x189)))
 (let (($x191 (and $x173 $x148)))
 (let (($x133 (= $x191 true)))
 (let (($x107 (= $x133 true)))
 (let (($x196 (= $x107 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x162 (= $x158 true)))
 (let (($x109 (= $x162 true)))
 (let (($x10 (= $x109 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x61 true)))
 (let (($x116 (= $x103 true)))
 (let (($x135 (= $x116 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x140 true)))
 (let (($x177 (= $x150 true)))
 (let (($x87 (= $x177 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x91 (= (_ bv0 2) ?x24)))
 (let (($x156 (= $x91 true)))
 (let (($x80 (= $x156 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x71)))
 (let (($x190 (= ?x108 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (= $x190 true)))
 (let (($x53 (= $x152 true)))
 (let (($x94 (= ?x108 input.dst.llvm-%n)))
 (let (($x195 (= $x94 true)))
 (let (($x62 (= $x195 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x93 (bvsub ?x187 ?x123)))
 (let (($x74 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x93) (bvult ?x187 ?x93))))
 (let (($x89 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x76 (ite $x89 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x73 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x97 (bvmul (_ bv4 64) ?x73)))
 (let ((?x26 ((_ extract 63 32) ?x97)))
 (let (($x117 (= ?x26 ?x76)))
 (let (($x8 (and $x117 $x74)))
 (let (($x11 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x66 (and $x11 $x8)))
 (let (($x52 (= true $x66)))
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (=> $x36 $x52)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let (($x126 (= $x168 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x36 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x22 (and $x16 $x126)))
 (let (($x194 (and $x22 $x62)))
 (let (($x58 (and $x194 $x53)))
 (let (($x130 (and $x58 $x80)))
 (let (($x44 (and $x130 $x87)))
 (let (($x64 (and $x44 $x135)))
 (let (($x137 (and $x64 $x10)))
 (let (($x31 (and $x137 $x196)))
 (let (($x197 (and $x31 $x78)))
 (let (($x208 (and $x197 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x65 (and $x276 $x302)))
 (let (($x6 (and $x65 $x294)))
 (let (($x290 (and $x6 $x284)))
 (let (($x224 (and $x290 $x144)))
 (let (($x278 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (and (not $x278) $x224)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and $x18 $x250)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x285 (and $x30 $x142)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x291 (and $x132 $x285)))
 (let (($x25 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd ?x187 (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x183 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x83)))
 (let (($x131 (or false (or false (and (and true (or $x51 $x183)) (or $x14 $x25))))))
 (let (($x143 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x131)))
 (let (($x86 (=> (and $x36 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x131)))
 (let (($x233 (and $x86 $x291)))
 (let (($x289 (=> $x233 $x243)))
 (not $x289)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x54 (bvsle ?x204 (_ bv3 32))))
 (let (($x181 (= $x54 true)))
 (let (($x243 (= $x181 true)))
 (let (($x257 (forall ((input.ind-%var795X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var795X)))
 (=> $x216 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var795X) (_ bv0 32)))))
 ))
 (let (($x296 (forall ((input.ind-%var794X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var794X)))
 (= $x216 false)))
 ))
 (let (($x230 (and $x296 $x257)))
 (let (($x144 (= $x230 true)))
 (let (($x265 (forall ((input.ind-%var789X (_ BitVec 32)) )(let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var789X)))
 (=> $x307 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var789X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var788X (_ BitVec 32)) )(let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var788X)))
 (= $x307 false)))
 ))
 (let (($x239 (and $x231 $x265)))
 (let (($x284 (= $x239 true)))
 (let (($x214 (forall ((input.ind-%var783X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var783X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x248))))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x248 (_ bv2 32))) ?x258)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x248 (_ bv3 32))) ?x298)))
 (let ((?x301 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var783X)))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var783X)))
 (=> $x307 (= ?x301 ?x260)))))))))
 ))
 (let (($x277 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x259 (and (bvule (_ bv0 32) input.ind-%var782X) (bvult input.ind-%var782X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var782X)))
 (= $x307 $x259))))
 ))
 (let (($x215 (and $x277 $x214)))
 (let (($x294 (= $x215 true)))
 (let (($x227 (forall ((input.ind-%var777X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var777X)))
 (=> $x216 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var777X) (_ bv0 32)))))
 ))
 (let (($x286 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var776X)))
 (= $x216 false)))
 ))
 (let (($x264 (and $x286 $x227)))
 (let (($x302 (= $x264 true)))
 (let ((?x252 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x252)))
 (let (($x246 (= ?x245 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x198 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x188 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x167 (= $x188 true)))
 (let (($x185 (= $x167 true)))
 (let (($x78 (= $x185 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x153)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x77)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (and $x163 $x100)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x186 $x145)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x160 $x98)))
 (let (($x32 (not $x105)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x119 $x129)))
 (let (($x166 (and (not $x5) $x32)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x182 $x193)))
 (let (($x49 (not $x125)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x23 $x106)))
 (let (($x128 (and (not $x12) $x49)))
 (let (($x139 (and (and (and (and (and (and $x128 $x166) $x141) $x120) $x102) $x179) $x178)))
 (let (($x148 (and $x139 $x174)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x189 (or false (or false (and (and true (or $x170 $x112)) (or $x138 $x171))))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x189)))
 (let (($x191 (and $x173 $x148)))
 (let (($x133 (= $x191 true)))
 (let (($x107 (= $x133 true)))
 (let (($x196 (= $x107 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x162 (= $x158 true)))
 (let (($x109 (= $x162 true)))
 (let (($x10 (= $x109 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x61 true)))
 (let (($x116 (= $x103 true)))
 (let (($x135 (= $x116 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x140 true)))
 (let (($x177 (= $x150 true)))
 (let (($x87 (= $x177 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x91 (= (_ bv0 2) ?x24)))
 (let (($x156 (= $x91 true)))
 (let (($x80 (= $x156 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x71)))
 (let (($x190 (= ?x108 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (= $x190 true)))
 (let (($x53 (= $x152 true)))
 (let (($x94 (= ?x108 input.dst.llvm-%n)))
 (let (($x195 (= $x94 true)))
 (let (($x62 (= $x195 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x93 (bvsub ?x187 ?x123)))
 (let (($x74 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x93) (bvult ?x187 ?x93))))
 (let (($x89 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x76 (ite $x89 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x73 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x97 (bvmul (_ bv4 64) ?x73)))
 (let ((?x26 ((_ extract 63 32) ?x97)))
 (let (($x117 (= ?x26 ?x76)))
 (let (($x8 (and $x117 $x74)))
 (let (($x11 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x66 (and $x11 $x8)))
 (let (($x52 (= true $x66)))
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (=> $x36 $x52)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let (($x126 (= $x168 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x36 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x22 (and $x16 $x126)))
 (let (($x194 (and $x22 $x62)))
 (let (($x58 (and $x194 $x53)))
 (let (($x130 (and $x58 $x80)))
 (let (($x44 (and $x130 $x87)))
 (let (($x64 (and $x44 $x135)))
 (let (($x137 (and $x64 $x10)))
 (let (($x31 (and $x137 $x196)))
 (let (($x197 (and $x31 $x78)))
 (let (($x208 (and $x197 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x65 (and $x276 $x302)))
 (let (($x6 (and $x65 $x294)))
 (let (($x290 (and $x6 $x284)))
 (let (($x224 (and $x290 $x144)))
 (let (($x278 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (and (not $x278) $x224)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and $x18 $x250)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x285 (and $x30 $x142)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x291 (and $x132 $x285)))
 (let (($x25 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd ?x187 (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x183 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x83)))
 (let (($x131 (or false (or false (and (and true (or $x51 $x183)) (or $x14 $x25))))))
 (let (($x143 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x131)))
 (let (($x86 (=> (and $x36 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x131)))
 (let (($x233 (and $x86 $x291)))
 (let (($x289 (=> $x233 $x243)))
 (not $x289)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 213 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x266 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x283 (bvsge ?x266 (_ bv0 32))))
 (let (($x247 (= $x283 true)))
 (let (($x200 (= $x247 true)))
 (let (($x263 (forall ((input.ind-%var819X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var819X)))
 (=> $x242 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var819X) (_ bv0 32)))))
 ))
 (let (($x176 (forall ((input.ind-%var818X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var818X)))
 (= $x242 false)))
 ))
 (let (($x306 (and $x176 $x263)))
 (let (($x295 (= $x306 true)))
 (let (($x271 (forall ((input.ind-%var813X (_ BitVec 32)) )(let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var813X)))
 (=> $x43 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var813X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var812X (_ BitVec 32)) )(let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var812X)))
 (= $x43 false)))
 ))
 (let (($x121 (and $x211 $x271)))
 (let (($x293 (= $x121 true)))
 (let (($x279 (forall ((input.ind-%var807X (_ BitVec 32)) )(let ((?x54 (bvadd (bvmul input.ind-%var807X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x54))))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv2 32))) ?x268)))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv3 32))) ?x308)))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var807X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var807X)))
 (=> $x43 (= ?x238 ?x228)))))))))
 ))
 (let (($x214 (forall ((input.ind-%var806X (_ BitVec 32)) )(let (($x155 (and (bvule (_ bv0 32) input.ind-%var806X) (bvult input.ind-%var806X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var806X)))
 (= $x43 $x155))))
 ))
 (let (($x184 (and $x214 $x279)))
 (let (($x149 (= $x184 true)))
 (let (($x13 (forall ((input.ind-%var801X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var801X)))
 (=> $x242 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var801X) (_ bv0 32)))))
 ))
 (let (($x264 (forall ((input.ind-%var800X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var800X)))
 (= $x242 false)))
 ))
 (let (($x255 (and $x264 $x13)))
 (let (($x248 (= $x255 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x245)))
 (let (($x244 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x202 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x167 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x185 (= $x167 true)))
 (let (($x78 (= $x185 true)))
 (let (($x197 (= $x78 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x179)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x157)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x186)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (and $x172 $x163)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x120 $x17)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x160 $x98)))
 (let (($x32 (not $x105)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x129 $x5)))
 (let (($x79 (and (not $x82) $x32)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x182 $x193)))
 (let (($x49 (not $x125)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x104 $x118)))
 (let (($x119 (and (not $x110) $x49)))
 (let (($x148 (and (and (and (and (and (and $x119 $x79) $x141) $x37) $x100) $x102) $x159)))
 (let (($x191 (and $x148 $x175)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x23 (or false (or false (and (and true (or $x169 $x81)) (or $x151 $x101))))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x133 (and $x12 $x191)))
 (let (($x107 (= $x133 true)))
 (let (($x196 (= $x107 true)))
 (let (($x31 (= $x196 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x162 (= $x158 true)))
 (let (($x109 (= $x162 true)))
 (let (($x10 (= $x109 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x61 true)))
 (let (($x116 (= $x103 true)))
 (let (($x135 (= $x116 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x140 true)))
 (let (($x177 (= $x150 true)))
 (let (($x87 (= $x177 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x91 (= (_ bv0 2) ?x24)))
 (let (($x156 (= $x91 true)))
 (let (($x80 (= $x156 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x71)))
 (let (($x190 (= ?x108 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (= $x190 true)))
 (let (($x53 (= $x152 true)))
 (let (($x94 (= ?x108 input.dst.llvm-%n)))
 (let (($x195 (= $x94 true)))
 (let (($x62 (= $x195 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x41 (bvsub ?x187 ?x123)))
 (let (($x74 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x41) (bvult ?x187 ?x41))))
 (let (($x89 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x76 (ite $x89 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x73 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x97 (bvmul (_ bv4 64) ?x73)))
 (let ((?x26 ((_ extract 63 32) ?x97)))
 (let (($x117 (= ?x26 ?x76)))
 (let (($x8 (and $x117 $x74)))
 (let (($x11 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x66 (and $x11 $x8)))
 (let (($x52 (= true $x66)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (=> $x29 $x52)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let (($x126 (= $x168 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x29 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x22 (and $x16 $x126)))
 (let (($x194 (and $x22 $x62)))
 (let (($x58 (and $x194 $x53)))
 (let (($x130 (and $x58 $x80)))
 (let (($x44 (and $x130 $x87)))
 (let (($x64 (and $x44 $x135)))
 (let (($x137 (and $x64 $x10)))
 (let (($x188 (and $x137 $x31)))
 (let (($x198 (and $x188 $x197)))
 (let (($x209 (and $x198 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x212 (and $x252 $x276)))
 (let (($x237 (and $x212 $x248)))
 (let (($x304 (and $x237 $x149)))
 (let (($x223 (and $x304 $x293)))
 (let (($x232 (and $x223 $x295)))
 (let (($x282 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (and (not $x282) $x232)))
 (let (($x154 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x213 (and $x154 $x272)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x262 (and $x90 $x213)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x85 $x262)))
 (let (($x48 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x183 (bvadd ?x187 (_ bv3 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x183)))
 (let (($x115 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x183)))
 (let (($x86 (or false (or false (and (and true (or $x38 $x115)) (or $x127 $x48))))))
 (let (($x132 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x86)))
 (let (($x35 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x86)))
 (let (($x201 (and $x35 $x275)))
 (let (($x220 (=> $x201 $x200)))
 (not $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x266 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x283 (bvsge ?x266 (_ bv0 32))))
 (let (($x247 (= $x283 true)))
 (let (($x200 (= $x247 true)))
 (let (($x263 (forall ((input.ind-%var819X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var819X)))
 (=> $x242 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var819X) (_ bv0 32)))))
 ))
 (let (($x176 (forall ((input.ind-%var818X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var818X)))
 (= $x242 false)))
 ))
 (let (($x306 (and $x176 $x263)))
 (let (($x295 (= $x306 true)))
 (let (($x271 (forall ((input.ind-%var813X (_ BitVec 32)) )(let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var813X)))
 (=> $x43 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var813X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var812X (_ BitVec 32)) )(let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var812X)))
 (= $x43 false)))
 ))
 (let (($x121 (and $x211 $x271)))
 (let (($x293 (= $x121 true)))
 (let (($x279 (forall ((input.ind-%var807X (_ BitVec 32)) )(let ((?x54 (bvadd (bvmul input.ind-%var807X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x54))))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv2 32))) ?x268)))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv3 32))) ?x308)))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var807X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var807X)))
 (=> $x43 (= ?x238 ?x228)))))))))
 ))
 (let (($x214 (forall ((input.ind-%var806X (_ BitVec 32)) )(let (($x155 (and (bvule (_ bv0 32) input.ind-%var806X) (bvult input.ind-%var806X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var806X)))
 (= $x43 $x155))))
 ))
 (let (($x184 (and $x214 $x279)))
 (let (($x149 (= $x184 true)))
 (let (($x13 (forall ((input.ind-%var801X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var801X)))
 (=> $x242 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var801X) (_ bv0 32)))))
 ))
 (let (($x264 (forall ((input.ind-%var800X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var800X)))
 (= $x242 false)))
 ))
 (let (($x255 (and $x264 $x13)))
 (let (($x248 (= $x255 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x245)))
 (let (($x244 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x202 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x167 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x185 (= $x167 true)))
 (let (($x78 (= $x185 true)))
 (let (($x197 (= $x78 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x179)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x157)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x186)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (and $x172 $x163)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x120 $x17)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x160 $x98)))
 (let (($x32 (not $x105)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x129 $x5)))
 (let (($x79 (and (not $x82) $x32)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x182 $x193)))
 (let (($x49 (not $x125)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x104 $x118)))
 (let (($x119 (and (not $x110) $x49)))
 (let (($x148 (and (and (and (and (and (and $x119 $x79) $x141) $x37) $x100) $x102) $x159)))
 (let (($x191 (and $x148 $x175)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x23 (or false (or false (and (and true (or $x169 $x81)) (or $x151 $x101))))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x133 (and $x12 $x191)))
 (let (($x107 (= $x133 true)))
 (let (($x196 (= $x107 true)))
 (let (($x31 (= $x196 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x162 (= $x158 true)))
 (let (($x109 (= $x162 true)))
 (let (($x10 (= $x109 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x61 true)))
 (let (($x116 (= $x103 true)))
 (let (($x135 (= $x116 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x140 true)))
 (let (($x177 (= $x150 true)))
 (let (($x87 (= $x177 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x91 (= (_ bv0 2) ?x24)))
 (let (($x156 (= $x91 true)))
 (let (($x80 (= $x156 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x71)))
 (let (($x190 (= ?x108 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (= $x190 true)))
 (let (($x53 (= $x152 true)))
 (let (($x94 (= ?x108 input.dst.llvm-%n)))
 (let (($x195 (= $x94 true)))
 (let (($x62 (= $x195 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x41 (bvsub ?x187 ?x123)))
 (let (($x74 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x41) (bvult ?x187 ?x41))))
 (let (($x89 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x76 (ite $x89 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x73 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x97 (bvmul (_ bv4 64) ?x73)))
 (let ((?x26 ((_ extract 63 32) ?x97)))
 (let (($x117 (= ?x26 ?x76)))
 (let (($x8 (and $x117 $x74)))
 (let (($x11 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x66 (and $x11 $x8)))
 (let (($x52 (= true $x66)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (=> $x29 $x52)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let (($x126 (= $x168 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x29 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x22 (and $x16 $x126)))
 (let (($x194 (and $x22 $x62)))
 (let (($x58 (and $x194 $x53)))
 (let (($x130 (and $x58 $x80)))
 (let (($x44 (and $x130 $x87)))
 (let (($x64 (and $x44 $x135)))
 (let (($x137 (and $x64 $x10)))
 (let (($x188 (and $x137 $x31)))
 (let (($x198 (and $x188 $x197)))
 (let (($x209 (and $x198 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x212 (and $x252 $x276)))
 (let (($x237 (and $x212 $x248)))
 (let (($x304 (and $x237 $x149)))
 (let (($x223 (and $x304 $x293)))
 (let (($x232 (and $x223 $x295)))
 (let (($x282 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (and (not $x282) $x232)))
 (let (($x154 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x213 (and $x154 $x272)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x262 (and $x90 $x213)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x85 $x262)))
 (let (($x48 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x183 (bvadd ?x187 (_ bv3 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x183)))
 (let (($x115 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x183)))
 (let (($x86 (or false (or false (and (and true (or $x38 $x115)) (or $x127 $x48))))))
 (let (($x132 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x86)))
 (let (($x35 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x86)))
 (let (($x201 (and $x35 $x275)))
 (let (($x220 (=> $x201 $x200)))
 (not $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (bvule ?x240 (_ bv3 32))))
 (let (($x256 (= $x269 true)))
 (let (($x229 (= $x256 true)))
 (let (($x299 (forall ((input.ind-%var843X (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var843X)))
 (=> $x205 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var843X) (_ bv0 32)))))
 ))
 (let (($x292 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var842X)))
 (= $x205 false)))
 ))
 (let (($x258 (and $x292 $x299)))
 (let (($x65 (= $x258 true)))
 (let (($x296 (forall ((input.ind-%var837X (_ BitVec 32)) )(let ((?x146 (bvadd (bvmul input.ind-%var837X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x146))))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv2 32))) ?x236)))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv3 32))) ?x142)))
 (let ((?x287 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var837X)))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var837X)))
 (=> $x134 (= ?x287 ?x284)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var836X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var836X) (bvult input.ind-%var836X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var836X)))
 (= $x134 $x232))))
 ))
 (let (($x224 (and $x213 $x296)))
 (let (($x285 (= $x224 true)))
 (let (($x210 (forall ((input.ind-%var831X (_ BitVec 32)) )(let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var831X)))
 (=> $x134 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var831X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var830X (_ BitVec 32)) )(let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var830X)))
 (= $x134 false)))
 ))
 (let (($x211 (and $x181 $x210)))
 (let (($x273 (= $x211 true)))
 (let (($x221 (forall ((input.ind-%var825X (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var825X)))
 (=> $x205 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var825X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var824X (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var824X)))
 (= $x205 false)))
 ))
 (let (($x204 (and $x255 $x221)))
 (let (($x54 (= $x204 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x246)))
 (let (($x253 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x206 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x185 true)))
 (let (($x197 (= $x78 true)))
 (let (($x198 (= $x197 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x174 (bvsub ?x187 ?x123)))
 (let (($x179 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x174) (bvult ?x187 ?x174))))
 (let (($x153 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x145 (ite $x153 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x163 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x163)))
 (let ((?x100 ((_ extract 63 32) ?x17)))
 (let (($x102 (= ?x100 ?x145)))
 (let (($x175 (and $x102 $x179)))
 (let (($x172 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x191 (and $x172 $x175)))
 (let (($x133 (= true $x191)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (=> $x29 $x133)))
 (let (($x196 (= $x107 true)))
 (let (($x31 (= $x196 true)))
 (let (($x188 (= $x31 true)))
 (let (($x164 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x141 (= $x164 true)))
 (let (($x178 (= $x141 true)))
 (let (($x114 (= $x178 true)))
 (let (($x105 (= $x29 true)))
 (let (($x32 (= $x105 true)))
 (let (($x79 (= $x32 true)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x118)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x12)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x173)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x171 $x101)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x138 $x9)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x162 $x109)))
 (let (($x137 (not $x10)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x135 $x64)))
 (let (($x170 (and (not $x158) $x137)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x177 $x87)))
 (let (($x61 (not $x44)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x71 $x108)))
 (let (($x116 (and (not $x150) $x61)))
 (let (($x119 (and (and (and (and (and (and $x116 $x170) $x112) $x81) $x189) $x23) $x104)))
 (let (($x129 (and $x119 $x110)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x80 (or false (or false (and (and true (or $x194 $x190)) (or $x58 $x50))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x5 (and $x140 $x129)))
 (let (($x82 (= $x5 true)))
 (let (($x166 (= $x82 true)))
 (let (($x160 (= $x166 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x52 true)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x147)))
 (let (($x74 (= $x68 true)))
 (let (($x8 (= $x74 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x11)))
 (let (($x7 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x7 true)))
 (let (($x117 (= $x76 true)))
 (let (($x73 (= ?x39 input.dst.llvm-%n)))
 (let (($x97 (= $x73 true)))
 (let (($x26 (= $x97 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x33 (and $x47 $x16)))
 (let (($x89 (and $x33 $x26)))
 (let (($x93 (and $x89 $x117)))
 (let (($x66 (and $x93 $x8)))
 (let (($x126 (and $x66 $x168)))
 (let (($x98 (and $x126 $x160)))
 (let (($x77 (and $x98 $x79)))
 (let (($x37 (and $x77 $x114)))
 (let (($x167 (and $x37 $x188)))
 (let (($x202 (and $x167 $x198)))
 (let (($x219 (and $x202 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x286 (and $x245 $x212)))
 (let (($x288 (and $x286 $x54)))
 (let (($x251 (and $x288 $x273)))
 (let (($x19 (and $x251 $x285)))
 (let (($x27 (and $x19 $x65)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and (not $x261) $x27)))
 (let (($x278 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x294 (and $x278 $x136)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x20 $x294)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x63 (and $x95 $x233)))
 (let (($x131 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd ?x187 (_ bv3 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x14 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x35 (or false (or false (and (and true (or $x99 $x14)) (or $x180 $x131))))))
 (let (($x85 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x28 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x267 (and $x28 $x63)))
 (let (($x217 (=> $x267 $x229)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (bvule ?x240 (_ bv3 32))))
 (let (($x256 (= $x269 true)))
 (let (($x229 (= $x256 true)))
 (let (($x299 (forall ((input.ind-%var843X (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var843X)))
 (=> $x205 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var843X) (_ bv0 32)))))
 ))
 (let (($x292 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var842X)))
 (= $x205 false)))
 ))
 (let (($x258 (and $x292 $x299)))
 (let (($x65 (= $x258 true)))
 (let (($x296 (forall ((input.ind-%var837X (_ BitVec 32)) )(let ((?x146 (bvadd (bvmul input.ind-%var837X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x146))))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv2 32))) ?x236)))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv3 32))) ?x142)))
 (let ((?x287 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var837X)))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var837X)))
 (=> $x134 (= ?x287 ?x284)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var836X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var836X) (bvult input.ind-%var836X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var836X)))
 (= $x134 $x232))))
 ))
 (let (($x224 (and $x213 $x296)))
 (let (($x285 (= $x224 true)))
 (let (($x210 (forall ((input.ind-%var831X (_ BitVec 32)) )(let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var831X)))
 (=> $x134 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var831X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var830X (_ BitVec 32)) )(let (($x134 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var830X)))
 (= $x134 false)))
 ))
 (let (($x211 (and $x181 $x210)))
 (let (($x273 (= $x211 true)))
 (let (($x221 (forall ((input.ind-%var825X (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var825X)))
 (=> $x205 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var825X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var824X (_ BitVec 32)) )(let (($x205 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var824X)))
 (= $x205 false)))
 ))
 (let (($x204 (and $x255 $x221)))
 (let (($x54 (= $x204 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x246)))
 (let (($x253 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x206 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x185 true)))
 (let (($x197 (= $x78 true)))
 (let (($x198 (= $x197 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x174 (bvsub ?x187 ?x123)))
 (let (($x179 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x174) (bvult ?x187 ?x174))))
 (let (($x153 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x145 (ite $x153 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x163 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x163)))
 (let ((?x100 ((_ extract 63 32) ?x17)))
 (let (($x102 (= ?x100 ?x145)))
 (let (($x175 (and $x102 $x179)))
 (let (($x172 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x191 (and $x172 $x175)))
 (let (($x133 (= true $x191)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (=> $x29 $x133)))
 (let (($x196 (= $x107 true)))
 (let (($x31 (= $x196 true)))
 (let (($x188 (= $x31 true)))
 (let (($x164 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x141 (= $x164 true)))
 (let (($x178 (= $x141 true)))
 (let (($x114 (= $x178 true)))
 (let (($x105 (= $x29 true)))
 (let (($x32 (= $x105 true)))
 (let (($x79 (= $x32 true)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x118)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x12)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x173)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x171 $x101)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x138 $x9)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x162 $x109)))
 (let (($x137 (not $x10)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x135 $x64)))
 (let (($x170 (and (not $x158) $x137)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x177 $x87)))
 (let (($x61 (not $x44)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x71 $x108)))
 (let (($x116 (and (not $x150) $x61)))
 (let (($x119 (and (and (and (and (and (and $x116 $x170) $x112) $x81) $x189) $x23) $x104)))
 (let (($x129 (and $x119 $x110)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x80 (or false (or false (and (and true (or $x194 $x190)) (or $x58 $x50))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x5 (and $x140 $x129)))
 (let (($x82 (= $x5 true)))
 (let (($x166 (= $x82 true)))
 (let (($x160 (= $x166 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x52 true)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x147)))
 (let (($x74 (= $x68 true)))
 (let (($x8 (= $x74 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x11)))
 (let (($x7 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x7 true)))
 (let (($x117 (= $x76 true)))
 (let (($x73 (= ?x39 input.dst.llvm-%n)))
 (let (($x97 (= $x73 true)))
 (let (($x26 (= $x97 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x33 (and $x47 $x16)))
 (let (($x89 (and $x33 $x26)))
 (let (($x93 (and $x89 $x117)))
 (let (($x66 (and $x93 $x8)))
 (let (($x126 (and $x66 $x168)))
 (let (($x98 (and $x126 $x160)))
 (let (($x77 (and $x98 $x79)))
 (let (($x37 (and $x77 $x114)))
 (let (($x167 (and $x37 $x188)))
 (let (($x202 (and $x167 $x198)))
 (let (($x219 (and $x202 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x286 (and $x245 $x212)))
 (let (($x288 (and $x286 $x54)))
 (let (($x251 (and $x288 $x273)))
 (let (($x19 (and $x251 $x285)))
 (let (($x27 (and $x19 $x65)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and (not $x261) $x27)))
 (let (($x278 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x294 (and $x278 $x136)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x20 $x294)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x63 (and $x95 $x233)))
 (let (($x131 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd ?x187 (_ bv3 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x14 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x35 (or false (or false (and (and true (or $x99 $x14)) (or $x180 $x131))))))
 (let (($x85 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x28 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x267 (and $x28 $x63)))
 (let (($x217 (=> $x267 $x229)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 213 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x275 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x6 (bvsle ?x275 (_ bv3 32))))
 (let (($x88 (= $x6 true)))
 (let (($x259 (= $x88 true)))
 (let (($x225 (forall ((input.ind-%var867X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var867X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var867X) (_ bv0 32)))))
 ))
 (let (($x305 (forall ((input.ind-%var866X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var866X)))
 (= $x260 false)))
 ))
 (let (($x243 (and $x305 $x225)))
 (let (($x237 (= $x243 true)))
 (let (($x231 (forall ((input.ind-%var861X (_ BitVec 32)) )(let ((?x201 (bvadd (bvmul input.ind-%var861X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x201))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv2 32))) ?x293)))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv3 32))) ?x257)))
 (let ((?x265 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var861X)))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var861X)))
 (=> $x272 (= ?x265 ?x15)))))))))
 ))
 (let (($x294 (forall ((input.ind-%var860X (_ BitVec 32)) )(let (($x27 (and (bvule (_ bv0 32) input.ind-%var860X) (bvult input.ind-%var860X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var860X)))
 (= $x272 $x27))))
 ))
 (let (($x220 (and $x294 $x231)))
 (let (($x254 (= $x220 true)))
 (let (($x142 (forall ((input.ind-%var855X (_ BitVec 32)) )(let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var855X)))
 (=> $x272 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var855X) (_ bv0 32)))))
 ))
 (let (($x146 (forall ((input.ind-%var854X (_ BitVec 32)) )(let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var854X)))
 (= $x272 false)))
 ))
 (let (($x284 (and $x146 $x142)))
 (let (($x290 (= $x284 true)))
 (let (($x211 (forall ((input.ind-%var849X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var849X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var849X) (_ bv0 32)))))
 ))
 (let (($x204 (forall ((input.ind-%var848X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var848X)))
 (= $x260 false)))
 ))
 (let (($x273 (and $x204 $x211)))
 (let (($x251 (= $x273 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x244)))
 (let (($x276 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (= $x78 true)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x174 (bvsub ?x187 ?x123)))
 (let (($x175 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x174) (bvult ?x187 ?x174))))
 (let (($x145 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x102 (ite $x145 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x17 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x100 (bvmul (_ bv4 64) ?x17)))
 (let ((?x153 ((_ extract 63 32) ?x100)))
 (let (($x157 (= ?x153 ?x102)))
 (let (($x191 (and $x157 $x175)))
 (let (($x186 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x133 (and $x186 $x191)))
 (let (($x107 (= true $x133)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (=> $x29 $x107)))
 (let (($x31 (= $x196 true)))
 (let (($x188 (= $x31 true)))
 (let (($x167 (= $x188 true)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x178 (= $x141 true)))
 (let (($x114 (= $x178 true)))
 (let (($x37 (= $x114 true)))
 (let (($x32 (= $x29 true)))
 (let (($x79 (= $x32 true)))
 (let (($x77 (= $x79 true)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x23)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x125)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x138)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x193 $x171)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x81 $x151)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x162 $x109)))
 (let (($x137 (not $x10)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x64 $x158)))
 (let (($x128 (and (not $x111) $x137)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x177 $x87)))
 (let (($x61 (not $x44)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x195 $x130)))
 (let (($x135 (and (not $x103) $x61)))
 (let (($x129 (and (and (and (and (and (and $x135 $x128) $x112) $x169) $x101) $x189) $x173)))
 (let (($x5 (and $x129 $x49)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x71 (or false (or false (and (and true (or $x152 $x53)) (or $x24 $x91))))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x82 (and $x150 $x5)))
 (let (($x166 (= $x82 true)))
 (let (($x160 (= $x166 true)))
 (let (($x98 (= $x160 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x52 true)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x147)))
 (let (($x74 (= $x68 true)))
 (let (($x8 (= $x74 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x11)))
 (let (($x7 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x7 true)))
 (let (($x117 (= $x76 true)))
 (let (($x73 (= ?x39 input.dst.llvm-%n)))
 (let (($x97 (= $x73 true)))
 (let (($x26 (= $x97 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x33 (and $x47 $x16)))
 (let (($x89 (and $x33 $x26)))
 (let (($x93 (and $x89 $x117)))
 (let (($x66 (and $x93 $x8)))
 (let (($x126 (and $x66 $x168)))
 (let (($x105 (and $x126 $x98)))
 (let (($x164 (and $x105 $x77)))
 (let (($x139 (and $x164 $x37)))
 (let (($x185 (and $x139 $x167)))
 (let (($x206 (and $x185 $x202)))
 (let (($x218 (and $x206 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x264 (and $x246 $x286)))
 (let (($x295 (and $x264 $x251)))
 (let (($x239 (and $x295 $x290)))
 (let (($x200 (and $x239 $x254)))
 (let (($x234 (and $x200 $x237)))
 (let (($x291 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (and (not $x291) $x234)))
 (let (($x282 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x308 (and $x282 $x263)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x184 (and $x18 $x308)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x215 (and $x30 $x184)))
 (let (($x86 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd ?x187 (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x127 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x28 (or false (or false (and (and true (or $x21 $x127)) (or $x143 $x86))))))
 (let (($x95 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x28)))
 (let (($x83 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x28)))
 (let (($x235 (and $x83 $x215)))
 (let (($x270 (=> $x235 $x259)))
 (not $x270)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x275 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x6 (bvsle ?x275 (_ bv3 32))))
 (let (($x88 (= $x6 true)))
 (let (($x259 (= $x88 true)))
 (let (($x225 (forall ((input.ind-%var867X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var867X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var867X) (_ bv0 32)))))
 ))
 (let (($x305 (forall ((input.ind-%var866X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var866X)))
 (= $x260 false)))
 ))
 (let (($x243 (and $x305 $x225)))
 (let (($x237 (= $x243 true)))
 (let (($x231 (forall ((input.ind-%var861X (_ BitVec 32)) )(let ((?x201 (bvadd (bvmul input.ind-%var861X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x201))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv2 32))) ?x293)))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x201 (_ bv3 32))) ?x257)))
 (let ((?x265 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var861X)))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var861X)))
 (=> $x272 (= ?x265 ?x15)))))))))
 ))
 (let (($x294 (forall ((input.ind-%var860X (_ BitVec 32)) )(let (($x27 (and (bvule (_ bv0 32) input.ind-%var860X) (bvult input.ind-%var860X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var860X)))
 (= $x272 $x27))))
 ))
 (let (($x220 (and $x294 $x231)))
 (let (($x254 (= $x220 true)))
 (let (($x142 (forall ((input.ind-%var855X (_ BitVec 32)) )(let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var855X)))
 (=> $x272 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var855X) (_ bv0 32)))))
 ))
 (let (($x146 (forall ((input.ind-%var854X (_ BitVec 32)) )(let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var854X)))
 (= $x272 false)))
 ))
 (let (($x284 (and $x146 $x142)))
 (let (($x290 (= $x284 true)))
 (let (($x211 (forall ((input.ind-%var849X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var849X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var849X) (_ bv0 32)))))
 ))
 (let (($x204 (forall ((input.ind-%var848X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var848X)))
 (= $x260 false)))
 ))
 (let (($x273 (and $x204 $x211)))
 (let (($x251 (= $x273 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x244)))
 (let (($x276 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (= $x78 true)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x174 (bvsub ?x187 ?x123)))
 (let (($x175 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x174) (bvult ?x187 ?x174))))
 (let (($x145 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x102 (ite $x145 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x17 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x100 (bvmul (_ bv4 64) ?x17)))
 (let ((?x153 ((_ extract 63 32) ?x100)))
 (let (($x157 (= ?x153 ?x102)))
 (let (($x191 (and $x157 $x175)))
 (let (($x186 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x133 (and $x186 $x191)))
 (let (($x107 (= true $x133)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (=> $x29 $x107)))
 (let (($x31 (= $x196 true)))
 (let (($x188 (= $x31 true)))
 (let (($x167 (= $x188 true)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x178 (= $x141 true)))
 (let (($x114 (= $x178 true)))
 (let (($x37 (= $x114 true)))
 (let (($x32 (= $x29 true)))
 (let (($x79 (= $x32 true)))
 (let (($x77 (= $x79 true)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x23)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x125)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x138)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x193 $x171)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x81 $x151)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x162 $x109)))
 (let (($x137 (not $x10)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x64 $x158)))
 (let (($x128 (and (not $x111) $x137)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x177 $x87)))
 (let (($x61 (not $x44)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x195 $x130)))
 (let (($x135 (and (not $x103) $x61)))
 (let (($x129 (and (and (and (and (and (and $x135 $x128) $x112) $x169) $x101) $x189) $x173)))
 (let (($x5 (and $x129 $x49)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x71 (or false (or false (and (and true (or $x152 $x53)) (or $x24 $x91))))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x82 (and $x150 $x5)))
 (let (($x166 (= $x82 true)))
 (let (($x160 (= $x166 true)))
 (let (($x98 (= $x160 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x52 true)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x147)))
 (let (($x74 (= $x68 true)))
 (let (($x8 (= $x74 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x11)))
 (let (($x7 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x7 true)))
 (let (($x117 (= $x76 true)))
 (let (($x73 (= ?x39 input.dst.llvm-%n)))
 (let (($x97 (= $x73 true)))
 (let (($x26 (= $x97 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x33 (and $x47 $x16)))
 (let (($x89 (and $x33 $x26)))
 (let (($x93 (and $x89 $x117)))
 (let (($x66 (and $x93 $x8)))
 (let (($x126 (and $x66 $x168)))
 (let (($x105 (and $x126 $x98)))
 (let (($x164 (and $x105 $x77)))
 (let (($x139 (and $x164 $x37)))
 (let (($x185 (and $x139 $x167)))
 (let (($x206 (and $x185 $x202)))
 (let (($x218 (and $x206 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x264 (and $x246 $x286)))
 (let (($x295 (and $x264 $x251)))
 (let (($x239 (and $x295 $x290)))
 (let (($x200 (and $x239 $x254)))
 (let (($x234 (and $x200 $x237)))
 (let (($x291 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (and (not $x291) $x234)))
 (let (($x282 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x308 (and $x282 $x263)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x184 (and $x18 $x308)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x215 (and $x30 $x184)))
 (let (($x86 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd ?x187 (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x127 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x28 (or false (or false (and (and true (or $x21 $x127)) (or $x143 $x86))))))
 (let (($x95 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x28)))
 (let (($x83 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x28)))
 (let (($x235 (and $x83 $x215)))
 (let (($x270 (=> $x235 $x259)))
 (not $x270)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 213 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x228 (bvsge ?x63 (_ bv0 32))))
 (let (($x176 (= $x228 true)))
 (let (($x155 (= $x176 true)))
 (let (($x70 (forall ((input.ind-%var891X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var891X)))
 (=> $x289 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var891X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var890X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var890X)))
 (= $x289 false)))
 ))
 (let (($x266 (and $x121 $x70)))
 (let (($x288 (= $x266 true)))
 (let (($x297 (forall ((input.ind-%var885X (_ BitVec 32)) )(let ((?x267 (bvadd (bvmul input.ind-%var885X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x285)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x232)))
 (let ((?x223 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var885X)))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var885X)))
 (=> $x136 (= ?x223 ?x298)))))))))
 ))
 (let (($x308 (forall ((input.ind-%var884X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var884X) (bvult input.ind-%var884X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var884X)))
 (= $x136 $x234))))
 ))
 (let (($x217 (and $x308 $x297)))
 (let (($x42 (= $x217 true)))
 (let (($x257 (forall ((input.ind-%var879X (_ BitVec 32)) )(let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var879X)))
 (=> $x136 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var879X) (_ bv0 32)))))
 ))
 (let (($x201 (forall ((input.ind-%var878X (_ BitVec 32)) )(let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var878X)))
 (= $x136 false)))
 ))
 (let (($x15 (and $x201 $x257)))
 (let (($x302 (= $x15 true)))
 (let (($x284 (forall ((input.ind-%var873X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var873X)))
 (=> $x289 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var873X) (_ bv0 32)))))
 ))
 (let (($x273 (forall ((input.ind-%var872X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var872X)))
 (= $x289 false)))
 ))
 (let (($x290 (and $x273 $x284)))
 (let (($x239 (= $x290 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x253)))
 (let (($x212 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x212 true)))
 (let (($x264 (= $x286 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x174 (bvsub ?x187 ?x123)))
 (let (($x191 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x174) (bvult ?x187 ?x174))))
 (let (($x102 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x157 (ite $x102 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x100 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x153 (bvmul (_ bv4 64) ?x100)))
 (let ((?x145 ((_ extract 63 32) ?x153)))
 (let (($x159 (= ?x145 ?x157)))
 (let (($x133 (and $x159 $x191)))
 (let (($x163 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x107 (and $x163 $x133)))
 (let (($x196 (= true $x107)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (=> $x29 $x196)))
 (let (($x188 (= $x31 true)))
 (let (($x167 (= $x188 true)))
 (let (($x185 (= $x167 true)))
 (let (($x178 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x114 (= $x178 true)))
 (let (($x37 (= $x114 true)))
 (let (($x139 (= $x37 true)))
 (let (($x79 (= $x29 true)))
 (let (($x77 (= $x79 true)))
 (let (($x164 (= $x77 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x189)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x118)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x81)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (and $x119 $x193)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x169 $x138)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x162 $x109)))
 (let (($x137 (not $x10)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x158 $x111)))
 (let (($x12 (and (not $x170) $x137)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x177 $x87)))
 (let (($x61 (not $x44)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x194 $x108)))
 (let (($x64 (and (not $x116) $x61)))
 (let (($x5 (and (and (and (and (and (and $x64 $x12) $x112) $x182) $x171) $x101) $x9)))
 (let (($x82 (and $x5 $x110)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x195 (or false (or false (and (and true (or $x58 $x50)) (or $x156 $x80))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x195)))
 (let (($x166 (and $x103 $x82)))
 (let (($x160 (= $x166 true)))
 (let (($x98 (= $x160 true)))
 (let (($x105 (= $x98 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x52 true)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x147)))
 (let (($x74 (= $x68 true)))
 (let (($x8 (= $x74 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x11)))
 (let (($x7 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x7 true)))
 (let (($x117 (= $x76 true)))
 (let (($x73 (= ?x39 input.dst.llvm-%n)))
 (let (($x97 (= $x73 true)))
 (let (($x26 (= $x97 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x33 (and $x47 $x16)))
 (let (($x89 (and $x33 $x26)))
 (let (($x93 (and $x89 $x117)))
 (let (($x66 (and $x93 $x8)))
 (let (($x126 (and $x66 $x168)))
 (let (($x32 (and $x126 $x105)))
 (let (($x141 (and $x32 $x164)))
 (let (($x120 (and $x141 $x139)))
 (let (($x78 (and $x120 $x185)))
 (let (($x207 (and $x78 $x206)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x255 (and $x244 $x264)))
 (let (($x65 (and $x255 $x239)))
 (let (($x113 (and $x65 $x302)))
 (let (($x229 (and $x113 $x42)))
 (let (($x149 (and $x229 $x288)))
 (let (($x279 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (and (not $x279) $x149)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x261 $x299)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x280 (and $x154 $x144)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x90 $x280)))
 (let (($x35 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd ?x187 (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x180 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x83 (or false (or false (and (and true (or $x25 $x180)) (or $x132 $x35))))))
 (let (($x30 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x83)))
 (let (($x183 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x83)))
 (let (($x307 (and $x183 $x268)))
 (let (($x203 (=> $x307 $x155)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x228 (bvsge ?x63 (_ bv0 32))))
 (let (($x176 (= $x228 true)))
 (let (($x155 (= $x176 true)))
 (let (($x70 (forall ((input.ind-%var891X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var891X)))
 (=> $x289 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var891X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var890X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var890X)))
 (= $x289 false)))
 ))
 (let (($x266 (and $x121 $x70)))
 (let (($x288 (= $x266 true)))
 (let (($x297 (forall ((input.ind-%var885X (_ BitVec 32)) )(let ((?x267 (bvadd (bvmul input.ind-%var885X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x285)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x232)))
 (let ((?x223 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var885X)))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var885X)))
 (=> $x136 (= ?x223 ?x298)))))))))
 ))
 (let (($x308 (forall ((input.ind-%var884X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var884X) (bvult input.ind-%var884X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var884X)))
 (= $x136 $x234))))
 ))
 (let (($x217 (and $x308 $x297)))
 (let (($x42 (= $x217 true)))
 (let (($x257 (forall ((input.ind-%var879X (_ BitVec 32)) )(let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var879X)))
 (=> $x136 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var879X) (_ bv0 32)))))
 ))
 (let (($x201 (forall ((input.ind-%var878X (_ BitVec 32)) )(let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var878X)))
 (= $x136 false)))
 ))
 (let (($x15 (and $x201 $x257)))
 (let (($x302 (= $x15 true)))
 (let (($x284 (forall ((input.ind-%var873X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var873X)))
 (=> $x289 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var873X) (_ bv0 32)))))
 ))
 (let (($x273 (forall ((input.ind-%var872X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var872X)))
 (= $x289 false)))
 ))
 (let (($x290 (and $x273 $x284)))
 (let (($x239 (= $x290 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x253)))
 (let (($x212 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x212 true)))
 (let (($x264 (= $x286 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x174 (bvsub ?x187 ?x123)))
 (let (($x191 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x174) (bvult ?x187 ?x174))))
 (let (($x102 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x157 (ite $x102 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x100 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x153 (bvmul (_ bv4 64) ?x100)))
 (let ((?x145 ((_ extract 63 32) ?x153)))
 (let (($x159 (= ?x145 ?x157)))
 (let (($x133 (and $x159 $x191)))
 (let (($x163 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x107 (and $x163 $x133)))
 (let (($x196 (= true $x107)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (=> $x29 $x196)))
 (let (($x188 (= $x31 true)))
 (let (($x167 (= $x188 true)))
 (let (($x185 (= $x167 true)))
 (let (($x178 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x114 (= $x178 true)))
 (let (($x37 (= $x114 true)))
 (let (($x139 (= $x37 true)))
 (let (($x79 (= $x29 true)))
 (let (($x77 (= $x79 true)))
 (let (($x164 (= $x77 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x189)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x118)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x81)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (and $x119 $x193)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x169 $x138)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x162 $x109)))
 (let (($x137 (not $x10)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x158 $x111)))
 (let (($x12 (and (not $x170) $x137)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x177 $x87)))
 (let (($x61 (not $x44)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x194 $x108)))
 (let (($x64 (and (not $x116) $x61)))
 (let (($x5 (and (and (and (and (and (and $x64 $x12) $x112) $x182) $x171) $x101) $x9)))
 (let (($x82 (and $x5 $x110)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x195 (or false (or false (and (and true (or $x58 $x50)) (or $x156 $x80))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x195)))
 (let (($x166 (and $x103 $x82)))
 (let (($x160 (= $x166 true)))
 (let (($x98 (= $x160 true)))
 (let (($x105 (= $x98 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x52 true)))
 (let (($x57 (= $x59 true)))
 (let (($x168 (= $x57 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x147)))
 (let (($x74 (= $x68 true)))
 (let (($x8 (= $x74 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x11)))
 (let (($x7 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x7 true)))
 (let (($x117 (= $x76 true)))
 (let (($x73 (= ?x39 input.dst.llvm-%n)))
 (let (($x97 (= $x73 true)))
 (let (($x26 (= $x97 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x33 (and $x47 $x16)))
 (let (($x89 (and $x33 $x26)))
 (let (($x93 (and $x89 $x117)))
 (let (($x66 (and $x93 $x8)))
 (let (($x126 (and $x66 $x168)))
 (let (($x32 (and $x126 $x105)))
 (let (($x141 (and $x32 $x164)))
 (let (($x120 (and $x141 $x139)))
 (let (($x78 (and $x120 $x185)))
 (let (($x207 (and $x78 $x206)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x255 (and $x244 $x264)))
 (let (($x65 (and $x255 $x239)))
 (let (($x113 (and $x65 $x302)))
 (let (($x229 (and $x113 $x42)))
 (let (($x149 (and $x229 $x288)))
 (let (($x279 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (and (not $x279) $x149)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x261 $x299)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x280 (and $x154 $x144)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x90 $x280)))
 (let (($x35 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd ?x187 (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x180 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x83 (or false (or false (and (and true (or $x25 $x180)) (or $x132 $x35))))))
 (let (($x30 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x83)))
 (let (($x183 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x83)))
 (let (($x307 (and $x183 $x268)))
 (let (($x203 (=> $x307 $x155)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x45 (bvule ?x215 input.dst.llvm-%n)))
 (let (($x292 (= $x45 true)))
 (let (($x287 (= $x292 true)))
 (let (($x277 (forall ((input.ind-%var915X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var915X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var915X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var914X)))
 (= $x199 false)))
 ))
 (let (($x240 (and $x224 $x277)))
 (let (($x295 (= $x240 true)))
 (let (($x250 (forall ((input.ind-%var909X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var909X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x235))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv2 32))) ?x254)))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv3 32))) ?x27)))
 (let ((?x19 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var909X)))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var909X)))
 (=> $x263 (= ?x19 ?x181)))))))))
 ))
 (let (($x144 (forall ((input.ind-%var908X (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) input.ind-%var908X) (bvult input.ind-%var908X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var908X)))
 (= $x263 $x149))))
 ))
 (let (($x270 (and $x144 $x250)))
 (let (($x303 (= $x270 true)))
 (let (($x232 (forall ((input.ind-%var903X (_ BitVec 32)) )(let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var903X)))
 (=> $x263 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var903X) (_ bv0 32)))))
 ))
 (let (($x267 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var902X)))
 (= $x263 false)))
 ))
 (let (($x298 (and $x267 $x232)))
 (let (($x248 (= $x298 true)))
 (let (($x15 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var897X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var897X) (_ bv0 32)))))
 ))
 (let (($x290 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var896X)))
 (= $x199 false)))
 ))
 (let (($x302 (and $x290 $x15)))
 (let (($x113 (= $x302 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x276)))
 (let (($x286 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x264 (= $x286 true)))
 (let (($x255 (= $x264 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x11)))
 (let (($x245 (= ?x39 input.dst.llvm-%n)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x202 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x167 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x167 true)))
 (let (($x78 (= $x185 true)))
 (let (($x197 (= $x78 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x102 (bvsub ?x187 ?x123)))
 (let (($x174 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x102) (bvult ?x187 ?x102))))
 (let (($x100 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x153 (ite $x100 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x186 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x186)))
 (let ((?x17 ((_ extract 63 32) ?x163)))
 (let (($x145 (= ?x17 ?x153)))
 (let (($x179 (and $x145 $x174)))
 (let (($x120 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x175 (and $x120 $x179)))
 (let (($x191 (= true $x175)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x133 (=> $x29 $x191)))
 (let (($x107 (= $x133 true)))
 (let (($x196 (= $x107 true)))
 (let (($x31 (= $x196 true)))
 (let (($x77 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x164 (= $x77 true)))
 (let (($x141 (= $x164 true)))
 (let (($x178 (= $x141 true)))
 (let (($x98 (= $x29 true)))
 (let (($x105 (= $x98 true)))
 (let (($x32 (= $x105 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x138)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x81)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x173)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x112 $x104)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x106 $x182)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x158 $x111)))
 (let (($x128 (not $x170)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x44 $x61)))
 (let (($x109 (and (not $x64) $x128)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x194 $x108)))
 (let (($x135 (not $x116)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x57 $x168)))
 (let (($x87 (and (not $x103) $x135)))
 (let (($x9 (and (and (and (and (and (and $x87 $x109) $x137) $x125) $x129) $x119) $x193)))
 (let (($x5 (and $x9 $x171)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x71 (or false (or false (and (and true (or $x130 $x53)) (or $x24 $x91))))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x189 (and $x195 $x5)))
 (let (($x110 (= $x189 true)))
 (let (($x82 (= $x110 true)))
 (let (($x166 (= $x82 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x68 true)))
 (let (($x8 (= $x74 true)))
 (let (($x66 (= $x8 true)))
 (let ((?x76 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x117 (= (_ bv0 2) ?x76)))
 (let (($x93 (= $x117 true)))
 (let (($x41 (= $x93 true)))
 (let (($x73 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (= $x73 true)))
 (let (($x26 (= $x97 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x33 (and $x47 $x16)))
 (let (($x89 (and $x33 $x26)))
 (let (($x147 (and $x89 $x41)))
 (let (($x52 (and $x147 $x66)))
 (let (($x160 (and $x52 $x166)))
 (let (($x79 (and $x160 $x32)))
 (let (($x114 (and $x79 $x178)))
 (let (($x188 (and $x114 $x31)))
 (let (($x198 (and $x188 $x197)))
 (let (($x209 (and $x198 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x253 (and $x252 $x244)))
 (let (($x204 (and $x253 $x255)))
 (let (($x237 (and $x204 $x113)))
 (let (($x165 (and $x237 $x248)))
 (let (($x259 (and $x165 $x303)))
 (let (($x249 (and $x259 $x295)))
 (let (($x216 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and (not $x216) $x249)))
 (let (($x291 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and $x291 $x225)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x271 (and $x278 $x247)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x230 (and $x20 $x271)))
 (let (($x28 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd ?x187 (_ bv3 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x143 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x183 (or false (or false (and (and true (or $x48 $x143)) (or $x85 $x28))))))
 (let (($x90 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x183)))
 (let (($x115 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x183)))
 (let (($x43 (and $x115 $x230)))
 (let (($x122 (=> $x43 $x287)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x45 (bvule ?x215 input.dst.llvm-%n)))
 (let (($x292 (= $x45 true)))
 (let (($x287 (= $x292 true)))
 (let (($x277 (forall ((input.ind-%var915X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var915X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var915X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var914X)))
 (= $x199 false)))
 ))
 (let (($x240 (and $x224 $x277)))
 (let (($x295 (= $x240 true)))
 (let (($x250 (forall ((input.ind-%var909X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var909X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x235))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv2 32))) ?x254)))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv3 32))) ?x27)))
 (let ((?x19 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var909X)))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var909X)))
 (=> $x263 (= ?x19 ?x181)))))))))
 ))
 (let (($x144 (forall ((input.ind-%var908X (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) input.ind-%var908X) (bvult input.ind-%var908X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var908X)))
 (= $x263 $x149))))
 ))
 (let (($x270 (and $x144 $x250)))
 (let (($x303 (= $x270 true)))
 (let (($x232 (forall ((input.ind-%var903X (_ BitVec 32)) )(let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var903X)))
 (=> $x263 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var903X) (_ bv0 32)))))
 ))
 (let (($x267 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var902X)))
 (= $x263 false)))
 ))
 (let (($x298 (and $x267 $x232)))
 (let (($x248 (= $x298 true)))
 (let (($x15 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var897X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var897X) (_ bv0 32)))))
 ))
 (let (($x290 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var896X)))
 (= $x199 false)))
 ))
 (let (($x302 (and $x290 $x15)))
 (let (($x113 (= $x302 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x276)))
 (let (($x286 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x264 (= $x286 true)))
 (let (($x255 (= $x264 true)))
 (let ((?x11 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x11)))
 (let (($x245 (= ?x39 input.dst.llvm-%n)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x202 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x167 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x167 true)))
 (let (($x78 (= $x185 true)))
 (let (($x197 (= $x78 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x102 (bvsub ?x187 ?x123)))
 (let (($x174 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x102) (bvult ?x187 ?x102))))
 (let (($x100 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x153 (ite $x100 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x186 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x186)))
 (let ((?x17 ((_ extract 63 32) ?x163)))
 (let (($x145 (= ?x17 ?x153)))
 (let (($x179 (and $x145 $x174)))
 (let (($x120 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x175 (and $x120 $x179)))
 (let (($x191 (= true $x175)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x133 (=> $x29 $x191)))
 (let (($x107 (= $x133 true)))
 (let (($x196 (= $x107 true)))
 (let (($x31 (= $x196 true)))
 (let (($x77 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x164 (= $x77 true)))
 (let (($x141 (= $x164 true)))
 (let (($x178 (= $x141 true)))
 (let (($x98 (= $x29 true)))
 (let (($x105 (= $x98 true)))
 (let (($x32 (= $x105 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x138)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x81)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x173)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x112 $x104)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x106 $x182)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x158 $x111)))
 (let (($x128 (not $x170)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x44 $x61)))
 (let (($x109 (and (not $x64) $x128)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x194 $x108)))
 (let (($x135 (not $x116)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x57 $x168)))
 (let (($x87 (and (not $x103) $x135)))
 (let (($x9 (and (and (and (and (and (and $x87 $x109) $x137) $x125) $x129) $x119) $x193)))
 (let (($x5 (and $x9 $x171)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x71 (or false (or false (and (and true (or $x130 $x53)) (or $x24 $x91))))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x189 (and $x195 $x5)))
 (let (($x110 (= $x189 true)))
 (let (($x82 (= $x110 true)))
 (let (($x166 (= $x82 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x68 true)))
 (let (($x8 (= $x74 true)))
 (let (($x66 (= $x8 true)))
 (let ((?x76 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x117 (= (_ bv0 2) ?x76)))
 (let (($x93 (= $x117 true)))
 (let (($x41 (= $x93 true)))
 (let (($x73 (= ?x39 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (= $x73 true)))
 (let (($x26 (= $x97 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x33 (and $x47 $x16)))
 (let (($x89 (and $x33 $x26)))
 (let (($x147 (and $x89 $x41)))
 (let (($x52 (and $x147 $x66)))
 (let (($x160 (and $x52 $x166)))
 (let (($x79 (and $x160 $x32)))
 (let (($x114 (and $x79 $x178)))
 (let (($x188 (and $x114 $x31)))
 (let (($x198 (and $x188 $x197)))
 (let (($x209 (and $x198 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x253 (and $x252 $x244)))
 (let (($x204 (and $x253 $x255)))
 (let (($x237 (and $x204 $x113)))
 (let (($x165 (and $x237 $x248)))
 (let (($x259 (and $x165 $x303)))
 (let (($x249 (and $x259 $x295)))
 (let (($x216 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and (not $x216) $x249)))
 (let (($x291 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and $x291 $x225)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x271 (and $x278 $x247)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x230 (and $x20 $x271)))
 (let (($x28 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd ?x187 (_ bv3 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x143 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x183 (or false (or false (and (and true (or $x48 $x143)) (or $x85 $x28))))))
 (let (($x90 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x183)))
 (let (($x115 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x183)))
 (let (($x43 (and $x115 $x230)))
 (let (($x122 (=> $x43 $x287)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x358 (forall ((input.ind-%var955X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var955X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x143 (bvadd ?x187 (_ bv3 32))))
 (let ((?x325 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x187 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x328 (store ?x325 (bvadd ?x187 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x331 (store ?x328 (bvadd ?x187 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x333 (store ?x331 ?x143 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x352 (concat (select ?x333 (bvadd ?x307 (_ bv2 32))) (concat (select ?x333 (bvadd ?x307 (_ bv1 32))) (select ?x333 ?x307)))))
 (let ((?x200 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var955X)))
 (let (($x313 (= input.ind-%var955X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x356 (= (ite $x313 input.spec-%var-i-0.L3%6%bbentry ?x200) (concat (select ?x333 (bvadd ?x307 (_ bv3 32))) ?x352))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var955X)))
 (let (($x314 (or $x299 $x313)))
 (=> $x314 $x356))))))))))))))))
 ))
 (let (($x316 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x295 (bvule (_ bv0 32) input.ind-%var954X)))
 (let (($x312 (and $x295 (bvult input.ind-%var954X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x313 (= input.ind-%var954X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var954X)))
 (let (($x314 (or $x299 $x313)))
 (= $x314 $x312)))))))
 ))
 (let (($x359 (and $x316 $x358)))
 (let (($x268 (= true true)))
 (let (($x360 (and $x268 $x359)))
 (let (($x361 (= $x360 true)))
 (let (($x214 (forall ((input.ind-%var943X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var943X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var943X) (_ bv0 32)))))
 ))
 (let (($x220 (forall ((input.ind-%var942X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var942X)))
 (= $x262 false)))
 ))
 (let (($x275 (and $x220 $x214)))
 (let (($x65 (= $x275 true)))
 (let (($x241 (forall ((input.ind-%var937X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var937X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x307))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv2 32))) ?x42)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv3 32))) ?x234)))
 (let ((?x200 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var937X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var937X)))
 (=> $x299 (= ?x200 ?x146)))))))))
 ))
 (let (($x247 (forall ((input.ind-%var936X (_ BitVec 32)) )(let (($x295 (bvule (_ bv0 32) input.ind-%var936X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var936X)))
 (= $x299 (and $x295 (bvult input.ind-%var936X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x203 (and $x247 $x241)))
 (let (($x300 (= $x203 true)))
 (let (($x27 (forall ((input.ind-%var931X (_ BitVec 32)) )(let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var931X)))
 (=> $x299 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var931X) (_ bv0 32)))))
 ))
 (let (($x235 (forall ((input.ind-%var930X (_ BitVec 32)) )(let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var930X)))
 (= $x299 false)))
 ))
 (let (($x181 (and $x235 $x27)))
 (let (($x54 (= $x181 true)))
 (let (($x298 (forall ((input.ind-%var925X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var925X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var925X) (_ bv0 32)))))
 ))
 (let (($x302 (forall ((input.ind-%var924X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var924X)))
 (= $x262 false)))
 ))
 (let (($x248 (and $x302 $x298)))
 (let (($x165 (= $x248 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x212)))
 (let (($x264 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x264 true)))
 (let (($x204 (= $x255 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x246 (= (_ bv0 2) ?x245)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x198 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x188 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x167 (= $x188 true)))
 (let (($x185 (= $x167 true)))
 (let (($x78 (= $x185 true)))
 (let (($x191 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x133 (= $x191 true)))
 (let (($x107 (= $x133 true)))
 (let (($x196 (= $x107 true)))
 (let (($x159 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x148 (= $x159 true)))
 (let (($x174 (= $x148 true)))
 (let (($x179 (= $x174 true)))
 (let (($x100 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x153 (= $x100 true)))
 (let (($x145 (= $x153 true)))
 (let (($x157 (= $x145 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x79 (bvsub ?x187 ?x123)))
 (let (($x178 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x79) (bvult ?x187 ?x79))))
 (let (($x98 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x105 (ite $x98 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x82 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x166 (bvmul (_ bv4 64) ?x82)))
 (let ((?x160 ((_ extract 63 32) ?x166)))
 (let (($x32 (= ?x160 ?x105)))
 (let (($x114 (and $x32 $x178)))
 (let (($x189 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x37 (and $x189 $x114)))
 (let (($x139 (= true $x37)))
 (let (($x55 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (=> $x55 $x139)))
 (let (($x172 (= $x120 true)))
 (let (($x186 (= $x172 true)))
 (let (($x163 (= $x186 true)))
 (let (($x118 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x81 (= $x118 true)))
 (let (($x193 (= $x81 true)))
 (let (($x9 (= $x193 true)))
 (let (($x129 (= $x55 true)))
 (let (($x49 (= $x129 true)))
 (let (($x169 (= $x49 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x128)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x111)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x135 $x44)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x116 $x61)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x80 $x140)))
 (let (($x195 (not $x71)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x24 $x91)))
 (let (($x168 (and (not $x156) $x195)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x150 $x152)))
 (let (($x53 (not $x130)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x39 $x73)))
 (let (($x50 (and (not $x190) $x53)))
 (let (($x125 (and (and (and (and (and (and $x50 $x168) $x177) $x108) $x64) $x158) $x170)))
 (let (($x101 (and $x125 $x109)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x66 (or false (or false (and (and true (or $x7 $x76)) (or $x41 $x147))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x106 (and $x126 $x101)))
 (let (($x112 (= $x106 true)))
 (let (($x173 (= $x112 true)))
 (let (($x104 (= $x173 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x182 (and $x67 $x104)))
 (let (($x119 (and $x182 $x169)))
 (let (($x138 (and $x119 $x9)))
 (let (($x17 (and $x138 $x163)))
 (let (($x102 (and $x17 $x157)))
 (let (($x175 (and $x102 $x179)))
 (let (($x31 (and $x175 $x196)))
 (let (($x197 (and $x31 $x78)))
 (let (($x208 (and $x197 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x273 (and $x276 $x204)))
 (let (($x288 (and $x273 $x165)))
 (let (($x213 (and $x288 $x54)))
 (let (($x155 (and $x213 $x300)))
 (let (($x242 (and $x155 $x65)))
 (let (($x227 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and (not $x227) $x242)))
 (let (($x279 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and $x279 $x70)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x296 (and $x282 $x256)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x283 (and $x18 $x296)))
 (let (($x83 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd ?x187 (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x132 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x115 (or false (or false (and (and true (or $x131 $x132)) (or $x95 $x83))))))
 (let (($x20 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x14 (=> (and $x55 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x134 (and $x14 $x283)))
 (let (($x362 (=> $x134 $x361)))
 (not $x362)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x358 (forall ((input.ind-%var955X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var955X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x143 (bvadd ?x187 (_ bv3 32))))
 (let ((?x325 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x187 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x328 (store ?x325 (bvadd ?x187 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x331 (store ?x328 (bvadd ?x187 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x333 (store ?x331 ?x143 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x352 (concat (select ?x333 (bvadd ?x307 (_ bv2 32))) (concat (select ?x333 (bvadd ?x307 (_ bv1 32))) (select ?x333 ?x307)))))
 (let ((?x200 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var955X)))
 (let (($x313 (= input.ind-%var955X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x356 (= (ite $x313 input.spec-%var-i-0.L3%6%bbentry ?x200) (concat (select ?x333 (bvadd ?x307 (_ bv3 32))) ?x352))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var955X)))
 (let (($x314 (or $x299 $x313)))
 (=> $x314 $x356))))))))))))))))
 ))
 (let (($x316 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x295 (bvule (_ bv0 32) input.ind-%var954X)))
 (let (($x312 (and $x295 (bvult input.ind-%var954X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x313 (= input.ind-%var954X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var954X)))
 (let (($x314 (or $x299 $x313)))
 (= $x314 $x312)))))))
 ))
 (let (($x359 (and $x316 $x358)))
 (let (($x268 (= true true)))
 (let (($x360 (and $x268 $x359)))
 (let (($x361 (= $x360 true)))
 (let (($x214 (forall ((input.ind-%var943X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var943X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var943X) (_ bv0 32)))))
 ))
 (let (($x220 (forall ((input.ind-%var942X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var942X)))
 (= $x262 false)))
 ))
 (let (($x275 (and $x220 $x214)))
 (let (($x65 (= $x275 true)))
 (let (($x241 (forall ((input.ind-%var937X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var937X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x307))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv2 32))) ?x42)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv3 32))) ?x234)))
 (let ((?x200 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var937X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var937X)))
 (=> $x299 (= ?x200 ?x146)))))))))
 ))
 (let (($x247 (forall ((input.ind-%var936X (_ BitVec 32)) )(let (($x295 (bvule (_ bv0 32) input.ind-%var936X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var936X)))
 (= $x299 (and $x295 (bvult input.ind-%var936X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x203 (and $x247 $x241)))
 (let (($x300 (= $x203 true)))
 (let (($x27 (forall ((input.ind-%var931X (_ BitVec 32)) )(let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var931X)))
 (=> $x299 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var931X) (_ bv0 32)))))
 ))
 (let (($x235 (forall ((input.ind-%var930X (_ BitVec 32)) )(let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var930X)))
 (= $x299 false)))
 ))
 (let (($x181 (and $x235 $x27)))
 (let (($x54 (= $x181 true)))
 (let (($x298 (forall ((input.ind-%var925X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var925X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var925X) (_ bv0 32)))))
 ))
 (let (($x302 (forall ((input.ind-%var924X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var924X)))
 (= $x262 false)))
 ))
 (let (($x248 (and $x302 $x298)))
 (let (($x165 (= $x248 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x212)))
 (let (($x264 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x264 true)))
 (let (($x204 (= $x255 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x246 (= (_ bv0 2) ?x245)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x198 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x188 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x167 (= $x188 true)))
 (let (($x185 (= $x167 true)))
 (let (($x78 (= $x185 true)))
 (let (($x191 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x133 (= $x191 true)))
 (let (($x107 (= $x133 true)))
 (let (($x196 (= $x107 true)))
 (let (($x159 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x148 (= $x159 true)))
 (let (($x174 (= $x148 true)))
 (let (($x179 (= $x174 true)))
 (let (($x100 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x153 (= $x100 true)))
 (let (($x145 (= $x153 true)))
 (let (($x157 (= $x145 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x79 (bvsub ?x187 ?x123)))
 (let (($x178 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x79) (bvult ?x187 ?x79))))
 (let (($x98 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x105 (ite $x98 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x82 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x166 (bvmul (_ bv4 64) ?x82)))
 (let ((?x160 ((_ extract 63 32) ?x166)))
 (let (($x32 (= ?x160 ?x105)))
 (let (($x114 (and $x32 $x178)))
 (let (($x189 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x37 (and $x189 $x114)))
 (let (($x139 (= true $x37)))
 (let (($x55 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (=> $x55 $x139)))
 (let (($x172 (= $x120 true)))
 (let (($x186 (= $x172 true)))
 (let (($x163 (= $x186 true)))
 (let (($x118 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x81 (= $x118 true)))
 (let (($x193 (= $x81 true)))
 (let (($x9 (= $x193 true)))
 (let (($x129 (= $x55 true)))
 (let (($x49 (= $x129 true)))
 (let (($x169 (= $x49 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x128)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x111)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x135 $x44)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x116 $x61)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x80 $x140)))
 (let (($x195 (not $x71)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x24 $x91)))
 (let (($x168 (and (not $x156) $x195)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x150 $x152)))
 (let (($x53 (not $x130)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x39 $x73)))
 (let (($x50 (and (not $x190) $x53)))
 (let (($x125 (and (and (and (and (and (and $x50 $x168) $x177) $x108) $x64) $x158) $x170)))
 (let (($x101 (and $x125 $x109)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x66 (or false (or false (and (and true (or $x7 $x76)) (or $x41 $x147))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x106 (and $x126 $x101)))
 (let (($x112 (= $x106 true)))
 (let (($x173 (= $x112 true)))
 (let (($x104 (= $x173 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x182 (and $x67 $x104)))
 (let (($x119 (and $x182 $x169)))
 (let (($x138 (and $x119 $x9)))
 (let (($x17 (and $x138 $x163)))
 (let (($x102 (and $x17 $x157)))
 (let (($x175 (and $x102 $x179)))
 (let (($x31 (and $x175 $x196)))
 (let (($x197 (and $x31 $x78)))
 (let (($x208 (and $x197 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x273 (and $x276 $x204)))
 (let (($x288 (and $x273 $x165)))
 (let (($x213 (and $x288 $x54)))
 (let (($x155 (and $x213 $x300)))
 (let (($x242 (and $x155 $x65)))
 (let (($x227 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and (not $x227) $x242)))
 (let (($x279 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and $x279 $x70)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x296 (and $x282 $x256)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x283 (and $x18 $x296)))
 (let (($x83 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd ?x187 (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x132 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x115 (or false (or false (and (and true (or $x131 $x132)) (or $x95 $x83))))))
 (let (($x20 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x14 (=> (and $x55 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x134 (and $x14 $x283)))
 (let (($x362 (=> $x134 $x361)))
 (not $x362)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 236 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x304 (forall ((input.ind-%var987X (_ BitVec 32)) )(let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var987X)))
 (let (($x308 (= input.ind-%var987X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var987X)))
 (let (($x306 (or $x225 $x308)))
 (=> $x306 (= (ite $x308 input.spec-%var-i-0.L3%6%bbentry ?x234) (_ bv0 32))))))))
 ))
 (let (($x301 (forall ((input.ind-%var986X (_ BitVec 32)) )(let (($x308 (= input.ind-%var986X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var986X)))
 (let (($x306 (or $x225 $x308)))
 (= $x306 false)))))
 ))
 (let (($x281 (and $x301 $x304)))
 (let (($x266 (= true true)))
 (let (($x334 (and $x266 $x281)))
 (let (($x309 (= $x334 true)))
 (let (($x263 (forall ((input.ind-%var979X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var979X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var979X) (_ bv0 32)))))
 ))
 (let (($x144 (forall ((input.ind-%var978X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var978X)))
 (= $x233 false)))
 ))
 (let (($x6 (and $x144 $x263)))
 (let (($x62 (= $x6 true)))
 (let (($x359 (forall ((input.ind-%var973X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var973X)))
 (=> $x225 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var973X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var972X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var972X)))
 (= $x225 false)))
 ))
 (let (($x360 (and $x349 $x359)))
 (let (($x361 (= $x360 true)))
 (let (($x328 (forall ((input.ind-%var967X (_ BitVec 32)) )(let ((?x313 (bvadd (bvmul input.ind-%var967X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x313))))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv2 32))) ?x312)))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv3 32))) ?x355)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var967X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var967X)))
 (=> $x225 (= ?x234 ?x325)))))))))
 ))
 (let (($x211 (forall ((input.ind-%var966X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var966X) (bvult input.ind-%var966X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var966X)))
 (= $x225 $x229))))
 ))
 (let (($x330 (and $x211 $x328)))
 (let (($x329 (= $x330 true)))
 (let (($x181 (forall ((input.ind-%var961X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var961X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var961X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var960X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var960X)))
 (= $x233 false)))
 ))
 (let (($x54 (and $x248 $x181)))
 (let (($x213 (= $x54 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x264 (bvneg ?x286)))
 (let (($x255 (= ?x264 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x204 (= $x255 true)))
 (let (($x273 (= $x204 true)))
 (let (($x246 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x218 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x206 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x179)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x148)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (and $x17 $x153)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x163 $x145)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x79 $x164)))
 (let (($x178 (not $x141)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x105 $x32)))
 (let (($x37 (and (not $x77) $x178)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x189 $x110)))
 (let (($x166 (not $x82)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x109 $x101)))
 (let (($x98 (and (not $x5) $x166)))
 (let (($x188 (and (and (and (and (and (and $x98 $x37) $x120) $x186) $x157) $x159) $x174)))
 (let (($x167 (and $x188 $x175)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x9 (or false (or false (and (and true (or $x104 $x182)) (or $x169 $x119))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x185 (and $x171 $x167)))
 (let (($x78 (= $x185 true)))
 (let (($x197 (= $x78 true)))
 (let (($x198 (= $x197 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x12 (= $x158 true)))
 (let (($x111 (= $x12 true)))
 (let (($x170 (= $x111 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x61 (= $x44 true)))
 (let (($x64 (= $x61 true)))
 (let (($x151 (= $x64 true)))
 (let (($x108 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x137 (= $x108 true)))
 (let (($x116 (= $x137 true)))
 (let (($x135 (= $x116 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x103 (= (_ bv0 2) ?x23)))
 (let (($x177 (= $x103 true)))
 (let (($x10 (= $x177 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x53)))
 (let (($x80 (= ?x50 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (= $x80 true)))
 (let (($x71 (= $x140 true)))
 (let (($x24 (= ?x50 input.dst.llvm-%n)))
 (let (($x91 (= $x24 true)))
 (let (($x156 (= $x91 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x147 (bvsub ?x187 ?x123)))
 (let (($x66 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x147) (bvult ?x187 ?x147))))
 (let (($x76 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x93 (ite $x76 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x52 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvmul (_ bv4 64) ?x52)))
 (let ((?x7 ((_ extract 63 32) ?x89)))
 (let (($x41 (= ?x7 ?x93)))
 (let (($x126 (and $x41 $x66)))
 (let (($x97 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x39 (and $x97 $x126)))
 (let (($x73 (= true $x39)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x190 (=> $x29 $x73)))
 (let (($x58 (= $x190 true)))
 (let (($x150 (= $x58 true)))
 (let (($x152 (= $x150 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x29 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x130 (and $x16 $x152)))
 (let (($x57 (and $x130 $x156)))
 (let (($x195 (and $x57 $x71)))
 (let (($x194 (and $x195 $x10)))
 (let (($x87 (and $x194 $x135)))
 (let (($x162 (and $x87 $x151)))
 (let (($x125 (and $x162 $x170)))
 (let (($x202 (and $x125 $x198)))
 (let (($x219 (and $x202 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x290 (and $x212 $x273)))
 (let (($x295 (and $x290 $x213)))
 (let (($x331 (and $x295 $x329)))
 (let (($x362 (and $x331 $x361)))
 (let (($x271 (and $x362 $x62)))
 (let (($x13 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (and (not $x13) $x271)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x284 (and $x216 $x199)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x250 (and $x261 $x284)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x303 (and $x154 $x250)))
 (let (($x183 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd ?x187 (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x85 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x14 (or false (or false (and (and true (or $x86 $x85)) (or $x30 $x183))))))
 (let (($x18 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x127 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x259 (and $x127 $x303)))
 (let (($x335 (=> $x259 $x309)))
 (not $x335)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x304 (forall ((input.ind-%var987X (_ BitVec 32)) )(let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var987X)))
 (let (($x308 (= input.ind-%var987X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var987X)))
 (let (($x306 (or $x225 $x308)))
 (=> $x306 (= (ite $x308 input.spec-%var-i-0.L3%6%bbentry ?x234) (_ bv0 32))))))))
 ))
 (let (($x301 (forall ((input.ind-%var986X (_ BitVec 32)) )(let (($x308 (= input.ind-%var986X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var986X)))
 (let (($x306 (or $x225 $x308)))
 (= $x306 false)))))
 ))
 (let (($x281 (and $x301 $x304)))
 (let (($x266 (= true true)))
 (let (($x334 (and $x266 $x281)))
 (let (($x309 (= $x334 true)))
 (let (($x263 (forall ((input.ind-%var979X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var979X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var979X) (_ bv0 32)))))
 ))
 (let (($x144 (forall ((input.ind-%var978X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var978X)))
 (= $x233 false)))
 ))
 (let (($x6 (and $x144 $x263)))
 (let (($x62 (= $x6 true)))
 (let (($x359 (forall ((input.ind-%var973X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var973X)))
 (=> $x225 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var973X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var972X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var972X)))
 (= $x225 false)))
 ))
 (let (($x360 (and $x349 $x359)))
 (let (($x361 (= $x360 true)))
 (let (($x328 (forall ((input.ind-%var967X (_ BitVec 32)) )(let ((?x313 (bvadd (bvmul input.ind-%var967X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x313))))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv2 32))) ?x312)))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x313 (_ bv3 32))) ?x355)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var967X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var967X)))
 (=> $x225 (= ?x234 ?x325)))))))))
 ))
 (let (($x211 (forall ((input.ind-%var966X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var966X) (bvult input.ind-%var966X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var966X)))
 (= $x225 $x229))))
 ))
 (let (($x330 (and $x211 $x328)))
 (let (($x329 (= $x330 true)))
 (let (($x181 (forall ((input.ind-%var961X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var961X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var961X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var960X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var960X)))
 (= $x233 false)))
 ))
 (let (($x54 (and $x248 $x181)))
 (let (($x213 (= $x54 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x264 (bvneg ?x286)))
 (let (($x255 (= ?x264 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x204 (= $x255 true)))
 (let (($x273 (= $x204 true)))
 (let (($x246 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x218 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x206 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x179)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x148)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (and $x17 $x153)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x163 $x145)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x79 $x164)))
 (let (($x178 (not $x141)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x105 $x32)))
 (let (($x37 (and (not $x77) $x178)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x189 $x110)))
 (let (($x166 (not $x82)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x109 $x101)))
 (let (($x98 (and (not $x5) $x166)))
 (let (($x188 (and (and (and (and (and (and $x98 $x37) $x120) $x186) $x157) $x159) $x174)))
 (let (($x167 (and $x188 $x175)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x9 (or false (or false (and (and true (or $x104 $x182)) (or $x169 $x119))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x185 (and $x171 $x167)))
 (let (($x78 (= $x185 true)))
 (let (($x197 (= $x78 true)))
 (let (($x198 (= $x197 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x12 (= $x158 true)))
 (let (($x111 (= $x12 true)))
 (let (($x170 (= $x111 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x61 (= $x44 true)))
 (let (($x64 (= $x61 true)))
 (let (($x151 (= $x64 true)))
 (let (($x108 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x137 (= $x108 true)))
 (let (($x116 (= $x137 true)))
 (let (($x135 (= $x116 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x103 (= (_ bv0 2) ?x23)))
 (let (($x177 (= $x103 true)))
 (let (($x10 (= $x177 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x53)))
 (let (($x80 (= ?x50 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (= $x80 true)))
 (let (($x71 (= $x140 true)))
 (let (($x24 (= ?x50 input.dst.llvm-%n)))
 (let (($x91 (= $x24 true)))
 (let (($x156 (= $x91 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x147 (bvsub ?x187 ?x123)))
 (let (($x66 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x147) (bvult ?x187 ?x147))))
 (let (($x76 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x93 (ite $x76 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x52 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvmul (_ bv4 64) ?x52)))
 (let ((?x7 ((_ extract 63 32) ?x89)))
 (let (($x41 (= ?x7 ?x93)))
 (let (($x126 (and $x41 $x66)))
 (let (($x97 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x39 (and $x97 $x126)))
 (let (($x73 (= true $x39)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x190 (=> $x29 $x73)))
 (let (($x58 (= $x190 true)))
 (let (($x150 (= $x58 true)))
 (let (($x152 (= $x150 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x29 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x130 (and $x16 $x152)))
 (let (($x57 (and $x130 $x156)))
 (let (($x195 (and $x57 $x71)))
 (let (($x194 (and $x195 $x10)))
 (let (($x87 (and $x194 $x135)))
 (let (($x162 (and $x87 $x151)))
 (let (($x125 (and $x162 $x170)))
 (let (($x202 (and $x125 $x198)))
 (let (($x219 (and $x202 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x290 (and $x212 $x273)))
 (let (($x295 (and $x290 $x213)))
 (let (($x331 (and $x295 $x329)))
 (let (($x362 (and $x331 $x361)))
 (let (($x271 (and $x362 $x62)))
 (let (($x13 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (and (not $x13) $x271)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x284 (and $x216 $x199)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x250 (and $x261 $x284)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x303 (and $x154 $x250)))
 (let (($x183 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd ?x187 (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x85 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x132)))
 (let (($x14 (or false (or false (and (and true (or $x86 $x85)) (or $x30 $x183))))))
 (let (($x18 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x127 (=> (and $x29 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x259 (and $x127 $x303)))
 (let (($x335 (=> $x259 $x309)))
 (not $x335)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x07000110)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x445bcff4)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.ind-%var986X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x06002de0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x07000113)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x06002de3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x07000110)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x06002de0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!15 (bvadd #x445bcff7 (bvmul #x00000004 x!0)))
                       (k!15 (bvadd #x445bcff6 (bvmul #x00000004 x!0)))
                       (k!15 (bvadd #x445bcff5 (bvmul #x00000004 x!0)))
                       (k!15 (bvadd #x445bcff4 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) #x00000000 a!1)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.ind-%var986X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7773d604)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3ad9d02c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xd0f3b080)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3ad9d02f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7773d607)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3ad9d02c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7773d604)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #xd0f3b083 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #xd0f3b082 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #xd0f3b081 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #xd0f3b080 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) #x00000000 a!1)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x155 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x203 (bvmul (_ bv4294967295 32) ?x155)))
 (let ((?x220 (bvneg ?x203)))
 (let (($x296 (= ?x220 ?x242)))
 (let (($x348 (= $x296 true)))
 (let (($x280 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1041X)))
 (=> $x184 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1041X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1040X)))
 (= $x184 false)))
 ))
 (let (($x262 (and $x165 $x280)))
 (let (($x15 (= $x262 true)))
 (let (($x69 (forall ((input.ind-%var1034X (_ BitVec 32)) )(let (($x335 (and (bvule (_ bv0 32) input.ind-%var1034X) (bvult input.ind-%var1034X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x315 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1034X)))
 (= $x315 $x335))))
 ))
 (let (($x122 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var1035X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x144))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv2 32))) ?x271)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv3 32))) ?x250)))
 (let ((?x311 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1035X)))
 (let (($x315 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1035X)))
 (=> $x315 (= ?x311 ?x266)))))))))
 ))
 (let (($x128 (and $x122 $x69)))
 (let (($x247 (= $x128 true)))
 (let (($x251 (forall ((input.ind-%var1029X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1029X)))
 (=> $x184 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1029X) (_ bv0 32)))))
 ))
 (let (($x54 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1028X)))
 (= $x184 false)))
 ))
 (let (($x268 (and $x54 $x251)))
 (let (($x313 (= $x268 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x255 (bvneg ?x264)))
 (let (($x204 (= ?x255 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x204 true)))
 (let (($x290 (= $x273 true)))
 (let (($x244 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (= $x78 true)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x188 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x179 (= $x188 true)))
 (let (($x175 (= $x179 true)))
 (let (($x167 (= $x175 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x159 (= $x102 true)))
 (let (($x31 (= $x159 true)))
 (let (($x148 (= $x31 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x139 (bvsub ?x187 ?x123)))
 (let (($x186 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x139) (bvult ?x187 ?x139))))
 (let (($x178 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x37 (ite $x178 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x79 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x164 (bvmul (_ bv4 64) ?x79)))
 (let ((?x141 ((_ extract 63 32) ?x164)))
 (let (($x191 (= ?x141 ?x37)))
 (let (($x107 (and $x191 $x186)))
 (let (($x77 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x163 (and $x77 $x107)))
 (let (($x17 (= true $x163)))
 (let (($x55 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (=> $x55 $x17)))
 (let (($x153 (= $x100 true)))
 (let (($x145 (= $x153 true)))
 (let (($x157 (= $x145 true)))
 (let (($x189 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x110 (= $x189 true)))
 (let (($x82 (= $x110 true)))
 (let (($x166 (= $x82 true)))
 (let (($x109 (= $x55 true)))
 (let (($x101 (= $x109 true)))
 (let (($x5 (= $x101 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x112)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x125)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x64 $x162)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x61 $x158)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x103 $x177)))
 (let (($x194 (not $x10)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x195 $x168)))
 (let (($x137 (and (not $x23) $x194)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x91 $x156)))
 (let (($x80 (not $x57)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x93 $x41)))
 (let (($x71 (and (not $x24) $x80)))
 (let (($x169 (and (and (and (and (and (and $x71 $x137) $x135) $x44) $x12) $x170) $x106)))
 (let (($x119 (and $x169 $x138)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x130 (or false (or false (and (and true (or $x8 $x66)) (or $x73 $x190))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x118 (and $x50 $x119)))
 (let (($x81 (= $x118 true)))
 (let (($x193 (= $x81 true)))
 (let (($x9 (= $x193 true)))
 (let ((?x26 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x52 (= (_ bv0 2) ?x26)))
 (let (($x89 (= $x52 true)))
 (let (($x7 (= $x89 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x76 (and $x67 $x7)))
 (let (($x171 (and $x76 $x9)))
 (let (($x160 (and $x171 $x5)))
 (let (($x98 (and $x160 $x166)))
 (let (($x196 (and $x98 $x157)))
 (let (($x174 (and $x196 $x148)))
 (let (($x185 (and $x174 $x167)))
 (let (($x206 (and $x185 $x202)))
 (let (($x218 (and $x206 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x302 (and $x286 $x290)))
 (let (($x324 (and $x302 $x313)))
 (let (($x146 (and $x324 $x247)))
 (let (($x294 (and $x146 $x15)))
 (let (($x43 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and (not $x43) $x294)))
 (let (($x227 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and $x227 $x70)))
 (let (($x291 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x291 $x256)))
 (let (($x278 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x65 (and $x278 $x275)))
 (let (($x115 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd ?x187 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x95 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x127 (or false (or false (and (and true (or $x35 $x95)) (or $x90 $x115))))))
 (let (($x154 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x180 (=> (and $x55 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x300 (and $x180 $x65)))
 (let (($x352 (=> $x300 $x348)))
 (not $x352))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x155 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x203 (bvmul (_ bv4294967295 32) ?x155)))
 (let ((?x220 (bvneg ?x203)))
 (let (($x296 (= ?x220 ?x242)))
 (let (($x348 (= $x296 true)))
 (let (($x280 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1041X)))
 (=> $x184 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1041X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1040X)))
 (= $x184 false)))
 ))
 (let (($x262 (and $x165 $x280)))
 (let (($x15 (= $x262 true)))
 (let (($x69 (forall ((input.ind-%var1034X (_ BitVec 32)) )(let (($x335 (and (bvule (_ bv0 32) input.ind-%var1034X) (bvult input.ind-%var1034X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x315 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1034X)))
 (= $x315 $x335))))
 ))
 (let (($x122 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var1035X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x144))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv2 32))) ?x271)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x144 (_ bv3 32))) ?x250)))
 (let ((?x311 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1035X)))
 (let (($x315 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1035X)))
 (=> $x315 (= ?x311 ?x266)))))))))
 ))
 (let (($x128 (and $x122 $x69)))
 (let (($x247 (= $x128 true)))
 (let (($x251 (forall ((input.ind-%var1029X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1029X)))
 (=> $x184 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1029X) (_ bv0 32)))))
 ))
 (let (($x54 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x184 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1028X)))
 (= $x184 false)))
 ))
 (let (($x268 (and $x54 $x251)))
 (let (($x313 (= $x268 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x255 (bvneg ?x264)))
 (let (($x204 (= ?x255 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x204 true)))
 (let (($x290 (= $x273 true)))
 (let (($x244 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (= $x78 true)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x188 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x179 (= $x188 true)))
 (let (($x175 (= $x179 true)))
 (let (($x167 (= $x175 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x159 (= $x102 true)))
 (let (($x31 (= $x159 true)))
 (let (($x148 (= $x31 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x139 (bvsub ?x187 ?x123)))
 (let (($x186 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x139) (bvult ?x187 ?x139))))
 (let (($x178 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x37 (ite $x178 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x79 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x164 (bvmul (_ bv4 64) ?x79)))
 (let ((?x141 ((_ extract 63 32) ?x164)))
 (let (($x191 (= ?x141 ?x37)))
 (let (($x107 (and $x191 $x186)))
 (let (($x77 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x163 (and $x77 $x107)))
 (let (($x17 (= true $x163)))
 (let (($x55 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x100 (=> $x55 $x17)))
 (let (($x153 (= $x100 true)))
 (let (($x145 (= $x153 true)))
 (let (($x157 (= $x145 true)))
 (let (($x189 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x110 (= $x189 true)))
 (let (($x82 (= $x110 true)))
 (let (($x166 (= $x82 true)))
 (let (($x109 (= $x55 true)))
 (let (($x101 (= $x109 true)))
 (let (($x5 (= $x101 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x112)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x125)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x64 $x162)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x61 $x158)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x103 $x177)))
 (let (($x194 (not $x10)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x195 $x168)))
 (let (($x137 (and (not $x23) $x194)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x91 $x156)))
 (let (($x80 (not $x57)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x93 $x41)))
 (let (($x71 (and (not $x24) $x80)))
 (let (($x169 (and (and (and (and (and (and $x71 $x137) $x135) $x44) $x12) $x170) $x106)))
 (let (($x119 (and $x169 $x138)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x130 (or false (or false (and (and true (or $x8 $x66)) (or $x73 $x190))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x118 (and $x50 $x119)))
 (let (($x81 (= $x118 true)))
 (let (($x193 (= $x81 true)))
 (let (($x9 (= $x193 true)))
 (let ((?x26 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x52 (= (_ bv0 2) ?x26)))
 (let (($x89 (= $x52 true)))
 (let (($x7 (= $x89 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x76 (and $x67 $x7)))
 (let (($x171 (and $x76 $x9)))
 (let (($x160 (and $x171 $x5)))
 (let (($x98 (and $x160 $x166)))
 (let (($x196 (and $x98 $x157)))
 (let (($x174 (and $x196 $x148)))
 (let (($x185 (and $x174 $x167)))
 (let (($x206 (and $x185 $x202)))
 (let (($x218 (and $x206 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x302 (and $x286 $x290)))
 (let (($x324 (and $x302 $x313)))
 (let (($x146 (and $x324 $x247)))
 (let (($x294 (and $x146 $x15)))
 (let (($x43 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and (not $x43) $x294)))
 (let (($x227 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and $x227 $x70)))
 (let (($x291 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x291 $x256)))
 (let (($x278 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x65 (and $x278 $x275)))
 (let (($x115 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd ?x187 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x95 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x127 (or false (or false (and (and true (or $x35 $x95)) (or $x90 $x115))))))
 (let (($x154 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x180 (=> (and $x55 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x300 (and $x180 $x65)))
 (let (($x352 (=> $x300 $x348)))
 (not $x352))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x258 (bvule ?x360 (_ bv3 32))))
 (let (($x214 (= $x258 true)))
 (let (($x361 (= $x214 true)))
 (let (($x42 (forall ((input.ind-%var1059X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1059X)))
 (=> $x59 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1059X) (_ bv0 32)))))
 ))
 (let (($x326 (forall ((input.ind-%var1058X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1058X)))
 (= $x59 false)))
 ))
 (let (($x27 (and $x326 $x42)))
 (let (($x229 (= $x27 true)))
 (let (($x298 (forall ((input.ind-%var1053X (_ BitVec 32)) )(let ((?x117 (bvadd (bvmul input.ind-%var1053X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x117))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv2 32))) ?x176)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv3 32))) ?x323)))
 (let ((?x165 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1053X)))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1053X)))
 (=> $x271 (= ?x165 ?x224)))))))))
 ))
 (let (($x69 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let (($x335 (and (bvule (_ bv0 32) input.ind-%var1052X) (bvult input.ind-%var1052X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1052X)))
 (= $x271 $x335))))
 ))
 (let (($x355 (and $x69 $x298)))
 (let (($x325 (= $x355 true)))
 (let (($x329 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1047X)))
 (=> $x59 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1047X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1046X)))
 (= $x59 false)))
 ))
 (let (($x199 (and $x268 $x329)))
 (let (($x284 (= $x199 true)))
 (let ((?x255 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x255)))
 (let (($x273 (= ?x204 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x290 (= $x273 true)))
 (let (($x302 (= $x290 true)))
 (let (($x253 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x31)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x102)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x163 $x100)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x107 $x153)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x164 $x141)))
 (let (($x37 (not $x178)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x77 $x114)))
 (let (($x120 (and (not $x79) $x37)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x110 $x82)))
 (let (($x98 (not $x166)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x170 $x49)))
 (let (($x32 (and (not $x189) $x98)))
 (let (($x185 (and (and (and (and (and (and $x32 $x120) $x133) $x186) $x145) $x196) $x159)))
 (let (($x78 (and $x185 $x148)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x101 (or false (or false (and (and true (or $x112 $x138)) (or $x81 $x193))))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x197 (and $x160 $x78)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x162 (= $x151 true)))
 (let (($x158 (= $x162 true)))
 (let (($x12 (= $x158 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x44 (= $x87 true)))
 (let (($x182 (= $x44 true)))
 (let (($x61 (= $x182 true)))
 (let (($x137 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (= $x137 true)))
 (let (($x116 (= $x173 true)))
 (let (($x135 (= $x116 true)))
 (let ((?x108 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x103 (= (_ bv0 2) ?x108)))
 (let (($x177 (= $x103 true)))
 (let (($x10 (= $x177 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x41)))
 (let (($x80 (= ?x24 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x80 true)))
 (let (($x195 (= $x71 true)))
 (let (($x140 (= ?x24 input.dst.llvm-%n)))
 (let (($x91 (= $x140 true)))
 (let (($x156 (= $x91 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x74 (bvsub ?x187 ?x123)))
 (let (($x39 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x74) (bvult ?x187 ?x74))))
 (let (($x76 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x147 (ite $x76 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x52 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvmul (_ bv4 64) ?x52)))
 (let ((?x7 ((_ extract 63 32) ?x89)))
 (let (($x53 (= ?x7 ?x147)))
 (let (($x73 (and $x53 $x39)))
 (let (($x97 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x190 (and $x97 $x73)))
 (let (($x58 (= true $x190)))
 (let (($x38 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (=> $x38 $x58)))
 (let (($x152 (= $x150 true)))
 (let (($x130 (= $x152 true)))
 (let (($x50 (= $x130 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x38 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x93 (and $x16 $x50)))
 (let (($x57 (and $x93 $x156)))
 (let (($x168 (and $x57 $x195)))
 (let (($x194 (and $x168 $x10)))
 (let (($x104 (and $x194 $x135)))
 (let (($x64 (and $x104 $x61)))
 (let (($x129 (and $x64 $x12)))
 (let (($x207 (and $x129 $x206)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x264 (and $x244 $x286)))
 (let (($x248 (and $x264 $x302)))
 (let (($x6 (and $x248 $x284)))
 (let (($x357 (and $x6 $x325)))
 (let (($x270 (and $x357 $x229)))
 (let (($x241 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x285 (and (not $x241) $x270)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x235 (and $x13 $x285)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x281 (and $x279 $x235)))
 (let (($x282 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x295 (and $x282 $x281)))
 (let (($x14 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd ?x187 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x30 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x180 (or false (or false (and (and true (or $x28 $x30)) (or $x20 $x14))))))
 (let (($x278 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x180)))
 (let (($x143 (=> (and $x38 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x180)))
 (let (($x243 (and $x143 $x295)))
 (let (($x240 (=> $x243 $x361)))
 (not $x240))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x258 (bvule ?x360 (_ bv3 32))))
 (let (($x214 (= $x258 true)))
 (let (($x361 (= $x214 true)))
 (let (($x42 (forall ((input.ind-%var1059X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1059X)))
 (=> $x59 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1059X) (_ bv0 32)))))
 ))
 (let (($x326 (forall ((input.ind-%var1058X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1058X)))
 (= $x59 false)))
 ))
 (let (($x27 (and $x326 $x42)))
 (let (($x229 (= $x27 true)))
 (let (($x298 (forall ((input.ind-%var1053X (_ BitVec 32)) )(let ((?x117 (bvadd (bvmul input.ind-%var1053X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x117))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv2 32))) ?x176)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv3 32))) ?x323)))
 (let ((?x165 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1053X)))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1053X)))
 (=> $x271 (= ?x165 ?x224)))))))))
 ))
 (let (($x69 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let (($x335 (and (bvule (_ bv0 32) input.ind-%var1052X) (bvult input.ind-%var1052X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1052X)))
 (= $x271 $x335))))
 ))
 (let (($x355 (and $x69 $x298)))
 (let (($x325 (= $x355 true)))
 (let (($x329 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1047X)))
 (=> $x59 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1047X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1046X)))
 (= $x59 false)))
 ))
 (let (($x199 (and $x268 $x329)))
 (let (($x284 (= $x199 true)))
 (let ((?x255 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x255)))
 (let (($x273 (= ?x204 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x290 (= $x273 true)))
 (let (($x302 (= $x290 true)))
 (let (($x253 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x31)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x102)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x163 $x100)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x107 $x153)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x164 $x141)))
 (let (($x37 (not $x178)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x77 $x114)))
 (let (($x120 (and (not $x79) $x37)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x110 $x82)))
 (let (($x98 (not $x166)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x170 $x49)))
 (let (($x32 (and (not $x189) $x98)))
 (let (($x185 (and (and (and (and (and (and $x32 $x120) $x133) $x186) $x145) $x196) $x159)))
 (let (($x78 (and $x185 $x148)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x101 (or false (or false (and (and true (or $x112 $x138)) (or $x81 $x193))))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x197 (and $x160 $x78)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x162 (= $x151 true)))
 (let (($x158 (= $x162 true)))
 (let (($x12 (= $x158 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x44 (= $x87 true)))
 (let (($x182 (= $x44 true)))
 (let (($x61 (= $x182 true)))
 (let (($x137 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (= $x137 true)))
 (let (($x116 (= $x173 true)))
 (let (($x135 (= $x116 true)))
 (let ((?x108 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x103 (= (_ bv0 2) ?x108)))
 (let (($x177 (= $x103 true)))
 (let (($x10 (= $x177 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x41)))
 (let (($x80 (= ?x24 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x71 (= $x80 true)))
 (let (($x195 (= $x71 true)))
 (let (($x140 (= ?x24 input.dst.llvm-%n)))
 (let (($x91 (= $x140 true)))
 (let (($x156 (= $x91 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x74 (bvsub ?x187 ?x123)))
 (let (($x39 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x74) (bvult ?x187 ?x74))))
 (let (($x76 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x147 (ite $x76 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x52 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvmul (_ bv4 64) ?x52)))
 (let ((?x7 ((_ extract 63 32) ?x89)))
 (let (($x53 (= ?x7 ?x147)))
 (let (($x73 (and $x53 $x39)))
 (let (($x97 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x190 (and $x97 $x73)))
 (let (($x58 (= true $x190)))
 (let (($x38 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (=> $x38 $x58)))
 (let (($x152 (= $x150 true)))
 (let (($x130 (= $x152 true)))
 (let (($x50 (= $x130 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x38 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x93 (and $x16 $x50)))
 (let (($x57 (and $x93 $x156)))
 (let (($x168 (and $x57 $x195)))
 (let (($x194 (and $x168 $x10)))
 (let (($x104 (and $x194 $x135)))
 (let (($x64 (and $x104 $x61)))
 (let (($x129 (and $x64 $x12)))
 (let (($x207 (and $x129 $x206)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x264 (and $x244 $x286)))
 (let (($x248 (and $x264 $x302)))
 (let (($x6 (and $x248 $x284)))
 (let (($x357 (and $x6 $x325)))
 (let (($x270 (and $x357 $x229)))
 (let (($x241 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x285 (and (not $x241) $x270)))
 (let (($x13 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x235 (and $x13 $x285)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x281 (and $x279 $x235)))
 (let (($x282 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x295 (and $x282 $x281)))
 (let (($x14 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd ?x187 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x30 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x180 (or false (or false (and (and true (or $x28 $x30)) (or $x20 $x14))))))
 (let (($x278 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x180)))
 (let (($x143 (=> (and $x38 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x180)))
 (let (($x243 (and $x143 $x295)))
 (let (($x240 (=> $x243 $x361)))
 (not $x240))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000018)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000001b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000018)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff4 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) false
      (not (bvule #x00000003 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x26ba48d0)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x65626420)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xe0828060)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x65626423)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x26ba48d3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x65626420)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x26ba48d0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #xe0828063 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #xe0828062 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #xe0828061 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #xe0828060 (bvmul #x00000004 x!0))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x247 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x267 (bvule ?x247 (_ bv4 32))))
 (let (($x349 (= $x267 true)))
 (let (($x327 (= $x349 true)))
 (let (($x362 (forall ((input.ind-%var1123X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1123X)))
 (=> $x311 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1123X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var1122X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1122X)))
 (= $x311 false)))
 ))
 (let (($x263 (and $x70 $x362)))
 (let (($x306 (= $x263 true)))
 (let (($x294 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var1117X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x280))))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv2 32))) ?x315)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv3 32))) ?x62)))
 (let ((?x326 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1117X)))
 (let (($x213 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1117X)))
 (=> $x213 (= ?x326 ?x184)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1116X) (bvult input.ind-%var1116X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x213 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1116X)))
 (= $x213 $x161))))
 ))
 (let (($x242 (and $x298 $x294)))
 (let (($x296 (= $x242 true)))
 (let (($x262 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1111X)))
 (=> $x311 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1111X) (_ bv0 32)))))
 ))
 (let (($x199 (forall ((input.ind-%var1110X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1110X)))
 (= $x311 false)))
 ))
 (let (($x29 (and $x199 $x262)))
 (let (($x117 (= $x29 true)))
 (let ((?x204 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x204)))
 (let (($x290 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x290 true)))
 (let (($x248 (= $x302 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x264 (= $x286 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x209 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x196)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x175)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x107)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (and $x179 $x163)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x186 $x17)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x164 $x141)))
 (let (($x37 (not $x178)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x114 $x79)))
 (let (($x174 (and (not $x191) $x37)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x110 $x82)))
 (let (($x98 (not $x166)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x106 $x5)))
 (let (($x77 (and (not $x105) $x98)))
 (let (($x78 (and (and (and (and (and (and $x77 $x174) $x133) $x172) $x100) $x145) $x157)))
 (let (($x197 (and $x78 $x167)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x170 (or false (or false (and (and true (or $x119 $x118)) (or $x9 $x171))))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x170)))
 (let (($x198 (and $x189 $x197)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x162 (= $x151 true)))
 (let (($x158 (= $x162 true)))
 (let (($x12 (= $x158 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x87 true)))
 (let (($x182 (= $x44 true)))
 (let (($x61 (= $x182 true)))
 (let ((?x137 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x173 (= (_ bv0 2) ?x137)))
 (let (($x116 (= $x173 true)))
 (let (($x135 (= $x116 true)))
 (let ((?x57 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x57)))
 (let (($x108 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (= $x108 true)))
 (let (($x177 (= $x103 true)))
 (let (($x71 (= ?x80 input.dst.llvm-%n)))
 (let (($x195 (= $x71 true)))
 (let (($x168 (= $x195 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x73 (bvsub ?x187 ?x123)))
 (let (($x152 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x73) (bvult ?x187 ?x73))))
 (let (($x74 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x126 (ite $x74 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x147 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x147)))
 (let ((?x8 ((_ extract 63 32) ?x53)))
 (let (($x39 (= ?x8 ?x126)))
 (let (($x130 (and $x39 $x152)))
 (let (($x76 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x50 (and $x76 $x130)))
 (let (($x93 (= true $x50)))
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (=> $x36 $x93)))
 (let (($x24 (= $x41 true)))
 (let (($x140 (= $x24 true)))
 (let (($x91 (= $x140 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x67 (= $x33 true)))
 (let (($x97 (= $x67 true)))
 (let (($x26 (= $x97 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x36 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x52 (and $x16 $x26)))
 (let (($x156 (and $x52 $x91)))
 (let (($x23 (and $x156 $x168)))
 (let (($x10 (and $x23 $x177)))
 (let (($x104 (and $x10 $x135)))
 (let (($x64 (and $x104 $x61)))
 (let (($x129 (and $x64 $x12)))
 (let (($x208 (and $x129 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x255 (and $x253 $x264)))
 (let (($x54 (and $x255 $x248)))
 (let (($x274 (and $x54 $x117)))
 (let (($x155 (and $x274 $x296)))
 (let (($x358 (and $x155 $x306)))
 (let (($x304 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (and (not $x304) $x358)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x324 (and $x43 $x122)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x216 $x324)))
 (let (($x261 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x352 (and $x261 $x144)))
 (let (($x127 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd ?x187 (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x90 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x143 (or false (or false (and (and true (or $x83 $x90)) (or $x18 $x127))))))
 (let (($x282 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x143)))
 (let (($x132 (=> (and $x36 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x143)))
 (let (($x351 (and $x132 $x352)))
 (let (($x359 (=> $x351 $x327)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x247 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x267 (bvule ?x247 (_ bv4 32))))
 (let (($x349 (= $x267 true)))
 (let (($x327 (= $x349 true)))
 (let (($x362 (forall ((input.ind-%var1123X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1123X)))
 (=> $x311 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1123X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var1122X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1122X)))
 (= $x311 false)))
 ))
 (let (($x263 (and $x70 $x362)))
 (let (($x306 (= $x263 true)))
 (let (($x294 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var1117X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x280))))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv2 32))) ?x315)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x280 (_ bv3 32))) ?x62)))
 (let ((?x326 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1117X)))
 (let (($x213 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1117X)))
 (=> $x213 (= ?x326 ?x184)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1116X) (bvult input.ind-%var1116X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x213 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1116X)))
 (= $x213 $x161))))
 ))
 (let (($x242 (and $x298 $x294)))
 (let (($x296 (= $x242 true)))
 (let (($x262 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1111X)))
 (=> $x311 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1111X) (_ bv0 32)))))
 ))
 (let (($x199 (forall ((input.ind-%var1110X (_ BitVec 32)) )(let (($x311 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1110X)))
 (= $x311 false)))
 ))
 (let (($x29 (and $x199 $x262)))
 (let (($x117 (= $x29 true)))
 (let ((?x204 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x204)))
 (let (($x290 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x290 true)))
 (let (($x248 (= $x302 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x264 (= $x286 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x209 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x196)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x175)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x107)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (and $x179 $x163)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x186 $x17)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x164 $x141)))
 (let (($x37 (not $x178)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x114 $x79)))
 (let (($x174 (and (not $x191) $x37)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x110 $x82)))
 (let (($x98 (not $x166)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x106 $x5)))
 (let (($x77 (and (not $x105) $x98)))
 (let (($x78 (and (and (and (and (and (and $x77 $x174) $x133) $x172) $x100) $x145) $x157)))
 (let (($x197 (and $x78 $x167)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x170 (or false (or false (and (and true (or $x119 $x118)) (or $x9 $x171))))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x170)))
 (let (($x198 (and $x189 $x197)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x162 (= $x151 true)))
 (let (($x158 (= $x162 true)))
 (let (($x12 (= $x158 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x87 true)))
 (let (($x182 (= $x44 true)))
 (let (($x61 (= $x182 true)))
 (let ((?x137 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x173 (= (_ bv0 2) ?x137)))
 (let (($x116 (= $x173 true)))
 (let (($x135 (= $x116 true)))
 (let ((?x57 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x57)))
 (let (($x108 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (= $x108 true)))
 (let (($x177 (= $x103 true)))
 (let (($x71 (= ?x80 input.dst.llvm-%n)))
 (let (($x195 (= $x71 true)))
 (let (($x168 (= $x195 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x73 (bvsub ?x187 ?x123)))
 (let (($x152 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x73) (bvult ?x187 ?x73))))
 (let (($x74 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x126 (ite $x74 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x147 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x147)))
 (let ((?x8 ((_ extract 63 32) ?x53)))
 (let (($x39 (= ?x8 ?x126)))
 (let (($x130 (and $x39 $x152)))
 (let (($x76 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x50 (and $x76 $x130)))
 (let (($x93 (= true $x50)))
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (=> $x36 $x93)))
 (let (($x24 (= $x41 true)))
 (let (($x140 (= $x24 true)))
 (let (($x91 (= $x140 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x67 (= $x33 true)))
 (let (($x97 (= $x67 true)))
 (let (($x26 (= $x97 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x72 (= $x36 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x16 (and $x84 $x46)))
 (let (($x52 (and $x16 $x26)))
 (let (($x156 (and $x52 $x91)))
 (let (($x23 (and $x156 $x168)))
 (let (($x10 (and $x23 $x177)))
 (let (($x104 (and $x10 $x135)))
 (let (($x64 (and $x104 $x61)))
 (let (($x129 (and $x64 $x12)))
 (let (($x208 (and $x129 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x255 (and $x253 $x264)))
 (let (($x54 (and $x255 $x248)))
 (let (($x274 (and $x54 $x117)))
 (let (($x155 (and $x274 $x296)))
 (let (($x358 (and $x155 $x306)))
 (let (($x304 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (and (not $x304) $x358)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x324 (and $x43 $x122)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x216 $x324)))
 (let (($x261 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x352 (and $x261 $x144)))
 (let (($x127 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd ?x187 (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x90 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x143 (or false (or false (and (and true (or $x83 $x90)) (or $x18 $x127))))))
 (let (($x282 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x143)))
 (let (($x132 (=> (and $x36 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x143)))
 (let (($x351 (and $x132 $x352)))
 (let (($x359 (=> $x351 $x327)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000024)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000027)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000024)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) false
      (not (bvule #x00000004 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x71990460)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000401)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7b52ec14)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7b52ec17)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x71990463)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7b52ec14)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x71990460)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000401)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000401)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x316 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x335 (bvule ?x316 (_ bv4294967294 32))))
 (let (($x203 (= $x335 true)))
 (let (($x256 (= $x203 true)))
 (let (($x258 (forall ((input.ind-%var1187X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1187X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1187X) (_ bv0 32)))))
 ))
 (let (($x251 (forall ((input.ind-%var1186X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1186X)))
 (= $x273 false)))
 ))
 (let (($x235 (and $x251 $x258)))
 (let (($x281 (= $x235 true)))
 (let (($x271 (forall ((input.ind-%var1181X (_ BitVec 32)) )(let ((?x247 (bvadd (bvmul input.ind-%var1181X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x247))))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv2 32))) ?x359)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv3 32))) ?x125)))
 (let ((?x315 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1181X)))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1181X)))
 (=> $x233 (= ?x315 ?x303)))))))))
 ))
 (let (($x146 (forall ((input.ind-%var1180X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1180X) (bvult input.ind-%var1180X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1180X)))
 (= $x233 $x243))))
 ))
 (let (($x355 (and $x146 $x271)))
 (let (($x357 (= $x355 true)))
 (let (($x117 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (= $x273 false)))
 ))
 (let (($x334 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1175X) (_ bv0 32)))))
 ))
 (let (($x274 (and $x334 $x117)))
 (let (($x213 (= $x274 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x246)))
 (let (($x253 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x206 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x17)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x107)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x159)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (and $x133 $x188)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x139 $x172)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x114 $x79)))
 (let (($x120 (not $x191)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x166 $x98)))
 (let (($x141 (and (not $x77) $x120)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x106 $x5)))
 (let (($x32 (not $x105)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x158 $x12)))
 (let (($x82 (and (not $x189) $x32)))
 (let (($x157 (and (and (and (and (and (and $x82 $x141) $x37) $x102) $x185) $x179) $x163)))
 (let (($x78 (and $x157 $x100)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x101 (or false (or false (and (and true (or $x49 $x138)) (or $x81 $x193))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x196 (and $x170 $x78)))
 (let (($x167 (= $x196 true)))
 (let (($x197 (= $x167 true)))
 (let (($x198 (= $x197 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x44 true)))
 (let (($x61 (= $x182 true)))
 (let (($x64 (= $x61 true)))
 (let (($x173 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x173 true)))
 (let (($x135 (= $x116 true)))
 (let (($x104 (= $x135 true)))
 (let ((?x103 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x177 (= (_ bv0 2) ?x103)))
 (let (($x10 (= $x177 true)))
 (let (($x194 (= $x10 true)))
 (let ((?x24 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x24)))
 (let (($x71 (= ?x140 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x195 (= $x71 true)))
 (let (($x168 (= $x195 true)))
 (let (($x91 (= ?x140 input.dst.llvm-%n)))
 (let (($x156 (= $x91 true)))
 (let (($x57 (= $x156 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x74 (bvsub ?x187 ?x123)))
 (let (($x190 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x74) (bvult ?x187 ?x74))))
 (let (($x68 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x53 (ite $x68 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x89 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvmul (_ bv4 64) ?x89)))
 (let ((?x76 ((_ extract 63 32) ?x7)))
 (let (($x8 (= ?x76 ?x53)))
 (let (($x73 (and $x8 $x190)))
 (let (($x26 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x58 (and $x26 $x73)))
 (let (($x150 (= true $x58)))
 (let (($x55 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (=> $x55 $x150)))
 (let (($x130 (= $x152 true)))
 (let (($x50 (= $x130 true)))
 (let (($x93 (= $x50 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (= $x55 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x33 (and $x84 $x16)))
 (let (($x41 (and $x33 $x93)))
 (let (($x80 (and $x41 $x57)))
 (let (($x23 (and $x80 $x168)))
 (let (($x137 (and $x23 $x194)))
 (let (($x87 (and $x137 $x104)))
 (let (($x151 (and $x87 $x64)))
 (let (($x202 (and $x151 $x198)))
 (let (($x219 (and $x202 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x286 (and $x245 $x212)))
 (let (($x224 (and $x286 $x213)))
 (let (($x301 (and $x224 $x357)))
 (let (($x285 (and $x301 $x281)))
 (let (($x331 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and (not $x331) $x285)))
 (let (($x241 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (and $x241 $x214)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x348 (and $x227 $x297)))
 (let (($x291 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x291 $x348)))
 (let (($x180 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd ?x187 (_ bv3 32))))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x20 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x132 (or false (or false (and (and true (or $x183 $x20)) (or $x154 $x180))))))
 (let (($x261 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x132)))
 (let (($x85 (=> (and $x55 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x132)))
 (let (($x300 (and $x85 $x259)))
 (let (($x176 (=> $x300 $x256)))
 (not $x176))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x316 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x335 (bvule ?x316 (_ bv4294967294 32))))
 (let (($x203 (= $x335 true)))
 (let (($x256 (= $x203 true)))
 (let (($x258 (forall ((input.ind-%var1187X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1187X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1187X) (_ bv0 32)))))
 ))
 (let (($x251 (forall ((input.ind-%var1186X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1186X)))
 (= $x273 false)))
 ))
 (let (($x235 (and $x251 $x258)))
 (let (($x281 (= $x235 true)))
 (let (($x271 (forall ((input.ind-%var1181X (_ BitVec 32)) )(let ((?x247 (bvadd (bvmul input.ind-%var1181X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x247))))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv2 32))) ?x359)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x247 (_ bv3 32))) ?x125)))
 (let ((?x315 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1181X)))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1181X)))
 (=> $x233 (= ?x315 ?x303)))))))))
 ))
 (let (($x146 (forall ((input.ind-%var1180X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1180X) (bvult input.ind-%var1180X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1180X)))
 (= $x233 $x243))))
 ))
 (let (($x355 (and $x146 $x271)))
 (let (($x357 (= $x355 true)))
 (let (($x117 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (= $x273 false)))
 ))
 (let (($x334 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1175X) (_ bv0 32)))))
 ))
 (let (($x274 (and $x334 $x117)))
 (let (($x213 (= $x274 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x246)))
 (let (($x253 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x206 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x17)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x107)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x159)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (and $x133 $x188)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x139 $x172)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x114 $x79)))
 (let (($x120 (not $x191)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x166 $x98)))
 (let (($x141 (and (not $x77) $x120)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x106 $x5)))
 (let (($x32 (not $x105)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x158 $x12)))
 (let (($x82 (and (not $x189) $x32)))
 (let (($x157 (and (and (and (and (and (and $x82 $x141) $x37) $x102) $x185) $x179) $x163)))
 (let (($x78 (and $x157 $x100)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x101 (or false (or false (and (and true (or $x49 $x138)) (or $x81 $x193))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x196 (and $x170 $x78)))
 (let (($x167 (= $x196 true)))
 (let (($x197 (= $x167 true)))
 (let (($x198 (= $x197 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x44 true)))
 (let (($x61 (= $x182 true)))
 (let (($x64 (= $x61 true)))
 (let (($x173 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x173 true)))
 (let (($x135 (= $x116 true)))
 (let (($x104 (= $x135 true)))
 (let ((?x103 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x177 (= (_ bv0 2) ?x103)))
 (let (($x10 (= $x177 true)))
 (let (($x194 (= $x10 true)))
 (let ((?x24 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x24)))
 (let (($x71 (= ?x140 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x195 (= $x71 true)))
 (let (($x168 (= $x195 true)))
 (let (($x91 (= ?x140 input.dst.llvm-%n)))
 (let (($x156 (= $x91 true)))
 (let (($x57 (= $x156 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x74 (bvsub ?x187 ?x123)))
 (let (($x190 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x74) (bvult ?x187 ?x74))))
 (let (($x68 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x53 (ite $x68 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x89 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvmul (_ bv4 64) ?x89)))
 (let ((?x76 ((_ extract 63 32) ?x7)))
 (let (($x8 (= ?x76 ?x53)))
 (let (($x73 (and $x8 $x190)))
 (let (($x26 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x58 (and $x26 $x73)))
 (let (($x150 (= true $x58)))
 (let (($x55 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (=> $x55 $x150)))
 (let (($x130 (= $x152 true)))
 (let (($x50 (= $x130 true)))
 (let (($x93 (= $x50 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (= $x55 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x33 (and $x84 $x16)))
 (let (($x41 (and $x33 $x93)))
 (let (($x80 (and $x41 $x57)))
 (let (($x23 (and $x80 $x168)))
 (let (($x137 (and $x23 $x194)))
 (let (($x87 (and $x137 $x104)))
 (let (($x151 (and $x87 $x64)))
 (let (($x202 (and $x151 $x198)))
 (let (($x219 (and $x202 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x286 (and $x245 $x212)))
 (let (($x224 (and $x286 $x213)))
 (let (($x301 (and $x224 $x357)))
 (let (($x285 (and $x301 $x281)))
 (let (($x331 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and (not $x331) $x285)))
 (let (($x241 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (and $x241 $x214)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x348 (and $x227 $x297)))
 (let (($x291 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x291 $x348)))
 (let (($x180 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd ?x187 (_ bv3 32))))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x20 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x132 (or false (or false (and (and true (or $x183 $x20)) (or $x154 $x180))))))
 (let (($x261 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x132)))
 (let (($x85 (=> (and $x55 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x132)))
 (let (($x300 (and $x85 $x259)))
 (let (($x176 (=> $x300 $x256)))
 (not $x176))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x313 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x313 (_ bv0 32))))
 (let (($x240 (= $x352 true)))
 (let (($x270 (= $x240 true)))
 (let (($x268 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1205X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1205X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1204X)))
 (= $x199 false)))
 ))
 (let (($x161 (and $x294 $x268)))
 (let (($x250 (= $x161 true)))
 (let (($x15 (forall ((input.ind-%var1199X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var1199X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x62))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x62 (_ bv2 32))) ?x302)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x62 (_ bv3 32))) ?x323)))
 (let ((?x251 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1199X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1199X)))
 (=> $x299 (= ?x251 ?x69)))))))))
 ))
 (let (($x271 (forall ((input.ind-%var1198X (_ BitVec 32)) )(let (($x309 (and (bvule (_ bv0 32) input.ind-%var1198X) (bvult input.ind-%var1198X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1198X)))
 (= $x299 $x309))))
 ))
 (let (($x358 (and $x271 $x15)))
 (let (($x122 (= $x358 true)))
 (let (($x184 (forall ((input.ind-%var1193X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1193X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1193X) (_ bv0 32)))))
 ))
 (let (($x274 (forall ((input.ind-%var1192X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1192X)))
 (= $x199 false)))
 ))
 (let (($x351 (and $x274 $x184)))
 (let (($x247 (= $x351 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x244)))
 (let (($x276 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x222 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x179)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x148)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x145 $x133)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (and $x102 $x159)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x114 $x79)))
 (let (($x120 (not $x191)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (and $x98 $x77)))
 (let (($x31 (and (not $x164) $x120)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x106 $x5)))
 (let (($x32 (not $x105)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x169 $x160)))
 (let (($x166 (and (not $x110) $x32)))
 (let (($x78 (and (and (and (and (and (and $x166 $x31) $x37) $x174) $x188) $x185) $x186)))
 (let (($x196 (and $x78 $x175)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x158 (or false (or false (and (and true (or $x119 $x118)) (or $x9 $x171))))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x158)))
 (let (($x167 (and $x189 $x196)))
 (let (($x197 (= $x167 true)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x44 true)))
 (let (($x61 (= $x182 true)))
 (let (($x64 (= $x61 true)))
 (let (($x173 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x173 true)))
 (let (($x135 (= $x116 true)))
 (let (($x104 (= $x135 true)))
 (let ((?x103 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x177 (= (_ bv0 2) ?x103)))
 (let (($x10 (= $x177 true)))
 (let (($x194 (= $x10 true)))
 (let ((?x24 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x24)))
 (let (($x71 (= ?x140 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x195 (= $x71 true)))
 (let (($x168 (= $x195 true)))
 (let (($x91 (= ?x140 input.dst.llvm-%n)))
 (let (($x156 (= $x91 true)))
 (let (($x57 (= $x156 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x66 (bvsub ?x187 ?x123)))
 (let (($x190 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x66) (bvult ?x187 ?x66))))
 (let (($x68 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x53 (ite $x68 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x89 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvmul (_ bv4 64) ?x89)))
 (let ((?x76 ((_ extract 63 32) ?x7)))
 (let (($x8 (= ?x76 ?x53)))
 (let (($x73 (and $x8 $x190)))
 (let (($x26 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x58 (and $x26 $x73)))
 (let (($x150 (= true $x58)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (=> $x25 $x150)))
 (let (($x130 (= $x152 true)))
 (let (($x50 (= $x130 true)))
 (let (($x93 (= $x50 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (= $x25 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x33 (and $x84 $x16)))
 (let (($x41 (and $x33 $x93)))
 (let (($x80 (and $x41 $x57)))
 (let (($x23 (and $x80 $x168)))
 (let (($x137 (and $x23 $x194)))
 (let (($x87 (and $x137 $x104)))
 (let (($x151 (and $x87 $x64)))
 (let (($x206 (and $x151 $x202)))
 (let (($x218 (and $x206 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x204 (and $x246 $x286)))
 (let (($x225 (and $x204 $x247)))
 (let (($x362 (and $x225 $x122)))
 (let (($x314 (and $x362 $x250)))
 (let (($x295 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x280 (and (not $x295) $x314)))
 (let (($x304 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (and $x304 $x280)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x311 (and $x13 $x255)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x279 $x311)))
 (let (($x143 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd ?x187 (_ bv3 32))))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x18 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x85 (or false (or false (and (and true (or $x115 $x18)) (or $x278 $x143))))))
 (let (($x291 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x85)))
 (let (($x95 (=> (and $x25 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x85)))
 (let (($x59 (and $x95 $x144)))
 (let (($x360 (=> $x59 $x270)))
 (not $x360))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x313 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x313 (_ bv0 32))))
 (let (($x240 (= $x352 true)))
 (let (($x270 (= $x240 true)))
 (let (($x268 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1205X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1205X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1204X)))
 (= $x199 false)))
 ))
 (let (($x161 (and $x294 $x268)))
 (let (($x250 (= $x161 true)))
 (let (($x15 (forall ((input.ind-%var1199X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var1199X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x62))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x62 (_ bv2 32))) ?x302)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x62 (_ bv3 32))) ?x323)))
 (let ((?x251 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1199X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1199X)))
 (=> $x299 (= ?x251 ?x69)))))))))
 ))
 (let (($x271 (forall ((input.ind-%var1198X (_ BitVec 32)) )(let (($x309 (and (bvule (_ bv0 32) input.ind-%var1198X) (bvult input.ind-%var1198X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1198X)))
 (= $x299 $x309))))
 ))
 (let (($x358 (and $x271 $x15)))
 (let (($x122 (= $x358 true)))
 (let (($x184 (forall ((input.ind-%var1193X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1193X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1193X) (_ bv0 32)))))
 ))
 (let (($x274 (forall ((input.ind-%var1192X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1192X)))
 (= $x199 false)))
 ))
 (let (($x351 (and $x274 $x184)))
 (let (($x247 (= $x351 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x244)))
 (let (($x276 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x222 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x179)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x148)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x145 $x133)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (and $x102 $x159)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x114 $x79)))
 (let (($x120 (not $x191)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (and $x98 $x77)))
 (let (($x31 (and (not $x164) $x120)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x106 $x5)))
 (let (($x32 (not $x105)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x169 $x160)))
 (let (($x166 (and (not $x110) $x32)))
 (let (($x78 (and (and (and (and (and (and $x166 $x31) $x37) $x174) $x188) $x185) $x186)))
 (let (($x196 (and $x78 $x175)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x158 (or false (or false (and (and true (or $x119 $x118)) (or $x9 $x171))))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x158)))
 (let (($x167 (and $x189 $x196)))
 (let (($x197 (= $x167 true)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x44 true)))
 (let (($x61 (= $x182 true)))
 (let (($x64 (= $x61 true)))
 (let (($x173 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x173 true)))
 (let (($x135 (= $x116 true)))
 (let (($x104 (= $x135 true)))
 (let ((?x103 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x177 (= (_ bv0 2) ?x103)))
 (let (($x10 (= $x177 true)))
 (let (($x194 (= $x10 true)))
 (let ((?x24 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x24)))
 (let (($x71 (= ?x140 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x195 (= $x71 true)))
 (let (($x168 (= $x195 true)))
 (let (($x91 (= ?x140 input.dst.llvm-%n)))
 (let (($x156 (= $x91 true)))
 (let (($x57 (= $x156 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x66 (bvsub ?x187 ?x123)))
 (let (($x190 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x66) (bvult ?x187 ?x66))))
 (let (($x68 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x53 (ite $x68 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x89 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvmul (_ bv4 64) ?x89)))
 (let ((?x76 ((_ extract 63 32) ?x7)))
 (let (($x8 (= ?x76 ?x53)))
 (let (($x73 (and $x8 $x190)))
 (let (($x26 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x58 (and $x26 $x73)))
 (let (($x150 (= true $x58)))
 (let (($x25 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (=> $x25 $x150)))
 (let (($x130 (= $x152 true)))
 (let (($x50 (= $x130 true)))
 (let (($x93 (= $x50 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (= $x25 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x33 (and $x84 $x16)))
 (let (($x41 (and $x33 $x93)))
 (let (($x80 (and $x41 $x57)))
 (let (($x23 (and $x80 $x168)))
 (let (($x137 (and $x23 $x194)))
 (let (($x87 (and $x137 $x104)))
 (let (($x151 (and $x87 $x64)))
 (let (($x206 (and $x151 $x202)))
 (let (($x218 (and $x206 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x204 (and $x246 $x286)))
 (let (($x225 (and $x204 $x247)))
 (let (($x362 (and $x225 $x122)))
 (let (($x314 (and $x362 $x250)))
 (let (($x295 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x280 (and (not $x295) $x314)))
 (let (($x304 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (and $x304 $x280)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x311 (and $x13 $x255)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x279 $x311)))
 (let (($x143 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd ?x187 (_ bv3 32))))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x18 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x85 (or false (or false (and (and true (or $x115 $x18)) (or $x278 $x143))))))
 (let (($x291 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x85)))
 (let (($x95 (=> (and $x25 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x85)))
 (let (($x59 (and $x95 $x144)))
 (let (($x360 (=> $x59 $x270)))
 (not $x360))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x357 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x162 (bvule ?x357 (_ bv4294967294 32))))
 (let (($x361 (= $x162 true)))
 (let (($x306 (= $x361 true)))
 (let (($x243 (forall ((input.ind-%var1223X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1223X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1223X) (_ bv0 32)))))
 ))
 (let (($x214 (forall ((input.ind-%var1222X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1222X)))
 (= $x308 false)))
 ))
 (let (($x70 (and $x214 $x243)))
 (let (($x267 (= $x70 true)))
 (let (($x285 (forall ((input.ind-%var1217X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1217X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x233)))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x42)))
 (let ((?x294 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1217X)))
 (let (($x312 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1217X)))
 (=> $x312 (= ?x294 ?x273)))))))))
 ))
 (let (($x15 (forall ((input.ind-%var1216X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1216X) (bvult input.ind-%var1216X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x312 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1216X)))
 (= $x312 $x165))))
 ))
 (let (($x256 (and $x15 $x285)))
 (let (($x176 (= $x256 true)))
 (let (($x235 (forall ((input.ind-%var1211X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1211X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1211X) (_ bv0 32)))))
 ))
 (let (($x351 (forall ((input.ind-%var1210X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1210X)))
 (= $x308 false)))
 ))
 (let (($x298 (and $x351 $x235)))
 (let (($x62 (= $x298 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x253)))
 (let (($x212 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x100 (bvsub ?x187 ?x123)))
 (let (($x179 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x100) (bvult ?x187 ?x100))))
 (let (($x17 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x172 (ite $x17 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x159 (bvmul (_ bv4 64) ?x133)))
 (let ((?x188 ((_ extract 63 32) ?x159)))
 (let (($x185 (= ?x188 ?x172)))
 (let (($x175 (and $x185 $x179)))
 (let (($x145 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x196 (and $x145 $x175)))
 (let (($x167 (= true $x196)))
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (=> $x36 $x167)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x178 true)))
 (let (($x163 (= $x37 true)))
 (let (($x153 (= $x163 true)))
 (let (($x191 (= $x36 true)))
 (let (($x120 (= $x191 true)))
 (let (($x31 (= $x120 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x160)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x189)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x193 $x171)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x81 $x109)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x182 $x61)))
 (let (($x151 (not $x64)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x104 $x87)))
 (let (($x49 (and (not $x44) $x151)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x10 $x194)))
 (let (($x173 (not $x137)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x152 $x130)))
 (let (($x135 (and (not $x177) $x173)))
 (let (($x166 (and (and (and (and (and (and $x135 $x49) $x138) $x118) $x101) $x158) $x169)))
 (let (($x98 (and $x166 $x110)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x23 (or false (or false (and (and true (or $x24 $x140)) (or $x57 $x80))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x77 (and $x103 $x98)))
 (let (($x164 (= $x77 true)))
 (let (($x141 (= $x164 true)))
 (let (($x114 (= $x141 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x39 (= $x126 true)))
 (let (($x190 (= $x39 true)))
 (let (($x73 (= $x190 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x53 (= (_ bv0 2) ?x147)))
 (let (($x8 (= $x53 true)))
 (let (($x74 (= $x8 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x52 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (= $x52 true)))
 (let (($x7 (= $x89 true)))
 (let (($x33 (= ?x16 input.dst.llvm-%n)))
 (let (($x67 (= $x33 true)))
 (let (($x97 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x26 (and $x75 $x97)))
 (let (($x76 (and $x26 $x7)))
 (let (($x66 (and $x76 $x74)))
 (let (($x58 (and $x66 $x73)))
 (let (($x79 (and $x58 $x114)))
 (let (($x107 (and $x79 $x31)))
 (let (($x174 (and $x107 $x153)))
 (let (($x207 (and $x174 $x206)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x329 (and $x244 $x204)))
 (let (($x326 (and $x329 $x62)))
 (let (($x316 (and $x326 $x176)))
 (let (($x263 (and $x316 $x267)))
 (let (($x254 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x359 (and (not $x254) $x263)))
 (let (($x331 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (and $x331 $x359)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x43 $x224)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x216 $x128)))
 (let (($x132 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd ?x187 (_ bv3 32))))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x154 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x95 (or false (or false (and (and true (or $x14 $x154)) (or $x282 $x132))))))
 (let (($x279 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x95)))
 (let (($x30 (=> (and $x36 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x95)))
 (let (($x296 (and $x30 $x99)))
 (let (($x262 (=> $x296 $x306)))
 (not $x262))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x357 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x162 (bvule ?x357 (_ bv4294967294 32))))
 (let (($x361 (= $x162 true)))
 (let (($x306 (= $x361 true)))
 (let (($x243 (forall ((input.ind-%var1223X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1223X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1223X) (_ bv0 32)))))
 ))
 (let (($x214 (forall ((input.ind-%var1222X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1222X)))
 (= $x308 false)))
 ))
 (let (($x70 (and $x214 $x243)))
 (let (($x267 (= $x70 true)))
 (let (($x285 (forall ((input.ind-%var1217X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1217X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x233)))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x42)))
 (let ((?x294 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1217X)))
 (let (($x312 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1217X)))
 (=> $x312 (= ?x294 ?x273)))))))))
 ))
 (let (($x15 (forall ((input.ind-%var1216X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1216X) (bvult input.ind-%var1216X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x312 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1216X)))
 (= $x312 $x165))))
 ))
 (let (($x256 (and $x15 $x285)))
 (let (($x176 (= $x256 true)))
 (let (($x235 (forall ((input.ind-%var1211X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1211X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1211X) (_ bv0 32)))))
 ))
 (let (($x351 (forall ((input.ind-%var1210X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1210X)))
 (= $x308 false)))
 ))
 (let (($x298 (and $x351 $x235)))
 (let (($x62 (= $x298 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x253)))
 (let (($x212 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x208 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x100 (bvsub ?x187 ?x123)))
 (let (($x179 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x100) (bvult ?x187 ?x100))))
 (let (($x17 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x172 (ite $x17 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x159 (bvmul (_ bv4 64) ?x133)))
 (let ((?x188 ((_ extract 63 32) ?x159)))
 (let (($x185 (= ?x188 ?x172)))
 (let (($x175 (and $x185 $x179)))
 (let (($x145 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x196 (and $x145 $x175)))
 (let (($x167 (= true $x196)))
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (=> $x36 $x167)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x178 true)))
 (let (($x163 (= $x37 true)))
 (let (($x153 (= $x163 true)))
 (let (($x191 (= $x36 true)))
 (let (($x120 (= $x191 true)))
 (let (($x31 (= $x120 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x160)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x189)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x193 $x171)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x81 $x109)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x182 $x61)))
 (let (($x151 (not $x64)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x104 $x87)))
 (let (($x49 (and (not $x44) $x151)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x10 $x194)))
 (let (($x173 (not $x137)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x152 $x130)))
 (let (($x135 (and (not $x177) $x173)))
 (let (($x166 (and (and (and (and (and (and $x135 $x49) $x138) $x118) $x101) $x158) $x169)))
 (let (($x98 (and $x166 $x110)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x23 (or false (or false (and (and true (or $x24 $x140)) (or $x57 $x80))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x77 (and $x103 $x98)))
 (let (($x164 (= $x77 true)))
 (let (($x141 (= $x164 true)))
 (let (($x114 (= $x141 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x39 (= $x126 true)))
 (let (($x190 (= $x39 true)))
 (let (($x73 (= $x190 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x53 (= (_ bv0 2) ?x147)))
 (let (($x8 (= $x53 true)))
 (let (($x74 (= $x8 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x52 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (= $x52 true)))
 (let (($x7 (= $x89 true)))
 (let (($x33 (= ?x16 input.dst.llvm-%n)))
 (let (($x67 (= $x33 true)))
 (let (($x97 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x26 (and $x75 $x97)))
 (let (($x76 (and $x26 $x7)))
 (let (($x66 (and $x76 $x74)))
 (let (($x58 (and $x66 $x73)))
 (let (($x79 (and $x58 $x114)))
 (let (($x107 (and $x79 $x31)))
 (let (($x174 (and $x107 $x153)))
 (let (($x207 (and $x174 $x206)))
 (let (($x222 (and $x207 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x329 (and $x244 $x204)))
 (let (($x326 (and $x329 $x62)))
 (let (($x316 (and $x326 $x176)))
 (let (($x263 (and $x316 $x267)))
 (let (($x254 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x359 (and (not $x254) $x263)))
 (let (($x331 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (and $x331 $x359)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x43 $x224)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x216 $x128)))
 (let (($x132 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd ?x187 (_ bv3 32))))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x154 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x95 (or false (or false (and (and true (or $x14 $x154)) (or $x282 $x132))))))
 (let (($x279 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x95)))
 (let (($x30 (=> (and $x36 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x95)))
 (let (($x296 (and $x30 $x99)))
 (let (($x262 (=> $x296 $x306)))
 (not $x262))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (bvsge ?x122 (_ bv0 32))))
 (let (($x324 (= $x129 true)))
 (let (($x203 (= $x324 true)))
 (let (($x309 (forall ((input.ind-%var1241X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1241X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1241X) (_ bv0 32)))))
 ))
 (let (($x280 (forall ((input.ind-%var1240X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1240X)))
 (= $x303 false)))
 ))
 (let (($x300 (and $x280 $x309)))
 (let (($x290 (= $x300 true)))
 (let (($x314 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let ((?x268 (bvadd (bvmul input.ind-%var1235X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x299 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x268))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv2 32))) ?x299)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv3 32))) ?x27)))
 (let ((?x214 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1235X)))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (=> $x355 (= ?x214 ?x199)))))))))
 ))
 (let (($x285 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var1234X) (bvult input.ind-%var1234X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1234X)))
 (= $x355 $x248))))
 ))
 (let (($x270 (and $x285 $x314)))
 (let (($x360 (= $x270 true)))
 (let (($x161 (forall ((input.ind-%var1229X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1229X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1229X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var1228X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1228X)))
 (= $x303 false)))
 ))
 (let (($x40 (and $x298 $x161)))
 (let (($x258 (= $x40 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x276)))
 (let (($x286 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x252 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x100 (bvsub ?x187 ?x123)))
 (let (($x175 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x100) (bvult ?x187 ?x100))))
 (let (($x172 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x185 (ite $x172 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x188 (bvmul (_ bv4 64) ?x159)))
 (let ((?x17 ((_ extract 63 32) ?x188)))
 (let (($x148 (= ?x17 ?x185)))
 (let (($x196 (and $x148 $x175)))
 (let (($x139 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x167 (and $x139 $x196)))
 (let (($x197 (= true $x167)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (=> $x131 $x197)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x163 (= $x37 true)))
 (let (($x153 (= $x163 true)))
 (let (($x174 (= $x153 true)))
 (let (($x120 (= $x131 true)))
 (let (($x31 (= $x120 true)))
 (let (($x107 (= $x31 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x158)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x105)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x81)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x5 $x193)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x118 $x9)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x182 $x61)))
 (let (($x151 (not $x64)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x87 $x44)))
 (let (($x82 (and (not $x112) $x151)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x10 $x194)))
 (let (($x173 (not $x137)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x93 $x108)))
 (let (($x104 (and (not $x116) $x173)))
 (let (($x98 (and (and (and (and (and (and $x104 $x82) $x138) $x119) $x171) $x101) $x170)))
 (let (($x77 (and $x98 $x32)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x152 (or false (or false (and (and true (or $x91 $x156)) (or $x71 $x195))))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x152)))
 (let (($x164 (and $x177 $x77)))
 (let (($x141 (= $x164 true)))
 (let (($x114 (= $x141 true)))
 (let (($x79 (= $x114 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x39 (= $x126 true)))
 (let (($x190 (= $x39 true)))
 (let (($x73 (= $x190 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x53 (= (_ bv0 2) ?x147)))
 (let (($x8 (= $x53 true)))
 (let (($x74 (= $x8 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x52 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (= $x52 true)))
 (let (($x7 (= $x89 true)))
 (let (($x33 (= ?x16 input.dst.llvm-%n)))
 (let (($x67 (= $x33 true)))
 (let (($x97 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x26 (and $x75 $x97)))
 (let (($x76 (and $x26 $x7)))
 (let (($x66 (and $x76 $x74)))
 (let (($x58 (and $x66 $x73)))
 (let (($x191 (and $x58 $x79)))
 (let (($x178 (and $x191 $x107)))
 (let (($x157 (and $x178 $x174)))
 (let (($x208 (and $x157 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x274 (and $x253 $x329)))
 (let (($x349 (and $x274 $x258)))
 (let (($x313 (and $x349 $x360)))
 (let (($x335 (and $x313 $x290)))
 (let (($x242 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x302 (and (not $x242) $x335)))
 (let (($x295 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and $x295 $x302)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x241 $x225)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x227 $x284)))
 (let (($x85 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd ?x187 (_ bv3 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x278 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x30 (or false (or false (and (and true (or $x127 $x278)) (or $x261 $x85))))))
 (let (($x216 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x30)))
 (let (($x90 (=> (and $x131 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x30)))
 (let (($x348 (and $x90 $x21)))
 (let (($x29 (=> $x348 $x203)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (bvsge ?x122 (_ bv0 32))))
 (let (($x324 (= $x129 true)))
 (let (($x203 (= $x324 true)))
 (let (($x309 (forall ((input.ind-%var1241X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1241X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1241X) (_ bv0 32)))))
 ))
 (let (($x280 (forall ((input.ind-%var1240X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1240X)))
 (= $x303 false)))
 ))
 (let (($x300 (and $x280 $x309)))
 (let (($x290 (= $x300 true)))
 (let (($x314 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let ((?x268 (bvadd (bvmul input.ind-%var1235X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x299 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x268))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv2 32))) ?x299)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x268 (_ bv3 32))) ?x27)))
 (let ((?x214 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1235X)))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (=> $x355 (= ?x214 ?x199)))))))))
 ))
 (let (($x285 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var1234X) (bvult input.ind-%var1234X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1234X)))
 (= $x355 $x248))))
 ))
 (let (($x270 (and $x285 $x314)))
 (let (($x360 (= $x270 true)))
 (let (($x161 (forall ((input.ind-%var1229X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1229X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1229X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var1228X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1228X)))
 (= $x303 false)))
 ))
 (let (($x40 (and $x298 $x161)))
 (let (($x258 (= $x40 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x276)))
 (let (($x286 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x252 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x100 (bvsub ?x187 ?x123)))
 (let (($x175 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x100) (bvult ?x187 ?x100))))
 (let (($x172 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x185 (ite $x172 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x188 (bvmul (_ bv4 64) ?x159)))
 (let ((?x17 ((_ extract 63 32) ?x188)))
 (let (($x148 (= ?x17 ?x185)))
 (let (($x196 (and $x148 $x175)))
 (let (($x139 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x167 (and $x139 $x196)))
 (let (($x197 (= true $x167)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (=> $x131 $x197)))
 (let (($x202 (= $x198 true)))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x163 (= $x37 true)))
 (let (($x153 (= $x163 true)))
 (let (($x174 (= $x153 true)))
 (let (($x120 (= $x131 true)))
 (let (($x31 (= $x120 true)))
 (let (($x107 (= $x31 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x158)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x105)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x81)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x5 $x193)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x118 $x9)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x182 $x61)))
 (let (($x151 (not $x64)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x87 $x44)))
 (let (($x82 (and (not $x112) $x151)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x10 $x194)))
 (let (($x173 (not $x137)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x93 $x108)))
 (let (($x104 (and (not $x116) $x173)))
 (let (($x98 (and (and (and (and (and (and $x104 $x82) $x138) $x119) $x171) $x101) $x170)))
 (let (($x77 (and $x98 $x32)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x152 (or false (or false (and (and true (or $x91 $x156)) (or $x71 $x195))))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x152)))
 (let (($x164 (and $x177 $x77)))
 (let (($x141 (= $x164 true)))
 (let (($x114 (= $x141 true)))
 (let (($x79 (= $x114 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x39 (= $x126 true)))
 (let (($x190 (= $x39 true)))
 (let (($x73 (= $x190 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x53 (= (_ bv0 2) ?x147)))
 (let (($x8 (= $x53 true)))
 (let (($x74 (= $x8 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x52 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (= $x52 true)))
 (let (($x7 (= $x89 true)))
 (let (($x33 (= ?x16 input.dst.llvm-%n)))
 (let (($x67 (= $x33 true)))
 (let (($x97 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x26 (and $x75 $x97)))
 (let (($x76 (and $x26 $x7)))
 (let (($x66 (and $x76 $x74)))
 (let (($x58 (and $x66 $x73)))
 (let (($x191 (and $x58 $x79)))
 (let (($x178 (and $x191 $x107)))
 (let (($x157 (and $x178 $x174)))
 (let (($x208 (and $x157 $x207)))
 (let (($x226 (and $x208 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x274 (and $x253 $x329)))
 (let (($x349 (and $x274 $x258)))
 (let (($x313 (and $x349 $x360)))
 (let (($x335 (and $x313 $x290)))
 (let (($x242 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x302 (and (not $x242) $x335)))
 (let (($x295 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and $x295 $x302)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x241 $x225)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x227 $x284)))
 (let (($x85 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd ?x187 (_ bv3 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x278 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x30 (or false (or false (and (and true (or $x127 $x278)) (or $x261 $x85))))))
 (let (($x216 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x30)))
 (let (($x90 (=> (and $x131 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x30)))
 (let (($x348 (and $x90 $x21)))
 (let (($x29 (=> $x348 $x203)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x176 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (bvule ?x176 input.dst.llvm-%n)))
 (let (($x6 (= $x150 true)))
 (let (($x240 (= $x6 true)))
 (let (($x165 (forall ((input.ind-%var1259X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1259X)))
 (=> $x69 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1259X) (_ bv0 32)))))
 ))
 (let (($x359 (forall ((input.ind-%var1258X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1258X)))
 (= $x69 false)))
 ))
 (let (($x59 (and $x359 $x165)))
 (let (($x334 (= $x59 true)))
 (let (($x263 (forall ((input.ind-%var1253X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1253X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x312)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x327)))
 (let ((?x280 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1253X)))
 (let (($x358 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1253X)))
 (=> $x358 (= ?x280 ?x308)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var1252X (_ BitVec 32)) )(let (($x117 (and (bvule (_ bv0 32) input.ind-%var1252X) (bvult input.ind-%var1252X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x358 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1252X)))
 (= $x358 $x117))))
 ))
 (let (($x306 (and $x314 $x263)))
 (let (($x262 (= $x306 true)))
 (let (($x70 (forall ((input.ind-%var1247X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1247X)))
 (=> $x69 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1247X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var1246X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1246X)))
 (= $x69 false)))
 ))
 (let (($x211 (and $x40 $x70)))
 (let (($x268 (= $x211 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x212)))
 (let (($x204 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x246 (= ?x16 input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x206 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x172 (bvsub ?x187 ?x123)))
 (let (($x100 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x172) (bvult ?x187 ?x172))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x188 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x145 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvmul (_ bv4 64) ?x145)))
 (let ((?x133 ((_ extract 63 32) ?x139)))
 (let (($x17 (= ?x133 ?x188)))
 (let (($x78 (and $x17 $x100)))
 (let (($x157 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x179 (and $x157 $x78)))
 (let (($x175 (= true $x179)))
 (let (($x86 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (=> $x86 $x175)))
 (let (($x167 (= $x196 true)))
 (let (($x197 (= $x167 true)))
 (let (($x198 (= $x197 true)))
 (let (($x31 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x107 (= $x31 true)))
 (let (($x178 (= $x107 true)))
 (let (($x37 (= $x178 true)))
 (let (($x114 (= $x86 true)))
 (let (($x79 (= $x114 true)))
 (let (($x191 (= $x79 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x9)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x81)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x169)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (and $x138 $x106)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x12 $x119)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x87 $x44)))
 (let (($x49 (not $x112)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x137 $x173)))
 (let (($x61 (and (not $x104) $x49)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x93 $x108)))
 (let (($x135 (not $x116)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x190 $x73)))
 (let (($x194 (and (not $x177) $x135)))
 (let (($x170 (and (and (and (and (and (and $x194 $x61) $x151) $x189) $x166) $x5) $x193)))
 (let (($x98 (and $x170 $x171)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x23 (or false (or false (and (and true (or $x130 $x140)) (or $x57 $x80))))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x158 (and $x152 $x98)))
 (let (($x32 (= $x158 true)))
 (let (($x77 (= $x32 true)))
 (let (($x164 (= $x77 true)))
 (let (($x53 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x8 (= $x53 true)))
 (let (($x74 (= $x8 true)))
 (let (($x66 (= $x74 true)))
 (let ((?x89 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x7 (= (_ bv0 2) ?x89)))
 (let (($x76 (= $x7 true)))
 (let (($x68 (= $x76 true)))
 (let (($x33 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (= $x33 true)))
 (let (($x97 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x26 (and $x75 $x97)))
 (let (($x147 (and $x26 $x68)))
 (let (($x126 (and $x147 $x66)))
 (let (($x141 (and $x126 $x164)))
 (let (($x120 (and $x141 $x191)))
 (let (($x163 (and $x120 $x37)))
 (let (($x202 (and $x163 $x198)))
 (let (($x219 (and $x202 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x276 (and $x245 $x253)))
 (let (($x351 (and $x276 $x274)))
 (let (($x54 (and $x351 $x268)))
 (let (($x357 (and $x54 $x262)))
 (let (($x352 (and $x357 $x334)))
 (let (($x297 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and (not $x297) $x352)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x326 (and $x254 $x233)))
 (let (($x304 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x181 (and $x304 $x326)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x38 (and $x13 $x181)))
 (let (($x95 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd ?x187 (_ bv3 32))))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x282 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x278)))
 (let (($x90 (or false (or false (and (and true (or $x180 $x282)) (or $x291 $x95))))))
 (let (($x227 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x90)))
 (let (($x20 (=> (and $x86 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x90)))
 (let (($x311 (and $x20 $x38)))
 (let (($x315 (=> $x311 $x240)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x176 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (bvule ?x176 input.dst.llvm-%n)))
 (let (($x6 (= $x150 true)))
 (let (($x240 (= $x6 true)))
 (let (($x165 (forall ((input.ind-%var1259X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1259X)))
 (=> $x69 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1259X) (_ bv0 32)))))
 ))
 (let (($x359 (forall ((input.ind-%var1258X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1258X)))
 (= $x69 false)))
 ))
 (let (($x59 (and $x359 $x165)))
 (let (($x334 (= $x59 true)))
 (let (($x263 (forall ((input.ind-%var1253X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1253X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x312)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x327)))
 (let ((?x280 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1253X)))
 (let (($x358 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1253X)))
 (=> $x358 (= ?x280 ?x308)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var1252X (_ BitVec 32)) )(let (($x117 (and (bvule (_ bv0 32) input.ind-%var1252X) (bvult input.ind-%var1252X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x358 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1252X)))
 (= $x358 $x117))))
 ))
 (let (($x306 (and $x314 $x263)))
 (let (($x262 (= $x306 true)))
 (let (($x70 (forall ((input.ind-%var1247X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1247X)))
 (=> $x69 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1247X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var1246X (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1246X)))
 (= $x69 false)))
 ))
 (let (($x211 (and $x40 $x70)))
 (let (($x268 (= $x211 true)))
 (let ((?x212 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x212)))
 (let (($x204 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x246 (= ?x16 input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x206 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x172 (bvsub ?x187 ?x123)))
 (let (($x100 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x172) (bvult ?x187 ?x172))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x188 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x145 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvmul (_ bv4 64) ?x145)))
 (let ((?x133 ((_ extract 63 32) ?x139)))
 (let (($x17 (= ?x133 ?x188)))
 (let (($x78 (and $x17 $x100)))
 (let (($x157 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x179 (and $x157 $x78)))
 (let (($x175 (= true $x179)))
 (let (($x86 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (=> $x86 $x175)))
 (let (($x167 (= $x196 true)))
 (let (($x197 (= $x167 true)))
 (let (($x198 (= $x197 true)))
 (let (($x31 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x107 (= $x31 true)))
 (let (($x178 (= $x107 true)))
 (let (($x37 (= $x178 true)))
 (let (($x114 (= $x86 true)))
 (let (($x79 (= $x114 true)))
 (let (($x191 (= $x79 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x9)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x81)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x169)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (and $x138 $x106)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x12 $x119)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x87 $x44)))
 (let (($x49 (not $x112)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x137 $x173)))
 (let (($x61 (and (not $x104) $x49)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x93 $x108)))
 (let (($x135 (not $x116)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x190 $x73)))
 (let (($x194 (and (not $x177) $x135)))
 (let (($x170 (and (and (and (and (and (and $x194 $x61) $x151) $x189) $x166) $x5) $x193)))
 (let (($x98 (and $x170 $x171)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x23 (or false (or false (and (and true (or $x130 $x140)) (or $x57 $x80))))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x158 (and $x152 $x98)))
 (let (($x32 (= $x158 true)))
 (let (($x77 (= $x32 true)))
 (let (($x164 (= $x77 true)))
 (let (($x53 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x8 (= $x53 true)))
 (let (($x74 (= $x8 true)))
 (let (($x66 (= $x74 true)))
 (let ((?x89 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x7 (= (_ bv0 2) ?x89)))
 (let (($x76 (= $x7 true)))
 (let (($x68 (= $x76 true)))
 (let (($x33 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (= $x33 true)))
 (let (($x97 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x26 (and $x75 $x97)))
 (let (($x147 (and $x26 $x68)))
 (let (($x126 (and $x147 $x66)))
 (let (($x141 (and $x126 $x164)))
 (let (($x120 (and $x141 $x191)))
 (let (($x163 (and $x120 $x37)))
 (let (($x202 (and $x163 $x198)))
 (let (($x219 (and $x202 $x209)))
 (let (($x245 (and $x219 $x252)))
 (let (($x276 (and $x245 $x253)))
 (let (($x351 (and $x276 $x274)))
 (let (($x54 (and $x351 $x268)))
 (let (($x357 (and $x54 $x262)))
 (let (($x352 (and $x357 $x334)))
 (let (($x297 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and (not $x297) $x352)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x326 (and $x254 $x233)))
 (let (($x304 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x181 (and $x304 $x326)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x38 (and $x13 $x181)))
 (let (($x95 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd ?x187 (_ bv3 32))))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x282 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x278)))
 (let (($x90 (or false (or false (and (and true (or $x180 $x282)) (or $x291 $x95))))))
 (let (($x227 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x90)))
 (let (($x20 (=> (and $x86 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x90)))
 (let (($x311 (and $x20 $x38)))
 (let (($x315 (=> $x311 $x240)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x336 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1285X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x282 (bvadd ?x187 (_ bv3 32))))
 (let ((?x60 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x187 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x149 (store ?x60 (bvadd ?x187 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x260 (store ?x149 (bvadd ?x187 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x353 (store ?x260 ?x282 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x317 (concat (select ?x353 (bvadd ?x309 (_ bv2 32))) (concat (select ?x353 (bvadd ?x309 (_ bv1 32))) (select ?x353 ?x309)))))
 (let ((?x359 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1285X)))
 (let (($x220 (= input.ind-%var1285X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x337 (= (ite $x220 input.spec-%var-i-0.L3%6%bbentry ?x359) (concat (select ?x353 (bvadd ?x309 (_ bv3 32))) ?x317))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1285X)))
 (let (($x234 (or $x256 $x220)))
 (=> $x234 $x337))))))))))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x308 (bvule (_ bv0 32) input.ind-%var1284X)))
 (let (($x330 (and $x308 (bvult input.ind-%var1284X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x220 (= input.ind-%var1284X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1284X)))
 (let (($x234 (or $x256 $x220)))
 (= $x234 $x330)))))))
 ))
 (let (($x339 (and $x215 $x336)))
 (let (($x360 (= true true)))
 (let (($x342 (and $x360 $x339)))
 (let (($x345 (= $x342 true)))
 (let (($x248 (forall ((input.ind-%var1277X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1277X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1277X) (_ bv0 32)))))
 ))
 (let (($x302 (forall ((input.ind-%var1276X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1276X)))
 (= $x273 false)))
 ))
 (let (($x296 (and $x302 $x248)))
 (let (($x146 (= $x296 true)))
 (let (($x335 (forall ((input.ind-%var1271X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1271X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x309))))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv2 32))) ?x355)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv3 32))) ?x264)))
 (let ((?x359 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1271X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1271X)))
 (=> $x256 (= ?x359 ?x303)))))))))
 ))
 (let (($x263 (forall ((input.ind-%var1270X (_ BitVec 32)) )(let (($x308 (bvule (_ bv0 32) input.ind-%var1270X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1270X)))
 (= $x256 (and $x308 (bvult input.ind-%var1270X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x203 (and $x263 $x335)))
 (let (($x29 (= $x203 true)))
 (let (($x300 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1265X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1265X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1264X)))
 (= $x273 false)))
 ))
 (let (($x301 (and $x211 $x300)))
 (let (($x243 (= $x301 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x286)))
 (let (($x329 (= ?x204 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x246 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x244 (= (_ bv0 2) ?x246)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x202 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (= $x175 true)))
 (let (($x167 (= $x196 true)))
 (let (($x197 (= $x167 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x145 (bvsub ?x187 ?x123)))
 (let (($x188 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x145) (bvult ?x187 ?x145))))
 (let (($x174 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x157 (ite $x174 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x37 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x37)))
 (let ((?x153 ((_ extract 63 32) ?x163)))
 (let (($x102 (= ?x153 ?x157)))
 (let (($x17 (and $x102 $x188)))
 (let (($x107 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x185 (and $x107 $x17)))
 (let (($x172 (= true $x185)))
 (let (($x35 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (=> $x35 $x172)))
 (let (($x186 (= $x148 true)))
 (let (($x100 (= $x186 true)))
 (let (($x78 (= $x100 true)))
 (let (($x164 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x164 true)))
 (let (($x114 (= $x141 true)))
 (let (($x79 (= $x114 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x171 true)))
 (let (($x158 (= $x98 true)))
 (let (($x32 (= $x158 true)))
 (let (($x105 (= $x35 true)))
 (let (($x81 (= $x105 true)))
 (let (($x193 (= $x81 true)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x151)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x160)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x182)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x104 $x87)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x173 $x44)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x190 $x73)))
 (let (($x10 (not $x177)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x168 $x23)))
 (let (($x108 (and (not $x152) $x10)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x91 $x156)))
 (let (($x80 (not $x57)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x26 $x52)))
 (let (($x195 (and (not $x140) $x80)))
 (let (($x169 (and (and (and (and (and (and $x195 $x108) $x135) $x137) $x112) $x61) $x64)))
 (let (($x106 (and $x169 $x109)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x103 (or false (or false (and (and true (or $x68 $x147)) (or $x74 $x66))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x103)))
 (let (($x119 (and $x130 $x106)))
 (let (($x166 (= $x119 true)))
 (let (($x110 (= $x166 true)))
 (let (($x118 (= $x110 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x5 (and $x67 $x118)))
 (let (($x170 (and $x5 $x193)))
 (let (($x77 (and $x170 $x32)))
 (let (($x191 (and $x77 $x79)))
 (let (($x179 (and $x191 $x78)))
 (let (($x198 (and $x179 $x197)))
 (let (($x209 (and $x198 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x212 (and $x252 $x276)))
 (let (($x298 (and $x212 $x351)))
 (let (($x266 (and $x298 $x243)))
 (let (($x122 (and $x266 $x29)))
 (let (($x162 (and $x122 $x146)))
 (let (($x255 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (and (not $x255) $x162)))
 (let (($x242 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x349 (and $x242 $x299)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x281 (and $x331 $x349)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x48 (and $x43 $x281)))
 (let (($x30 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x282 (bvadd ?x187 (_ bv3 32))))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x282)))
 (let (($x261 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x282)))
 (let (($x20 (or false (or false (and (and true (or $x143 $x261)) (or $x279 $x30))))))
 (let (($x13 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x20)))
 (let (($x18 (=> (and $x35 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x20)))
 (let (($x128 (and $x18 $x48)))
 (let (($x257 (=> $x128 $x345)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x336 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1285X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x282 (bvadd ?x187 (_ bv3 32))))
 (let ((?x60 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x187 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x149 (store ?x60 (bvadd ?x187 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x260 (store ?x149 (bvadd ?x187 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x353 (store ?x260 ?x282 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x317 (concat (select ?x353 (bvadd ?x309 (_ bv2 32))) (concat (select ?x353 (bvadd ?x309 (_ bv1 32))) (select ?x353 ?x309)))))
 (let ((?x359 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1285X)))
 (let (($x220 (= input.ind-%var1285X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x337 (= (ite $x220 input.spec-%var-i-0.L3%6%bbentry ?x359) (concat (select ?x353 (bvadd ?x309 (_ bv3 32))) ?x317))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1285X)))
 (let (($x234 (or $x256 $x220)))
 (=> $x234 $x337))))))))))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x308 (bvule (_ bv0 32) input.ind-%var1284X)))
 (let (($x330 (and $x308 (bvult input.ind-%var1284X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x220 (= input.ind-%var1284X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1284X)))
 (let (($x234 (or $x256 $x220)))
 (= $x234 $x330)))))))
 ))
 (let (($x339 (and $x215 $x336)))
 (let (($x360 (= true true)))
 (let (($x342 (and $x360 $x339)))
 (let (($x345 (= $x342 true)))
 (let (($x248 (forall ((input.ind-%var1277X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1277X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1277X) (_ bv0 32)))))
 ))
 (let (($x302 (forall ((input.ind-%var1276X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1276X)))
 (= $x273 false)))
 ))
 (let (($x296 (and $x302 $x248)))
 (let (($x146 (= $x296 true)))
 (let (($x335 (forall ((input.ind-%var1271X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1271X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x309))))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv2 32))) ?x355)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv3 32))) ?x264)))
 (let ((?x359 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1271X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1271X)))
 (=> $x256 (= ?x359 ?x303)))))))))
 ))
 (let (($x263 (forall ((input.ind-%var1270X (_ BitVec 32)) )(let (($x308 (bvule (_ bv0 32) input.ind-%var1270X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1270X)))
 (= $x256 (and $x308 (bvult input.ind-%var1270X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x203 (and $x263 $x335)))
 (let (($x29 (= $x203 true)))
 (let (($x300 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1265X)))
 (=> $x273 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1265X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x273 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1264X)))
 (= $x273 false)))
 ))
 (let (($x301 (and $x211 $x300)))
 (let (($x243 (= $x301 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x286)))
 (let (($x329 (= ?x204 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x246 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x244 (= (_ bv0 2) ?x246)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x202 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x206 (= $x202 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x196 (= $x175 true)))
 (let (($x167 (= $x196 true)))
 (let (($x197 (= $x167 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x145 (bvsub ?x187 ?x123)))
 (let (($x188 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x145) (bvult ?x187 ?x145))))
 (let (($x174 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x157 (ite $x174 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x37 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x37)))
 (let ((?x153 ((_ extract 63 32) ?x163)))
 (let (($x102 (= ?x153 ?x157)))
 (let (($x17 (and $x102 $x188)))
 (let (($x107 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x185 (and $x107 $x17)))
 (let (($x172 (= true $x185)))
 (let (($x35 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (=> $x35 $x172)))
 (let (($x186 (= $x148 true)))
 (let (($x100 (= $x186 true)))
 (let (($x78 (= $x100 true)))
 (let (($x164 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x164 true)))
 (let (($x114 (= $x141 true)))
 (let (($x79 (= $x114 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x171 true)))
 (let (($x158 (= $x98 true)))
 (let (($x32 (= $x158 true)))
 (let (($x105 (= $x35 true)))
 (let (($x81 (= $x105 true)))
 (let (($x193 (= $x81 true)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x151)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x160)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x182)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x104 $x87)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x173 $x44)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x190 $x73)))
 (let (($x10 (not $x177)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x168 $x23)))
 (let (($x108 (and (not $x152) $x10)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x91 $x156)))
 (let (($x80 (not $x57)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x26 $x52)))
 (let (($x195 (and (not $x140) $x80)))
 (let (($x169 (and (and (and (and (and (and $x195 $x108) $x135) $x137) $x112) $x61) $x64)))
 (let (($x106 (and $x169 $x109)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x103 (or false (or false (and (and true (or $x68 $x147)) (or $x74 $x66))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x103)))
 (let (($x119 (and $x130 $x106)))
 (let (($x166 (= $x119 true)))
 (let (($x110 (= $x166 true)))
 (let (($x118 (= $x110 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x5 (and $x67 $x118)))
 (let (($x170 (and $x5 $x193)))
 (let (($x77 (and $x170 $x32)))
 (let (($x191 (and $x77 $x79)))
 (let (($x179 (and $x191 $x78)))
 (let (($x198 (and $x179 $x197)))
 (let (($x209 (and $x198 $x208)))
 (let (($x252 (and $x209 $x226)))
 (let (($x212 (and $x252 $x276)))
 (let (($x298 (and $x212 $x351)))
 (let (($x266 (and $x298 $x243)))
 (let (($x122 (and $x266 $x29)))
 (let (($x162 (and $x122 $x146)))
 (let (($x255 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (and (not $x255) $x162)))
 (let (($x242 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x349 (and $x242 $x299)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x281 (and $x331 $x349)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x48 (and $x43 $x281)))
 (let (($x30 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x282 (bvadd ?x187 (_ bv3 32))))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x282)))
 (let (($x261 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x282)))
 (let (($x20 (or false (or false (and (and true (or $x143 $x261)) (or $x279 $x30))))))
 (let (($x13 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x20)))
 (let (($x18 (=> (and $x35 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x20)))
 (let (($x128 (and $x18 $x48)))
 (let (($x257 (=> $x128 $x345)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x357 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x213 (bvmul (_ bv4294967295 32) ?x357)))
 (let ((?x323 (bvneg ?x213)))
 (let (($x69 (= ?x323 ?x62)))
 (let (($x161 (= $x69 true)))
 (let (($x25 (forall ((input.ind-%var1303X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1303X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1303X) (_ bv0 32)))))
 ))
 (let (($x336 (forall ((input.ind-%var1302X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1302X)))
 (= $x199 false)))
 ))
 (let (($x97 (and $x336 $x25)))
 (let (($x316 (= $x97 true)))
 (let (($x124 (forall ((input.ind-%var1297X (_ BitVec 32)) )(let ((?x363 (bvadd (bvmul input.ind-%var1297X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x363))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv2 32))) ?x200)))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv3 32))) ?x292)))
 (let ((?x302 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1297X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1297X)))
 (=> $x270 (= ?x302 ?x353)))))))))
 ))
 (let (($x335 (forall ((input.ind-%var1296X (_ BitVec 32)) )(let (($x235 (and (bvule (_ bv0 32) input.ind-%var1296X) (bvult input.ind-%var1296X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1296X)))
 (= $x270 $x235))))
 ))
 (let (($x22 (and $x335 $x124)))
 (let (($x136 (= $x22 true)))
 (let (($x59 (forall ((input.ind-%var1291X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1291X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1291X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var1290X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1290X)))
 (= $x199 false)))
 ))
 (let (($x362 (and $x301 $x59)))
 (let (($x309 (= $x362 true)))
 (let ((?x204 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x204)))
 (let (($x274 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x172 (bvsub ?x187 ?x123)))
 (let (($x78 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x172) (bvult ?x187 ?x172))))
 (let (($x188 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x17 (ite $x188 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x145 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x133 (bvmul (_ bv4 64) ?x145)))
 (let ((?x159 ((_ extract 63 32) ?x133)))
 (let (($x185 (= ?x159 ?x17)))
 (let (($x179 (and $x185 $x78)))
 (let (($x102 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x175 (and $x102 $x179)))
 (let (($x196 (= true $x175)))
 (let (($x28 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x167 (=> $x28 $x196)))
 (let (($x197 (= $x167 true)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x107 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x107 true)))
 (let (($x37 (= $x178 true)))
 (let (($x163 (= $x37 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x79 (= $x114 true)))
 (let (($x191 (= $x79 true)))
 (let (($x120 (= $x191 true)))
 (let (($x158 (= $x28 true)))
 (let (($x32 (= $x158 true)))
 (let (($x77 (= $x32 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x109)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x169)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x112 $x49)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x44 $x61)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x116 $x135)))
 (let (($x194 (not $x189)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x10 $x108)))
 (let (($x101 (and (not $x82) $x194)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x23 $x152)))
 (let (($x190 (not $x93)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x8 $x74)))
 (let (($x177 (and (not $x168) $x190)))
 (let (($x105 (and (and (and (and (and (and $x177 $x101) $x104) $x87) $x138) $x64) $x151)))
 (let (($x81 (and $x105 $x106)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x58)))
 (let (($x57 (or false (or false (and (and true (or $x41 $x103)) (or $x52 $x140))))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x193 (and $x195 $x81)))
 (let (($x170 (= $x193 true)))
 (let (($x9 (= $x170 true)))
 (let (($x171 (= $x9 true)))
 (let ((?x7 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x24 (= (_ bv0 2) ?x7)))
 (let (($x76 (= $x24 true)))
 (let (($x68 (= $x76 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x147 (and $x67 $x68)))
 (let (($x98 (and $x147 $x171)))
 (let (($x164 (and $x98 $x77)))
 (let (($x31 (and $x164 $x120)))
 (let (($x153 (and $x31 $x163)))
 (let (($x206 (and $x153 $x202)))
 (let (($x218 (and $x206 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x40 (and $x286 $x298)))
 (let (($x125 (and $x40 $x309)))
 (let (($x317 (and $x125 $x136)))
 (let (($x165 (and $x317 $x316)))
 (let (($x224 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and (not $x224) $x165)))
 (let (($x297 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x297 $x27)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x295 $x21)))
 (let (($x241 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x358 (and $x241 $x268)))
 (let (($x90 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd ?x187 (_ bv3 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x291 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x18 (or false (or false (and (and true (or $x132 $x291)) (or $x216 $x90))))))
 (let (($x43 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x154 (=> (and $x28 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x306 (and $x154 $x358)))
 (let (($x334 (=> $x306 $x161)))
 (not $x334))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x357 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x213 (bvmul (_ bv4294967295 32) ?x357)))
 (let ((?x323 (bvneg ?x213)))
 (let (($x69 (= ?x323 ?x62)))
 (let (($x161 (= $x69 true)))
 (let (($x25 (forall ((input.ind-%var1303X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1303X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1303X) (_ bv0 32)))))
 ))
 (let (($x336 (forall ((input.ind-%var1302X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1302X)))
 (= $x199 false)))
 ))
 (let (($x97 (and $x336 $x25)))
 (let (($x316 (= $x97 true)))
 (let (($x124 (forall ((input.ind-%var1297X (_ BitVec 32)) )(let ((?x363 (bvadd (bvmul input.ind-%var1297X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x363))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv2 32))) ?x200)))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x363 (_ bv3 32))) ?x292)))
 (let ((?x302 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1297X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1297X)))
 (=> $x270 (= ?x302 ?x353)))))))))
 ))
 (let (($x335 (forall ((input.ind-%var1296X (_ BitVec 32)) )(let (($x235 (and (bvule (_ bv0 32) input.ind-%var1296X) (bvult input.ind-%var1296X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1296X)))
 (= $x270 $x235))))
 ))
 (let (($x22 (and $x335 $x124)))
 (let (($x136 (= $x22 true)))
 (let (($x59 (forall ((input.ind-%var1291X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1291X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1291X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var1290X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1290X)))
 (= $x199 false)))
 ))
 (let (($x362 (and $x301 $x59)))
 (let (($x309 (= $x362 true)))
 (let ((?x204 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x204)))
 (let (($x274 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x207 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x172 (bvsub ?x187 ?x123)))
 (let (($x78 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x172) (bvult ?x187 ?x172))))
 (let (($x188 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x17 (ite $x188 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x145 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x133 (bvmul (_ bv4 64) ?x145)))
 (let ((?x159 ((_ extract 63 32) ?x133)))
 (let (($x185 (= ?x159 ?x17)))
 (let (($x179 (and $x185 $x78)))
 (let (($x102 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x175 (and $x102 $x179)))
 (let (($x196 (= true $x175)))
 (let (($x28 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x167 (=> $x28 $x196)))
 (let (($x197 (= $x167 true)))
 (let (($x198 (= $x197 true)))
 (let (($x202 (= $x198 true)))
 (let (($x107 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x107 true)))
 (let (($x37 (= $x178 true)))
 (let (($x163 (= $x37 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x79 (= $x114 true)))
 (let (($x191 (= $x79 true)))
 (let (($x120 (= $x191 true)))
 (let (($x158 (= $x28 true)))
 (let (($x32 (= $x158 true)))
 (let (($x77 (= $x32 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x109)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x169)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x112 $x49)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x44 $x61)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x116 $x135)))
 (let (($x194 (not $x189)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x10 $x108)))
 (let (($x101 (and (not $x82) $x194)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x23 $x152)))
 (let (($x190 (not $x93)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x8 $x74)))
 (let (($x177 (and (not $x168) $x190)))
 (let (($x105 (and (and (and (and (and (and $x177 $x101) $x104) $x87) $x138) $x64) $x151)))
 (let (($x81 (and $x105 $x106)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x58)))
 (let (($x57 (or false (or false (and (and true (or $x41 $x103)) (or $x52 $x140))))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x193 (and $x195 $x81)))
 (let (($x170 (= $x193 true)))
 (let (($x9 (= $x170 true)))
 (let (($x171 (= $x9 true)))
 (let ((?x7 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x24 (= (_ bv0 2) ?x7)))
 (let (($x76 (= $x24 true)))
 (let (($x68 (= $x76 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x147 (and $x67 $x68)))
 (let (($x98 (and $x147 $x171)))
 (let (($x164 (and $x98 $x77)))
 (let (($x31 (and $x164 $x120)))
 (let (($x153 (and $x31 $x163)))
 (let (($x206 (and $x153 $x202)))
 (let (($x218 (and $x206 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x40 (and $x286 $x298)))
 (let (($x125 (and $x40 $x309)))
 (let (($x317 (and $x125 $x136)))
 (let (($x165 (and $x317 $x316)))
 (let (($x224 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and (not $x224) $x165)))
 (let (($x297 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x21 (and $x297 $x27)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x295 $x21)))
 (let (($x241 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x358 (and $x241 $x268)))
 (let (($x90 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd ?x187 (_ bv3 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x291 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x18 (or false (or false (and (and true (or $x132 $x291)) (or $x216 $x90))))))
 (let (($x43 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x154 (=> (and $x28 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x306 (and $x154 $x358)))
 (let (($x334 (=> $x306 $x161)))
 (not $x334))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x338 (bvule ?x328 (_ bv4294967294 32))))
 (let (($x29 (= $x338 true)))
 (let (($x215 (= $x29 true)))
 (let (($x345 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1321X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1321X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1320X)))
 (= $x308 false)))
 ))
 (let (($x280 (and $x349 $x345)))
 (let (($x184 (= $x280 true)))
 (let (($x70 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let ((?x53 (bvadd (bvmul input.ind-%var1315X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x53 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x53))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x53 (_ bv2 32))) ?x327)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x53 (_ bv3 32))) ?x203)))
 (let ((?x336 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1315X)))
 (let (($x149 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1315X)))
 (=> $x149 (= ?x336 ?x42)))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x344 (and (bvule (_ bv0 32) input.ind-%var1314X) (bvult input.ind-%var1314X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x149 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (= $x149 $x344))))
 ))
 (let (($x146 (and $x124 $x70)))
 (let (($x162 (= $x146 true)))
 (let (($x296 (forall ((input.ind-%var1309X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1309X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1309X) (_ bv0 32)))))
 ))
 (let (($x362 (forall ((input.ind-%var1308X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1308X)))
 (= $x308 false)))
 ))
 (let (($x341 (and $x362 $x296)))
 (let (($x363 (= $x341 true)))
 (let ((?x329 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x274 (bvneg ?x329)))
 (let (($x351 (= ?x274 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x351 true)))
 (let (($x40 (= $x298 true)))
 (let (($x253 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x179)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x100)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x188)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (and $x159 $x17)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x133 $x185)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x107 $x178)))
 (let (($x163 (not $x37)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x191 $x120)))
 (let (($x174 (and (not $x31) $x163)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x32 $x77)))
 (let (($x141 (not $x164)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x61 $x138)))
 (let (($x79 (and (not $x158) $x141)))
 (let (($x206 (and (and (and (and (and (and $x79 $x174) $x102) $x145) $x148) $x186) $x78)))
 (let (($x207 (and $x206 $x175)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x9 (or false (or false (and (and true (or $x5 $x169)) (or $x109 $x106))))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x208 (and $x98 $x207)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x110 (= $x87 true)))
 (let (($x44 (= $x110 true)))
 (let (($x112 (= $x44 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (= $x119 true)))
 (let (($x104 (= $x173 true)))
 (let (($x166 (= $x104 true)))
 (let ((?x116 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x135 (= (_ bv0 2) ?x116)))
 (let (($x189 (= $x135 true)))
 (let (($x194 (= $x189 true)))
 (let ((?x168 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x168)))
 (let (($x177 (= ?x73 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x177 true)))
 (let (($x108 (= $x10 true)))
 (let (($x23 (= ?x73 input.dst.llvm-%n)))
 (let (($x152 (= $x23 true)))
 (let (($x93 (= $x152 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x41 (bvsub ?x187 ?x123)))
 (let (($x52 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x41) (bvult ?x187 ?x41))))
 (let (($x66 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x80 (ite $x66 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x76 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x76)))
 (let ((?x147 ((_ extract 63 32) ?x68)))
 (let (($x58 (= ?x147 ?x80)))
 (let (($x140 (and $x58 $x52)))
 (let (($x7 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x71 (and $x7 $x140)))
 (let (($x91 (= true $x71)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (=> $x83 $x91)))
 (let (($x57 (= $x156 true)))
 (let (($x195 (= $x57 true)))
 (let (($x8 (= $x195 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (= $x83 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x33 (and $x84 $x16)))
 (let (($x74 (and $x33 $x8)))
 (let (($x190 (and $x74 $x93)))
 (let (($x82 (and $x190 $x108)))
 (let (($x101 (and $x82 $x194)))
 (let (($x182 (and $x101 $x166)))
 (let (($x12 (and $x182 $x112)))
 (let (($x222 (and $x12 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x204 (and $x244 $x286)))
 (let (($x211 (and $x204 $x40)))
 (let (($x260 (and $x211 $x363)))
 (let (($x343 (and $x260 $x162)))
 (let (($x311 (and $x343 $x184)))
 (let (($x285 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x340 (and (not $x285) $x311)))
 (let (($x255 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x337 (and $x255 $x340)))
 (let (($x254 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x355 (and $x254 $x337)))
 (let (($x304 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x304 $x355)))
 (let (($x20 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x291 (bvadd ?x187 (_ bv3 32))))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x291)))
 (let (($x279 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x291)))
 (let (($x154 (or false (or false (and (and true (or $x85 $x279)) (or $x227 $x20))))))
 (let (($x241 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x154)))
 (let (($x278 (=> (and $x83 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x154)))
 (let (($x267 (and $x278 $x266)))
 (let (($x257 (=> $x267 $x215)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x338 (bvule ?x328 (_ bv4294967294 32))))
 (let (($x29 (= $x338 true)))
 (let (($x215 (= $x29 true)))
 (let (($x345 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1321X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1321X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1320X)))
 (= $x308 false)))
 ))
 (let (($x280 (and $x349 $x345)))
 (let (($x184 (= $x280 true)))
 (let (($x70 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let ((?x53 (bvadd (bvmul input.ind-%var1315X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x53 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x53))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x53 (_ bv2 32))) ?x327)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x53 (_ bv3 32))) ?x203)))
 (let ((?x336 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1315X)))
 (let (($x149 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1315X)))
 (=> $x149 (= ?x336 ?x42)))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x344 (and (bvule (_ bv0 32) input.ind-%var1314X) (bvult input.ind-%var1314X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x149 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (= $x149 $x344))))
 ))
 (let (($x146 (and $x124 $x70)))
 (let (($x162 (= $x146 true)))
 (let (($x296 (forall ((input.ind-%var1309X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1309X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1309X) (_ bv0 32)))))
 ))
 (let (($x362 (forall ((input.ind-%var1308X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1308X)))
 (= $x308 false)))
 ))
 (let (($x341 (and $x362 $x296)))
 (let (($x363 (= $x341 true)))
 (let ((?x329 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x274 (bvneg ?x329)))
 (let (($x351 (= ?x274 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x351 true)))
 (let (($x40 (= $x298 true)))
 (let (($x253 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x179)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x100)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x188)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (and $x159 $x17)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x133 $x185)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x107 $x178)))
 (let (($x163 (not $x37)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x191 $x120)))
 (let (($x174 (and (not $x31) $x163)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x32 $x77)))
 (let (($x141 (not $x164)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x61 $x138)))
 (let (($x79 (and (not $x158) $x141)))
 (let (($x206 (and (and (and (and (and (and $x79 $x174) $x102) $x145) $x148) $x186) $x78)))
 (let (($x207 (and $x206 $x175)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x9 (or false (or false (and (and true (or $x5 $x169)) (or $x109 $x106))))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x208 (and $x98 $x207)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x110 (= $x87 true)))
 (let (($x44 (= $x110 true)))
 (let (($x112 (= $x44 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (= $x119 true)))
 (let (($x104 (= $x173 true)))
 (let (($x166 (= $x104 true)))
 (let ((?x116 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x135 (= (_ bv0 2) ?x116)))
 (let (($x189 (= $x135 true)))
 (let (($x194 (= $x189 true)))
 (let ((?x168 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x168)))
 (let (($x177 (= ?x73 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x177 true)))
 (let (($x108 (= $x10 true)))
 (let (($x23 (= ?x73 input.dst.llvm-%n)))
 (let (($x152 (= $x23 true)))
 (let (($x93 (= $x152 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x41 (bvsub ?x187 ?x123)))
 (let (($x52 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x41) (bvult ?x187 ?x41))))
 (let (($x66 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x80 (ite $x66 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x76 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x76)))
 (let ((?x147 ((_ extract 63 32) ?x68)))
 (let (($x58 (= ?x147 ?x80)))
 (let (($x140 (and $x58 $x52)))
 (let (($x7 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x71 (and $x7 $x140)))
 (let (($x91 (= true $x71)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (=> $x83 $x91)))
 (let (($x57 (= $x156 true)))
 (let (($x195 (= $x57 true)))
 (let (($x8 (= $x195 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (= $x83 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x33 (and $x84 $x16)))
 (let (($x74 (and $x33 $x8)))
 (let (($x190 (and $x74 $x93)))
 (let (($x82 (and $x190 $x108)))
 (let (($x101 (and $x82 $x194)))
 (let (($x182 (and $x101 $x166)))
 (let (($x12 (and $x182 $x112)))
 (let (($x222 (and $x12 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x204 (and $x244 $x286)))
 (let (($x211 (and $x204 $x40)))
 (let (($x260 (and $x211 $x363)))
 (let (($x343 (and $x260 $x162)))
 (let (($x311 (and $x343 $x184)))
 (let (($x285 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x340 (and (not $x285) $x311)))
 (let (($x255 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x337 (and $x255 $x340)))
 (let (($x254 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x355 (and $x254 $x337)))
 (let (($x304 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x304 $x355)))
 (let (($x20 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x291 (bvadd ?x187 (_ bv3 32))))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x291)))
 (let (($x279 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x291)))
 (let (($x154 (or false (or false (and (and true (or $x85 $x279)) (or $x227 $x20))))))
 (let (($x241 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x154)))
 (let (($x278 (=> (and $x83 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x154)))
 (let (($x267 (and $x278 $x266)))
 (let (($x257 (=> $x267 $x215)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x136 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x136 (_ bv0 32))))
 (let (($x234 (= $x352 true)))
 (let (($x299 (= $x234 true)))
 (let (($x235 (forall ((input.ind-%var1339X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1339X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1339X) (_ bv0 32)))))
 ))
 (let (($x27 (forall ((input.ind-%var1338X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1338X)))
 (= $x303 false)))
 ))
 (let (($x128 (and $x27 $x235)))
 (let (($x333 (= $x128 true)))
 (let (($x165 (forall ((input.ind-%var1333X (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul input.ind-%var1333X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x25))))
 (let ((?x283 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv2 32))) ?x270)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv3 32))) ?x283)))
 (let ((?x349 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1333X)))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1333X)))
 (=> $x243 (= ?x349 ?x199)))))))))
 ))
 (let (($x70 (forall ((input.ind-%var1332X (_ BitVec 32)) )(let (($x258 (and (bvule (_ bv0 32) input.ind-%var1332X) (bvult input.ind-%var1332X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1332X)))
 (= $x243 $x258))))
 ))
 (let (($x62 (and $x70 $x165)))
 (let (($x69 (= $x62 true)))
 (let (($x97 (forall ((input.ind-%var1327X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1327X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1327X) (_ bv0 32)))))
 ))
 (let (($x341 (forall ((input.ind-%var1326X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1326X)))
 (= $x303 false)))
 ))
 (let (($x36 (and $x341 $x97)))
 (let (($x53 (= $x36 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x298 (= ?x351 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x186)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x198)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x185)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x197 $x159)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x145 $x188)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x107 $x178)))
 (let (($x163 (not $x37)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x120 $x31)))
 (let (($x196 (and (not $x153) $x163)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x32 $x77)))
 (let (($x141 (not $x164)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x160 $x171)))
 (let (($x191 (and (not $x114) $x141)))
 (let (($x207 (and (and (and (and (and (and $x191 $x196) $x102) $x139) $x17) $x148) $x172)))
 (let (($x208 (and $x207 $x202)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x61 (or false (or false (and (and true (or $x151 $x105)) (or $x81 $x193))))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x61)))
 (let (($x209 (and $x158 $x208)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x110 (= $x87 true)))
 (let (($x44 (= $x110 true)))
 (let (($x112 (= $x44 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (= $x119 true)))
 (let (($x104 (= $x173 true)))
 (let (($x166 (= $x104 true)))
 (let ((?x116 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x135 (= (_ bv0 2) ?x116)))
 (let (($x189 (= $x135 true)))
 (let (($x194 (= $x189 true)))
 (let ((?x168 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x168)))
 (let (($x177 (= ?x73 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x177 true)))
 (let (($x108 (= $x10 true)))
 (let (($x23 (= ?x73 input.dst.llvm-%n)))
 (let (($x152 (= $x23 true)))
 (let (($x93 (= $x152 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x103 (bvsub ?x187 ?x123)))
 (let (($x52 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x103) (bvult ?x187 ?x103))))
 (let (($x66 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x80 (ite $x66 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x76 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x76)))
 (let ((?x147 ((_ extract 63 32) ?x68)))
 (let (($x58 (= ?x147 ?x80)))
 (let (($x140 (and $x58 $x52)))
 (let (($x7 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x71 (and $x7 $x140)))
 (let (($x91 (= true $x71)))
 (let (($x183 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (=> $x183 $x91)))
 (let (($x57 (= $x156 true)))
 (let (($x195 (= $x57 true)))
 (let (($x8 (= $x195 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (= $x183 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x33 (and $x84 $x16)))
 (let (($x74 (and $x33 $x8)))
 (let (($x190 (and $x74 $x93)))
 (let (($x82 (and $x190 $x108)))
 (let (($x101 (and $x82 $x194)))
 (let (($x182 (and $x101 $x166)))
 (let (($x12 (and $x182 $x112)))
 (let (($x226 (and $x12 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x329 (and $x253 $x204)))
 (let (($x301 (and $x329 $x211)))
 (let (($x122 (and $x301 $x53)))
 (let (($x357 (and $x122 $x69)))
 (let (($x111 (and $x357 $x333)))
 (let (($x15 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x15) $x111)))
 (let (($x224 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x224 $x200)))
 (let (($x242 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x290 (and $x242 $x125)))
 (let (($x331 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x334 (and $x331 $x290)))
 (let (($x18 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd ?x187 (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x216 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x278 (or false (or false (and (and true (or $x95 $x216)) (or $x13 $x18))))))
 (let (($x304 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x278)))
 (let (($x282 (=> (and $x183 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x278)))
 (let (($x220 (and $x282 $x334)))
 (let (($x330 (=> $x220 $x299)))
 (not $x330))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x136 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x136 (_ bv0 32))))
 (let (($x234 (= $x352 true)))
 (let (($x299 (= $x234 true)))
 (let (($x235 (forall ((input.ind-%var1339X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1339X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1339X) (_ bv0 32)))))
 ))
 (let (($x27 (forall ((input.ind-%var1338X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1338X)))
 (= $x303 false)))
 ))
 (let (($x128 (and $x27 $x235)))
 (let (($x333 (= $x128 true)))
 (let (($x165 (forall ((input.ind-%var1333X (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul input.ind-%var1333X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x25))))
 (let ((?x283 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv2 32))) ?x270)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv3 32))) ?x283)))
 (let ((?x349 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1333X)))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1333X)))
 (=> $x243 (= ?x349 ?x199)))))))))
 ))
 (let (($x70 (forall ((input.ind-%var1332X (_ BitVec 32)) )(let (($x258 (and (bvule (_ bv0 32) input.ind-%var1332X) (bvult input.ind-%var1332X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1332X)))
 (= $x243 $x258))))
 ))
 (let (($x62 (and $x70 $x165)))
 (let (($x69 (= $x62 true)))
 (let (($x97 (forall ((input.ind-%var1327X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1327X)))
 (=> $x303 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1327X) (_ bv0 32)))))
 ))
 (let (($x341 (forall ((input.ind-%var1326X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1326X)))
 (= $x303 false)))
 ))
 (let (($x36 (and $x341 $x97)))
 (let (($x53 (= $x36 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x298 (= ?x351 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x186)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x198)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x185)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x197 $x159)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x145 $x188)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x107 $x178)))
 (let (($x163 (not $x37)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x120 $x31)))
 (let (($x196 (and (not $x153) $x163)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x32 $x77)))
 (let (($x141 (not $x164)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x160 $x171)))
 (let (($x191 (and (not $x114) $x141)))
 (let (($x207 (and (and (and (and (and (and $x191 $x196) $x102) $x139) $x17) $x148) $x172)))
 (let (($x208 (and $x207 $x202)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x61 (or false (or false (and (and true (or $x151 $x105)) (or $x81 $x193))))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x61)))
 (let (($x209 (and $x158 $x208)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x110 (= $x87 true)))
 (let (($x44 (= $x110 true)))
 (let (($x112 (= $x44 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (= $x119 true)))
 (let (($x104 (= $x173 true)))
 (let (($x166 (= $x104 true)))
 (let ((?x116 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x135 (= (_ bv0 2) ?x116)))
 (let (($x189 (= $x135 true)))
 (let (($x194 (= $x189 true)))
 (let ((?x168 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x168)))
 (let (($x177 (= ?x73 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x177 true)))
 (let (($x108 (= $x10 true)))
 (let (($x23 (= ?x73 input.dst.llvm-%n)))
 (let (($x152 (= $x23 true)))
 (let (($x93 (= $x152 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x103 (bvsub ?x187 ?x123)))
 (let (($x52 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x103) (bvult ?x187 ?x103))))
 (let (($x66 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x80 (ite $x66 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x76 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x76)))
 (let ((?x147 ((_ extract 63 32) ?x68)))
 (let (($x58 (= ?x147 ?x80)))
 (let (($x140 (and $x58 $x52)))
 (let (($x7 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x71 (and $x7 $x140)))
 (let (($x91 (= true $x71)))
 (let (($x183 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (=> $x183 $x91)))
 (let (($x57 (= $x156 true)))
 (let (($x195 (= $x57 true)))
 (let (($x8 (= $x195 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x75 true)))
 (let (($x46 (= $x56 true)))
 (let (($x16 (= $x46 true)))
 (let (($x72 (= $x183 true)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x33 (and $x84 $x16)))
 (let (($x74 (and $x33 $x8)))
 (let (($x190 (and $x74 $x93)))
 (let (($x82 (and $x190 $x108)))
 (let (($x101 (and $x82 $x194)))
 (let (($x182 (and $x101 $x166)))
 (let (($x12 (and $x182 $x112)))
 (let (($x226 (and $x12 $x222)))
 (let (($x253 (and $x226 $x244)))
 (let (($x329 (and $x253 $x204)))
 (let (($x301 (and $x329 $x211)))
 (let (($x122 (and $x301 $x53)))
 (let (($x357 (and $x122 $x69)))
 (let (($x111 (and $x357 $x333)))
 (let (($x15 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x15) $x111)))
 (let (($x224 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x224 $x200)))
 (let (($x242 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x290 (and $x242 $x125)))
 (let (($x331 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x334 (and $x331 $x290)))
 (let (($x18 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd ?x187 (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x216 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x278 (or false (or false (and (and true (or $x95 $x216)) (or $x13 $x18))))))
 (let (($x304 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x278)))
 (let (($x282 (=> (and $x183 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x278)))
 (let (($x220 (and $x282 $x334)))
 (let (($x330 (=> $x220 $x299)))
 (not $x330))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x49 (bvule ?x162 (_ bv4294967294 32))))
 (let (($x48 (= $x49 true)))
 (let (($x323 (= $x48 true)))
 (let (($x344 (forall ((input.ind-%var1357X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1357X)))
 (=> $x353 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1357X) (_ bv0 32)))))
 ))
 (let (($x340 (forall ((input.ind-%var1356X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1356X)))
 (= $x353 false)))
 ))
 (let (($x306 (and $x340 $x344)))
 (let (($x313 (= $x306 true)))
 (let (($x311 (forall ((input.ind-%var1351X (_ BitVec 32)) )(let ((?x345 (bvadd (bvmul input.ind-%var1351X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x345))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv2 32))) ?x149)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv3 32))) ?x247)))
 (let ((?x27 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1351X)))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1351X)))
 (=> $x22 (= ?x27 ?x308)))))))))
 ))
 (let (($x165 (forall ((input.ind-%var1350X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var1350X) (bvult input.ind-%var1350X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1350X)))
 (= $x22 $x300))))
 ))
 (let (($x215 (and $x165 $x311)))
 (let (($x257 (= $x215 true)))
 (let (($x280 (forall ((input.ind-%var1345X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1345X)))
 (=> $x353 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1345X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var1344X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1344X)))
 (= $x353 false)))
 ))
 (let (($x288 (and $x36 $x280)))
 (let (($x25 (= $x288 true)))
 (let ((?x351 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x351)))
 (let (($x40 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x175 (bvsub ?x187 ?x123)))
 (let (($x186 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x175) (bvult ?x187 ?x175))))
 (let (($x179 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x185 (ite $x179 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x188 (bvmul (_ bv4 64) ?x159)))
 (let ((?x17 ((_ extract 63 32) ?x188)))
 (let (($x148 (= ?x17 ?x185)))
 (let (($x202 (and $x148 $x186)))
 (let (($x197 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x208 (and $x197 $x202)))
 (let (($x209 (= true $x208)))
 (let (($x115 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (=> $x115 $x209)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x102 (= $x157 true)))
 (let (($x78 (= $x102 true)))
 (let (($x167 (= $x78 true)))
 (let (($x37 (= $x115 true)))
 (let (($x163 (= $x37 true)))
 (let (($x196 (= $x163 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x171)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x158)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x81)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (and $x106 $x193)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x109 $x170)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x110 $x44)))
 (let (($x12 (not $x112)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x166 $x182)))
 (let (($x5 (and (not $x87) $x12)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x189 $x194)))
 (let (($x119 (not $x101)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x156 $x57)))
 (let (($x104 (and (not $x135) $x119)))
 (let (($x191 (and (and (and (and (and (and $x104 $x5) $x169) $x105) $x9) $x61) $x160)))
 (let (($x120 (and $x191 $x114)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x82 (or false (or false (and (and true (or $x168 $x73)) (or $x93 $x190))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x31 (and $x116 $x120)))
 (let (($x153 (= $x31 true)))
 (let (($x174 (= $x153 true)))
 (let (($x107 (= $x174 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x130 true)))
 (let (($x52 (= $x26 true)))
 (let (($x140 (= $x52 true)))
 (let ((?x126 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x80 (= (_ bv0 2) ?x126)))
 (let (($x58 (= $x80 true)))
 (let (($x41 (= $x58 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x24 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x24 true)))
 (let (($x68 (= $x76 true)))
 (let (($x33 (= ?x16 input.dst.llvm-%n)))
 (let (($x67 (= $x33 true)))
 (let (($x89 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x7 (and $x75 $x89)))
 (let (($x147 (and $x7 $x68)))
 (let (($x103 (and $x147 $x41)))
 (let (($x71 (and $x103 $x140)))
 (let (($x178 (and $x71 $x107)))
 (let (($x100 (and $x178 $x196)))
 (let (($x139 (and $x100 $x167)))
 (let (($x252 (and $x139 $x226)))
 (let (($x276 (and $x252 $x253)))
 (let (($x274 (and $x276 $x329)))
 (let (($x362 (and $x274 $x301)))
 (let (($x60 (and $x362 $x25)))
 (let (($x328 (and $x60 $x257)))
 (let (($x213 (and $x328 $x313)))
 (let (($x360 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and (not $x360) $x213)))
 (let (($x285 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x260 (and $x285 $x327)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x238 (and $x297 $x260)))
 (let (($x295 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x295 $x238)))
 (let (($x154 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x216 (bvadd ?x187 (_ bv3 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x216)))
 (let (($x227 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x216)))
 (let (($x282 (or false (or false (and (and true (or $x30 $x227)) (or $x43 $x154))))))
 (let (($x331 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x282)))
 (let (($x261 (=> (and $x115 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x282)))
 (let (($x268 (and $x261 $x131)))
 (let (($x359 (=> $x268 $x323)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x49 (bvule ?x162 (_ bv4294967294 32))))
 (let (($x48 (= $x49 true)))
 (let (($x323 (= $x48 true)))
 (let (($x344 (forall ((input.ind-%var1357X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1357X)))
 (=> $x353 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1357X) (_ bv0 32)))))
 ))
 (let (($x340 (forall ((input.ind-%var1356X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1356X)))
 (= $x353 false)))
 ))
 (let (($x306 (and $x340 $x344)))
 (let (($x313 (= $x306 true)))
 (let (($x311 (forall ((input.ind-%var1351X (_ BitVec 32)) )(let ((?x345 (bvadd (bvmul input.ind-%var1351X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x345))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv2 32))) ?x149)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x345 (_ bv3 32))) ?x247)))
 (let ((?x27 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1351X)))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1351X)))
 (=> $x22 (= ?x27 ?x308)))))))))
 ))
 (let (($x165 (forall ((input.ind-%var1350X (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) input.ind-%var1350X) (bvult input.ind-%var1350X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1350X)))
 (= $x22 $x300))))
 ))
 (let (($x215 (and $x165 $x311)))
 (let (($x257 (= $x215 true)))
 (let (($x280 (forall ((input.ind-%var1345X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1345X)))
 (=> $x353 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1345X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var1344X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1344X)))
 (= $x353 false)))
 ))
 (let (($x288 (and $x36 $x280)))
 (let (($x25 (= $x288 true)))
 (let ((?x351 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x351)))
 (let (($x40 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x246 (= $x245 true)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x175 (bvsub ?x187 ?x123)))
 (let (($x186 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x175) (bvult ?x187 ?x175))))
 (let (($x179 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x185 (ite $x179 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x159 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x188 (bvmul (_ bv4 64) ?x159)))
 (let ((?x17 ((_ extract 63 32) ?x188)))
 (let (($x148 (= ?x17 ?x185)))
 (let (($x202 (and $x148 $x186)))
 (let (($x197 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x208 (and $x197 $x202)))
 (let (($x209 (= true $x208)))
 (let (($x115 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (=> $x115 $x209)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x102 (= $x157 true)))
 (let (($x78 (= $x102 true)))
 (let (($x167 (= $x78 true)))
 (let (($x37 (= $x115 true)))
 (let (($x163 (= $x37 true)))
 (let (($x196 (= $x163 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x171)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x158)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x81)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (and $x106 $x193)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x109 $x170)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x110 $x44)))
 (let (($x12 (not $x112)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x166 $x182)))
 (let (($x5 (and (not $x87) $x12)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x189 $x194)))
 (let (($x119 (not $x101)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x156 $x57)))
 (let (($x104 (and (not $x135) $x119)))
 (let (($x191 (and (and (and (and (and (and $x104 $x5) $x169) $x105) $x9) $x61) $x160)))
 (let (($x120 (and $x191 $x114)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x82 (or false (or false (and (and true (or $x168 $x73)) (or $x93 $x190))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x31 (and $x116 $x120)))
 (let (($x153 (= $x31 true)))
 (let (($x174 (= $x153 true)))
 (let (($x107 (= $x174 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x130 true)))
 (let (($x52 (= $x26 true)))
 (let (($x140 (= $x52 true)))
 (let ((?x126 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x80 (= (_ bv0 2) ?x126)))
 (let (($x58 (= $x80 true)))
 (let (($x41 (= $x58 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x24 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x24 true)))
 (let (($x68 (= $x76 true)))
 (let (($x33 (= ?x16 input.dst.llvm-%n)))
 (let (($x67 (= $x33 true)))
 (let (($x89 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x7 (and $x75 $x89)))
 (let (($x147 (and $x7 $x68)))
 (let (($x103 (and $x147 $x41)))
 (let (($x71 (and $x103 $x140)))
 (let (($x178 (and $x71 $x107)))
 (let (($x100 (and $x178 $x196)))
 (let (($x139 (and $x100 $x167)))
 (let (($x252 (and $x139 $x226)))
 (let (($x276 (and $x252 $x253)))
 (let (($x274 (and $x276 $x329)))
 (let (($x362 (and $x274 $x301)))
 (let (($x60 (and $x362 $x25)))
 (let (($x328 (and $x60 $x257)))
 (let (($x213 (and $x328 $x313)))
 (let (($x360 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and (not $x360) $x213)))
 (let (($x285 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x260 (and $x285 $x327)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x238 (and $x297 $x260)))
 (let (($x295 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x295 $x238)))
 (let (($x154 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x216 (bvadd ?x187 (_ bv3 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x216)))
 (let (($x227 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x216)))
 (let (($x282 (or false (or false (and (and true (or $x30 $x227)) (or $x43 $x154))))))
 (let (($x331 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x282)))
 (let (($x261 (=> (and $x115 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x282)))
 (let (($x268 (and $x261 $x131)))
 (let (($x359 (=> $x268 $x323)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (bvsge ?x69 (_ bv0 32))))
 (let (($x161 (= $x118 true)))
 (let (($x29 (= $x161 true)))
 (let (($x258 (forall ((input.ind-%var1375X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1375X)))
 (=> $x42 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1375X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var1374X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1374X)))
 (= $x42 false)))
 ))
 (let (($x267 (and $x200 $x258)))
 (let (($x263 (= $x267 true)))
 (let (($x111 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var1369X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x235))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv2 32))) ?x243)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv3 32))) ?x228)))
 (let ((?x340 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1369X)))
 (let (($x146 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1369X)))
 (=> $x146 (= ?x340 ?x303)))))))))
 ))
 (let (($x311 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) input.ind-%var1368X) (bvult input.ind-%var1368X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x146 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1368X)))
 (= $x146 $x59))))
 ))
 (let (($x299 (and $x311 $x111)))
 (let (($x330 (= $x299 true)))
 (let (($x128 (forall ((input.ind-%var1363X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1363X)))
 (=> $x42 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1363X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var1362X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1362X)))
 (= $x42 false)))
 ))
 (let (($x256 (and $x288 $x128)))
 (let (($x345 (= $x256 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x298)))
 (let (($x211 (= ?x40 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x211 true)))
 (let (($x362 (= $x301 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x175 (bvsub ?x187 ?x123)))
 (let (($x202 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x175) (bvult ?x187 ?x175))))
 (let (($x185 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x148 (ite $x185 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x188 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x188)))
 (let ((?x179 ((_ extract 63 32) ?x17)))
 (let (($x198 (= ?x179 ?x148)))
 (let (($x208 (and $x198 $x202)))
 (let (($x133 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x209 (and $x133 $x208)))
 (let (($x219 (= true $x209)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x14 $x219)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x102 true)))
 (let (($x167 (= $x78 true)))
 (let (($x139 (= $x167 true)))
 (let (($x163 (= $x14 true)))
 (let (($x196 (= $x163 true)))
 (let (($x100 (= $x196 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x61)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x164)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x109)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x77 $x106)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x105 $x81)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x110 $x44)))
 (let (($x12 (not $x112)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x182 $x87)))
 (let (($x79 (and (not $x64) $x12)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x189 $x194)))
 (let (($x119 (not $x101)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x8 $x137)))
 (let (($x166 (and (not $x173) $x119)))
 (let (($x120 (and (and (and (and (and (and $x166 $x79) $x169) $x151) $x193) $x9) $x98)))
 (let (($x31 (and $x120 $x141)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x156 (or false (or false (and (and true (or $x23 $x152)) (or $x177 $x10))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x156)))
 (let (($x153 (and $x135 $x31)))
 (let (($x174 (= $x153 true)))
 (let (($x107 (= $x174 true)))
 (let (($x178 (= $x107 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x130 true)))
 (let (($x52 (= $x26 true)))
 (let (($x140 (= $x52 true)))
 (let ((?x126 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x80 (= (_ bv0 2) ?x126)))
 (let (($x58 (= $x80 true)))
 (let (($x41 (= $x58 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x24 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x24 true)))
 (let (($x68 (= $x76 true)))
 (let (($x33 (= ?x16 input.dst.llvm-%n)))
 (let (($x67 (= $x33 true)))
 (let (($x89 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x7 (and $x75 $x89)))
 (let (($x147 (and $x7 $x68)))
 (let (($x103 (and $x147 $x41)))
 (let (($x71 (and $x103 $x140)))
 (let (($x37 (and $x71 $x178)))
 (let (($x157 (and $x37 $x100)))
 (let (($x206 (and $x157 $x139)))
 (let (($x245 (and $x206 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x341 (and $x351 $x362)))
 (let (($x248 (and $x341 $x345)))
 (let (($x136 (and $x248 $x330)))
 (let (($x338 (and $x136 $x263)))
 (let (($x21 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x270 (and (not $x21) $x338)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (and $x15 $x270)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x273 (and $x255 $x122)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x254 $x273)))
 (let (($x278 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd ?x187 (_ bv3 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x13 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x227)))
 (let (($x261 (or false (or false (and (and true (or $x90 $x13)) (or $x241 $x278))))))
 (let (($x295 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x261)))
 (let (($x291 (=> (and $x14 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x261)))
 (let (($x355 (and $x291 $x86)))
 (let (($x302 (=> $x355 $x29)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (bvsge ?x69 (_ bv0 32))))
 (let (($x161 (= $x118 true)))
 (let (($x29 (= $x161 true)))
 (let (($x258 (forall ((input.ind-%var1375X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1375X)))
 (=> $x42 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1375X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var1374X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1374X)))
 (= $x42 false)))
 ))
 (let (($x267 (and $x200 $x258)))
 (let (($x263 (= $x267 true)))
 (let (($x111 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var1369X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x235))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv2 32))) ?x243)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x235 (_ bv3 32))) ?x228)))
 (let ((?x340 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1369X)))
 (let (($x146 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1369X)))
 (=> $x146 (= ?x340 ?x303)))))))))
 ))
 (let (($x311 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) input.ind-%var1368X) (bvult input.ind-%var1368X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x146 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1368X)))
 (= $x146 $x59))))
 ))
 (let (($x299 (and $x311 $x111)))
 (let (($x330 (= $x299 true)))
 (let (($x128 (forall ((input.ind-%var1363X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1363X)))
 (=> $x42 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1363X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var1362X (_ BitVec 32)) )(let (($x42 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1362X)))
 (= $x42 false)))
 ))
 (let (($x256 (and $x288 $x128)))
 (let (($x345 (= $x256 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x298)))
 (let (($x211 (= ?x40 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x211 true)))
 (let (($x362 (= $x301 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x175 (bvsub ?x187 ?x123)))
 (let (($x202 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x175) (bvult ?x187 ?x175))))
 (let (($x185 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x148 (ite $x185 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x188 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x188)))
 (let ((?x179 ((_ extract 63 32) ?x17)))
 (let (($x198 (= ?x179 ?x148)))
 (let (($x208 (and $x198 $x202)))
 (let (($x133 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x209 (and $x133 $x208)))
 (let (($x219 (= true $x209)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x14 $x219)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x102 true)))
 (let (($x167 (= $x78 true)))
 (let (($x139 (= $x167 true)))
 (let (($x163 (= $x14 true)))
 (let (($x196 (= $x163 true)))
 (let (($x100 (= $x196 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x61)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x164)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x109)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x77 $x106)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x105 $x81)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x110 $x44)))
 (let (($x12 (not $x112)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x182 $x87)))
 (let (($x79 (and (not $x64) $x12)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x189 $x194)))
 (let (($x119 (not $x101)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x8 $x137)))
 (let (($x166 (and (not $x173) $x119)))
 (let (($x120 (and (and (and (and (and (and $x166 $x79) $x169) $x151) $x193) $x9) $x98)))
 (let (($x31 (and $x120 $x141)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x156 (or false (or false (and (and true (or $x23 $x152)) (or $x177 $x10))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x156)))
 (let (($x153 (and $x135 $x31)))
 (let (($x174 (= $x153 true)))
 (let (($x107 (= $x174 true)))
 (let (($x178 (= $x107 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x26 (= $x130 true)))
 (let (($x52 (= $x26 true)))
 (let (($x140 (= $x52 true)))
 (let ((?x126 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x80 (= (_ bv0 2) ?x126)))
 (let (($x58 (= $x80 true)))
 (let (($x41 (= $x58 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x24 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x24 true)))
 (let (($x68 (= $x76 true)))
 (let (($x33 (= ?x16 input.dst.llvm-%n)))
 (let (($x67 (= $x33 true)))
 (let (($x89 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x7 (and $x75 $x89)))
 (let (($x147 (and $x7 $x68)))
 (let (($x103 (and $x147 $x41)))
 (let (($x71 (and $x103 $x140)))
 (let (($x37 (and $x71 $x178)))
 (let (($x157 (and $x37 $x100)))
 (let (($x206 (and $x157 $x139)))
 (let (($x245 (and $x206 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x341 (and $x351 $x362)))
 (let (($x248 (and $x341 $x345)))
 (let (($x136 (and $x248 $x330)))
 (let (($x338 (and $x136 $x263)))
 (let (($x21 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x270 (and (not $x21) $x338)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (and $x15 $x270)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x273 (and $x255 $x122)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x254 $x273)))
 (let (($x278 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd ?x187 (_ bv3 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x13 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x227)))
 (let (($x261 (or false (or false (and (and true (or $x90 $x13)) (or $x241 $x278))))))
 (let (($x295 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x261)))
 (let (($x291 (=> (and $x14 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x261)))
 (let (($x355 (and $x291 $x86)))
 (let (($x302 (=> $x355 $x29)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x257 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (bvule ?x257 input.dst.llvm-%n)))
 (let (($x342 (= $x91 true)))
 (let (($x234 (= $x342 true)))
 (let (($x300 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1393X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1393X) (_ bv0 32)))))
 ))
 (let (($x327 (forall ((input.ind-%var1392X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1392X)))
 (= $x199 false)))
 ))
 (let (($x220 (and $x327 $x300)))
 (let (($x335 (= $x220 true)))
 (let (($x213 (forall ((input.ind-%var1387X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var1387X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x22)))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x314)))
 (let ((?x200 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1387X)))
 (let (($x62 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1387X)))
 (=> $x62 (= ?x200 ?x353)))))))))
 ))
 (let (($x111 (forall ((input.ind-%var1386X (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) input.ind-%var1386X) (bvult input.ind-%var1386X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x62 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1386X)))
 (= $x62 $x296))))
 ))
 (let (($x323 (and $x111 $x213)))
 (let (($x359 (= $x323 true)))
 (let (($x306 (forall ((input.ind-%var1381X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1381X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1381X) (_ bv0 32)))))
 ))
 (let (($x256 (forall ((input.ind-%var1380X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1380X)))
 (= $x199 false)))
 ))
 (let (($x317 (and $x256 $x306)))
 (let (($x235 (= $x317 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x40)))
 (let (($x301 (= ?x211 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x362 (= $x301 true)))
 (let (($x341 (= $x362 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x329 (= ?x16 input.dst.llvm-%n)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let (($x253 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x185 (bvsub ?x187 ?x123)))
 (let (($x175 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x185) (bvult ?x187 ?x185))))
 (let (($x188 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x17 (ite $x188 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x197 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x133 (bvmul (_ bv4 64) ?x197)))
 (let ((?x159 ((_ extract 63 32) ?x133)))
 (let (($x179 (= ?x159 ?x17)))
 (let (($x207 (and $x179 $x175)))
 (let (($x206 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x186 (and $x206 $x207)))
 (let (($x202 (= true $x186)))
 (let (($x127 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (=> $x127 $x202)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x100 (= $x196 true)))
 (let (($x157 (= $x100 true)))
 (let (($x102 (= $x157 true)))
 (let (($x107 (= $x127 true)))
 (let (($x178 (= $x107 true)))
 (let (($x37 (= $x178 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x81)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x109)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x160)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x169 $x32)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (and $x138 $x151)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x182 $x87)))
 (let (($x5 (not $x64)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x101 $x119)))
 (let (($x44 (and (not $x166) $x5)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x8 $x137)))
 (let (($x104 (not $x173)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x52 $x140)))
 (let (($x194 (and (not $x135) $x104)))
 (let (($x98 (and (and (and (and (and (and $x194 $x44) $x12) $x158) $x191) $x77) $x106)))
 (let (($x120 (and $x98 $x193)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x168)))
 (let (($x82 (or false (or false (and (and true (or $x57 $x73)) (or $x93 $x190))))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x61 (and $x156 $x120)))
 (let (($x141 (= $x61 true)))
 (let (($x31 (= $x141 true)))
 (let (($x153 (= $x31 true)))
 (let (($x80 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x58 (= $x80 true)))
 (let (($x41 (= $x58 true)))
 (let (($x103 (= $x41 true)))
 (let ((?x76 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x76)))
 (let (($x147 (= $x68 true)))
 (let (($x66 (= $x147 true)))
 (let (($x33 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (= $x33 true)))
 (let (($x89 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x7 (and $x75 $x89)))
 (let (($x126 (and $x7 $x66)))
 (let (($x130 (and $x126 $x103)))
 (let (($x174 (and $x130 $x153)))
 (let (($x163 (and $x174 $x37)))
 (let (($x78 (and $x163 $x102)))
 (let (($x222 (and $x78 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x204 (and $x244 $x286)))
 (let (($x298 (and $x204 $x351)))
 (let (($x36 (and $x298 $x341)))
 (let (($x264 (and $x36 $x235)))
 (let (($x162 (and $x264 $x359)))
 (let (($x352 (and $x162 $x335)))
 (let (($x337 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and (not $x337) $x352)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and $x360 $x149)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x316 (and $x224 $x60)))
 (let (($x242 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x35 (and $x242 $x316)))
 (let (($x282 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x187 (_ bv3 32))))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x43 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x291 (or false (or false (and (and true (or $x20 $x43)) (or $x304 $x282))))))
 (let (($x254 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x291)))
 (let (($x279 (=> (and $x127 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x291)))
 (let (($x290 (and $x279 $x35)))
 (let (($x336 (=> $x290 $x234)))
 (not $x336))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x257 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (bvule ?x257 input.dst.llvm-%n)))
 (let (($x342 (= $x91 true)))
 (let (($x234 (= $x342 true)))
 (let (($x300 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1393X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1393X) (_ bv0 32)))))
 ))
 (let (($x327 (forall ((input.ind-%var1392X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1392X)))
 (= $x199 false)))
 ))
 (let (($x220 (and $x327 $x300)))
 (let (($x335 (= $x220 true)))
 (let (($x213 (forall ((input.ind-%var1387X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var1387X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x22)))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x314)))
 (let ((?x200 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1387X)))
 (let (($x62 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1387X)))
 (=> $x62 (= ?x200 ?x353)))))))))
 ))
 (let (($x111 (forall ((input.ind-%var1386X (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) input.ind-%var1386X) (bvult input.ind-%var1386X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x62 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1386X)))
 (= $x62 $x296))))
 ))
 (let (($x323 (and $x111 $x213)))
 (let (($x359 (= $x323 true)))
 (let (($x306 (forall ((input.ind-%var1381X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1381X)))
 (=> $x199 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1381X) (_ bv0 32)))))
 ))
 (let (($x256 (forall ((input.ind-%var1380X (_ BitVec 32)) )(let (($x199 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1380X)))
 (= $x199 false)))
 ))
 (let (($x317 (and $x256 $x306)))
 (let (($x235 (= $x317 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x40)))
 (let (($x301 (= ?x211 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x362 (= $x301 true)))
 (let (($x341 (= $x362 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x46)))
 (let (($x329 (= ?x16 input.dst.llvm-%n)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let (($x253 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x246 (= $x245 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x185 (bvsub ?x187 ?x123)))
 (let (($x175 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x185) (bvult ?x187 ?x185))))
 (let (($x188 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x17 (ite $x188 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x197 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x133 (bvmul (_ bv4 64) ?x197)))
 (let ((?x159 ((_ extract 63 32) ?x133)))
 (let (($x179 (= ?x159 ?x17)))
 (let (($x207 (and $x179 $x175)))
 (let (($x206 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x186 (and $x206 $x207)))
 (let (($x202 (= true $x186)))
 (let (($x127 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (=> $x127 $x202)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x100 (= $x196 true)))
 (let (($x157 (= $x100 true)))
 (let (($x102 (= $x157 true)))
 (let (($x107 (= $x127 true)))
 (let (($x178 (= $x107 true)))
 (let (($x37 (= $x178 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x81)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x109)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x160)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x169 $x32)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (and $x138 $x151)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x182 $x87)))
 (let (($x5 (not $x64)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x101 $x119)))
 (let (($x44 (and (not $x166) $x5)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x8 $x137)))
 (let (($x104 (not $x173)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x52 $x140)))
 (let (($x194 (and (not $x135) $x104)))
 (let (($x98 (and (and (and (and (and (and $x194 $x44) $x12) $x158) $x191) $x77) $x106)))
 (let (($x120 (and $x98 $x193)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x168)))
 (let (($x82 (or false (or false (and (and true (or $x57 $x73)) (or $x93 $x190))))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x61 (and $x156 $x120)))
 (let (($x141 (= $x61 true)))
 (let (($x31 (= $x141 true)))
 (let (($x153 (= $x31 true)))
 (let (($x80 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x58 (= $x80 true)))
 (let (($x41 (= $x58 true)))
 (let (($x103 (= $x41 true)))
 (let ((?x76 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x68 (= (_ bv0 2) ?x76)))
 (let (($x147 (= $x68 true)))
 (let (($x66 (= $x147 true)))
 (let (($x33 (= ?x16 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (= $x33 true)))
 (let (($x89 (= $x67 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x92 true)))
 (let (($x47 (= $x84 true)))
 (let (($x75 (= $x47 true)))
 (let (($x7 (and $x75 $x89)))
 (let (($x126 (and $x7 $x66)))
 (let (($x130 (and $x126 $x103)))
 (let (($x174 (and $x130 $x153)))
 (let (($x163 (and $x174 $x37)))
 (let (($x78 (and $x163 $x102)))
 (let (($x222 (and $x78 $x218)))
 (let (($x244 (and $x222 $x246)))
 (let (($x204 (and $x244 $x286)))
 (let (($x298 (and $x204 $x351)))
 (let (($x36 (and $x298 $x341)))
 (let (($x264 (and $x36 $x235)))
 (let (($x162 (and $x264 $x359)))
 (let (($x352 (and $x162 $x335)))
 (let (($x337 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and (not $x337) $x352)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and $x360 $x149)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x316 (and $x224 $x60)))
 (let (($x242 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x35 (and $x242 $x316)))
 (let (($x282 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x187 (_ bv3 32))))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x43 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x291 (or false (or false (and (and true (or $x20 $x43)) (or $x304 $x282))))))
 (let (($x254 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x291)))
 (let (($x279 (=> (and $x127 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x291)))
 (let (($x290 (and $x279 $x35)))
 (let (($x336 (=> $x290 $x234)))
 (not $x336))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x332 (forall ((input.ind-%var1419X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1419X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x43 (bvadd ?x187 (_ bv3 32))))
 (let ((?x129 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x187 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x289 (store ?x129 (bvadd ?x187 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x113 (store ?x289 (bvadd ?x187 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x142 (store ?x113 ?x43 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x65 (concat (select ?x142 (bvadd ?x258 (_ bv2 32))) (concat (select ?x142 (bvadd ?x258 (_ bv1 32))) (select ?x142 ?x258)))))
 (let ((?x327 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1419X)))
 (let (($x326 (= input.ind-%var1419X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x325 (= (ite $x326 input.spec-%var-i-0.L3%6%bbentry ?x327) (concat (select ?x142 (bvadd ?x258 (_ bv3 32))) ?x65))))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1419X)))
 (let (($x181 (or $x215 $x326)))
 (=> $x181 $x325))))))))))))))))
 ))
 (let (($x38 (forall ((input.ind-%var1418X (_ BitVec 32)) )(let (($x353 (bvule (_ bv0 32) input.ind-%var1418X)))
 (let (($x150 (and $x353 (bvult input.ind-%var1418X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x326 (= input.ind-%var1418X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1418X)))
 (let (($x181 (or $x215 $x326)))
 (= $x181 $x150)))))))
 ))
 (let (($x217 (and $x38 $x332)))
 (let (($x330 (= true true)))
 (let (($x236 (and $x330 $x217)))
 (let (($x307 (= $x236 true)))
 (let (($x59 (forall ((input.ind-%var1411X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1411X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1411X) (_ bv0 32)))))
 ))
 (let (($x270 (forall ((input.ind-%var1410X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1410X)))
 (= $x308 false)))
 ))
 (let (($x268 (and $x270 $x59)))
 (let (($x124 (= $x268 true)))
 (let (($x338 (forall ((input.ind-%var1405X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1405X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x146)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x309)))
 (let ((?x327 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1405X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1405X)))
 (=> $x215 (= ?x327 ?x42)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var1404X (_ BitVec 32)) )(let (($x353 (bvule (_ bv0 32) input.ind-%var1404X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1404X)))
 (= $x215 (and $x353 (bvult input.ind-%var1404X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x29 (and $x213 $x338)))
 (let (($x302 (= $x29 true)))
 (let (($x267 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1399X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1399X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1398X)))
 (= $x308 false)))
 ))
 (let (($x343 (and $x317 $x267)))
 (let (($x344 (= $x343 true)))
 (let ((?x211 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x211)))
 (let (($x362 (= ?x301 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x341 (= $x362 true)))
 (let (($x36 (= $x341 true)))
 (let ((?x329 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x274 (= (_ bv0 2) ?x329)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x202 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x197 (bvsub ?x187 ?x123)))
 (let (($x17 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x197) (bvult ?x187 ?x197))))
 (let (($x139 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x206 (ite $x139 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x102 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvmul (_ bv4 64) ?x102)))
 (let ((?x167 ((_ extract 63 32) ?x78)))
 (let (($x145 (= ?x167 ?x206)))
 (let (($x179 (and $x145 $x17)))
 (let (($x100 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x148 (and $x100 $x179)))
 (let (($x185 (= true $x148)))
 (let (($x180 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (=> $x180 $x185)))
 (let (($x172 (= $x198 true)))
 (let (($x175 (= $x172 true)))
 (let (($x207 (= $x175 true)))
 (let (($x153 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x153 true)))
 (let (($x107 (= $x174 true)))
 (let (($x178 (= $x107 true)))
 (let (($x193 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x120 (= $x193 true)))
 (let (($x61 (= $x120 true)))
 (let (($x141 (= $x61 true)))
 (let (($x164 (= $x180 true)))
 (let (($x109 (= $x164 true)))
 (let (($x106 (= $x109 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x12)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x171)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x110)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x166 $x182)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x119 $x87)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x52 $x140)))
 (let (($x189 (not $x135)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x108 $x82)))
 (let (($x137 (and (not $x156) $x189)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x23 $x152)))
 (let (($x190 (not $x93)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x7 $x24)))
 (let (($x10 (and (not $x73) $x190)))
 (let (($x160 (and (and (and (and (and (and $x10 $x137) $x104) $x101) $x64) $x44) $x112)))
 (let (($x32 (and $x160 $x170)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x147 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x147)))
 (let (($x116 (or false (or false (and (and true (or $x66 $x126)) (or $x41 $x103))))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x116)))
 (let (($x151 (and $x57 $x32)))
 (let (($x191 (= $x151 true)))
 (let (($x114 (= $x191 true)))
 (let (($x105 (= $x114 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x77 (and $x67 $x105)))
 (let (($x98 (and $x77 $x106)))
 (let (($x31 (and $x98 $x141)))
 (let (($x37 (and $x31 $x178)))
 (let (($x186 (and $x37 $x207)))
 (let (($x218 (and $x186 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x40 (and $x286 $x298)))
 (let (($x288 (and $x40 $x36)))
 (let (($x292 (and $x288 $x344)))
 (let (($x69 (and $x292 $x302)))
 (let (($x49 (and $x69 $x124)))
 (let (($x125 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and (not $x125) $x49)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x248 (and $x21 $x243)))
 (let (($x285 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x184 (and $x285 $x248)))
 (let (($x297 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x28 (and $x297 $x184)))
 (let (($x261 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd ?x187 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x241 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x279 (or false (or false (and (and true (or $x18 $x241)) (or $x331 $x261))))))
 (let (($x242 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x279)))
 (let (($x216 (=> (and $x180 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x279)))
 (let (($x238 (and $x216 $x28)))
 (let (($x319 (=> $x238 $x307)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x332 (forall ((input.ind-%var1419X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1419X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x43 (bvadd ?x187 (_ bv3 32))))
 (let ((?x129 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x187 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x289 (store ?x129 (bvadd ?x187 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x113 (store ?x289 (bvadd ?x187 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x142 (store ?x113 ?x43 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x65 (concat (select ?x142 (bvadd ?x258 (_ bv2 32))) (concat (select ?x142 (bvadd ?x258 (_ bv1 32))) (select ?x142 ?x258)))))
 (let ((?x327 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1419X)))
 (let (($x326 (= input.ind-%var1419X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x325 (= (ite $x326 input.spec-%var-i-0.L3%6%bbentry ?x327) (concat (select ?x142 (bvadd ?x258 (_ bv3 32))) ?x65))))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1419X)))
 (let (($x181 (or $x215 $x326)))
 (=> $x181 $x325))))))))))))))))
 ))
 (let (($x38 (forall ((input.ind-%var1418X (_ BitVec 32)) )(let (($x353 (bvule (_ bv0 32) input.ind-%var1418X)))
 (let (($x150 (and $x353 (bvult input.ind-%var1418X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x326 (= input.ind-%var1418X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1418X)))
 (let (($x181 (or $x215 $x326)))
 (= $x181 $x150)))))))
 ))
 (let (($x217 (and $x38 $x332)))
 (let (($x330 (= true true)))
 (let (($x236 (and $x330 $x217)))
 (let (($x307 (= $x236 true)))
 (let (($x59 (forall ((input.ind-%var1411X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1411X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1411X) (_ bv0 32)))))
 ))
 (let (($x270 (forall ((input.ind-%var1410X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1410X)))
 (= $x308 false)))
 ))
 (let (($x268 (and $x270 $x59)))
 (let (($x124 (= $x268 true)))
 (let (($x338 (forall ((input.ind-%var1405X (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul input.ind-%var1405X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x146)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x309)))
 (let ((?x327 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1405X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1405X)))
 (=> $x215 (= ?x327 ?x42)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var1404X (_ BitVec 32)) )(let (($x353 (bvule (_ bv0 32) input.ind-%var1404X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1404X)))
 (= $x215 (and $x353 (bvult input.ind-%var1404X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x29 (and $x213 $x338)))
 (let (($x302 (= $x29 true)))
 (let (($x267 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1399X)))
 (=> $x308 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1399X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let (($x308 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1398X)))
 (= $x308 false)))
 ))
 (let (($x343 (and $x317 $x267)))
 (let (($x344 (= $x343 true)))
 (let ((?x211 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x211)))
 (let (($x362 (= ?x301 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x341 (= $x362 true)))
 (let (($x36 (= $x341 true)))
 (let ((?x329 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x274 (= (_ bv0 2) ?x329)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x245 (= $x252 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x202 true)))
 (let (($x209 (= $x208 true)))
 (let (($x219 (= $x209 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x197 (bvsub ?x187 ?x123)))
 (let (($x17 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x197) (bvult ?x187 ?x197))))
 (let (($x139 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x206 (ite $x139 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x102 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvmul (_ bv4 64) ?x102)))
 (let ((?x167 ((_ extract 63 32) ?x78)))
 (let (($x145 (= ?x167 ?x206)))
 (let (($x179 (and $x145 $x17)))
 (let (($x100 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x148 (and $x100 $x179)))
 (let (($x185 (= true $x148)))
 (let (($x180 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (=> $x180 $x185)))
 (let (($x172 (= $x198 true)))
 (let (($x175 (= $x172 true)))
 (let (($x207 (= $x175 true)))
 (let (($x153 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x153 true)))
 (let (($x107 (= $x174 true)))
 (let (($x178 (= $x107 true)))
 (let (($x193 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x120 (= $x193 true)))
 (let (($x61 (= $x120 true)))
 (let (($x141 (= $x61 true)))
 (let (($x164 (= $x180 true)))
 (let (($x109 (= $x164 true)))
 (let (($x106 (= $x109 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x12)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x171)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x110)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x166 $x182)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x119 $x87)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x52 $x140)))
 (let (($x189 (not $x135)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x108 $x82)))
 (let (($x137 (and (not $x156) $x189)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x23 $x152)))
 (let (($x190 (not $x93)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x7 $x24)))
 (let (($x10 (and (not $x73) $x190)))
 (let (($x160 (and (and (and (and (and (and $x10 $x137) $x104) $x101) $x64) $x44) $x112)))
 (let (($x32 (and $x160 $x170)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x147 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x147)))
 (let (($x116 (or false (or false (and (and true (or $x66 $x126)) (or $x41 $x103))))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x116)))
 (let (($x151 (and $x57 $x32)))
 (let (($x191 (= $x151 true)))
 (let (($x114 (= $x191 true)))
 (let (($x105 (= $x114 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x92)))
 (let (($x46 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x46 true)))
 (let (($x33 (= $x16 true)))
 (let (($x47 (= ?x84 input.dst.llvm-%n)))
 (let (($x75 (= $x47 true)))
 (let (($x56 (= $x75 true)))
 (let (($x67 (and $x56 $x33)))
 (let (($x77 (and $x67 $x105)))
 (let (($x98 (and $x77 $x106)))
 (let (($x31 (and $x98 $x141)))
 (let (($x37 (and $x31 $x178)))
 (let (($x186 (and $x37 $x207)))
 (let (($x218 (and $x186 $x219)))
 (let (($x246 (and $x218 $x245)))
 (let (($x286 (and $x246 $x212)))
 (let (($x40 (and $x286 $x298)))
 (let (($x288 (and $x40 $x36)))
 (let (($x292 (and $x288 $x344)))
 (let (($x69 (and $x292 $x302)))
 (let (($x49 (and $x69 $x124)))
 (let (($x125 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and (not $x125) $x49)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x248 (and $x21 $x243)))
 (let (($x285 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x184 (and $x285 $x248)))
 (let (($x297 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x28 (and $x297 $x184)))
 (let (($x261 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd ?x187 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x241 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x279 (or false (or false (and (and true (or $x18 $x241)) (or $x331 $x261))))))
 (let (($x242 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x279)))
 (let (($x216 (=> (and $x180 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x279)))
 (let (($x238 (and $x216 $x28)))
 (let (($x319 (=> $x238 $x307)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (not $x143)))
 (let (($x300 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x311 (not $x300)))
 (let (($x86 (or $x311 $x228)))
 (let (($x235 (= $x86 true)))
 (let (($x62 (= $x235 true)))
 (let (($x217 (forall ((input.ind-%var1437X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1437X)))
 (=> $x288 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1437X) (_ bv0 32)))))
 ))
 (let (($x39 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1436X)))
 (= $x288 false)))
 ))
 (let (($x236 (and $x39 $x217)))
 (let (($x307 (= $x236 true)))
 (let (($x113 (forall ((input.ind-%var1431X (_ BitVec 32)) )(let ((?x176 (bvadd (bvmul input.ind-%var1431X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x251 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x176))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x176 (_ bv2 32))) ?x251)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x176 (_ bv3 32))) ?x129)))
 (let ((?x263 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1431X)))
 (let (($x357 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1431X)))
 (=> $x357 (= ?x263 ?x289)))))))))
 ))
 (let (($x146 (forall ((input.ind-%var1430X (_ BitVec 32)) )(let (($x345 (and (bvule (_ bv0 32) input.ind-%var1430X) (bvult input.ind-%var1430X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x357 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1430X)))
 (= $x357 $x345))))
 ))
 (let (($x201 (and $x146 $x113)))
 (let (($x142 (= $x201 true)))
 (let (($x314 (forall ((input.ind-%var1425X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1425X)))
 (=> $x288 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1425X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1424X)))
 (= $x288 false)))
 ))
 (let (($x97 (and $x317 $x314)))
 (let (($x313 (= $x97 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x298 (= ?x351 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let ((?x252 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x252)))
 (let (($x212 (= ?x245 input.dst.llvm-%n)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x246 (= ?x245 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x175 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x175 true)))
 (let (($x186 (= $x207 true)))
 (let (($x202 (= $x186 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x179 true)))
 (let (($x185 (= $x148 true)))
 (let (($x198 (= $x185 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x100 (bvsub ?x187 ?x123)))
 (let (($x167 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x100) (bvult ?x187 ?x100))))
 (let (($x178 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x163 (ite $x178 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x153 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvmul (_ bv4 64) ?x153)))
 (let ((?x107 ((_ extract 63 32) ?x174)))
 (let (($x196 (= ?x107 ?x163)))
 (let (($x139 (and $x196 $x167)))
 (let (($x141 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x206 (and $x141 $x139)))
 (let (($x145 (= true $x206)))
 (let (($x133 (=> $x143 $x145)))
 (let (($x197 (= $x133 true)))
 (let (($x159 (= $x197 true)))
 (let (($x188 (= $x159 true)))
 (let (($x109 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x106 (= $x109 true)))
 (let (($x98 (= $x106 true)))
 (let (($x81 (= $x98 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x191 (= $x151 true)))
 (let (($x114 (= $x191 true)))
 (let (($x105 (= $x114 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x166)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x9)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x137 $x173)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x189 $x104)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x93 $x190)))
 (let (($x108 (not $x10)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x177 $x23)))
 (let (($x156 (and (not $x152) $x108)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x74 $x116)))
 (let (($x7 (not $x57)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x75 $x56)))
 (let (($x73 (and (not $x71) $x7)))
 (let (($x44 (and (and (and (and (and (and $x73 $x156) $x52) $x135) $x158) $x101) $x119)))
 (let (($x169 (and $x44 $x110)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x41 (or false (or false (and (and true (or $x67 $x76)) (or $x147 $x66))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x41)))
 (let (($x171 (and $x130 $x169)))
 (let (($x112 (= $x171 true)))
 (let (($x160 (= $x112 true)))
 (let (($x12 (= $x160 true)))
 (let ((?x260 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x72 (= (_ bv0 2) ?x260)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x170 (and $x84 $x12)))
 (let (($x77 (and $x170 $x105)))
 (let (($x193 (and $x77 $x81)))
 (let (($x17 (and $x193 $x188)))
 (let (($x172 (and $x17 $x198)))
 (let (($x208 (and $x172 $x202)))
 (let (($x226 (and $x208 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x329 (and $x276 $x204)))
 (let (($x301 (and $x329 $x211)))
 (let (($x213 (and $x301 $x313)))
 (let (($x324 (and $x213 $x142)))
 (let (($x319 (and $x324 $x307)))
 (let (($x337 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x337 $x319)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x183 (and $x15 $x99)))
 (let (($x255 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x89 (and $x255 $x183)))
 (let (($x291 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd ?x187 (_ bv3 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x304 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x241)))
 (let (($x216 (or false (or false (and (and true (or $x154 $x304)) (or $x295 $x291))))))
 (let (($x297 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x216)))
 (let (($x227 (=> (and $x143 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x216)))
 (let (($x328 (and $x227 $x89)))
 (let (($x323 (=> $x328 $x62)))
 (not $x323))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (not $x143)))
 (let (($x300 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x311 (not $x300)))
 (let (($x86 (or $x311 $x228)))
 (let (($x235 (= $x86 true)))
 (let (($x62 (= $x235 true)))
 (let (($x217 (forall ((input.ind-%var1437X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1437X)))
 (=> $x288 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1437X) (_ bv0 32)))))
 ))
 (let (($x39 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1436X)))
 (= $x288 false)))
 ))
 (let (($x236 (and $x39 $x217)))
 (let (($x307 (= $x236 true)))
 (let (($x113 (forall ((input.ind-%var1431X (_ BitVec 32)) )(let ((?x176 (bvadd (bvmul input.ind-%var1431X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x251 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x176))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x176 (_ bv2 32))) ?x251)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x176 (_ bv3 32))) ?x129)))
 (let ((?x263 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1431X)))
 (let (($x357 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1431X)))
 (=> $x357 (= ?x263 ?x289)))))))))
 ))
 (let (($x146 (forall ((input.ind-%var1430X (_ BitVec 32)) )(let (($x345 (and (bvule (_ bv0 32) input.ind-%var1430X) (bvult input.ind-%var1430X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x357 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1430X)))
 (= $x357 $x345))))
 ))
 (let (($x201 (and $x146 $x113)))
 (let (($x142 (= $x201 true)))
 (let (($x314 (forall ((input.ind-%var1425X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1425X)))
 (=> $x288 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1425X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1424X)))
 (= $x288 false)))
 ))
 (let (($x97 (and $x317 $x314)))
 (let (($x313 (= $x97 true)))
 (let ((?x274 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x298 (= ?x351 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let ((?x252 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x252)))
 (let (($x212 (= ?x245 input.dst.llvm-%n)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x246 (= ?x245 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x209 true)))
 (let (($x218 (= $x219 true)))
 (let (($x222 (= $x218 true)))
 (let (($x175 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x175 true)))
 (let (($x186 (= $x207 true)))
 (let (($x202 (= $x186 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x179 true)))
 (let (($x185 (= $x148 true)))
 (let (($x198 (= $x185 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x100 (bvsub ?x187 ?x123)))
 (let (($x167 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x100) (bvult ?x187 ?x100))))
 (let (($x178 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x163 (ite $x178 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x153 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x174 (bvmul (_ bv4 64) ?x153)))
 (let ((?x107 ((_ extract 63 32) ?x174)))
 (let (($x196 (= ?x107 ?x163)))
 (let (($x139 (and $x196 $x167)))
 (let (($x141 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x206 (and $x141 $x139)))
 (let (($x145 (= true $x206)))
 (let (($x133 (=> $x143 $x145)))
 (let (($x197 (= $x133 true)))
 (let (($x159 (= $x197 true)))
 (let (($x188 (= $x159 true)))
 (let (($x109 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x106 (= $x109 true)))
 (let (($x98 (= $x106 true)))
 (let (($x81 (= $x98 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x191 (= $x151 true)))
 (let (($x114 (= $x191 true)))
 (let (($x105 (= $x114 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x166)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x9)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x137 $x173)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x189 $x104)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x93 $x190)))
 (let (($x108 (not $x10)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x177 $x23)))
 (let (($x156 (and (not $x152) $x108)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x74 $x116)))
 (let (($x7 (not $x57)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x75 $x56)))
 (let (($x73 (and (not $x71) $x7)))
 (let (($x44 (and (and (and (and (and (and $x73 $x156) $x52) $x135) $x158) $x101) $x119)))
 (let (($x169 (and $x44 $x110)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x41 (or false (or false (and (and true (or $x67 $x76)) (or $x147 $x66))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x41)))
 (let (($x171 (and $x130 $x169)))
 (let (($x112 (= $x171 true)))
 (let (($x160 (= $x112 true)))
 (let (($x12 (= $x160 true)))
 (let ((?x260 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x72 (= (_ bv0 2) ?x260)))
 (let (($x92 (= $x72 true)))
 (let (($x84 (= $x92 true)))
 (let (($x170 (and $x84 $x12)))
 (let (($x77 (and $x170 $x105)))
 (let (($x193 (and $x77 $x81)))
 (let (($x17 (and $x193 $x188)))
 (let (($x172 (and $x17 $x198)))
 (let (($x208 (and $x172 $x202)))
 (let (($x226 (and $x208 $x222)))
 (let (($x276 (and $x226 $x253)))
 (let (($x329 (and $x276 $x204)))
 (let (($x301 (and $x329 $x211)))
 (let (($x213 (and $x301 $x313)))
 (let (($x324 (and $x213 $x142)))
 (let (($x319 (and $x324 $x307)))
 (let (($x337 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x337 $x319)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x183 (and $x15 $x99)))
 (let (($x255 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x89 (and $x255 $x183)))
 (let (($x291 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd ?x187 (_ bv3 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x304 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x241)))
 (let (($x216 (or false (or false (and (and true (or $x154 $x304)) (or $x295 $x291))))))
 (let (($x297 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x216)))
 (let (($x227 (=> (and $x143 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x216)))
 (let (($x328 (and $x227 $x89)))
 (let (($x323 (=> $x328 $x62)))
 (not $x323))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x363 (bvmul (_ bv4294967295 32) ?x6)))
 (let ((?x283 (bvneg ?x363)))
 (let (($x199 (= ?x283 ?x25)))
 (let (($x128 (= $x199 true)))
 (let (($x299 (forall ((input.ind-%var1455X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1455X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1455X) (_ bv0 32)))))
 ))
 (let (($x308 (forall ((input.ind-%var1454X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1454X)))
 (= $x213 false)))
 ))
 (let (($x111 (and $x308 $x299)))
 (let (($x292 (= $x111 true)))
 (let (($x59 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1449X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x309))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv2 32))) ?x53)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv3 32))) ?x302)))
 (let ((?x183 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1449X)))
 (let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1449X)))
 (=> $x129 (= ?x183 ?x238)))))))))
 ))
 (let (($x236 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x39 (and (bvule (_ bv0 32) input.ind-%var1448X) (bvult input.ind-%var1448X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1448X)))
 (= $x129 $x39))))
 ))
 (let (($x268 (and $x236 $x59)))
 (let (($x270 (= $x268 true)))
 (let (($x271 (forall ((input.ind-%var1443X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1443X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1443X) (_ bv0 32)))))
 ))
 (let (($x345 (forall ((input.ind-%var1442X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1442X)))
 (= $x213 false)))
 ))
 (let (($x348 (and $x345 $x271)))
 (let (($x233 (= $x348 true)))
 (let ((?x288 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x306 (bvneg ?x288)))
 (let (($x317 (= ?x306 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x172 (bvsub ?x187 ?x123)))
 (let (($x202 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x172) (bvult ?x187 ?x172))))
 (let (($x148 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x185 (ite $x148 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x188 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x188)))
 (let ((?x179 ((_ extract 63 32) ?x17)))
 (let (($x198 (= ?x179 ?x185)))
 (let (($x208 (and $x198 $x202)))
 (let (($x197 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x209 (and $x197 $x208)))
 (let (($x219 (= true $x209)))
 (let (($x132 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x132 $x219)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x102 true)))
 (let (($x167 (= $x78 true)))
 (let (($x139 (= $x167 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x163 (= $x37 true)))
 (let (($x196 (= $x163 true)))
 (let (($x157 (= $x196 true)))
 (let (($x31 (= $x132 true)))
 (let (($x153 (= $x31 true)))
 (let (($x174 (= $x153 true)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x151)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x170)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x110)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (and $x166 $x169)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x44 $x171)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x79 $x173)))
 (let (($x158 (not $x104)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x64 $x189)))
 (let (($x194 (and (not $x137) $x158)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x182 $x8)))
 (let (($x87 (not $x52)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x75 $x56)))
 (let (($x135 (and (not $x156) $x87)))
 (let (($x106 (and (and (and (and (and (and $x135 $x194) $x5) $x119) $x112) $x12) $x32)))
 (let (($x98 (and $x106 $x191)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x190 (or false (or false (and (and true (or $x116 $x57)) (or $x177 $x23))))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x190)))
 (let (($x81 (and $x108 $x98)))
 (let (($x193 (= $x81 true)))
 (let (($x120 (= $x193 true)))
 (let (($x61 (= $x120 true)))
 (let ((?x66 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x126 (= (_ bv0 2) ?x66)))
 (let (($x80 (= $x126 true)))
 (let (($x58 (= $x80 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x84)))
 (let (($x67 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x67 true)))
 (let (($x68 (= $x76 true)))
 (let (($x16 (= ?x46 input.dst.llvm-%n)))
 (let (($x103 (= $x16 true)))
 (let (($x33 (= $x103 true)))
 (let (($x168 (and $x33 $x68)))
 (let (($x41 (and $x168 $x58)))
 (let (($x141 (and $x41 $x61)))
 (let (($x107 (and $x141 $x174)))
 (let (($x100 (and $x107 $x157)))
 (let (($x206 (and $x100 $x139)))
 (let (($x245 (and $x206 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x36 (and $x351 $x301)))
 (let (($x353 (and $x36 $x215)))
 (let (($x38 (and $x353 $x233)))
 (let (($x124 (and $x38 $x270)))
 (let (($x326 (and $x124 $x292)))
 (let (($x72 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (and (not $x72) $x326)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x125 $x42)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x232 (and $x360 $x181)))
 (let (($x224 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x294 (and $x224 $x232)))
 (let (($x279 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x304 (bvadd ?x187 (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x304)))
 (let (($x331 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x304)))
 (let (($x227 (or false (or false (and (and true (or $x278 $x331)) (or $x254 $x279))))))
 (let (($x255 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x227)))
 (let (($x13 (=> (and $x132 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x227)))
 (let (($x332 (and $x13 $x294)))
 (let (($x335 (=> $x332 $x128)))
 (not $x335))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x363 (bvmul (_ bv4294967295 32) ?x6)))
 (let ((?x283 (bvneg ?x363)))
 (let (($x199 (= ?x283 ?x25)))
 (let (($x128 (= $x199 true)))
 (let (($x299 (forall ((input.ind-%var1455X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1455X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1455X) (_ bv0 32)))))
 ))
 (let (($x308 (forall ((input.ind-%var1454X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1454X)))
 (= $x213 false)))
 ))
 (let (($x111 (and $x308 $x299)))
 (let (($x292 (= $x111 true)))
 (let (($x59 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1449X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x309))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv2 32))) ?x53)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv3 32))) ?x302)))
 (let ((?x183 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1449X)))
 (let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1449X)))
 (=> $x129 (= ?x183 ?x238)))))))))
 ))
 (let (($x236 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x39 (and (bvule (_ bv0 32) input.ind-%var1448X) (bvult input.ind-%var1448X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x129 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1448X)))
 (= $x129 $x39))))
 ))
 (let (($x268 (and $x236 $x59)))
 (let (($x270 (= $x268 true)))
 (let (($x271 (forall ((input.ind-%var1443X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1443X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1443X) (_ bv0 32)))))
 ))
 (let (($x345 (forall ((input.ind-%var1442X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1442X)))
 (= $x213 false)))
 ))
 (let (($x348 (and $x345 $x271)))
 (let (($x233 (= $x348 true)))
 (let ((?x288 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x306 (bvneg ?x288)))
 (let (($x317 (= ?x306 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x246 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x172 (bvsub ?x187 ?x123)))
 (let (($x202 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x172) (bvult ?x187 ?x172))))
 (let (($x148 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x185 (ite $x148 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x188 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x188)))
 (let ((?x179 ((_ extract 63 32) ?x17)))
 (let (($x198 (= ?x179 ?x185)))
 (let (($x208 (and $x198 $x202)))
 (let (($x197 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x209 (and $x197 $x208)))
 (let (($x219 (= true $x209)))
 (let (($x132 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x132 $x219)))
 (let (($x222 (= $x218 true)))
 (let (($x226 (= $x222 true)))
 (let (($x252 (= $x226 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x102 true)))
 (let (($x167 (= $x78 true)))
 (let (($x139 (= $x167 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x163 (= $x37 true)))
 (let (($x196 (= $x163 true)))
 (let (($x157 (= $x196 true)))
 (let (($x31 (= $x132 true)))
 (let (($x153 (= $x31 true)))
 (let (($x174 (= $x153 true)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x151)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x170)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x110)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (and $x166 $x169)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x44 $x171)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x79 $x173)))
 (let (($x158 (not $x104)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x64 $x189)))
 (let (($x194 (and (not $x137) $x158)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x182 $x8)))
 (let (($x87 (not $x52)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x75 $x56)))
 (let (($x135 (and (not $x156) $x87)))
 (let (($x106 (and (and (and (and (and (and $x135 $x194) $x5) $x119) $x112) $x12) $x32)))
 (let (($x98 (and $x106 $x191)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x190 (or false (or false (and (and true (or $x116 $x57)) (or $x177 $x23))))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x190)))
 (let (($x81 (and $x108 $x98)))
 (let (($x193 (= $x81 true)))
 (let (($x120 (= $x193 true)))
 (let (($x61 (= $x120 true)))
 (let ((?x66 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x126 (= (_ bv0 2) ?x66)))
 (let (($x80 (= $x126 true)))
 (let (($x58 (= $x80 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x84)))
 (let (($x67 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x67 true)))
 (let (($x68 (= $x76 true)))
 (let (($x16 (= ?x46 input.dst.llvm-%n)))
 (let (($x103 (= $x16 true)))
 (let (($x33 (= $x103 true)))
 (let (($x168 (and $x33 $x68)))
 (let (($x41 (and $x168 $x58)))
 (let (($x141 (and $x41 $x61)))
 (let (($x107 (and $x141 $x174)))
 (let (($x100 (and $x107 $x157)))
 (let (($x206 (and $x100 $x139)))
 (let (($x245 (and $x206 $x252)))
 (let (($x212 (and $x245 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x36 (and $x351 $x301)))
 (let (($x353 (and $x36 $x215)))
 (let (($x38 (and $x353 $x233)))
 (let (($x124 (and $x38 $x270)))
 (let (($x326 (and $x124 $x292)))
 (let (($x72 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (and (not $x72) $x326)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x125 $x42)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x232 (and $x360 $x181)))
 (let (($x224 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x294 (and $x224 $x232)))
 (let (($x279 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x304 (bvadd ?x187 (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x304)))
 (let (($x331 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x304)))
 (let (($x227 (or false (or false (and (and true (or $x278 $x331)) (or $x254 $x279))))))
 (let (($x255 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x227)))
 (let (($x13 (=> (and $x132 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x227)))
 (let (($x332 (and $x13 $x294)))
 (let (($x335 (=> $x332 $x128)))
 (not $x335))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x343 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x325 (bvule ?x343 (_ bv4294967294 32))))
 (let (($x319 (= $x325 true)))
 (let (($x303 (= $x319 true)))
 (let (($x290 (forall ((input.ind-%var1473X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1473X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1473X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var1472X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1472X)))
 (= $x29 false)))
 ))
 (let (($x247 (and $x86 $x290)))
 (let (($x176 (= $x247 true)))
 (let (($x97 (forall ((input.ind-%var1467X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var1467X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x130))))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv2 32))) ?x19)))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv3 32))) ?x307)))
 (let ((?x308 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1467X)))
 (let (($x362 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1467X)))
 (=> $x362 (= ?x308 ?x134)))))))))
 ))
 (let (($x59 (forall ((input.ind-%var1466X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1466X) (bvult input.ind-%var1466X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x362 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1466X)))
 (= $x362 $x243))))
 ))
 (let (($x300 (and $x59 $x97)))
 (let (($x311 (= $x300 true)))
 (let (($x328 (forall ((input.ind-%var1461X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1461X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1461X) (_ bv0 32)))))
 ))
 (let (($x348 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1460X)))
 (= $x29 false)))
 ))
 (let (($x200 (and $x348 $x328)))
 (let (($x309 (= $x200 true)))
 (let ((?x306 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x306)))
 (let (($x267 (= ?x317 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x204 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x208 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x208)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x186)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x148)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (and $x179 $x185)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x17 $x198)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x102 $x78)))
 (let (($x139 (not $x167)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x196 $x157)))
 (let (($x145 (and (not $x100) $x139)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x153 $x174)))
 (let (($x178 (not $x107)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x171 $x112)))
 (let (($x163 (and (not $x31) $x178)))
 (let (($x245 (and (and (and (and (and (and $x163 $x145) $x197) $x188) $x175) $x207) $x202)))
 (let (($x246 (and $x245 $x209)))
 (let (($x191 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x120 (or false (or false (and (and true (or $x109 $x170)) (or $x151 $x191))))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x120)))
 (let (($x244 (and $x141 $x246)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x119 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x119 true)))
 (let (($x44 (= $x77 true)))
 (let (($x166 (= $x44 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (= $x114 true)))
 (let (($x5 (= $x101 true)))
 (let (($x105 (= $x5 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x173 (= (_ bv0 2) ?x79)))
 (let (($x104 (= $x173 true)))
 (let (($x158 (= $x104 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x156)))
 (let (($x135 (= ?x140 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x135 true)))
 (let (($x189 (= $x64 true)))
 (let (($x182 (= ?x140 input.dst.llvm-%n)))
 (let (($x8 (= $x182 true)))
 (let (($x52 (= $x8 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x116 (bvsub ?x187 ?x123)))
 (let (($x177 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x116) (bvult ?x187 ?x116))))
 (let (($x71 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x10 (ite $x71 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x80 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x58 (bvmul (_ bv4 64) ?x80)))
 (let ((?x41 ((_ extract 63 32) ?x58)))
 (let (($x74 (= ?x41 ?x10)))
 (let (($x23 (and $x74 $x177)))
 (let (($x66 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x152 (and $x66 $x23)))
 (let (($x82 (= true $x152)))
 (let (($x85 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (=> $x85 $x82)))
 (let (($x190 (= $x93 true)))
 (let (($x108 (= $x190 true)))
 (let (($x75 (= $x108 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x33 (= $x103 true)))
 (let (($x67 (= $x33 true)))
 (let (($x76 (= $x67 true)))
 (let (($x92 (= $x85 true)))
 (let (($x84 (= $x92 true)))
 (let (($x46 (= $x84 true)))
 (let (($x68 (and $x46 $x76)))
 (let (($x56 (and $x68 $x75)))
 (let (($x87 (and $x56 $x52)))
 (let (($x137 (and $x87 $x189)))
 (let (($x194 (and $x137 $x158)))
 (let (($x9 (and $x194 $x105)))
 (let (($x110 (and $x9 $x166)))
 (let (($x286 (and $x110 $x212)))
 (let (($x298 (and $x286 $x351)))
 (let (($x288 (and $x298 $x36)))
 (let (($x313 (and $x288 $x353)))
 (let (($x69 (and $x313 $x309)))
 (let (($x258 (and $x69 $x311)))
 (let (($x251 (and $x258 $x176)))
 (let (($x284 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and (not $x284) $x251)))
 (let (($x260 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x330 (and $x260 $x184)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x201 (and $x21 $x330)))
 (let (($x285 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x285 $x201)))
 (let (($x216 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x331 (bvadd ?x187 (_ bv3 32))))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x331)))
 (let (($x295 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x331)))
 (let (($x13 (or false (or false (and (and true (or $x282 $x295)) (or $x242 $x216))))))
 (let (($x224 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x43 (=> (and $x85 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x51 (and $x43 $x146)))
 (let (($x229 (=> $x51 $x303)))
 (not $x229))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x343 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x325 (bvule ?x343 (_ bv4294967294 32))))
 (let (($x319 (= $x325 true)))
 (let (($x303 (= $x319 true)))
 (let (($x290 (forall ((input.ind-%var1473X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1473X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1473X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var1472X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1472X)))
 (= $x29 false)))
 ))
 (let (($x247 (and $x86 $x290)))
 (let (($x176 (= $x247 true)))
 (let (($x97 (forall ((input.ind-%var1467X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var1467X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x130))))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv2 32))) ?x19)))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv3 32))) ?x307)))
 (let ((?x308 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1467X)))
 (let (($x362 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1467X)))
 (=> $x362 (= ?x308 ?x134)))))))))
 ))
 (let (($x59 (forall ((input.ind-%var1466X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1466X) (bvult input.ind-%var1466X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x362 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1466X)))
 (= $x362 $x243))))
 ))
 (let (($x300 (and $x59 $x97)))
 (let (($x311 (= $x300 true)))
 (let (($x328 (forall ((input.ind-%var1461X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1461X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1461X) (_ bv0 32)))))
 ))
 (let (($x348 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1460X)))
 (= $x29 false)))
 ))
 (let (($x200 (and $x348 $x328)))
 (let (($x309 (= $x200 true)))
 (let ((?x306 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x317 (bvneg ?x306)))
 (let (($x267 (= ?x317 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x204 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x208 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x208)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x186)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x148)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (and $x179 $x185)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x17 $x198)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x102 $x78)))
 (let (($x139 (not $x167)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x196 $x157)))
 (let (($x145 (and (not $x100) $x139)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x153 $x174)))
 (let (($x178 (not $x107)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x171 $x112)))
 (let (($x163 (and (not $x31) $x178)))
 (let (($x245 (and (and (and (and (and (and $x163 $x145) $x197) $x188) $x175) $x207) $x202)))
 (let (($x246 (and $x245 $x209)))
 (let (($x191 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x120 (or false (or false (and (and true (or $x109 $x170)) (or $x151 $x191))))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x120)))
 (let (($x244 (and $x141 $x246)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x119 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x119 true)))
 (let (($x44 (= $x77 true)))
 (let (($x166 (= $x44 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (= $x114 true)))
 (let (($x5 (= $x101 true)))
 (let (($x105 (= $x5 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x173 (= (_ bv0 2) ?x79)))
 (let (($x104 (= $x173 true)))
 (let (($x158 (= $x104 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x156)))
 (let (($x135 (= ?x140 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x135 true)))
 (let (($x189 (= $x64 true)))
 (let (($x182 (= ?x140 input.dst.llvm-%n)))
 (let (($x8 (= $x182 true)))
 (let (($x52 (= $x8 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x116 (bvsub ?x187 ?x123)))
 (let (($x177 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x116) (bvult ?x187 ?x116))))
 (let (($x71 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x10 (ite $x71 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x80 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x58 (bvmul (_ bv4 64) ?x80)))
 (let ((?x41 ((_ extract 63 32) ?x58)))
 (let (($x74 (= ?x41 ?x10)))
 (let (($x23 (and $x74 $x177)))
 (let (($x66 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x152 (and $x66 $x23)))
 (let (($x82 (= true $x152)))
 (let (($x85 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (=> $x85 $x82)))
 (let (($x190 (= $x93 true)))
 (let (($x108 (= $x190 true)))
 (let (($x75 (= $x108 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x33 (= $x103 true)))
 (let (($x67 (= $x33 true)))
 (let (($x76 (= $x67 true)))
 (let (($x92 (= $x85 true)))
 (let (($x84 (= $x92 true)))
 (let (($x46 (= $x84 true)))
 (let (($x68 (and $x46 $x76)))
 (let (($x56 (and $x68 $x75)))
 (let (($x87 (and $x56 $x52)))
 (let (($x137 (and $x87 $x189)))
 (let (($x194 (and $x137 $x158)))
 (let (($x9 (and $x194 $x105)))
 (let (($x110 (and $x9 $x166)))
 (let (($x286 (and $x110 $x212)))
 (let (($x298 (and $x286 $x351)))
 (let (($x288 (and $x298 $x36)))
 (let (($x313 (and $x288 $x353)))
 (let (($x69 (and $x313 $x309)))
 (let (($x258 (and $x69 $x311)))
 (let (($x251 (and $x258 $x176)))
 (let (($x284 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and (not $x284) $x251)))
 (let (($x260 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x330 (and $x260 $x184)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x201 (and $x21 $x330)))
 (let (($x285 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x285 $x201)))
 (let (($x216 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x331 (bvadd ?x187 (_ bv3 32))))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x331)))
 (let (($x295 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x331)))
 (let (($x13 (or false (or false (and (and true (or $x282 $x295)) (or $x242 $x216))))))
 (let (($x224 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x43 (=> (and $x85 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x51 (and $x43 $x146)))
 (let (($x229 (=> $x51 $x303)))
 (not $x229))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x270 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x270 (_ bv0 32))))
 (let (($x47 (= $x352 true)))
 (let (($x228 (= $x47 true)))
 (let (($x39 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1491X)))
 (=> $x324 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1491X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1490X)))
 (= $x324 false)))
 ))
 (let (($x323 (and $x42 $x39)))
 (let (($x280 (= $x323 true)))
 (let (($x326 (forall ((input.ind-%var1485X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1485X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x299))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv2 32))) ?x129)))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv3 32))) ?x28)))
 (let ((?x86 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1485X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1485X)))
 (=> $x165 (= ?x86 ?x213)))))))))
 ))
 (let (($x97 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var1484X) (bvult input.ind-%var1484X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1484X)))
 (= $x165 $x275))))
 ))
 (let (($x25 (and $x97 $x326)))
 (let (($x199 (= $x25 true)))
 (let (($x111 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1479X)))
 (=> $x324 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1479X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1478X)))
 (= $x324 false)))
 ))
 (let (($x14 (and $x200 $x111)))
 (let (($x130 (= $x14 true)))
 (let ((?x317 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x267 (bvneg ?x317)))
 (let (($x215 (= ?x267 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x288 (= $x36 true)))
 (let (($x329 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x207)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x226)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (and $x222 $x179)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x188 $x148)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x102 $x78)))
 (let (($x139 (not $x167)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x157 $x100)))
 (let (($x219 (and (not $x206) $x139)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x153 $x174)))
 (let (($x178 (not $x107)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x160 $x61)))
 (let (($x196 (and (not $x37) $x178)))
 (let (($x246 (and (and (and (and (and (and $x196 $x219) $x197) $x159) $x185) $x175) $x172)))
 (let (($x244 (and $x246 $x252)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x171 (or false (or false (and (and true (or $x32 $x106)) (or $x98 $x81))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x171)))
 (let (($x253 (and $x31 $x244)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x119 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x119 true)))
 (let (($x44 (= $x77 true)))
 (let (($x166 (= $x44 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (= $x114 true)))
 (let (($x5 (= $x101 true)))
 (let (($x105 (= $x5 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x173 (= (_ bv0 2) ?x79)))
 (let (($x104 (= $x173 true)))
 (let (($x158 (= $x104 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x156)))
 (let (($x135 (= ?x140 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x135 true)))
 (let (($x189 (= $x64 true)))
 (let (($x182 (= ?x140 input.dst.llvm-%n)))
 (let (($x8 (= $x182 true)))
 (let (($x52 (= $x8 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x57 (bvsub ?x187 ?x123)))
 (let (($x177 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x57) (bvult ?x187 ?x57))))
 (let (($x71 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x10 (ite $x71 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x80 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x58 (bvmul (_ bv4 64) ?x80)))
 (let ((?x41 ((_ extract 63 32) ?x58)))
 (let (($x74 (= ?x41 ?x10)))
 (let (($x23 (and $x74 $x177)))
 (let (($x66 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x152 (and $x66 $x23)))
 (let (($x82 (= true $x152)))
 (let (($x95 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (=> $x95 $x82)))
 (let (($x190 (= $x93 true)))
 (let (($x108 (= $x190 true)))
 (let (($x75 (= $x108 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x33 (= $x103 true)))
 (let (($x67 (= $x33 true)))
 (let (($x76 (= $x67 true)))
 (let (($x92 (= $x95 true)))
 (let (($x84 (= $x92 true)))
 (let (($x46 (= $x84 true)))
 (let (($x68 (and $x46 $x76)))
 (let (($x56 (and $x68 $x75)))
 (let (($x87 (and $x56 $x52)))
 (let (($x137 (and $x87 $x189)))
 (let (($x194 (and $x137 $x158)))
 (let (($x9 (and $x194 $x105)))
 (let (($x110 (and $x9 $x166)))
 (let (($x204 (and $x110 $x286)))
 (let (($x40 (and $x204 $x298)))
 (let (($x306 (and $x40 $x288)))
 (let (($x345 (and $x306 $x313)))
 (let (($x99 (and $x345 $x130)))
 (let (($x6 (and $x99 $x199)))
 (let (($x338 (and $x6 $x280)))
 (let (($x113 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (and (not $x113) $x338)))
 (let (($x72 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (and $x72 $x53)))
 (let (($x337 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x217 (and $x337 $x38)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x335 (and $x15 $x217)))
 (let (($x227 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd ?x187 (_ bv3 32))))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x254 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x43 (or false (or false (and (and true (or $x261 $x254)) (or $x297 $x227))))))
 (let (($x285 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x43)))
 (let (($x241 (=> (and $x95 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x43)))
 (let (($x115 (and $x241 $x335)))
 (let (($x256 (=> $x115 $x228)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x270 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x270 (_ bv0 32))))
 (let (($x47 (= $x352 true)))
 (let (($x228 (= $x47 true)))
 (let (($x39 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1491X)))
 (=> $x324 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1491X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1490X)))
 (= $x324 false)))
 ))
 (let (($x323 (and $x42 $x39)))
 (let (($x280 (= $x323 true)))
 (let (($x326 (forall ((input.ind-%var1485X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1485X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x299))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv2 32))) ?x129)))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv3 32))) ?x28)))
 (let ((?x86 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1485X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1485X)))
 (=> $x165 (= ?x86 ?x213)))))))))
 ))
 (let (($x97 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var1484X) (bvult input.ind-%var1484X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1484X)))
 (= $x165 $x275))))
 ))
 (let (($x25 (and $x97 $x326)))
 (let (($x199 (= $x25 true)))
 (let (($x111 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1479X)))
 (=> $x324 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1479X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x324 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1478X)))
 (= $x324 false)))
 ))
 (let (($x14 (and $x200 $x111)))
 (let (($x130 (= $x14 true)))
 (let ((?x317 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x267 (bvneg ?x317)))
 (let (($x215 (= ?x267 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x288 (= $x36 true)))
 (let (($x329 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x207)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x226)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (and $x222 $x179)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x188 $x148)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x102 $x78)))
 (let (($x139 (not $x167)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x157 $x100)))
 (let (($x219 (and (not $x206) $x139)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x153 $x174)))
 (let (($x178 (not $x107)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x160 $x61)))
 (let (($x196 (and (not $x37) $x178)))
 (let (($x246 (and (and (and (and (and (and $x196 $x219) $x197) $x159) $x185) $x175) $x172)))
 (let (($x244 (and $x246 $x252)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x171 (or false (or false (and (and true (or $x32 $x106)) (or $x98 $x81))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x171)))
 (let (($x253 (and $x31 $x244)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x119 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x119 true)))
 (let (($x44 (= $x77 true)))
 (let (($x166 (= $x44 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (= $x114 true)))
 (let (($x5 (= $x101 true)))
 (let (($x105 (= $x5 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x173 (= (_ bv0 2) ?x79)))
 (let (($x104 (= $x173 true)))
 (let (($x158 (= $x104 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x156)))
 (let (($x135 (= ?x140 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x64 (= $x135 true)))
 (let (($x189 (= $x64 true)))
 (let (($x182 (= ?x140 input.dst.llvm-%n)))
 (let (($x8 (= $x182 true)))
 (let (($x52 (= $x8 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x57 (bvsub ?x187 ?x123)))
 (let (($x177 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x57) (bvult ?x187 ?x57))))
 (let (($x71 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x10 (ite $x71 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x80 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x58 (bvmul (_ bv4 64) ?x80)))
 (let ((?x41 ((_ extract 63 32) ?x58)))
 (let (($x74 (= ?x41 ?x10)))
 (let (($x23 (and $x74 $x177)))
 (let (($x66 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x152 (and $x66 $x23)))
 (let (($x82 (= true $x152)))
 (let (($x95 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (=> $x95 $x82)))
 (let (($x190 (= $x93 true)))
 (let (($x108 (= $x190 true)))
 (let (($x75 (= $x108 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x33 (= $x103 true)))
 (let (($x67 (= $x33 true)))
 (let (($x76 (= $x67 true)))
 (let (($x92 (= $x95 true)))
 (let (($x84 (= $x92 true)))
 (let (($x46 (= $x84 true)))
 (let (($x68 (and $x46 $x76)))
 (let (($x56 (and $x68 $x75)))
 (let (($x87 (and $x56 $x52)))
 (let (($x137 (and $x87 $x189)))
 (let (($x194 (and $x137 $x158)))
 (let (($x9 (and $x194 $x105)))
 (let (($x110 (and $x9 $x166)))
 (let (($x204 (and $x110 $x286)))
 (let (($x40 (and $x204 $x298)))
 (let (($x306 (and $x40 $x288)))
 (let (($x345 (and $x306 $x313)))
 (let (($x99 (and $x345 $x130)))
 (let (($x6 (and $x99 $x199)))
 (let (($x338 (and $x6 $x280)))
 (let (($x113 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (and (not $x113) $x338)))
 (let (($x72 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (and $x72 $x53)))
 (let (($x337 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x217 (and $x337 $x38)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x335 (and $x15 $x217)))
 (let (($x227 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd ?x187 (_ bv3 32))))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x254 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x43 (or false (or false (and (and true (or $x261 $x254)) (or $x297 $x227))))))
 (let (($x285 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x43)))
 (let (($x241 (=> (and $x95 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x43)))
 (let (($x115 (and $x241 $x335)))
 (let (($x256 (=> $x115 $x228)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x311 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x169 (bvule ?x311 (_ bv4294967294 32))))
 (let (($x62 (= $x169 true)))
 (let (($x283 (= $x62 true)))
 (let (($x243 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1509X)))
 (=> $x238 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1509X) (_ bv0 32)))))
 ))
 (let (($x184 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1508X)))
 (= $x238 false)))
 ))
 (let (($x332 (and $x184 $x243)))
 (let (($x289 (= $x332 true)))
 (let (($x251 (forall ((input.ind-%var1503X (_ BitVec 32)) )(let ((?x290 (bvadd (bvmul input.ind-%var1503X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x290))))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv2 32))) ?x362)))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv3 32))) ?x150)))
 (let ((?x42 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1503X)))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1503X)))
 (=> $x268 (= ?x42 ?x29)))))))))
 ))
 (let (($x326 (forall ((input.ind-%var1502X (_ BitVec 32)) )(let (($x136 (and (bvule (_ bv0 32) input.ind-%var1502X) (bvult input.ind-%var1502X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1502X)))
 (= $x268 $x136))))
 ))
 (let (($x303 (and $x326 $x251)))
 (let (($x229 (= $x303 true)))
 (let (($x247 (forall ((input.ind-%var1497X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1497X)))
 (=> $x238 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1497X) (_ bv0 32)))))
 ))
 (let (($x14 (forall ((input.ind-%var1496X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1496X)))
 (= $x238 false)))
 ))
 (let (($x341 (and $x14 $x247)))
 (let (($x299 (= $x341 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x267)))
 (let (($x353 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x301 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x36 (= $x301 true)))
 (let (($x288 (= $x36 true)))
 (let (($x306 (= $x288 true)))
 (let (($x274 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x40 (= $x298 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x209 (bvsub ?x187 ?x123)))
 (let (($x207 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x209) (bvult ?x187 ?x209))))
 (let (($x208 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x198 (ite $x208 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x179 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x148 (bvmul (_ bv4 64) ?x179)))
 (let ((?x185 ((_ extract 63 32) ?x148)))
 (let (($x175 (= ?x185 ?x198)))
 (let (($x252 (and $x175 $x207)))
 (let (($x222 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x244 (and $x222 $x252)))
 (let (($x253 (= true $x244)))
 (let (($x30 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (=> $x30 $x253)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x197 (= $x133 true)))
 (let (($x202 (= $x197 true)))
 (let (($x218 (= $x202 true)))
 (let (($x167 (= $x30 true)))
 (let (($x139 (= $x167 true)))
 (let (($x219 (= $x139 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x61)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x31)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (and $x191 $x81)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x151 $x193)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x77 $x44)))
 (let (($x110 (not $x166)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x105 $x9)))
 (let (($x109 (and (not $x119) $x110)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x104 $x158)))
 (let (($x114 (not $x194)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x93 $x190)))
 (let (($x5 (and (not $x173) $x114)))
 (let (($x196 (and (and (and (and (and (and $x5 $x109) $x170) $x106) $x120) $x171) $x160)))
 (let (($x157 (and $x196 $x37)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x137 (or false (or false (and (and true (or $x156 $x140)) (or $x52 $x87))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x137)))
 (let (($x100 (and $x79 $x157)))
 (let (($x206 (= $x100 true)))
 (let (($x145 (= $x206 true)))
 (let (($x102 (= $x145 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x73 (= $x7 true)))
 (let (($x177 (= $x73 true)))
 (let (($x23 (= $x177 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x10 (= (_ bv0 2) ?x24)))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let ((?x67 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x67)))
 (let (($x126 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (= $x126 true)))
 (let (($x58 (= $x80 true)))
 (let (($x68 (= ?x76 input.dst.llvm-%n)))
 (let (($x168 (= $x68 true)))
 (let (($x147 (= $x168 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x84 true)))
 (let (($x16 (= $x46 true)))
 (let (($x103 (= $x16 true)))
 (let (($x66 (and $x103 $x147)))
 (let (($x41 (and $x66 $x58)))
 (let (($x57 (and $x41 $x116)))
 (let (($x152 (and $x57 $x23)))
 (let (($x78 (and $x152 $x102)))
 (let (($x186 (and $x78 $x219)))
 (let (($x159 (and $x186 $x218)))
 (let (($x329 (and $x159 $x204)))
 (let (($x211 (and $x329 $x40)))
 (let (($x317 (and $x211 $x306)))
 (let (($x348 (and $x317 $x345)))
 (let (($x327 (and $x348 $x299)))
 (let (($x343 (and $x327 $x229)))
 (let (($x363 (and $x343 $x289)))
 (let (($x162 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and (not $x162) $x363)))
 (let (($x284 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (and $x284 $x19)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x248 (and $x125 $x69)))
 (let (($x360 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x127 (and $x360 $x248)))
 (let (($x13 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x187 (_ bv3 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x242 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x241 (or false (or false (and (and true (or $x291 $x242)) (or $x255 $x13))))))
 (let (($x15 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x241)))
 (let (($x304 (=> (and $x30 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x241)))
 (let (($x232 (and $x304 $x127)))
 (let (($x49 (=> $x232 $x283)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x311 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x169 (bvule ?x311 (_ bv4294967294 32))))
 (let (($x62 (= $x169 true)))
 (let (($x283 (= $x62 true)))
 (let (($x243 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1509X)))
 (=> $x238 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1509X) (_ bv0 32)))))
 ))
 (let (($x184 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1508X)))
 (= $x238 false)))
 ))
 (let (($x332 (and $x184 $x243)))
 (let (($x289 (= $x332 true)))
 (let (($x251 (forall ((input.ind-%var1503X (_ BitVec 32)) )(let ((?x290 (bvadd (bvmul input.ind-%var1503X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x290))))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv2 32))) ?x362)))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv3 32))) ?x150)))
 (let ((?x42 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1503X)))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1503X)))
 (=> $x268 (= ?x42 ?x29)))))))))
 ))
 (let (($x326 (forall ((input.ind-%var1502X (_ BitVec 32)) )(let (($x136 (and (bvule (_ bv0 32) input.ind-%var1502X) (bvult input.ind-%var1502X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1502X)))
 (= $x268 $x136))))
 ))
 (let (($x303 (and $x326 $x251)))
 (let (($x229 (= $x303 true)))
 (let (($x247 (forall ((input.ind-%var1497X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1497X)))
 (=> $x238 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1497X) (_ bv0 32)))))
 ))
 (let (($x14 (forall ((input.ind-%var1496X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1496X)))
 (= $x238 false)))
 ))
 (let (($x341 (and $x14 $x247)))
 (let (($x299 (= $x341 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x267)))
 (let (($x353 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x301 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x36 (= $x301 true)))
 (let (($x288 (= $x36 true)))
 (let (($x306 (= $x288 true)))
 (let (($x274 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x351 (= $x274 true)))
 (let (($x298 (= $x351 true)))
 (let (($x40 (= $x298 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x209 (bvsub ?x187 ?x123)))
 (let (($x207 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x209) (bvult ?x187 ?x209))))
 (let (($x208 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x198 (ite $x208 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x179 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x148 (bvmul (_ bv4 64) ?x179)))
 (let ((?x185 ((_ extract 63 32) ?x148)))
 (let (($x175 (= ?x185 ?x198)))
 (let (($x252 (and $x175 $x207)))
 (let (($x222 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x244 (and $x222 $x252)))
 (let (($x253 (= true $x244)))
 (let (($x30 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (=> $x30 $x253)))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x197 (= $x133 true)))
 (let (($x202 (= $x197 true)))
 (let (($x218 (= $x202 true)))
 (let (($x167 (= $x30 true)))
 (let (($x139 (= $x167 true)))
 (let (($x219 (= $x139 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x61)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x31)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (and $x191 $x81)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x151 $x193)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x77 $x44)))
 (let (($x110 (not $x166)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x105 $x9)))
 (let (($x109 (and (not $x119) $x110)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x104 $x158)))
 (let (($x114 (not $x194)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x93 $x190)))
 (let (($x5 (and (not $x173) $x114)))
 (let (($x196 (and (and (and (and (and (and $x5 $x109) $x170) $x106) $x120) $x171) $x160)))
 (let (($x157 (and $x196 $x37)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x137 (or false (or false (and (and true (or $x156 $x140)) (or $x52 $x87))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x137)))
 (let (($x100 (and $x79 $x157)))
 (let (($x206 (= $x100 true)))
 (let (($x145 (= $x206 true)))
 (let (($x102 (= $x145 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x73 (= $x7 true)))
 (let (($x177 (= $x73 true)))
 (let (($x23 (= $x177 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x10 (= (_ bv0 2) ?x24)))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let ((?x67 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x67)))
 (let (($x126 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (= $x126 true)))
 (let (($x58 (= $x80 true)))
 (let (($x68 (= ?x76 input.dst.llvm-%n)))
 (let (($x168 (= $x68 true)))
 (let (($x147 (= $x168 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x84 true)))
 (let (($x16 (= $x46 true)))
 (let (($x103 (= $x16 true)))
 (let (($x66 (and $x103 $x147)))
 (let (($x41 (and $x66 $x58)))
 (let (($x57 (and $x41 $x116)))
 (let (($x152 (and $x57 $x23)))
 (let (($x78 (and $x152 $x102)))
 (let (($x186 (and $x78 $x219)))
 (let (($x159 (and $x186 $x218)))
 (let (($x329 (and $x159 $x204)))
 (let (($x211 (and $x329 $x40)))
 (let (($x317 (and $x211 $x306)))
 (let (($x348 (and $x317 $x345)))
 (let (($x327 (and $x348 $x299)))
 (let (($x343 (and $x327 $x229)))
 (let (($x363 (and $x343 $x289)))
 (let (($x162 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and (not $x162) $x363)))
 (let (($x284 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (and $x284 $x19)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x248 (and $x125 $x69)))
 (let (($x360 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x127 (and $x360 $x248)))
 (let (($x13 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x187 (_ bv3 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x242 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x241 (or false (or false (and (and true (or $x291 $x242)) (or $x255 $x13))))))
 (let (($x15 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x241)))
 (let (($x304 (=> (and $x30 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x241)))
 (let (($x232 (and $x304 $x127)))
 (let (($x49 (=> $x232 $x283)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x164 (bvsge ?x199 (_ bv0 32))))
 (let (($x128 (= $x164 true)))
 (let (($x319 (= $x128 true)))
 (let (($x275 (forall ((input.ind-%var1527X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1527X)))
 (=> $x134 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1527X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var1526X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1526X)))
 (= $x134 false)))
 ))
 (let (($x51 (and $x53 $x275)))
 (let (($x225 (= $x51 true)))
 (let (($x338 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let ((?x39 (bvadd (bvmul input.ind-%var1521X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x39))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv2 32))) ?x165)))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv3 32))) ?x203)))
 (let ((?x184 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1521X)))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1521X)))
 (=> $x300 (= ?x184 ?x324)))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var1520X) (bvult input.ind-%var1520X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1520X)))
 (= $x300 $x271))))
 ))
 (let (($x228 (and $x251 $x338)))
 (let (($x256 (= $x228 true)))
 (let (($x323 (forall ((input.ind-%var1515X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1515X)))
 (=> $x134 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1515X) (_ bv0 32)))))
 ))
 (let (($x341 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1514X)))
 (= $x134 false)))
 ))
 (let (($x263 (and $x341 $x323)))
 (let (($x290 (= $x263 true)))
 (let ((?x215 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x353 (bvneg ?x215)))
 (let (($x313 (= ?x353 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x345 (= $x313 true)))
 (let (($x348 (= $x345 true)))
 (let (($x36 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x288 (= $x36 true)))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x351 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (= $x351 true)))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x209 (bvsub ?x187 ?x123)))
 (let (($x252 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x209) (bvult ?x187 ?x209))))
 (let (($x198 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x175 (ite $x198 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x148 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x185 (bvmul (_ bv4 64) ?x148)))
 (let ((?x208 ((_ extract 63 32) ?x185)))
 (let (($x226 (= ?x208 ?x175)))
 (let (($x244 (and $x226 $x252)))
 (let (($x17 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x253 (and $x17 $x244)))
 (let (($x276 (= true $x253)))
 (let (($x90 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x212 (=> $x90 $x276)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x202 (= $x197 true)))
 (let (($x218 (= $x202 true)))
 (let (($x159 (= $x218 true)))
 (let (($x139 (= $x90 true)))
 (let (($x219 (= $x139 true)))
 (let (($x186 (= $x219 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x171)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x107)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x174 $x191)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x106 $x98)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x77 $x44)))
 (let (($x110 (not $x166)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x9 $x119)))
 (let (($x163 (and (not $x12) $x110)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x104 $x158)))
 (let (($x114 (not $x194)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x75 $x138)))
 (let (($x105 (and (not $x101) $x114)))
 (let (($x157 (and (and (and (and (and (and $x105 $x163) $x170) $x32) $x81) $x120) $x141)))
 (let (($x100 (and $x157 $x178)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x93 (or false (or false (and (and true (or $x182 $x8)) (or $x135 $x64))))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x206 (and $x173 $x100)))
 (let (($x145 (= $x206 true)))
 (let (($x102 (= $x145 true)))
 (let (($x78 (= $x102 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x73 (= $x7 true)))
 (let (($x177 (= $x73 true)))
 (let (($x23 (= $x177 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x10 (= (_ bv0 2) ?x24)))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let ((?x67 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x67)))
 (let (($x126 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (= $x126 true)))
 (let (($x58 (= $x80 true)))
 (let (($x68 (= ?x76 input.dst.llvm-%n)))
 (let (($x168 (= $x68 true)))
 (let (($x147 (= $x168 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x84 true)))
 (let (($x16 (= $x46 true)))
 (let (($x103 (= $x16 true)))
 (let (($x66 (and $x103 $x147)))
 (let (($x41 (and $x66 $x58)))
 (let (($x57 (and $x41 $x116)))
 (let (($x152 (and $x57 $x23)))
 (let (($x167 (and $x152 $x78)))
 (let (($x133 (and $x167 $x186)))
 (let (($x245 (and $x133 $x159)))
 (let (($x274 (and $x245 $x329)))
 (let (($x301 (and $x274 $x211)))
 (let (($x267 (and $x301 $x317)))
 (let (($x200 (and $x267 $x348)))
 (let (($x89 (and $x200 $x290)))
 (let (($x270 (and $x89 $x256)))
 (let (($x325 (and $x270 $x225)))
 (let (($x181 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and (not $x181) $x325)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x113 $x129)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x314 (and $x260 $x99)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x180 (and $x21 $x314)))
 (let (($x43 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x242 (bvadd ?x187 (_ bv3 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x242)))
 (let (($x297 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x242)))
 (let (($x304 (or false (or false (and (and true (or $x279 $x297)) (or $x224 $x43))))))
 (let (($x360 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x304)))
 (let (($x331 (=> (and $x90 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x304)))
 (let (($x201 (and $x331 $x180)))
 (let (($x183 (=> $x201 $x319)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x164 (bvsge ?x199 (_ bv0 32))))
 (let (($x128 (= $x164 true)))
 (let (($x319 (= $x128 true)))
 (let (($x275 (forall ((input.ind-%var1527X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1527X)))
 (=> $x134 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1527X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var1526X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1526X)))
 (= $x134 false)))
 ))
 (let (($x51 (and $x53 $x275)))
 (let (($x225 (= $x51 true)))
 (let (($x338 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let ((?x39 (bvadd (bvmul input.ind-%var1521X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x39))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv2 32))) ?x165)))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv3 32))) ?x203)))
 (let ((?x184 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1521X)))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1521X)))
 (=> $x300 (= ?x184 ?x324)))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var1520X) (bvult input.ind-%var1520X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1520X)))
 (= $x300 $x271))))
 ))
 (let (($x228 (and $x251 $x338)))
 (let (($x256 (= $x228 true)))
 (let (($x323 (forall ((input.ind-%var1515X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1515X)))
 (=> $x134 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1515X) (_ bv0 32)))))
 ))
 (let (($x341 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1514X)))
 (= $x134 false)))
 ))
 (let (($x263 (and $x341 $x323)))
 (let (($x290 (= $x263 true)))
 (let ((?x215 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x353 (bvneg ?x215)))
 (let (($x313 (= ?x353 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x345 (= $x313 true)))
 (let (($x348 (= $x345 true)))
 (let (($x36 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x288 (= $x36 true)))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x351 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (= $x351 true)))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x209 (bvsub ?x187 ?x123)))
 (let (($x252 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x209) (bvult ?x187 ?x209))))
 (let (($x198 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x175 (ite $x198 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x148 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x185 (bvmul (_ bv4 64) ?x148)))
 (let ((?x208 ((_ extract 63 32) ?x185)))
 (let (($x226 (= ?x208 ?x175)))
 (let (($x244 (and $x226 $x252)))
 (let (($x17 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x253 (and $x17 $x244)))
 (let (($x276 (= true $x253)))
 (let (($x90 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x212 (=> $x90 $x276)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x202 (= $x197 true)))
 (let (($x218 (= $x202 true)))
 (let (($x159 (= $x218 true)))
 (let (($x139 (= $x90 true)))
 (let (($x219 (= $x139 true)))
 (let (($x186 (= $x219 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x171)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x107)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x174 $x191)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x106 $x98)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x77 $x44)))
 (let (($x110 (not $x166)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x9 $x119)))
 (let (($x163 (and (not $x12) $x110)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x104 $x158)))
 (let (($x114 (not $x194)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x75 $x138)))
 (let (($x105 (and (not $x101) $x114)))
 (let (($x157 (and (and (and (and (and (and $x105 $x163) $x170) $x32) $x81) $x120) $x141)))
 (let (($x100 (and $x157 $x178)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x93 (or false (or false (and (and true (or $x182 $x8)) (or $x135 $x64))))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x206 (and $x173 $x100)))
 (let (($x145 (= $x206 true)))
 (let (($x102 (= $x145 true)))
 (let (($x78 (= $x102 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x73 (= $x7 true)))
 (let (($x177 (= $x73 true)))
 (let (($x23 (= $x177 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x10 (= (_ bv0 2) ?x24)))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let ((?x67 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x67)))
 (let (($x126 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (= $x126 true)))
 (let (($x58 (= $x80 true)))
 (let (($x68 (= ?x76 input.dst.llvm-%n)))
 (let (($x168 (= $x68 true)))
 (let (($x147 (= $x168 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x84 true)))
 (let (($x16 (= $x46 true)))
 (let (($x103 (= $x16 true)))
 (let (($x66 (and $x103 $x147)))
 (let (($x41 (and $x66 $x58)))
 (let (($x57 (and $x41 $x116)))
 (let (($x152 (and $x57 $x23)))
 (let (($x167 (and $x152 $x78)))
 (let (($x133 (and $x167 $x186)))
 (let (($x245 (and $x133 $x159)))
 (let (($x274 (and $x245 $x329)))
 (let (($x301 (and $x274 $x211)))
 (let (($x267 (and $x301 $x317)))
 (let (($x200 (and $x267 $x348)))
 (let (($x89 (and $x200 $x290)))
 (let (($x270 (and $x89 $x256)))
 (let (($x325 (and $x270 $x225)))
 (let (($x181 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and (not $x181) $x325)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x113 $x129)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x314 (and $x260 $x99)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x180 (and $x21 $x314)))
 (let (($x43 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x242 (bvadd ?x187 (_ bv3 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x242)))
 (let (($x297 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x242)))
 (let (($x304 (or false (or false (and (and true (or $x279 $x297)) (or $x224 $x43))))))
 (let (($x360 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x304)))
 (let (($x331 (=> (and $x90 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x304)))
 (let (($x201 (and $x331 $x180)))
 (let (($x183 (=> $x201 $x319)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (bvule ?x229 input.dst.llvm-%n)))
 (let (($x220 (= $x82 true)))
 (let (($x47 (= $x220 true)))
 (let (($x136 (forall ((input.ind-%var1545X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1545X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1545X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1544X)))
 (= $x213 false)))
 ))
 (let (($x115 (and $x19 $x136)))
 (let (($x236 (= $x115 true)))
 (let (($x363 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1539X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x357 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x268)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x357)))
 (let ((?x53 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1539X)))
 (let (($x25 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1539X)))
 (=> $x25 (= ?x53 ?x238)))))))))
 ))
 (let (($x338 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) input.ind-%var1538X) (bvult input.ind-%var1538X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x25 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1538X)))
 (= $x25 $x328))))
 ))
 (let (($x283 (and $x338 $x363)))
 (let (($x49 (= $x283 true)))
 (let (($x332 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1533X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1533X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1532X)))
 (= $x213 false)))
 ))
 (let (($x124 (and $x263 $x332)))
 (let (($x39 (= $x124 true)))
 (let ((?x353 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x313 (bvneg ?x353)))
 (let (($x345 (= ?x313 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x348 (= $x345 true)))
 (let (($x200 (= $x348 true)))
 (let ((?x67 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x67)))
 (let (($x306 (= ?x76 input.dst.llvm-%n)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x40 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x198 (bvsub ?x187 ?x123)))
 (let (($x209 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x198) (bvult ?x187 ?x198))))
 (let (($x148 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x185 (ite $x148 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x222 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x222)))
 (let ((?x179 ((_ extract 63 32) ?x17)))
 (let (($x208 (= ?x179 ?x185)))
 (let (($x246 (and $x208 $x209)))
 (let (($x245 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x207 (and $x245 $x246)))
 (let (($x252 (= true $x207)))
 (let (($x20 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (=> $x20 $x252)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x186 (= $x219 true)))
 (let (($x133 (= $x186 true)))
 (let (($x197 (= $x133 true)))
 (let (($x102 (= $x20 true)))
 (let (($x78 (= $x102 true)))
 (let (($x167 (= $x78 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x98)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x151)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x160)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x170 $x153)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x112 $x32)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x9 $x119)))
 (let (($x109 (not $x12)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x194 $x114)))
 (let (($x44 (and (not $x105) $x109)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x75 $x138)))
 (let (($x5 (not $x101)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x177 $x23)))
 (let (($x158 (and (not $x173) $x5)))
 (let (($x141 (and (and (and (and (and (and $x158 $x44) $x110) $x31) $x196) $x174) $x191)))
 (let (($x157 (and $x141 $x81)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x137 (or false (or false (and (and true (or $x190 $x140)) (or $x52 $x87))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x137)))
 (let (($x171 (and $x93 $x157)))
 (let (($x178 (= $x171 true)))
 (let (($x100 (= $x178 true)))
 (let (($x206 (= $x100 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let (($x57 (= $x116 true)))
 (let ((?x80 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x58 (= (_ bv0 2) ?x80)))
 (let (($x41 (= $x58 true)))
 (let (($x71 (= $x41 true)))
 (let (($x68 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (= $x68 true)))
 (let (($x147 (= $x168 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x84 true)))
 (let (($x16 (= $x46 true)))
 (let (($x103 (= $x16 true)))
 (let (($x66 (and $x103 $x147)))
 (let (($x24 (and $x66 $x71)))
 (let (($x7 (and $x24 $x57)))
 (let (($x145 (and $x7 $x206)))
 (let (($x139 (and $x145 $x167)))
 (let (($x202 (and $x139 $x197)))
 (let (($x286 (and $x202 $x212)))
 (let (($x298 (and $x286 $x351)))
 (let (($x288 (and $x298 $x36)))
 (let (($x215 (and $x288 $x267)))
 (let (($x14 (and $x215 $x200)))
 (let (($x142 (and $x14 $x39)))
 (let (($x311 (and $x142 $x49)))
 (let (($x352 (and $x311 $x236)))
 (let (($x330 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x362 (and (not $x330) $x352)))
 (let (($x162 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x162 $x362)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x72 $x327)))
 (let (($x337 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x143 (and $x337 $x292)))
 (let (($x241 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x297 (bvadd ?x187 (_ bv3 32))))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x297)))
 (let (($x255 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x297)))
 (let (($x331 (or false (or false (and (and true (or $x216 $x255)) (or $x285 $x241))))))
 (let (($x21 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x331)))
 (let (($x295 (=> (and $x20 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x331)))
 (let (($x217 (and $x295 $x143)))
 (let (($x308 (=> $x217 $x47)))
 (not $x308))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (bvule ?x229 input.dst.llvm-%n)))
 (let (($x220 (= $x82 true)))
 (let (($x47 (= $x220 true)))
 (let (($x136 (forall ((input.ind-%var1545X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1545X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1545X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1544X)))
 (= $x213 false)))
 ))
 (let (($x115 (and $x19 $x136)))
 (let (($x236 (= $x115 true)))
 (let (($x363 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1539X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x357 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x268)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x357)))
 (let ((?x53 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1539X)))
 (let (($x25 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1539X)))
 (=> $x25 (= ?x53 ?x238)))))))))
 ))
 (let (($x338 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) input.ind-%var1538X) (bvult input.ind-%var1538X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x25 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1538X)))
 (= $x25 $x328))))
 ))
 (let (($x283 (and $x338 $x363)))
 (let (($x49 (= $x283 true)))
 (let (($x332 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1533X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1533X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var1532X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1532X)))
 (= $x213 false)))
 ))
 (let (($x124 (and $x263 $x332)))
 (let (($x39 (= $x124 true)))
 (let ((?x353 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x313 (bvneg ?x353)))
 (let (($x345 (= ?x313 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x348 (= $x345 true)))
 (let (($x200 (= $x348 true)))
 (let ((?x67 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x67)))
 (let (($x306 (= ?x76 input.dst.llvm-%n)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x40 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x351 (= $x274 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x198 (bvsub ?x187 ?x123)))
 (let (($x209 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x198) (bvult ?x187 ?x198))))
 (let (($x148 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x185 (ite $x148 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x222 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x17 (bvmul (_ bv4 64) ?x222)))
 (let ((?x179 ((_ extract 63 32) ?x17)))
 (let (($x208 (= ?x179 ?x185)))
 (let (($x246 (and $x208 $x209)))
 (let (($x245 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x207 (and $x245 $x246)))
 (let (($x252 (= true $x207)))
 (let (($x20 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (=> $x20 $x252)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let (($x212 (= $x276 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x186 (= $x219 true)))
 (let (($x133 (= $x186 true)))
 (let (($x197 (= $x133 true)))
 (let (($x102 (= $x20 true)))
 (let (($x78 (= $x102 true)))
 (let (($x167 (= $x78 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x98)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x151)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x160)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x170 $x153)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x112 $x32)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x9 $x119)))
 (let (($x109 (not $x12)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x194 $x114)))
 (let (($x44 (and (not $x105) $x109)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x75 $x138)))
 (let (($x5 (not $x101)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x177 $x23)))
 (let (($x158 (and (not $x173) $x5)))
 (let (($x141 (and (and (and (and (and (and $x158 $x44) $x110) $x31) $x196) $x174) $x191)))
 (let (($x157 (and $x141 $x81)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x137 (or false (or false (and (and true (or $x190 $x140)) (or $x52 $x87))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x137)))
 (let (($x171 (and $x93 $x157)))
 (let (($x178 (= $x171 true)))
 (let (($x100 (= $x178 true)))
 (let (($x206 (= $x100 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let (($x57 (= $x116 true)))
 (let ((?x80 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x58 (= (_ bv0 2) ?x80)))
 (let (($x41 (= $x58 true)))
 (let (($x71 (= $x41 true)))
 (let (($x68 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (= $x68 true)))
 (let (($x147 (= $x168 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x84 true)))
 (let (($x16 (= $x46 true)))
 (let (($x103 (= $x16 true)))
 (let (($x66 (and $x103 $x147)))
 (let (($x24 (and $x66 $x71)))
 (let (($x7 (and $x24 $x57)))
 (let (($x145 (and $x7 $x206)))
 (let (($x139 (and $x145 $x167)))
 (let (($x202 (and $x139 $x197)))
 (let (($x286 (and $x202 $x212)))
 (let (($x298 (and $x286 $x351)))
 (let (($x288 (and $x298 $x36)))
 (let (($x215 (and $x288 $x267)))
 (let (($x14 (and $x215 $x200)))
 (let (($x142 (and $x14 $x39)))
 (let (($x311 (and $x142 $x49)))
 (let (($x352 (and $x311 $x236)))
 (let (($x330 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x362 (and (not $x330) $x352)))
 (let (($x162 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x162 $x362)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x72 $x327)))
 (let (($x337 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x143 (and $x337 $x292)))
 (let (($x241 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x297 (bvadd ?x187 (_ bv3 32))))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x297)))
 (let (($x255 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x297)))
 (let (($x331 (or false (or false (and (and true (or $x216 $x255)) (or $x285 $x241))))))
 (let (($x21 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x331)))
 (let (($x295 (=> (and $x20 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x331)))
 (let (($x217 (and $x295 $x143)))
 (let (($x308 (=> $x217 $x47)))
 (not $x308))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (forall ((input.ind-%var1571X (_ BitVec 32)) )(let ((?x275 (bvadd (bvmul input.ind-%var1571X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x255 (bvadd ?x187 (_ bv3 32))))
 (let ((?x118 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x187 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x45 (store ?x118 (bvadd ?x187 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x312 (store ?x45 (bvadd ?x187 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x239 (store ?x312 ?x255 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x339 (concat (select ?x239 (bvadd ?x275 (_ bv2 32))) (concat (select ?x239 (bvadd ?x275 (_ bv1 32))) (select ?x239 ?x275)))))
 (let ((?x19 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1571X)))
 (let (($x60 (= input.ind-%var1571X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x315 (= (ite $x60 input.spec-%var-i-0.L3%6%bbentry ?x19) (concat (select ?x239 (bvadd ?x275 (_ bv3 32))) ?x339))))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1571X)))
 (let (($x316 (or $x303 $x60)))
 (=> $x316 $x315))))))))))))))))
 ))
 (let (($x35 (forall ((input.ind-%var1570X (_ BitVec 32)) )(let (($x238 (bvule (_ bv0 32) input.ind-%var1570X)))
 (let (($x91 (and $x238 (bvult input.ind-%var1570X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x60 (= input.ind-%var1570X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1570X)))
 (let (($x316 (or $x303 $x60)))
 (= $x316 $x91)))))))
 ))
 (let (($x250 (and $x35 $x144)))
 (let (($x256 (= true true)))
 (let (($x259 (and $x256 $x250)))
 (let (($x249 (= $x259 true)))
 (let (($x271 (forall ((input.ind-%var1563X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1563X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1563X) (_ bv0 32)))))
 ))
 (let (($x129 (forall ((input.ind-%var1562X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1562X)))
 (= $x29 false)))
 ))
 (let (($x232 (and $x129 $x271)))
 (let (($x59 (= $x232 true)))
 (let (($x325 (forall ((input.ind-%var1557X (_ BitVec 32)) )(let ((?x275 (bvadd (bvmul input.ind-%var1557X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x275))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv2 32))) ?x300)))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv3 32))) ?x233)))
 (let ((?x19 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1557X)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1557X)))
 (=> $x303 (= ?x19 ?x134)))))))))
 ))
 (let (($x363 (forall ((input.ind-%var1556X (_ BitVec 32)) )(let (($x238 (bvule (_ bv0 32) input.ind-%var1556X)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1556X)))
 (= $x303 (and $x238 (bvult input.ind-%var1556X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x319 (and $x363 $x325)))
 (let (($x183 (= $x319 true)))
 (let (($x51 (forall ((input.ind-%var1551X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1551X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1551X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1550X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1550X)))
 (= $x29 false)))
 ))
 (let (($x258 (and $x124 $x51)))
 (let (($x243 (= $x258 true)))
 (let ((?x313 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x345 (bvneg ?x313)))
 (let (($x348 (= ?x345 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x348 true)))
 (let (($x14 (= $x200 true)))
 (let ((?x306 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x317 (= (_ bv0 2) ?x306)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x252 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x222 (bvsub ?x187 ?x123)))
 (let (($x185 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x222) (bvult ?x187 ?x222))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x245 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x197 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x202 (bvmul (_ bv4 64) ?x197)))
 (let ((?x218 ((_ extract 63 32) ?x202)))
 (let (($x188 (= ?x218 ?x245)))
 (let (($x208 (and $x188 $x185)))
 (let (($x186 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x175 (and $x186 $x208)))
 (let (($x198 (= true $x175)))
 (let (($x18 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (=> $x18 $x198)))
 (let (($x172 (= $x226 true)))
 (let (($x209 (= $x172 true)))
 (let (($x246 (= $x209 true)))
 (let (($x206 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x145 (= $x206 true)))
 (let (($x102 (= $x145 true)))
 (let (($x78 (= $x102 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x157 (= $x81 true)))
 (let (($x171 (= $x157 true)))
 (let (($x178 (= $x171 true)))
 (let (($x107 (= $x18 true)))
 (let (($x151 (= $x107 true)))
 (let (($x191 (= $x151 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x110)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x61)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x77)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (and $x105 $x9)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x114 $x119)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x177 $x23)))
 (let (($x104 (not $x173)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x189 $x137)))
 (let (($x138 (and (not $x93) $x104)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x182 $x8)))
 (let (($x87 (not $x52)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x66 $x126)))
 (let (($x64 (and (not $x140) $x87)))
 (let (($x160 (and (and (and (and (and (and $x64 $x138) $x5) $x194) $x12) $x44) $x166)))
 (let (($x153 (and $x160 $x193)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x79 (or false (or false (and (and true (or $x71 $x24)) (or $x116 $x57))))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x32 (and $x190 $x153)))
 (let (($x196 (= $x32 true)))
 (let (($x37 (= $x196 true)))
 (let (($x106 (= $x37 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x84)))
 (let (($x67 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x67 true)))
 (let (($x68 (= $x76 true)))
 (let (($x16 (= ?x46 input.dst.llvm-%n)))
 (let (($x103 (= $x16 true)))
 (let (($x33 (= $x103 true)))
 (let (($x168 (and $x33 $x68)))
 (let (($x174 (and $x168 $x106)))
 (let (($x141 (and $x174 $x191)))
 (let (($x100 (and $x141 $x178)))
 (let (($x167 (and $x100 $x78)))
 (let (($x207 (and $x167 $x246)))
 (let (($x212 (and $x207 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x36 (and $x351 $x301)))
 (let (($x353 (and $x36 $x215)))
 (let (($x341 (and $x353 $x14)))
 (let (($x302 (and $x341 $x243)))
 (let (($x199 (and $x302 $x183)))
 (let (($x169 (and $x199 $x59)))
 (let (($x38 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x38) $x169)))
 (let (($x181 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (and $x181 $x165)))
 (let (($x284 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x176 (and $x284 $x89)))
 (let (($x125 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x125 $x176)))
 (let (($x304 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd ?x187 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x224 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x295 (or false (or false (and (and true (or $x227 $x224)) (or $x15 $x304))))))
 (let (($x337 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x295)))
 (let (($x254 (=> (and $x18 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x295)))
 (let (($x248 (and $x254 $x132)))
 (let (($x55 (=> $x248 $x249)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (forall ((input.ind-%var1571X (_ BitVec 32)) )(let ((?x275 (bvadd (bvmul input.ind-%var1571X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x255 (bvadd ?x187 (_ bv3 32))))
 (let ((?x118 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x187 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x45 (store ?x118 (bvadd ?x187 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x312 (store ?x45 (bvadd ?x187 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x239 (store ?x312 ?x255 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x339 (concat (select ?x239 (bvadd ?x275 (_ bv2 32))) (concat (select ?x239 (bvadd ?x275 (_ bv1 32))) (select ?x239 ?x275)))))
 (let ((?x19 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1571X)))
 (let (($x60 (= input.ind-%var1571X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x315 (= (ite $x60 input.spec-%var-i-0.L3%6%bbentry ?x19) (concat (select ?x239 (bvadd ?x275 (_ bv3 32))) ?x339))))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1571X)))
 (let (($x316 (or $x303 $x60)))
 (=> $x316 $x315))))))))))))))))
 ))
 (let (($x35 (forall ((input.ind-%var1570X (_ BitVec 32)) )(let (($x238 (bvule (_ bv0 32) input.ind-%var1570X)))
 (let (($x91 (and $x238 (bvult input.ind-%var1570X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x60 (= input.ind-%var1570X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1570X)))
 (let (($x316 (or $x303 $x60)))
 (= $x316 $x91)))))))
 ))
 (let (($x250 (and $x35 $x144)))
 (let (($x256 (= true true)))
 (let (($x259 (and $x256 $x250)))
 (let (($x249 (= $x259 true)))
 (let (($x271 (forall ((input.ind-%var1563X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1563X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1563X) (_ bv0 32)))))
 ))
 (let (($x129 (forall ((input.ind-%var1562X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1562X)))
 (= $x29 false)))
 ))
 (let (($x232 (and $x129 $x271)))
 (let (($x59 (= $x232 true)))
 (let (($x325 (forall ((input.ind-%var1557X (_ BitVec 32)) )(let ((?x275 (bvadd (bvmul input.ind-%var1557X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x275))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv2 32))) ?x300)))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x275 (_ bv3 32))) ?x233)))
 (let ((?x19 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1557X)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1557X)))
 (=> $x303 (= ?x19 ?x134)))))))))
 ))
 (let (($x363 (forall ((input.ind-%var1556X (_ BitVec 32)) )(let (($x238 (bvule (_ bv0 32) input.ind-%var1556X)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1556X)))
 (= $x303 (and $x238 (bvult input.ind-%var1556X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x319 (and $x363 $x325)))
 (let (($x183 (= $x319 true)))
 (let (($x51 (forall ((input.ind-%var1551X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1551X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1551X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1550X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1550X)))
 (= $x29 false)))
 ))
 (let (($x258 (and $x124 $x51)))
 (let (($x243 (= $x258 true)))
 (let ((?x313 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x345 (bvneg ?x313)))
 (let (($x348 (= ?x345 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x348 true)))
 (let (($x14 (= $x200 true)))
 (let ((?x306 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x317 (= (_ bv0 2) ?x306)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x286 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (= $x252 true)))
 (let (($x253 (= $x244 true)))
 (let (($x276 (= $x253 true)))
 (let ((?x123 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x123)))
 (let ((?x222 (bvsub ?x187 ?x123)))
 (let (($x185 (ite (bvsge ?x123 (_ bv0 32)) (bvuge ?x187 ?x222) (bvult ?x187 ?x222))))
 (let (($x159 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x245 (ite $x159 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x197 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x202 (bvmul (_ bv4 64) ?x197)))
 (let ((?x218 ((_ extract 63 32) ?x202)))
 (let (($x188 (= ?x218 ?x245)))
 (let (($x208 (and $x188 $x185)))
 (let (($x186 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x175 (and $x186 $x208)))
 (let (($x198 (= true $x175)))
 (let (($x18 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (=> $x18 $x198)))
 (let (($x172 (= $x226 true)))
 (let (($x209 (= $x172 true)))
 (let (($x246 (= $x209 true)))
 (let (($x206 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x145 (= $x206 true)))
 (let (($x102 (= $x145 true)))
 (let (($x78 (= $x102 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x157 (= $x81 true)))
 (let (($x171 (= $x157 true)))
 (let (($x178 (= $x171 true)))
 (let (($x107 (= $x18 true)))
 (let (($x151 (= $x107 true)))
 (let (($x191 (= $x151 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x110)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x61)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x77)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (and $x105 $x9)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x114 $x119)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x177 $x23)))
 (let (($x104 (not $x173)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x189 $x137)))
 (let (($x138 (and (not $x93) $x104)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x182 $x8)))
 (let (($x87 (not $x52)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x66 $x126)))
 (let (($x64 (and (not $x140) $x87)))
 (let (($x160 (and (and (and (and (and (and $x64 $x138) $x5) $x194) $x12) $x44) $x166)))
 (let (($x153 (and $x160 $x193)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x79 (or false (or false (and (and true (or $x71 $x24)) (or $x116 $x57))))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x32 (and $x190 $x153)))
 (let (($x196 (= $x32 true)))
 (let (($x37 (= $x196 true)))
 (let (($x106 (= $x37 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x84)))
 (let (($x67 (= ?x46 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x67 true)))
 (let (($x68 (= $x76 true)))
 (let (($x16 (= ?x46 input.dst.llvm-%n)))
 (let (($x103 (= $x16 true)))
 (let (($x33 (= $x103 true)))
 (let (($x168 (and $x33 $x68)))
 (let (($x174 (and $x168 $x106)))
 (let (($x141 (and $x174 $x191)))
 (let (($x100 (and $x141 $x178)))
 (let (($x167 (and $x100 $x78)))
 (let (($x207 (and $x167 $x246)))
 (let (($x212 (and $x207 $x276)))
 (let (($x351 (and $x212 $x274)))
 (let (($x36 (and $x351 $x301)))
 (let (($x353 (and $x36 $x215)))
 (let (($x341 (and $x353 $x14)))
 (let (($x302 (and $x341 $x243)))
 (let (($x199 (and $x302 $x183)))
 (let (($x169 (and $x199 $x59)))
 (let (($x38 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x38) $x169)))
 (let (($x181 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x89 (and $x181 $x165)))
 (let (($x284 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x176 (and $x284 $x89)))
 (let (($x125 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x125 $x176)))
 (let (($x304 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd ?x187 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x224 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x295 (or false (or false (and (and true (or $x227 $x224)) (or $x15 $x304))))))
 (let (($x337 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x295)))
 (let (($x254 (=> (and $x18 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x295)))
 (let (($x248 (and $x254 $x132)))
 (let (($x55 (=> $x248 $x249)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x18 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (not $x18)))
 (let (($x136 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (not $x136)))
 (let (($x180 (or $x251 $x203)))
 (let (($x39 (= $x180 true)))
 (let (($x25 (= $x39 true)))
 (let (($x259 (forall ((input.ind-%var1589X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1589X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1589X) (_ bv0 32)))))
 ))
 (let (($x339 (forall ((input.ind-%var1588X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1588X)))
 (= $x263 false)))
 ))
 (let (($x249 (and $x339 $x259)))
 (let (($x55 (= $x249 true)))
 (let (($x361 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let ((?x91 (bvadd (bvmul input.ind-%var1583X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x91))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv2 32))) ?x70)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv3 32))) ?x287)))
 (let ((?x325 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1583X)))
 (let (($x275 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1583X)))
 (=> $x275 (= ?x325 ?x11)))))))))
 ))
 (let (($x233 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x326 (and (bvule (_ bv0 32) input.ind-%var1582X) (bvult input.ind-%var1582X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x275 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1582X)))
 (= $x275 $x326))))
 ))
 (let (($x239 (and $x233 $x361)))
 (let (($x161 (= $x239 true)))
 (let (($x111 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1577X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1577X) (_ bv0 32)))))
 ))
 (let (($x324 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1576X)))
 (= $x263 false)))
 ))
 (let (($x289 (and $x324 $x111)))
 (let (($x363 (= $x289 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x267)))
 (let (($x353 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let ((?x274 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x36 (= ?x351 input.dst.llvm-%n)))
 (let (($x288 (= $x36 true)))
 (let (($x306 (= $x288 true)))
 (let (($x298 (= ?x351 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x246 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x246 true)))
 (let (($x252 (= $x207 true)))
 (let (($x244 (= $x252 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (= $x175 true)))
 (let (($x226 (= $x198 true)))
 (let (($x172 (= $x226 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x133 (bvsub ?x278 ?x187)))
 (let (($x159 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x133) (bvult ?x278 ?x133))))
 (let (($x167 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x219 (ite $x167 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x145 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvmul (_ bv4 64) ?x145)))
 (let ((?x78 ((_ extract 63 32) ?x102)))
 (let (($x186 (= ?x78 ?x219)))
 (let (($x245 (and $x186 $x159)))
 (let (($x100 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x188 (and $x100 $x245)))
 (let (($x17 (= true $x188)))
 (let (($x222 (=> $x18 $x17)))
 (let (($x179 (= $x222 true)))
 (let (($x148 (= $x179 true)))
 (let (($x185 (= $x148 true)))
 (let (($x191 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x191 true)))
 (let (($x98 (= $x141 true)))
 (let (($x81 (= $x98 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x196 true)))
 (let (($x106 (= $x37 true)))
 (let (($x174 (= $x106 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x77)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x114)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x163 $x5)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x138 $x31)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x87 $x64)))
 (let (($x137 (not $x189)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x182 $x8)))
 (let (($x75 (and (not $x52) $x137)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x79 $x190)))
 (let (($x126 (not $x66)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x33 $x67)))
 (let (($x135 (and (not $x56) $x126)))
 (let (($x170 (and (and (and (and (and (and $x135 $x75) $x23) $x104) $x158) $x120) $x105)))
 (let (($x61 (and $x170 $x9)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x168)))
 (let (($x57 (or false (or false (and (and true (or $x80 $x58)) (or $x71 $x24))))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x166 (and $x152 $x61)))
 (let (($x160 (= $x166 true)))
 (let (($x110 (= $x160 true)))
 (let (($x193 (= $x110 true)))
 (let ((?x92 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x84 (= (_ bv0 2) ?x92)))
 (let (($x46 (= $x84 true)))
 (let (($x16 (= $x46 true)))
 (let (($x153 (and $x16 $x193)))
 (let (($x107 (and $x153 $x174)))
 (let (($x157 (and $x107 $x81)))
 (let (($x208 (and $x157 $x185)))
 (let (($x209 (and $x208 $x172)))
 (let (($x253 (and $x209 $x244)))
 (let (($x329 (and $x253 $x204)))
 (let (($x301 (and $x329 $x211)))
 (let (($x317 (and $x301 $x306)))
 (let (($x348 (and $x317 $x345)))
 (let (($x19 (and $x348 $x363)))
 (let (($x281 (and $x19 $x161)))
 (let (($x131 (and $x281 $x55)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x38 $x131)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x95 (and $x162 $x154)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x147 (and $x72 $x95)))
 (let (($x21 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x278 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x43 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x261 (or false (or false (and (and true (or $x285 $x43)) (or $x331 $x21))))))
 (let (($x260 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x261)))
 (let (($x291 (=> (and $x18 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x261)))
 (let (($x343 (and $x291 $x147)))
 (let (($x283 (=> $x343 $x25)))
 (not $x283))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x18 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (not $x18)))
 (let (($x136 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (not $x136)))
 (let (($x180 (or $x251 $x203)))
 (let (($x39 (= $x180 true)))
 (let (($x25 (= $x39 true)))
 (let (($x259 (forall ((input.ind-%var1589X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1589X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1589X) (_ bv0 32)))))
 ))
 (let (($x339 (forall ((input.ind-%var1588X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1588X)))
 (= $x263 false)))
 ))
 (let (($x249 (and $x339 $x259)))
 (let (($x55 (= $x249 true)))
 (let (($x361 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let ((?x91 (bvadd (bvmul input.ind-%var1583X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x91))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv2 32))) ?x70)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv3 32))) ?x287)))
 (let ((?x325 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1583X)))
 (let (($x275 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1583X)))
 (=> $x275 (= ?x325 ?x11)))))))))
 ))
 (let (($x233 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x326 (and (bvule (_ bv0 32) input.ind-%var1582X) (bvult input.ind-%var1582X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x275 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1582X)))
 (= $x275 $x326))))
 ))
 (let (($x239 (and $x233 $x361)))
 (let (($x161 (= $x239 true)))
 (let (($x111 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1577X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1577X) (_ bv0 32)))))
 ))
 (let (($x324 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1576X)))
 (= $x263 false)))
 ))
 (let (($x289 (and $x324 $x111)))
 (let (($x363 (= $x289 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x267)))
 (let (($x353 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let ((?x274 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x351 (bvneg ?x274)))
 (let (($x36 (= ?x351 input.dst.llvm-%n)))
 (let (($x288 (= $x36 true)))
 (let (($x306 (= $x288 true)))
 (let (($x298 (= ?x351 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x276 true)))
 (let (($x286 (= $x212 true)))
 (let (($x204 (= $x286 true)))
 (let (($x246 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x246 true)))
 (let (($x252 (= $x207 true)))
 (let (($x244 (= $x252 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (= $x175 true)))
 (let (($x226 (= $x198 true)))
 (let (($x172 (= $x226 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x133 (bvsub ?x278 ?x187)))
 (let (($x159 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x133) (bvult ?x278 ?x133))))
 (let (($x167 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x219 (ite $x167 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x145 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvmul (_ bv4 64) ?x145)))
 (let ((?x78 ((_ extract 63 32) ?x102)))
 (let (($x186 (= ?x78 ?x219)))
 (let (($x245 (and $x186 $x159)))
 (let (($x100 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x188 (and $x100 $x245)))
 (let (($x17 (= true $x188)))
 (let (($x222 (=> $x18 $x17)))
 (let (($x179 (= $x222 true)))
 (let (($x148 (= $x179 true)))
 (let (($x185 (= $x148 true)))
 (let (($x191 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x191 true)))
 (let (($x98 (= $x141 true)))
 (let (($x81 (= $x98 true)))
 (let (($x196 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x196 true)))
 (let (($x106 (= $x37 true)))
 (let (($x174 (= $x106 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x77)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x114)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x163 $x5)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x138 $x31)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x87 $x64)))
 (let (($x137 (not $x189)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x182 $x8)))
 (let (($x75 (and (not $x52) $x137)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x79 $x190)))
 (let (($x126 (not $x66)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x33 $x67)))
 (let (($x135 (and (not $x56) $x126)))
 (let (($x170 (and (and (and (and (and (and $x135 $x75) $x23) $x104) $x158) $x120) $x105)))
 (let (($x61 (and $x170 $x9)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x168)))
 (let (($x57 (or false (or false (and (and true (or $x80 $x58)) (or $x71 $x24))))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x166 (and $x152 $x61)))
 (let (($x160 (= $x166 true)))
 (let (($x110 (= $x160 true)))
 (let (($x193 (= $x110 true)))
 (let ((?x92 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x84 (= (_ bv0 2) ?x92)))
 (let (($x46 (= $x84 true)))
 (let (($x16 (= $x46 true)))
 (let (($x153 (and $x16 $x193)))
 (let (($x107 (and $x153 $x174)))
 (let (($x157 (and $x107 $x81)))
 (let (($x208 (and $x157 $x185)))
 (let (($x209 (and $x208 $x172)))
 (let (($x253 (and $x209 $x244)))
 (let (($x329 (and $x253 $x204)))
 (let (($x301 (and $x329 $x211)))
 (let (($x317 (and $x301 $x306)))
 (let (($x348 (and $x317 $x345)))
 (let (($x19 (and $x348 $x363)))
 (let (($x281 (and $x19 $x161)))
 (let (($x131 (and $x281 $x55)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x38 $x131)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x95 (and $x162 $x154)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x147 (and $x72 $x95)))
 (let (($x21 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x278 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x43 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x261 (or false (or false (and (and true (or $x285 $x43)) (or $x331 $x21))))))
 (let (($x260 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x261)))
 (let (($x291 (=> (and $x18 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x261)))
 (let (($x343 (and $x291 $x147)))
 (let (($x283 (=> $x343 $x25)))
 (not $x283))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x342 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x309 (bvmul (_ bv4294967295 32) ?x342)))
 (let ((?x28 (bvneg ?x309)))
 (let (($x213 (= ?x28 ?x299)))
 (let (($x323 (= $x213 true)))
 (let (($x270 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1607X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1607X) (_ bv0 32)))))
 ))
 (let (($x332 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1606X)))
 (= $x19 false)))
 ))
 (let (($x53 (and $x332 $x270)))
 (let (($x303 (= $x53 true)))
 (let (($x232 (forall ((input.ind-%var1601X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var1601X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x134))))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv2 32))) ?x217)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv3 32))) ?x199)))
 (let ((?x95 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1601X)))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1601X)))
 (=> $x287 (= ?x95 ?x256)))))))))
 ))
 (let (($x249 (forall ((input.ind-%var1600X (_ BitVec 32)) )(let (($x339 (and (bvule (_ bv0 32) input.ind-%var1600X) (bvult input.ind-%var1600X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1600X)))
 (= $x287 $x339))))
 ))
 (let (($x59 (and $x249 $x232)))
 (let (($x271 (= $x59 true)))
 (let (($x355 (forall ((input.ind-%var1595X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1595X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1595X) (_ bv0 32)))))
 ))
 (let (($x326 (forall ((input.ind-%var1594X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1594X)))
 (= $x19 false)))
 ))
 (let (($x118 (and $x326 $x355)))
 (let (($x35 (= $x118 true)))
 (let ((?x263 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x263)))
 (let (($x324 (= ?x124 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x324 true)))
 (let (($x238 (= $x258 true)))
 (let (($x353 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x348 (= $x345 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x298 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x209 (bvsub ?x278 ?x187)))
 (let (($x244 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x209) (bvult ?x278 ?x209))))
 (let (($x198 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x226 (ite $x198 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x185 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x208 (bvmul (_ bv4 64) ?x185)))
 (let ((?x175 ((_ extract 63 32) ?x208)))
 (let (($x172 (= ?x175 ?x226)))
 (let (($x253 (and $x172 $x244)))
 (let (($x179 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x276 (and $x179 $x253)))
 (let (($x212 (= true $x276)))
 (let (($x242 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (=> $x242 $x212)))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x218 (= $x202 true)))
 (let (($x159 (= $x218 true)))
 (let (($x245 (= $x159 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x219 (= $x139 true)))
 (let (($x186 (= $x219 true)))
 (let (($x197 (= $x186 true)))
 (let (($x206 (= $x242 true)))
 (let (($x145 (= $x206 true)))
 (let (($x102 (= $x145 true)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x196)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x153)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (and $x77 $x61)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x170 $x166)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x101 $x5)))
 (let (($x158 (not $x31)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x112 $x138)))
 (let (($x194 (and (not $x163) $x158)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x119 $x177)))
 (let (($x12 (not $x23)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x33 $x67)))
 (let (($x104 (and (not $x75) $x12)))
 (let (($x141 (and (and (and (and (and (and $x104 $x194) $x44) $x105) $x160) $x193) $x32)))
 (let (($x98 (and $x141 $x37)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x64 (or false (or false (and (and true (or $x190 $x66)) (or $x182 $x8))))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x64)))
 (let (($x81 (and $x137 $x98)))
 (let (($x157 (= $x81 true)))
 (let (($x171 (= $x157 true)))
 (let (($x178 (= $x171 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x10 (= (_ bv0 2) ?x24)))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x16)))
 (let (($x80 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (= $x80 true)))
 (let (($x156 (= $x58 true)))
 (let (($x68 (= ?x76 input.dst.llvm-%n)))
 (let (($x7 (= $x68 true)))
 (let (($x168 (= $x7 true)))
 (let (($x41 (and $x168 $x156)))
 (let (($x57 (and $x41 $x116)))
 (let (($x100 (and $x57 $x178)))
 (let (($x78 (and $x100 $x102)))
 (let (($x133 (and $x78 $x197)))
 (let (($x188 (and $x133 $x245)))
 (let (($x351 (and $x188 $x274)))
 (let (($x36 (and $x351 $x301)))
 (let (($x215 (and $x36 $x267)))
 (let (($x341 (and $x215 $x348)))
 (let (($x357 (and $x341 $x238)))
 (let (($x349 (and $x357 $x35)))
 (let (($x169 (and $x349 $x271)))
 (let (($x316 (and $x169 $x303)))
 (let (($x84 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and (not $x84) $x316)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (and $x69 $x247)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x181 $x262)))
 (let (($x284 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x315 (and $x284 $x144)))
 (let (($x337 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd ?x278 (_ bv3 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x241 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x291 (or false (or false (and (and true (or $x15 $x241)) (or $x295 $x337))))))
 (let (($x72 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x291)))
 (let (($x279 (=> (and $x242 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x291)))
 (let (($x250 (and $x279 $x315)))
 (let (($x236 (=> $x250 $x323)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x342 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x309 (bvmul (_ bv4294967295 32) ?x342)))
 (let ((?x28 (bvneg ?x309)))
 (let (($x213 (= ?x28 ?x299)))
 (let (($x323 (= $x213 true)))
 (let (($x270 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1607X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1607X) (_ bv0 32)))))
 ))
 (let (($x332 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1606X)))
 (= $x19 false)))
 ))
 (let (($x53 (and $x332 $x270)))
 (let (($x303 (= $x53 true)))
 (let (($x232 (forall ((input.ind-%var1601X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var1601X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x134))))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv2 32))) ?x217)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv3 32))) ?x199)))
 (let ((?x95 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1601X)))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1601X)))
 (=> $x287 (= ?x95 ?x256)))))))))
 ))
 (let (($x249 (forall ((input.ind-%var1600X (_ BitVec 32)) )(let (($x339 (and (bvule (_ bv0 32) input.ind-%var1600X) (bvult input.ind-%var1600X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1600X)))
 (= $x287 $x339))))
 ))
 (let (($x59 (and $x249 $x232)))
 (let (($x271 (= $x59 true)))
 (let (($x355 (forall ((input.ind-%var1595X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1595X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1595X) (_ bv0 32)))))
 ))
 (let (($x326 (forall ((input.ind-%var1594X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1594X)))
 (= $x19 false)))
 ))
 (let (($x118 (and $x326 $x355)))
 (let (($x35 (= $x118 true)))
 (let ((?x263 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x263)))
 (let (($x324 (= ?x124 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x324 true)))
 (let (($x238 (= $x258 true)))
 (let (($x353 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x348 (= $x345 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x298 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x298 true)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x209 (bvsub ?x278 ?x187)))
 (let (($x244 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x209) (bvult ?x278 ?x209))))
 (let (($x198 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x226 (ite $x198 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x185 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x208 (bvmul (_ bv4 64) ?x185)))
 (let ((?x175 ((_ extract 63 32) ?x208)))
 (let (($x172 (= ?x175 ?x226)))
 (let (($x253 (and $x172 $x244)))
 (let (($x179 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x276 (and $x179 $x253)))
 (let (($x212 (= true $x276)))
 (let (($x242 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (=> $x242 $x212)))
 (let (($x204 (= $x286 true)))
 (let (($x329 (= $x204 true)))
 (let (($x274 (= $x329 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x218 (= $x202 true)))
 (let (($x159 (= $x218 true)))
 (let (($x245 (= $x159 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x219 (= $x139 true)))
 (let (($x186 (= $x219 true)))
 (let (($x197 (= $x186 true)))
 (let (($x206 (= $x242 true)))
 (let (($x145 (= $x206 true)))
 (let (($x102 (= $x145 true)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x196)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x153)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (and $x77 $x61)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x170 $x166)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x101 $x5)))
 (let (($x158 (not $x31)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x112 $x138)))
 (let (($x194 (and (not $x163) $x158)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x119 $x177)))
 (let (($x12 (not $x23)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x33 $x67)))
 (let (($x104 (and (not $x75) $x12)))
 (let (($x141 (and (and (and (and (and (and $x104 $x194) $x44) $x105) $x160) $x193) $x32)))
 (let (($x98 (and $x141 $x37)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x64 (or false (or false (and (and true (or $x190 $x66)) (or $x182 $x8))))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x64)))
 (let (($x81 (and $x137 $x98)))
 (let (($x157 (= $x81 true)))
 (let (($x171 (= $x157 true)))
 (let (($x178 (= $x171 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x10 (= (_ bv0 2) ?x24)))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x16)))
 (let (($x80 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (= $x80 true)))
 (let (($x156 (= $x58 true)))
 (let (($x68 (= ?x76 input.dst.llvm-%n)))
 (let (($x7 (= $x68 true)))
 (let (($x168 (= $x7 true)))
 (let (($x41 (and $x168 $x156)))
 (let (($x57 (and $x41 $x116)))
 (let (($x100 (and $x57 $x178)))
 (let (($x78 (and $x100 $x102)))
 (let (($x133 (and $x78 $x197)))
 (let (($x188 (and $x133 $x245)))
 (let (($x351 (and $x188 $x274)))
 (let (($x36 (and $x351 $x301)))
 (let (($x215 (and $x36 $x267)))
 (let (($x341 (and $x215 $x348)))
 (let (($x357 (and $x341 $x238)))
 (let (($x349 (and $x357 $x35)))
 (let (($x169 (and $x349 $x271)))
 (let (($x316 (and $x169 $x303)))
 (let (($x84 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and (not $x84) $x316)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x262 (and $x69 $x247)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x181 $x262)))
 (let (($x284 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x315 (and $x284 $x144)))
 (let (($x337 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd ?x278 (_ bv3 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x241 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x291 (or false (or false (and (and true (or $x15 $x241)) (or $x295 $x337))))))
 (let (($x72 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x291)))
 (let (($x279 (=> (and $x242 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x291)))
 (let (($x250 (and $x279 $x315)))
 (let (($x236 (=> $x250 $x323)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x50 (bvule ?x243 (_ bv4294967294 32))))
 (let (($x131 (= $x50 true)))
 (let (($x338 (= $x131 true)))
 (let (($x228 (forall ((input.ind-%var1625X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1625X)))
 (=> $x183 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1625X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var1624X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1624X)))
 (= $x183 false)))
 ))
 (let (($x290 (and $x180 $x228)))
 (let (($x91 (= $x290 true)))
 (let (($x289 (forall ((input.ind-%var1619X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var1619X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x152))))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv2 32))) ?x257)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv3 32))) ?x55)))
 (let ((?x332 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1619X)))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1619X)))
 (=> $x200 (= ?x332 ?x240)))))))))
 ))
 (let (($x232 (forall ((input.ind-%var1618X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var1618X) (bvult input.ind-%var1618X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1618X)))
 (= $x200 $x89))))
 ))
 (let (($x136 (and $x232 $x289)))
 (let (($x251 (= $x136 true)))
 (let (($x343 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1613X)))
 (=> $x183 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1613X) (_ bv0 32)))))
 ))
 (let (($x118 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1612X)))
 (= $x183 false)))
 ))
 (let (($x51 (and $x118 $x343)))
 (let (($x134 (= $x51 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x324 (bvneg ?x124)))
 (let (($x258 (= ?x324 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x238 (= $x258 true)))
 (let (($x357 (= $x238 true)))
 (let (($x313 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x345 (= $x313 true)))
 (let (($x348 (= $x345 true)))
 (let (($x341 (= $x348 true)))
 (let (($x306 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x276 (= (_ bv0 32) ?x253)))
 (let ((?x252 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x252)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x198)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (and $x175 $x226)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (and $x208 $x172)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x202 $x218)))
 (let (($x245 (not $x159)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x186 $x197)))
 (let (($x17 (and (not $x133) $x245)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x145 $x102)))
 (let (($x167 (not $x78)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x166 $x160)))
 (let (($x219 (and (not $x206) $x167)))
 (let (($x351 (and (and (and (and (and (and $x219 $x17) $x179) $x185) $x246) $x207) $x244)))
 (let (($x298 (and $x351 $x276)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x171 (or false (or false (and (and true (or $x191 $x153)) (or $x196 $x37))))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x171)))
 (let (($x40 (and $x100 $x298)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x105 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x107 (= $x105 true)))
 (let (($x170 (= $x107 true)))
 (let (($x77 (= $x170 true)))
 (let (($x106 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x106 true)))
 (let (($x44 (= $x120 true)))
 (let (($x174 (= $x44 true)))
 (let ((?x101 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x5 (= (_ bv0 2) ?x101)))
 (let (($x31 (= $x5 true)))
 (let (($x158 (= $x31 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x75)))
 (let (($x104 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x104 true)))
 (let (($x138 (= $x112 true)))
 (let (($x119 (= ?x173 input.dst.llvm-%n)))
 (let (($x177 (= $x119 true)))
 (let (($x23 (= $x177 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x190 (bvsub ?x278 ?x187)))
 (let (($x182 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x190) (bvult ?x278 ?x190))))
 (let (($x56 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x189 (ite $x56 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x74 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x74)))
 (let ((?x57 ((_ extract 63 32) ?x116)))
 (let (($x79 (= ?x57 ?x189)))
 (let (($x8 (and $x79 $x182)))
 (let (($x24 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x52 (and $x24 $x8)))
 (let (($x93 (= true $x52)))
 (let (($x297 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x87 (=> $x297 $x93)))
 (let (($x64 (= $x87 true)))
 (let (($x137 (= $x64 true)))
 (let (($x33 (= $x137 true)))
 (let (($x7 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x7 true)))
 (let (($x80 (= $x168 true)))
 (let (($x58 (= $x80 true)))
 (let (($x46 (= $x297 true)))
 (let (($x16 (= $x46 true)))
 (let (($x76 (= $x16 true)))
 (let (($x156 (and $x76 $x58)))
 (let (($x67 (and $x156 $x33)))
 (let (($x12 (and $x67 $x23)))
 (let (($x163 (and $x12 $x138)))
 (let (($x194 (and $x163 $x158)))
 (let (($x114 (and $x194 $x174)))
 (let (($x9 (and $x114 $x77)))
 (let (($x288 (and $x9 $x36)))
 (let (($x353 (and $x288 $x215)))
 (let (($x263 (and $x353 $x341)))
 (let (($x363 (and $x263 $x357)))
 (let (($x129 (and $x363 $x134)))
 (let (($x307 (and $x129 $x251)))
 (let (($x70 (and $x307 $x91)))
 (let (($x26 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and (not $x26) $x70)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and $x92 $x132)))
 (let (($x330 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x239 (and $x330 $x60)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x233 (and $x113 $x239)))
 (let (($x261 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd ?x278 (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x331 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x241)))
 (let (($x279 (or false (or false (and (and true (or $x304 $x331)) (or $x254 $x261))))))
 (let (($x284 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x279)))
 (let (($x227 (=> (and $x297 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x279)))
 (let (($x122 (and $x227 $x233)))
 (let (($x359 (=> $x122 $x338)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x50 (bvule ?x243 (_ bv4294967294 32))))
 (let (($x131 (= $x50 true)))
 (let (($x338 (= $x131 true)))
 (let (($x228 (forall ((input.ind-%var1625X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1625X)))
 (=> $x183 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1625X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var1624X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1624X)))
 (= $x183 false)))
 ))
 (let (($x290 (and $x180 $x228)))
 (let (($x91 (= $x290 true)))
 (let (($x289 (forall ((input.ind-%var1619X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var1619X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x152))))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv2 32))) ?x257)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv3 32))) ?x55)))
 (let ((?x332 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1619X)))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1619X)))
 (=> $x200 (= ?x332 ?x240)))))))))
 ))
 (let (($x232 (forall ((input.ind-%var1618X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var1618X) (bvult input.ind-%var1618X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1618X)))
 (= $x200 $x89))))
 ))
 (let (($x136 (and $x232 $x289)))
 (let (($x251 (= $x136 true)))
 (let (($x343 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1613X)))
 (=> $x183 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1613X) (_ bv0 32)))))
 ))
 (let (($x118 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1612X)))
 (= $x183 false)))
 ))
 (let (($x51 (and $x118 $x343)))
 (let (($x134 (= $x51 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x324 (bvneg ?x124)))
 (let (($x258 (= ?x324 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x238 (= $x258 true)))
 (let (($x357 (= $x238 true)))
 (let (($x313 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x345 (= $x313 true)))
 (let (($x348 (= $x345 true)))
 (let (($x341 (= $x348 true)))
 (let (($x306 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x276 (= (_ bv0 32) ?x253)))
 (let ((?x252 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x252)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x198)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (and $x175 $x226)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (and $x208 $x172)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x202 $x218)))
 (let (($x245 (not $x159)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x186 $x197)))
 (let (($x17 (and (not $x133) $x245)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x145 $x102)))
 (let (($x167 (not $x78)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x166 $x160)))
 (let (($x219 (and (not $x206) $x167)))
 (let (($x351 (and (and (and (and (and (and $x219 $x17) $x179) $x185) $x246) $x207) $x244)))
 (let (($x298 (and $x351 $x276)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x171 (or false (or false (and (and true (or $x191 $x153)) (or $x196 $x37))))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x171)))
 (let (($x40 (and $x100 $x298)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x105 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x107 (= $x105 true)))
 (let (($x170 (= $x107 true)))
 (let (($x77 (= $x170 true)))
 (let (($x106 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x106 true)))
 (let (($x44 (= $x120 true)))
 (let (($x174 (= $x44 true)))
 (let ((?x101 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x5 (= (_ bv0 2) ?x101)))
 (let (($x31 (= $x5 true)))
 (let (($x158 (= $x31 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x75)))
 (let (($x104 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x104 true)))
 (let (($x138 (= $x112 true)))
 (let (($x119 (= ?x173 input.dst.llvm-%n)))
 (let (($x177 (= $x119 true)))
 (let (($x23 (= $x177 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x190 (bvsub ?x278 ?x187)))
 (let (($x182 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x190) (bvult ?x278 ?x190))))
 (let (($x56 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x189 (ite $x56 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x74 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x74)))
 (let ((?x57 ((_ extract 63 32) ?x116)))
 (let (($x79 (= ?x57 ?x189)))
 (let (($x8 (and $x79 $x182)))
 (let (($x24 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x52 (and $x24 $x8)))
 (let (($x93 (= true $x52)))
 (let (($x297 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x87 (=> $x297 $x93)))
 (let (($x64 (= $x87 true)))
 (let (($x137 (= $x64 true)))
 (let (($x33 (= $x137 true)))
 (let (($x7 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x7 true)))
 (let (($x80 (= $x168 true)))
 (let (($x58 (= $x80 true)))
 (let (($x46 (= $x297 true)))
 (let (($x16 (= $x46 true)))
 (let (($x76 (= $x16 true)))
 (let (($x156 (and $x76 $x58)))
 (let (($x67 (and $x156 $x33)))
 (let (($x12 (and $x67 $x23)))
 (let (($x163 (and $x12 $x138)))
 (let (($x194 (and $x163 $x158)))
 (let (($x114 (and $x194 $x174)))
 (let (($x9 (and $x114 $x77)))
 (let (($x288 (and $x9 $x36)))
 (let (($x353 (and $x288 $x215)))
 (let (($x263 (and $x353 $x341)))
 (let (($x363 (and $x263 $x357)))
 (let (($x129 (and $x363 $x134)))
 (let (($x307 (and $x129 $x251)))
 (let (($x70 (and $x307 $x91)))
 (let (($x26 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and (not $x26) $x70)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and $x92 $x132)))
 (let (($x330 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x239 (and $x330 $x60)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x233 (and $x113 $x239)))
 (let (($x261 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd ?x278 (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x331 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x241)))
 (let (($x279 (or false (or false (and (and true (or $x304 $x331)) (or $x254 $x261))))))
 (let (($x284 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x279)))
 (let (($x227 (=> (and $x297 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x279)))
 (let (($x122 (and $x227 $x233)))
 (let (($x359 (=> $x122 $x338)))
 (not $x359))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x271 (_ bv0 32))))
 (let (($x103 (= $x352 true)))
 (let (($x203 (= $x103 true)))
 (let (($x339 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1643X)))
 (=> $x281 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1643X) (_ bv0 32)))))
 ))
 (let (($x247 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1642X)))
 (= $x281 false)))
 ))
 (let (($x283 (and $x247 $x339)))
 (let (($x225 (= $x283 true)))
 (let (($x316 (forall ((input.ind-%var1637X (_ BitVec 32)) )(let ((?x270 (bvadd (bvmul input.ind-%var1637X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x270))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv2 32))) ?x287)))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv3 32))) ?x248)))
 (let ((?x180 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1637X)))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1637X)))
 (=> $x300 (= ?x180 ?x19)))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1636X (_ BitVec 32)) )(let (($x312 (and (bvule (_ bv0 32) input.ind-%var1636X) (bvult input.ind-%var1636X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1636X)))
 (= $x300 $x312))))
 ))
 (let (($x299 (and $x289 $x316)))
 (let (($x213 (= $x299 true)))
 (let (($x53 (forall ((input.ind-%var1631X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1631X)))
 (=> $x281 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1631X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1630X)))
 (= $x281 false)))
 ))
 (let (($x90 (and $x51 $x53)))
 (let (($x152 (= $x90 true)))
 (let ((?x324 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x324)))
 (let (($x238 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x357 (= $x238 true)))
 (let (($x363 (= $x357 true)))
 (let (($x345 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x348 (= $x345 true)))
 (let (($x341 (= $x348 true)))
 (let (($x263 (= $x341 true)))
 (let (($x317 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x207)))
 (let ((?x329 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x329)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x208)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (and $x204 $x175)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x185 $x198)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x202 $x218)))
 (let (($x245 (not $x159)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x197 $x133)))
 (let (($x212 (and (not $x188) $x245)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x145 $x102)))
 (let (($x167 (not $x78)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x110 $x178)))
 (let (($x186 (and (not $x139) $x167)))
 (let (($x298 (and (and (and (and (and (and $x186 $x212) $x179) $x148) $x226) $x246) $x209)))
 (let (($x40 (and $x298 $x274)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x153 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x153)))
 (let (($x166 (or false (or false (and (and true (or $x32 $x141)) (or $x98 $x81))))))
 (let (($x206 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x166)))
 (let (($x211 (and $x206 $x40)))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x288 (= $x36 true)))
 (let (($x105 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x107 (= $x105 true)))
 (let (($x170 (= $x107 true)))
 (let (($x77 (= $x170 true)))
 (let (($x106 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x106 true)))
 (let (($x44 (= $x120 true)))
 (let (($x174 (= $x44 true)))
 (let ((?x101 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x5 (= (_ bv0 2) ?x101)))
 (let (($x31 (= $x5 true)))
 (let (($x158 (= $x31 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x75)))
 (let (($x104 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x104 true)))
 (let (($x138 (= $x112 true)))
 (let (($x119 (= ?x173 input.dst.llvm-%n)))
 (let (($x177 (= $x119 true)))
 (let (($x23 (= $x177 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x66 (bvsub ?x278 ?x187)))
 (let (($x182 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x66) (bvult ?x278 ?x66))))
 (let (($x56 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x189 (ite $x56 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x74 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x74)))
 (let ((?x57 ((_ extract 63 32) ?x116)))
 (let (($x79 (= ?x57 ?x189)))
 (let (($x8 (and $x79 $x182)))
 (let (($x24 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x52 (and $x24 $x8)))
 (let (($x93 (= true $x52)))
 (let (($x125 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x87 (=> $x125 $x93)))
 (let (($x64 (= $x87 true)))
 (let (($x137 (= $x64 true)))
 (let (($x33 (= $x137 true)))
 (let (($x7 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x7 true)))
 (let (($x80 (= $x168 true)))
 (let (($x58 (= $x80 true)))
 (let (($x46 (= $x125 true)))
 (let (($x16 (= $x46 true)))
 (let (($x76 (= $x16 true)))
 (let (($x156 (and $x76 $x58)))
 (let (($x67 (and $x156 $x33)))
 (let (($x12 (and $x67 $x23)))
 (let (($x163 (and $x12 $x138)))
 (let (($x194 (and $x163 $x158)))
 (let (($x114 (and $x194 $x174)))
 (let (($x9 (and $x114 $x77)))
 (let (($x306 (and $x9 $x288)))
 (let (($x313 (and $x306 $x353)))
 (let (($x124 (and $x313 $x263)))
 (let (($x326 (and $x124 $x363)))
 (let (($x154 (and $x326 $x152)))
 (let (($x342 (and $x154 $x213)))
 (let (($x319 (and $x342 $x225)))
 (let (($x361 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x217 (and (not $x361) $x319)))
 (let (($x84 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x349 (and $x84 $x217)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x259 (and $x38 $x349)))
 (let (($x162 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x236 (and $x162 $x259)))
 (let (($x291 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x331 (bvadd ?x278 (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x331)))
 (let (($x295 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x331)))
 (let (($x227 (or false (or false (and (and true (or $x360 $x295)) (or $x260 $x291))))))
 (let (($x113 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x227)))
 (let (($x13 (=> (and $x125 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x227)))
 (let (($x123 (and $x13 $x236)))
 (let (($x29 (=> $x123 $x203)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x352 (bvsge ?x271 (_ bv0 32))))
 (let (($x103 (= $x352 true)))
 (let (($x203 (= $x103 true)))
 (let (($x339 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1643X)))
 (=> $x281 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1643X) (_ bv0 32)))))
 ))
 (let (($x247 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1642X)))
 (= $x281 false)))
 ))
 (let (($x283 (and $x247 $x339)))
 (let (($x225 (= $x283 true)))
 (let (($x316 (forall ((input.ind-%var1637X (_ BitVec 32)) )(let ((?x270 (bvadd (bvmul input.ind-%var1637X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x270))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv2 32))) ?x287)))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv3 32))) ?x248)))
 (let ((?x180 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1637X)))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1637X)))
 (=> $x300 (= ?x180 ?x19)))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1636X (_ BitVec 32)) )(let (($x312 (and (bvule (_ bv0 32) input.ind-%var1636X) (bvult input.ind-%var1636X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x300 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1636X)))
 (= $x300 $x312))))
 ))
 (let (($x299 (and $x289 $x316)))
 (let (($x213 (= $x299 true)))
 (let (($x53 (forall ((input.ind-%var1631X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1631X)))
 (=> $x281 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1631X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1630X)))
 (= $x281 false)))
 ))
 (let (($x90 (and $x51 $x53)))
 (let (($x152 (= $x90 true)))
 (let ((?x324 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x324)))
 (let (($x238 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x357 (= $x238 true)))
 (let (($x363 (= $x357 true)))
 (let (($x345 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x348 (= $x345 true)))
 (let (($x341 (= $x348 true)))
 (let (($x263 (= $x341 true)))
 (let (($x317 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x207)))
 (let ((?x329 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x329)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x208)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (and $x204 $x175)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x185 $x198)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x202 $x218)))
 (let (($x245 (not $x159)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x197 $x133)))
 (let (($x212 (and (not $x188) $x245)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x145 $x102)))
 (let (($x167 (not $x78)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x110 $x178)))
 (let (($x186 (and (not $x139) $x167)))
 (let (($x298 (and (and (and (and (and (and $x186 $x212) $x179) $x148) $x226) $x246) $x209)))
 (let (($x40 (and $x298 $x274)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x153 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x153)))
 (let (($x166 (or false (or false (and (and true (or $x32 $x141)) (or $x98 $x81))))))
 (let (($x206 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x166)))
 (let (($x211 (and $x206 $x40)))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x288 (= $x36 true)))
 (let (($x105 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x107 (= $x105 true)))
 (let (($x170 (= $x107 true)))
 (let (($x77 (= $x170 true)))
 (let (($x106 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x106 true)))
 (let (($x44 (= $x120 true)))
 (let (($x174 (= $x44 true)))
 (let ((?x101 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x5 (= (_ bv0 2) ?x101)))
 (let (($x31 (= $x5 true)))
 (let (($x158 (= $x31 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x75)))
 (let (($x104 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (= $x104 true)))
 (let (($x138 (= $x112 true)))
 (let (($x119 (= ?x173 input.dst.llvm-%n)))
 (let (($x177 (= $x119 true)))
 (let (($x23 (= $x177 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x66 (bvsub ?x278 ?x187)))
 (let (($x182 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x66) (bvult ?x278 ?x66))))
 (let (($x56 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x189 (ite $x56 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x74 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x74)))
 (let ((?x57 ((_ extract 63 32) ?x116)))
 (let (($x79 (= ?x57 ?x189)))
 (let (($x8 (and $x79 $x182)))
 (let (($x24 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x52 (and $x24 $x8)))
 (let (($x93 (= true $x52)))
 (let (($x125 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x87 (=> $x125 $x93)))
 (let (($x64 (= $x87 true)))
 (let (($x137 (= $x64 true)))
 (let (($x33 (= $x137 true)))
 (let (($x7 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x7 true)))
 (let (($x80 (= $x168 true)))
 (let (($x58 (= $x80 true)))
 (let (($x46 (= $x125 true)))
 (let (($x16 (= $x46 true)))
 (let (($x76 (= $x16 true)))
 (let (($x156 (and $x76 $x58)))
 (let (($x67 (and $x156 $x33)))
 (let (($x12 (and $x67 $x23)))
 (let (($x163 (and $x12 $x138)))
 (let (($x194 (and $x163 $x158)))
 (let (($x114 (and $x194 $x174)))
 (let (($x9 (and $x114 $x77)))
 (let (($x306 (and $x9 $x288)))
 (let (($x313 (and $x306 $x353)))
 (let (($x124 (and $x313 $x263)))
 (let (($x326 (and $x124 $x363)))
 (let (($x154 (and $x326 $x152)))
 (let (($x342 (and $x154 $x213)))
 (let (($x319 (and $x342 $x225)))
 (let (($x361 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x217 (and (not $x361) $x319)))
 (let (($x84 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x349 (and $x84 $x217)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x259 (and $x38 $x349)))
 (let (($x162 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x236 (and $x162 $x259)))
 (let (($x291 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x331 (bvadd ?x278 (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x331)))
 (let (($x295 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x331)))
 (let (($x227 (or false (or false (and (and true (or $x360 $x295)) (or $x260 $x291))))))
 (let (($x113 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x227)))
 (let (($x13 (=> (and $x125 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x227)))
 (let (($x123 (and $x13 $x236)))
 (let (($x29 (=> $x123 $x203)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x25 (= $x61 true)))
 (let (($x28 (= $x25 true)))
 (let (($x89 (forall ((input.ind-%var1661X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1661X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1661X) (_ bv0 32)))))
 ))
 (let (($x132 (forall ((input.ind-%var1660X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1660X)))
 (= $x256 false)))
 ))
 (let (($x250 (and $x132 $x89)))
 (let (($x11 (= $x250 true)))
 (let (($x70 (forall ((input.ind-%var1655X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var1655X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x228))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv2 32))) ?x200)))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv3 32))) ?x149)))
 (let ((?x247 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1655X)))
 (let (($x59 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1655X)))
 (=> $x59 (= ?x247 ?x183)))))))))
 ))
 (let (($x316 (forall ((input.ind-%var1654X (_ BitVec 32)) )(let (($x150 (and (bvule (_ bv0 32) input.ind-%var1654X) (bvult input.ind-%var1654X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x59 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1654X)))
 (= $x59 $x150))))
 ))
 (let (($x338 (and $x316 $x70)))
 (let (($x359 (= $x338 true)))
 (let (($x290 (forall ((input.ind-%var1649X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1649X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1649X) (_ bv0 32)))))
 ))
 (let (($x90 (forall ((input.ind-%var1648X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1648X)))
 (= $x256 false)))
 ))
 (let (($x14 (and $x90 $x290)))
 (let (($x270 (= $x14 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x238 (bvneg ?x258)))
 (let (($x357 (= ?x238 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x363 (= $x357 true)))
 (let (($x326 (= $x363 true)))
 (let (($x348 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x341 (= $x348 true)))
 (let (($x263 (= $x341 true)))
 (let (($x124 (= $x263 true)))
 (let (($x267 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x276 (bvsub ?x278 ?x187)))
 (let (($x207 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x276) (bvult ?x278 ?x276))))
 (let (($x253 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x172 (ite $x253 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x175 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvmul (_ bv4 64) ?x175)))
 (let ((?x226 ((_ extract 63 32) ?x198)))
 (let (($x246 (= ?x226 ?x172)))
 (let (($x274 (and $x246 $x207)))
 (let (($x204 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x40 (and $x204 $x274)))
 (let (($x211 (= true $x40)))
 (let (($x282 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (=> $x282 $x211)))
 (let (($x36 (= $x301 true)))
 (let (($x288 (= $x36 true)))
 (let (($x306 (= $x288 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x222 true)))
 (let (($x244 (= $x179 true)))
 (let (($x286 (= $x244 true)))
 (let (($x159 (= $x282 true)))
 (let (($x245 (= $x159 true)))
 (let (($x212 (= $x245 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x178)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x206)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (and $x37 $x81)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x196 $x157)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x107 $x170)))
 (let (($x9 (not $x77)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x174 $x114)))
 (let (($x191 (and (not $x105) $x9)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x31 $x158)))
 (let (($x106 (not $x194)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x87 $x64)))
 (let (($x44 (and (not $x5) $x106)))
 (let (($x186 (and (and (and (and (and (and $x44 $x191) $x153) $x141) $x171) $x166) $x110)))
 (let (($x197 (and $x186 $x139)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x163 (or false (or false (and (and true (or $x75 $x173)) (or $x23 $x12))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x133 (and $x101 $x197)))
 (let (($x188 (= $x133 true)))
 (let (($x17 (= $x188 true)))
 (let (($x202 (= $x17 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x135 (= $x126 true)))
 (let (($x182 (= $x135 true)))
 (let (($x8 (= $x182 true)))
 (let ((?x140 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x189 (= (_ bv0 2) ?x140)))
 (let (($x79 (= $x189 true)))
 (let (($x190 (= $x79 true)))
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x80)))
 (let (($x10 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let (($x156 (= ?x58 input.dst.llvm-%n)))
 (let (($x41 (= $x156 true)))
 (let (($x71 (= $x41 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x7 (= $x68 true)))
 (let (($x24 (and $x7 $x71)))
 (let (($x57 (and $x24 $x116)))
 (let (($x66 (and $x57 $x190)))
 (let (($x52 (and $x66 $x8)))
 (let (($x218 (and $x52 $x202)))
 (let (($x252 (and $x218 $x212)))
 (let (($x148 (and $x252 $x286)))
 (let (($x317 (and $x148 $x306)))
 (let (($x345 (and $x317 $x313)))
 (let (($x324 (and $x345 $x124)))
 (let (($x118 (and $x324 $x326)))
 (let (($x115 (and $x118 $x270)))
 (let (($x243 (and $x115 $x359)))
 (let (($x309 (and $x243 $x11)))
 (let (($x311 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x257 (and (not $x311) $x309)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and $x26 $x257)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x176 (and $x69 $x129)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x30 (and $x181 $x176)))
 (let (($x279 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd ?x278 (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x254 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x13 (or false (or false (and (and true (or $x21 $x254)) (or $x72 $x279))))))
 (let (($x162 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x43 (=> (and $x282 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x144 (and $x43 $x30)))
 (let (($x165 (=> $x144 $x28)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x25 (= $x61 true)))
 (let (($x28 (= $x25 true)))
 (let (($x89 (forall ((input.ind-%var1661X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1661X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1661X) (_ bv0 32)))))
 ))
 (let (($x132 (forall ((input.ind-%var1660X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1660X)))
 (= $x256 false)))
 ))
 (let (($x250 (and $x132 $x89)))
 (let (($x11 (= $x250 true)))
 (let (($x70 (forall ((input.ind-%var1655X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var1655X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x228))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv2 32))) ?x200)))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x228 (_ bv3 32))) ?x149)))
 (let ((?x247 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1655X)))
 (let (($x59 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1655X)))
 (=> $x59 (= ?x247 ?x183)))))))))
 ))
 (let (($x316 (forall ((input.ind-%var1654X (_ BitVec 32)) )(let (($x150 (and (bvule (_ bv0 32) input.ind-%var1654X) (bvult input.ind-%var1654X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x59 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1654X)))
 (= $x59 $x150))))
 ))
 (let (($x338 (and $x316 $x70)))
 (let (($x359 (= $x338 true)))
 (let (($x290 (forall ((input.ind-%var1649X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1649X)))
 (=> $x256 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1649X) (_ bv0 32)))))
 ))
 (let (($x90 (forall ((input.ind-%var1648X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1648X)))
 (= $x256 false)))
 ))
 (let (($x14 (and $x90 $x290)))
 (let (($x270 (= $x14 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x238 (bvneg ?x258)))
 (let (($x357 (= ?x238 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x363 (= $x357 true)))
 (let (($x326 (= $x363 true)))
 (let (($x348 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x341 (= $x348 true)))
 (let (($x263 (= $x341 true)))
 (let (($x124 (= $x263 true)))
 (let (($x267 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (= $x267 true)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x276 (bvsub ?x278 ?x187)))
 (let (($x207 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x276) (bvult ?x278 ?x276))))
 (let (($x253 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x172 (ite $x253 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x175 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvmul (_ bv4 64) ?x175)))
 (let ((?x226 ((_ extract 63 32) ?x198)))
 (let (($x246 (= ?x226 ?x172)))
 (let (($x274 (and $x246 $x207)))
 (let (($x204 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x40 (and $x204 $x274)))
 (let (($x211 (= true $x40)))
 (let (($x282 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (=> $x282 $x211)))
 (let (($x36 (= $x301 true)))
 (let (($x288 (= $x36 true)))
 (let (($x306 (= $x288 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x222 true)))
 (let (($x244 (= $x179 true)))
 (let (($x286 (= $x244 true)))
 (let (($x159 (= $x282 true)))
 (let (($x245 (= $x159 true)))
 (let (($x212 (= $x245 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x178)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x206)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (and $x37 $x81)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x196 $x157)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x107 $x170)))
 (let (($x9 (not $x77)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x174 $x114)))
 (let (($x191 (and (not $x105) $x9)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x31 $x158)))
 (let (($x106 (not $x194)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x87 $x64)))
 (let (($x44 (and (not $x5) $x106)))
 (let (($x186 (and (and (and (and (and (and $x44 $x191) $x153) $x141) $x171) $x166) $x110)))
 (let (($x197 (and $x186 $x139)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x163 (or false (or false (and (and true (or $x75 $x173)) (or $x23 $x12))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x133 (and $x101 $x197)))
 (let (($x188 (= $x133 true)))
 (let (($x17 (= $x188 true)))
 (let (($x202 (= $x17 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x135 (= $x126 true)))
 (let (($x182 (= $x135 true)))
 (let (($x8 (= $x182 true)))
 (let ((?x140 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x189 (= (_ bv0 2) ?x140)))
 (let (($x79 (= $x189 true)))
 (let (($x190 (= $x79 true)))
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x80)))
 (let (($x10 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let (($x156 (= ?x58 input.dst.llvm-%n)))
 (let (($x41 (= $x156 true)))
 (let (($x71 (= $x41 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x7 (= $x68 true)))
 (let (($x24 (and $x7 $x71)))
 (let (($x57 (and $x24 $x116)))
 (let (($x66 (and $x57 $x190)))
 (let (($x52 (and $x66 $x8)))
 (let (($x218 (and $x52 $x202)))
 (let (($x252 (and $x218 $x212)))
 (let (($x148 (and $x252 $x286)))
 (let (($x317 (and $x148 $x306)))
 (let (($x345 (and $x317 $x313)))
 (let (($x324 (and $x345 $x124)))
 (let (($x118 (and $x324 $x326)))
 (let (($x115 (and $x118 $x270)))
 (let (($x243 (and $x115 $x359)))
 (let (($x309 (and $x243 $x11)))
 (let (($x311 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x257 (and (not $x311) $x309)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (and $x26 $x257)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x176 (and $x69 $x129)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x30 (and $x181 $x176)))
 (let (($x279 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd ?x278 (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x254 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x13 (or false (or false (and (and true (or $x21 $x254)) (or $x72 $x279))))))
 (let (($x162 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x43 (=> (and $x282 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x144 (and $x43 $x30)))
 (let (($x165 (=> $x144 $x28)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x151 (bvsge ?x213 (_ bv0 32))))
 (let (($x323 (= $x151 true)))
 (let (($x131 (= $x323 true)))
 (let (($x312 (forall ((input.ind-%var1679X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1679X)))
 (=> $x240 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1679X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1678X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1678X)))
 (= $x240 false)))
 ))
 (let (($x122 (and $x217 $x312)))
 (let (($x45 (= $x122 true)))
 (let (($x319 (forall ((input.ind-%var1673X (_ BitVec 32)) )(let ((?x339 (bvadd (bvmul input.ind-%var1673X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x339))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv2 32))) ?x300)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv3 32))) ?x130)))
 (let ((?x132 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1673X)))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1673X)))
 (=> $x136 (= ?x132 ?x281)))))))))
 ))
 (let (($x70 (forall ((input.ind-%var1672X (_ BitVec 32)) )(let (($x355 (and (bvule (_ bv0 32) input.ind-%var1672X) (bvult input.ind-%var1672X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1672X)))
 (= $x136 $x355))))
 ))
 (let (($x203 (and $x70 $x319)))
 (let (($x29 (= $x203 true)))
 (let (($x283 (forall ((input.ind-%var1667X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1667X)))
 (=> $x240 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1667X) (_ bv0 32)))))
 ))
 (let (($x14 (forall ((input.ind-%var1666X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1666X)))
 (= $x240 false)))
 ))
 (let (($x325 (and $x14 $x283)))
 (let (($x228 (= $x325 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x357 (bvneg ?x238)))
 (let (($x363 (= ?x357 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x326 (= $x363 true)))
 (let (($x118 (= $x326 true)))
 (let (($x341 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x263 (= $x341 true)))
 (let (($x124 (= $x263 true)))
 (let (($x324 (= $x124 true)))
 (let (($x215 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x276 (bvsub ?x278 ?x187)))
 (let (($x274 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x276) (bvult ?x278 ?x276))))
 (let (($x172 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x246 (ite $x172 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x198 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x226 (bvmul (_ bv4 64) ?x198)))
 (let ((?x253 ((_ extract 63 32) ?x226)))
 (let (($x329 (= ?x253 ?x246)))
 (let (($x40 (and $x329 $x274)))
 (let (($x208 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x211 (and $x208 $x40)))
 (let (($x301 (= true $x211)))
 (let (($x255 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (=> $x255 $x301)))
 (let (($x288 (= $x36 true)))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x244 (= $x179 true)))
 (let (($x286 (= $x244 true)))
 (let (($x148 (= $x286 true)))
 (let (($x245 (= $x255 true)))
 (let (($x212 (= $x245 true)))
 (let (($x252 (= $x212 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x166)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x78)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x196 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x196)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x102 $x37)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x141 $x98)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x107 $x170)))
 (let (($x9 (not $x77)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x114 $x105)))
 (let (($x219 (and (not $x193) $x9)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x31 $x158)))
 (let (($x106 (not $x194)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x33 $x109)))
 (let (($x174 (and (not $x120) $x106)))
 (let (($x197 (and (and (and (and (and (and $x174 $x219) $x153) $x32) $x81) $x171) $x100)))
 (let (($x133 (and $x197 $x167)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x177 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x87 (or false (or false (and (and true (or $x119 $x177)) (or $x104 $x112))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x188 (and $x5 $x133)))
 (let (($x17 (= $x188 true)))
 (let (($x202 (= $x17 true)))
 (let (($x218 (= $x202 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x135 (= $x126 true)))
 (let (($x182 (= $x135 true)))
 (let (($x8 (= $x182 true)))
 (let ((?x140 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x189 (= (_ bv0 2) ?x140)))
 (let (($x79 (= $x189 true)))
 (let (($x190 (= $x79 true)))
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x80)))
 (let (($x10 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let (($x156 (= ?x58 input.dst.llvm-%n)))
 (let (($x41 (= $x156 true)))
 (let (($x71 (= $x41 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x7 (= $x68 true)))
 (let (($x24 (and $x7 $x71)))
 (let (($x57 (and $x24 $x116)))
 (let (($x66 (and $x57 $x190)))
 (let (($x52 (and $x66 $x8)))
 (let (($x159 (and $x52 $x218)))
 (let (($x222 (and $x159 $x252)))
 (let (($x351 (and $x222 $x148)))
 (let (($x267 (and $x351 $x317)))
 (let (($x348 (and $x267 $x345)))
 (let (($x258 (and $x348 $x324)))
 (let (($x51 (and $x258 $x118)))
 (let (($x147 (and $x51 $x228)))
 (let (($x271 (and $x147 $x29)))
 (let (($x50 (and $x271 $x45)))
 (let (($x262 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x287 (and (not $x262) $x50)))
 (let (($x361 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x361 $x287)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x92 $x154)))
 (let (($x330 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x20 (and $x330 $x111)))
 (let (($x227 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x278 (_ bv3 32))))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x260 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x337 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x43 (or false (or false (and (and true (or $x337 $x260)) (or $x284 $x227))))))
 (let (($x181 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x43)))
 (let (($x241 (=> (and $x255 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x43)))
 (let (($x239 (and $x241 $x20)))
 (let (($x95 (=> $x239 $x131)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x151 (bvsge ?x213 (_ bv0 32))))
 (let (($x323 (= $x151 true)))
 (let (($x131 (= $x323 true)))
 (let (($x312 (forall ((input.ind-%var1679X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1679X)))
 (=> $x240 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1679X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1678X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1678X)))
 (= $x240 false)))
 ))
 (let (($x122 (and $x217 $x312)))
 (let (($x45 (= $x122 true)))
 (let (($x319 (forall ((input.ind-%var1673X (_ BitVec 32)) )(let ((?x339 (bvadd (bvmul input.ind-%var1673X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x339))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv2 32))) ?x300)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x339 (_ bv3 32))) ?x130)))
 (let ((?x132 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1673X)))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1673X)))
 (=> $x136 (= ?x132 ?x281)))))))))
 ))
 (let (($x70 (forall ((input.ind-%var1672X (_ BitVec 32)) )(let (($x355 (and (bvule (_ bv0 32) input.ind-%var1672X) (bvult input.ind-%var1672X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1672X)))
 (= $x136 $x355))))
 ))
 (let (($x203 (and $x70 $x319)))
 (let (($x29 (= $x203 true)))
 (let (($x283 (forall ((input.ind-%var1667X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1667X)))
 (=> $x240 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1667X) (_ bv0 32)))))
 ))
 (let (($x14 (forall ((input.ind-%var1666X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1666X)))
 (= $x240 false)))
 ))
 (let (($x325 (and $x14 $x283)))
 (let (($x228 (= $x325 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x357 (bvneg ?x238)))
 (let (($x363 (= ?x357 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x326 (= $x363 true)))
 (let (($x118 (= $x326 true)))
 (let (($x341 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x263 (= $x341 true)))
 (let (($x124 (= $x263 true)))
 (let (($x324 (= $x124 true)))
 (let (($x215 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x353 (= $x215 true)))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x276 (bvsub ?x278 ?x187)))
 (let (($x274 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x276) (bvult ?x278 ?x276))))
 (let (($x172 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x246 (ite $x172 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x198 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x226 (bvmul (_ bv4 64) ?x198)))
 (let ((?x253 ((_ extract 63 32) ?x226)))
 (let (($x329 (= ?x253 ?x246)))
 (let (($x40 (and $x329 $x274)))
 (let (($x208 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x211 (and $x208 $x40)))
 (let (($x301 (= true $x211)))
 (let (($x255 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (=> $x255 $x301)))
 (let (($x288 (= $x36 true)))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x244 (= $x179 true)))
 (let (($x286 (= $x244 true)))
 (let (($x148 (= $x286 true)))
 (let (($x245 (= $x255 true)))
 (let (($x212 (= $x245 true)))
 (let (($x252 (= $x212 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x166)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x78)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x196 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x196)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x102 $x37)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x141 $x98)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x107 $x170)))
 (let (($x9 (not $x77)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x114 $x105)))
 (let (($x219 (and (not $x193) $x9)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x31 $x158)))
 (let (($x106 (not $x194)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x33 $x109)))
 (let (($x174 (and (not $x120) $x106)))
 (let (($x197 (and (and (and (and (and (and $x174 $x219) $x153) $x32) $x81) $x171) $x100)))
 (let (($x133 (and $x197 $x167)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x177 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x87 (or false (or false (and (and true (or $x119 $x177)) (or $x104 $x112))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x188 (and $x5 $x133)))
 (let (($x17 (= $x188 true)))
 (let (($x202 (= $x17 true)))
 (let (($x218 (= $x202 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x135 (= $x126 true)))
 (let (($x182 (= $x135 true)))
 (let (($x8 (= $x182 true)))
 (let ((?x140 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x189 (= (_ bv0 2) ?x140)))
 (let (($x79 (= $x189 true)))
 (let (($x190 (= $x79 true)))
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x80)))
 (let (($x10 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (= $x10 true)))
 (let (($x116 (= $x74 true)))
 (let (($x156 (= ?x58 input.dst.llvm-%n)))
 (let (($x41 (= $x156 true)))
 (let (($x71 (= $x41 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x7 (= $x68 true)))
 (let (($x24 (and $x7 $x71)))
 (let (($x57 (and $x24 $x116)))
 (let (($x66 (and $x57 $x190)))
 (let (($x52 (and $x66 $x8)))
 (let (($x159 (and $x52 $x218)))
 (let (($x222 (and $x159 $x252)))
 (let (($x351 (and $x222 $x148)))
 (let (($x267 (and $x351 $x317)))
 (let (($x348 (and $x267 $x345)))
 (let (($x258 (and $x348 $x324)))
 (let (($x51 (and $x258 $x118)))
 (let (($x147 (and $x51 $x228)))
 (let (($x271 (and $x147 $x29)))
 (let (($x50 (and $x271 $x45)))
 (let (($x262 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x287 (and (not $x262) $x50)))
 (let (($x361 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x361 $x287)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x92 $x154)))
 (let (($x330 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x20 (and $x330 $x111)))
 (let (($x227 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x278 (_ bv3 32))))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x260 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x337 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x43 (or false (or false (and (and true (or $x337 $x260)) (or $x284 $x227))))))
 (let (($x181 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x43)))
 (let (($x241 (=> (and $x255 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x43)))
 (let (($x239 (and $x241 $x20)))
 (let (($x95 (=> $x239 $x131)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 194 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x359 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x93 (bvule ?x359 input.dst.llvm-%n)))
 (let (($x6 (= $x93 true)))
 (let (($x103 (= $x6 true)))
 (let (($x150 (forall ((input.ind-%var1697X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1697X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1697X) (_ bv0 32)))))
 ))
 (let (($x257 (forall ((input.ind-%var1696X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1696X)))
 (= $x19 false)))
 ))
 (let (($x123 (and $x257 $x150)))
 (let (($x249 (= $x123 true)))
 (let (($x309 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var1691X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x89))))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x89 (_ bv2 32))) ?x59)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x89 (_ bv3 32))) ?x275)))
 (let ((?x217 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1691X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1691X)))
 (=> $x299 (= ?x217 ?x256)))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1690X (_ BitVec 32)) )(let (($x343 (and (bvule (_ bv0 32) input.ind-%var1690X) (bvult input.ind-%var1690X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1690X)))
 (= $x299 $x343))))
 ))
 (let (($x28 (and $x319 $x309)))
 (let (($x165 (= $x28 true)))
 (let (($x250 (forall ((input.ind-%var1685X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1685X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1685X) (_ bv0 32)))))
 ))
 (let (($x325 (forall ((input.ind-%var1684X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1684X)))
 (= $x19 false)))
 ))
 (let (($x169 (and $x325 $x250)))
 (let (($x339 (= $x169 true)))
 (let ((?x357 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x363 (bvneg ?x357)))
 (let (($x326 (= ?x363 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x326 true)))
 (let (($x51 (= $x118 true)))
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x80)))
 (let (($x124 (= ?x58 input.dst.llvm-%n)))
 (let (($x324 (= $x124 true)))
 (let (($x258 (= $x324 true)))
 (let (($x313 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x345 (= $x313 true)))
 (let (($x348 (= $x345 true)))
 (let (($x341 (= $x348 true)))
 (let (($x306 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x172 (bvsub ?x278 ?x187)))
 (let (($x276 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x172) (bvult ?x278 ?x172))))
 (let (($x198 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x226 (ite $x198 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x204 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x208 (bvmul (_ bv4 64) ?x204)))
 (let ((?x175 ((_ extract 63 32) ?x208)))
 (let (($x253 (= ?x175 ?x226)))
 (let (($x298 (and $x253 $x276)))
 (let (($x351 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x207 (and $x351 $x298)))
 (let (($x274 (= true $x207)))
 (let (($x224 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (=> $x224 $x274)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x212 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x212 true)))
 (let (($x222 (= $x252 true)))
 (let (($x179 (= $x222 true)))
 (let (($x202 (= $x224 true)))
 (let (($x218 (= $x202 true)))
 (let (($x159 (= $x218 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x98)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x196)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x110)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x153 $x145)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x160 $x32)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x114 $x105)))
 (let (($x191 (not $x193)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x194 $x106)))
 (let (($x170 (and (not $x174) $x191)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x33 $x109)))
 (let (($x44 (not $x120)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x182 $x8)))
 (let (($x158 (and (not $x5) $x44)))
 (let (($x100 (and (and (and (and (and (and $x158 $x170) $x9) $x206) $x186) $x102) $x37)))
 (let (($x197 (and $x100 $x81)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x163 (or false (or false (and (and true (or $x64 $x173)) (or $x23 $x12))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x166 (and $x87 $x197)))
 (let (($x167 (= $x166 true)))
 (let (($x133 (= $x167 true)))
 (let (($x188 (= $x133 true)))
 (let (($x189 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x79 (= $x189 true)))
 (let (($x190 (= $x79 true)))
 (let (($x66 (= $x190 true)))
 (let ((?x74 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x116 (= (_ bv0 2) ?x74)))
 (let (($x57 (= $x116 true)))
 (let (($x56 (= $x57 true)))
 (let (($x156 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x156 true)))
 (let (($x71 (= $x41 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x7 (= $x68 true)))
 (let (($x24 (and $x7 $x71)))
 (let (($x140 (and $x24 $x56)))
 (let (($x126 (and $x140 $x66)))
 (let (($x17 (and $x126 $x188)))
 (let (($x245 (and $x17 $x159)))
 (let (($x244 (and $x245 $x179)))
 (let (($x288 (and $x244 $x36)))
 (let (($x353 (and $x288 $x215)))
 (let (($x263 (and $x353 $x341)))
 (let (($x238 (and $x263 $x258)))
 (let (($x90 (and $x238 $x51)))
 (let (($x161 (and $x90 $x339)))
 (let (($x251 (and $x161 $x165)))
 (let (($x352 (and $x251 $x249)))
 (let (($x60 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x60) $x352)))
 (let (($x311 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x311 $x200)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x303 (and $x84 $x115)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x38 $x303)))
 (let (($x13 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x260 (bvadd ?x278 (_ bv3 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x260)))
 (let (($x72 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x260)))
 (let (($x241 (or false (or false (and (and true (or $x261 $x72)) (or $x113 $x13))))))
 (let (($x330 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x241)))
 (let (($x331 (=> (and $x224 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x241)))
 (let (($x259 (and $x331 $x18)))
 (let (($x332 (=> $x259 $x103)))
 (not $x332))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x359 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x93 (bvule ?x359 input.dst.llvm-%n)))
 (let (($x6 (= $x93 true)))
 (let (($x103 (= $x6 true)))
 (let (($x150 (forall ((input.ind-%var1697X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1697X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1697X) (_ bv0 32)))))
 ))
 (let (($x257 (forall ((input.ind-%var1696X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1696X)))
 (= $x19 false)))
 ))
 (let (($x123 (and $x257 $x150)))
 (let (($x249 (= $x123 true)))
 (let (($x309 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var1691X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x89))))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x89 (_ bv2 32))) ?x59)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x89 (_ bv3 32))) ?x275)))
 (let ((?x217 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1691X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1691X)))
 (=> $x299 (= ?x217 ?x256)))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1690X (_ BitVec 32)) )(let (($x343 (and (bvule (_ bv0 32) input.ind-%var1690X) (bvult input.ind-%var1690X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1690X)))
 (= $x299 $x343))))
 ))
 (let (($x28 (and $x319 $x309)))
 (let (($x165 (= $x28 true)))
 (let (($x250 (forall ((input.ind-%var1685X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1685X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1685X) (_ bv0 32)))))
 ))
 (let (($x325 (forall ((input.ind-%var1684X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1684X)))
 (= $x19 false)))
 ))
 (let (($x169 (and $x325 $x250)))
 (let (($x339 (= $x169 true)))
 (let ((?x357 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x363 (bvneg ?x357)))
 (let (($x326 (= ?x363 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x326 true)))
 (let (($x51 (= $x118 true)))
 (let ((?x80 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x80)))
 (let (($x124 (= ?x58 input.dst.llvm-%n)))
 (let (($x324 (= $x124 true)))
 (let (($x258 (= $x324 true)))
 (let (($x313 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x345 (= $x313 true)))
 (let (($x348 (= $x345 true)))
 (let (($x341 (= $x348 true)))
 (let (($x306 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x215 (= $x267 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x172 (bvsub ?x278 ?x187)))
 (let (($x276 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x172) (bvult ?x278 ?x172))))
 (let (($x198 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x226 (ite $x198 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x204 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x208 (bvmul (_ bv4 64) ?x204)))
 (let ((?x175 ((_ extract 63 32) ?x208)))
 (let (($x253 (= ?x175 ?x226)))
 (let (($x298 (and $x253 $x276)))
 (let (($x351 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x207 (and $x351 $x298)))
 (let (($x274 (= true $x207)))
 (let (($x224 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (=> $x224 $x274)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let (($x36 (= $x301 true)))
 (let (($x212 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x212 true)))
 (let (($x222 (= $x252 true)))
 (let (($x179 (= $x222 true)))
 (let (($x202 (= $x224 true)))
 (let (($x218 (= $x202 true)))
 (let (($x159 (= $x218 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x98)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x196)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x110)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x153 $x145)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x160 $x32)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x114 $x105)))
 (let (($x191 (not $x193)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x194 $x106)))
 (let (($x170 (and (not $x174) $x191)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x33 $x109)))
 (let (($x44 (not $x120)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x182 $x8)))
 (let (($x158 (and (not $x5) $x44)))
 (let (($x100 (and (and (and (and (and (and $x158 $x170) $x9) $x206) $x186) $x102) $x37)))
 (let (($x197 (and $x100 $x81)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x163 (or false (or false (and (and true (or $x64 $x173)) (or $x23 $x12))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x166 (and $x87 $x197)))
 (let (($x167 (= $x166 true)))
 (let (($x133 (= $x167 true)))
 (let (($x188 (= $x133 true)))
 (let (($x189 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x79 (= $x189 true)))
 (let (($x190 (= $x79 true)))
 (let (($x66 (= $x190 true)))
 (let ((?x74 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x116 (= (_ bv0 2) ?x74)))
 (let (($x57 (= $x116 true)))
 (let (($x56 (= $x57 true)))
 (let (($x156 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x156 true)))
 (let (($x71 (= $x41 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x7 (= $x68 true)))
 (let (($x24 (and $x7 $x71)))
 (let (($x140 (and $x24 $x56)))
 (let (($x126 (and $x140 $x66)))
 (let (($x17 (and $x126 $x188)))
 (let (($x245 (and $x17 $x159)))
 (let (($x244 (and $x245 $x179)))
 (let (($x288 (and $x244 $x36)))
 (let (($x353 (and $x288 $x215)))
 (let (($x263 (and $x353 $x341)))
 (let (($x238 (and $x263 $x258)))
 (let (($x90 (and $x238 $x51)))
 (let (($x161 (and $x90 $x339)))
 (let (($x251 (and $x161 $x165)))
 (let (($x352 (and $x251 $x249)))
 (let (($x60 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x60) $x352)))
 (let (($x311 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x311 $x200)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x303 (and $x84 $x115)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x38 $x303)))
 (let (($x13 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x260 (bvadd ?x278 (_ bv3 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x260)))
 (let (($x72 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x260)))
 (let (($x241 (or false (or false (and (and true (or $x261 $x72)) (or $x113 $x13))))))
 (let (($x330 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x241)))
 (let (($x331 (=> (and $x224 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x241)))
 (let (($x259 (and $x331 $x18)))
 (let (($x332 (=> $x259 $x103)))
 (not $x332))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x334 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let ((?x312 (bvadd (bvmul input.ind-%var1723X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x72 (bvadd ?x278 (_ bv3 32))))
 (let ((?x164 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x214 (store ?x164 (bvadd ?x278 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x22 (store ?x214 (bvadd ?x278 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x54 (store ?x22 ?x72 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x344 (concat (select ?x54 (bvadd ?x312 (_ bv2 32))) (concat (select ?x54 (bvadd ?x312 (_ bv1 32))) (select ?x54 ?x312)))))
 (let ((?x257 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1723X)))
 (let (($x327 (= input.ind-%var1723X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x336 (= (ite $x327 input.spec-%var-i-0.L3%6%bbentry ?x257) (concat (select ?x54 (bvadd ?x312 (_ bv3 32))) ?x344))))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1723X)))
 (let (($x292 (or $x338 $x327)))
 (=> $x292 $x336))))))))))))))))
 ))
 (let (($x143 (forall ((input.ind-%var1722X (_ BitVec 32)) )(let (($x256 (bvule (_ bv0 32) input.ind-%var1722X)))
 (let (($x82 (and $x256 (bvult input.ind-%var1722X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x327 (= input.ind-%var1722X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1722X)))
 (let (($x292 (or $x338 $x327)))
 (= $x292 $x82)))))))
 ))
 (let (($x333 (and $x143 $x334)))
 (let (($x29 (= true true)))
 (let (($x266 (and $x29 $x333)))
 (let (($x155 (= $x266 true)))
 (let (($x355 (forall ((input.ind-%var1715X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1715X)))
 (=> $x183 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1715X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1714X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1714X)))
 (= $x183 false)))
 ))
 (let (($x144 (and $x287 $x355)))
 (let (($x232 (= $x144 true)))
 (let (($x50 (forall ((input.ind-%var1709X (_ BitVec 32)) )(let ((?x312 (bvadd (bvmul input.ind-%var1709X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x312))))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv2 32))) ?x136)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv3 32))) ?x35)))
 (let ((?x257 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1709X)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1709X)))
 (=> $x338 (= ?x257 ?x240)))))))))
 ))
 (let (($x309 (forall ((input.ind-%var1708X (_ BitVec 32)) )(let (($x256 (bvule (_ bv0 32) input.ind-%var1708X)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1708X)))
 (= $x338 (and $x256 (bvult input.ind-%var1708X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x131 (and $x309 $x50)))
 (let (($x95 (= $x131 true)))
 (let (($x122 (forall ((input.ind-%var1703X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1703X)))
 (=> $x183 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1703X) (_ bv0 32)))))
 ))
 (let (($x169 (forall ((input.ind-%var1702X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1702X)))
 (= $x183 false)))
 ))
 (let (($x307 (and $x169 $x122)))
 (let (($x89 (= $x307 true)))
 (let ((?x363 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x326 (bvneg ?x363)))
 (let (($x118 (= ?x326 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x118 true)))
 (let (($x90 (= $x51 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x324 (= (_ bv0 2) ?x124)))
 (let (($x258 (= $x324 true)))
 (let (($x238 (= $x258 true)))
 (let (($x353 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x348 (= $x345 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x274 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x274 true)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x204 (bvsub ?x278 ?x187)))
 (let (($x226 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x204) (bvult ?x278 ?x204))))
 (let (($x148 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x351 (ite $x148 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x179 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x244 (bvmul (_ bv4 64) ?x179)))
 (let ((?x286 ((_ extract 63 32) ?x244)))
 (let (($x185 (= ?x286 ?x351)))
 (let (($x253 (and $x185 $x226)))
 (let (($x252 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x246 (and $x252 $x253)))
 (let (($x172 (= true $x246)))
 (let (($x216 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x329 (=> $x216 $x172)))
 (let (($x209 (= $x329 true)))
 (let (($x276 (= $x209 true)))
 (let (($x298 (= $x276 true)))
 (let (($x188 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x17 (= $x188 true)))
 (let (($x202 (= $x17 true)))
 (let (($x218 (= $x202 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x197 (= $x81 true)))
 (let (($x166 (= $x197 true)))
 (let (($x167 (= $x166 true)))
 (let (($x78 (= $x216 true)))
 (let (($x196 (= $x78 true)))
 (let (($x37 (= $x196 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x9)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x178)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x107)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x174 $x114)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x106 $x105)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x182 $x8)))
 (let (($x31 (not $x5)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x138 $x163)))
 (let (($x109 (and (not $x87) $x31)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x119 $x177)))
 (let (($x12 (not $x23)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x24 $x10)))
 (let (($x112 (and (not $x173) $x12)))
 (let (($x110 (and (and (and (and (and (and $x112 $x109) $x44) $x194) $x193) $x170) $x77)))
 (let (($x145 (and $x110 $x157)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x101 (or false (or false (and (and true (or $x56 $x140)) (or $x190 $x66))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x32 (and $x64 $x145)))
 (let (($x186 (= $x32 true)))
 (let (($x139 (= $x186 true)))
 (let (($x141 (= $x139 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x16)))
 (let (($x80 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (= $x80 true)))
 (let (($x156 (= $x58 true)))
 (let (($x68 (= ?x76 input.dst.llvm-%n)))
 (let (($x7 (= $x68 true)))
 (let (($x168 (= $x7 true)))
 (let (($x41 (and $x168 $x156)))
 (let (($x102 (and $x41 $x141)))
 (let (($x100 (and $x102 $x37)))
 (let (($x133 (and $x100 $x167)))
 (let (($x159 (and $x133 $x218)))
 (let (($x207 (and $x159 $x298)))
 (let (($x36 (and $x207 $x301)))
 (let (($x215 (and $x36 $x267)))
 (let (($x341 (and $x215 $x348)))
 (let (($x357 (and $x341 $x238)))
 (let (($x14 (and $x357 $x90)))
 (let (($x199 (and $x14 $x89)))
 (let (($x213 (and $x199 $x95)))
 (let (($x61 (and $x213 $x232)))
 (let (($x349 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (and (not $x349) $x61)))
 (let (($x262 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x147 (and $x262 $x300)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x91 (and $x26 $x147)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x242 (and $x69 $x91)))
 (let (($x43 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd ?x278 (_ bv3 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x284 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x331 (or false (or false (and (and true (or $x291 $x284)) (or $x162 $x43))))))
 (let (($x38 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x331)))
 (let (($x295 (=> (and $x216 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x331)))
 (let (($x176 (and $x295 $x242)))
 (let (($x83 (=> $x176 $x155)))
 (not $x83))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x334 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let ((?x312 (bvadd (bvmul input.ind-%var1723X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x72 (bvadd ?x278 (_ bv3 32))))
 (let ((?x164 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x214 (store ?x164 (bvadd ?x278 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x22 (store ?x214 (bvadd ?x278 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x54 (store ?x22 ?x72 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x344 (concat (select ?x54 (bvadd ?x312 (_ bv2 32))) (concat (select ?x54 (bvadd ?x312 (_ bv1 32))) (select ?x54 ?x312)))))
 (let ((?x257 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1723X)))
 (let (($x327 (= input.ind-%var1723X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x336 (= (ite $x327 input.spec-%var-i-0.L3%6%bbentry ?x257) (concat (select ?x54 (bvadd ?x312 (_ bv3 32))) ?x344))))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1723X)))
 (let (($x292 (or $x338 $x327)))
 (=> $x292 $x336))))))))))))))))
 ))
 (let (($x143 (forall ((input.ind-%var1722X (_ BitVec 32)) )(let (($x256 (bvule (_ bv0 32) input.ind-%var1722X)))
 (let (($x82 (and $x256 (bvult input.ind-%var1722X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x327 (= input.ind-%var1722X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1722X)))
 (let (($x292 (or $x338 $x327)))
 (= $x292 $x82)))))))
 ))
 (let (($x333 (and $x143 $x334)))
 (let (($x29 (= true true)))
 (let (($x266 (and $x29 $x333)))
 (let (($x155 (= $x266 true)))
 (let (($x355 (forall ((input.ind-%var1715X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1715X)))
 (=> $x183 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1715X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1714X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1714X)))
 (= $x183 false)))
 ))
 (let (($x144 (and $x287 $x355)))
 (let (($x232 (= $x144 true)))
 (let (($x50 (forall ((input.ind-%var1709X (_ BitVec 32)) )(let ((?x312 (bvadd (bvmul input.ind-%var1709X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x312))))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv2 32))) ?x136)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv3 32))) ?x35)))
 (let ((?x257 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1709X)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1709X)))
 (=> $x338 (= ?x257 ?x240)))))))))
 ))
 (let (($x309 (forall ((input.ind-%var1708X (_ BitVec 32)) )(let (($x256 (bvule (_ bv0 32) input.ind-%var1708X)))
 (let (($x338 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1708X)))
 (= $x338 (and $x256 (bvult input.ind-%var1708X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x131 (and $x309 $x50)))
 (let (($x95 (= $x131 true)))
 (let (($x122 (forall ((input.ind-%var1703X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1703X)))
 (=> $x183 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1703X) (_ bv0 32)))))
 ))
 (let (($x169 (forall ((input.ind-%var1702X (_ BitVec 32)) )(let (($x183 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1702X)))
 (= $x183 false)))
 ))
 (let (($x307 (and $x169 $x122)))
 (let (($x89 (= $x307 true)))
 (let ((?x363 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x326 (bvneg ?x363)))
 (let (($x118 (= ?x326 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x118 true)))
 (let (($x90 (= $x51 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x324 (= (_ bv0 2) ?x124)))
 (let (($x258 (= $x324 true)))
 (let (($x238 (= $x258 true)))
 (let (($x353 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x313 (= $x353 true)))
 (let (($x345 (= $x313 true)))
 (let (($x348 (= $x345 true)))
 (let (($x288 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (= $x288 true)))
 (let (($x317 (= $x306 true)))
 (let (($x267 (= $x317 true)))
 (let (($x274 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x274 true)))
 (let (($x211 (= $x40 true)))
 (let (($x301 (= $x211 true)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let ((?x204 (bvsub ?x278 ?x187)))
 (let (($x226 (ite (bvsge ?x187 (_ bv0 32)) (bvuge ?x278 ?x204) (bvult ?x278 ?x204))))
 (let (($x148 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x351 (ite $x148 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x179 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x244 (bvmul (_ bv4 64) ?x179)))
 (let ((?x286 ((_ extract 63 32) ?x244)))
 (let (($x185 (= ?x286 ?x351)))
 (let (($x253 (and $x185 $x226)))
 (let (($x252 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x246 (and $x252 $x253)))
 (let (($x172 (= true $x246)))
 (let (($x216 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x329 (=> $x216 $x172)))
 (let (($x209 (= $x329 true)))
 (let (($x276 (= $x209 true)))
 (let (($x298 (= $x276 true)))
 (let (($x188 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x17 (= $x188 true)))
 (let (($x202 (= $x17 true)))
 (let (($x218 (= $x202 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x197 (= $x81 true)))
 (let (($x166 (= $x197 true)))
 (let (($x167 (= $x166 true)))
 (let (($x78 (= $x216 true)))
 (let (($x196 (= $x78 true)))
 (let (($x37 (= $x196 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x9)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x178)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x107)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x174 $x114)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x106 $x105)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x182 $x8)))
 (let (($x31 (not $x5)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x138 $x163)))
 (let (($x109 (and (not $x87) $x31)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x119 $x177)))
 (let (($x12 (not $x23)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x24 $x10)))
 (let (($x112 (and (not $x173) $x12)))
 (let (($x110 (and (and (and (and (and (and $x112 $x109) $x44) $x194) $x193) $x170) $x77)))
 (let (($x145 (and $x110 $x157)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x101 (or false (or false (and (and true (or $x56 $x140)) (or $x190 $x66))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x32 (and $x64 $x145)))
 (let (($x186 (= $x32 true)))
 (let (($x139 (= $x186 true)))
 (let (($x141 (= $x139 true)))
 (let ((?x16 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x16)))
 (let (($x80 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (= $x80 true)))
 (let (($x156 (= $x58 true)))
 (let (($x68 (= ?x76 input.dst.llvm-%n)))
 (let (($x7 (= $x68 true)))
 (let (($x168 (= $x7 true)))
 (let (($x41 (and $x168 $x156)))
 (let (($x102 (and $x41 $x141)))
 (let (($x100 (and $x102 $x37)))
 (let (($x133 (and $x100 $x167)))
 (let (($x159 (and $x133 $x218)))
 (let (($x207 (and $x159 $x298)))
 (let (($x36 (and $x207 $x301)))
 (let (($x215 (and $x36 $x267)))
 (let (($x341 (and $x215 $x348)))
 (let (($x357 (and $x341 $x238)))
 (let (($x14 (and $x357 $x90)))
 (let (($x199 (and $x14 $x89)))
 (let (($x213 (and $x199 $x95)))
 (let (($x61 (and $x213 $x232)))
 (let (($x349 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (and (not $x349) $x61)))
 (let (($x262 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x147 (and $x262 $x300)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x91 (and $x26 $x147)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x242 (and $x69 $x91)))
 (let (($x43 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd ?x278 (_ bv3 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x284 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x331 (or false (or false (and (and true (or $x291 $x284)) (or $x162 $x43))))))
 (let (($x38 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x331)))
 (let (($x295 (=> (and $x216 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x331)))
 (let (($x176 (and $x295 $x242)))
 (let (($x83 (=> $x176 $x155)))
 (not $x83))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 83
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x285 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x354 (not $x285)))
 (let (($x234 (= $x354 false)))
 (let (($x22 (= $x234 true)))
 (let (($x143 (forall ((input.ind-%var1741X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1741X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1741X) (_ bv0 32)))))
 ))
 (let (($x327 (forall ((input.ind-%var1740X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1740X)))
 (= $x301 false)))
 ))
 (let (($x86 (and $x327 $x143)))
 (let (($x97 (= $x86 true)))
 (let (($x61 (forall ((input.ind-%var1735X (_ BitVec 32)) )(let ((?x136 (bvadd (bvmul input.ind-%var1735X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x136))))
 (let ((?x95 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv2 32))) ?x45)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv3 32))) ?x95)))
 (let ((?x199 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1735X)))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1735X)))
 (=> $x118 (= ?x199 ?x355)))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1734X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var1734X) (bvult input.ind-%var1734X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1734X)))
 (= $x118 $x281))))
 ))
 (let (($x300 (and $x217 $x61)))
 (let (($x147 (= $x300 true)))
 (let (($x324 (forall ((input.ind-%var1729X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1729X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1729X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1728X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1728X)))
 (= $x301 false)))
 ))
 (let (($x258 (and $x317 $x324)))
 (let (($x238 (= $x258 true)))
 (let ((?x172 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x172)))
 (let (($x209 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x209 true)))
 (let (($x298 (= $x276 true)))
 (let ((?x168 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x168)))
 (let (($x198 (= ?x80 input.dst.llvm-%n)))
 (let (($x226 (= $x198 true)))
 (let (($x253 (= $x226 true)))
 (let (($x351 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x351 true)))
 (let (($x208 (= $x185 true)))
 (let (($x204 (= $x208 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x222 true)))
 (let (($x244 (= $x179 true)))
 (let (($x286 (= $x244 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x218 true)))
 (let (($x245 (= $x159 true)))
 (let (($x212 (= $x245 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x102)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x139)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x110)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (and $x77 $x9)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x178 $x157)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x106 $x174)))
 (let (($x114 (not $x107)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (and $x158 $x194)))
 (let (($x193 (and (not $x171) $x114)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x31 $x109)))
 (let (($x120 (not $x219)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x101 $x64)))
 (let (($x206 (and (not $x5) $x120)))
 (let (($x197 (and (and (and (and (and (and $x206 $x193) $x191) $x153) $x145) $x186) $x141)))
 (let (($x166 (and $x197 $x78)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x33 (or false (or false (and (and true (or $x104 $x119)) (or $x12 $x112))))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x33)))
 (let (($x167 (and $x8 $x166)))
 (let (($x133 (= $x167 true)))
 (let (($x188 (= $x133 true)))
 (let (($x17 (= $x188 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x190 (= $x79 true)))
 (let (($x66 (= $x190 true)))
 (let (($x126 (= $x66 true)))
 (let ((?x75 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x57 (= (_ bv0 2) ?x75)))
 (let (($x56 (= $x57 true)))
 (let (($x140 (= $x56 true)))
 (let (($x58 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (= $x58 true)))
 (let (($x41 (= $x156 true)))
 (let (($x46 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x16 (= $x46 true)))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x74 (and $x68 $x41)))
 (let (($x189 (and $x74 $x140)))
 (let (($x52 (and $x189 $x126)))
 (let (($x202 (and $x52 $x17)))
 (let (($x252 (and $x202 $x212)))
 (let (($x148 (and $x252 $x286)))
 (let (($x175 (and $x148 $x204)))
 (let (($x246 (and $x175 $x253)))
 (let (($x207 (and $x246 $x298)))
 (let (($x357 (and $x207 $x238)))
 (let (($x91 (and $x357 $x147)))
 (let (($x201 (and $x91 $x97)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x60 $x201)))
 (let (($x361 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x65 (and $x361 $x164)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x92 $x65)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let (($x241 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x284 (bvadd ?x278 (_ bv3 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x284)))
 (let (($x113 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x284)))
 (let (($x295 (or false (or false (and (and true (or $x279 $x113)) (or $x181 $x241))))))
 (let (($x69 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x295)))
 (let (($x254 (=> (and $x285 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x295)))
 (let (($x214 (and $x254 $x99)))
 (let (($x48 (=> $x214 $x22)))
 (not $x48))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x285 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x354 (not $x285)))
 (let (($x234 (= $x354 false)))
 (let (($x22 (= $x234 true)))
 (let (($x143 (forall ((input.ind-%var1741X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1741X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1741X) (_ bv0 32)))))
 ))
 (let (($x327 (forall ((input.ind-%var1740X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1740X)))
 (= $x301 false)))
 ))
 (let (($x86 (and $x327 $x143)))
 (let (($x97 (= $x86 true)))
 (let (($x61 (forall ((input.ind-%var1735X (_ BitVec 32)) )(let ((?x136 (bvadd (bvmul input.ind-%var1735X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x136))))
 (let ((?x95 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv2 32))) ?x45)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x136 (_ bv3 32))) ?x95)))
 (let ((?x199 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1735X)))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1735X)))
 (=> $x118 (= ?x199 ?x355)))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1734X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var1734X) (bvult input.ind-%var1734X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1734X)))
 (= $x118 $x281))))
 ))
 (let (($x300 (and $x217 $x61)))
 (let (($x147 (= $x300 true)))
 (let (($x324 (forall ((input.ind-%var1729X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1729X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1729X) (_ bv0 32)))))
 ))
 (let (($x317 (forall ((input.ind-%var1728X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1728X)))
 (= $x301 false)))
 ))
 (let (($x258 (and $x317 $x324)))
 (let (($x238 (= $x258 true)))
 (let ((?x172 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x172)))
 (let (($x209 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x209 true)))
 (let (($x298 (= $x276 true)))
 (let ((?x168 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x168)))
 (let (($x198 (= ?x80 input.dst.llvm-%n)))
 (let (($x226 (= $x198 true)))
 (let (($x253 (= $x226 true)))
 (let (($x351 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x351 true)))
 (let (($x208 (= $x185 true)))
 (let (($x204 (= $x208 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x222 true)))
 (let (($x244 (= $x179 true)))
 (let (($x286 (= $x244 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x218 true)))
 (let (($x245 (= $x159 true)))
 (let (($x212 (= $x245 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x102)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x139)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x110)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (and $x77 $x9)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x178 $x157)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x106 $x174)))
 (let (($x114 (not $x107)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (and $x158 $x194)))
 (let (($x193 (and (not $x171) $x114)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x31 $x109)))
 (let (($x120 (not $x219)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x101 $x64)))
 (let (($x206 (and (not $x5) $x120)))
 (let (($x197 (and (and (and (and (and (and $x206 $x193) $x191) $x153) $x145) $x186) $x141)))
 (let (($x166 (and $x197 $x78)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x33 (or false (or false (and (and true (or $x104 $x119)) (or $x12 $x112))))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x33)))
 (let (($x167 (and $x8 $x166)))
 (let (($x133 (= $x167 true)))
 (let (($x188 (= $x133 true)))
 (let (($x17 (= $x188 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x190 (= $x79 true)))
 (let (($x66 (= $x190 true)))
 (let (($x126 (= $x66 true)))
 (let ((?x75 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x57 (= (_ bv0 2) ?x75)))
 (let (($x56 (= $x57 true)))
 (let (($x140 (= $x56 true)))
 (let (($x58 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (= $x58 true)))
 (let (($x41 (= $x156 true)))
 (let (($x46 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x16 (= $x46 true)))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x74 (and $x68 $x41)))
 (let (($x189 (and $x74 $x140)))
 (let (($x52 (and $x189 $x126)))
 (let (($x202 (and $x52 $x17)))
 (let (($x252 (and $x202 $x212)))
 (let (($x148 (and $x252 $x286)))
 (let (($x175 (and $x148 $x204)))
 (let (($x246 (and $x175 $x253)))
 (let (($x207 (and $x246 $x298)))
 (let (($x357 (and $x207 $x238)))
 (let (($x91 (and $x357 $x147)))
 (let (($x201 (and $x91 $x97)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x60 $x201)))
 (let (($x361 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x65 (and $x361 $x164)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x92 $x65)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let (($x241 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x284 (bvadd ?x278 (_ bv3 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x284)))
 (let (($x113 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x284)))
 (let (($x295 (or false (or false (and (and true (or $x279 $x113)) (or $x181 $x241))))))
 (let (($x69 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x295)))
 (let (($x254 (=> (and $x285 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x295)))
 (let (($x214 (and $x254 $x99)))
 (let (($x48 (=> $x214 $x22)))
 (not $x48))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x0c68937c)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0c68937c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5821f9d4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xcc84a770)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0c68937c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0c68937c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xcc84a773)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5821f9d7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xcc84a770)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5821f9d4)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x0c68937c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!9 (bvmul #x00000004 x!0)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0c68937c x!0)
         (ite (bvule #x0c68937d x!0) #x0c68937d #x0c68937c)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x456f6880)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x456f6880)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x456f6880)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x456f6880)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x456f6880)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!1 (bvmul #x00000004 x!0))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x456f6880 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 84
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x285 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (or $x228 $x285)))
 (let (($x273 (= $x82 true)))
 (let (($x362 (= $x273 true)))
 (let (($x242 (forall ((input.ind-%var1795X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1795X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1795X) (_ bv0 32)))))
 ))
 (let (($x271 (forall ((input.ind-%var1794X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1794X)))
 (= $x263 false)))
 ))
 (let (($x176 (and $x271 $x242)))
 (let (($x183 (= $x176 true)))
 (let (($x312 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let ((?x267 (bvadd (bvmul input.ind-%var1789X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x363 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x363)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x274)))
 (let ((?x143 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1789X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1789X)))
 (=> $x131 (= ?x143 ?x53)))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1788X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var1788X) (bvult input.ind-%var1788X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1788X)))
 (= $x131 $x232))))
 ))
 (let (($x55 (and $x300 $x312)))
 (let (($x309 (= $x55 true)))
 (let (($x316 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1783X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1783X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1782X)))
 (= $x263 false)))
 ))
 (let (($x136 (and $x238 $x316)))
 (let (($x213 (= $x136 true)))
 (let ((?x209 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x209)))
 (let (($x298 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x298 true)))
 (let (($x211 (= $x207 true)))
 (let ((?x185 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x185)))
 (let (($x253 (= ?x208 input.dst.llvm-%n)))
 (let (($x246 (= $x253 true)))
 (let (($x172 (= $x246 true)))
 (let (($x204 (= ?x208 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (= $x204 true)))
 (let (($x198 (= $x175 true)))
 (let (($x222 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x179 (= $x222 true)))
 (let (($x244 (= $x179 true)))
 (let (($x286 (= $x244 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x159 (= $x218 true)))
 (let (($x245 (= $x159 true)))
 (let (($x212 (= $x245 true)))
 (let (($x167 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x133 (= $x167 true)))
 (let (($x188 (= $x133 true)))
 (let (($x17 (= $x188 true)))
 (let (($x141 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x197 (= $x141 true)))
 (let (($x102 (= $x197 true)))
 (let (($x78 (= $x102 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x145 true)))
 (let (($x32 (= $x98 true)))
 (let (($x186 (= $x32 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x107)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x106)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x219 $x206)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x109 $x158)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x138 $x163)))
 (let (($x33 (not $x87)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x23 $x12)))
 (let (($x101 (and (not $x112) $x33)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x10 $x182)))
 (let (($x104 (not $x173)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x168 $x80)))
 (let (($x177 (and (not $x24) $x104)))
 (let (($x170 (and (and (and (and (and (and $x177 $x101) $x5) $x31) $x194) $x105) $x174)))
 (let (($x153 (and $x170 $x114)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x66 (or false (or false (and (and true (or $x74 $x116)) (or $x56 $x140))))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x100 (and $x52 $x153)))
 (let (($x178 (= $x100 true)))
 (let (($x77 (= $x178 true)))
 (let (($x110 (= $x77 true)))
 (let ((?x46 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x16 (= (_ bv0 2) ?x46)))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x9 (and $x68 $x110)))
 (let (($x81 (and $x9 $x186)))
 (let (($x166 (and $x81 $x78)))
 (let (($x202 (and $x166 $x17)))
 (let (($x252 (and $x202 $x212)))
 (let (($x148 (and $x252 $x286)))
 (let (($x226 (and $x148 $x198)))
 (let (($x329 (and $x226 $x172)))
 (let (($x301 (and $x329 $x211)))
 (let (($x287 (and $x301 $x213)))
 (let (($x257 (and $x287 $x309)))
 (let (($x215 (and $x257 $x183)))
 (let (($x349 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x341 (and $x349 $x215)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x149 (and $x311 $x341)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x84 $x149)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let (($x331 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd ?x278 (_ bv3 32))))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x162 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x254 (or false (or false (and (and true (or $x227 $x162)) (or $x330 $x331))))))
 (let (($x92 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x254)))
 (let (($x260 (=> (and $x285 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x254)))
 (let (($x307 (and $x260 $x29)))
 (let (($x220 (=> $x307 $x362)))
 (not $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x285 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x228 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (or $x228 $x285)))
 (let (($x273 (= $x82 true)))
 (let (($x362 (= $x273 true)))
 (let (($x242 (forall ((input.ind-%var1795X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1795X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1795X) (_ bv0 32)))))
 ))
 (let (($x271 (forall ((input.ind-%var1794X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1794X)))
 (= $x263 false)))
 ))
 (let (($x176 (and $x271 $x242)))
 (let (($x183 (= $x176 true)))
 (let (($x312 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let ((?x267 (bvadd (bvmul input.ind-%var1789X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x363 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x363)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x274)))
 (let ((?x143 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1789X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1789X)))
 (=> $x131 (= ?x143 ?x53)))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1788X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var1788X) (bvult input.ind-%var1788X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1788X)))
 (= $x131 $x232))))
 ))
 (let (($x55 (and $x300 $x312)))
 (let (($x309 (= $x55 true)))
 (let (($x316 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1783X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1783X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1782X)))
 (= $x263 false)))
 ))
 (let (($x136 (and $x238 $x316)))
 (let (($x213 (= $x136 true)))
 (let ((?x209 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x209)))
 (let (($x298 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x298 true)))
 (let (($x211 (= $x207 true)))
 (let ((?x185 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x185)))
 (let (($x253 (= ?x208 input.dst.llvm-%n)))
 (let (($x246 (= $x253 true)))
 (let (($x172 (= $x246 true)))
 (let (($x204 (= ?x208 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (= $x204 true)))
 (let (($x198 (= $x175 true)))
 (let (($x222 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x179 (= $x222 true)))
 (let (($x244 (= $x179 true)))
 (let (($x286 (= $x244 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x159 (= $x218 true)))
 (let (($x245 (= $x159 true)))
 (let (($x212 (= $x245 true)))
 (let (($x167 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x133 (= $x167 true)))
 (let (($x188 (= $x133 true)))
 (let (($x17 (= $x188 true)))
 (let (($x141 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x197 (= $x141 true)))
 (let (($x102 (= $x197 true)))
 (let (($x78 (= $x102 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x145 true)))
 (let (($x32 (= $x98 true)))
 (let (($x186 (= $x32 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x107)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x106)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x219 $x206)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x109 $x158)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x138 $x163)))
 (let (($x33 (not $x87)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x23 $x12)))
 (let (($x101 (and (not $x112) $x33)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x10 $x182)))
 (let (($x104 (not $x173)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x168 $x80)))
 (let (($x177 (and (not $x24) $x104)))
 (let (($x170 (and (and (and (and (and (and $x177 $x101) $x5) $x31) $x194) $x105) $x174)))
 (let (($x153 (and $x170 $x114)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x66 (or false (or false (and (and true (or $x74 $x116)) (or $x56 $x140))))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x100 (and $x52 $x153)))
 (let (($x178 (= $x100 true)))
 (let (($x77 (= $x178 true)))
 (let (($x110 (= $x77 true)))
 (let ((?x46 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x16 (= (_ bv0 2) ?x46)))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x9 (and $x68 $x110)))
 (let (($x81 (and $x9 $x186)))
 (let (($x166 (and $x81 $x78)))
 (let (($x202 (and $x166 $x17)))
 (let (($x252 (and $x202 $x212)))
 (let (($x148 (and $x252 $x286)))
 (let (($x226 (and $x148 $x198)))
 (let (($x329 (and $x226 $x172)))
 (let (($x301 (and $x329 $x211)))
 (let (($x287 (and $x301 $x213)))
 (let (($x257 (and $x287 $x309)))
 (let (($x215 (and $x257 $x183)))
 (let (($x349 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x341 (and $x349 $x215)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x149 (and $x311 $x341)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x84 $x149)))
 (let ((?x187 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd input.dst.llvm-%m ?x187)))
 (let (($x331 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd ?x278 (_ bv3 32))))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x162 (bvugt ?x278 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x254 (or false (or false (and (and true (or $x227 $x162)) (or $x330 $x331))))))
 (let (($x92 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) $x254)))
 (let (($x260 (=> (and $x285 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) $x254)))
 (let (($x307 (and $x260 $x29)))
 (let (($x220 (=> $x307 $x362)))
 (not $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 85
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x266 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var1819X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x307))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv2 32))) ?x362)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv3 32))) ?x255)))
 (let ((?x14 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1819X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1819X)))
 (=> $x131 (= ?x14 ?x86)))))))))
 ))
 (let (($x338 (forall ((input.ind-%var1818X (_ BitVec 32)) )(let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1818X)))
 (= $x131 (and (bvule (_ bv0 32) input.ind-%var1818X) (bvult input.ind-%var1818X input.dst.llvm-%n)))))
 ))
 (let (($x155 (and $x338 $x266)))
 (let (($x348 (= true true)))
 (let (($x83 (and $x348 $x155)))
 (let (($x127 (= $x83 true)))
 (let (($x22 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1813X)))
 (=> $x246 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1813X) (_ bv0 32)))))
 ))
 (let (($x306 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1812X)))
 (= $x246 false)))
 ))
 (let (($x48 (and $x306 $x22)))
 (let (($x99 (= $x48 true)))
 (let (($x357 (forall ((input.ind-%var1807X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var1807X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x307))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv2 32))) ?x362)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv3 32))) ?x255)))
 (let ((?x14 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1807X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1807X)))
 (=> $x131 (= ?x14 ?x86)))))))))
 ))
 (let (($x40 (forall ((input.ind-%var1806X (_ BitVec 32)) )(let (($x97 (bvule (_ bv0 32) input.ind-%var1806X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1806X)))
 (= $x131 (and $x97 (bvult input.ind-%var1806X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x169 (and $x40 $x357)))
 (let (($x147 (= $x169 true)))
 (let (($x199 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1801X)))
 (=> $x246 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1801X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1800X)))
 (= $x246 false)))
 ))
 (let (($x256 (and $x276 $x199)))
 (let (($x316 (= $x256 true)))
 (let ((?x260 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x337 (bvneg ?x260)))
 (let (($x185 (= ?x337 input.dst.llvm-%n)))
 (let (($x208 (= $x185 true)))
 (let (($x204 (= $x208 true)))
 (let ((?x179 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x244 (= (_ bv0 2) ?x179)))
 (let (($x286 (= $x244 true)))
 (let (($x148 (= $x286 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (= $x202 true)))
 (let (($x159 (= $x218 true)))
 (let (($x245 (= $x159 true)))
 (let (($x78 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (not $x78)))
 (let (($x167 (= $x166 true)))
 (let (($x133 (= $x167 true)))
 (let (($x188 (= $x133 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x100)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x114)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x191 $x37)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (and $x194 $x106)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x5 $x196)))
 (let (($x31 (not $x44)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x101 $x193)))
 (let (($x109 (and (not $x64) $x31)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x112 $x8)))
 (let (($x163 (not $x138)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x74 $x116)))
 (let (($x33 (and (not $x12) $x163)))
 (let (($x98 (and (and (and (and (and (and $x33 $x109) $x120) $x158) $x174) $x107) $x153)))
 (let (($x32 (and $x98 $x178)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x104 (or false (or false (and (and true (or $x79 $x190)) (or $x24 $x119))))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x186 (and $x23 $x32)))
 (let (($x81 (= $x186 true)))
 (let (($x139 (= $x81 true)))
 (let (($x141 (= $x139 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x58 (= $x68 true)))
 (let (($x262 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x60 (= $x262 true)))
 (let (($x349 (= $x60 true)))
 (let (($x129 (= $x349 true)))
 (let (($x84 (= ?x337 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (= $x84 true)))
 (let (($x361 (= $x26 true)))
 (let ((?x331 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x331)))
 (let (($x295 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x295 true)))
 (let (($x254 (= $x69 true)))
 (let (($x162 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x13 (= $x162 true)))
 (let (($x181 (= $x13 true)))
 (let (($x43 (= $x181 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x113 (= $x291 true)))
 (let (($x227 (= $x113 true)))
 (let (($x279 (= $x227 true)))
 (let (($x330 (and $x279 $x43)))
 (let (($x92 (and $x330 $x254)))
 (let (($x311 (and $x92 $x361)))
 (let (($x46 (and $x311 $x129)))
 (let (($x156 (and $x46 $x58)))
 (let (($x197 (and $x156 $x141)))
 (let (($x17 (and $x197 $x188)))
 (let (($x212 (and $x17 $x245)))
 (let (($x351 (and $x212 $x148)))
 (let (($x175 (and $x351 $x204)))
 (let (($x136 (and $x175 $x316)))
 (let (($x327 (and $x136 $x147)))
 (let (($x214 (and $x327 $x99)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (and $x261 $x214)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x354 (and $x360 $x65)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x54 (and $x224 $x354)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x51 (and $x216 $x54)))
 (let (($x125 (=> $x51 $x127)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x266 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var1819X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x307))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv2 32))) ?x362)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv3 32))) ?x255)))
 (let ((?x14 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1819X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1819X)))
 (=> $x131 (= ?x14 ?x86)))))))))
 ))
 (let (($x338 (forall ((input.ind-%var1818X (_ BitVec 32)) )(let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1818X)))
 (= $x131 (and (bvule (_ bv0 32) input.ind-%var1818X) (bvult input.ind-%var1818X input.dst.llvm-%n)))))
 ))
 (let (($x155 (and $x338 $x266)))
 (let (($x348 (= true true)))
 (let (($x83 (and $x348 $x155)))
 (let (($x127 (= $x83 true)))
 (let (($x22 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1813X)))
 (=> $x246 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1813X) (_ bv0 32)))))
 ))
 (let (($x306 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1812X)))
 (= $x246 false)))
 ))
 (let (($x48 (and $x306 $x22)))
 (let (($x99 (= $x48 true)))
 (let (($x357 (forall ((input.ind-%var1807X (_ BitVec 32)) )(let ((?x307 (bvadd (bvmul input.ind-%var1807X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x307))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv2 32))) ?x362)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x307 (_ bv3 32))) ?x255)))
 (let ((?x14 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1807X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1807X)))
 (=> $x131 (= ?x14 ?x86)))))))))
 ))
 (let (($x40 (forall ((input.ind-%var1806X (_ BitVec 32)) )(let (($x97 (bvule (_ bv0 32) input.ind-%var1806X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1806X)))
 (= $x131 (and $x97 (bvult input.ind-%var1806X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x169 (and $x40 $x357)))
 (let (($x147 (= $x169 true)))
 (let (($x199 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1801X)))
 (=> $x246 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1801X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1800X)))
 (= $x246 false)))
 ))
 (let (($x256 (and $x276 $x199)))
 (let (($x316 (= $x256 true)))
 (let ((?x260 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x337 (bvneg ?x260)))
 (let (($x185 (= ?x337 input.dst.llvm-%n)))
 (let (($x208 (= $x185 true)))
 (let (($x204 (= $x208 true)))
 (let ((?x179 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x244 (= (_ bv0 2) ?x179)))
 (let (($x286 (= $x244 true)))
 (let (($x148 (= $x286 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (= $x202 true)))
 (let (($x159 (= $x218 true)))
 (let (($x245 (= $x159 true)))
 (let (($x78 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (not $x78)))
 (let (($x167 (= $x166 true)))
 (let (($x133 (= $x167 true)))
 (let (($x188 (= $x133 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x100)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x114)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x105)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x191 $x37)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (and $x194 $x106)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x5 $x196)))
 (let (($x31 (not $x44)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x101 $x193)))
 (let (($x109 (and (not $x64) $x31)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x112 $x8)))
 (let (($x163 (not $x138)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x74 $x116)))
 (let (($x33 (and (not $x12) $x163)))
 (let (($x98 (and (and (and (and (and (and $x33 $x109) $x120) $x158) $x174) $x107) $x153)))
 (let (($x32 (and $x98 $x178)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x104 (or false (or false (and (and true (or $x79 $x190)) (or $x24 $x119))))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x186 (and $x23 $x32)))
 (let (($x81 (= $x186 true)))
 (let (($x139 (= $x81 true)))
 (let (($x141 (= $x139 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x58 (= $x68 true)))
 (let (($x262 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x60 (= $x262 true)))
 (let (($x349 (= $x60 true)))
 (let (($x129 (= $x349 true)))
 (let (($x84 (= ?x337 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (= $x84 true)))
 (let (($x361 (= $x26 true)))
 (let ((?x331 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x331)))
 (let (($x295 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x295 true)))
 (let (($x254 (= $x69 true)))
 (let (($x162 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x13 (= $x162 true)))
 (let (($x181 (= $x13 true)))
 (let (($x43 (= $x181 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x113 (= $x291 true)))
 (let (($x227 (= $x113 true)))
 (let (($x279 (= $x227 true)))
 (let (($x330 (and $x279 $x43)))
 (let (($x92 (and $x330 $x254)))
 (let (($x311 (and $x92 $x361)))
 (let (($x46 (and $x311 $x129)))
 (let (($x156 (and $x46 $x58)))
 (let (($x197 (and $x156 $x141)))
 (let (($x17 (and $x197 $x188)))
 (let (($x212 (and $x17 $x245)))
 (let (($x351 (and $x212 $x148)))
 (let (($x175 (and $x351 $x204)))
 (let (($x136 (and $x175 $x316)))
 (let (($x327 (and $x136 $x147)))
 (let (($x214 (and $x327 $x99)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (and $x261 $x214)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x354 (and $x360 $x65)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x54 (and $x224 $x354)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x51 (and $x216 $x54)))
 (let (($x125 (=> $x51 $x127)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 86
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x353 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (not $x353)))
 (let (($x344 (or $x353 $x49)))
 (let (($x195 (= $x344 true)))
 (let (($x329 (= $x195 true)))
 (let (($x288 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1837X)))
 (=> $x89 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1837X) (_ bv0 32)))))
 ))
 (let (($x45 (forall ((input.ind-%var1836X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1836X)))
 (= $x89 false)))
 ))
 (let (($x42 (and $x45 $x288)))
 (let (($x336 (= $x42 true)))
 (let (($x55 (forall ((input.ind-%var1831X (_ BitVec 32)) )(let ((?x355 (bvadd (bvmul input.ind-%var1831X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x355 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x355))))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x355 (_ bv2 32))) ?x274)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x355 (_ bv3 32))) ?x183)))
 (let ((?x338 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1831X)))
 (let (($x327 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1831X)))
 (=> $x327 (= ?x338 ?x203)))))))))
 ))
 (let (($x348 (forall ((input.ind-%var1830X (_ BitVec 32)) )(let (($x54 (and (bvule (_ bv0 32) input.ind-%var1830X) (bvult input.ind-%var1830X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x327 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1830X)))
 (= $x327 $x54))))
 ))
 (let (($x242 (and $x348 $x55)))
 (let (($x215 (= $x242 true)))
 (let (($x86 (forall ((input.ind-%var1825X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1825X)))
 (=> $x89 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1825X) (_ bv0 32)))))
 ))
 (let (($x7 (forall ((input.ind-%var1824X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1824X)))
 (= $x89 false)))
 ))
 (let (($x124 (and $x7 $x86)))
 (let (($x281 (= $x124 true)))
 (let ((?x316 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x316)))
 (let (($x131 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x131 true)))
 (let (($x143 (= $x97 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x75)))
 (let (($x238 (= ?x57 input.dst.llvm-%n)))
 (let (($x250 (= $x238 true)))
 (let (($x199 (= $x250 true)))
 (let (($x253 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x246 (= $x253 true)))
 (let (($x209 (= $x246 true)))
 (let (($x276 (= $x209 true)))
 (let (($x351 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x351 true)))
 (let (($x208 (= $x185 true)))
 (let (($x204 (= $x208 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x222 true)))
 (let (($x244 (= $x179 true)))
 (let (($x286 (= $x244 true)))
 (let ((?x197 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x197)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x139)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x153 $x100)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x114 $x178)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x191 $x171)))
 (let (($x37 (not $x105)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (and $x158 $x9)))
 (let (($x174 (and (not $x194) $x37)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x109 $x77)))
 (let (($x120 (not $x219)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x23 $x74)))
 (let (($x206 (and (not $x31) $x120)))
 (let (($x17 (and (and (and (and (and (and $x206 $x174) $x170) $x145) $x32) $x81) $x141)))
 (let (($x202 (and $x17 $x102)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x5 (or false (or false (and (and true (or $x112 $x8)) (or $x33 $x101))))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x5)))
 (let (($x218 (and $x44 $x202)))
 (let (($x159 (= $x218 true)))
 (let (($x245 (= $x159 true)))
 (let (($x212 (= $x245 true)))
 (let (($x80 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x119 (= $x80 true)))
 (let (($x10 (= $x119 true)))
 (let (($x182 (= $x10 true)))
 (let ((?x190 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x66 (= (_ bv0 2) ?x190)))
 (let (($x52 (= $x66 true)))
 (let (($x168 (= $x52 true)))
 (let (($x177 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (= $x177 true)))
 (let (($x189 (= $x56 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x58 (= $x68 true)))
 (let (($x79 (and $x58 $x189)))
 (let (($x24 (and $x79 $x168)))
 (let (($x173 (and $x24 $x182)))
 (let (($x252 (and $x173 $x212)))
 (let (($x148 (and $x252 $x286)))
 (let (($x175 (and $x148 $x204)))
 (let (($x301 (and $x175 $x276)))
 (let (($x256 (and $x301 $x199)))
 (let (($x345 (and $x256 $x143)))
 (let (($x357 (and $x345 $x281)))
 (let (($x164 (and $x357 $x215)))
 (let (($x314 (and $x164 $x336)))
 (let (($x349 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x73 (and $x349 $x314)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x311 $x73)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x235 (and $x84 $x292)))
 (let ((?x224 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x224)))
 (let (($x38 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd ?x187 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x13 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x92 (or false (or false (and (and true (or $x162 $x13)) (or $x331 $x38))))))
 (let (($x337 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x92)))
 (let (($x360 (=> (and $x353 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x92)))
 (let (($x325 (and $x360 $x235)))
 (let (($x263 (=> $x325 $x329)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x353 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (not $x353)))
 (let (($x344 (or $x353 $x49)))
 (let (($x195 (= $x344 true)))
 (let (($x329 (= $x195 true)))
 (let (($x288 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1837X)))
 (=> $x89 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1837X) (_ bv0 32)))))
 ))
 (let (($x45 (forall ((input.ind-%var1836X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1836X)))
 (= $x89 false)))
 ))
 (let (($x42 (and $x45 $x288)))
 (let (($x336 (= $x42 true)))
 (let (($x55 (forall ((input.ind-%var1831X (_ BitVec 32)) )(let ((?x355 (bvadd (bvmul input.ind-%var1831X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x355 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x355))))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x355 (_ bv2 32))) ?x274)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x355 (_ bv3 32))) ?x183)))
 (let ((?x338 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1831X)))
 (let (($x327 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1831X)))
 (=> $x327 (= ?x338 ?x203)))))))))
 ))
 (let (($x348 (forall ((input.ind-%var1830X (_ BitVec 32)) )(let (($x54 (and (bvule (_ bv0 32) input.ind-%var1830X) (bvult input.ind-%var1830X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x327 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1830X)))
 (= $x327 $x54))))
 ))
 (let (($x242 (and $x348 $x55)))
 (let (($x215 (= $x242 true)))
 (let (($x86 (forall ((input.ind-%var1825X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1825X)))
 (=> $x89 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1825X) (_ bv0 32)))))
 ))
 (let (($x7 (forall ((input.ind-%var1824X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1824X)))
 (= $x89 false)))
 ))
 (let (($x124 (and $x7 $x86)))
 (let (($x281 (= $x124 true)))
 (let ((?x316 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x316)))
 (let (($x131 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x131 true)))
 (let (($x143 (= $x97 true)))
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x75)))
 (let (($x238 (= ?x57 input.dst.llvm-%n)))
 (let (($x250 (= $x238 true)))
 (let (($x199 (= $x250 true)))
 (let (($x253 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x246 (= $x253 true)))
 (let (($x209 (= $x246 true)))
 (let (($x276 (= $x209 true)))
 (let (($x351 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x351 true)))
 (let (($x208 (= $x185 true)))
 (let (($x204 (= $x208 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x222 true)))
 (let (($x244 (= $x179 true)))
 (let (($x286 (= $x244 true)))
 (let ((?x197 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x197)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x139)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x153 $x100)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x114 $x178)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x191 $x171)))
 (let (($x37 (not $x105)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (and $x158 $x9)))
 (let (($x174 (and (not $x194) $x37)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x109 $x77)))
 (let (($x120 (not $x219)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x23 $x74)))
 (let (($x206 (and (not $x31) $x120)))
 (let (($x17 (and (and (and (and (and (and $x206 $x174) $x170) $x145) $x32) $x81) $x141)))
 (let (($x202 (and $x17 $x102)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x5 (or false (or false (and (and true (or $x112 $x8)) (or $x33 $x101))))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x5)))
 (let (($x218 (and $x44 $x202)))
 (let (($x159 (= $x218 true)))
 (let (($x245 (= $x159 true)))
 (let (($x212 (= $x245 true)))
 (let (($x80 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x119 (= $x80 true)))
 (let (($x10 (= $x119 true)))
 (let (($x182 (= $x10 true)))
 (let ((?x190 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x66 (= (_ bv0 2) ?x190)))
 (let (($x52 (= $x66 true)))
 (let (($x168 (= $x52 true)))
 (let (($x177 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (= $x177 true)))
 (let (($x189 (= $x56 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x76 (= $x16 true)))
 (let (($x68 (= $x76 true)))
 (let (($x58 (= $x68 true)))
 (let (($x79 (and $x58 $x189)))
 (let (($x24 (and $x79 $x168)))
 (let (($x173 (and $x24 $x182)))
 (let (($x252 (and $x173 $x212)))
 (let (($x148 (and $x252 $x286)))
 (let (($x175 (and $x148 $x204)))
 (let (($x301 (and $x175 $x276)))
 (let (($x256 (and $x301 $x199)))
 (let (($x345 (and $x256 $x143)))
 (let (($x357 (and $x345 $x281)))
 (let (($x164 (and $x357 $x215)))
 (let (($x314 (and $x164 $x336)))
 (let (($x349 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x73 (and $x349 $x314)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x311 $x73)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x235 (and $x84 $x292)))
 (let ((?x224 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd input.dst.llvm-%m ?x224)))
 (let (($x38 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd ?x187 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x13 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x92 (or false (or false (and (and true (or $x162 $x13)) (or $x331 $x38))))))
 (let (($x337 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) $x92)))
 (let (($x360 (=> (and $x353 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) $x92)))
 (let (($x325 (and $x360 $x235)))
 (let (($x263 (=> $x325 $x329)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 87
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x163)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x8)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x173)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (and $x10 $x116)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x119 $x12)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x56 $x189)))
 (let (($x140 (not $x79)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x75 $x57)))
 (let (($x66 (and (not $x177) $x140)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x46 $x16)))
 (let (($x68 (not $x76)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x13 $x181)))
 (let (($x156 (and (not $x129) $x68)))
 (let (($x44 (and (and (and (and (and (and $x156 $x66) $x168) $x80) $x196) $x112) $x138)))
 (let (($x23 (and $x44 $x33)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x262 (or false (or false (and (and true (or $x295 $x69)) (or $x72 $x84))))))
 (let (($x349 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x262)))
 (let (($x131 (and $x349 $x23)))
 (let (($x97 (= $x131 true)))
 (let (($x143 (= $x97 true)))
 (let (($x301 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1843X)))
 (=> $x222 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1843X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var1842X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1842X)))
 (= $x222 false)))
 ))
 (let (($x238 (and $x148 $x301)))
 (let (($x250 (= $x238 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x191 (concat ?x106 (concat ?x158 (concat ?x77 ?x110)))))
 (let (($x102 (= ?x191 input.dst.llvm-%n)))
 (let (($x202 (= $x102 true)))
 (let (($x218 (= $x202 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x167 (concat ?x166 (concat ?x78 ?x37)))))
 (let (($x139 (= ?x114 input.dst.llvm-%m)))
 (let (($x141 (= $x139 true)))
 (let (($x17 (= $x141 true)))
 (let (($x153 (= input.dst.llvm-%m ?x114)))
 (let (($x171 (= input.dst.llvm-%n ?x191)))
 (let (($x98 (and $x171 $x153)))
 (let (($x178 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x349) $x23)))
 (let (($x32 (and $x178 $x98)))
 (let (($x284 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (and $x284 $x32)))
 (let (($x186 (= $x133 true)))
 (let (($x81 (= $x186 true)))
 (let (($x188 (= $x81 true)))
 (let (($x197 (and $x188 $x17)))
 (let (($x159 (and $x197 $x218)))
 (let (($x199 (and $x159 $x250)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and $x261 $x199)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x316 (and $x96 $x256)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x136 (and $x15 $x316)))
 (let (($x345 (=> $x136 $x143)))
 (not $x345))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x163)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x8)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x173)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (and $x10 $x116)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x119 $x12)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x56 $x189)))
 (let (($x140 (not $x79)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x75 $x57)))
 (let (($x66 (and (not $x177) $x140)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x46 $x16)))
 (let (($x68 (not $x76)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x13 $x181)))
 (let (($x156 (and (not $x129) $x68)))
 (let (($x44 (and (and (and (and (and (and $x156 $x66) $x168) $x80) $x196) $x112) $x138)))
 (let (($x23 (and $x44 $x33)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x262 (or false (or false (and (and true (or $x295 $x69)) (or $x72 $x84))))))
 (let (($x349 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x262)))
 (let (($x131 (and $x349 $x23)))
 (let (($x97 (= $x131 true)))
 (let (($x143 (= $x97 true)))
 (let (($x301 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1843X)))
 (=> $x222 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1843X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var1842X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1842X)))
 (= $x222 false)))
 ))
 (let (($x238 (and $x148 $x301)))
 (let (($x250 (= $x238 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x191 (concat ?x106 (concat ?x158 (concat ?x77 ?x110)))))
 (let (($x102 (= ?x191 input.dst.llvm-%n)))
 (let (($x202 (= $x102 true)))
 (let (($x218 (= $x202 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x167 (concat ?x166 (concat ?x78 ?x37)))))
 (let (($x139 (= ?x114 input.dst.llvm-%m)))
 (let (($x141 (= $x139 true)))
 (let (($x17 (= $x141 true)))
 (let (($x153 (= input.dst.llvm-%m ?x114)))
 (let (($x171 (= input.dst.llvm-%n ?x191)))
 (let (($x98 (and $x171 $x153)))
 (let (($x178 (and (and (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m) $x349) $x23)))
 (let (($x32 (and $x178 $x98)))
 (let (($x284 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (and $x284 $x32)))
 (let (($x186 (= $x133 true)))
 (let (($x81 (= $x186 true)))
 (let (($x188 (= $x81 true)))
 (let (($x197 (and $x188 $x17)))
 (let (($x159 (and $x197 $x218)))
 (let (($x199 (and $x159 $x250)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (and $x261 $x199)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x316 (and $x96 $x256)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x136 (and $x15 $x316)))
 (let (($x345 (=> $x136 $x143)))
 (not $x345))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 88
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (forall ((input.ind-%var1855X (_ BitVec 32)) )(let ((?x176 (bvadd (bvmul input.ind-%var1855X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x274))))
 (=> false (= (_ bv0 32) ?x242))))))
 ))
 (let (($x255 (forall ((input.ind-%var1854X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1854X) (bvult input.ind-%var1854X (_ bv0 32)))))
 ))
 (let (($x288 (and $x255 $x45)))
 (let (($x244 (= true true)))
 (let (($x42 (and $x244 $x288)))
 (let (($x336 (= $x42 true)))
 (let (($x105 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1849X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1849X) (_ bv0 32)))))
 ))
 (let (($x199 (forall ((input.ind-%var1848X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1848X)))
 (= $x276 false)))
 ))
 (let (($x31 (and $x199 $x105)))
 (let (($x179 (= $x31 true)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x32 (concat ?x114 (concat ?x37 ?x174)))))
 (let (($x159 (= ?x133 input.dst.llvm-%m)))
 (let (($x252 (= $x159 true)))
 (let (($x222 (= $x252 true)))
 (let (($x186 (= input.dst.llvm-%m ?x133)))
 (let ((?x291 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x254 (concat ?x69 (concat ?x331 (concat ?x279 ?x291)))))
 (let (($x170 (= input.dst.llvm-%n ?x254)))
 (let (($x81 (and $x170 $x186)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x109)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x206)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x33 $x178)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x163 $x74)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x12 $x196)))
 (let (($x87 (not $x160)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x182 $x173)))
 (let (($x5 (and (not $x116) $x87)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x193 $x24)))
 (let (($x64 (not $x80)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x100 $x13)))
 (let (($x10 (and (not $x168) $x64)))
 (let (($x145 (and (and (and (and (and (and $x10 $x5) $x138) $x44) $x194) $x120) $x158)))
 (let (($x167 (and $x145 $x77)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x66 (or false (or false (and (and true (or $x76 $x68)) (or $x190 $x56))))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x262 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x141 (and (and (and $x262 $x52) $x167) $x81)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x17 (and $x84 $x141)))
 (let (($x197 (= $x17 true)))
 (let (($x102 (= $x197 true)))
 (let (($x202 (= $x102 true)))
 (let (($x337 (= ?x254 input.dst.llvm-%n)))
 (let (($x72 (= $x337 true)))
 (let (($x360 (= $x72 true)))
 (let (($x218 (and $x360 $x202)))
 (let (($x286 (and $x218 $x222)))
 (let (($x175 (and $x286 $x179)))
 (let (($x187 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (and $x187 $x175)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x245 (and $x216 $x208)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x212 (and $x353 $x245)))
 (let (($x314 (=> $x212 $x336)))
 (not $x314)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (forall ((input.ind-%var1855X (_ BitVec 32)) )(let ((?x176 (bvadd (bvmul input.ind-%var1855X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x274))))
 (=> false (= (_ bv0 32) ?x242))))))
 ))
 (let (($x255 (forall ((input.ind-%var1854X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1854X) (bvult input.ind-%var1854X (_ bv0 32)))))
 ))
 (let (($x288 (and $x255 $x45)))
 (let (($x244 (= true true)))
 (let (($x42 (and $x244 $x288)))
 (let (($x336 (= $x42 true)))
 (let (($x105 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1849X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1849X) (_ bv0 32)))))
 ))
 (let (($x199 (forall ((input.ind-%var1848X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1848X)))
 (= $x276 false)))
 ))
 (let (($x31 (and $x199 $x105)))
 (let (($x179 (= $x31 true)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x32 (concat ?x114 (concat ?x37 ?x174)))))
 (let (($x159 (= ?x133 input.dst.llvm-%m)))
 (let (($x252 (= $x159 true)))
 (let (($x222 (= $x252 true)))
 (let (($x186 (= input.dst.llvm-%m ?x133)))
 (let ((?x291 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x254 (concat ?x69 (concat ?x331 (concat ?x279 ?x291)))))
 (let (($x170 (= input.dst.llvm-%n ?x254)))
 (let (($x81 (and $x170 $x186)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x109)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x206)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x33 $x178)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x163 $x74)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x12 $x196)))
 (let (($x87 (not $x160)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x182 $x173)))
 (let (($x5 (and (not $x116) $x87)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x193 $x24)))
 (let (($x64 (not $x80)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x100 $x13)))
 (let (($x10 (and (not $x168) $x64)))
 (let (($x145 (and (and (and (and (and (and $x10 $x5) $x138) $x44) $x194) $x120) $x158)))
 (let (($x167 (and $x145 $x77)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x66 (or false (or false (and (and true (or $x76 $x68)) (or $x190 $x56))))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x262 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x141 (and (and (and $x262 $x52) $x167) $x81)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x17 (and $x84 $x141)))
 (let (($x197 (= $x17 true)))
 (let (($x102 (= $x197 true)))
 (let (($x202 (= $x102 true)))
 (let (($x337 (= ?x254 input.dst.llvm-%n)))
 (let (($x72 (= $x337 true)))
 (let (($x360 (= $x72 true)))
 (let (($x218 (and $x360 $x202)))
 (let (($x286 (and $x218 $x222)))
 (let (($x175 (and $x286 $x179)))
 (let (($x187 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (and $x187 $x175)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x245 (and $x216 $x208)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x212 (and $x353 $x245)))
 (let (($x314 (=> $x212 $x336)))
 (not $x314)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 89
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x198)))
 (let (($x274 (= ?x226 input.dst.llvm-%n)))
 (let (($x312 (= $x274 true)))
 (let (($x281 (forall ((input.ind-%var1861X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1861X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1861X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var1860X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1860X)))
 (= $x113 false)))
 ))
 (let (($x53 (and $x175 $x281)))
 (let (($x176 (= $x53 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x153 (concat ?x37 (concat ?x107 ?x98)))))
 (let (($x286 (= ?x133 input.dst.llvm-%n)))
 (let (($x209 (= $x286 true)))
 (let (($x276 (= $x209 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x330 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x254 (concat ?x279 (concat ?x330 ?x241)))))
 (let (($x81 (= input.dst.llvm-%m ?x92)))
 (let (($x186 (= input.dst.llvm-%n ?x133)))
 (let (($x141 (and $x186 $x81)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x120)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x191)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x163)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x9 $x33)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x44 $x23)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x12 $x196)))
 (let (($x87 (not $x160)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x173 $x116)))
 (let (($x110 (and (not $x112) $x87)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x193 $x24)))
 (let (($x64 (not $x80)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x101 $x58)))
 (let (($x182 (and (not $x119) $x64)))
 (let (($x167 (and (and (and (and (and (and $x182 $x110) $x8) $x219) $x178) $x194) $x106)))
 (let (($x139 (and $x167 $x171)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x100 (or false (or false (and (and true (or $x75 $x57)) (or $x79 $x140))))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x181 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x102 (and (and (and $x181 $x168) $x139) $x141)))
 (let (($x361 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x202 (and $x361 $x102)))
 (let (($x218 (= $x202 true)))
 (let (($x159 (= $x218 true)))
 (let (($x252 (= $x159 true)))
 (let (($x72 (= ?x92 input.dst.llvm-%m)))
 (let (($x360 (= $x72 true)))
 (let (($x84 (= $x360 true)))
 (let (($x222 (and $x84 $x252)))
 (let (($x250 (and $x222 $x276)))
 (let (($x259 (and $x250 $x176)))
 (let (($x224 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x224 $x259)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x183 (and $x278 $x55)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x15 $x183)))
 (let (($x242 (=> $x203 $x312)))
 (not $x242)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x198)))
 (let (($x274 (= ?x226 input.dst.llvm-%n)))
 (let (($x312 (= $x274 true)))
 (let (($x281 (forall ((input.ind-%var1861X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1861X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1861X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var1860X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1860X)))
 (= $x113 false)))
 ))
 (let (($x53 (and $x175 $x281)))
 (let (($x176 (= $x53 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x153 (concat ?x37 (concat ?x107 ?x98)))))
 (let (($x286 (= ?x133 input.dst.llvm-%n)))
 (let (($x209 (= $x286 true)))
 (let (($x276 (= $x209 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x330 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x254 (concat ?x279 (concat ?x330 ?x241)))))
 (let (($x81 (= input.dst.llvm-%m ?x92)))
 (let (($x186 (= input.dst.llvm-%n ?x133)))
 (let (($x141 (and $x186 $x81)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x120)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x191)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x163)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x9 $x33)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x44 $x23)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x12 $x196)))
 (let (($x87 (not $x160)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x173 $x116)))
 (let (($x110 (and (not $x112) $x87)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x193 $x24)))
 (let (($x64 (not $x80)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x101 $x58)))
 (let (($x182 (and (not $x119) $x64)))
 (let (($x167 (and (and (and (and (and (and $x182 $x110) $x8) $x219) $x178) $x194) $x106)))
 (let (($x139 (and $x167 $x171)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x100 (or false (or false (and (and true (or $x75 $x57)) (or $x79 $x140))))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x181 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x102 (and (and (and $x181 $x168) $x139) $x141)))
 (let (($x361 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x202 (and $x361 $x102)))
 (let (($x218 (= $x202 true)))
 (let (($x159 (= $x218 true)))
 (let (($x252 (= $x159 true)))
 (let (($x72 (= ?x92 input.dst.llvm-%m)))
 (let (($x360 (= $x72 true)))
 (let (($x84 (= $x360 true)))
 (let (($x222 (and $x84 $x252)))
 (let (($x250 (and $x222 $x276)))
 (let (($x259 (and $x250 $x176)))
 (let (($x224 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x224 $x259)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x183 (and $x278 $x55)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x15 $x183)))
 (let (($x242 (=> $x203 $x312)))
 (not $x242)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 90
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x31 (= (_ bv0 2) ?x131)))
 (let (($x307 (= $x31 true)))
 (let (($x215 (forall ((input.ind-%var1867X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1867X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1867X) (_ bv0 32)))))
 ))
 (let (($x259 (forall ((input.ind-%var1866X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1866X)))
 (= $x255 false)))
 ))
 (let (($x129 (and $x259 $x215)))
 (let (($x260 (= $x129 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x186 (concat ?x114 (concat ?x32 ?x78)))))
 (let (($x250 (= ?x81 input.dst.llvm-%m)))
 (let (($x14 (= $x250 true)))
 (let (($x113 (= $x14 true)))
 (let (($x141 (= input.dst.llvm-%m ?x81)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x331 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x330 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x337 (concat ?x92 (concat ?x330 (concat ?x331 ?x38)))))
 (let (($x157 (= input.dst.llvm-%n ?x337)))
 (let (($x102 (and $x157 $x141)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x194)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x109)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (and $x145 $x9)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x219 $x163)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x12 $x196)))
 (let (($x87 (not $x160)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x116 $x112)))
 (let (($x206 (and (not $x5) $x87)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x193 $x24)))
 (let (($x64 (not $x80)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x13 $x46)))
 (let (($x173 (and (not $x10) $x64)))
 (let (($x139 (and (and (and (and (and (and $x173 $x206) $x158) $x138) $x33) $x178) $x74)))
 (let (($x197 (and $x139 $x77)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x101 (or false (or false (and (and true (or $x177 $x56)) (or $x52 $x188))))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x16 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x159 (and (and (and $x16 $x119) $x197) $x102)))
 (let (($x361 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x252 (and $x361 $x159)))
 (let (($x222 (= $x252 true)))
 (let (($x286 (= $x222 true)))
 (let (($x209 (= $x286 true)))
 (let (($x360 (= ?x337 input.dst.llvm-%n)))
 (let (($x84 (= $x360 true)))
 (let (($x26 (= $x84 true)))
 (let (($x276 (and $x26 $x209)))
 (let (($x179 (and $x276 $x113)))
 (let (($x170 (and $x179 $x260)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (and $x96 $x170)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x162 $x105)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x212 (and $x353 $x7)))
 (let (($x245 (=> $x212 $x307)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x31 (= (_ bv0 2) ?x131)))
 (let (($x307 (= $x31 true)))
 (let (($x215 (forall ((input.ind-%var1867X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1867X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1867X) (_ bv0 32)))))
 ))
 (let (($x259 (forall ((input.ind-%var1866X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1866X)))
 (= $x255 false)))
 ))
 (let (($x129 (and $x259 $x215)))
 (let (($x260 (= $x129 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x186 (concat ?x114 (concat ?x32 ?x78)))))
 (let (($x250 (= ?x81 input.dst.llvm-%m)))
 (let (($x14 (= $x250 true)))
 (let (($x113 (= $x14 true)))
 (let (($x141 (= input.dst.llvm-%m ?x81)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x331 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x330 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x337 (concat ?x92 (concat ?x330 (concat ?x331 ?x38)))))
 (let (($x157 (= input.dst.llvm-%n ?x337)))
 (let (($x102 (and $x157 $x141)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x194)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x109)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (and $x145 $x9)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x219 $x163)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x12 $x196)))
 (let (($x87 (not $x160)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x116 $x112)))
 (let (($x206 (and (not $x5) $x87)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x193 $x24)))
 (let (($x64 (not $x80)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x13 $x46)))
 (let (($x173 (and (not $x10) $x64)))
 (let (($x139 (and (and (and (and (and (and $x173 $x206) $x158) $x138) $x33) $x178) $x74)))
 (let (($x197 (and $x139 $x77)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x101 (or false (or false (and (and true (or $x177 $x56)) (or $x52 $x188))))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x16 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x159 (and (and (and $x16 $x119) $x197) $x102)))
 (let (($x361 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x252 (and $x361 $x159)))
 (let (($x222 (= $x252 true)))
 (let (($x286 (= $x222 true)))
 (let (($x209 (= $x286 true)))
 (let (($x360 (= ?x337 input.dst.llvm-%n)))
 (let (($x84 (= $x360 true)))
 (let (($x26 (= $x84 true)))
 (let (($x276 (and $x26 $x209)))
 (let (($x179 (and $x276 $x113)))
 (let (($x170 (and $x179 $x260)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (and $x96 $x170)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x162 $x105)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x212 (and $x353 $x7)))
 (let (($x245 (=> $x212 $x307)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 91
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x53)))
 (let (($x183 (= ?x226 input.spec-%var-n-1)))
 (let (($x274 (= $x183 true)))
 (let (($x76 (forall ((input.ind-%var1873X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1873X)))
 (=> $x242 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1873X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1872X)))
 (= $x242 false)))
 ))
 (let (($x153 (and $x170 $x76)))
 (let (($x295 (= $x153 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x57 (concat ?x68 (concat ?x156 ?x181)))))
 (let (($x286 (= input.dst.llvm-%m ?x56)))
 (let ((?x291 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x337 (concat ?x331 (concat ?x279 ?x291)))))
 (let (($x222 (= input.dst.llvm-%n ?x72)))
 (let (($x209 (and $x222 $x286)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x32)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x114)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x218 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x197)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (and $x77 $x218)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x194 $x157)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x33 $x120)))
 (let (($x178 (not $x23)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x44 $x9)))
 (let (($x109 (and (not $x163) $x178)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x158 $x106)))
 (let (($x167 (not $x138)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x119 $x202)))
 (let (($x145 (and (not $x8) $x167)))
 (let (($x159 (and (and (and (and (and (and $x145 $x109) $x74) $x139) $x133) $x98) $x37)))
 (let (($x252 (and $x159 $x78)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x87 (or false (or false (and (and true (or $x24 $x80)) (or $x5 $x110))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x17 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x14 (and (and (and $x17 $x191) $x252) $x209)))
 (let (($x188 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (and $x188 $x14)))
 (let (($x179 (= $x113 true)))
 (let (($x362 (= $x179 true)))
 (let (($x255 (= $x362 true)))
 (let (($x189 (= ?x56 input.dst.llvm-%m)))
 (let (($x140 (= $x189 true)))
 (let (($x52 (= $x140 true)))
 (let (($x84 (= ?x72 input.dst.llvm-%n)))
 (let (($x26 (= $x84 true)))
 (let (($x361 (= $x26 true)))
 (let (($x66 (and $x361 $x52)))
 (let (($x176 (and $x66 $x255)))
 (let (($x281 (and $x176 $x295)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x198 (and $x216 $x281)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x203 (and $x124 $x198)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x15 $x203)))
 (let (($x208 (=> $x175 $x274)))
 (not $x208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x53)))
 (let (($x183 (= ?x226 input.spec-%var-n-1)))
 (let (($x274 (= $x183 true)))
 (let (($x76 (forall ((input.ind-%var1873X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1873X)))
 (=> $x242 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1873X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x242 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1872X)))
 (= $x242 false)))
 ))
 (let (($x153 (and $x170 $x76)))
 (let (($x295 (= $x153 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x57 (concat ?x68 (concat ?x156 ?x181)))))
 (let (($x286 (= input.dst.llvm-%m ?x56)))
 (let ((?x291 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x337 (concat ?x331 (concat ?x279 ?x291)))))
 (let (($x222 (= input.dst.llvm-%n ?x72)))
 (let (($x209 (and $x222 $x286)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x32)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x114)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x218 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x197)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (and $x77 $x218)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x194 $x157)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x33 $x120)))
 (let (($x178 (not $x23)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x44 $x9)))
 (let (($x109 (and (not $x163) $x178)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x158 $x106)))
 (let (($x167 (not $x138)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x119 $x202)))
 (let (($x145 (and (not $x8) $x167)))
 (let (($x159 (and (and (and (and (and (and $x145 $x109) $x74) $x139) $x133) $x98) $x37)))
 (let (($x252 (and $x159 $x78)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x87 (or false (or false (and (and true (or $x24 $x80)) (or $x5 $x110))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x17 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x14 (and (and (and $x17 $x191) $x252) $x209)))
 (let (($x188 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (and $x188 $x14)))
 (let (($x179 (= $x113 true)))
 (let (($x362 (= $x179 true)))
 (let (($x255 (= $x362 true)))
 (let (($x189 (= ?x56 input.dst.llvm-%m)))
 (let (($x140 (= $x189 true)))
 (let (($x52 (= $x140 true)))
 (let (($x84 (= ?x72 input.dst.llvm-%n)))
 (let (($x26 (= $x84 true)))
 (let (($x361 (= $x26 true)))
 (let (($x66 (and $x361 $x52)))
 (let (($x176 (and $x66 $x255)))
 (let (($x281 (and $x176 $x295)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x198 (and $x216 $x281)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x203 (and $x124 $x198)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x15 $x203)))
 (let (($x208 (=> $x175 $x274)))
 (not $x208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 92
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x259 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x232 (= $x259 true)))
 (let (($x129 (= $x232 true)))
 (let (($x86 (forall ((input.ind-%var1879X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1879X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1879X) (_ bv0 32)))))
 ))
 (let (($x281 (forall ((input.ind-%var1878X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1878X)))
 (= $x128 false)))
 ))
 (let (($x101 (and $x281 $x86)))
 (let (($x311 (= $x101 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x159 (concat ?x102 (concat ?x141 ?x157)))))
 (let (($x176 (= ?x32 input.dst.llvm-%n)))
 (let (($x312 (= $x176 true)))
 (let (($x242 (= $x312 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x330 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x72 (concat ?x279 (concat ?x330 ?x241)))))
 (let (($x252 (= input.dst.llvm-%m ?x360)))
 (let (($x78 (= input.dst.llvm-%n ?x32)))
 (let (($x250 (and $x78 $x252)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x109)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x23)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (and $x145 $x9)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x167 $x163)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x191 $x276)))
 (let (($x202 (not $x119)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x196 $x160)))
 (let (($x219 (and (not $x87) $x202)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x173 $x116)))
 (let (($x112 (not $x5)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x181 $x75)))
 (let (($x12 (and (not $x64) $x112)))
 (let (($x77 (and (and (and (and (and (and $x12 $x219) $x158) $x138) $x171) $x120) $x178)))
 (let (($x197 (and $x77 $x107)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x24 (or false (or false (and (and true (or $x52 $x66)) (or $x13 $x46))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x16 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x209 (and (and (and $x16 $x80) $x197) $x250)))
 (let (($x57 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x14 (and $x57 $x209)))
 (let (($x113 (= $x14 true)))
 (let (($x179 (= $x113 true)))
 (let (($x362 (= $x179 true)))
 (let (($x26 (= ?x360 input.dst.llvm-%m)))
 (let (($x361 (= $x26 true)))
 (let (($x262 (= $x361 true)))
 (let (($x255 (and $x262 $x362)))
 (let (($x260 (and $x255 $x242)))
 (let (($x43 (and $x260 $x311)))
 (let (($x278 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and $x278 $x43)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x131 (and $x261 $x215)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x212 (and $x353 $x131)))
 (let (($x31 (=> $x212 $x129)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x259 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x232 (= $x259 true)))
 (let (($x129 (= $x232 true)))
 (let (($x86 (forall ((input.ind-%var1879X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1879X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1879X) (_ bv0 32)))))
 ))
 (let (($x281 (forall ((input.ind-%var1878X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1878X)))
 (= $x128 false)))
 ))
 (let (($x101 (and $x281 $x86)))
 (let (($x311 (= $x101 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x159 (concat ?x102 (concat ?x141 ?x157)))))
 (let (($x176 (= ?x32 input.dst.llvm-%n)))
 (let (($x312 (= $x176 true)))
 (let (($x242 (= $x312 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x330 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x72 (concat ?x279 (concat ?x330 ?x241)))))
 (let (($x252 (= input.dst.llvm-%m ?x360)))
 (let (($x78 (= input.dst.llvm-%n ?x32)))
 (let (($x250 (and $x78 $x252)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x109)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x23)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (and $x145 $x9)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x167 $x163)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x191 $x276)))
 (let (($x202 (not $x119)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x196 $x160)))
 (let (($x219 (and (not $x87) $x202)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x173 $x116)))
 (let (($x112 (not $x5)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x181 $x75)))
 (let (($x12 (and (not $x64) $x112)))
 (let (($x77 (and (and (and (and (and (and $x12 $x219) $x158) $x138) $x171) $x120) $x178)))
 (let (($x197 (and $x77 $x107)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x24 (or false (or false (and (and true (or $x52 $x66)) (or $x13 $x46))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x16 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x209 (and (and (and $x16 $x80) $x197) $x250)))
 (let (($x57 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x14 (and $x57 $x209)))
 (let (($x113 (= $x14 true)))
 (let (($x179 (= $x113 true)))
 (let (($x362 (= $x179 true)))
 (let (($x26 (= ?x360 input.dst.llvm-%m)))
 (let (($x361 (= $x26 true)))
 (let (($x262 (= $x361 true)))
 (let (($x255 (and $x262 $x362)))
 (let (($x260 (and $x255 $x242)))
 (let (($x43 (and $x260 $x311)))
 (let (($x278 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and $x278 $x43)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x131 (and $x261 $x215)))
 (let (($x353 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x212 (and $x353 $x131)))
 (let (($x31 (=> $x212 $x129)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 93
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x134 (bvsge ?x251 (_ bv0 32))))
 (let (($x248 (= $x134 true)))
 (let (($x270 (= $x248 true)))
 (let (($x333 (forall ((input.ind-%var1897X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1897X)))
 (=> $x257 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1897X) (_ bv0 32)))))
 ))
 (let (($x282 (forall ((input.ind-%var1896X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1896X)))
 (= $x257 false)))
 ))
 (let (($x229 (and $x282 $x333)))
 (let (($x243 (= $x229 true)))
 (let (($x11 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let ((?x324 (bvadd (bvmul input.ind-%var1891X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x324))))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x324 (_ bv2 32))) ?x275)))
 (let ((?x326 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x324 (_ bv3 32))) ?x90)))
 (let ((?x40 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1891X)))
 (let (($x285 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1891X)))
 (=> $x285 (= ?x40 ?x326)))))))))
 ))
 (let (($x169 (forall ((input.ind-%var1890X (_ BitVec 32)) )(let (($x95 (and (bvule (_ bv0 32) input.ind-%var1890X) (bvult input.ind-%var1890X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x285 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1890X)))
 (= $x285 $x95))))
 ))
 (let (($x207 (and $x169 $x11)))
 (let (($x258 (= $x207 true)))
 (let (($x49 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1885X)))
 (=> $x257 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1885X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1884X)))
 (= $x257 false)))
 ))
 (let (($x344 (and $x287 $x49)))
 (let (($x195 (= $x344 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x355 (bvneg ?x213)))
 (let (($x348 (= ?x355 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x338 (= $x348 true)))
 (let (($x65 (= $x338 true)))
 (let (($x185 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x357 (= $x185 true)))
 (let (($x327 (= $x357 true)))
 (let (($x148 (= $x327 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (= $x301 true)))
 (let (($x256 (= $x97 true)))
 (let (($x136 (= $x256 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x307 (bvsub ?x124 ?x261)))
 (let (($x288 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x307) (bvult ?x124 ?x307))))
 (let (($x203 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x183 (ite $x203 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x199 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x153 (bvmul (_ bv4 64) ?x199)))
 (let ((?x226 ((_ extract 63 32) ?x153)))
 (let (($x105 (= ?x226 ?x183)))
 (let (($x42 (and $x105 $x288)))
 (let (($x175 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x336 (and $x175 $x42)))
 (let (($x314 (= true $x336)))
 (let (($x96 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x73 (=> $x96 $x314)))
 (let (($x21 (= $x73 true)))
 (let (($x349 (= $x21 true)))
 (let (($x166 (= $x349 true)))
 (let (($x31 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x31 true)))
 (let (($x156 (= $x7 true)))
 (let (($x60 (= $x156 true)))
 (let (($x212 (= $x96 true)))
 (let (($x259 (= $x212 true)))
 (let (($x232 (= $x259 true)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x260)))
 (let ((?x312 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x312)))
 (let ((?x255 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x255)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (and $x209 $x113)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x362 (and $x250 $x179)))
 (let (($x252 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x98 $x102)))
 (let (($x141 (not $x133)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x286 $x37)))
 (let (($x186 (and (not $x159) $x141)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x23 $x178)))
 (let (($x109 (not $x77)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x202 $x219)))
 (let (($x197 (and (not $x194) $x109)))
 (let (($x208 (and (and (and (and (and (and $x197 $x186) $x32) $x252) $x362) $x176) $x242)))
 (let (($x86 (and $x208 $x245)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x81 (or false (or false (and (and true (or $x106 $x138)) (or $x145 $x44))))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x101 (and $x120 $x86)))
 (let (($x311 (= $x101 true)))
 (let (($x43 (= $x311 true)))
 (let (($x215 (= $x43 true)))
 (let (($x160 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x87 (= $x160 true)))
 (let (($x8 (= $x87 true)))
 (let (($x191 (= $x8 true)))
 (let ((?x116 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x5 (= (_ bv0 2) ?x116)))
 (let (($x112 (= $x5 true)))
 (let (($x12 (= $x112 true)))
 (let ((?x206 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x206)))
 (let (($x181 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (= $x181 true)))
 (let (($x64 (= $x75 true)))
 (let (($x193 (= ?x10 input.dst.llvm-%n)))
 (let (($x24 (= $x193 true)))
 (let (($x80 (= $x24 true)))
 (let (($x100 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x100 true)))
 (let (($x13 (= $x168 true)))
 (let (($x17 (= $x13 true)))
 (let (($x222 (and $x17 $x80)))
 (let (($x110 (and $x222 $x64)))
 (let (($x196 (and $x110 $x12)))
 (let (($x276 (and $x196 $x191)))
 (let (($x131 (and $x276 $x215)))
 (let (($x129 (and $x131 $x232)))
 (let (($x218 (and $x129 $x60)))
 (let (($x284 (and $x218 $x166)))
 (let (($x253 (and $x284 $x136)))
 (let (($x204 (and $x253 $x148)))
 (let (($x54 (and $x204 $x65)))
 (let (($x329 (and $x54 $x195)))
 (let (($x341 (and $x329 $x258)))
 (let (($x150 (and $x341 $x243)))
 (let (($x66 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and (not $x66) $x150)))
 (let (($x52 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and $x52 $x130)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x339 (and $x182 $x20)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x299 (and $x16 $x339)))
 (let (($x26 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd ?x124 (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x330 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x337 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x57 (or false (or false (and (and true (or $x337 $x330)) (or $x84 $x26))))))
 (let (($x68 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x57)))
 (let (($x278 (=> (and $x96 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x57)))
 (let (($x28 (and $x278 $x299)))
 (let (($x19 (=> $x28 $x270)))
 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x134 (bvsge ?x251 (_ bv0 32))))
 (let (($x248 (= $x134 true)))
 (let (($x270 (= $x248 true)))
 (let (($x333 (forall ((input.ind-%var1897X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1897X)))
 (=> $x257 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1897X) (_ bv0 32)))))
 ))
 (let (($x282 (forall ((input.ind-%var1896X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1896X)))
 (= $x257 false)))
 ))
 (let (($x229 (and $x282 $x333)))
 (let (($x243 (= $x229 true)))
 (let (($x11 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let ((?x324 (bvadd (bvmul input.ind-%var1891X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x324))))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x324 (_ bv2 32))) ?x275)))
 (let ((?x326 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x324 (_ bv3 32))) ?x90)))
 (let ((?x40 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1891X)))
 (let (($x285 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1891X)))
 (=> $x285 (= ?x40 ?x326)))))))))
 ))
 (let (($x169 (forall ((input.ind-%var1890X (_ BitVec 32)) )(let (($x95 (and (bvule (_ bv0 32) input.ind-%var1890X) (bvult input.ind-%var1890X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x285 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1890X)))
 (= $x285 $x95))))
 ))
 (let (($x207 (and $x169 $x11)))
 (let (($x258 (= $x207 true)))
 (let (($x49 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1885X)))
 (=> $x257 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1885X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1884X)))
 (= $x257 false)))
 ))
 (let (($x344 (and $x287 $x49)))
 (let (($x195 (= $x344 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x355 (bvneg ?x213)))
 (let (($x348 (= ?x355 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x338 (= $x348 true)))
 (let (($x65 (= $x338 true)))
 (let (($x185 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x357 (= $x185 true)))
 (let (($x327 (= $x357 true)))
 (let (($x148 (= $x327 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (= $x301 true)))
 (let (($x256 (= $x97 true)))
 (let (($x136 (= $x256 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x307 (bvsub ?x124 ?x261)))
 (let (($x288 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x307) (bvult ?x124 ?x307))))
 (let (($x203 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x183 (ite $x203 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x199 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x153 (bvmul (_ bv4 64) ?x199)))
 (let ((?x226 ((_ extract 63 32) ?x153)))
 (let (($x105 (= ?x226 ?x183)))
 (let (($x42 (and $x105 $x288)))
 (let (($x175 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x336 (and $x175 $x42)))
 (let (($x314 (= true $x336)))
 (let (($x96 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x73 (=> $x96 $x314)))
 (let (($x21 (= $x73 true)))
 (let (($x349 (= $x21 true)))
 (let (($x166 (= $x349 true)))
 (let (($x31 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x31 true)))
 (let (($x156 (= $x7 true)))
 (let (($x60 (= $x156 true)))
 (let (($x212 (= $x96 true)))
 (let (($x259 (= $x212 true)))
 (let (($x232 (= $x259 true)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x260)))
 (let ((?x312 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x312)))
 (let ((?x255 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x255)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (and $x209 $x113)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x362 (and $x250 $x179)))
 (let (($x252 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x98 $x102)))
 (let (($x141 (not $x133)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x286 $x37)))
 (let (($x186 (and (not $x159) $x141)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x23 $x178)))
 (let (($x109 (not $x77)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x202 $x219)))
 (let (($x197 (and (not $x194) $x109)))
 (let (($x208 (and (and (and (and (and (and $x197 $x186) $x32) $x252) $x362) $x176) $x242)))
 (let (($x86 (and $x208 $x245)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x81 (or false (or false (and (and true (or $x106 $x138)) (or $x145 $x44))))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x101 (and $x120 $x86)))
 (let (($x311 (= $x101 true)))
 (let (($x43 (= $x311 true)))
 (let (($x215 (= $x43 true)))
 (let (($x160 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x87 (= $x160 true)))
 (let (($x8 (= $x87 true)))
 (let (($x191 (= $x8 true)))
 (let ((?x116 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x5 (= (_ bv0 2) ?x116)))
 (let (($x112 (= $x5 true)))
 (let (($x12 (= $x112 true)))
 (let ((?x206 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x206)))
 (let (($x181 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (= $x181 true)))
 (let (($x64 (= $x75 true)))
 (let (($x193 (= ?x10 input.dst.llvm-%n)))
 (let (($x24 (= $x193 true)))
 (let (($x80 (= $x24 true)))
 (let (($x100 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x100 true)))
 (let (($x13 (= $x168 true)))
 (let (($x17 (= $x13 true)))
 (let (($x222 (and $x17 $x80)))
 (let (($x110 (and $x222 $x64)))
 (let (($x196 (and $x110 $x12)))
 (let (($x276 (and $x196 $x191)))
 (let (($x131 (and $x276 $x215)))
 (let (($x129 (and $x131 $x232)))
 (let (($x218 (and $x129 $x60)))
 (let (($x284 (and $x218 $x166)))
 (let (($x253 (and $x284 $x136)))
 (let (($x204 (and $x253 $x148)))
 (let (($x54 (and $x204 $x65)))
 (let (($x329 (and $x54 $x195)))
 (let (($x341 (and $x329 $x258)))
 (let (($x150 (and $x341 $x243)))
 (let (($x66 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and (not $x66) $x150)))
 (let (($x52 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and $x52 $x130)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x339 (and $x182 $x20)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x299 (and $x16 $x339)))
 (let (($x26 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd ?x124 (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x330 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x337 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x57 (or false (or false (and (and true (or $x337 $x330)) (or $x84 $x26))))))
 (let (($x68 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x57)))
 (let (($x278 (=> (and $x96 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x57)))
 (let (($x28 (and $x278 $x299)))
 (let (($x19 (=> $x28 $x270)))
 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 94
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x201 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x48 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x99 (bvmul (_ bv4294967295 32) ?x48)))
 (let ((?x334 (bvneg ?x99)))
 (let (($x91 (= ?x334 ?x201)))
 (let (($x198 (= $x91 true)))
 (let (($x351 (forall ((input.ind-%var1915X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1915X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1915X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var1914X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1914X)))
 (= $x271 false)))
 ))
 (let (($x300 (and $x122 $x351)))
 (let (($x363 (= $x300 true)))
 (let (($x211 (forall ((input.ind-%var1909X (_ BitVec 32)) )(let ((?x83 (bvadd (bvmul input.ind-%var1909X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x345 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x83))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv2 32))) ?x345)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv3 32))) ?x263)))
 (let ((?x282 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1909X)))
 (let (($x50 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1909X)))
 (=> $x50 (= ?x282 ?x354)))))))))
 ))
 (let (($x11 (forall ((input.ind-%var1908X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var1908X) (bvult input.ind-%var1908X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x50 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1908X)))
 (= $x50 $x152))))
 ))
 (let (($x342 (and $x11 $x211)))
 (let (($x29 (= $x342 true)))
 (let (($x127 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1903X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1903X) (_ bv0 32)))))
 ))
 (let (($x344 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1902X)))
 (= $x271 false)))
 ))
 (let (($x36 (and $x344 $x127)))
 (let (($x324 (= $x36 true)))
 (let ((?x355 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x348 (bvneg ?x355)))
 (let (($x338 (= ?x348 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= $x338 true)))
 (let (($x54 (= $x65 true)))
 (let (($x357 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x327 (= $x357 true)))
 (let (($x148 (= $x327 true)))
 (let (($x204 (= $x148 true)))
 (let (($x97 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x256 (= $x97 true)))
 (let (($x136 (= $x256 true)))
 (let (($x253 (= $x136 true)))
 (let (($x21 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x349 (= $x21 true)))
 (let (($x166 (= $x349 true)))
 (let (($x284 (= $x166 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x226 (bvsub ?x124 ?x261)))
 (let (($x55 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x226) (bvult ?x124 ?x226))))
 (let (($x170 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x199 (ite $x170 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x76 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x76)))
 (let ((?x175 ((_ extract 63 32) ?x53)))
 (let (($x153 (= ?x175 ?x199)))
 (let (($x307 (and $x153 $x55)))
 (let (($x60 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x164 (and $x60 $x307)))
 (let (($x45 (= true $x164)))
 (let (($x162 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x288 (=> $x162 $x45)))
 (let (($x42 (= $x288 true)))
 (let (($x336 (= $x42 true)))
 (let (($x314 (= $x336 true)))
 (let (($x212 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x259 (= $x212 true)))
 (let (($x232 (= $x259 true)))
 (let (($x129 (= $x232 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x311 (= $x101 true)))
 (let (($x43 (= $x311 true)))
 (let (($x215 (= $x43 true)))
 (let (($x242 (= $x162 true)))
 (let (($x208 (= $x242 true)))
 (let (($x260 (= $x208 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x78)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x32)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x102)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (and $x98 $x133)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x157 $x141)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x194 $x107)))
 (let (($x178 (not $x23)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x120 $x202)))
 (let (($x109 (and (not $x219) $x178)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x145 $x44)))
 (let (($x163 (not $x9)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x116 $x5)))
 (let (($x81 (and (not $x167) $x163)))
 (let (($x179 (and (and (and (and (and (and $x81 $x109) $x286) $x159) $x186) $x114) $x295)))
 (let (($x362 (and $x179 $x252)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x196)))
 (let (($x106 (or false (or false (and (and true (or $x160 $x87)) (or $x276 $x74))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x244 (and $x139 $x362)))
 (let (($x255 (= $x244 true)))
 (let (($x176 (= $x255 true)))
 (let (($x274 (= $x176 true)))
 (let ((?x222 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x181 (= (_ bv0 2) ?x222)))
 (let (($x75 (= $x181 true)))
 (let (($x64 (= $x75 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x100)))
 (let (($x206 (= ?x168 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x206 true)))
 (let (($x193 (= $x10 true)))
 (let (($x13 (= ?x168 input.dst.llvm-%n)))
 (let (($x17 (= $x13 true)))
 (let (($x46 (= $x17 true)))
 (let (($x24 (and $x46 $x193)))
 (let (($x110 (and $x24 $x64)))
 (let (($x312 (and $x110 $x274)))
 (let (($x245 (and $x312 $x260)))
 (let (($x131 (and $x245 $x215)))
 (let (($x31 (and $x131 $x129)))
 (let (($x73 (and $x31 $x314)))
 (let (($x301 (and $x73 $x284)))
 (let (($x185 (and $x301 $x253)))
 (let (($x213 (and $x185 $x204)))
 (let (($x155 (and $x213 $x54)))
 (let (($x290 (and $x155 $x324)))
 (let (($x41 (and $x290 $x29)))
 (let (($x35 (and $x41 $x363)))
 (let (($x70 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and (not $x70) $x35)))
 (let (($x189 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x316 (and $x189 $x82)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x79 $x316)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x147 (and $x190 $x292)))
 (let (($x262 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x330 (bvadd ?x124 (_ bv3 32))))
 (let (($x361 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x330)))
 (let (($x254 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x330)))
 (let (($x278 (or false (or false (and (and true (or $x241 $x254)) (or $x361 $x262))))))
 (let (($x16 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x278)))
 (let (($x69 (=> (and $x162 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x278)))
 (let (($x149 (and $x69 $x147)))
 (let (($x249 (=> $x149 $x198)))
 (not $x249))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x201 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x48 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x99 (bvmul (_ bv4294967295 32) ?x48)))
 (let ((?x334 (bvneg ?x99)))
 (let (($x91 (= ?x334 ?x201)))
 (let (($x198 (= $x91 true)))
 (let (($x351 (forall ((input.ind-%var1915X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1915X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1915X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var1914X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1914X)))
 (= $x271 false)))
 ))
 (let (($x300 (and $x122 $x351)))
 (let (($x363 (= $x300 true)))
 (let (($x211 (forall ((input.ind-%var1909X (_ BitVec 32)) )(let ((?x83 (bvadd (bvmul input.ind-%var1909X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x345 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x83))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv2 32))) ?x345)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv3 32))) ?x263)))
 (let ((?x282 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1909X)))
 (let (($x50 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1909X)))
 (=> $x50 (= ?x282 ?x354)))))))))
 ))
 (let (($x11 (forall ((input.ind-%var1908X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var1908X) (bvult input.ind-%var1908X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x50 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1908X)))
 (= $x50 $x152))))
 ))
 (let (($x342 (and $x11 $x211)))
 (let (($x29 (= $x342 true)))
 (let (($x127 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1903X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1903X) (_ bv0 32)))))
 ))
 (let (($x344 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1902X)))
 (= $x271 false)))
 ))
 (let (($x36 (and $x344 $x127)))
 (let (($x324 (= $x36 true)))
 (let ((?x355 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x348 (bvneg ?x355)))
 (let (($x338 (= ?x348 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= $x338 true)))
 (let (($x54 (= $x65 true)))
 (let (($x357 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x327 (= $x357 true)))
 (let (($x148 (= $x327 true)))
 (let (($x204 (= $x148 true)))
 (let (($x97 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x256 (= $x97 true)))
 (let (($x136 (= $x256 true)))
 (let (($x253 (= $x136 true)))
 (let (($x21 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x349 (= $x21 true)))
 (let (($x166 (= $x349 true)))
 (let (($x284 (= $x166 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x226 (bvsub ?x124 ?x261)))
 (let (($x55 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x226) (bvult ?x124 ?x226))))
 (let (($x170 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x199 (ite $x170 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x76 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x76)))
 (let ((?x175 ((_ extract 63 32) ?x53)))
 (let (($x153 (= ?x175 ?x199)))
 (let (($x307 (and $x153 $x55)))
 (let (($x60 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x164 (and $x60 $x307)))
 (let (($x45 (= true $x164)))
 (let (($x162 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x288 (=> $x162 $x45)))
 (let (($x42 (= $x288 true)))
 (let (($x336 (= $x42 true)))
 (let (($x314 (= $x336 true)))
 (let (($x212 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x259 (= $x212 true)))
 (let (($x232 (= $x259 true)))
 (let (($x129 (= $x232 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x311 (= $x101 true)))
 (let (($x43 (= $x311 true)))
 (let (($x215 (= $x43 true)))
 (let (($x242 (= $x162 true)))
 (let (($x208 (= $x242 true)))
 (let (($x260 (= $x208 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x78)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x32)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x102)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (and $x98 $x133)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x157 $x141)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x194 $x107)))
 (let (($x178 (not $x23)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x120 $x202)))
 (let (($x109 (and (not $x219) $x178)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x145 $x44)))
 (let (($x163 (not $x9)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x116 $x5)))
 (let (($x81 (and (not $x167) $x163)))
 (let (($x179 (and (and (and (and (and (and $x81 $x109) $x286) $x159) $x186) $x114) $x295)))
 (let (($x362 (and $x179 $x252)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x196)))
 (let (($x106 (or false (or false (and (and true (or $x160 $x87)) (or $x276 $x74))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x244 (and $x139 $x362)))
 (let (($x255 (= $x244 true)))
 (let (($x176 (= $x255 true)))
 (let (($x274 (= $x176 true)))
 (let ((?x222 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x181 (= (_ bv0 2) ?x222)))
 (let (($x75 (= $x181 true)))
 (let (($x64 (= $x75 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x100)))
 (let (($x206 (= ?x168 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x206 true)))
 (let (($x193 (= $x10 true)))
 (let (($x13 (= ?x168 input.dst.llvm-%n)))
 (let (($x17 (= $x13 true)))
 (let (($x46 (= $x17 true)))
 (let (($x24 (and $x46 $x193)))
 (let (($x110 (and $x24 $x64)))
 (let (($x312 (and $x110 $x274)))
 (let (($x245 (and $x312 $x260)))
 (let (($x131 (and $x245 $x215)))
 (let (($x31 (and $x131 $x129)))
 (let (($x73 (and $x31 $x314)))
 (let (($x301 (and $x73 $x284)))
 (let (($x185 (and $x301 $x253)))
 (let (($x213 (and $x185 $x204)))
 (let (($x155 (and $x213 $x54)))
 (let (($x290 (and $x155 $x324)))
 (let (($x41 (and $x290 $x29)))
 (let (($x35 (and $x41 $x363)))
 (let (($x70 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and (not $x70) $x35)))
 (let (($x189 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x316 (and $x189 $x82)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x79 $x316)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x147 (and $x190 $x292)))
 (let (($x262 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x330 (bvadd ?x124 (_ bv3 32))))
 (let (($x361 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x330)))
 (let (($x254 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x330)))
 (let (($x278 (or false (or false (and (and true (or $x241 $x254)) (or $x361 $x262))))))
 (let (($x16 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x278)))
 (let (($x69 (=> (and $x162 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x278)))
 (let (($x149 (and $x69 $x147)))
 (let (($x249 (=> $x149 $x198)))
 (not $x249))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 95
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x335 (forall ((input.ind-%var1941X (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul input.ind-%var1941X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x254 (bvadd ?x124 (_ bv3 32))))
 (let ((?x151 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x340 (store ?x151 (bvadd ?x124 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x268 (store ?x340 (bvadd ?x124 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x264 (store ?x268 ?x254 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x302 (concat (select ?x264 (bvadd ?x173 (_ bv2 32))) (concat (select ?x264 (bvadd ?x173 (_ bv1 32))) (select ?x264 ?x173)))))
 (let ((?x122 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1941X)))
 (let (($x115 (= input.ind-%var1941X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x308 (= (ite $x115 input.spec-%var-i-0.L3%6%bbentry ?x122) (concat (select ?x264 (bvadd ?x173 (_ bv3 32))) ?x302))))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1941X)))
 (let (($x303 (or $x22 $x115)))
 (=> $x303 $x308))))))))))))))))
 ))
 (let (($x18 (forall ((input.ind-%var1940X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1940X)))
 (let (($x93 (and $x354 (bvult input.ind-%var1940X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x115 (= input.ind-%var1940X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1940X)))
 (let (($x303 (or $x22 $x115)))
 (= $x303 $x93)))))))
 ))
 (let (($x280 (and $x18 $x335)))
 (let (($x187 (= true true)))
 (let (($x146 (and $x187 $x280)))
 (let (($x358 (= $x146 true)))
 (let (($x273 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1933X)))
 (=> $x220 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1933X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1932X)))
 (= $x220 false)))
 ))
 (let (($x325 (and $x20 $x273)))
 (let (($x95 (= $x325 true)))
 (let (($x246 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul input.ind-%var1927X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x173))))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv2 32))) ?x240)))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv3 32))) ?x207)))
 (let ((?x122 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1927X)))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1927X)))
 (=> $x22 (= ?x122 ?x309)))))))))
 ))
 (let (($x211 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1926X)))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1926X)))
 (= $x22 (and $x354 (bvult input.ind-%var1926X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x243 (and $x211 $x246)))
 (let (($x150 (= $x243 true)))
 (let (($x229 (forall ((input.ind-%var1921X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1921X)))
 (=> $x220 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1921X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var1920X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1920X)))
 (= $x220 false)))
 ))
 (let (($x104 (and $x36 $x229)))
 (let (($x83 (= $x104 true)))
 (let ((?x348 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x338 (bvneg ?x348)))
 (let (($x65 (= ?x338 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x65 true)))
 (let (($x155 (= $x54 true)))
 (let ((?x327 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x148 (= (_ bv0 2) ?x327)))
 (let (($x204 (= $x148 true)))
 (let (($x213 (= $x204 true)))
 (let (($x97 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x256 (= $x97 true)))
 (let (($x136 (= $x256 true)))
 (let (($x253 (= $x136 true)))
 (let (($x21 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x349 (= $x21 true)))
 (let (($x166 (= $x349 true)))
 (let (($x284 (= $x166 true)))
 (let (($x288 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x42 (= $x288 true)))
 (let (($x336 (= $x42 true)))
 (let (($x314 (= $x336 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x53 (bvsub ?x124 ?x261)))
 (let (($x153 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x53) (bvult ?x124 ?x53))))
 (let (($x60 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x218 (ite $x60 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x31 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvmul (_ bv4 64) ?x31)))
 (let ((?x156 ((_ extract 63 32) ?x7)))
 (let (($x76 (= ?x156 ?x218)))
 (let (($x203 (and $x76 $x153)))
 (let (($x232 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x226 (and $x232 $x203)))
 (let (($x183 (= true $x226)))
 (let (($x227 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x105 (=> $x227 $x183)))
 (let (($x55 (= $x105 true)))
 (let (($x307 (= $x55 true)))
 (let (($x164 (= $x307 true)))
 (let (($x101 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x311 (= $x101 true)))
 (let (($x43 (= $x311 true)))
 (let (($x215 (= $x43 true)))
 (let (($x242 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x242 true)))
 (let (($x260 (= $x208 true)))
 (let (($x245 (= $x260 true)))
 (let (($x244 (= $x227 true)))
 (let (($x255 (= $x244 true)))
 (let (($x176 (= $x255 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x102)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x157)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x197)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x281 $x286)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x109 $x250)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x163 $x81)))
 (let (($x202 (not $x120)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x145 $x44)))
 (let (($x77 (and (not $x9) $x202)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x106 $x139)))
 (let (($x5 (not $x116)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x222 $x181)))
 (let (($x171 (and (not $x174) $x5)))
 (let (($x113 (and (and (and (and (and (and $x171 $x77) $x107) $x178) $x37) $x209) $x98)))
 (let (($x32 (and $x113 $x133)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x74 (or false (or false (and (and true (or $x112 $x12)) (or $x160 $x87))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x295 (and $x33 $x32)))
 (let (($x179 (= $x295 true)))
 (let (($x78 (= $x179 true)))
 (let (($x252 (= $x78 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x100)))
 (let (($x206 (= ?x168 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x206 true)))
 (let (($x193 (= $x10 true)))
 (let (($x13 (= ?x168 input.dst.llvm-%n)))
 (let (($x17 (= $x13 true)))
 (let (($x46 (= $x17 true)))
 (let (($x24 (and $x46 $x193)))
 (let (($x362 (and $x24 $x252)))
 (let (($x274 (and $x362 $x176)))
 (let (($x86 (and $x274 $x245)))
 (let (($x131 (and $x86 $x215)))
 (let (($x45 (and $x131 $x164)))
 (let (($x73 (and $x45 $x314)))
 (let (($x301 (and $x73 $x284)))
 (let (($x185 (and $x301 $x253)))
 (let (($x355 (and $x185 $x213)))
 (let (($x287 (and $x355 $x155)))
 (let (($x306 (and $x287 $x83)))
 (let (($x270 (and $x306 $x150)))
 (let (($x125 (and $x270 $x95)))
 (let (($x234 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x313 (and (not $x234) $x125)))
 (let (($x66 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x66 $x313)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x140 $x172)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x329 (and $x56 $x275)))
 (let (($x57 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x124 (_ bv3 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x84 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x69 (or false (or false (and (and true (or $x291 $x84)) (or $x177 $x57))))))
 (let (($x190 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x69)))
 (let (($x72 (=> (and $x227 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x69)))
 (let (($x217 (and $x72 $x329)))
 (let (($x85 (=> $x217 $x358)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x335 (forall ((input.ind-%var1941X (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul input.ind-%var1941X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x254 (bvadd ?x124 (_ bv3 32))))
 (let ((?x151 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x124 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x340 (store ?x151 (bvadd ?x124 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x268 (store ?x340 (bvadd ?x124 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x264 (store ?x268 ?x254 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x302 (concat (select ?x264 (bvadd ?x173 (_ bv2 32))) (concat (select ?x264 (bvadd ?x173 (_ bv1 32))) (select ?x264 ?x173)))))
 (let ((?x122 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1941X)))
 (let (($x115 (= input.ind-%var1941X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x308 (= (ite $x115 input.spec-%var-i-0.L3%6%bbentry ?x122) (concat (select ?x264 (bvadd ?x173 (_ bv3 32))) ?x302))))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1941X)))
 (let (($x303 (or $x22 $x115)))
 (=> $x303 $x308))))))))))))))))
 ))
 (let (($x18 (forall ((input.ind-%var1940X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1940X)))
 (let (($x93 (and $x354 (bvult input.ind-%var1940X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x115 (= input.ind-%var1940X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1940X)))
 (let (($x303 (or $x22 $x115)))
 (= $x303 $x93)))))))
 ))
 (let (($x280 (and $x18 $x335)))
 (let (($x187 (= true true)))
 (let (($x146 (and $x187 $x280)))
 (let (($x358 (= $x146 true)))
 (let (($x273 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1933X)))
 (=> $x220 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1933X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1932X)))
 (= $x220 false)))
 ))
 (let (($x325 (and $x20 $x273)))
 (let (($x95 (= $x325 true)))
 (let (($x246 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul input.ind-%var1927X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x173))))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv2 32))) ?x240)))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv3 32))) ?x207)))
 (let ((?x122 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1927X)))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1927X)))
 (=> $x22 (= ?x122 ?x309)))))))))
 ))
 (let (($x211 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1926X)))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1926X)))
 (= $x22 (and $x354 (bvult input.ind-%var1926X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x243 (and $x211 $x246)))
 (let (($x150 (= $x243 true)))
 (let (($x229 (forall ((input.ind-%var1921X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1921X)))
 (=> $x220 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1921X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var1920X (_ BitVec 32)) )(let (($x220 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1920X)))
 (= $x220 false)))
 ))
 (let (($x104 (and $x36 $x229)))
 (let (($x83 (= $x104 true)))
 (let ((?x348 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x338 (bvneg ?x348)))
 (let (($x65 (= ?x338 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x65 true)))
 (let (($x155 (= $x54 true)))
 (let ((?x327 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x148 (= (_ bv0 2) ?x327)))
 (let (($x204 (= $x148 true)))
 (let (($x213 (= $x204 true)))
 (let (($x97 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x256 (= $x97 true)))
 (let (($x136 (= $x256 true)))
 (let (($x253 (= $x136 true)))
 (let (($x21 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x349 (= $x21 true)))
 (let (($x166 (= $x349 true)))
 (let (($x284 (= $x166 true)))
 (let (($x288 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x42 (= $x288 true)))
 (let (($x336 (= $x42 true)))
 (let (($x314 (= $x336 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x53 (bvsub ?x124 ?x261)))
 (let (($x153 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x53) (bvult ?x124 ?x53))))
 (let (($x60 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x218 (ite $x60 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x31 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvmul (_ bv4 64) ?x31)))
 (let ((?x156 ((_ extract 63 32) ?x7)))
 (let (($x76 (= ?x156 ?x218)))
 (let (($x203 (and $x76 $x153)))
 (let (($x232 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x226 (and $x232 $x203)))
 (let (($x183 (= true $x226)))
 (let (($x227 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x105 (=> $x227 $x183)))
 (let (($x55 (= $x105 true)))
 (let (($x307 (= $x55 true)))
 (let (($x164 (= $x307 true)))
 (let (($x101 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x311 (= $x101 true)))
 (let (($x43 (= $x311 true)))
 (let (($x215 (= $x43 true)))
 (let (($x242 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x242 true)))
 (let (($x260 (= $x208 true)))
 (let (($x245 (= $x260 true)))
 (let (($x244 (= $x227 true)))
 (let (($x255 (= $x244 true)))
 (let (($x176 (= $x255 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x102)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x157)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x197)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x281 $x286)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x109 $x250)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x163 $x81)))
 (let (($x202 (not $x120)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x145 $x44)))
 (let (($x77 (and (not $x9) $x202)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x106 $x139)))
 (let (($x5 (not $x116)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x222 $x181)))
 (let (($x171 (and (not $x174) $x5)))
 (let (($x113 (and (and (and (and (and (and $x171 $x77) $x107) $x178) $x37) $x209) $x98)))
 (let (($x32 (and $x113 $x133)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x74 (or false (or false (and (and true (or $x112 $x12)) (or $x160 $x87))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x295 (and $x33 $x32)))
 (let (($x179 (= $x295 true)))
 (let (($x78 (= $x179 true)))
 (let (($x252 (= $x78 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x100)))
 (let (($x206 (= ?x168 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x206 true)))
 (let (($x193 (= $x10 true)))
 (let (($x13 (= ?x168 input.dst.llvm-%n)))
 (let (($x17 (= $x13 true)))
 (let (($x46 (= $x17 true)))
 (let (($x24 (and $x46 $x193)))
 (let (($x362 (and $x24 $x252)))
 (let (($x274 (and $x362 $x176)))
 (let (($x86 (and $x274 $x245)))
 (let (($x131 (and $x86 $x215)))
 (let (($x45 (and $x131 $x164)))
 (let (($x73 (and $x45 $x314)))
 (let (($x301 (and $x73 $x284)))
 (let (($x185 (and $x301 $x253)))
 (let (($x355 (and $x185 $x213)))
 (let (($x287 (and $x355 $x155)))
 (let (($x306 (and $x287 $x83)))
 (let (($x270 (and $x306 $x150)))
 (let (($x125 (and $x270 $x95)))
 (let (($x234 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x313 (and (not $x234) $x125)))
 (let (($x66 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and $x66 $x313)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x140 $x172)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x329 (and $x56 $x275)))
 (let (($x57 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x124 (_ bv3 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x84 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x69 (or false (or false (and (and true (or $x291 $x84)) (or $x177 $x57))))))
 (let (($x190 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x69)))
 (let (($x72 (=> (and $x227 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x69)))
 (let (($x217 (and $x72 $x329)))
 (let (($x85 (=> $x217 $x358)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 96
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x266 (bvule ?x41 (_ bv4294967294 32))))
 (let (($x144 (= $x266 true)))
 (let (($x89 (= $x144 true)))
 (let (($x224 (forall ((input.ind-%var1959X (_ BitVec 32)) )(let (($x326 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1959X)))
 (=> $x326 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1959X) (_ bv0 32)))))
 ))
 (let (($x335 (forall ((input.ind-%var1958X (_ BitVec 32)) )(let (($x326 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1958X)))
 (= $x326 false)))
 ))
 (let (($x80 (and $x335 $x224)))
 (let (($x267 (= $x80 true)))
 (let (($x165 (forall ((input.ind-%var1953X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var1953X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x289))))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv2 32))) ?x154)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv3 32))) ?x47)))
 (let ((?x20 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1953X)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1953X)))
 (=> $x195 (= ?x20 ?x264)))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x228 (and (bvule (_ bv0 32) input.ind-%var1952X) (bvult input.ind-%var1952X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1952X)))
 (= $x195 $x228))))
 ))
 (let (($x111 (and $x246 $x165)))
 (let (($x135 (= $x111 true)))
 (let (($x300 (forall ((input.ind-%var1947X (_ BitVec 32)) )(let (($x326 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1947X)))
 (=> $x326 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1947X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var1946X (_ BitVec 32)) )(let (($x326 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1946X)))
 (= $x326 false)))
 ))
 (let (($x15 (and $x104 $x300)))
 (let (($x173 (= $x15 true)))
 (let ((?x338 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x338)))
 (let (($x54 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x155 (= $x54 true)))
 (let (($x287 (= $x155 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x204 (= $x148 true)))
 (let (($x213 (= $x204 true)))
 (let (($x355 (= $x213 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x253 (= $x136 true)))
 (let (($x185 (= $x253 true)))
 (let (($x357 (= $x185 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x45 (bvsub ?x124 ?x261)))
 (let (($x314 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x45) (bvult ?x124 ?x45))))
 (let (($x55 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x307 (ite $x55 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x226 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x226)))
 (let ((?x105 ((_ extract 63 32) ?x183)))
 (let (($x164 (= ?x105 ?x307)))
 (let (($x73 (and $x164 $x314)))
 (let (($x153 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x21 (and $x153 $x73)))
 (let (($x349 (= true $x21)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (=> $x58 $x349)))
 (let (($x284 (= $x166 true)))
 (let (($x301 (= $x284 true)))
 (let (($x97 (= $x301 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x218 (= $x60 true)))
 (let (($x76 (= $x218 true)))
 (let (($x175 (= $x76 true)))
 (let (($x129 (= $x58 true)))
 (let (($x31 (= $x129 true)))
 (let (($x7 (= $x31 true)))
 (let ((?x312 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x312)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x176)))
 (let ((?x244 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x255 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x244)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (and $x295 $x78)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x362 (and $x32 $x252)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x37 $x128)))
 (let (($x209 (not $x159)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x197 $x286)))
 (let (($x157 (and (not $x250) $x209)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x186 $x23)))
 (let (($x14 (not $x178)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x167 $x106)))
 (let (($x281 (and (not $x107) $x14)))
 (let (($x311 (and (and (and (and (and (and $x281 $x157) $x113) $x133) $x362) $x255) $x274)))
 (let (($x43 (and $x311 $x242)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x77 (or false (or false (and (and true (or $x171 $x145)) (or $x219 $x163))))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x215 (and $x194 $x43)))
 (let (($x131 (= $x215 true)))
 (let (($x212 (= $x131 true)))
 (let (($x259 (= $x212 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x276 true)))
 (let (($x33 (= $x74 true)))
 (let (($x222 (= $x33 true)))
 (let ((?x196 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x160 (= (_ bv0 2) ?x196)))
 (let (($x87 (= $x160 true)))
 (let (($x8 (= $x87 true)))
 (let ((?x206 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x206)))
 (let (($x158 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (= $x158 true)))
 (let (($x112 (= $x110 true)))
 (let (($x193 (= ?x10 input.dst.llvm-%n)))
 (let (($x24 (= $x193 true)))
 (let (($x75 (= $x24 true)))
 (let (($x100 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x100 true)))
 (let (($x13 (= $x168 true)))
 (let (($x17 (= $x13 true)))
 (let (($x64 (and $x17 $x75)))
 (let (($x12 (and $x64 $x112)))
 (let (($x191 (and $x12 $x8)))
 (let (($x181 (and $x191 $x222)))
 (let (($x232 (and $x181 $x259)))
 (let (($x156 (and $x232 $x7)))
 (let (($x53 (and $x156 $x175)))
 (let (($x256 (and $x53 $x97)))
 (let (($x327 (and $x256 $x357)))
 (let (($x348 (and $x327 $x355)))
 (let (($x344 (and $x348 $x287)))
 (let (($x341 (and $x344 $x173)))
 (let (($x302 (and $x341 $x135)))
 (let (($x351 (and $x302 $x267)))
 (let (($x214 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (and (not $x214) $x351)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x339 (and $x70 $x90)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x324 (and $x52 $x339)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x50 (and $x182 $x324)))
 (let (($x278 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd ?x124 (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x361 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x84)))
 (let (($x72 (or false (or false (and (and true (or $x360 $x361)) (or $x68 $x278))))))
 (let (($x56 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x72)))
 (let (($x279 (=> (and $x58 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x72)))
 (let (($x342 (and $x279 $x50)))
 (let (($x271 (=> $x342 $x89)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x266 (bvule ?x41 (_ bv4294967294 32))))
 (let (($x144 (= $x266 true)))
 (let (($x89 (= $x144 true)))
 (let (($x224 (forall ((input.ind-%var1959X (_ BitVec 32)) )(let (($x326 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1959X)))
 (=> $x326 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1959X) (_ bv0 32)))))
 ))
 (let (($x335 (forall ((input.ind-%var1958X (_ BitVec 32)) )(let (($x326 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1958X)))
 (= $x326 false)))
 ))
 (let (($x80 (and $x335 $x224)))
 (let (($x267 (= $x80 true)))
 (let (($x165 (forall ((input.ind-%var1953X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var1953X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x289))))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv2 32))) ?x154)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x289 (_ bv3 32))) ?x47)))
 (let ((?x20 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1953X)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1953X)))
 (=> $x195 (= ?x20 ?x264)))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x228 (and (bvule (_ bv0 32) input.ind-%var1952X) (bvult input.ind-%var1952X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1952X)))
 (= $x195 $x228))))
 ))
 (let (($x111 (and $x246 $x165)))
 (let (($x135 (= $x111 true)))
 (let (($x300 (forall ((input.ind-%var1947X (_ BitVec 32)) )(let (($x326 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1947X)))
 (=> $x326 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1947X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var1946X (_ BitVec 32)) )(let (($x326 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1946X)))
 (= $x326 false)))
 ))
 (let (($x15 (and $x104 $x300)))
 (let (($x173 (= $x15 true)))
 (let ((?x338 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x338)))
 (let (($x54 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x155 (= $x54 true)))
 (let (($x287 (= $x155 true)))
 (let (($x148 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x204 (= $x148 true)))
 (let (($x213 (= $x204 true)))
 (let (($x355 (= $x213 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x253 (= $x136 true)))
 (let (($x185 (= $x253 true)))
 (let (($x357 (= $x185 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x45 (bvsub ?x124 ?x261)))
 (let (($x314 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x45) (bvult ?x124 ?x45))))
 (let (($x55 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x307 (ite $x55 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x226 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x226)))
 (let ((?x105 ((_ extract 63 32) ?x183)))
 (let (($x164 (= ?x105 ?x307)))
 (let (($x73 (and $x164 $x314)))
 (let (($x153 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x21 (and $x153 $x73)))
 (let (($x349 (= true $x21)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (=> $x58 $x349)))
 (let (($x284 (= $x166 true)))
 (let (($x301 (= $x284 true)))
 (let (($x97 (= $x301 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x218 (= $x60 true)))
 (let (($x76 (= $x218 true)))
 (let (($x175 (= $x76 true)))
 (let (($x129 (= $x58 true)))
 (let (($x31 (= $x129 true)))
 (let (($x7 (= $x31 true)))
 (let ((?x312 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x312)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x176)))
 (let ((?x244 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x255 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x244)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (and $x295 $x78)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x362 (and $x32 $x252)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x37 $x128)))
 (let (($x209 (not $x159)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x197 $x286)))
 (let (($x157 (and (not $x250) $x209)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x186 $x23)))
 (let (($x14 (not $x178)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x167 $x106)))
 (let (($x281 (and (not $x107) $x14)))
 (let (($x311 (and (and (and (and (and (and $x281 $x157) $x113) $x133) $x362) $x255) $x274)))
 (let (($x43 (and $x311 $x242)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x77 (or false (or false (and (and true (or $x171 $x145)) (or $x219 $x163))))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x215 (and $x194 $x43)))
 (let (($x131 (= $x215 true)))
 (let (($x212 (= $x131 true)))
 (let (($x259 (= $x212 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x276 true)))
 (let (($x33 (= $x74 true)))
 (let (($x222 (= $x33 true)))
 (let ((?x196 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x160 (= (_ bv0 2) ?x196)))
 (let (($x87 (= $x160 true)))
 (let (($x8 (= $x87 true)))
 (let ((?x206 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x206)))
 (let (($x158 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (= $x158 true)))
 (let (($x112 (= $x110 true)))
 (let (($x193 (= ?x10 input.dst.llvm-%n)))
 (let (($x24 (= $x193 true)))
 (let (($x75 (= $x24 true)))
 (let (($x100 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x100 true)))
 (let (($x13 (= $x168 true)))
 (let (($x17 (= $x13 true)))
 (let (($x64 (and $x17 $x75)))
 (let (($x12 (and $x64 $x112)))
 (let (($x191 (and $x12 $x8)))
 (let (($x181 (and $x191 $x222)))
 (let (($x232 (and $x181 $x259)))
 (let (($x156 (and $x232 $x7)))
 (let (($x53 (and $x156 $x175)))
 (let (($x256 (and $x53 $x97)))
 (let (($x327 (and $x256 $x357)))
 (let (($x348 (and $x327 $x355)))
 (let (($x344 (and $x348 $x287)))
 (let (($x341 (and $x344 $x173)))
 (let (($x302 (and $x341 $x135)))
 (let (($x351 (and $x302 $x267)))
 (let (($x214 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (and (not $x214) $x351)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x339 (and $x70 $x90)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x324 (and $x52 $x339)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x50 (and $x182 $x324)))
 (let (($x278 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd ?x124 (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x361 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x84)))
 (let (($x72 (or false (or false (and (and true (or $x360 $x361)) (or $x68 $x278))))))
 (let (($x56 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x72)))
 (let (($x279 (=> (and $x58 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x72)))
 (let (($x342 (and $x279 $x50)))
 (let (($x271 (=> $x342 $x89)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 97
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x18 (bvule ?x150 (_ bv4294967294 32))))
 (let (($x85 (= $x18 true)))
 (let (($x146 (= $x85 true)))
 (let (($x51 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1977X) (_ bv0 32)))))
 ))
 (let (($x313 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x354 false)))
 ))
 (let (($x149 (and $x313 $x51)))
 (let (($x118 (= $x149 true)))
 (let (($x125 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let ((?x273 (bvadd (bvmul input.ind-%var1971X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x273))))
 (let ((?x61 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv2 32))) ?x22)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv3 32))) ?x61)))
 (let ((?x335 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1971X)))
 (let (($x340 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1971X)))
 (=> $x340 (= ?x335 ?x220)))))))))
 ))
 (let (($x165 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x323 (and (bvule (_ bv0 32) input.ind-%var1970X) (bvult input.ind-%var1970X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x340 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1970X)))
 (= $x340 $x323))))
 ))
 (let (($x143 (and $x165 $x125)))
 (let (($x359 (= $x143 true)))
 (let (($x325 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1965X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1965X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var1964X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1964X)))
 (= $x354 false)))
 ))
 (let (($x180 (and $x15 $x325)))
 (let (($x289 (= $x180 true)))
 (let ((?x65 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x65)))
 (let (($x155 (= ?x54 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x155 true)))
 (let (($x344 (= $x287 true)))
 (let (($x204 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x213 (= $x204 true)))
 (let (($x355 (= $x213 true)))
 (let (($x348 (= $x355 true)))
 (let (($x253 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x185 (= $x253 true)))
 (let (($x357 (= $x185 true)))
 (let (($x327 (= $x357 true)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x288)))
 (let ((?x307 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x307)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x153)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (and $x199 $x203)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x170 $x226)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x232 $x129)))
 (let (($x7 (not $x31)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x131 $x212)))
 (let (($x60 (and (not $x259) $x7)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (and $x274 $x311)))
 (let (($x242 (not $x312)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x208 $x98)))
 (let (($x215 (and (not $x176) $x242)))
 (let (($x349 (and (and (and (and (and (and $x215 $x60) $x76) $x53) $x183) $x55) $x164)))
 (let (($x166 (and $x349 $x45)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x244 (or false (or false (and (and true (or $x133 $x245)) (or $x179 $x78))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x244)))
 (let (($x284 (and $x101 $x166)))
 (let (($x301 (= $x284 true)))
 (let (($x97 (= $x301 true)))
 (let (($x256 (= $x97 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x114 true)))
 (let (($x128 (= $x37 true)))
 (let (($x159 (= $x128 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x281 (= $x14 true)))
 (let (($x197 (= $x281 true)))
 (let (($x286 (= $x197 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x109 (= (_ bv0 2) ?x107)))
 (let (($x186 (= $x109 true)))
 (let (($x23 (= $x186 true)))
 (let ((?x44 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x44)))
 (let (($x202 (= ?x9 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (= $x202 true)))
 (let (($x194 (= $x77 true)))
 (let (($x219 (= ?x9 input.dst.llvm-%n)))
 (let (($x163 (= $x219 true)))
 (let (($x81 (= $x163 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x8 (bvsub ?x124 ?x261)))
 (let (($x33 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x8) (bvult ?x124 ?x8))))
 (let (($x138 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x160 (ite $x138 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x110 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvmul (_ bv4 64) ?x110)))
 (let ((?x12 ((_ extract 63 32) ?x112)))
 (let (($x87 (= ?x12 ?x160)))
 (let (($x222 (and $x87 $x33)))
 (let (($x64 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x181 (and $x64 $x222)))
 (let (($x139 (= true $x181)))
 (let (($x216 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (=> $x216 $x139)))
 (let (($x141 (= $x116 true)))
 (let (($x5 (= $x141 true)))
 (let (($x171 (= $x5 true)))
 (let (($x17 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x17 true)))
 (let (($x206 (= $x46 true)))
 (let (($x10 (= $x206 true)))
 (let (($x188 (= $x216 true)))
 (let (($x100 (= $x188 true)))
 (let (($x168 (= $x100 true)))
 (let (($x193 (and $x168 $x10)))
 (let (($x145 (and $x193 $x171)))
 (let (($x120 (and $x145 $x81)))
 (let (($x167 (and $x120 $x194)))
 (let (($x178 (and $x167 $x23)))
 (let (($x250 (and $x178 $x286)))
 (let (($x209 (and $x250 $x159)))
 (let (($x136 (and $x209 $x256)))
 (let (($x148 (and $x136 $x327)))
 (let (($x338 (and $x148 $x348)))
 (let (($x36 (and $x338 $x344)))
 (let (($x268 (and $x36 $x289)))
 (let (($x187 (and $x268 $x359)))
 (let (($x247 (and $x187 $x118)))
 (let (($x169 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and (not $x169) $x247)))
 (let (($x234 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x306 (and $x234 $x240)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x298 (and $x189 $x306)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x79 $x298)))
 (let (($x69 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x361 (bvadd ?x124 (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x361)))
 (let (($x177 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x361)))
 (let (($x279 (or false (or false (and (and true (or $x26 $x177)) (or $x16 $x69))))))
 (let (($x182 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x279)))
 (let (($x330 (=> (and $x216 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x279)))
 (let (($x108 (and $x330 $x200)))
 (let (($x30 (=> $x108 $x146)))
 (not $x30))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x18 (bvule ?x150 (_ bv4294967294 32))))
 (let (($x85 (= $x18 true)))
 (let (($x146 (= $x85 true)))
 (let (($x51 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1977X) (_ bv0 32)))))
 ))
 (let (($x313 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x354 false)))
 ))
 (let (($x149 (and $x313 $x51)))
 (let (($x118 (= $x149 true)))
 (let (($x125 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let ((?x273 (bvadd (bvmul input.ind-%var1971X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x273))))
 (let ((?x61 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv2 32))) ?x22)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv3 32))) ?x61)))
 (let ((?x335 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1971X)))
 (let (($x340 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1971X)))
 (=> $x340 (= ?x335 ?x220)))))))))
 ))
 (let (($x165 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x323 (and (bvule (_ bv0 32) input.ind-%var1970X) (bvult input.ind-%var1970X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x340 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1970X)))
 (= $x340 $x323))))
 ))
 (let (($x143 (and $x165 $x125)))
 (let (($x359 (= $x143 true)))
 (let (($x325 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1965X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1965X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var1964X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1964X)))
 (= $x354 false)))
 ))
 (let (($x180 (and $x15 $x325)))
 (let (($x289 (= $x180 true)))
 (let ((?x65 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x65)))
 (let (($x155 (= ?x54 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x155 true)))
 (let (($x344 (= $x287 true)))
 (let (($x204 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x213 (= $x204 true)))
 (let (($x355 (= $x213 true)))
 (let (($x348 (= $x355 true)))
 (let (($x253 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x185 (= $x253 true)))
 (let (($x357 (= $x185 true)))
 (let (($x327 (= $x357 true)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x288)))
 (let ((?x307 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x307)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x153)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (and $x199 $x203)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x170 $x226)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x232 $x129)))
 (let (($x7 (not $x31)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x131 $x212)))
 (let (($x60 (and (not $x259) $x7)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (and $x274 $x311)))
 (let (($x242 (not $x312)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x208 $x98)))
 (let (($x215 (and (not $x176) $x242)))
 (let (($x349 (and (and (and (and (and (and $x215 $x60) $x76) $x53) $x183) $x55) $x164)))
 (let (($x166 (and $x349 $x45)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x244 (or false (or false (and (and true (or $x133 $x245)) (or $x179 $x78))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x244)))
 (let (($x284 (and $x101 $x166)))
 (let (($x301 (= $x284 true)))
 (let (($x97 (= $x301 true)))
 (let (($x256 (= $x97 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x114 true)))
 (let (($x128 (= $x37 true)))
 (let (($x159 (= $x128 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x281 (= $x14 true)))
 (let (($x197 (= $x281 true)))
 (let (($x286 (= $x197 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x109 (= (_ bv0 2) ?x107)))
 (let (($x186 (= $x109 true)))
 (let (($x23 (= $x186 true)))
 (let ((?x44 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x44)))
 (let (($x202 (= ?x9 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (= $x202 true)))
 (let (($x194 (= $x77 true)))
 (let (($x219 (= ?x9 input.dst.llvm-%n)))
 (let (($x163 (= $x219 true)))
 (let (($x81 (= $x163 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x8 (bvsub ?x124 ?x261)))
 (let (($x33 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x8) (bvult ?x124 ?x8))))
 (let (($x138 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x160 (ite $x138 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x110 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvmul (_ bv4 64) ?x110)))
 (let ((?x12 ((_ extract 63 32) ?x112)))
 (let (($x87 (= ?x12 ?x160)))
 (let (($x222 (and $x87 $x33)))
 (let (($x64 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x181 (and $x64 $x222)))
 (let (($x139 (= true $x181)))
 (let (($x216 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (=> $x216 $x139)))
 (let (($x141 (= $x116 true)))
 (let (($x5 (= $x141 true)))
 (let (($x171 (= $x5 true)))
 (let (($x17 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x17 true)))
 (let (($x206 (= $x46 true)))
 (let (($x10 (= $x206 true)))
 (let (($x188 (= $x216 true)))
 (let (($x100 (= $x188 true)))
 (let (($x168 (= $x100 true)))
 (let (($x193 (and $x168 $x10)))
 (let (($x145 (and $x193 $x171)))
 (let (($x120 (and $x145 $x81)))
 (let (($x167 (and $x120 $x194)))
 (let (($x178 (and $x167 $x23)))
 (let (($x250 (and $x178 $x286)))
 (let (($x209 (and $x250 $x159)))
 (let (($x136 (and $x209 $x256)))
 (let (($x148 (and $x136 $x327)))
 (let (($x338 (and $x148 $x348)))
 (let (($x36 (and $x338 $x344)))
 (let (($x268 (and $x36 $x289)))
 (let (($x187 (and $x268 $x359)))
 (let (($x247 (and $x187 $x118)))
 (let (($x169 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and (not $x169) $x247)))
 (let (($x234 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x306 (and $x234 $x240)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x298 (and $x189 $x306)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x79 $x298)))
 (let (($x69 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x361 (bvadd ?x124 (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x361)))
 (let (($x177 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x361)))
 (let (($x279 (or false (or false (and (and true (or $x26 $x177)) (or $x16 $x69))))))
 (let (($x182 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x279)))
 (let (($x330 (=> (and $x216 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x279)))
 (let (($x108 (and $x330 $x200)))
 (let (($x30 (=> $x108 $x146)))
 (not $x30))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 98
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x174 (bvsge ?x135 (_ bv0 32))))
 (let (($x358 (= $x174 true)))
 (let (($x303 (= $x358 true)))
 (let (($x228 (forall ((input.ind-%var1995X (_ BitVec 32)) )(let (($x309 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1995X)))
 (=> $x309 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1995X) (_ bv0 32)))))
 ))
 (let (($x90 (forall ((input.ind-%var1994X (_ BitVec 32)) )(let (($x309 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1994X)))
 (= $x309 false)))
 ))
 (let (($x217 (and $x90 $x228)))
 (let (($x239 (= $x217 true)))
 (let (($x351 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let ((?x224 (bvadd (bvmul input.ind-%var1989X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x224))))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv2 32))) ?x195)))
 (let ((?x326 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv3 32))) ?x62)))
 (let ((?x313 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1989X)))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1989X)))
 (=> $x243 (= ?x313 ?x326)))))))))
 ))
 (let (($x125 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) input.ind-%var1988X) (bvult input.ind-%var1988X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1988X)))
 (= $x243 $x127))))
 ))
 (let (($x89 (and $x125 $x351)))
 (let (($x271 (= $x89 true)))
 (let (($x80 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let (($x309 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1983X)))
 (=> $x309 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1983X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x309 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1982X)))
 (= $x309 false)))
 ))
 (let (($x285 (and $x180 $x80)))
 (let (($x273 (= $x285 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x54)))
 (let (($x287 (= ?x155 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x344 (= $x287 true)))
 (let (($x36 (= $x344 true)))
 (let (($x213 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x355 (= $x213 true)))
 (let (($x348 (= $x355 true)))
 (let (($x338 (= $x348 true)))
 (let (($x185 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x357 (= $x185 true)))
 (let (($x327 (= $x357 true)))
 (let (($x148 (= $x327 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x55)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x73)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x314 $x199)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x53 $x153)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x232 $x129)))
 (let (($x7 (not $x31)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x212 $x259)))
 (let (($x42 (and (not $x156) $x7)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (and $x274 $x311)))
 (let (($x242 (not $x312)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x260 $x255)))
 (let (($x131 (and (not $x43) $x242)))
 (let (($x166 (and (and (and (and (and (and $x131 $x42) $x76) $x175) $x203) $x183) $x105)))
 (let (($x284 (and $x166 $x21)))
 (let (($x362 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x245 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x252 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x295 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x245)))
 (let (($x208 (or false (or false (and (and true (or $x32 $x295)) (or $x252 $x362))))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x208)))
 (let (($x301 (and $x176 $x284)))
 (let (($x97 (= $x301 true)))
 (let (($x256 (= $x97 true)))
 (let (($x136 (= $x256 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x114 true)))
 (let (($x128 (= $x37 true)))
 (let (($x159 (= $x128 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x281 (= $x14 true)))
 (let (($x197 (= $x281 true)))
 (let (($x286 (= $x197 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x109 (= (_ bv0 2) ?x107)))
 (let (($x186 (= $x109 true)))
 (let (($x23 (= $x186 true)))
 (let ((?x44 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x44)))
 (let (($x202 (= ?x9 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (= $x202 true)))
 (let (($x194 (= $x77 true)))
 (let (($x219 (= ?x9 input.dst.llvm-%n)))
 (let (($x163 (= $x219 true)))
 (let (($x81 (= $x163 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x191 (bvsub ?x124 ?x261)))
 (let (($x33 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x191) (bvult ?x124 ?x191))))
 (let (($x138 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x160 (ite $x138 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x110 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvmul (_ bv4 64) ?x110)))
 (let ((?x12 ((_ extract 63 32) ?x112)))
 (let (($x87 (= ?x12 ?x160)))
 (let (($x222 (and $x87 $x33)))
 (let (($x64 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x181 (and $x64 $x222)))
 (let (($x139 (= true $x181)))
 (let (($x38 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (=> $x38 $x139)))
 (let (($x141 (= $x116 true)))
 (let (($x5 (= $x141 true)))
 (let (($x171 (= $x5 true)))
 (let (($x17 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x17 true)))
 (let (($x206 (= $x46 true)))
 (let (($x10 (= $x206 true)))
 (let (($x188 (= $x38 true)))
 (let (($x100 (= $x188 true)))
 (let (($x168 (= $x100 true)))
 (let (($x193 (and $x168 $x10)))
 (let (($x145 (and $x193 $x171)))
 (let (($x120 (and $x145 $x81)))
 (let (($x167 (and $x120 $x194)))
 (let (($x178 (and $x167 $x23)))
 (let (($x250 (and $x178 $x286)))
 (let (($x209 (and $x250 $x159)))
 (let (($x253 (and $x209 $x136)))
 (let (($x204 (and $x253 $x148)))
 (let (($x65 (and $x204 $x338)))
 (let (($x104 (and $x65 $x36)))
 (let (($x333 (and $x104 $x273)))
 (let (($x41 (and $x333 $x271)))
 (let (($x115 (and $x41 $x239)))
 (let (($x308 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and (not $x308) $x115)))
 (let (($x214 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x341 (and $x214 $x154)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x66 $x341)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x353 (and $x140 $x257)))
 (let (($x72 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd ?x124 (_ bv3 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x68 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x330 (or false (or false (and (and true (or $x262 $x68)) (or $x190 $x72))))))
 (let (($x79 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x330)))
 (let (($x254 (=> (and $x38 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x330)))
 (let (($x275 (and $x254 $x353)))
 (let (($x282 (=> $x275 $x303)))
 (not $x282))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x174 (bvsge ?x135 (_ bv0 32))))
 (let (($x358 (= $x174 true)))
 (let (($x303 (= $x358 true)))
 (let (($x228 (forall ((input.ind-%var1995X (_ BitVec 32)) )(let (($x309 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1995X)))
 (=> $x309 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1995X) (_ bv0 32)))))
 ))
 (let (($x90 (forall ((input.ind-%var1994X (_ BitVec 32)) )(let (($x309 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1994X)))
 (= $x309 false)))
 ))
 (let (($x217 (and $x90 $x228)))
 (let (($x239 (= $x217 true)))
 (let (($x351 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let ((?x224 (bvadd (bvmul input.ind-%var1989X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x224))))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv2 32))) ?x195)))
 (let ((?x326 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv3 32))) ?x62)))
 (let ((?x313 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1989X)))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1989X)))
 (=> $x243 (= ?x313 ?x326)))))))))
 ))
 (let (($x125 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) input.ind-%var1988X) (bvult input.ind-%var1988X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x243 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1988X)))
 (= $x243 $x127))))
 ))
 (let (($x89 (and $x125 $x351)))
 (let (($x271 (= $x89 true)))
 (let (($x80 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let (($x309 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1983X)))
 (=> $x309 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1983X) (_ bv0 32)))))
 ))
 (let (($x180 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x309 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1982X)))
 (= $x309 false)))
 ))
 (let (($x285 (and $x180 $x80)))
 (let (($x273 (= $x285 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x54)))
 (let (($x287 (= ?x155 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x344 (= $x287 true)))
 (let (($x36 (= $x344 true)))
 (let (($x213 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x355 (= $x213 true)))
 (let (($x348 (= $x355 true)))
 (let (($x338 (= $x348 true)))
 (let (($x185 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x357 (= $x185 true)))
 (let (($x327 (= $x357 true)))
 (let (($x148 (= $x327 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x55)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x73)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x314 $x199)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x53 $x153)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x232 $x129)))
 (let (($x7 (not $x31)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x212 $x259)))
 (let (($x42 (and (not $x156) $x7)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (and $x274 $x311)))
 (let (($x242 (not $x312)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x260 $x255)))
 (let (($x131 (and (not $x43) $x242)))
 (let (($x166 (and (and (and (and (and (and $x131 $x42) $x76) $x175) $x203) $x183) $x105)))
 (let (($x284 (and $x166 $x21)))
 (let (($x362 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x245 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x252 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x295 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x245)))
 (let (($x208 (or false (or false (and (and true (or $x32 $x295)) (or $x252 $x362))))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x208)))
 (let (($x301 (and $x176 $x284)))
 (let (($x97 (= $x301 true)))
 (let (($x256 (= $x97 true)))
 (let (($x136 (= $x256 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x37 (= $x114 true)))
 (let (($x128 (= $x37 true)))
 (let (($x159 (= $x128 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x281 (= $x14 true)))
 (let (($x197 (= $x281 true)))
 (let (($x286 (= $x197 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x109 (= (_ bv0 2) ?x107)))
 (let (($x186 (= $x109 true)))
 (let (($x23 (= $x186 true)))
 (let ((?x44 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x44)))
 (let (($x202 (= ?x9 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (= $x202 true)))
 (let (($x194 (= $x77 true)))
 (let (($x219 (= ?x9 input.dst.llvm-%n)))
 (let (($x163 (= $x219 true)))
 (let (($x81 (= $x163 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x191 (bvsub ?x124 ?x261)))
 (let (($x33 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x191) (bvult ?x124 ?x191))))
 (let (($x138 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x160 (ite $x138 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x110 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvmul (_ bv4 64) ?x110)))
 (let ((?x12 ((_ extract 63 32) ?x112)))
 (let (($x87 (= ?x12 ?x160)))
 (let (($x222 (and $x87 $x33)))
 (let (($x64 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x181 (and $x64 $x222)))
 (let (($x139 (= true $x181)))
 (let (($x38 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (=> $x38 $x139)))
 (let (($x141 (= $x116 true)))
 (let (($x5 (= $x141 true)))
 (let (($x171 (= $x5 true)))
 (let (($x17 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x17 true)))
 (let (($x206 (= $x46 true)))
 (let (($x10 (= $x206 true)))
 (let (($x188 (= $x38 true)))
 (let (($x100 (= $x188 true)))
 (let (($x168 (= $x100 true)))
 (let (($x193 (and $x168 $x10)))
 (let (($x145 (and $x193 $x171)))
 (let (($x120 (and $x145 $x81)))
 (let (($x167 (and $x120 $x194)))
 (let (($x178 (and $x167 $x23)))
 (let (($x250 (and $x178 $x286)))
 (let (($x209 (and $x250 $x159)))
 (let (($x253 (and $x209 $x136)))
 (let (($x204 (and $x253 $x148)))
 (let (($x65 (and $x204 $x338)))
 (let (($x104 (and $x65 $x36)))
 (let (($x333 (and $x104 $x273)))
 (let (($x41 (and $x333 $x271)))
 (let (($x115 (and $x41 $x239)))
 (let (($x308 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and (not $x308) $x115)))
 (let (($x214 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x341 (and $x214 $x154)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x66 $x341)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x353 (and $x140 $x257)))
 (let (($x72 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd ?x124 (_ bv3 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x68 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x330 (or false (or false (and (and true (or $x262 $x68)) (or $x190 $x72))))))
 (let (($x79 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x330)))
 (let (($x254 (=> (and $x38 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x330)))
 (let (($x275 (and $x254 $x353)))
 (let (($x282 (=> $x275 $x303)))
 (not $x282))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 99
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x359 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (bvule ?x359 input.dst.llvm-%n)))
 (let (($x93 (= $x157 true)))
 (let (($x144 (= $x93 true)))
 (let (($x323 (forall ((input.ind-%var2013X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2013X)))
 (=> $x264 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2013X) (_ bv0 32)))))
 ))
 (let (($x240 (forall ((input.ind-%var2012X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2012X)))
 (= $x264 false)))
 ))
 (let (($x342 (and $x240 $x323)))
 (let (($x11 (= $x342 true)))
 (let (($x247 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let ((?x51 (bvadd (bvmul input.ind-%var2007X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x51))))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x51 (_ bv2 32))) ?x340)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x51 (_ bv3 32))) ?x235)))
 (let ((?x90 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2007X)))
 (let (($x111 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2007X)))
 (=> $x111 (= ?x90 ?x354)))))))))
 ))
 (let (($x351 (forall ((input.ind-%var2006X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var2006X) (bvult input.ind-%var2006X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x111 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2006X)))
 (= $x111 $x229))))
 ))
 (let (($x146 (and $x351 $x247)))
 (let (($x30 (= $x146 true)))
 (let (($x149 (forall ((input.ind-%var2001X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2001X)))
 (=> $x264 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2001X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var2000X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2000X)))
 (= $x264 false)))
 ))
 (let (($x350 (and $x285 $x149)))
 (let (($x224 (= $x350 true)))
 (let ((?x155 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x155)))
 (let (($x344 (= ?x287 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x36 (= $x344 true)))
 (let (($x104 (= $x36 true)))
 (let ((?x206 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x206)))
 (let (($x348 (= ?x10 input.dst.llvm-%n)))
 (let (($x338 (= $x348 true)))
 (let (($x65 (= $x338 true)))
 (let (($x327 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x148 (= $x327 true)))
 (let (($x204 (= $x148 true)))
 (let (($x213 (= $x204 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x256 true)))
 (let (($x253 (= $x136 true)))
 (let (($x185 (= $x253 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x203 (bvsub ?x124 ?x261)))
 (let (($x45 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x203) (bvult ?x124 ?x203))))
 (let (($x170 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x199 (ite $x170 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x349 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x349)))
 (let ((?x314 ((_ extract 63 32) ?x53)))
 (let (($x153 (= ?x314 ?x199)))
 (let (($x73 (and $x153 $x45)))
 (let (($x336 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x105 (and $x336 $x73)))
 (let (($x166 (= true $x105)))
 (let (($x92 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (=> $x92 $x166)))
 (let (($x21 (= $x55 true)))
 (let (($x284 (= $x21 true)))
 (let (($x301 (= $x284 true)))
 (let (($x31 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x31 true)))
 (let (($x42 (= $x7 true)))
 (let (($x307 (= $x42 true)))
 (let (($x156 (= $x92 true)))
 (let (($x60 (= $x156 true)))
 (let (($x232 (= $x60 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x101)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x86)))
 (let ((?x252 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x362 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x252)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x295 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x32)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (and $x245 $x295)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x98 $x179)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x197 $x286)))
 (let (($x114 (not $x250)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x281 (and $x178 $x14)))
 (let (($x128 (and (not $x281) $x114)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x167 $x106)))
 (let (($x109 (not $x107)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x33 $x222)))
 (let (($x23 (and (not $x194) $x109)))
 (let (($x274 (and (and (and (and (and (and $x23 $x128) $x209) $x133) $x78) $x362) $x244)))
 (let (($x311 (and $x274 $x208)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x120 (or false (or false (and (and true (or $x141 $x5)) (or $x44 $x9))))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x120)))
 (let (($x312 (and $x77 $x311)))
 (let (($x242 (= $x312 true)))
 (let (($x131 (= $x242 true)))
 (let (($x212 (= $x131 true)))
 (let (($x160 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x87 (= $x160 true)))
 (let (($x8 (= $x87 true)))
 (let (($x191 (= $x8 true)))
 (let ((?x110 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x112 (= (_ bv0 2) ?x110)))
 (let (($x12 (= $x112 true)))
 (let (($x138 (= $x12 true)))
 (let (($x193 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (= $x193 true)))
 (let (($x75 (= $x24 true)))
 (let (($x100 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x100 true)))
 (let (($x13 (= $x168 true)))
 (let (($x17 (= $x13 true)))
 (let (($x64 (and $x17 $x75)))
 (let (($x196 (and $x64 $x138)))
 (let (($x276 (and $x196 $x191)))
 (let (($x259 (and $x276 $x212)))
 (let (($x129 (and $x259 $x232)))
 (let (($x218 (and $x129 $x307)))
 (let (($x97 (and $x218 $x301)))
 (let (($x357 (and $x97 $x185)))
 (let (($x355 (and $x357 $x213)))
 (let (($x54 (and $x355 $x65)))
 (let (($x15 (and $x54 $x104)))
 (let (($x151 (and $x15 $x224)))
 (let (($x150 (and $x151 $x30)))
 (let (($x266 (and $x150 $x11)))
 (let (($x172 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (and (not $x172) $x266)))
 (let (($x169 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x268 (and $x169 $x22)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x39 (and $x70 $x268)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x96 (and $x52 $x39)))
 (let (($x279 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x124 (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x16 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x254 (or false (or false (and (and true (or $x57 $x16)) (or $x56 $x279))))))
 (let (($x140 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x254)))
 (let (($x84 (=> (and $x92 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x254)))
 (let (($x324 (and $x84 $x96)))
 (let (($x122 (=> $x324 $x144)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x359 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (bvule ?x359 input.dst.llvm-%n)))
 (let (($x93 (= $x157 true)))
 (let (($x144 (= $x93 true)))
 (let (($x323 (forall ((input.ind-%var2013X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2013X)))
 (=> $x264 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2013X) (_ bv0 32)))))
 ))
 (let (($x240 (forall ((input.ind-%var2012X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2012X)))
 (= $x264 false)))
 ))
 (let (($x342 (and $x240 $x323)))
 (let (($x11 (= $x342 true)))
 (let (($x247 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let ((?x51 (bvadd (bvmul input.ind-%var2007X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x51))))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x51 (_ bv2 32))) ?x340)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x51 (_ bv3 32))) ?x235)))
 (let ((?x90 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2007X)))
 (let (($x111 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2007X)))
 (=> $x111 (= ?x90 ?x354)))))))))
 ))
 (let (($x351 (forall ((input.ind-%var2006X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var2006X) (bvult input.ind-%var2006X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x111 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2006X)))
 (= $x111 $x229))))
 ))
 (let (($x146 (and $x351 $x247)))
 (let (($x30 (= $x146 true)))
 (let (($x149 (forall ((input.ind-%var2001X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2001X)))
 (=> $x264 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2001X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var2000X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2000X)))
 (= $x264 false)))
 ))
 (let (($x350 (and $x285 $x149)))
 (let (($x224 (= $x350 true)))
 (let ((?x155 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x155)))
 (let (($x344 (= ?x287 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x36 (= $x344 true)))
 (let (($x104 (= $x36 true)))
 (let ((?x206 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x206)))
 (let (($x348 (= ?x10 input.dst.llvm-%n)))
 (let (($x338 (= $x348 true)))
 (let (($x65 (= $x338 true)))
 (let (($x327 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x148 (= $x327 true)))
 (let (($x204 (= $x148 true)))
 (let (($x213 (= $x204 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x256 true)))
 (let (($x253 (= $x136 true)))
 (let (($x185 (= $x253 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x203 (bvsub ?x124 ?x261)))
 (let (($x45 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x203) (bvult ?x124 ?x203))))
 (let (($x170 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x199 (ite $x170 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x349 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x349)))
 (let ((?x314 ((_ extract 63 32) ?x53)))
 (let (($x153 (= ?x314 ?x199)))
 (let (($x73 (and $x153 $x45)))
 (let (($x336 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x105 (and $x336 $x73)))
 (let (($x166 (= true $x105)))
 (let (($x92 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (=> $x92 $x166)))
 (let (($x21 (= $x55 true)))
 (let (($x284 (= $x21 true)))
 (let (($x301 (= $x284 true)))
 (let (($x31 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x31 true)))
 (let (($x42 (= $x7 true)))
 (let (($x307 (= $x42 true)))
 (let (($x156 (= $x92 true)))
 (let (($x60 (= $x156 true)))
 (let (($x232 (= $x60 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x101)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x86)))
 (let ((?x252 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x362 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x252)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x295 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x32)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (and $x245 $x295)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x98 $x179)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x197 $x286)))
 (let (($x114 (not $x250)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x281 (and $x178 $x14)))
 (let (($x128 (and (not $x281) $x114)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x167 $x106)))
 (let (($x109 (not $x107)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x33 $x222)))
 (let (($x23 (and (not $x194) $x109)))
 (let (($x274 (and (and (and (and (and (and $x23 $x128) $x209) $x133) $x78) $x362) $x244)))
 (let (($x311 (and $x274 $x208)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x120 (or false (or false (and (and true (or $x141 $x5)) (or $x44 $x9))))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x120)))
 (let (($x312 (and $x77 $x311)))
 (let (($x242 (= $x312 true)))
 (let (($x131 (= $x242 true)))
 (let (($x212 (= $x131 true)))
 (let (($x160 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x87 (= $x160 true)))
 (let (($x8 (= $x87 true)))
 (let (($x191 (= $x8 true)))
 (let ((?x110 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x112 (= (_ bv0 2) ?x110)))
 (let (($x12 (= $x112 true)))
 (let (($x138 (= $x12 true)))
 (let (($x193 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (= $x193 true)))
 (let (($x75 (= $x24 true)))
 (let (($x100 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x100 true)))
 (let (($x13 (= $x168 true)))
 (let (($x17 (= $x13 true)))
 (let (($x64 (and $x17 $x75)))
 (let (($x196 (and $x64 $x138)))
 (let (($x276 (and $x196 $x191)))
 (let (($x259 (and $x276 $x212)))
 (let (($x129 (and $x259 $x232)))
 (let (($x218 (and $x129 $x307)))
 (let (($x97 (and $x218 $x301)))
 (let (($x357 (and $x97 $x185)))
 (let (($x355 (and $x357 $x213)))
 (let (($x54 (and $x355 $x65)))
 (let (($x15 (and $x54 $x104)))
 (let (($x151 (and $x15 $x224)))
 (let (($x150 (and $x151 $x30)))
 (let (($x266 (and $x150 $x11)))
 (let (($x172 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (and (not $x172) $x266)))
 (let (($x169 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x268 (and $x169 $x22)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x39 (and $x70 $x268)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x96 (and $x52 $x39)))
 (let (($x279 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x124 (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x16 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x254 (or false (or false (and (and true (or $x57 $x16)) (or $x56 $x279))))))
 (let (($x140 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x254)))
 (let (($x84 (=> (and $x92 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x254)))
 (let (($x324 (and $x84 $x96)))
 (let (($x122 (=> $x324 $x144)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 100
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x331 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (not $x331)))
 (let (($x18 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x306 (not $x18)))
 (let (($x333 (or $x306 $x195)))
 (let (($x95 (= $x333 true)))
 (let (($x162 (= $x95 true)))
 (let (($x353 (forall ((input.ind-%var2031X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2031X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2031X) (_ bv0 32)))))
 ))
 (let (($x282 (forall ((input.ind-%var2030X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2030X)))
 (= $x15 false)))
 ))
 (let (($x358 (and $x282 $x353)))
 (let (($x280 (= $x358 true)))
 (let (($x207 (forall ((input.ind-%var2025X (_ BitVec 32)) )(let ((?x122 (bvadd (bvmul input.ind-%var2025X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x122))))
 (let ((?x61 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv2 32))) ?x302)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv3 32))) ?x61)))
 (let ((?x118 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2025X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2025X)))
 (=> $x270 (= ?x118 ?x89)))))))))
 ))
 (let (($x340 (forall ((input.ind-%var2024X (_ BitVec 32)) )(let (($x289 (and (bvule (_ bv0 32) input.ind-%var2024X) (bvult input.ind-%var2024X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2024X)))
 (= $x270 $x289))))
 ))
 (let (($x173 (and $x340 $x207)))
 (let (($x309 (= $x173 true)))
 (let (($x62 (forall ((input.ind-%var2019X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2019X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2019X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var2018X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2018X)))
 (= $x15 false)))
 ))
 (let (($x229 (and $x285 $x62)))
 (let (($x267 (= $x229 true)))
 (let ((?x348 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x338 (bvneg ?x348)))
 (let (($x65 (= ?x338 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x65 true)))
 (let (($x155 (= $x54 true)))
 (let ((?x256 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x256)))
 (let (($x148 (= ?x136 input.dst.llvm-%n)))
 (let (($x204 (= $x148 true)))
 (let (($x213 (= $x204 true)))
 (let (($x253 (= ?x136 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (= $x253 true)))
 (let (($x357 (= $x185 true)))
 (let (($x55 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x21 (= $x55 true)))
 (let (($x284 (= $x21 true)))
 (let (($x301 (= $x284 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x45 (= $x183 true)))
 (let (($x73 (= $x45 true)))
 (let (($x105 (= $x73 true)))
 (let (($x199 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x199 true)))
 (let (($x288 (= $x153 true)))
 (let (($x203 (= $x288 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x31 (bvsub ?x124 ?x261)))
 (let (($x218 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x31) (bvult ?x124 ?x31))))
 (let (($x156 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x232 (ite $x156 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x131 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x212 (bvmul (_ bv4 64) ?x131)))
 (let ((?x259 ((_ extract 63 32) ?x212)))
 (let (($x129 (= ?x259 ?x232)))
 (let (($x76 (and $x129 $x218)))
 (let (($x312 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x164 (and $x312 $x76)))
 (let (($x336 (= true $x164)))
 (let (($x175 (=> $x331 $x336)))
 (let (($x349 (= $x175 true)))
 (let (($x53 (= $x349 true)))
 (let (($x314 (= $x53 true)))
 (let (($x215 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x86 (= $x215 true)))
 (let (($x244 (= $x86 true)))
 (let (($x274 (= $x244 true)))
 (let (($x295 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x295 true)))
 (let (($x78 (= $x179 true)))
 (let (($x43 (= $x78 true)))
 (let ((?x197 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x286 (= (_ bv0 32) ?x197)))
 (let ((?x281 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x281)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x167 $x107)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x186 $x109)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x44 $x9)))
 (let (($x163 (not $x219)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x5 $x171)))
 (let (($x120 (and (not $x145) $x163)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x276 $x181)))
 (let (($x202 (not $x139)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x17 $x46)))
 (let (($x141 (and (not $x191) $x202)))
 (let (($x209 (and (and (and (and (and (and $x141 $x120) $x33) $x194) $x23) $x14) $x37)))
 (let (($x260 (and $x209 $x286)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x160 (or false (or false (and (and true (or $x24 $x75)) (or $x110 $x112))))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x160)))
 (let (($x102 (and $x8 $x260)))
 (let (($x133 (= $x102 true)))
 (let (($x255 (= $x133 true)))
 (let (($x98 (= $x255 true)))
 (let ((?x339 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x188 (= (_ bv0 2) ?x339)))
 (let (($x100 (= $x188 true)))
 (let (($x168 (= $x100 true)))
 (let (($x245 (and $x168 $x98)))
 (let (($x252 (and $x245 $x43)))
 (let (($x101 (and $x252 $x274)))
 (let (($x170 (and $x101 $x314)))
 (let (($x226 (and $x170 $x203)))
 (let (($x166 (and $x226 $x105)))
 (let (($x97 (and $x166 $x301)))
 (let (($x327 (and $x97 $x357)))
 (let (($x355 (and $x327 $x213)))
 (let (($x287 (and $x355 $x155)))
 (let (($x351 (and $x287 $x267)))
 (let (($x325 (and $x351 $x309)))
 (let (($x6 (and $x325 $x280)))
 (let (($x308 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x335 (and $x308 $x6)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x127 (and $x234 $x335)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x108 (and $x189 $x127)))
 (let (($x330 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd ?x124 (_ bv3 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x190 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x84 (or false (or false (and (and true (or $x278 $x190)) (or $x182 $x330))))))
 (let (($x52 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x84)))
 (let (($x361 (=> (and $x331 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x84)))
 (let (($x211 (and $x361 $x108)))
 (let (($x298 (=> $x211 $x162)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x331 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (not $x331)))
 (let (($x18 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x306 (not $x18)))
 (let (($x333 (or $x306 $x195)))
 (let (($x95 (= $x333 true)))
 (let (($x162 (= $x95 true)))
 (let (($x353 (forall ((input.ind-%var2031X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2031X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2031X) (_ bv0 32)))))
 ))
 (let (($x282 (forall ((input.ind-%var2030X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2030X)))
 (= $x15 false)))
 ))
 (let (($x358 (and $x282 $x353)))
 (let (($x280 (= $x358 true)))
 (let (($x207 (forall ((input.ind-%var2025X (_ BitVec 32)) )(let ((?x122 (bvadd (bvmul input.ind-%var2025X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x122))))
 (let ((?x61 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv2 32))) ?x302)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x122 (_ bv3 32))) ?x61)))
 (let ((?x118 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2025X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2025X)))
 (=> $x270 (= ?x118 ?x89)))))))))
 ))
 (let (($x340 (forall ((input.ind-%var2024X (_ BitVec 32)) )(let (($x289 (and (bvule (_ bv0 32) input.ind-%var2024X) (bvult input.ind-%var2024X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2024X)))
 (= $x270 $x289))))
 ))
 (let (($x173 (and $x340 $x207)))
 (let (($x309 (= $x173 true)))
 (let (($x62 (forall ((input.ind-%var2019X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2019X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2019X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var2018X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2018X)))
 (= $x15 false)))
 ))
 (let (($x229 (and $x285 $x62)))
 (let (($x267 (= $x229 true)))
 (let ((?x348 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x338 (bvneg ?x348)))
 (let (($x65 (= ?x338 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x65 true)))
 (let (($x155 (= $x54 true)))
 (let ((?x256 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x256)))
 (let (($x148 (= ?x136 input.dst.llvm-%n)))
 (let (($x204 (= $x148 true)))
 (let (($x213 (= $x204 true)))
 (let (($x253 (= ?x136 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (= $x253 true)))
 (let (($x357 (= $x185 true)))
 (let (($x55 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x21 (= $x55 true)))
 (let (($x284 (= $x21 true)))
 (let (($x301 (= $x284 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x45 (= $x183 true)))
 (let (($x73 (= $x45 true)))
 (let (($x105 (= $x73 true)))
 (let (($x199 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x199 true)))
 (let (($x288 (= $x153 true)))
 (let (($x203 (= $x288 true)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let ((?x31 (bvsub ?x124 ?x261)))
 (let (($x218 (ite (bvsge ?x261 (_ bv0 32)) (bvuge ?x124 ?x31) (bvult ?x124 ?x31))))
 (let (($x156 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x232 (ite $x156 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x131 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x212 (bvmul (_ bv4 64) ?x131)))
 (let ((?x259 ((_ extract 63 32) ?x212)))
 (let (($x129 (= ?x259 ?x232)))
 (let (($x76 (and $x129 $x218)))
 (let (($x312 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x164 (and $x312 $x76)))
 (let (($x336 (= true $x164)))
 (let (($x175 (=> $x331 $x336)))
 (let (($x349 (= $x175 true)))
 (let (($x53 (= $x349 true)))
 (let (($x314 (= $x53 true)))
 (let (($x215 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x86 (= $x215 true)))
 (let (($x244 (= $x86 true)))
 (let (($x274 (= $x244 true)))
 (let (($x295 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x179 (= $x295 true)))
 (let (($x78 (= $x179 true)))
 (let (($x43 (= $x78 true)))
 (let ((?x197 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x286 (= (_ bv0 32) ?x197)))
 (let ((?x281 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x281)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x167 $x107)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x186 $x109)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x44 $x9)))
 (let (($x163 (not $x219)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x5 $x171)))
 (let (($x120 (and (not $x145) $x163)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x276 $x181)))
 (let (($x202 (not $x139)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x17 $x46)))
 (let (($x141 (and (not $x191) $x202)))
 (let (($x209 (and (and (and (and (and (and $x141 $x120) $x33) $x194) $x23) $x14) $x37)))
 (let (($x260 (and $x209 $x286)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x160 (or false (or false (and (and true (or $x24 $x75)) (or $x110 $x112))))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x160)))
 (let (($x102 (and $x8 $x260)))
 (let (($x133 (= $x102 true)))
 (let (($x255 (= $x133 true)))
 (let (($x98 (= $x255 true)))
 (let ((?x339 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x188 (= (_ bv0 2) ?x339)))
 (let (($x100 (= $x188 true)))
 (let (($x168 (= $x100 true)))
 (let (($x245 (and $x168 $x98)))
 (let (($x252 (and $x245 $x43)))
 (let (($x101 (and $x252 $x274)))
 (let (($x170 (and $x101 $x314)))
 (let (($x226 (and $x170 $x203)))
 (let (($x166 (and $x226 $x105)))
 (let (($x97 (and $x166 $x301)))
 (let (($x327 (and $x97 $x357)))
 (let (($x355 (and $x327 $x213)))
 (let (($x287 (and $x355 $x155)))
 (let (($x351 (and $x287 $x267)))
 (let (($x325 (and $x351 $x309)))
 (let (($x6 (and $x325 $x280)))
 (let (($x308 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x335 (and $x308 $x6)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x127 (and $x234 $x335)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x108 (and $x189 $x127)))
 (let (($x330 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd ?x124 (_ bv3 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x190 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x84 (or false (or false (and (and true (or $x278 $x190)) (or $x182 $x330))))))
 (let (($x52 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x84)))
 (let (($x361 (=> (and $x331 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x84)))
 (let (($x211 (and $x361 $x108)))
 (let (($x298 (=> $x211 $x162)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 101
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x337 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (or $x36 $x337)))
 (let (($x150 (= $x30 true)))
 (let (($x96 (= $x150 true)))
 (let (($x220 (forall ((input.ind-%var2049X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2049X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2049X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var2048X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2048X)))
 (= $x301 false)))
 ))
 (let (($x313 (and $x58 $x220)))
 (let (($x235 (= $x313 true)))
 (let (($x306 (forall ((input.ind-%var2043X (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul input.ind-%var2043X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x173))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv2 32))) ?x353)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv3 32))) ?x6)))
 (let ((?x340 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2043X)))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2043X)))
 (=> $x80 (= ?x340 ?x108)))))))))
 ))
 (let (($x47 (forall ((input.ind-%var2042X (_ BitVec 32)) )(let (($x351 (and (bvule (_ bv0 32) input.ind-%var2042X) (bvult input.ind-%var2042X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2042X)))
 (= $x80 $x351))))
 ))
 (let (($x195 (and $x47 $x306)))
 (let (($x333 (= $x195 true)))
 (let (($x65 (forall ((input.ind-%var2037X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2037X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2037X) (_ bv0 32)))))
 ))
 (let (($x253 (forall ((input.ind-%var2036X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2036X)))
 (= $x301 false)))
 ))
 (let (($x54 (and $x253 $x65)))
 (let (($x155 (= $x54 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x226)))
 (let (($x45 (= ?x183 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x73 (= $x45 true)))
 (let (($x105 (= $x73 true)))
 (let ((?x336 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x175 (bvneg ?x336)))
 (let (($x199 (= ?x175 input.dst.llvm-%n)))
 (let (($x153 (= $x199 true)))
 (let (($x288 (= $x153 true)))
 (let (($x349 (= ?x175 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x349 true)))
 (let (($x314 (= $x53 true)))
 (let (($x31 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x42 (= $x31 true)))
 (let (($x307 (= $x42 true)))
 (let (($x218 (= $x307 true)))
 (let (($x156 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x60 (= $x156 true)))
 (let (($x232 (= $x60 true)))
 (let (($x129 (= $x232 true)))
 (let (($x312 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x242 (= $x312 true)))
 (let (($x131 (= $x242 true)))
 (let (($x212 (= $x131 true)))
 (let (($x244 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x244 true)))
 (let (($x101 (= $x274 true)))
 (let (($x208 (= $x101 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x43 (= $x78 true)))
 (let (($x252 (= $x43 true)))
 (let (($x362 (= $x252 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x281 (= (_ bv0 32) ?x159)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x178)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x167)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x186 $x106)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x128 $x107)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x9 $x219)))
 (let (($x120 (not $x163)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x145 $x81)))
 (let (($x77 (and (not $x44) $x120)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x181 $x139)))
 (let (($x141 (not $x202)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x87 $x193)))
 (let (($x171 (and (not $x276) $x141)))
 (let (($x102 (and (and (and (and (and (and $x171 $x77) $x114) $x194) $x109) $x176) $x14)))
 (let (($x133 (and $x102 $x281)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x46 (or false (or false (and (and true (or $x158 $x110)) (or $x138 $x196))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x46)))
 (let (($x255 (and $x116 $x133)))
 (let (($x98 (= $x255 true)))
 (let (($x245 (= $x98 true)))
 (let (($x32 (= $x245 true)))
 (let ((?x188 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x100 (= (_ bv0 2) ?x188)))
 (let (($x168 (= $x100 true)))
 (let (($x206 (= $x168 true)))
 (let (($x295 (and $x206 $x32)))
 (let (($x215 (and $x295 $x362)))
 (let (($x311 (and $x215 $x208)))
 (let (($x259 (and $x311 $x212)))
 (let (($x7 (and $x259 $x129)))
 (let (($x76 (and $x7 $x218)))
 (let (($x170 (and $x76 $x314)))
 (let (($x203 (and $x170 $x288)))
 (let (($x166 (and $x203 $x105)))
 (let (($x287 (and $x166 $x155)))
 (let (($x95 (and $x287 $x333)))
 (let (($x300 (and $x95 $x235)))
 (let (($x172 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (and $x172 $x300)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x263 (and $x214 $x90)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x83 (and $x66 $x263)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let (($x254 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd ?x124 (_ bv3 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x56 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x361 (or false (or false (and (and true (or $x69 $x56)) (or $x79 $x254))))))
 (let (($x189 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x361)))
 (let (($x177 (=> (and $x337 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x361)))
 (let (($x344 (and $x177 $x83)))
 (let (($x324 (=> $x344 $x96)))
 (not $x324)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x337 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (or $x36 $x337)))
 (let (($x150 (= $x30 true)))
 (let (($x96 (= $x150 true)))
 (let (($x220 (forall ((input.ind-%var2049X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2049X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2049X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var2048X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2048X)))
 (= $x301 false)))
 ))
 (let (($x313 (and $x58 $x220)))
 (let (($x235 (= $x313 true)))
 (let (($x306 (forall ((input.ind-%var2043X (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul input.ind-%var2043X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x173))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv2 32))) ?x353)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x173 (_ bv3 32))) ?x6)))
 (let ((?x340 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2043X)))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2043X)))
 (=> $x80 (= ?x340 ?x108)))))))))
 ))
 (let (($x47 (forall ((input.ind-%var2042X (_ BitVec 32)) )(let (($x351 (and (bvule (_ bv0 32) input.ind-%var2042X) (bvult input.ind-%var2042X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2042X)))
 (= $x80 $x351))))
 ))
 (let (($x195 (and $x47 $x306)))
 (let (($x333 (= $x195 true)))
 (let (($x65 (forall ((input.ind-%var2037X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2037X)))
 (=> $x301 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2037X) (_ bv0 32)))))
 ))
 (let (($x253 (forall ((input.ind-%var2036X (_ BitVec 32)) )(let (($x301 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2036X)))
 (= $x301 false)))
 ))
 (let (($x54 (and $x253 $x65)))
 (let (($x155 (= $x54 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x226)))
 (let (($x45 (= ?x183 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x73 (= $x45 true)))
 (let (($x105 (= $x73 true)))
 (let ((?x336 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x175 (bvneg ?x336)))
 (let (($x199 (= ?x175 input.dst.llvm-%n)))
 (let (($x153 (= $x199 true)))
 (let (($x288 (= $x153 true)))
 (let (($x349 (= ?x175 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x349 true)))
 (let (($x314 (= $x53 true)))
 (let (($x31 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x42 (= $x31 true)))
 (let (($x307 (= $x42 true)))
 (let (($x218 (= $x307 true)))
 (let (($x156 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x60 (= $x156 true)))
 (let (($x232 (= $x60 true)))
 (let (($x129 (= $x232 true)))
 (let (($x312 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x242 (= $x312 true)))
 (let (($x131 (= $x242 true)))
 (let (($x212 (= $x131 true)))
 (let (($x244 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x244 true)))
 (let (($x101 (= $x274 true)))
 (let (($x208 (= $x101 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x43 (= $x78 true)))
 (let (($x252 (= $x43 true)))
 (let (($x362 (= $x252 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x281 (= (_ bv0 32) ?x159)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x178)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x167)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x186 $x106)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x128 $x107)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x9 $x219)))
 (let (($x120 (not $x163)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x145 $x81)))
 (let (($x77 (and (not $x44) $x120)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x181 $x139)))
 (let (($x141 (not $x202)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x87 $x193)))
 (let (($x171 (and (not $x276) $x141)))
 (let (($x102 (and (and (and (and (and (and $x171 $x77) $x114) $x194) $x109) $x176) $x14)))
 (let (($x133 (and $x102 $x281)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x46 (or false (or false (and (and true (or $x158 $x110)) (or $x138 $x196))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x46)))
 (let (($x255 (and $x116 $x133)))
 (let (($x98 (= $x255 true)))
 (let (($x245 (= $x98 true)))
 (let (($x32 (= $x245 true)))
 (let ((?x188 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x100 (= (_ bv0 2) ?x188)))
 (let (($x168 (= $x100 true)))
 (let (($x206 (= $x168 true)))
 (let (($x295 (and $x206 $x32)))
 (let (($x215 (and $x295 $x362)))
 (let (($x311 (and $x215 $x208)))
 (let (($x259 (and $x311 $x212)))
 (let (($x7 (and $x259 $x129)))
 (let (($x76 (and $x7 $x218)))
 (let (($x170 (and $x76 $x314)))
 (let (($x203 (and $x170 $x288)))
 (let (($x166 (and $x203 $x105)))
 (let (($x287 (and $x166 $x155)))
 (let (($x95 (and $x287 $x333)))
 (let (($x300 (and $x95 $x235)))
 (let (($x172 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (and $x172 $x300)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x263 (and $x214 $x90)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x83 (and $x66 $x263)))
 (let ((?x261 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%m ?x261)))
 (let (($x254 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd ?x124 (_ bv3 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x56 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x361 (or false (or false (and (and true (or $x69 $x56)) (or $x79 $x254))))))
 (let (($x189 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x361)))
 (let (($x177 (=> (and $x337 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x361)))
 (let (($x344 (and $x177 $x83)))
 (let (($x324 (=> $x344 $x96)))
 (not $x324)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
==query_number: 102
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x217 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var2073X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x96)))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x216)))
 (let ((?x280 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2073X)))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2073X)))
 (=> $x80 (= ?x280 ?x118)))))))))
 ))
 (let (($x41 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2072X)))
 (= $x80 (and (bvule (_ bv0 32) input.ind-%var2072X) (bvult input.ind-%var2072X input.dst.llvm-%n)))))
 ))
 (let (($x275 (and $x41 $x217)))
 (let (($x247 (= true true)))
 (let (($x239 (and $x247 $x275)))
 (let (($x115 (= $x239 true)))
 (let (($x227 (forall ((input.ind-%var2067X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2067X)))
 (=> $x153 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2067X) (_ bv0 32)))))
 ))
 (let (($x55 (forall ((input.ind-%var2066X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2066X)))
 (= $x153 false)))
 ))
 (let (($x74 (and $x55 $x227)))
 (let (($x243 (= $x74 true)))
 (let (($x185 (forall ((input.ind-%var2061X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var2061X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x96)))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x216)))
 (let ((?x280 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2061X)))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2061X)))
 (=> $x80 (= ?x280 ?x118)))))))))
 ))
 (let (($x335 (forall ((input.ind-%var2060X (_ BitVec 32)) )(let (($x146 (bvule (_ bv0 32) input.ind-%var2060X)))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2060X)))
 (= $x80 (and $x146 (bvult input.ind-%var2060X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x327 (and $x335 $x185)))
 (let (($x187 (= $x327 true)))
 (let (($x348 (forall ((input.ind-%var2055X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2055X)))
 (=> $x153 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2055X) (_ bv0 32)))))
 ))
 (let (($x183 (forall ((input.ind-%var2054X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2054X)))
 (= $x153 false)))
 ))
 (let (($x338 (and $x183 $x348)))
 (let (($x65 (= $x338 true)))
 (let ((?x177 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x177)))
 (let (($x336 (= ?x26 input.dst.llvm-%n)))
 (let (($x175 (= $x336 true)))
 (let (($x349 (= $x175 true)))
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x307 (= (_ bv0 2) ?x42)))
 (let (($x218 (= $x307 true)))
 (let (($x76 (= $x218 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (= $x259 true)))
 (let (($x60 (= $x156 true)))
 (let (($x232 (= $x60 true)))
 (let (($x208 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x311 (not $x208)))
 (let (($x312 (= $x311 true)))
 (let (($x242 (= $x312 true)))
 (let (($x131 (= $x242 true)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x255)))
 (let ((?x281 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x281)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x176)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x286 $x260)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x109 $x178)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x114 $x209)))
 (let (($x194 (not $x222)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x77 $x37)))
 (let (($x128 (and (not $x33) $x194)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x44 $x250)))
 (let (($x219 (not $x9)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x158 $x110)))
 (let (($x120 (and (not $x81) $x219)))
 (let (($x43 (and (and (and (and (and (and $x120 $x128) $x167) $x107) $x14) $x159) $x133)))
 (let (($x252 (and $x43 $x98)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x160)))
 (let (($x141 (or false (or false (and (and true (or $x8 $x17)) (or $x276 $x5))))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x141)))
 (let (($x362 (and $x145 $x252)))
 (let (($x215 (= $x362 true)))
 (let (($x86 (= $x215 true)))
 (let (($x244 (= $x86 true)))
 (let (($x100 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x168 (= $x100 true)))
 (let (($x206 (= $x168 true)))
 (let (($x24 (= $x206 true)))
 (let (($x169 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x308 (= $x169 true)))
 (let (($x172 (= $x308 true)))
 (let (($x339 (= $x172 true)))
 (let (($x66 (= ?x26 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (= $x66 true)))
 (let (($x234 (= $x70 true)))
 (let ((?x254 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x254)))
 (let (($x84 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x84 true)))
 (let (($x361 (= $x52 true)))
 (let (($x56 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x56 true)))
 (let (($x182 (= $x72 true)))
 (let (($x279 (= $x182 true)))
 (let (($x57 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x190 (= $x57 true)))
 (let (($x69 (= $x190 true)))
 (let (($x278 (= $x69 true)))
 (let (($x79 (and $x278 $x279)))
 (let (($x189 (and $x79 $x361)))
 (let (($x214 (and $x189 $x234)))
 (let (($x188 (and $x214 $x339)))
 (let (($x75 (and $x188 $x24)))
 (let (($x274 (and $x75 $x244)))
 (let (($x212 (and $x274 $x131)))
 (let (($x129 (and $x212 $x232)))
 (let (($x164 (and $x129 $x76)))
 (let (($x53 (and $x164 $x349)))
 (let (($x54 (and $x53 $x65)))
 (let (($x246 (and $x54 $x187)))
 (let (($x266 (and $x246 $x243)))
 (let (($x262 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x273 (and $x262 $x266)))
 (let (($x291 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x228 (and $x291 $x273)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x329 (and $x92 $x228)))
 (let (($x241 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x89 (and $x241 $x329)))
 (let (($x143 (=> $x89 $x115)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x217 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var2073X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x96)))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x216)))
 (let ((?x280 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2073X)))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2073X)))
 (=> $x80 (= ?x280 ?x118)))))))))
 ))
 (let (($x41 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2072X)))
 (= $x80 (and (bvule (_ bv0 32) input.ind-%var2072X) (bvult input.ind-%var2072X input.dst.llvm-%n)))))
 ))
 (let (($x275 (and $x41 $x217)))
 (let (($x247 (= true true)))
 (let (($x239 (and $x247 $x275)))
 (let (($x115 (= $x239 true)))
 (let (($x227 (forall ((input.ind-%var2067X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2067X)))
 (=> $x153 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2067X) (_ bv0 32)))))
 ))
 (let (($x55 (forall ((input.ind-%var2066X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2066X)))
 (= $x153 false)))
 ))
 (let (($x74 (and $x55 $x227)))
 (let (($x243 (= $x74 true)))
 (let (($x185 (forall ((input.ind-%var2061X (_ BitVec 32)) )(let ((?x344 (bvadd (bvmul input.ind-%var2061X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x344))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv2 32))) ?x96)))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x344 (_ bv3 32))) ?x216)))
 (let ((?x280 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2061X)))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2061X)))
 (=> $x80 (= ?x280 ?x118)))))))))
 ))
 (let (($x335 (forall ((input.ind-%var2060X (_ BitVec 32)) )(let (($x146 (bvule (_ bv0 32) input.ind-%var2060X)))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2060X)))
 (= $x80 (and $x146 (bvult input.ind-%var2060X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x327 (and $x335 $x185)))
 (let (($x187 (= $x327 true)))
 (let (($x348 (forall ((input.ind-%var2055X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2055X)))
 (=> $x153 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2055X) (_ bv0 32)))))
 ))
 (let (($x183 (forall ((input.ind-%var2054X (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2054X)))
 (= $x153 false)))
 ))
 (let (($x338 (and $x183 $x348)))
 (let (($x65 (= $x338 true)))
 (let ((?x177 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x177)))
 (let (($x336 (= ?x26 input.dst.llvm-%n)))
 (let (($x175 (= $x336 true)))
 (let (($x349 (= $x175 true)))
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x307 (= (_ bv0 2) ?x42)))
 (let (($x218 (= $x307 true)))
 (let (($x76 (= $x218 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (= $x259 true)))
 (let (($x60 (= $x156 true)))
 (let (($x232 (= $x60 true)))
 (let (($x208 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x311 (not $x208)))
 (let (($x312 (= $x311 true)))
 (let (($x242 (= $x312 true)))
 (let (($x131 (= $x242 true)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x255)))
 (let ((?x281 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x281)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x176)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x286 $x260)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x109 $x178)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x114 $x209)))
 (let (($x194 (not $x222)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x77 $x37)))
 (let (($x128 (and (not $x33) $x194)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x44 $x250)))
 (let (($x219 (not $x9)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x158 $x110)))
 (let (($x120 (and (not $x81) $x219)))
 (let (($x43 (and (and (and (and (and (and $x120 $x128) $x167) $x107) $x14) $x159) $x133)))
 (let (($x252 (and $x43 $x98)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x160)))
 (let (($x141 (or false (or false (and (and true (or $x8 $x17)) (or $x276 $x5))))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x141)))
 (let (($x362 (and $x145 $x252)))
 (let (($x215 (= $x362 true)))
 (let (($x86 (= $x215 true)))
 (let (($x244 (= $x86 true)))
 (let (($x100 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x168 (= $x100 true)))
 (let (($x206 (= $x168 true)))
 (let (($x24 (= $x206 true)))
 (let (($x169 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x308 (= $x169 true)))
 (let (($x172 (= $x308 true)))
 (let (($x339 (= $x172 true)))
 (let (($x66 (= ?x26 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (= $x66 true)))
 (let (($x234 (= $x70 true)))
 (let ((?x254 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x254)))
 (let (($x84 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x84 true)))
 (let (($x361 (= $x52 true)))
 (let (($x56 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x56 true)))
 (let (($x182 (= $x72 true)))
 (let (($x279 (= $x182 true)))
 (let (($x57 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x190 (= $x57 true)))
 (let (($x69 (= $x190 true)))
 (let (($x278 (= $x69 true)))
 (let (($x79 (and $x278 $x279)))
 (let (($x189 (and $x79 $x361)))
 (let (($x214 (and $x189 $x234)))
 (let (($x188 (and $x214 $x339)))
 (let (($x75 (and $x188 $x24)))
 (let (($x274 (and $x75 $x244)))
 (let (($x212 (and $x274 $x131)))
 (let (($x129 (and $x212 $x232)))
 (let (($x164 (and $x129 $x76)))
 (let (($x53 (and $x164 $x349)))
 (let (($x54 (and $x53 $x65)))
 (let (($x246 (and $x54 $x187)))
 (let (($x266 (and $x246 $x243)))
 (let (($x262 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x273 (and $x262 $x266)))
 (let (($x291 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x228 (and $x291 $x273)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x329 (and $x92 $x228)))
 (let (($x241 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x89 (and $x241 $x329)))
 (let (($x143 (=> $x89 $x115)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171553/query
