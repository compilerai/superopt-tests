==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x5)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x9 $x10)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x5)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x9 $x10)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv1661363587 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3191897543 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x168 (= true false)))
 (let (($x169 (= $x168 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x158 (concat ?x157 (concat ?x154 (concat ?x151 ?x149)))))
 (let (($x160 (= ?x158 input.dst.llvm-%m)))
 (let (($x161 (= $x160 true)))
 (let (($x162 (= $x161 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x142 (concat ?x139 (concat ?x135 ?x133)))))
 (let (($x144 (= ?x143 input.dst.llvm-%n)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x125 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x110)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x102 $x105)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x101 $x106)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x91 $x92)))
 (let (($x94 (not $x93)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x88 $x89)))
 (let (($x96 (and (not $x90) $x94)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x40 $x83)))
 (let (($x85 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x42 $x76)))
 (let (($x87 (and (not $x65) $x85)))
 (let (($x119 (and (and (and (and (and (and $x87 $x96) $x98) $x100) $x107) $x109) $x111)))
 (let (($x120 (and $x119 $x113)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x129 (and $x123 $x128)))
 (let (($x147 (and $x129 $x146)))
 (let (($x163 (and $x147 $x162)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x164 (and $x34 $x163)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x165 (and $x62 $x164)))
 (let (($x15 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x47 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x47 (_ bv1 32))))
 (=> $x56 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x7 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x12 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x12 (_ bv1 32))))
 (let ((?x47 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x47 (_ bv1 32))))
 (= $x56 $x63))))))
 ))
 (let (($x14 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x13 (= false false)))
 (let ((?x47 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x47 (_ bv0 32))))
 (=> $x67 $x13)))))
 ))
 (let (($x73 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x12 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x12 (_ bv0 32))))
 (let ((?x47 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x47 (_ bv0 32))))
 (= $x67 $x39))))))
 ))
 (let (($x19 (and $x73 $x14)))
 (let (($x74 (and $x19 $x7)))
 (let (($x30 (and $x74 $x15)))
 (let (($x166 (and $x30 $x165)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x167 (and $x10 $x166)))
 (let (($x170 (=> $x167 $x169)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x168 (= true false)))
 (let (($x169 (= $x168 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x158 (concat ?x157 (concat ?x154 (concat ?x151 ?x149)))))
 (let (($x160 (= ?x158 input.dst.llvm-%m)))
 (let (($x161 (= $x160 true)))
 (let (($x162 (= $x161 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x142 (concat ?x139 (concat ?x135 ?x133)))))
 (let (($x144 (= ?x143 input.dst.llvm-%n)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x125 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x110)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x102 $x105)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x101 $x106)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x91 $x92)))
 (let (($x94 (not $x93)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x88 $x89)))
 (let (($x96 (and (not $x90) $x94)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x40 $x83)))
 (let (($x85 (not $x84)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x42 $x76)))
 (let (($x87 (and (not $x65) $x85)))
 (let (($x119 (and (and (and (and (and (and $x87 $x96) $x98) $x100) $x107) $x109) $x111)))
 (let (($x120 (and $x119 $x113)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x129 (and $x123 $x128)))
 (let (($x147 (and $x129 $x146)))
 (let (($x163 (and $x147 $x162)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x164 (and $x34 $x163)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x165 (and $x62 $x164)))
 (let (($x15 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x47 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x47 (_ bv1 32))))
 (=> $x56 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x7 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x12 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x12 (_ bv1 32))))
 (let ((?x47 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x47 (_ bv1 32))))
 (= $x56 $x63))))))
 ))
 (let (($x14 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x13 (= false false)))
 (let ((?x47 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x47 (_ bv0 32))))
 (=> $x67 $x13)))))
 ))
 (let (($x73 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x12 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x12 (_ bv0 32))))
 (let ((?x47 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x47 (_ bv0 32))))
 (= $x67 $x39))))))
 ))
 (let (($x19 (and $x73 $x14)))
 (let (($x74 (and $x19 $x7)))
 (let (($x30 (and $x74 $x15)))
 (let (($x166 (and $x30 $x165)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x167 (and $x10 $x166)))
 (let (($x170 (=> $x167 $x169)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xef322624)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x895f93a0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x895f93a3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xef322627)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x895f93a0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xef322624)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x152)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x151)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (and $x145 $x156)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x144 $x157)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x84 $x72)))
 (let (($x98 (not $x128)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x129 $x105)))
 (let (($x139 (and (not $x124) $x98)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x14 $x63)))
 (let (($x92 (not $x117)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x20 $x114)))
 (let (($x100 (and (not $x99) $x92)))
 (let (($x24 (and (and (and $x100 $x139) $x135) $x136)))
 (let (($x57 (and (and (and (and $x24 $x153) $x150) $x149) $x155)))
 (let (($x11 (= $x57 true)))
 (let (($x9 (= $x11 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x31 (concat ?x35 (concat ?x46 ?x33)))))
 (let (($x23 (= input.dst.llvm-%m ?x38)))
 (let ((?x165 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x132 (concat ?x171 (concat ?x167 ?x165)))))
 (let (($x53 (= input.dst.llvm-%n ?x5)))
 (let (($x29 (and $x53 $x23)))
 (let (($x161 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x55 (and $x161 $x29)))
 (let (($x6 (and (and (and $x24 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x153) $x150)))
 (let (($x66 (and (and (and $x6 $x149) $x155) $x55)))
 (let (($x81 (= $x66 true)))
 (let (($x18 (= $x81 true)))
 (let (($x78 (= $x18 true)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x32 (and $x125 $x78)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x61 (and $x104 $x32)))
 (let (($x103 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x74 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x74 (_ bv1 32))))
 (=> $x119 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x95 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x123 (_ bv1 32))))
 (let ((?x74 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x74 (_ bv1 32))))
 (= $x119 $x50))))))
 ))
 (let (($x83 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x49 (= false false)))
 (let ((?x74 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x74 (_ bv0 32))))
 (=> $x80 $x49)))))
 ))
 (let (($x30 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x123 (_ bv0 32))))
 (let ((?x74 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x74 (_ bv0 32))))
 (= $x80 $x142))))))
 ))
 (let (($x7 (and $x30 $x83)))
 (let (($x69 (and $x7 $x95)))
 (let (($x115 (and $x69 $x103)))
 (let (($x64 (and $x115 $x61)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x43 (and $x8 $x64)))
 (let (($x79 (=> $x43 $x9)))
 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x152)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x151)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (and $x145 $x156)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x144 $x157)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x84 $x72)))
 (let (($x98 (not $x128)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x129 $x105)))
 (let (($x139 (and (not $x124) $x98)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x14 $x63)))
 (let (($x92 (not $x117)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x20 $x114)))
 (let (($x100 (and (not $x99) $x92)))
 (let (($x24 (and (and (and $x100 $x139) $x135) $x136)))
 (let (($x57 (and (and (and (and $x24 $x153) $x150) $x149) $x155)))
 (let (($x11 (= $x57 true)))
 (let (($x9 (= $x11 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x31 (concat ?x35 (concat ?x46 ?x33)))))
 (let (($x23 (= input.dst.llvm-%m ?x38)))
 (let ((?x165 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x132 (concat ?x171 (concat ?x167 ?x165)))))
 (let (($x53 (= input.dst.llvm-%n ?x5)))
 (let (($x29 (and $x53 $x23)))
 (let (($x161 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x55 (and $x161 $x29)))
 (let (($x6 (and (and (and $x24 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x153) $x150)))
 (let (($x66 (and (and (and $x6 $x149) $x155) $x55)))
 (let (($x81 (= $x66 true)))
 (let (($x18 (= $x81 true)))
 (let (($x78 (= $x18 true)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x32 (and $x125 $x78)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x61 (and $x104 $x32)))
 (let (($x103 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x74 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x74 (_ bv1 32))))
 (=> $x119 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x95 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x123 (_ bv1 32))))
 (let ((?x74 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x74 (_ bv1 32))))
 (= $x119 $x50))))))
 ))
 (let (($x83 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x49 (= false false)))
 (let ((?x74 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x74 (_ bv0 32))))
 (=> $x80 $x49)))))
 ))
 (let (($x30 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x123 (_ bv0 32))))
 (let ((?x74 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x74 (_ bv0 32))))
 (= $x80 $x142))))))
 ))
 (let (($x7 (and $x30 $x83)))
 (let (($x69 (and $x7 $x95)))
 (let (($x115 (and $x69 $x103)))
 (let (($x64 (and $x115 $x61)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x43 (and $x8 $x64)))
 (let (($x79 (=> $x43 $x9)))
 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x60 (= $x77 true)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x39 (concat ?x15 (concat ?x62 ?x28)))))
 (let (($x12 (= input.dst.llvm-%m ?x67)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x44 (concat ?x79 (concat ?x58 ?x27)))))
 (let (($x10 (= input.dst.llvm-%n ?x164)))
 (let (($x88 (and $x10 $x12)))
 (let (($x32 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x89 (and $x32 $x88)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x55)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x23)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x68 $x46)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x31 $x33)))
 (let (($x52 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x132 $x169)))
 (let (($x171 (not $x170)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (and $x161 $x162)))
 (let (($x167 (and (not $x148) $x171)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x152 $x155)))
 (let (($x158 (not $x16)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x150 $x151)))
 (let (($x160 (and (not $x149) $x158)))
 (let (($x126 (and (and (and (and (and (and $x160 $x167) $x168) $x5) $x52) $x54) $x38)))
 (let (($x73 (and (and (and $x126 $x29) $x66) $x89)))
 (let (($x137 (= $x73 true)))
 (let (($x17 (= $x137 true)))
 (let (($x91 (= $x17 true)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x118 (and $x153 $x91)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x97 (and $x147 $x118)))
 (let (($x144 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x20 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x20 (_ bv1 32))))
 (=> $x128 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x108 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x108 (_ bv1 32))))
 (let ((?x20 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x20 (_ bv1 32))))
 (= $x128 $x106))))))
 ))
 (let (($x63 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x86 (= false false)))
 (let ((?x20 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x20 (_ bv0 32))))
 (=> $x65 $x86)))))
 ))
 (let (($x99 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x108 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x87 (= ?x108 (_ bv0 32))))
 (let ((?x20 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x20 (_ bv0 32))))
 (= $x65 $x87))))))
 ))
 (let (($x117 (and $x99 $x63)))
 (let (($x41 (and $x117 $x139)))
 (let (($x145 (and $x41 $x144)))
 (let (($x93 (and $x145 $x97)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x116 (and $x8 $x93)))
 (let (($x112 (=> $x116 $x60)))
 (not $x112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x60 (= $x77 true)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x39 (concat ?x15 (concat ?x62 ?x28)))))
 (let (($x12 (= input.dst.llvm-%m ?x67)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x44 (concat ?x79 (concat ?x58 ?x27)))))
 (let (($x10 (= input.dst.llvm-%n ?x164)))
 (let (($x88 (and $x10 $x12)))
 (let (($x32 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x89 (and $x32 $x88)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x55)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x23)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x68 $x46)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x31 $x33)))
 (let (($x52 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x132 $x169)))
 (let (($x171 (not $x170)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (and $x161 $x162)))
 (let (($x167 (and (not $x148) $x171)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x152 $x155)))
 (let (($x158 (not $x16)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x150 $x151)))
 (let (($x160 (and (not $x149) $x158)))
 (let (($x126 (and (and (and (and (and (and $x160 $x167) $x168) $x5) $x52) $x54) $x38)))
 (let (($x73 (and (and (and $x126 $x29) $x66) $x89)))
 (let (($x137 (= $x73 true)))
 (let (($x17 (= $x137 true)))
 (let (($x91 (= $x17 true)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x118 (and $x153 $x91)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x97 (and $x147 $x118)))
 (let (($x144 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x20 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x20 (_ bv1 32))))
 (=> $x128 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x139 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x108 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x108 (_ bv1 32))))
 (let ((?x20 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x20 (_ bv1 32))))
 (= $x128 $x106))))))
 ))
 (let (($x63 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x86 (= false false)))
 (let ((?x20 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x20 (_ bv0 32))))
 (=> $x65 $x86)))))
 ))
 (let (($x99 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x108 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x87 (= ?x108 (_ bv0 32))))
 (let ((?x20 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x20 (_ bv0 32))))
 (= $x65 $x87))))))
 ))
 (let (($x117 (and $x99 $x63)))
 (let (($x41 (and $x117 $x139)))
 (let (($x145 (and $x41 $x144)))
 (let (($x93 (and $x145 $x97)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x116 (and $x8 $x93)))
 (let (($x112 (=> $x116 $x60)))
 (not $x112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0e02cc94)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1f2aca28)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x80808000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0e02cc97)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1f2aca2b)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0e02cc94)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1f2aca28)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80808080)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1f2aca28) #x00
      #x80))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa2039ffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffff7ffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa2039fff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa2039ffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffff7ff9) #x40
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x133)))
 (let (($x24 (= ?x136 input.dst.llvm-%n)))
 (let (($x130 (= $x24 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x83 (concat ?x142 (concat ?x19 ?x69)))))
 (let (($x119 (= input.dst.llvm-%m ?x7)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x74 (concat ?x43 (concat ?x112 ?x77)))))
 (let (($x90 (= input.dst.llvm-%n ?x80)))
 (let (($x50 (and $x90 $x119)))
 (let (($x118 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x103 (and $x118 $x50)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x89)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x12)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (and $x34 $x62)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x39 $x28)))
 (let (($x37 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x44 $x11)))
 (let (($x79 (not $x9)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x32 $x61)))
 (let (($x58 (and (not $x163) $x79)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x55 $x66)))
 (let (($x81 (not $x121)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x38 $x23)))
 (let (($x78 (and (not $x29) $x81)))
 (let (($x125 (and (and (and (and (and (and $x78 $x58) $x57) $x164) $x37) $x26) $x67)))
 (let (($x100 (and (and (and $x125 $x88) $x73) $x103)))
 (let (($x129 (= $x100 true)))
 (let (($x105 (= $x129 true)))
 (let (($x124 (= $x105 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x84 (and $x54 $x124)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x72 (and $x51 $x84)))
 (let (($x31 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x150 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x150 (_ bv1 32))))
 (=> $x170 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x167 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x82 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x82 (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x150 (_ bv1 32))))
 (= $x170 $x166))))))
 ))
 (let (($x155 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x159 (= false false)))
 (let ((?x150 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x150 (_ bv0 32))))
 (=> $x6 $x159)))))
 ))
 (let (($x149 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x82 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x82 (_ bv0 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x150 (_ bv0 32))))
 (= $x6 $x146))))))
 ))
 (let (($x16 (and $x149 $x155)))
 (let (($x56 (and $x16 $x167)))
 (let (($x68 (and $x56 $x31)))
 (let (($x134 (and $x68 $x72)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x135 (and $x109 $x134)))
 (let (($x111 (=> $x135 $x130)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x133)))
 (let (($x24 (= ?x136 input.dst.llvm-%n)))
 (let (($x130 (= $x24 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x83 (concat ?x142 (concat ?x19 ?x69)))))
 (let (($x119 (= input.dst.llvm-%m ?x7)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x74 (concat ?x43 (concat ?x112 ?x77)))))
 (let (($x90 (= input.dst.llvm-%n ?x80)))
 (let (($x50 (and $x90 $x119)))
 (let (($x118 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x103 (and $x118 $x50)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x89)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x12)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (and $x34 $x62)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x39 $x28)))
 (let (($x37 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x44 $x11)))
 (let (($x79 (not $x9)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x32 $x61)))
 (let (($x58 (and (not $x163) $x79)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x55 $x66)))
 (let (($x81 (not $x121)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x38 $x23)))
 (let (($x78 (and (not $x29) $x81)))
 (let (($x125 (and (and (and (and (and (and $x78 $x58) $x57) $x164) $x37) $x26) $x67)))
 (let (($x100 (and (and (and $x125 $x88) $x73) $x103)))
 (let (($x129 (= $x100 true)))
 (let (($x105 (= $x129 true)))
 (let (($x124 (= $x105 true)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x84 (and $x54 $x124)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x72 (and $x51 $x84)))
 (let (($x31 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x150 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x150 (_ bv1 32))))
 (=> $x170 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x167 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x82 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x82 (_ bv1 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x150 (_ bv1 32))))
 (= $x170 $x166))))))
 ))
 (let (($x155 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x159 (= false false)))
 (let ((?x150 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x150 (_ bv0 32))))
 (=> $x6 $x159)))))
 ))
 (let (($x149 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x82 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x82 (_ bv0 32))))
 (let ((?x150 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x150 (_ bv0 32))))
 (= $x6 $x146))))))
 ))
 (let (($x16 (and $x149 $x155)))
 (let (($x56 (and $x16 $x167)))
 (let (($x68 (and $x56 $x31)))
 (let (($x134 (and $x68 $x72)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x135 (and $x109 $x134)))
 (let (($x111 (=> $x135 $x130)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 ((_ extract 21 0) input.dst.llvm-%m)))
 (let ((?x169 ((_ extract 21 0) input.spec-%var-n-1)))
 (let ((?x168 (bvmul ?x169 (_ bv256 22))))
 (let (($x131 (= ?x168 ?x120)))
 (let (($x5 (= $x131 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x87 (concat ?x36 (concat ?x139 ?x65)))))
 (let (($x14 (= input.dst.llvm-%m ?x99)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x116 (concat ?x107 (concat ?x136 ?x22)))))
 (let (($x110 (= input.dst.llvm-%n ?x8)))
 (let (($x63 (and $x110 $x14)))
 (let (($x84 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x117 (and $x84 $x63)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x103)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x119)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x123 $x19)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x83 $x69)))
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x74 $x64)))
 (let (($x43 (not $x47)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x118 $x97)))
 (let (($x112 (and (not $x13) $x43)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x89 $x73)))
 (let (($x137 (not $x92)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x67 $x12)))
 (let (($x91 (and (not $x88) $x137)))
 (let (($x147 (and (and (and (and (and (and $x91 $x112) $x101) $x80) $x70) $x49) $x7)))
 (let (($x153 (and (and (and $x147 $x50) $x100) $x117)))
 (let (($x75 (= $x153 true)))
 (let (($x158 (= $x75 true)))
 (let (($x160 (= $x158 true)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (and $x26 $x160)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x162 (and $x48 $x161)))
 (let (($x39 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x38 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x38 (_ bv1 32))))
 (=> $x9 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x58 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x42 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x42 (_ bv1 32))))
 (let ((?x38 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x38 (_ bv1 32))))
 (= $x9 $x71))))))
 ))
 (let (($x66 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x18 (= false false)))
 (let ((?x38 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x38 (_ bv0 32))))
 (=> $x126 $x18)))))
 ))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x42 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x42 (_ bv0 32))))
 (let ((?x38 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x38 (_ bv0 32))))
 (= $x126 $x35))))))
 ))
 (let (($x121 (and $x29 $x66)))
 (let (($x102 (and $x121 $x58)))
 (let (($x34 (and $x102 $x39)))
 (let (($x148 (and $x34 $x162)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x132 (and $x109 $x148)))
 (let (($x122 (=> $x132 $x5)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 ((_ extract 21 0) input.dst.llvm-%m)))
 (let ((?x169 ((_ extract 21 0) input.spec-%var-n-1)))
 (let ((?x168 (bvmul ?x169 (_ bv256 22))))
 (let (($x131 (= ?x168 ?x120)))
 (let (($x5 (= $x131 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x87 (concat ?x36 (concat ?x139 ?x65)))))
 (let (($x14 (= input.dst.llvm-%m ?x99)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x116 (concat ?x107 (concat ?x136 ?x22)))))
 (let (($x110 (= input.dst.llvm-%n ?x8)))
 (let (($x63 (and $x110 $x14)))
 (let (($x84 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x117 (and $x84 $x63)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x103)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x119)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x123 $x19)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x83 $x69)))
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x74 $x64)))
 (let (($x43 (not $x47)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x118 $x97)))
 (let (($x112 (and (not $x13) $x43)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x89 $x73)))
 (let (($x137 (not $x92)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x67 $x12)))
 (let (($x91 (and (not $x88) $x137)))
 (let (($x147 (and (and (and (and (and (and $x91 $x112) $x101) $x80) $x70) $x49) $x7)))
 (let (($x153 (and (and (and $x147 $x50) $x100) $x117)))
 (let (($x75 (= $x153 true)))
 (let (($x158 (= $x75 true)))
 (let (($x160 (= $x158 true)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (and $x26 $x160)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x162 (and $x48 $x161)))
 (let (($x39 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x38 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x38 (_ bv1 32))))
 (=> $x9 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x58 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x42 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x42 (_ bv1 32))))
 (let ((?x38 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x38 (_ bv1 32))))
 (= $x9 $x71))))))
 ))
 (let (($x66 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x18 (= false false)))
 (let ((?x38 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x38 (_ bv0 32))))
 (=> $x126 $x18)))))
 ))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x42 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x35 (= ?x42 (_ bv0 32))))
 (let ((?x38 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x38 (_ bv0 32))))
 (= $x126 $x35))))))
 ))
 (let (($x121 (and $x29 $x66)))
 (let (($x102 (and $x121 $x58)))
 (let (($x34 (and $x102 $x39)))
 (let (($x148 (and $x34 $x162)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x132 (and $x109 $x148)))
 (let (($x122 (=> $x132 $x5)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x10
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x27 (= (_ bv0 2) ?x11)))
 (let (($x57 (= $x27 true)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x82 (concat ?x53 (concat ?x171 ?x150)))))
 (let (($x149 (= input.dst.llvm-%m ?x146)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x20 (concat ?x122 (concat ?x168 ?x169)))))
 (let (($x154 (= input.dst.llvm-%n ?x135)))
 (let (($x152 (and $x154 $x149)))
 (let (($x161 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x155 (and $x161 $x152)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x117)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x14)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x140 $x139)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x87 $x65)))
 (let (($x108 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x116 $x130)))
 (let (($x107 (not $x111)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x84 $x72)))
 (let (($x136 (and (not $x95) $x107)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x103 $x100)))
 (let (($x129 (not $x157)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x119)))
 (let (($x124 (and (not $x50) $x129)))
 (let (($x68 (and (and (and (and (and (and $x124 $x136) $x24) $x8) $x108) $x41) $x99)))
 (let (($x33 (and (and (and $x68 $x63) $x153) $x155)))
 (let (($x54 (= $x33 true)))
 (let (($x76 (= $x54 true)))
 (let (($x81 (= $x76 true)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x78 (and $x49 $x81)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x32 (and $x113 $x78)))
 (let (($x83 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x67 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x67 (_ bv1 32))))
 (=> $x47 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x112 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x94 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x94 (_ bv1 32))))
 (let ((?x67 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x67 (_ bv1 32))))
 (= $x47 $x60))))))
 ))
 (let (($x73 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x17 (= false false)))
 (let ((?x67 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x67 (_ bv0 32))))
 (=> $x125 $x17)))))
 ))
 (let (($x88 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x94 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x94 (_ bv0 32))))
 (let ((?x67 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x67 (_ bv0 32))))
 (= $x125 $x15))))))
 ))
 (let (($x92 (and $x88 $x73)))
 (let (($x128 (and $x92 $x112)))
 (let (($x123 (and $x128 $x83)))
 (let (($x61 (and $x123 $x32)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x163 (and $x96 $x61)))
 (let (($x115 (=> $x163 $x57)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x27 (= (_ bv0 2) ?x11)))
 (let (($x57 (= $x27 true)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x82 (concat ?x53 (concat ?x171 ?x150)))))
 (let (($x149 (= input.dst.llvm-%m ?x146)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x20 (concat ?x122 (concat ?x168 ?x169)))))
 (let (($x154 (= input.dst.llvm-%n ?x135)))
 (let (($x152 (and $x154 $x149)))
 (let (($x161 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x155 (and $x161 $x152)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x117)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x14)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x140 $x139)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x87 $x65)))
 (let (($x108 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x116 $x130)))
 (let (($x107 (not $x111)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x84 $x72)))
 (let (($x136 (and (not $x95) $x107)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x103 $x100)))
 (let (($x129 (not $x157)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x119)))
 (let (($x124 (and (not $x50) $x129)))
 (let (($x68 (and (and (and (and (and (and $x124 $x136) $x24) $x8) $x108) $x41) $x99)))
 (let (($x33 (and (and (and $x68 $x63) $x153) $x155)))
 (let (($x54 (= $x33 true)))
 (let (($x76 (= $x54 true)))
 (let (($x81 (= $x76 true)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x78 (and $x49 $x81)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x32 (and $x113 $x78)))
 (let (($x83 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x67 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x67 (_ bv1 32))))
 (=> $x47 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x112 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x94 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x94 (_ bv1 32))))
 (let ((?x67 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x67 (_ bv1 32))))
 (= $x47 $x60))))))
 ))
 (let (($x73 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x17 (= false false)))
 (let ((?x67 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x67 (_ bv0 32))))
 (=> $x125 $x17)))))
 ))
 (let (($x88 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x94 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x94 (_ bv0 32))))
 (let ((?x67 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x67 (_ bv0 32))))
 (= $x125 $x15))))))
 ))
 (let (($x92 (and $x88 $x73)))
 (let (($x128 (and $x92 $x112)))
 (let (($x123 (and $x128 $x83)))
 (let (($x61 (and $x123 $x32)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x163 (and $x96 $x61)))
 (let (($x115 (=> $x163 $x57)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 108 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 ((_ extract 6 0) input.spec-%var-n-1)))
 (let (($x106 (= (_ bv0 7) ?x101)))
 (let (($x138 (= $x106 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x29 (concat ?x18 (concat ?x102 ?x79)))))
 (let (($x66 (= input.dst.llvm-%m ?x55)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x59 (concat ?x148 (concat ?x27 ?x44)))))
 (let (($x38 (= input.dst.llvm-%n ?x151)))
 (let (($x121 (and $x38 $x66)))
 (let (($x78 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x9 (and $x78 $x121)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x155)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x149)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x6)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x56 $x171)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x82 $x150)))
 (let (($x159 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x20 $x131)))
 (let (($x122 (not $x5)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x161 $x162)))
 (let (($x168 (and (not $x134) $x122)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x117 $x153)))
 (let (($x75 (not $x46)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x99 $x14)))
 (let (($x160 (and (not $x63) $x75)))
 (let (($x62 (and (and (and (and (and (and $x160 $x168) $x120) $x135) $x159) $x167) $x146)))
 (let (($x141 (and (and (and $x62 $x152) $x33) $x9)))
 (let (($x137 (= $x141 true)))
 (let (($x91 (= $x137 true)))
 (let (($x118 (= $x91 true)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x97 (and $x41 $x118)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x13 (and $x98 $x97)))
 (let (($x87 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x7 (_ bv1 32))))
 (=> $x111 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x136 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x143 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x143 (_ bv1 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x7 (_ bv1 32))))
 (= $x111 $x133))))))
 ))
 (let (($x100 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x105 (= false false)))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x7 (_ bv0 32))))
 (=> $x147 $x105)))))
 ))
 (let (($x50 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x143 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x143 (_ bv0 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x7 (_ bv0 32))))
 (= $x147 $x142))))))
 ))
 (let (($x157 (and $x50 $x100)))
 (let (($x16 (and $x157 $x136)))
 (let (($x140 (and $x16 $x87)))
 (let (($x74 (and $x140 $x13)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x64 (and $x96 $x74)))
 (let (($x80 (=> $x64 $x138)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 ((_ extract 6 0) input.spec-%var-n-1)))
 (let (($x106 (= (_ bv0 7) ?x101)))
 (let (($x138 (= $x106 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x29 (concat ?x18 (concat ?x102 ?x79)))))
 (let (($x66 (= input.dst.llvm-%m ?x55)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x59 (concat ?x148 (concat ?x27 ?x44)))))
 (let (($x38 (= input.dst.llvm-%n ?x151)))
 (let (($x121 (and $x38 $x66)))
 (let (($x78 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x9 (and $x78 $x121)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x155)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x149)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x171 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x6)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x56 $x171)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x82 $x150)))
 (let (($x159 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x20 $x131)))
 (let (($x122 (not $x5)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x161 $x162)))
 (let (($x168 (and (not $x134) $x122)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x117 $x153)))
 (let (($x75 (not $x46)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x99 $x14)))
 (let (($x160 (and (not $x63) $x75)))
 (let (($x62 (and (and (and (and (and (and $x160 $x168) $x120) $x135) $x159) $x167) $x146)))
 (let (($x141 (and (and (and $x62 $x152) $x33) $x9)))
 (let (($x137 (= $x141 true)))
 (let (($x91 (= $x137 true)))
 (let (($x118 (= $x91 true)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x97 (and $x41 $x118)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x13 (and $x98 $x97)))
 (let (($x87 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x7 (_ bv1 32))))
 (=> $x111 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x136 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x143 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x143 (_ bv1 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x7 (_ bv1 32))))
 (= $x111 $x133))))))
 ))
 (let (($x100 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x105 (= false false)))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x7 (_ bv0 32))))
 (=> $x147 $x105)))))
 ))
 (let (($x50 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x143 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x143 (_ bv0 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x7 (_ bv0 32))))
 (= $x147 $x142))))))
 ))
 (let (($x157 (and $x50 $x100)))
 (let (($x16 (and $x157 $x136)))
 (let (($x140 (and $x16 $x87)))
 (let (($x74 (and $x140 $x13)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x64 (and $x96 $x74)))
 (let (($x80 (=> $x64 $x138)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x40404000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #x40))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0c4a8578)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08a6057c)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08a6057f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0c4a857b)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08a6057c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0c4a8578)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08a6057c) #x40
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 ((_ extract 5 0) input.spec-%var-n-1)))
 (let (($x170 (= (_ bv0 6) ?x24)))
 (let (($x93 (= $x170 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x88 (concat ?x17 (concat ?x128 ?x43)))))
 (let (($x73 (= input.dst.llvm-%m ?x89)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x21 (concat ?x61 (concat ?x106 ?x77)))))
 (let (($x67 (= input.dst.llvm-%n ?x23)))
 (let (($x92 (and $x67 $x73)))
 (let (($x97 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x47 (and $x97 $x92)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x9)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x66)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x85 $x102)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x29 $x79)))
 (let (($x35 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (and $x59 $x115)))
 (let (($x148 (not $x172)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x78 $x32)))
 (let (($x27 (and (not $x132) $x148)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x155 $x33)))
 (let (($x54 (not $x26)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x146 $x149)))
 (let (($x81 (and (not $x152) $x54)))
 (let (($x19 (and (and (and (and (and (and $x81 $x27) $x57) $x151) $x35) $x10) $x55)))
 (let (($x156 (and (and (and $x19 $x121) $x141) $x47)))
 (let (($x129 (= $x156 true)))
 (let (($x124 (= $x129 true)))
 (let (($x84 (= $x124 true)))
 (let (($x167 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x72 (and $x167 $x84)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x95 (and $x6 $x72)))
 (let (($x82 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x99 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x99 (_ bv1 32))))
 (=> $x5 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x168 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x31 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x31 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x99 (_ bv1 32))))
 (= $x5 $x165))))))
 ))
 (let (($x153 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x158 (= false false)))
 (let ((?x99 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x99 (_ bv0 32))))
 (=> $x68 $x158)))))
 ))
 (let (($x63 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x31 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x31 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x99 (_ bv0 32))))
 (= $x68 $x36))))))
 ))
 (let (($x46 (and $x63 $x153)))
 (let (($x71 (and $x46 $x168)))
 (let (($x56 (and $x71 $x82)))
 (let (($x116 (and $x56 $x95)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x130 (and $x25 $x116)))
 (let (($x8 (=> $x130 $x93)))
 (not $x8)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 ((_ extract 5 0) input.spec-%var-n-1)))
 (let (($x170 (= (_ bv0 6) ?x24)))
 (let (($x93 (= $x170 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x88 (concat ?x17 (concat ?x128 ?x43)))))
 (let (($x73 (= input.dst.llvm-%m ?x89)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x21 (concat ?x61 (concat ?x106 ?x77)))))
 (let (($x67 (= input.dst.llvm-%n ?x23)))
 (let (($x92 (and $x67 $x73)))
 (let (($x97 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x47 (and $x97 $x92)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x9)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x66)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x85 $x102)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x29 $x79)))
 (let (($x35 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (and $x59 $x115)))
 (let (($x148 (not $x172)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x78 $x32)))
 (let (($x27 (and (not $x132) $x148)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x155 $x33)))
 (let (($x54 (not $x26)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x146 $x149)))
 (let (($x81 (and (not $x152) $x54)))
 (let (($x19 (and (and (and (and (and (and $x81 $x27) $x57) $x151) $x35) $x10) $x55)))
 (let (($x156 (and (and (and $x19 $x121) $x141) $x47)))
 (let (($x129 (= $x156 true)))
 (let (($x124 (= $x129 true)))
 (let (($x84 (= $x124 true)))
 (let (($x167 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x72 (and $x167 $x84)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x95 (and $x6 $x72)))
 (let (($x82 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x99 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x99 (_ bv1 32))))
 (=> $x5 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x168 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x31 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x31 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x99 (_ bv1 32))))
 (= $x5 $x165))))))
 ))
 (let (($x153 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x158 (= false false)))
 (let ((?x99 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x99 (_ bv0 32))))
 (=> $x68 $x158)))))
 ))
 (let (($x63 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x31 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x31 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x99 (_ bv0 32))))
 (= $x68 $x36))))))
 ))
 (let (($x46 (and $x63 $x153)))
 (let (($x71 (and $x46 $x168)))
 (let (($x56 (and $x71 $x82)))
 (let (($x116 (and $x56 $x95)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x130 (and $x25 $x116)))
 (let (($x8 (=> $x130 $x93)))
 (not $x8)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x657f8948)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0980a6c0)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0980a6c3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x657f894b)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0980a6c0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x657f8948)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0980a6c0) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x01010100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #x01))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x120)))
 (let (($x127 (= ?x39 input.spec-%var-n-1)))
 (let (($x135 (= $x127 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x50 (concat ?x105 (concat ?x16 ?x107)))))
 (let (($x100 (= input.dst.llvm-%m ?x103)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x30 (concat ?x74 (concat ?x170 ?x22)))))
 (let (($x7 (= input.dst.llvm-%n ?x12)))
 (let (($x157 (and $x7 $x100)))
 (let (($x72 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x111 (and $x72 $x157)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x47)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x73)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x112)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (and $x40 $x128)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x88 $x43)))
 (let (($x15 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x21 $x80)))
 (let (($x61 (not $x144)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x97 $x13)))
 (let (($x106 (and (not $x163) $x61)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x9 $x141)))
 (let (($x137 (not $x49)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x55 $x66)))
 (let (($x118 (and (not $x121) $x137)))
 (let (($x139 (and (and (and (and (and (and $x118 $x106) $x138) $x23) $x15) $x90) $x89)))
 (let (($x51 (and (and (and $x139 $x92) $x156) $x111)))
 (let (($x75 (= $x51 true)))
 (let (($x160 (= $x75 true)))
 (let (($x161 (= $x160 true)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x162 (and $x10 $x161)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x134 (and $x58 $x162)))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x146 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x146 (_ bv1 32))))
 (=> $x172 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x27 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x34 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x34 (_ bv1 32))))
 (let ((?x146 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x146 (_ bv1 32))))
 (= $x172 $x11))))))
 ))
 (let (($x33 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x76 (= false false)))
 (let ((?x146 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x146 (_ bv0 32))))
 (=> $x62 $x76)))))
 ))
 (let (($x152 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x34 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x34 (_ bv0 32))))
 (let ((?x146 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x146 (_ bv0 32))))
 (= $x62 $x53))))))
 ))
 (let (($x26 (and $x152 $x33)))
 (let (($x60 (and $x26 $x27)))
 (let (($x85 (and $x60 $x29)))
 (let (($x20 (and $x85 $x134)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x131 (and $x25 $x20)))
 (let (($x37 (=> $x131 $x135)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x120)))
 (let (($x127 (= ?x39 input.spec-%var-n-1)))
 (let (($x135 (= $x127 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x50 (concat ?x105 (concat ?x16 ?x107)))))
 (let (($x100 (= input.dst.llvm-%m ?x103)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x30 (concat ?x74 (concat ?x170 ?x22)))))
 (let (($x7 (= input.dst.llvm-%n ?x12)))
 (let (($x157 (and $x7 $x100)))
 (let (($x72 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x111 (and $x72 $x157)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x47)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x73)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x112)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (and $x40 $x128)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x88 $x43)))
 (let (($x15 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x21 $x80)))
 (let (($x61 (not $x144)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x97 $x13)))
 (let (($x106 (and (not $x163) $x61)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x9 $x141)))
 (let (($x137 (not $x49)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x55 $x66)))
 (let (($x118 (and (not $x121) $x137)))
 (let (($x139 (and (and (and (and (and (and $x118 $x106) $x138) $x23) $x15) $x90) $x89)))
 (let (($x51 (and (and (and $x139 $x92) $x156) $x111)))
 (let (($x75 (= $x51 true)))
 (let (($x160 (= $x75 true)))
 (let (($x161 (= $x160 true)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x162 (and $x10 $x161)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x134 (and $x58 $x162)))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x146 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x146 (_ bv1 32))))
 (=> $x172 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x27 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x34 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x34 (_ bv1 32))))
 (let ((?x146 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x146 (_ bv1 32))))
 (= $x172 $x11))))))
 ))
 (let (($x33 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x76 (= false false)))
 (let ((?x146 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x146 (_ bv0 32))))
 (=> $x62 $x76)))))
 ))
 (let (($x152 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x34 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x34 (_ bv0 32))))
 (let ((?x146 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x146 (_ bv0 32))))
 (= $x62 $x53))))))
 ))
 (let (($x26 (and $x152 $x33)))
 (let (($x60 (and $x26 $x27)))
 (let (($x85 (and $x60 $x29)))
 (let (($x20 (and $x85 $x134)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x131 (and $x25 $x20)))
 (let (($x37 (=> $x131 $x135)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x44 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x57 (= $x44 true)))
 (let (($x83 (= $x57 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x36 (concat ?x52 (concat ?x168 ?x68)))))
 (let (($x117 (= input.dst.llvm-%m ?x63)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x130 (concat ?x164 (concat ?x39 ?x169)))))
 (let (($x119 (= input.dst.llvm-%n ?x86)))
 (let (($x153 (and $x119 $x117)))
 (let (($x162 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x46 (and $x162 $x153)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x111)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x100)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x145 $x16)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x50 $x107)))
 (let (($x142 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x30 $x8)))
 (let (($x74 (not $x166)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x72 $x95)))
 (let (($x170 (and (not $x64) $x74)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x47 $x156)))
 (let (($x129 (not $x41)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x89 $x73)))
 (let (($x84 (and (not $x92) $x129)))
 (let (($x6 (and (and (and (and (and (and $x84 $x170) $x93) $x12) $x142) $x110) $x103)))
 (let (($x167 (and (and (and $x6 $x157) $x51) $x46)))
 (let (($x28 (= $x167 true)))
 (let (($x54 (= $x28 true)))
 (let (($x81 (= $x54 true)))
 (let (($x90 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x78 (and $x90 $x81)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x32 (and $x112 $x78)))
 (let (($x88 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x55 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x55 (_ bv1 32))))
 (=> $x144 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x106 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x123 (_ bv1 32))))
 (let ((?x55 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x55 (_ bv1 32))))
 (= $x144 $x101))))))
 ))
 (let (($x141 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x91 (= false false)))
 (let ((?x55 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x55 (_ bv0 32))))
 (=> $x19 $x91)))))
 ))
 (let (($x121 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x123 (_ bv0 32))))
 (let ((?x55 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x55 (_ bv0 32))))
 (= $x19 $x18))))))
 ))
 (let (($x49 (and $x121 $x141)))
 (let (($x133 (and $x49 $x106)))
 (let (($x40 (and $x133 $x88)))
 (let (($x132 (and $x40 $x32)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x59 (and $x25 $x132)))
 (let (($x114 (=> $x59 $x83)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x44 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x57 (= $x44 true)))
 (let (($x83 (= $x57 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x36 (concat ?x52 (concat ?x168 ?x68)))))
 (let (($x117 (= input.dst.llvm-%m ?x63)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x130 (concat ?x164 (concat ?x39 ?x169)))))
 (let (($x119 (= input.dst.llvm-%n ?x86)))
 (let (($x153 (and $x119 $x117)))
 (let (($x162 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x46 (and $x162 $x153)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x111)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x100)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x145 $x16)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x50 $x107)))
 (let (($x142 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x30 $x8)))
 (let (($x74 (not $x166)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x72 $x95)))
 (let (($x170 (and (not $x64) $x74)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x47 $x156)))
 (let (($x129 (not $x41)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x89 $x73)))
 (let (($x84 (and (not $x92) $x129)))
 (let (($x6 (and (and (and (and (and (and $x84 $x170) $x93) $x12) $x142) $x110) $x103)))
 (let (($x167 (and (and (and $x6 $x157) $x51) $x46)))
 (let (($x28 (= $x167 true)))
 (let (($x54 (= $x28 true)))
 (let (($x81 (= $x54 true)))
 (let (($x90 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x78 (and $x90 $x81)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x32 (and $x112 $x78)))
 (let (($x88 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x55 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x55 (_ bv1 32))))
 (=> $x144 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x106 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x123 (_ bv1 32))))
 (let ((?x55 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x55 (_ bv1 32))))
 (= $x144 $x101))))))
 ))
 (let (($x141 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x91 (= false false)))
 (let ((?x55 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x55 (_ bv0 32))))
 (=> $x19 $x91)))))
 ))
 (let (($x121 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x123 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x123 (_ bv0 32))))
 (let ((?x55 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x55 (_ bv0 32))))
 (= $x19 $x18))))))
 ))
 (let (($x49 (and $x121 $x141)))
 (let (($x133 (and $x49 $x106)))
 (let (($x40 (and $x133 $x88)))
 (let (($x132 (and $x40 $x32)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x59 (and $x25 $x132)))
 (let (($x114 (=> $x59 $x83)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4e25557c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffd78)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffffd7b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4e25557f)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffd78)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4e25557c)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x4e25557c) #x00
      #xff))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x77 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x138 (= $x77 true)))
 (let (($x87 (= $x138 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x152 (concat ?x76 (concat ?x60 ?x148)))))
 (let (($x33 (= input.dst.llvm-%m ?x155)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x45 (concat ?x20 (concat ?x57 ?x115)))))
 (let (($x146 (= input.dst.llvm-%n ?x14)))
 (let (($x26 (and $x146 $x33)))
 (let (($x78 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x172 (and $x78 $x26)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x46)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x117)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x122)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x154 $x168)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x36 $x68)))
 (let (($x31 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x130 $x135)))
 (let (($x164 (not $x37)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x162 $x134)))
 (let (($x39 (and (not $x147) $x164)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x111 $x51)))
 (let (($x75 (not $x150)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x103 $x100)))
 (let (($x161 (and (not $x157) $x75)))
 (let (($x102 (and (and (and (and (and (and $x161 $x39) $x127) $x86) $x31) $x71) $x63)))
 (let (($x69 (and (and (and $x102 $x153) $x167) $x172)))
 (let (($x137 (= $x69 true)))
 (let (($x118 (= $x137 true)))
 (let (($x97 (= $x118 true)))
 (let (($x110 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x13 (and $x110 $x97)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x163 (and $x136 $x13)))
 (let (($x50 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x89 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x89 (_ bv1 32))))
 (=> $x166 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x170 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x140 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x140 (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x89 (_ bv1 32))))
 (= $x166 $x24))))))
 ))
 (let (($x156 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x124 (= false false)))
 (let ((?x89 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x89 (_ bv0 32))))
 (=> $x139 $x124)))))
 ))
 (let (($x92 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x140 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x140 (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x89 (_ bv0 32))))
 (= $x139 $x17))))))
 ))
 (let (($x41 (and $x92 $x156)))
 (let (($x5 (and $x41 $x170)))
 (let (($x145 (and $x5 $x50)))
 (let (($x21 (and $x145 $x163)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x80 (and $x25 $x21)))
 (let (($x126 (=> $x80 $x87)))
 (not $x126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x77 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x138 (= $x77 true)))
 (let (($x87 (= $x138 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x152 (concat ?x76 (concat ?x60 ?x148)))))
 (let (($x33 (= input.dst.llvm-%m ?x155)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x45 (concat ?x20 (concat ?x57 ?x115)))))
 (let (($x146 (= input.dst.llvm-%n ?x14)))
 (let (($x26 (and $x146 $x33)))
 (let (($x78 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x172 (and $x78 $x26)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x46)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x117)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x122)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x154 $x168)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x36 $x68)))
 (let (($x31 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x130 $x135)))
 (let (($x164 (not $x37)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x162 $x134)))
 (let (($x39 (and (not $x147) $x164)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x111 $x51)))
 (let (($x75 (not $x150)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x103 $x100)))
 (let (($x161 (and (not $x157) $x75)))
 (let (($x102 (and (and (and (and (and (and $x161 $x39) $x127) $x86) $x31) $x71) $x63)))
 (let (($x69 (and (and (and $x102 $x153) $x167) $x172)))
 (let (($x137 (= $x69 true)))
 (let (($x118 (= $x137 true)))
 (let (($x97 (= $x118 true)))
 (let (($x110 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x13 (and $x110 $x97)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x163 (and $x136 $x13)))
 (let (($x50 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x89 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x89 (_ bv1 32))))
 (=> $x166 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x170 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x140 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x140 (_ bv1 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x89 (_ bv1 32))))
 (= $x166 $x24))))))
 ))
 (let (($x156 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x124 (= false false)))
 (let ((?x89 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x89 (_ bv0 32))))
 (=> $x139 $x124)))))
 ))
 (let (($x92 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x140 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x140 (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x89 (_ bv0 32))))
 (= $x139 $x17))))))
 ))
 (let (($x41 (and $x92 $x156)))
 (let (($x5 (and $x41 $x170)))
 (let (($x145 (and $x5 $x50)))
 (let (($x21 (and $x145 $x163)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x80 (and $x25 $x21)))
 (let (($x126 (=> $x80 $x87)))
 (not $x126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x294 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x281 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x285))))
 (let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x159 (_ bv1 32))))
 (=> $x120 (= (_ bv0 32) ?x291))))))))
 ))
 (let (($x251 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x159 (_ bv1 32))))
 (= $x120 (bvuge ?x234 (_ bv1 32)))))))
 ))
 (let (($x239 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x159 (_ bv0 32))))
 (=> $x105 $x160)))))
 ))
 (let (($x237 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x159 (_ bv0 32))))
 (= $x105 (= (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x240 (and $x237 $x239)))
 (let (($x252 (and $x240 $x251)))
 (let (($x295 (and $x252 $x294)))
 (let (($x296 (= $x295 true)))
 (let (($x297 (= $x296 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x9 (concat ?x123 (concat ?x67 ?x106)))))
 (let (($x49 (= input.dst.llvm-%m ?x141)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x149 (concat ?x62 (concat ?x87 ?x77)))))
 (let (($x19 (= input.dst.llvm-%n ?x55)))
 (let (($x144 (and $x19 $x49)))
 (let (($x13 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x101 (and $x13 $x144)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x172)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x33)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x27)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (and $x48 $x60)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x152 $x148)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x45 $x114)))
 (let (($x20 (not $x151)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x78 $x32)))
 (let (($x57 (and (not $x131) $x20)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x46 $x167)))
 (let (($x28 (not $x10)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x63 $x117)))
 (let (($x81 (and (not $x153) $x28)))
 (let (($x43 (and (and (and (and (and (and $x81 $x57) $x83) $x14) $x53) $x38) $x155)))
 (let (($x129 (and (and (and $x43 $x26) $x69) $x101)))
 (let (($x84 (= $x129 true)))
 (let (($x72 (= $x84 true)))
 (let (($x95 (= $x72 true)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x64 (and $x71 $x95)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x30 (and $x122 $x64)))
 (let (($x36 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x103 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x103 (_ bv1 32))))
 (=> $x37 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x39 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x159 (_ bv1 32))))
 (let ((?x103 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x103 (_ bv1 32))))
 (= $x37 $x120))))))
 ))
 (let (($x51 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x103 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x103 (_ bv0 32))))
 (=> $x6 $x160)))))
 ))
 (let (($x157 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x159 (_ bv0 32))))
 (let ((?x103 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x103 (_ bv0 32))))
 (= $x6 $x105))))))
 ))
 (let (($x150 (and $x157 $x51)))
 (let (($x11 (and $x150 $x39)))
 (let (($x154 (and $x11 $x36)))
 (let (($x8 (and $x154 $x30)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x22 (and $x25 $x8)))
 (let (($x298 (=> $x22 $x297)))
 (not $x298)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x294 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x281 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x285))))
 (let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x159 (_ bv1 32))))
 (=> $x120 (= (_ bv0 32) ?x291))))))))
 ))
 (let (($x251 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x159 (_ bv1 32))))
 (= $x120 (bvuge ?x234 (_ bv1 32)))))))
 ))
 (let (($x239 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x159 (_ bv0 32))))
 (=> $x105 $x160)))))
 ))
 (let (($x237 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x159 (_ bv0 32))))
 (= $x105 (= (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x240 (and $x237 $x239)))
 (let (($x252 (and $x240 $x251)))
 (let (($x295 (and $x252 $x294)))
 (let (($x296 (= $x295 true)))
 (let (($x297 (= $x296 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x9 (concat ?x123 (concat ?x67 ?x106)))))
 (let (($x49 (= input.dst.llvm-%m ?x141)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x149 (concat ?x62 (concat ?x87 ?x77)))))
 (let (($x19 (= input.dst.llvm-%n ?x55)))
 (let (($x144 (and $x19 $x49)))
 (let (($x13 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x101 (and $x13 $x144)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x172)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x33)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x27)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (and $x48 $x60)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x152 $x148)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x45 $x114)))
 (let (($x20 (not $x151)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x78 $x32)))
 (let (($x57 (and (not $x131) $x20)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x46 $x167)))
 (let (($x28 (not $x10)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x63 $x117)))
 (let (($x81 (and (not $x153) $x28)))
 (let (($x43 (and (and (and (and (and (and $x81 $x57) $x83) $x14) $x53) $x38) $x155)))
 (let (($x129 (and (and (and $x43 $x26) $x69) $x101)))
 (let (($x84 (= $x129 true)))
 (let (($x72 (= $x84 true)))
 (let (($x95 (= $x72 true)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x64 (and $x71 $x95)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x30 (and $x122 $x64)))
 (let (($x36 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x103 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x103 (_ bv1 32))))
 (=> $x37 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x39 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x159 (_ bv1 32))))
 (let ((?x103 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x103 (_ bv1 32))))
 (= $x37 $x120))))))
 ))
 (let (($x51 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x103 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x103 (_ bv0 32))))
 (=> $x6 $x160)))))
 ))
 (let (($x157 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x159 (_ bv0 32))))
 (let ((?x103 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x103 (_ bv0 32))))
 (= $x6 $x105))))))
 ))
 (let (($x150 (and $x157 $x51)))
 (let (($x11 (and $x150 $x39)))
 (let (($x154 (and $x11 $x36)))
 (let (($x8 (and $x154 $x30)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x22 (and $x25 $x8)))
 (let (($x298 (=> $x22 $x297)))
 (not $x298)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x268 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x265))))
 (let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x85 (_ bv1 32))))
 (=> $x44 (= (_ bv0 32) ?x273))))))))
 ))
 (let (($x215 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%m)) (_ bv1 32) (_ bv0 32))))
 (let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x85 (_ bv1 32))))
 (= $x44 (bvuge ?x200 (_ bv1 32)))))))
 ))
 (let (($x204 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x54 (= false false)))
 (let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x85 (_ bv0 32))))
 (=> $x52 $x54)))))
 ))
 (let (($x203 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%m)) (_ bv1 32) (_ bv0 32))))
 (let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x85 (_ bv0 32))))
 (= $x52 (= ?x200 (_ bv0 32)))))))
 ))
 (let (($x205 (and $x203 $x204)))
 (let (($x218 (and $x205 $x215)))
 (let (($x271 (and $x218 $x268)))
 (let (($x274 (= $x271 true)))
 (let (($x277 (= $x274 true)))
 (let ((?x252 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x284 (concat ?x283 (concat ?x290 (concat ?x280 ?x252)))))
 (let (($x282 (= input.dst.llvm-%m ?x284)))
 (let ((?x232 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x249 (concat ?x240 (concat ?x237 (concat ?x233 ?x232)))))
 (let (($x250 (= input.dst.llvm-%n ?x249)))
 (let (($x285 (and $x250 $x282)))
 (let (($x64 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x288 (and $x64 $x285)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x101)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x49)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x91 $x67)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x9 $x106)))
 (let (($x121 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x149 $x23)))
 (let (($x62 (not $x132)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x13 $x163)))
 (let (($x87 (and (not $x42) $x62)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x172 $x69)))
 (let (($x137 (not $x65)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x155 $x33)))
 (let (($x97 (and (not $x26) $x137)))
 (let (($x296 (and (and (and (and (and (and $x97 $x87) $x126) $x55) $x121) $x113) $x141)))
 (let (($x299 (and (and (and $x296 $x144) $x129) $x288)))
 (let (($x98 (= $x299 true)))
 (let (($x93 (= $x98 true)))
 (let (($x82 (= $x93 true)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x165 (and $x38 $x82)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x104 (and $x27 $x165)))
 (let (($x152 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x63 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x63 (_ bv1 32))))
 (=> $x151 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x57 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x85 (_ bv1 32))))
 (let ((?x63 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x63 (_ bv1 32))))
 (= $x151 $x44))))))
 ))
 (let (($x167 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x54 (= false false)))
 (let ((?x63 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (= ?x63 (_ bv0 32))))
 (=> $x102 $x54)))))
 ))
 (let (($x153 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x85 (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (= ?x63 (_ bv0 32))))
 (= $x102 $x52))))))
 ))
 (let (($x10 (and $x153 $x167)))
 (let (($x88 (and $x10 $x57)))
 (let (($x48 (and $x88 $x152)))
 (let (($x21 (and $x48 $x104)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x61 (and $x96 $x21)))
 (let (($x278 (=> $x61 $x277)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x268 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x258 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x265))))
 (let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x85 (_ bv1 32))))
 (=> $x44 (= (_ bv0 32) ?x273))))))))
 ))
 (let (($x215 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%m)) (_ bv1 32) (_ bv0 32))))
 (let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x85 (_ bv1 32))))
 (= $x44 (bvuge ?x200 (_ bv1 32)))))))
 ))
 (let (($x204 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x54 (= false false)))
 (let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x85 (_ bv0 32))))
 (=> $x52 $x54)))))
 ))
 (let (($x203 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%m)) (_ bv1 32) (_ bv0 32))))
 (let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x85 (_ bv0 32))))
 (= $x52 (= ?x200 (_ bv0 32)))))))
 ))
 (let (($x205 (and $x203 $x204)))
 (let (($x218 (and $x205 $x215)))
 (let (($x271 (and $x218 $x268)))
 (let (($x274 (= $x271 true)))
 (let (($x277 (= $x274 true)))
 (let ((?x252 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x284 (concat ?x283 (concat ?x290 (concat ?x280 ?x252)))))
 (let (($x282 (= input.dst.llvm-%m ?x284)))
 (let ((?x232 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x249 (concat ?x240 (concat ?x237 (concat ?x233 ?x232)))))
 (let (($x250 (= input.dst.llvm-%n ?x249)))
 (let (($x285 (and $x250 $x282)))
 (let (($x64 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x288 (and $x64 $x285)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x101)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x49)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x91 $x67)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x9 $x106)))
 (let (($x121 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x149 $x23)))
 (let (($x62 (not $x132)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x13 $x163)))
 (let (($x87 (and (not $x42) $x62)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x172 $x69)))
 (let (($x137 (not $x65)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x155 $x33)))
 (let (($x97 (and (not $x26) $x137)))
 (let (($x296 (and (and (and (and (and (and $x97 $x87) $x126) $x55) $x121) $x113) $x141)))
 (let (($x299 (and (and (and $x296 $x144) $x129) $x288)))
 (let (($x98 (= $x299 true)))
 (let (($x93 (= $x98 true)))
 (let (($x82 (= $x93 true)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x165 (and $x38 $x82)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x104 (and $x27 $x165)))
 (let (($x152 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x63 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x63 (_ bv1 32))))
 (=> $x151 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x57 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x85 (_ bv1 32))))
 (let ((?x63 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x63 (_ bv1 32))))
 (= $x151 $x44))))))
 ))
 (let (($x167 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x54 (= false false)))
 (let ((?x63 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (= ?x63 (_ bv0 32))))
 (=> $x102 $x54)))))
 ))
 (let (($x153 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x85 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x85 (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (= ?x63 (_ bv0 32))))
 (= $x102 $x52))))))
 ))
 (let (($x10 (and $x153 $x167)))
 (let (($x88 (and $x10 $x57)))
 (let (($x48 (and $x88 $x152)))
 (let (($x21 (and $x48 $x104)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x61 (and $x96 $x21)))
 (let (($x278 (=> $x61 $x277)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda25Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000104)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000103)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000107)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000104)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000104) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfff5fff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9575fffc)
  (define-fun Lambda25Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9575ffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfff5fffb)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9575fffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfff5fff8)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfff5fff8) #x04
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x255 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x227 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda25Var (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvmul Lambda25Var (_ bv4 32))))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda25Var (_ bv4 32)) (_ bv2 32))) ?x227)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda25Var (_ bv4 32)) (_ bv3 32))) ?x222)))
 (let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x112 (_ bv1 32))))
 (=> $x138 (= (_ bv0 32) ?x241))))))))
 ))
 (let (($x179 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x171 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x112 (_ bv1 32))))
 (= $x138 (bvuge ?x171 (_ bv1 32)))))))
 ))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x118 (= false false)))
 (let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x112 (_ bv0 32))))
 (=> $x76 $x118)))))
 ))
 (let (($x127 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x171 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x112 (_ bv0 32))))
 (= $x76 (= ?x171 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x127 $x29)))
 (let (($x182 (and $x86 $x179)))
 (let (($x263 (and $x182 $x255)))
 (let (($x248 (= $x263 true)))
 (let (($x253 (= $x248 true)))
 (let ((?x218 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x262 (concat ?x259 (concat ?x272 (concat ?x257 ?x218)))))
 (let (($x256 (= input.dst.llvm-%m ?x262)))
 (let ((?x194 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x209 (concat ?x205 (concat ?x203 (concat ?x197 ?x194)))))
 (let (($x212 (= input.dst.llvm-%n ?x209)))
 (let (($x265 (and $x212 $x256)))
 (let (($x165 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x275 (and $x165 $x265)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x299 (= (_ bv0 32) ?x288)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x285 (= (_ bv0 32) ?x282)))
 (let ((?x286 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x286)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x280 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x70)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (and $x289 $x280)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x283 $x252)))
 (let (($x287 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x249 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x240 $x235)))
 (let (($x237 (not $x236)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x239 (and $x64 $x30)))
 (let (($x233 (and (not $x239) $x237)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x101 $x129)))
 (let (($x84 (not $x298)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x141 $x49)))
 (let (($x95 (and (not $x144) $x84)))
 (let (($x274 (and (and (and (and (and (and $x95 $x233) $x234) $x249) $x287) $x281) $x284)))
 (let (($x279 (and (and (and $x274 $x285) $x299) $x275)))
 (let (($x25 (= $x279 true)))
 (let (($x80 (= $x25 true)))
 (let (($x139 (= $x80 true)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x94 (and $x113 $x139)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x5 (and $x133 $x94)))
 (let (($x9 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x155 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x155 (_ bv1 32))))
 (=> $x132 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x87 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x112 (_ bv1 32))))
 (let ((?x155 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x155 (_ bv1 32))))
 (= $x132 $x138))))))
 ))
 (let (($x69 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x118 (= false false)))
 (let ((?x155 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x155 (_ bv0 32))))
 (=> $x43 $x118)))))
 ))
 (let (($x26 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x112 (_ bv0 32))))
 (let ((?x155 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x155 (_ bv0 32))))
 (= $x43 $x76))))))
 ))
 (let (($x65 (and $x26 $x69)))
 (let (($x291 (and $x65 $x87)))
 (let (($x91 (and $x291 $x9)))
 (let (($x8 (and $x91 $x5)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x251 (and $x96 $x8)))
 (let (($x245 (=> $x251 $x253)))
 (not $x245)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x255 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x227 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda25Var (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvmul Lambda25Var (_ bv4 32))))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda25Var (_ bv4 32)) (_ bv2 32))) ?x227)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda25Var (_ bv4 32)) (_ bv3 32))) ?x222)))
 (let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x112 (_ bv1 32))))
 (=> $x138 (= (_ bv0 32) ?x241))))))))
 ))
 (let (($x179 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x171 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x112 (_ bv1 32))))
 (= $x138 (bvuge ?x171 (_ bv1 32)))))))
 ))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x118 (= false false)))
 (let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x112 (_ bv0 32))))
 (=> $x76 $x118)))))
 ))
 (let (($x127 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x171 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x112 (_ bv0 32))))
 (= $x76 (= ?x171 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x127 $x29)))
 (let (($x182 (and $x86 $x179)))
 (let (($x263 (and $x182 $x255)))
 (let (($x248 (= $x263 true)))
 (let (($x253 (= $x248 true)))
 (let ((?x218 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x262 (concat ?x259 (concat ?x272 (concat ?x257 ?x218)))))
 (let (($x256 (= input.dst.llvm-%m ?x262)))
 (let ((?x194 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x209 (concat ?x205 (concat ?x203 (concat ?x197 ?x194)))))
 (let (($x212 (= input.dst.llvm-%n ?x209)))
 (let (($x265 (and $x212 $x256)))
 (let (($x165 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x275 (and $x165 $x265)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x299 (= (_ bv0 32) ?x288)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x285 (= (_ bv0 32) ?x282)))
 (let ((?x286 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x286)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x280 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x70)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (and $x289 $x280)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x283 $x252)))
 (let (($x287 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x249 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x240 $x235)))
 (let (($x237 (not $x236)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x239 (and $x64 $x30)))
 (let (($x233 (and (not $x239) $x237)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x101 $x129)))
 (let (($x84 (not $x298)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x141 $x49)))
 (let (($x95 (and (not $x144) $x84)))
 (let (($x274 (and (and (and (and (and (and $x95 $x233) $x234) $x249) $x287) $x281) $x284)))
 (let (($x279 (and (and (and $x274 $x285) $x299) $x275)))
 (let (($x25 (= $x279 true)))
 (let (($x80 (= $x25 true)))
 (let (($x139 (= $x80 true)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x94 (and $x113 $x139)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x5 (and $x133 $x94)))
 (let (($x9 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x155 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x155 (_ bv1 32))))
 (=> $x132 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x87 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x112 (_ bv1 32))))
 (let ((?x155 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x155 (_ bv1 32))))
 (= $x132 $x138))))))
 ))
 (let (($x69 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x118 (= false false)))
 (let ((?x155 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x155 (_ bv0 32))))
 (=> $x43 $x118)))))
 ))
 (let (($x26 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x112 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x112 (_ bv0 32))))
 (let ((?x155 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x155 (_ bv0 32))))
 (= $x43 $x76))))))
 ))
 (let (($x65 (and $x26 $x69)))
 (let (($x291 (and $x65 $x87)))
 (let (($x91 (and $x291 $x9)))
 (let (($x8 (and $x91 $x5)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x251 (and $x96 $x8)))
 (let (($x245 (=> $x251 $x253)))
 (not $x245)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda25Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xdd7ffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdd7ffff8)
  (define-fun Lambda25Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdd7ffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xdd7fffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdd7ffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xdd7ffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdd7ffff8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x244 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x196 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%n)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x217))))
 (let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x294 (_ bv1 32))))
 (=> $x231 (= (_ bv0 32) ?x211))))))))
 ))
 (let (($x24 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x294 (_ bv1 32))))
 (= $x231 (bvuge ?x15 (_ bv1 32)))))))
 ))
 (let (($x140 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x72 (= false false)))
 (let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x294 (_ bv0 32))))
 (=> $x123 $x72)))))
 ))
 (let (($x14 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x294 (_ bv0 32))))
 (= $x123 (= ?x15 (_ bv0 32)))))))
 ))
 (let (($x108 (and $x14 $x140)))
 (let (($x145 (and $x108 $x24)))
 (let (($x247 (and $x145 $x244)))
 (let (($x254 (= $x247 true)))
 (let (($x264 (= $x254 true)))
 (let ((?x182 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x229 (concat ?x225 (concat ?x223 (concat ?x220 ?x182)))))
 (let (($x227 (= input.dst.llvm-%m ?x229)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x86 (concat ?x127 (concat ?x161 ?x75)))))
 (let (($x178 (= input.dst.llvm-%n ?x174)))
 (let (($x222 (and $x178 $x227)))
 (let (($x94 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x241 (and $x94 $x222)))
 (let ((?x275 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x279 (= (_ bv0 32) ?x275)))
 (let ((?x256 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x265 (= (_ bv0 32) ?x256)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x262 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x266)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (and $x276 $x257)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x258 (and $x259 $x218)))
 (let (($x267 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x205 $x206)))
 (let (($x203 (not $x201)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x204 (and $x165 $x104)))
 (let (($x197 (and (not $x204) $x203)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x278 (and $x288 $x299)))
 (let (($x98 (not $x278)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (and $x284 $x282)))
 (let (($x82 (and (not $x285) $x98)))
 (let (($x253 (and (and (and (and (and (and $x82 $x197) $x200) $x209) $x267) $x258) $x262)))
 (let (($x58 (and (and (and $x253 $x265) $x279) $x241)))
 (let (($x22 (= $x58 true)))
 (let (($x6 (= $x22 true)))
 (let (($x143 (= $x6 true)))
 (let (($x281 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x11 (and $x281 $x143)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x21 (and $x70 $x11)))
 (let (($x283 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x141 (_ bv1 32))))
 (=> $x236 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x233 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x294 (_ bv1 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x141 (_ bv1 32))))
 (= $x236 $x231))))))
 ))
 (let (($x129 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x72 (= false false)))
 (let ((?x141 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x141 (_ bv0 32))))
 (=> $x296 $x72)))))
 ))
 (let (($x144 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x294 (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x141 (_ bv0 32))))
 (= $x296 $x123))))))
 ))
 (let (($x298 (and $x144 $x129)))
 (let (($x273 (and $x298 $x233)))
 (let (($x289 (and $x273 $x283)))
 (let (($x215 (and $x289 $x21)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x61 (and $x117 $x215)))
 (let (($x260 (=> $x61 $x264)))
 (not $x260)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x244 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x196 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%n)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x217))))
 (let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x294 (_ bv1 32))))
 (=> $x231 (= (_ bv0 32) ?x211))))))))
 ))
 (let (($x24 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x294 (_ bv1 32))))
 (= $x231 (bvuge ?x15 (_ bv1 32)))))))
 ))
 (let (($x140 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x72 (= false false)))
 (let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x294 (_ bv0 32))))
 (=> $x123 $x72)))))
 ))
 (let (($x14 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x294 (_ bv0 32))))
 (= $x123 (= ?x15 (_ bv0 32)))))))
 ))
 (let (($x108 (and $x14 $x140)))
 (let (($x145 (and $x108 $x24)))
 (let (($x247 (and $x145 $x244)))
 (let (($x254 (= $x247 true)))
 (let (($x264 (= $x254 true)))
 (let ((?x182 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x229 (concat ?x225 (concat ?x223 (concat ?x220 ?x182)))))
 (let (($x227 (= input.dst.llvm-%m ?x229)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x86 (concat ?x127 (concat ?x161 ?x75)))))
 (let (($x178 (= input.dst.llvm-%n ?x174)))
 (let (($x222 (and $x178 $x227)))
 (let (($x94 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x241 (and $x94 $x222)))
 (let ((?x275 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x279 (= (_ bv0 32) ?x275)))
 (let ((?x256 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x265 (= (_ bv0 32) ?x256)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x262 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x266)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (and $x276 $x257)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x258 (and $x259 $x218)))
 (let (($x267 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x205 $x206)))
 (let (($x203 (not $x201)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x204 (and $x165 $x104)))
 (let (($x197 (and (not $x204) $x203)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x278 (and $x288 $x299)))
 (let (($x98 (not $x278)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (and $x284 $x282)))
 (let (($x82 (and (not $x285) $x98)))
 (let (($x253 (and (and (and (and (and (and $x82 $x197) $x200) $x209) $x267) $x258) $x262)))
 (let (($x58 (and (and (and $x253 $x265) $x279) $x241)))
 (let (($x22 (= $x58 true)))
 (let (($x6 (= $x22 true)))
 (let (($x143 (= $x6 true)))
 (let (($x281 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x11 (and $x281 $x143)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x21 (and $x70 $x11)))
 (let (($x283 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x141 (_ bv1 32))))
 (=> $x236 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x233 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x294 (_ bv1 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x141 (_ bv1 32))))
 (= $x236 $x231))))))
 ))
 (let (($x129 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x72 (= false false)))
 (let ((?x141 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x141 (_ bv0 32))))
 (=> $x296 $x72)))))
 ))
 (let (($x144 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x294 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x294 (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x141 (_ bv0 32))))
 (= $x296 $x123))))))
 ))
 (let (($x298 (and $x144 $x129)))
 (let (($x273 (and $x298 $x233)))
 (let (($x289 (and $x273 $x283)))
 (let (($x215 (and $x289 $x21)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x61 (and $x117 $x215)))
 (let (($x260 (=> $x61 $x264)))
 (not $x260)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda25Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xdd7ffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdd7ffff8)
  (define-fun Lambda25Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdd7ffffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xdd7fffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdd7ffff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xdd7ffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdd7ffff8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x324 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x310 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x320 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x314))))
 (let ((?x154 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x154 (_ bv1 32))))
 (=> $x107 (= (input.spec-%tmpvar-10.E0%0%d.1.1 Lambda25Var) ?x320))))))))
 ))
 (let (($x12 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x154 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x154 (_ bv1 32))))
 (= $x107 (bvuge ?x119 (_ bv1 32)))))))
 ))
 (let (($x71 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x285 (= false false)))
 (let ((?x154 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x154 (_ bv0 32))))
 (=> $x168 $x285)))))
 ))
 (let (($x131 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x154 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x154 (_ bv0 32))))
 (= $x168 (= ?x119 (_ bv0 32)))))))
 ))
 (let (($x78 (and $x131 $x71)))
 (let (($x134 (and $x78 $x12)))
 (let (($x325 (and $x134 $x324)))
 (let (($x326 (= $x325 true)))
 (let (($x327 (= $x326 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x210 (concat ?x207 (concat ?x216 (concat ?x88 ?x24)))))
 (let (($x208 (= input.dst.llvm-%m ?x210)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x140 (concat ?x99 (concat ?x114 ?x61)))))
 (let (($x156 (= input.dst.llvm-%n ?x108)))
 (let (($x214 (and $x156 $x208)))
 (let (($x143 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x217 (and $x143 $x214)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x222)))
 (let ((?x229 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x229)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x223)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (and $x225 $x39)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x230 $x220)))
 (let (($x178 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (and $x29 $x86)))
 (let (($x130 (not $x162)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x139 $x94)))
 (let (($x147 (and (not $x5) $x130)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x245 $x275)))
 (let (($x246 (not $x279)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x266 $x253)))
 (let (($x80 (and (not $x256) $x246)))
 (let (($x247 (and (and (and (and (and (and $x80 $x147) $x75) $x125) $x178) $x182) $x224)))
 (let (($x260 (and (and (and $x247 $x227) $x241) $x217)))
 (let (($x261 (= $x260 true)))
 (let (($x158 (= $x261 true)))
 (let (($x20 (= $x158 true)))
 (let (($x218 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x100 (and $x218 $x20)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x146 (and $x272 $x100)))
 (let (($x263 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x286 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x286 (_ bv1 32))))
 (=> $x206 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x203 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x287 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x287 (_ bv1 32))))
 (let ((?x286 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x286 (_ bv1 32))))
 (= $x206 $x204))))))
 ))
 (let (($x288 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x285 (= false false)))
 (let ((?x286 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x286 (_ bv0 32))))
 (=> $x284 $x285)))))
 ))
 (let (($x282 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x287 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x289 (= ?x287 (_ bv0 32))))
 (let ((?x286 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x286 (_ bv0 32))))
 (= $x284 $x289))))))
 ))
 (let (($x299 (and $x282 $x288)))
 (let (($x197 (and $x299 $x203)))
 (let (($x259 (and $x197 $x263)))
 (let (($x8 (and $x259 $x146)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x179 (and $x56 $x8)))
 (let (($x328 (=> $x179 $x327)))
 (not $x328)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x324 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x310 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x320 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x314))))
 (let ((?x154 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x154 (_ bv1 32))))
 (=> $x107 (= (input.spec-%tmpvar-10.E0%0%d.1.1 Lambda25Var) ?x320))))))))
 ))
 (let (($x12 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x154 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x154 (_ bv1 32))))
 (= $x107 (bvuge ?x119 (_ bv1 32)))))))
 ))
 (let (($x71 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x285 (= false false)))
 (let ((?x154 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x154 (_ bv0 32))))
 (=> $x168 $x285)))))
 ))
 (let (($x131 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x154 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x154 (_ bv0 32))))
 (= $x168 (= ?x119 (_ bv0 32)))))))
 ))
 (let (($x78 (and $x131 $x71)))
 (let (($x134 (and $x78 $x12)))
 (let (($x325 (and $x134 $x324)))
 (let (($x326 (= $x325 true)))
 (let (($x327 (= $x326 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x210 (concat ?x207 (concat ?x216 (concat ?x88 ?x24)))))
 (let (($x208 (= input.dst.llvm-%m ?x210)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x140 (concat ?x99 (concat ?x114 ?x61)))))
 (let (($x156 (= input.dst.llvm-%n ?x108)))
 (let (($x214 (and $x156 $x208)))
 (let (($x143 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x217 (and $x143 $x214)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x222)))
 (let ((?x229 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x229)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x223)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (and $x225 $x39)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x230 $x220)))
 (let (($x178 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (and $x29 $x86)))
 (let (($x130 (not $x162)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x139 $x94)))
 (let (($x147 (and (not $x5) $x130)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x245 $x275)))
 (let (($x246 (not $x279)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x266 $x253)))
 (let (($x80 (and (not $x256) $x246)))
 (let (($x247 (and (and (and (and (and (and $x80 $x147) $x75) $x125) $x178) $x182) $x224)))
 (let (($x260 (and (and (and $x247 $x227) $x241) $x217)))
 (let (($x261 (= $x260 true)))
 (let (($x158 (= $x261 true)))
 (let (($x20 (= $x158 true)))
 (let (($x218 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x100 (and $x218 $x20)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x146 (and $x272 $x100)))
 (let (($x263 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x286 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x286 (_ bv1 32))))
 (=> $x206 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x203 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x287 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x287 (_ bv1 32))))
 (let ((?x286 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x286 (_ bv1 32))))
 (= $x206 $x204))))))
 ))
 (let (($x288 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x285 (= false false)))
 (let ((?x286 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x286 (_ bv0 32))))
 (=> $x284 $x285)))))
 ))
 (let (($x282 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x287 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x289 (= ?x287 (_ bv0 32))))
 (let ((?x286 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x286 (_ bv0 32))))
 (= $x284 $x289))))))
 ))
 (let (($x299 (and $x282 $x288)))
 (let (($x197 (and $x299 $x203)))
 (let (($x259 (and $x197 $x263)))
 (let (($x8 (and $x259 $x146)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x179 (and $x56 $x8)))
 (let (($x328 (=> $x179 $x327)))
 (not $x328)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun Lambda25Var!2 () (_ BitVec 32)
    #x3fffffc2)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000004) #xf8
      #x00)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun Lambda25Var!2 () (_ BitVec 32)
    #x3ffffffe)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (= false true)))
 (let (($x172 (= $x132 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x310 (concat ?x309 (concat ?x134 (concat ?x136 ?x78)))))
 (let (($x318 (= input.dst.llvm-%m ?x310)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x122 (concat ?x157 (concat ?x154 ?x179)))))
 (let (($x81 (= input.dst.llvm-%n ?x131)))
 (let (($x319 (and $x81 $x318)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x315 (and $x20 $x319)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x214)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x210)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x195)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x216)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x207 $x145)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x193 $x88)))
 (let (($x156 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x7 $x140)))
 (let (($x83 (not $x15)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x6 $x143)))
 (let (($x40 (and (not $x11) $x83)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x254 $x222)))
 (let (($x264 (not $x241)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x226 $x247)))
 (let (($x22 (and (not $x229) $x264)))
 (let (($x317 (and (and (and (and (and (and $x22 $x40) $x61) $x14) $x156) $x24) $x213)))
 (let (($x323 (and (and (and $x317 $x208) $x217) $x315)))
 (let (($x324 (= $x323 true)))
 (let (($x325 (= $x324 true)))
 (let (($x326 (= $x325 true)))
 (let (($x220 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x327 (and $x220 $x326)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x328 (and $x228 $x327)))
 (let (($x221 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x248 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x248 (_ bv1 32))))
 (=> $x86 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x130 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x212 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x212 (_ bv1 32))))
 (let ((?x248 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x248 (_ bv1 32))))
 (= $x86 $x5))))))
 ))
 (let (($x245 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x256 (= false false)))
 (let ((?x248 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x248 (_ bv0 32))))
 (=> $x266 $x256)))))
 ))
 (let (($x253 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x212 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x212 (_ bv0 32))))
 (let ((?x248 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x248 (_ bv0 32))))
 (= $x266 $x259))))))
 ))
 (let (($x275 (and $x253 $x245)))
 (let (($x147 (and $x275 $x130)))
 (let (($x230 (and $x147 $x221)))
 (let (($x329 (and $x230 $x328)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x26 (and $x128 $x329)))
 (let (($x121 (=> $x26 $x172)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x132 (= false true)))
 (let (($x172 (= $x132 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x310 (concat ?x309 (concat ?x134 (concat ?x136 ?x78)))))
 (let (($x318 (= input.dst.llvm-%m ?x310)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x122 (concat ?x157 (concat ?x154 ?x179)))))
 (let (($x81 (= input.dst.llvm-%n ?x131)))
 (let (($x319 (and $x81 $x318)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x315 (and $x20 $x319)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x214)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x210)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x195)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x216)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x207 $x145)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x193 $x88)))
 (let (($x156 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x7 $x140)))
 (let (($x83 (not $x15)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x6 $x143)))
 (let (($x40 (and (not $x11) $x83)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x254 $x222)))
 (let (($x264 (not $x241)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x226 $x247)))
 (let (($x22 (and (not $x229) $x264)))
 (let (($x317 (and (and (and (and (and (and $x22 $x40) $x61) $x14) $x156) $x24) $x213)))
 (let (($x323 (and (and (and $x317 $x208) $x217) $x315)))
 (let (($x324 (= $x323 true)))
 (let (($x325 (= $x324 true)))
 (let (($x326 (= $x325 true)))
 (let (($x220 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x327 (and $x220 $x326)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x328 (and $x228 $x327)))
 (let (($x221 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x248 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x248 (_ bv1 32))))
 (=> $x86 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x130 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x212 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x212 (_ bv1 32))))
 (let ((?x248 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x248 (_ bv1 32))))
 (= $x86 $x5))))))
 ))
 (let (($x245 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x256 (= false false)))
 (let ((?x248 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x248 (_ bv0 32))))
 (=> $x266 $x256)))))
 ))
 (let (($x253 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x212 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x212 (_ bv0 32))))
 (let ((?x248 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x248 (_ bv0 32))))
 (= $x266 $x259))))))
 ))
 (let (($x275 (and $x253 $x245)))
 (let (($x147 (and $x275 $x130)))
 (let (($x230 (and $x147 $x221)))
 (let (($x329 (and $x230 $x328)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x26 (and $x128 $x329)))
 (let (($x121 (=> $x26 $x172)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00050020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00050023)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00050020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x32f962b0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4a9c5f10)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4a9c5f13)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x32f962b3)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4a9c5f10)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x32f962b0)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x307 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x383 (= $x307 false)))
 (let (($x384 (= $x383 true)))
 (let ((?x214 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x217 (bvneg ?x214)))
 (let (($x375 (= ?x217 input.dst.llvm-%n)))
 (let (($x376 (= $x375 true)))
 (let (($x377 (= $x376 true)))
 (let (($x371 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x372 (= $x371 true)))
 (let (($x373 (= $x372 true)))
 (let (($x366 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x367 (= $x366 true)))
 (let (($x368 (= $x367 true)))
 (let (($x369 (= $x368 true)))
 (let (($x361 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x362 (= $x361 true)))
 (let (($x363 (= $x362 true)))
 (let (($x364 (= $x363 true)))
 (let (($x356 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x357 (= $x356 true)))
 (let (($x358 (= $x357 true)))
 (let (($x359 (= $x358 true)))
 (let (($x351 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x352 (= $x351 true)))
 (let (($x353 (= $x352 true)))
 (let (($x354 (= $x353 true)))
 (let ((?x308 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x330 (bvadd input.dst.llvm-%m ?x308)))
 (let (($x341 (bvugt ?x330 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x335 (bvadd ?x330 (_ bv3 32))))
 (let (($x340 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x335)))
 (let (($x337 (bvugt ?x330 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x336 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x335)))
 (let (($x345 (or false (or false (and (and true (or $x336 $x337)) (or $x340 $x341))))))
 (let (($x347 (=> (bvule ?x330 (bvsub (bvadd ?x330 (_ bv4 32)) (_ bv1 32))) $x345)))
 (let (($x331 (=> (and $x307 (bvule ?x330 (bvsub (bvadd ?x330 (_ bv4 32)) (_ bv1 32)))) $x345)))
 (let (($x332 (= $x331 true)))
 (let (($x348 (= $x332 true)))
 (let (($x349 (= $x348 true)))
 (let (($x302 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x186 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x186))))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv2 32))) ?x173)))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv3 32))) ?x177)))
 (let ((?x118 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x118 (_ bv1 32))))
 (=> $x292 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x189)))))))))
 ))
 (let (($x51 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x62 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x87 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let ((?x118 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x118 (_ bv1 32))))
 (= $x292 (bvuge ?x87 (_ bv1 32))))))))
 ))
 (let (($x153 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x118 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x118 (_ bv0 32))))
 (=> $x112 $x58)))))
 ))
 (let (($x27 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x62 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x87 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let ((?x118 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x118 (_ bv0 32))))
 (= $x112 (= ?x87 (_ bv0 32))))))))
 ))
 (let (($x152 (and $x27 $x153)))
 (let (($x59 (and $x152 $x51)))
 (let (($x185 (and $x59 $x302)))
 (let (($x190 (= $x185 true)))
 (let (($x184 (= $x190 true)))
 (let (($x300 (= $x184 true)))
 (let (($x257 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x25 (= $x257 true)))
 (let (($x279 (= $x25 true)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x287)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x282)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let ((?x286 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x286)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (and $x271 $x204)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x281 $x201)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x329 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x328 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x328 $x329)))
 (let (($x132 (not $x26)))
 (let (($x326 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x325 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x327 (and $x325 $x326)))
 (let (($x121 (and (not $x327) $x132)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x310 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x310 $x318)))
 (let (($x315 (not $x319)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x107 $x78)))
 (let (($x324 (and (not $x35) $x315)))
 (let (($x267 (and (and (and (and (and (and $x324 $x121) $x146) $x8) $x203) $x56) $x284)))
 (let (($x255 (and $x267 $x274)))
 (let (($x263 (= $x255 true)))
 (let (($x276 (= $x263 true)))
 (let (($x272 (= $x276 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x131 (= $x119 true)))
 (let (($x81 (= $x131 true)))
 (let (($x9 (= $x81 true)))
 (let (($x157 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x36 (= $x157 true)))
 (let (($x154 (= $x36 true)))
 (let (($x179 (= $x154 true)))
 (let (($x100 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x37 (= $x100 true)))
 (let (($x122 (= $x37 true)))
 (let (($x160 (= $x122 true)))
 (let (($x322 (= ?x217 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x260 (= $x322 true)))
 (let (($x261 (= $x260 true)))
 (let ((?x213 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x317 (= (_ bv0 2) ?x213)))
 (let (($x210 (= $x317 true)))
 (let (($x208 (= $x210 true)))
 (let (($x158 (and $x208 $x261)))
 (let (($x74 (and $x158 $x160)))
 (let (($x168 (and $x74 $x179)))
 (let (($x309 (and $x168 $x9)))
 (let (($x170 (and $x309 $x272)))
 (let (($x246 (and $x170 $x279)))
 (let (($x303 (and $x246 $x300)))
 (let (($x350 (and $x303 $x349)))
 (let (($x355 (and $x350 $x354)))
 (let (($x360 (and $x355 $x359)))
 (let (($x365 (and $x360 $x364)))
 (let (($x370 (and $x365 $x369)))
 (let (($x374 (and $x370 $x373)))
 (let (($x378 (and $x374 $x377)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x379 (and $x24 $x378)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x380 (and $x216 $x379)))
 (let (($x193 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x226 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x226 (_ bv1 32))))
 (=> $x15 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x40 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x178 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x178 (_ bv1 32))))
 (let ((?x226 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x226 (_ bv1 32))))
 (= $x15 $x99))))))
 ))
 (let (($x222 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x226 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x226 (_ bv0 32))))
 (=> $x224 $x58)))))
 ))
 (let (($x229 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x178 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x178 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x226 (_ bv0 32))))
 (= $x224 $x225))))))
 ))
 (let (($x241 (and $x229 $x222)))
 (let (($x316 (and $x241 $x40)))
 (let (($x207 (and $x316 $x193)))
 (let (($x381 (and $x207 $x380)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x382 (and $x128 $x381)))
 (let (($x385 (=> $x382 $x384)))
 (not $x385))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x307 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x383 (= $x307 false)))
 (let (($x384 (= $x383 true)))
 (let ((?x214 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x217 (bvneg ?x214)))
 (let (($x375 (= ?x217 input.dst.llvm-%n)))
 (let (($x376 (= $x375 true)))
 (let (($x377 (= $x376 true)))
 (let (($x371 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x372 (= $x371 true)))
 (let (($x373 (= $x372 true)))
 (let (($x366 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x367 (= $x366 true)))
 (let (($x368 (= $x367 true)))
 (let (($x369 (= $x368 true)))
 (let (($x361 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x362 (= $x361 true)))
 (let (($x363 (= $x362 true)))
 (let (($x364 (= $x363 true)))
 (let (($x356 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x357 (= $x356 true)))
 (let (($x358 (= $x357 true)))
 (let (($x359 (= $x358 true)))
 (let (($x351 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x352 (= $x351 true)))
 (let (($x353 (= $x352 true)))
 (let (($x354 (= $x353 true)))
 (let ((?x308 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x330 (bvadd input.dst.llvm-%m ?x308)))
 (let (($x341 (bvugt ?x330 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x335 (bvadd ?x330 (_ bv3 32))))
 (let (($x340 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x335)))
 (let (($x337 (bvugt ?x330 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x336 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x335)))
 (let (($x345 (or false (or false (and (and true (or $x336 $x337)) (or $x340 $x341))))))
 (let (($x347 (=> (bvule ?x330 (bvsub (bvadd ?x330 (_ bv4 32)) (_ bv1 32))) $x345)))
 (let (($x331 (=> (and $x307 (bvule ?x330 (bvsub (bvadd ?x330 (_ bv4 32)) (_ bv1 32)))) $x345)))
 (let (($x332 (= $x331 true)))
 (let (($x348 (= $x332 true)))
 (let (($x349 (= $x348 true)))
 (let (($x302 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x186 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x186))))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv2 32))) ?x173)))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv3 32))) ?x177)))
 (let ((?x118 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x118 (_ bv1 32))))
 (=> $x292 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x189)))))))))
 ))
 (let (($x51 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x62 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x87 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let ((?x118 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x118 (_ bv1 32))))
 (= $x292 (bvuge ?x87 (_ bv1 32))))))))
 ))
 (let (($x153 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x118 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x118 (_ bv0 32))))
 (=> $x112 $x58)))))
 ))
 (let (($x27 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x62 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x87 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let ((?x118 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x118 (_ bv0 32))))
 (= $x112 (= ?x87 (_ bv0 32))))))))
 ))
 (let (($x152 (and $x27 $x153)))
 (let (($x59 (and $x152 $x51)))
 (let (($x185 (and $x59 $x302)))
 (let (($x190 (= $x185 true)))
 (let (($x184 (= $x190 true)))
 (let (($x300 (= $x184 true)))
 (let (($x257 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x25 (= $x257 true)))
 (let (($x279 (= $x25 true)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x287)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x282)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let ((?x286 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x286)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (and $x271 $x204)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x281 $x201)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x329 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x328 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x328 $x329)))
 (let (($x132 (not $x26)))
 (let (($x326 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x325 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x327 (and $x325 $x326)))
 (let (($x121 (and (not $x327) $x132)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x310 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x310 $x318)))
 (let (($x315 (not $x319)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x107 $x78)))
 (let (($x324 (and (not $x35) $x315)))
 (let (($x267 (and (and (and (and (and (and $x324 $x121) $x146) $x8) $x203) $x56) $x284)))
 (let (($x255 (and $x267 $x274)))
 (let (($x263 (= $x255 true)))
 (let (($x276 (= $x263 true)))
 (let (($x272 (= $x276 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x131 (= $x119 true)))
 (let (($x81 (= $x131 true)))
 (let (($x9 (= $x81 true)))
 (let (($x157 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x36 (= $x157 true)))
 (let (($x154 (= $x36 true)))
 (let (($x179 (= $x154 true)))
 (let (($x100 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x37 (= $x100 true)))
 (let (($x122 (= $x37 true)))
 (let (($x160 (= $x122 true)))
 (let (($x322 (= ?x217 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x260 (= $x322 true)))
 (let (($x261 (= $x260 true)))
 (let ((?x213 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x317 (= (_ bv0 2) ?x213)))
 (let (($x210 (= $x317 true)))
 (let (($x208 (= $x210 true)))
 (let (($x158 (and $x208 $x261)))
 (let (($x74 (and $x158 $x160)))
 (let (($x168 (and $x74 $x179)))
 (let (($x309 (and $x168 $x9)))
 (let (($x170 (and $x309 $x272)))
 (let (($x246 (and $x170 $x279)))
 (let (($x303 (and $x246 $x300)))
 (let (($x350 (and $x303 $x349)))
 (let (($x355 (and $x350 $x354)))
 (let (($x360 (and $x355 $x359)))
 (let (($x365 (and $x360 $x364)))
 (let (($x370 (and $x365 $x369)))
 (let (($x374 (and $x370 $x373)))
 (let (($x378 (and $x374 $x377)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x379 (and $x24 $x378)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x380 (and $x216 $x379)))
 (let (($x193 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x226 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x226 (_ bv1 32))))
 (=> $x15 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x40 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x178 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x178 (_ bv1 32))))
 (let ((?x226 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x226 (_ bv1 32))))
 (= $x15 $x99))))))
 ))
 (let (($x222 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x58 (= false false)))
 (let ((?x226 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x226 (_ bv0 32))))
 (=> $x224 $x58)))))
 ))
 (let (($x229 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x178 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x178 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x226 (_ bv0 32))))
 (= $x224 $x225))))))
 ))
 (let (($x241 (and $x229 $x222)))
 (let (($x316 (and $x241 $x40)))
 (let (($x207 (and $x316 $x193)))
 (let (($x381 (and $x207 $x380)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x382 (and $x128 $x381)))
 (let (($x385 (=> $x382 $x384)))
 (not $x385))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xef541c14)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf7a4d804)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfea41f10)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf7a4d807)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xef541c17)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf7a4d804)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xef541c14)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #xfea41f13 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xfea41f12 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xfea41f11 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xfea41f10 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00041844)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x09085840)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x800c2a04)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00041847)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x800c2a07)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00041844)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x800c2a04)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x09085843 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x09085842 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x09085841 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x09085840 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x178 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (not $x178)))
 (let (($x142 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x66 (not $x142)))
 (let (($x41 (or $x66 $x166)))
 (let (($x124 (= $x41 true)))
 (let (($x116 (= $x124 true)))
 (let ((?x31 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x150 (bvneg ?x31)))
 (let (($x159 (= ?x150 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x159 true)))
 (let (($x32 (= $x79 true)))
 (let ((?x293 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x293)))
 (let (($x28 (= ?x55 input.dst.llvm-%n)))
 (let (($x111 (= $x28 true)))
 (let (($x45 (= $x111 true)))
 (let (($x73 (= ?x55 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x103 (= $x73 true)))
 (let (($x105 (= $x103 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x90 (= $x38 true)))
 (let (($x148 (= $x90 true)))
 (let (($x77 (= $x148 true)))
 (let (($x60 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x97 (= $x60 true)))
 (let (($x13 (= $x97 true)))
 (let (($x42 (= $x13 true)))
 (let (($x46 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x52 (= $x46 true)))
 (let (($x54 (= $x52 true)))
 (let (($x53 (= $x54 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x44 (= $x151 true)))
 (let (($x102 (= $x44 true)))
 (let (($x63 (= $x102 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (= $x234 true)))
 (let (($x249 (= $x238 true)))
 (let (($x167 (= $x249 true)))
 (let (($x297 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x91 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x91))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv2 32))) ?x69)))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv3 32))) ?x30)))
 (let ((?x228 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x228 (_ bv1 32))))
 (=> $x101 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x133)))))))))
 ))
 (let (($x296 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x5 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x221 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let ((?x228 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x228 (_ bv1 32))))
 (= $x101 (bvuge ?x221 (_ bv1 32))))))))
 ))
 (let (($x22 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x321 (= false false)))
 (let ((?x228 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x228 (_ bv0 32))))
 (=> $x223 $x321)))))
 ))
 (let (($x220 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x5 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x221 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let ((?x228 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x228 (_ bv0 32))))
 (= $x223 (= ?x221 (_ bv0 32))))))))
 ))
 (let (($x6 (and $x220 $x22)))
 (let (($x138 (and $x6 $x296)))
 (let (($x106 (and $x138 $x297)))
 (let (($x95 (= $x106 true)))
 (let (($x232 (= $x95 true)))
 (let (($x235 (= $x232 true)))
 (let (($x300 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x303 (= $x300 true)))
 (let (($x306 (= $x303 true)))
 (let (($x307 (= $x306 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x302 (= $x301 true)))
 (let (($x185 (= $x302 true)))
 (let (($x190 (= $x185 true)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x186)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x237)))
 (let ((?x304 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x304)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x163)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x292 $x23)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x152 $x51)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x43 $x96)))
 (let (($x62 (not $x291)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x57 $x118)))
 (let (($x19 (and (not $x112) $x62)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x272 $x170)))
 (let (($x25 (not $x257)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x255 $x263)))
 (let (($x246 (and (not $x276) $x25)))
 (let (($x180 (and (and (and (and (and (and $x246 $x19) $x27) $x153) $x59) $x33) $x175)))
 (let (($x187 (and $x180 $x176)))
 (let (($x173 (= $x187 true)))
 (let (($x177 (= $x173 true)))
 (let (($x189 (= $x177 true)))
 (let ((?x284 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x267 (= (_ bv0 2) ?x284)))
 (let (($x287 (= $x267 true)))
 (let (($x274 (= $x287 true)))
 (let (($x305 (and $x274 $x189)))
 (let (($x184 (and $x305 $x190)))
 (let (($x308 (and $x184 $x307)))
 (let (($x269 (and $x308 $x235)))
 (let (($x85 (and $x269 $x167)))
 (let (($x270 (and $x85 $x63)))
 (let (($x48 (and $x270 $x53)))
 (let (($x126 (and $x48 $x42)))
 (let (($x149 (and $x126 $x77)))
 (let (($x68 (and $x149 $x105)))
 (let (($x120 (and $x68 $x45)))
 (let (($x92 (and $x120 $x32)))
 (let (($x206 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x47 (and $x206 $x92)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x89 (and $x299 $x47)))
 (let (($x204 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x136 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x136 (_ bv1 32))))
 (=> $x132 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x285 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x179 (_ bv1 32))))
 (let ((?x136 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x136 (_ bv1 32))))
 (= $x132 $x328))))))
 ))
 (let (($x319 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x321 (= false false)))
 (let ((?x136 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x136 (_ bv0 32))))
 (=> $x78 $x321)))))
 ))
 (let (($x323 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x179 (_ bv0 32))))
 (let ((?x136 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x136 (_ bv0 32))))
 (= $x78 $x131))))))
 ))
 (let (($x315 (and $x323 $x319)))
 (let (($x21 (and $x315 $x285)))
 (let (($x201 (and $x21 $x204)))
 (let (($x110 (and $x201 $x89)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x135 (and $x195 $x110)))
 (let ((?x244 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x262 (bvadd input.dst.llvm-%m ?x244)))
 (let (($x207 (bvugt ?x262 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x262 (_ bv3 32))))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x40 (bvugt ?x262 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x88 (or false (or false (and (and true (or $x83 $x40)) (or $x193 $x207))))))
 (let (($x314 (=> (bvule ?x262 (bvsub (bvadd ?x262 (_ bv4 32)) (_ bv1 32))) $x88)))
 (let (($x225 (=> (and $x178 (bvule ?x262 (bvsub (bvadd ?x262 (_ bv4 32)) (_ bv1 32)))) $x88)))
 (let (($x17 (and $x225 $x135)))
 (let (($x16 (=> $x17 $x116)))
 (not $x16)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x178 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (not $x178)))
 (let (($x142 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x66 (not $x142)))
 (let (($x41 (or $x66 $x166)))
 (let (($x124 (= $x41 true)))
 (let (($x116 (= $x124 true)))
 (let ((?x31 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x150 (bvneg ?x31)))
 (let (($x159 (= ?x150 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (= $x159 true)))
 (let (($x32 (= $x79 true)))
 (let ((?x293 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x293)))
 (let (($x28 (= ?x55 input.dst.llvm-%n)))
 (let (($x111 (= $x28 true)))
 (let (($x45 (= $x111 true)))
 (let (($x73 (= ?x55 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x103 (= $x73 true)))
 (let (($x105 (= $x103 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x90 (= $x38 true)))
 (let (($x148 (= $x90 true)))
 (let (($x77 (= $x148 true)))
 (let (($x60 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x97 (= $x60 true)))
 (let (($x13 (= $x97 true)))
 (let (($x42 (= $x13 true)))
 (let (($x46 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x52 (= $x46 true)))
 (let (($x54 (= $x52 true)))
 (let (($x53 (= $x54 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x44 (= $x151 true)))
 (let (($x102 (= $x44 true)))
 (let (($x63 (= $x102 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (= $x234 true)))
 (let (($x249 (= $x238 true)))
 (let (($x167 (= $x249 true)))
 (let (($x297 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x91 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x91))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv2 32))) ?x69)))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x91 (_ bv3 32))) ?x30)))
 (let ((?x228 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x228 (_ bv1 32))))
 (=> $x101 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x133)))))))))
 ))
 (let (($x296 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x5 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x221 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let ((?x228 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x228 (_ bv1 32))))
 (= $x101 (bvuge ?x221 (_ bv1 32))))))))
 ))
 (let (($x22 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x321 (= false false)))
 (let ((?x228 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x228 (_ bv0 32))))
 (=> $x223 $x321)))))
 ))
 (let (($x220 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x5 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x221 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let ((?x228 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x228 (_ bv0 32))))
 (= $x223 (= ?x221 (_ bv0 32))))))))
 ))
 (let (($x6 (and $x220 $x22)))
 (let (($x138 (and $x6 $x296)))
 (let (($x106 (and $x138 $x297)))
 (let (($x95 (= $x106 true)))
 (let (($x232 (= $x95 true)))
 (let (($x235 (= $x232 true)))
 (let (($x300 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x303 (= $x300 true)))
 (let (($x306 (= $x303 true)))
 (let (($x307 (= $x306 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x302 (= $x301 true)))
 (let (($x185 (= $x302 true)))
 (let (($x190 (= $x185 true)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x186)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x237)))
 (let ((?x304 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x304)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x163)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x292 $x23)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x152 $x51)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x43 $x96)))
 (let (($x62 (not $x291)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x57 $x118)))
 (let (($x19 (and (not $x112) $x62)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x272 $x170)))
 (let (($x25 (not $x257)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x255 $x263)))
 (let (($x246 (and (not $x276) $x25)))
 (let (($x180 (and (and (and (and (and (and $x246 $x19) $x27) $x153) $x59) $x33) $x175)))
 (let (($x187 (and $x180 $x176)))
 (let (($x173 (= $x187 true)))
 (let (($x177 (= $x173 true)))
 (let (($x189 (= $x177 true)))
 (let ((?x284 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x267 (= (_ bv0 2) ?x284)))
 (let (($x287 (= $x267 true)))
 (let (($x274 (= $x287 true)))
 (let (($x305 (and $x274 $x189)))
 (let (($x184 (and $x305 $x190)))
 (let (($x308 (and $x184 $x307)))
 (let (($x269 (and $x308 $x235)))
 (let (($x85 (and $x269 $x167)))
 (let (($x270 (and $x85 $x63)))
 (let (($x48 (and $x270 $x53)))
 (let (($x126 (and $x48 $x42)))
 (let (($x149 (and $x126 $x77)))
 (let (($x68 (and $x149 $x105)))
 (let (($x120 (and $x68 $x45)))
 (let (($x92 (and $x120 $x32)))
 (let (($x206 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x47 (and $x206 $x92)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x89 (and $x299 $x47)))
 (let (($x204 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x136 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x136 (_ bv1 32))))
 (=> $x132 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x285 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x179 (_ bv1 32))))
 (let ((?x136 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x136 (_ bv1 32))))
 (= $x132 $x328))))))
 ))
 (let (($x319 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x321 (= false false)))
 (let ((?x136 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x136 (_ bv0 32))))
 (=> $x78 $x321)))))
 ))
 (let (($x323 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x179 (_ bv0 32))))
 (let ((?x136 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x136 (_ bv0 32))))
 (= $x78 $x131))))))
 ))
 (let (($x315 (and $x323 $x319)))
 (let (($x21 (and $x315 $x285)))
 (let (($x201 (and $x21 $x204)))
 (let (($x110 (and $x201 $x89)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x135 (and $x195 $x110)))
 (let ((?x244 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x262 (bvadd input.dst.llvm-%m ?x244)))
 (let (($x207 (bvugt ?x262 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x262 (_ bv3 32))))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x40 (bvugt ?x262 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x88 (or false (or false (and (and true (or $x83 $x40)) (or $x193 $x207))))))
 (let (($x314 (=> (bvule ?x262 (bvsub (bvadd ?x262 (_ bv4 32)) (_ bv1 32))) $x88)))
 (let (($x225 (=> (and $x178 (bvule ?x262 (bvsub (bvadd ?x262 (_ bv4 32)) (_ bv1 32)))) $x88)))
 (let (($x17 (and $x225 $x135)))
 (let (($x16 (=> $x17 $x116)))
 (not $x16)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x408 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x409 (bvmul (_ bv4294967295 32) ?x408)))
 (let ((?x410 (bvneg ?x409)))
 (let (($x412 (= ?x410 ?x411)))
 (let (($x413 (= $x412 true)))
 (let ((?x395 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x396 (bvneg ?x395)))
 (let (($x397 (= ?x396 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x398 (= $x397 true)))
 (let (($x399 (= $x398 true)))
 (let (($x390 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x391 (= $x390 true)))
 (let (($x392 (= $x391 true)))
 (let (($x393 (= $x392 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x188 (= $x50 true)))
 (let (($x387 (= $x188 true)))
 (let (($x388 (= $x387 true)))
 (let (($x278 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x200 (= $x278 true)))
 (let (($x192 (= $x200 true)))
 (let (($x171 (= $x192 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x75 (= $x211 true)))
 (let (($x29 (= $x75 true)))
 (let (($x165 (= $x29 true)))
 (let (($x104 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x191 (= $x104 true)))
 (let (($x98 (= $x191 true)))
 (let (($x82 (= $x98 true)))
 (let (($x252 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x115 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x115))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv2 32))) ?x298)))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv3 32))) ?x129)))
 (let ((?x374 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x374 (_ bv1 32))))
 (=> $x385 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x295)))))))))
 ))
 (let (($x94 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x368 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x376 (ite $x368 (_ bv1 32) (_ bv0 32))))
 (let ((?x374 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x374 (_ bv1 32))))
 (= $x385 (bvuge ?x376 (_ bv1 32))))))))
 ))
 (let (($x378 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x374 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x374 (_ bv0 32))))
 (=> $x370 $x279)))))
 ))
 (let (($x369 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x368 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x376 (ite $x368 (_ bv1 32) (_ bv0 32))))
 (let ((?x374 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x374 (_ bv0 32))))
 (= $x370 (= ?x376 (_ bv0 32))))))))
 ))
 (let (($x338 (and $x369 $x378)))
 (let (($x127 (and $x338 $x94)))
 (let (($x290 (and $x127 $x252)))
 (let (($x283 (= $x290 true)))
 (let (($x250 (= $x283 true)))
 (let (($x70 (= $x250 true)))
 (let ((?x58 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x254 (bvadd input.dst.llvm-%m ?x58)))
 (let ((?x293 (bvsub ?x254 ?x58)))
 (let (($x105 (ite (bvsge ?x58 (_ bv0 32)) (bvuge ?x254 ?x293) (bvult ?x254 ?x293))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x149 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x38 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x90 (bvmul (_ bv4 64) ?x38)))
 (let ((?x148 ((_ extract 63 32) ?x90)))
 (let (($x137 (= ?x148 ?x149)))
 (let (($x68 (and $x137 $x105)))
 (let (($x42 (= (bvand ?x254 (_ bv4294967292 32)) ?x254)))
 (let (($x28 (and $x42 $x68)))
 (let (($x111 (= true $x28)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x45 (=> $x229 $x111)))
 (let (($x120 (= $x45 true)))
 (let (($x31 (= $x120 true)))
 (let (($x150 (= $x31 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x54 (= $x52 true)))
 (let (($x53 (= $x54 true)))
 (let (($x48 (= $x53 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x63 (= $x102 true)))
 (let (($x270 (= $x63 true)))
 (let (($x164 (= $x270 true)))
 (let (($x167 (= $x229 true)))
 (let (($x85 (= $x167 true)))
 (let (($x151 (= $x85 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x30)))
 (let ((?x242 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x242)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x240 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x355 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x240)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x239 $x355)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x91 $x65)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x22 $x6)))
 (let (($x72 (not $x101)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x39 $x220)))
 (let (($x296 (and (not $x264) $x72)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (and $x223 $x86)))
 (let (($x5 (not $x275)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x308 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x228 (and $x308 $x230)))
 (let (($x174 (and (not $x228) $x5)))
 (let (($x232 (and (and (and (and (and (and $x174 $x296) $x113) $x215) $x64) $x202) $x69)))
 (let (($x235 (and $x232 $x133)))
 (let (($x269 (= $x235 true)))
 (let (($x234 (= $x269 true)))
 (let (($x238 (= $x234 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x176)))
 (let (($x300 (= ?x187 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x303 (= $x300 true)))
 (let (($x306 (= $x303 true)))
 (let ((?x301 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x302 (= (_ bv0 2) ?x301)))
 (let (($x185 (= $x302 true)))
 (let (($x190 (= $x185 true)))
 (let (($x173 (= ?x187 input.dst.llvm-%n)))
 (let (($x177 (= $x173 true)))
 (let (($x189 (= $x177 true)))
 (let (($x184 (and $x189 $x190)))
 (let (($x307 (and $x184 $x306)))
 (let (($x249 (and $x307 $x238)))
 (let (($x44 (and $x249 $x151)))
 (let (($x46 (and $x44 $x164)))
 (let (($x60 (and $x46 $x48)))
 (let (($x159 (and $x60 $x150)))
 (let (($x93 (and $x159 $x70)))
 (let (($x161 (and $x93 $x82)))
 (let (($x205 (and $x161 $x165)))
 (let (($x125 (and $x205 $x171)))
 (let (($x389 (and $x125 $x388)))
 (let (($x394 (and $x389 $x393)))
 (let (($x400 (and $x394 $x399)))
 (let (($x180 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x402 (and (not $x180) $x400)))
 (let (($x237 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x403 (and $x237 $x402)))
 (let (($x304 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x404 (and $x304 $x403)))
 (let (($x51 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x274 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x274 (_ bv1 32))))
 (=> $x62 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x199 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x201 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x201 (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x274 (_ bv1 32))))
 (= $x62 $x43))))))
 ))
 (let (($x257 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x274 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x274 (_ bv0 32))))
 (=> $x255 $x279)))))
 ))
 (let (($x276 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x201 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x201 (_ bv0 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x274 (_ bv0 32))))
 (= $x255 $x197))))))
 ))
 (let (($x25 (and $x276 $x257)))
 (let (($x76 (and $x25 $x199)))
 (let (($x59 (and $x76 $x51)))
 (let (($x405 (and $x59 $x404)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x406 (and $x107 $x405)))
 (let (($x145 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x254 (_ bv3 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x156 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x316)))
 (let (($x247 (or false (or false (and (and true (or $x108 $x156)) (or $x216 $x145))))))
 (let (($x134 (=> (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32))) $x247)))
 (let (($x262 (=> (and $x229 (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32)))) $x247)))
 (let (($x407 (and $x262 $x406)))
 (let (($x414 (=> $x407 $x413)))
 (not $x414))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x408 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x409 (bvmul (_ bv4294967295 32) ?x408)))
 (let ((?x410 (bvneg ?x409)))
 (let (($x412 (= ?x410 ?x411)))
 (let (($x413 (= $x412 true)))
 (let ((?x395 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x396 (bvneg ?x395)))
 (let (($x397 (= ?x396 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x398 (= $x397 true)))
 (let (($x399 (= $x398 true)))
 (let (($x390 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x391 (= $x390 true)))
 (let (($x392 (= $x391 true)))
 (let (($x393 (= $x392 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x188 (= $x50 true)))
 (let (($x387 (= $x188 true)))
 (let (($x388 (= $x387 true)))
 (let (($x278 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x200 (= $x278 true)))
 (let (($x192 (= $x200 true)))
 (let (($x171 (= $x192 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x75 (= $x211 true)))
 (let (($x29 (= $x75 true)))
 (let (($x165 (= $x29 true)))
 (let (($x104 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x191 (= $x104 true)))
 (let (($x98 (= $x191 true)))
 (let (($x82 (= $x98 true)))
 (let (($x252 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x115 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x115))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv2 32))) ?x298)))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv3 32))) ?x129)))
 (let ((?x374 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x374 (_ bv1 32))))
 (=> $x385 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x295)))))))))
 ))
 (let (($x94 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x368 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x376 (ite $x368 (_ bv1 32) (_ bv0 32))))
 (let ((?x374 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x374 (_ bv1 32))))
 (= $x385 (bvuge ?x376 (_ bv1 32))))))))
 ))
 (let (($x378 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x374 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x374 (_ bv0 32))))
 (=> $x370 $x279)))))
 ))
 (let (($x369 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x368 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x376 (ite $x368 (_ bv1 32) (_ bv0 32))))
 (let ((?x374 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x374 (_ bv0 32))))
 (= $x370 (= ?x376 (_ bv0 32))))))))
 ))
 (let (($x338 (and $x369 $x378)))
 (let (($x127 (and $x338 $x94)))
 (let (($x290 (and $x127 $x252)))
 (let (($x283 (= $x290 true)))
 (let (($x250 (= $x283 true)))
 (let (($x70 (= $x250 true)))
 (let ((?x58 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x254 (bvadd input.dst.llvm-%m ?x58)))
 (let ((?x293 (bvsub ?x254 ?x58)))
 (let (($x105 (ite (bvsge ?x58 (_ bv0 32)) (bvuge ?x254 ?x293) (bvult ?x254 ?x293))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x149 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x38 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x90 (bvmul (_ bv4 64) ?x38)))
 (let ((?x148 ((_ extract 63 32) ?x90)))
 (let (($x137 (= ?x148 ?x149)))
 (let (($x68 (and $x137 $x105)))
 (let (($x42 (= (bvand ?x254 (_ bv4294967292 32)) ?x254)))
 (let (($x28 (and $x42 $x68)))
 (let (($x111 (= true $x28)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x45 (=> $x229 $x111)))
 (let (($x120 (= $x45 true)))
 (let (($x31 (= $x120 true)))
 (let (($x150 (= $x31 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x54 (= $x52 true)))
 (let (($x53 (= $x54 true)))
 (let (($x48 (= $x53 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x63 (= $x102 true)))
 (let (($x270 (= $x63 true)))
 (let (($x164 (= $x270 true)))
 (let (($x167 (= $x229 true)))
 (let (($x85 (= $x167 true)))
 (let (($x151 (= $x85 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x30)))
 (let ((?x242 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x242)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x240 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x355 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x240)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x239 $x355)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x91 $x65)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x22 $x6)))
 (let (($x72 (not $x101)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x39 $x220)))
 (let (($x296 (and (not $x264) $x72)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (and $x223 $x86)))
 (let (($x5 (not $x275)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x308 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x228 (and $x308 $x230)))
 (let (($x174 (and (not $x228) $x5)))
 (let (($x232 (and (and (and (and (and (and $x174 $x296) $x113) $x215) $x64) $x202) $x69)))
 (let (($x235 (and $x232 $x133)))
 (let (($x269 (= $x235 true)))
 (let (($x234 (= $x269 true)))
 (let (($x238 (= $x234 true)))
 (let ((?x176 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x176)))
 (let (($x300 (= ?x187 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x303 (= $x300 true)))
 (let (($x306 (= $x303 true)))
 (let ((?x301 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x302 (= (_ bv0 2) ?x301)))
 (let (($x185 (= $x302 true)))
 (let (($x190 (= $x185 true)))
 (let (($x173 (= ?x187 input.dst.llvm-%n)))
 (let (($x177 (= $x173 true)))
 (let (($x189 (= $x177 true)))
 (let (($x184 (and $x189 $x190)))
 (let (($x307 (and $x184 $x306)))
 (let (($x249 (and $x307 $x238)))
 (let (($x44 (and $x249 $x151)))
 (let (($x46 (and $x44 $x164)))
 (let (($x60 (and $x46 $x48)))
 (let (($x159 (and $x60 $x150)))
 (let (($x93 (and $x159 $x70)))
 (let (($x161 (and $x93 $x82)))
 (let (($x205 (and $x161 $x165)))
 (let (($x125 (and $x205 $x171)))
 (let (($x389 (and $x125 $x388)))
 (let (($x394 (and $x389 $x393)))
 (let (($x400 (and $x394 $x399)))
 (let (($x180 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x402 (and (not $x180) $x400)))
 (let (($x237 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x403 (and $x237 $x402)))
 (let (($x304 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x404 (and $x304 $x403)))
 (let (($x51 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x274 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x274 (_ bv1 32))))
 (=> $x62 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x199 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x201 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x201 (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x274 (_ bv1 32))))
 (= $x62 $x43))))))
 ))
 (let (($x257 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x274 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x274 (_ bv0 32))))
 (=> $x255 $x279)))))
 ))
 (let (($x276 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x201 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x201 (_ bv0 32))))
 (let ((?x274 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x274 (_ bv0 32))))
 (= $x255 $x197))))))
 ))
 (let (($x25 (and $x276 $x257)))
 (let (($x76 (and $x25 $x199)))
 (let (($x59 (and $x76 $x51)))
 (let (($x405 (and $x59 $x404)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x406 (and $x107 $x405)))
 (let (($x145 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x254 (_ bv3 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x156 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x316)))
 (let (($x247 (or false (or false (and (and true (or $x108 $x156)) (or $x216 $x145))))))
 (let (($x134 (=> (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32))) $x247)))
 (let (($x262 (=> (and $x229 (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32)))) $x247)))
 (let (($x407 (and $x262 $x406)))
 (let (($x414 (=> $x407 $x413)))
 (not $x414))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x253 (bvule ?x218 (_ bv3 32))))
 (let (($x256 (= $x253 true)))
 (let (($x265 (= $x256 true)))
 (let ((?x139 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x266 (bvneg ?x139)))
 (let (($x233 (= ?x266 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x233 true)))
 (let (($x162 (= $x289 true)))
 (let (($x251 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x130 (= $x251 true)))
 (let (($x147 (= $x130 true)))
 (let (($x259 (= $x147 true)))
 (let (($x382 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x141 (= $x382 true)))
 (let (($x80 (= $x141 true)))
 (let (($x18 (= $x80 true)))
 (let (($x343 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x384 (= $x343 true)))
 (let (($x379 (= $x384 true)))
 (let (($x381 (= $x379 true)))
 (let ((?x347 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x362 (= (_ bv0 32) ?x347)))
 (let ((?x361 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x331 (= (_ bv0 32) ?x361)))
 (let ((?x354 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x354)))
 (let ((?x356 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x352 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x356)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x353 (and $x357 $x352)))
 (let (($x360 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (and $x360 $x353)))
 (let (($x359 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x350 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x281 $x350)))
 (let (($x8 (not $x71)))
 (let (($x327 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x325 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (and $x325 $x327)))
 (let (($x146 (and (not $x172) $x8)))
 (let (($x326 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x309 (and $x124 $x326)))
 (let (($x310 (not $x309)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x66 $x166)))
 (let (($x324 (and (not $x41) $x310)))
 (let (($x336 (and (and (and (and (and (and $x324 $x146) $x277) $x359) $x351) $x358) $x331)))
 (let (($x337 (and $x336 $x362)))
 (let (($x339 (= $x337 true)))
 (let (($x340 (= $x339 true)))
 (let (($x342 (= $x340 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x89 (= $x17 true)))
 (let (($x110 (= $x89 true)))
 (let (($x135 (= $x110 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x42)))
 (let (($x158 (= ?x126 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x37 (= $x158 true)))
 (let (($x154 (= $x37 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x122 (= $x81 true)))
 (let (($x168 (= $x122 true)))
 (let (($x20 (= $x168 true)))
 (let (($x226 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x160 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x333 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x160))))
 (let ((?x346 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x160 (_ bv2 32))) ?x333)))
 (let ((?x169 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x160 (_ bv3 32))) ?x346)))
 (let ((?x409 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x409 (_ bv1 32))))
 (=> $x271 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x169)))))))))
 ))
 (let (($x286 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x405 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x406 (ite $x405 (_ bv1 32) (_ bv0 32))))
 (let ((?x409 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x409 (_ bv1 32))))
 (= $x271 (bvuge ?x406 (_ bv1 32))))))))
 ))
 (let (($x415 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x189 (= false false)))
 (let ((?x409 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (= ?x409 (_ bv0 32))))
 (=> $x410 $x189)))))
 ))
 (let (($x412 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x405 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x406 (ite $x405 (_ bv1 32) (_ bv0 32))))
 (let ((?x409 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (= ?x409 (_ bv0 32))))
 (= $x410 (= ?x406 (_ bv0 32))))))))
 ))
 (let (($x322 (and $x412 $x415)))
 (let (($x117 (and $x322 $x286)))
 (let (($x261 (and $x117 $x226)))
 (let (($x214 (= $x261 true)))
 (let (($x217 (= $x214 true)))
 (let (($x260 (= $x217 true)))
 (let ((?x137 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x55 (= (_ bv0 2) ?x137)))
 (let (($x293 (= $x55 true)))
 (let (($x73 (= $x293 true)))
 (let (($x38 (= ?x126 input.dst.llvm-%n)))
 (let (($x90 (= $x38 true)))
 (let (($x148 (= $x90 true)))
 (let ((?x254 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x15 (bvadd input.dst.llvm-%m ?x254)))
 (let ((?x44 (bvsub ?x15 ?x254)))
 (let (($x164 (ite (bvsge ?x254 (_ bv0 32)) (bvuge ?x15 ?x44) (bvult ?x15 ?x44))))
 (let (($x249 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x85 (ite $x249 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x269 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x234 (bvmul (_ bv4 64) ?x269)))
 (let ((?x238 ((_ extract 63 32) ?x234)))
 (let (($x151 (= ?x238 ?x85)))
 (let (($x46 (and $x151 $x164)))
 (let (($x133 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x52 (and $x133 $x46)))
 (let (($x54 (= true $x52)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (=> $x229 $x54)))
 (let (($x48 (= $x53 true)))
 (let (($x60 (= $x48 true)))
 (let (($x97 (= $x60 true)))
 (let (($x209 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x202 (= $x209 true)))
 (let (($x95 (= $x202 true)))
 (let (($x242 (= $x95 true)))
 (let (($x240 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x355 (= $x240 true)))
 (let (($x65 (= $x355 true)))
 (let (($x64 (= $x65 true)))
 (let (($x297 (= $x229 true)))
 (let (($x91 (= $x297 true)))
 (let (($x239 (= $x91 true)))
 (let (($x106 (and $x239 $x64)))
 (let (($x69 (and $x106 $x242)))
 (let (($x13 (and $x69 $x97)))
 (let (($x77 (and $x13 $x148)))
 (let (($x103 (and $x77 $x73)))
 (let (($x119 (and $x103 $x260)))
 (let (($x100 (and $x119 $x20)))
 (let (($x9 (and $x100 $x154)))
 (let (($x142 (and $x9 $x135)))
 (let (($x341 (and $x142 $x342)))
 (let (($x380 (and $x341 $x381)))
 (let (($x155 (and $x380 $x18)))
 (let (($x212 (and $x155 $x259)))
 (let (($x219 (and $x212 $x162)))
 (let (($x215 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x258 (and (not $x215) $x219)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x248 (and $x67 $x258)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x11 (and $x84 $x248)))
 (let (($x101 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x176 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x176 (_ bv1 32))))
 (=> $x228 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x223 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x59 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x59 (_ bv1 32))))
 (let ((?x176 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x176 (_ bv1 32))))
 (= $x228 $x307))))))
 ))
 (let (($x302 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x189 (= false false)))
 (let ((?x176 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x176 (_ bv0 32))))
 (=> $x187 $x189)))))
 ))
 (let (($x177 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x59 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x59 (_ bv0 32))))
 (let ((?x176 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x176 (_ bv0 32))))
 (= $x187 $x33))))))
 ))
 (let (($x185 (and $x177 $x302)))
 (let (($x86 (and $x185 $x223)))
 (let (($x72 (and $x86 $x101)))
 (let (($x7 (and $x72 $x11)))
 (let (($x287 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x245 (and $x287 $x7)))
 (let (($x225 (bvugt ?x15 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd ?x15 (_ bv3 32))))
 (let (($x314 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x207 (bvugt ?x15 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x222 (or false (or false (and (and true (or $x311 $x207)) (or $x314 $x225))))))
 (let (($x267 (=> (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32))) $x222)))
 (let (($x24 (=> (and $x229 (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32)))) $x222)))
 (let (($x227 (and $x24 $x245)))
 (let (($x143 (=> $x227 $x265)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x253 (bvule ?x218 (_ bv3 32))))
 (let (($x256 (= $x253 true)))
 (let (($x265 (= $x256 true)))
 (let ((?x139 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x266 (bvneg ?x139)))
 (let (($x233 (= ?x266 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x233 true)))
 (let (($x162 (= $x289 true)))
 (let (($x251 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x130 (= $x251 true)))
 (let (($x147 (= $x130 true)))
 (let (($x259 (= $x147 true)))
 (let (($x382 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x141 (= $x382 true)))
 (let (($x80 (= $x141 true)))
 (let (($x18 (= $x80 true)))
 (let (($x343 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x384 (= $x343 true)))
 (let (($x379 (= $x384 true)))
 (let (($x381 (= $x379 true)))
 (let ((?x347 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x362 (= (_ bv0 32) ?x347)))
 (let ((?x361 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x331 (= (_ bv0 32) ?x361)))
 (let ((?x354 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x354)))
 (let ((?x356 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x352 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x356)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x353 (and $x357 $x352)))
 (let (($x360 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (and $x360 $x353)))
 (let (($x359 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x350 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x281 $x350)))
 (let (($x8 (not $x71)))
 (let (($x327 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x325 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (and $x325 $x327)))
 (let (($x146 (and (not $x172) $x8)))
 (let (($x326 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x309 (and $x124 $x326)))
 (let (($x310 (not $x309)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x66 $x166)))
 (let (($x324 (and (not $x41) $x310)))
 (let (($x336 (and (and (and (and (and (and $x324 $x146) $x277) $x359) $x351) $x358) $x331)))
 (let (($x337 (and $x336 $x362)))
 (let (($x339 (= $x337 true)))
 (let (($x340 (= $x339 true)))
 (let (($x342 (= $x340 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x89 (= $x17 true)))
 (let (($x110 (= $x89 true)))
 (let (($x135 (= $x110 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x42)))
 (let (($x158 (= ?x126 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x37 (= $x158 true)))
 (let (($x154 (= $x37 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x122 (= $x81 true)))
 (let (($x168 (= $x122 true)))
 (let (($x20 (= $x168 true)))
 (let (($x226 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x160 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x333 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x160))))
 (let ((?x346 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x160 (_ bv2 32))) ?x333)))
 (let ((?x169 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x160 (_ bv3 32))) ?x346)))
 (let ((?x409 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x409 (_ bv1 32))))
 (=> $x271 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x169)))))))))
 ))
 (let (($x286 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x405 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x406 (ite $x405 (_ bv1 32) (_ bv0 32))))
 (let ((?x409 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x409 (_ bv1 32))))
 (= $x271 (bvuge ?x406 (_ bv1 32))))))))
 ))
 (let (($x415 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x189 (= false false)))
 (let ((?x409 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (= ?x409 (_ bv0 32))))
 (=> $x410 $x189)))))
 ))
 (let (($x412 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x405 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x406 (ite $x405 (_ bv1 32) (_ bv0 32))))
 (let ((?x409 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x410 (= ?x409 (_ bv0 32))))
 (= $x410 (= ?x406 (_ bv0 32))))))))
 ))
 (let (($x322 (and $x412 $x415)))
 (let (($x117 (and $x322 $x286)))
 (let (($x261 (and $x117 $x226)))
 (let (($x214 (= $x261 true)))
 (let (($x217 (= $x214 true)))
 (let (($x260 (= $x217 true)))
 (let ((?x137 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x55 (= (_ bv0 2) ?x137)))
 (let (($x293 (= $x55 true)))
 (let (($x73 (= $x293 true)))
 (let (($x38 (= ?x126 input.dst.llvm-%n)))
 (let (($x90 (= $x38 true)))
 (let (($x148 (= $x90 true)))
 (let ((?x254 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x15 (bvadd input.dst.llvm-%m ?x254)))
 (let ((?x44 (bvsub ?x15 ?x254)))
 (let (($x164 (ite (bvsge ?x254 (_ bv0 32)) (bvuge ?x15 ?x44) (bvult ?x15 ?x44))))
 (let (($x249 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x85 (ite $x249 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x269 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x234 (bvmul (_ bv4 64) ?x269)))
 (let ((?x238 ((_ extract 63 32) ?x234)))
 (let (($x151 (= ?x238 ?x85)))
 (let (($x46 (and $x151 $x164)))
 (let (($x133 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x52 (and $x133 $x46)))
 (let (($x54 (= true $x52)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (=> $x229 $x54)))
 (let (($x48 (= $x53 true)))
 (let (($x60 (= $x48 true)))
 (let (($x97 (= $x60 true)))
 (let (($x209 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x202 (= $x209 true)))
 (let (($x95 (= $x202 true)))
 (let (($x242 (= $x95 true)))
 (let (($x240 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x355 (= $x240 true)))
 (let (($x65 (= $x355 true)))
 (let (($x64 (= $x65 true)))
 (let (($x297 (= $x229 true)))
 (let (($x91 (= $x297 true)))
 (let (($x239 (= $x91 true)))
 (let (($x106 (and $x239 $x64)))
 (let (($x69 (and $x106 $x242)))
 (let (($x13 (and $x69 $x97)))
 (let (($x77 (and $x13 $x148)))
 (let (($x103 (and $x77 $x73)))
 (let (($x119 (and $x103 $x260)))
 (let (($x100 (and $x119 $x20)))
 (let (($x9 (and $x100 $x154)))
 (let (($x142 (and $x9 $x135)))
 (let (($x341 (and $x142 $x342)))
 (let (($x380 (and $x341 $x381)))
 (let (($x155 (and $x380 $x18)))
 (let (($x212 (and $x155 $x259)))
 (let (($x219 (and $x212 $x162)))
 (let (($x215 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x258 (and (not $x215) $x219)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x248 (and $x67 $x258)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x11 (and $x84 $x248)))
 (let (($x101 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x176 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x176 (_ bv1 32))))
 (=> $x228 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x223 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x59 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x59 (_ bv1 32))))
 (let ((?x176 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x176 (_ bv1 32))))
 (= $x228 $x307))))))
 ))
 (let (($x302 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x189 (= false false)))
 (let ((?x176 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x176 (_ bv0 32))))
 (=> $x187 $x189)))))
 ))
 (let (($x177 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x59 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x59 (_ bv0 32))))
 (let ((?x176 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x176 (_ bv0 32))))
 (= $x187 $x33))))))
 ))
 (let (($x185 (and $x177 $x302)))
 (let (($x86 (and $x185 $x223)))
 (let (($x72 (and $x86 $x101)))
 (let (($x7 (and $x72 $x11)))
 (let (($x287 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x245 (and $x287 $x7)))
 (let (($x225 (bvugt ?x15 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd ?x15 (_ bv3 32))))
 (let (($x314 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x207 (bvugt ?x15 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x222 (or false (or false (and (and true (or $x311 $x207)) (or $x314 $x225))))))
 (let (($x267 (=> (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32))) $x222)))
 (let (($x24 (=> (and $x229 (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32)))) $x222)))
 (let (($x227 (and $x24 $x245)))
 (let (($x143 (=> $x227 $x265)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00580204)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00180208)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00580207)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0018020b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00580204)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00180208)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x20001000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd1000004)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x40fffff4)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd1000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x20001003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd1000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x20001000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00080000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00080000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x40fffff7 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x40fffff6 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x40fffff5 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x40fffff4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x57 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x87 (bvule ?x57 (_ bv4 32))))
 (let (($x27 (= $x87 true)))
 (let (($x153 (= $x27 true)))
 (let ((?x132 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x285 (bvneg ?x132)))
 (let (($x299 (= ?x285 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x282 (= $x299 true)))
 (let (($x284 (= $x282 true)))
 (let (($x206 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x203 (= $x206 true)))
 (let (($x204 (= $x203 true)))
 (let (($x328 (= $x204 true)))
 (let (($x35 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x323 (= $x35 true)))
 (let (($x318 (= $x323 true)))
 (let (($x315 (= $x318 true)))
 (let (($x136 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x78 (= $x136 true)))
 (let (($x179 (= $x78 true)))
 (let (($x131 (= $x179 true)))
 (let ((?x399 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x400 (= (_ bv0 32) ?x399)))
 (let ((?x396 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x398 (= (_ bv0 32) ?x396)))
 (let ((?x395 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x397 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x395)))
 (let ((?x391 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x392 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x391)))
 (let (($x390 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x393 (and $x390 $x392)))
 (let (($x388 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (and $x388 $x393)))
 (let (($x389 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x200 $x192)))
 (let (($x205 (not $x165)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x75 $x125)))
 (let (($x278 (and (not $x50) $x205)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x93 $x191)))
 (let (($x98 (not $x104)))
 (let (($x367 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x370 $x367)))
 (let (($x211 (and (not $x161) $x98)))
 (let (($x349 (and (and (and (and (and (and $x211 $x278) $x188) $x389) $x394) $x397) $x398)))
 (let (($x128 (and $x349 $x400)))
 (let (($x32 (= $x128 true)))
 (let (($x79 (= $x32 true)))
 (let (($x92 (= $x79 true)))
 (let (($x120 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x31 (= $x120 true)))
 (let (($x159 (= $x31 true)))
 (let (($x373 (= $x159 true)))
 (let ((?x208 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x208)))
 (let (($x290 (= ?x74 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x70 (= $x290 true)))
 (let (($x150 (= $x70 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (= $x252 true)))
 (let (($x295 (= $x129 true)))
 (let (($x298 (= $x295 true)))
 (let (($x313 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x338 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x127))))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv2 32))) ?x338)))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv3 32))) ?x268)))
 (let ((?x253 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x253 (_ bv1 32))))
 (=> $x99 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x34)))))))))
 ))
 (let (($x257 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x7 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x245 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let ((?x253 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x253 (_ bv1 32))))
 (= $x99 (bvuge ?x245 (_ bv1 32))))))))
 ))
 (let (($x371 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x65 (= false false)))
 (let ((?x253 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x253 (_ bv0 32))))
 (=> $x256 $x65)))))
 ))
 (let (($x143 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x7 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x245 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let ((?x253 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x253 (_ bv0 32))))
 (= $x256 (= ?x245 (_ bv0 32))))))))
 ))
 (let (($x368 (and $x143 $x371)))
 (let (($x263 (and $x368 $x257)))
 (let (($x273 (and $x263 $x313)))
 (let (($x14 (= $x273 true)))
 (let (($x283 (= $x14 true)))
 (let (($x250 (= $x283 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x261 (= (_ bv0 2) ?x226)))
 (let (($x214 (= $x261 true)))
 (let (($x217 (= $x214 true)))
 (let (($x333 (= ?x74 input.dst.llvm-%n)))
 (let (($x346 (= $x333 true)))
 (let (($x169 (= $x346 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x123 (bvsub ?x83 ?x15)))
 (let (($x369 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x83 ?x123) (bvult ?x83 ?x123))))
 (let (($x415 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x271 (ite $x415 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x411 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x412 (bvmul (_ bv4 64) ?x411)))
 (let ((?x414 ((_ extract 63 32) ?x412)))
 (let (($x21 (= ?x414 ?x271)))
 (let (($x182 (and $x21 $x369)))
 (let (($x406 (= (bvand ?x83 (_ bv4294967292 32)) ?x83)))
 (let (($x160 (and $x406 $x182)))
 (let (($x320 (= true $x160)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x157 (=> $x229 $x320)))
 (let (($x94 (= $x157 true)))
 (let (($x334 (= $x94 true)))
 (let (($x330 (= $x334 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x408 (= $x103 true)))
 (let (($x409 (= $x408 true)))
 (let (($x410 (= $x409 true)))
 (let (($x149 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x137 (= $x149 true)))
 (let (($x55 (= $x137 true)))
 (let (($x293 (= $x55 true)))
 (let (($x90 (= $x229 true)))
 (let (($x148 (= $x90 true)))
 (let (($x77 (= $x148 true)))
 (let (($x73 (and $x77 $x293)))
 (let (($x404 (and $x73 $x410)))
 (let (($x210 (and $x404 $x330)))
 (let (($x36 (and $x210 $x169)))
 (let (($x260 (and $x36 $x217)))
 (let (($x280 (and $x260 $x250)))
 (let (($x194 (and $x280 $x298)))
 (let (($x45 (and $x194 $x150)))
 (let (($x374 (and $x45 $x373)))
 (let (($x47 (and $x374 $x92)))
 (let (($x319 (and $x47 $x131)))
 (let (($x56 (and $x319 $x315)))
 (let (($x121 (and $x56 $x328)))
 (let (($x272 (and $x121 $x284)))
 (let (($x38 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x49 (and (not $x38) $x272)))
 (let (($x42 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x10 (and $x42 $x49)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x96 (and $x60 $x10)))
 (let (($x54 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x91 (_ bv1 32))))
 (=> $x234 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x249 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x72 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x72 (_ bv1 32))))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x91 (_ bv1 32))))
 (= $x234 $x133))))))
 ))
 (let (($x209 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x65 (= false false)))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x91 (_ bv0 32))))
 (=> $x239 $x65)))))
 ))
 (let (($x355 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x72 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x72 (_ bv0 32))))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x91 (_ bv0 32))))
 (= $x239 $x138))))))
 ))
 (let (($x202 (and $x355 $x209)))
 (let (($x167 (and $x202 $x249)))
 (let (($x53 (and $x167 $x54)))
 (let (($x291 (and $x53 $x96)))
 (let (($x186 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x118 (and $x186 $x291)))
 (let (($x262 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x216 (bvadd ?x83 (_ bv3 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x216)))
 (let (($x145 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x216)))
 (let (($x195 (or false (or false (and (and true (or $x196 $x145)) (or $x134 $x262))))))
 (let (($x401 (=> (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32))) $x195)))
 (let (($x316 (=> (and $x229 (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32)))) $x195)))
 (let (($x112 (and $x316 $x118)))
 (let (($x183 (=> $x112 $x153)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x57 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x87 (bvule ?x57 (_ bv4 32))))
 (let (($x27 (= $x87 true)))
 (let (($x153 (= $x27 true)))
 (let ((?x132 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x285 (bvneg ?x132)))
 (let (($x299 (= ?x285 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x282 (= $x299 true)))
 (let (($x284 (= $x282 true)))
 (let (($x206 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x203 (= $x206 true)))
 (let (($x204 (= $x203 true)))
 (let (($x328 (= $x204 true)))
 (let (($x35 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x323 (= $x35 true)))
 (let (($x318 (= $x323 true)))
 (let (($x315 (= $x318 true)))
 (let (($x136 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x78 (= $x136 true)))
 (let (($x179 (= $x78 true)))
 (let (($x131 (= $x179 true)))
 (let ((?x399 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x400 (= (_ bv0 32) ?x399)))
 (let ((?x396 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x398 (= (_ bv0 32) ?x396)))
 (let ((?x395 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x397 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x395)))
 (let ((?x391 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x392 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x391)))
 (let (($x390 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x393 (and $x390 $x392)))
 (let (($x388 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (and $x388 $x393)))
 (let (($x389 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x200 $x192)))
 (let (($x205 (not $x165)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x75 $x125)))
 (let (($x278 (and (not $x50) $x205)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x93 $x191)))
 (let (($x98 (not $x104)))
 (let (($x367 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x370 $x367)))
 (let (($x211 (and (not $x161) $x98)))
 (let (($x349 (and (and (and (and (and (and $x211 $x278) $x188) $x389) $x394) $x397) $x398)))
 (let (($x128 (and $x349 $x400)))
 (let (($x32 (= $x128 true)))
 (let (($x79 (= $x32 true)))
 (let (($x92 (= $x79 true)))
 (let (($x120 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x31 (= $x120 true)))
 (let (($x159 (= $x31 true)))
 (let (($x373 (= $x159 true)))
 (let ((?x208 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x208)))
 (let (($x290 (= ?x74 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x70 (= $x290 true)))
 (let (($x150 (= $x70 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (= $x252 true)))
 (let (($x295 (= $x129 true)))
 (let (($x298 (= $x295 true)))
 (let (($x313 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x338 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x127))))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv2 32))) ?x338)))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv3 32))) ?x268)))
 (let ((?x253 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x253 (_ bv1 32))))
 (=> $x99 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x34)))))))))
 ))
 (let (($x257 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x7 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x245 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let ((?x253 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x253 (_ bv1 32))))
 (= $x99 (bvuge ?x245 (_ bv1 32))))))))
 ))
 (let (($x371 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x65 (= false false)))
 (let ((?x253 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x253 (_ bv0 32))))
 (=> $x256 $x65)))))
 ))
 (let (($x143 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x7 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x245 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let ((?x253 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x253 (_ bv0 32))))
 (= $x256 (= ?x245 (_ bv0 32))))))))
 ))
 (let (($x368 (and $x143 $x371)))
 (let (($x263 (and $x368 $x257)))
 (let (($x273 (and $x263 $x313)))
 (let (($x14 (= $x273 true)))
 (let (($x283 (= $x14 true)))
 (let (($x250 (= $x283 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x261 (= (_ bv0 2) ?x226)))
 (let (($x214 (= $x261 true)))
 (let (($x217 (= $x214 true)))
 (let (($x333 (= ?x74 input.dst.llvm-%n)))
 (let (($x346 (= $x333 true)))
 (let (($x169 (= $x346 true)))
 (let ((?x15 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvadd input.dst.llvm-%m ?x15)))
 (let ((?x123 (bvsub ?x83 ?x15)))
 (let (($x369 (ite (bvsge ?x15 (_ bv0 32)) (bvuge ?x83 ?x123) (bvult ?x83 ?x123))))
 (let (($x415 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x271 (ite $x415 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x411 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x412 (bvmul (_ bv4 64) ?x411)))
 (let ((?x414 ((_ extract 63 32) ?x412)))
 (let (($x21 (= ?x414 ?x271)))
 (let (($x182 (and $x21 $x369)))
 (let (($x406 (= (bvand ?x83 (_ bv4294967292 32)) ?x83)))
 (let (($x160 (and $x406 $x182)))
 (let (($x320 (= true $x160)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x157 (=> $x229 $x320)))
 (let (($x94 (= $x157 true)))
 (let (($x334 (= $x94 true)))
 (let (($x330 (= $x334 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x408 (= $x103 true)))
 (let (($x409 (= $x408 true)))
 (let (($x410 (= $x409 true)))
 (let (($x149 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x137 (= $x149 true)))
 (let (($x55 (= $x137 true)))
 (let (($x293 (= $x55 true)))
 (let (($x90 (= $x229 true)))
 (let (($x148 (= $x90 true)))
 (let (($x77 (= $x148 true)))
 (let (($x73 (and $x77 $x293)))
 (let (($x404 (and $x73 $x410)))
 (let (($x210 (and $x404 $x330)))
 (let (($x36 (and $x210 $x169)))
 (let (($x260 (and $x36 $x217)))
 (let (($x280 (and $x260 $x250)))
 (let (($x194 (and $x280 $x298)))
 (let (($x45 (and $x194 $x150)))
 (let (($x374 (and $x45 $x373)))
 (let (($x47 (and $x374 $x92)))
 (let (($x319 (and $x47 $x131)))
 (let (($x56 (and $x319 $x315)))
 (let (($x121 (and $x56 $x328)))
 (let (($x272 (and $x121 $x284)))
 (let (($x38 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x49 (and (not $x38) $x272)))
 (let (($x42 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x10 (and $x42 $x49)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x96 (and $x60 $x10)))
 (let (($x54 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x91 (_ bv1 32))))
 (=> $x234 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x249 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x72 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x72 (_ bv1 32))))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x91 (_ bv1 32))))
 (= $x234 $x133))))))
 ))
 (let (($x209 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x65 (= false false)))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x91 (_ bv0 32))))
 (=> $x239 $x65)))))
 ))
 (let (($x355 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x72 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x72 (_ bv0 32))))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x91 (_ bv0 32))))
 (= $x239 $x138))))))
 ))
 (let (($x202 (and $x355 $x209)))
 (let (($x167 (and $x202 $x249)))
 (let (($x53 (and $x167 $x54)))
 (let (($x291 (and $x53 $x96)))
 (let (($x186 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x118 (and $x186 $x291)))
 (let (($x262 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x216 (bvadd ?x83 (_ bv3 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x216)))
 (let (($x145 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x216)))
 (let (($x195 (or false (or false (and (and true (or $x196 $x145)) (or $x134 $x262))))))
 (let (($x401 (=> (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32))) $x195)))
 (let (($x316 (=> (and $x229 (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32)))) $x195)))
 (let (($x112 (and $x316 $x118)))
 (let (($x183 (=> $x112 $x153)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00600014)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xf2183ff0)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x04400648)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00600017)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0440064b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00600014)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x04400648)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xf2183ff3 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xf2183ff2 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xf2183ff1 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xf2183ff0 (bvmul #x00000004 x!0))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x05fd4400)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000081)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x12dc9404)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xdacfd3e4)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x12dc9407)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x05fd4403)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x12dc9404)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x05fd4400)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000081)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000081)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xdacfd3e7 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xdacfd3e6 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xdacfd3e5 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xdacfd3e4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x190 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x184 (bvule ?x190 (_ bv4294967294 32))))
 (let (($x300 (= $x184 true)))
 (let (($x39 (= $x300 true)))
 (let ((?x25 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x62 (bvneg ?x25)))
 (let (($x43 (= ?x62 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x43 true)))
 (let (($x180 (= $x175 true)))
 (let (($x76 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x292 (= $x76 true)))
 (let (($x163 (= $x292 true)))
 (let (($x276 (= $x163 true)))
 (let (($x274 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x111 (= $x274 true)))
 (let (($x255 (= $x111 true)))
 (let (($x201 (= $x255 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x139)))
 (let ((?x259 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x259)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x141 $x155)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (and $x381 $x18)))
 (let (($x343 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x341 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x337 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x380 (and $x337 $x339)))
 (let (($x382 (not $x380)))
 (let (($x336 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x361 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x347 (and $x361 $x336)))
 (let (($x379 (and (not $x347) $x382)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x17 $x89)))
 (let (($x362 (not $x110)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x158 $x154)))
 (let (($x331 (and (not $x9) $x362)))
 (let (($x140 (and (and (and (and (and (and $x331 $x379) $x341) $x343) $x251) $x147) $x212)))
 (let (($x375 (and $x140 $x233)))
 (let (($x224 (= $x375 true)))
 (let (($x105 (= $x224 true)))
 (let (($x68 (= $x105 true)))
 (let (($x351 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x358 (= $x351 true)))
 (let (($x37 (= $x358 true)))
 (let (($x20 (= $x37 true)))
 (let ((?x327 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x386 (bvneg ?x327)))
 (let (($x360 (= ?x386 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x357 (= $x360 true)))
 (let (($x365 (= $x357 true)))
 (let (($x359 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x372 (= $x359 true)))
 (let (($x354 (= $x372 true)))
 (let (($x352 (= $x354 true)))
 (let (($x146 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x270 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x270))))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv2 32))) ?x172)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv3 32))) ?x324)))
 (let ((?x291 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x291 (_ bv1 32))))
 (=> $x86 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x281)))))))))
 ))
 (let (($x22 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x49 (ite $x272 (_ bv1 32) (_ bv0 32))))
 (let ((?x291 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x291 (_ bv1 32))))
 (= $x86 (bvuge ?x49 (_ bv1 32))))))))
 ))
 (let (($x153 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x291 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x291 (_ bv0 32))))
 (=> $x118 $x55)))))
 ))
 (let (($x57 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x49 (ite $x272 (_ bv1 32) (_ bv0 32))))
 (let ((?x291 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x291 (_ bv0 32))))
 (= $x118 (= ?x49 (_ bv0 32))))))))
 ))
 (let (($x183 (and $x57 $x153)))
 (let (($x6 (and $x183 $x22)))
 (let (($x329 (and $x6 $x146)))
 (let (($x364 (= $x329 true)))
 (let (($x277 (= $x364 true)))
 (let (($x363 (= $x277 true)))
 (let ((?x268 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x34 (= (_ bv0 2) ?x268)))
 (let (($x317 (= $x34 true)))
 (let (($x294 (= $x317 true)))
 (let (($x345 (= ?x386 input.dst.llvm-%n)))
 (let (($x385 (= $x345 true)))
 (let (($x383 (= $x385 true)))
 (let ((?x83 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x108 (bvadd input.dst.llvm-%m ?x83)))
 (let ((?x371 (bvsub ?x108 ?x83)))
 (let (($x321 (ite (bvsge ?x83 (_ bv0 32)) (bvuge ?x108 ?x371) (bvult ?x108 ?x371))))
 (let (($x227 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x143 (ite $x227 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvmul (_ bv4 64) ?x248)))
 (let ((?x245 ((_ extract 63 32) ?x7)))
 (let (($x366 (= ?x245 ?x143)))
 (let (($x257 (and $x366 $x321)))
 (let (($x256 (= (bvand ?x108 (_ bv4294967292 32)) ?x108)))
 (let (($x263 (and $x256 $x257)))
 (let (($x236 (= true $x263)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x12 (=> $x229 $x236)))
 (let (($x115 (= $x12 true)))
 (let (($x127 (= $x115 true)))
 (let (($x376 (= $x127 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x226 true)))
 (let (($x214 (= $x261 true)))
 (let (($x217 (= $x214 true)))
 (let (($x346 (= $x229 true)))
 (let (($x169 (= $x346 true)))
 (let (($x36 (= $x169 true)))
 (let (($x260 (and $x36 $x217)))
 (let (($x377 (and $x260 $x376)))
 (let (($x243 (and $x377 $x383)))
 (let (($x313 (and $x243 $x294)))
 (let (($x288 (and $x313 $x363)))
 (let (($x353 (and $x288 $x352)))
 (let (($x356 (and $x353 $x365)))
 (let (($x100 (and $x356 $x20)))
 (let (($x28 (and $x100 $x68)))
 (let (($x197 (and $x28 $x201)))
 (let (($x170 (and $x197 $x276)))
 (let (($x304 (and $x170 $x180)))
 (let (($x333 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x199 (and (not $x333) $x304)))
 (let (($x208 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x198 (and $x208 $x199)))
 (let (($x334 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x19 (and $x334 $x198)))
 (let (($x320 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x148 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x148 (_ bv1 32))))
 (=> $x412 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x415 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x53 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x53 (_ bv1 32))))
 (let ((?x148 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x148 (_ bv1 32))))
 (= $x412 $x406))))))
 ))
 (let (($x103 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x148 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x148 (_ bv0 32))))
 (=> $x77 $x55)))))
 ))
 (let (($x137 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x53 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x53 (_ bv0 32))))
 (let ((?x148 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x148 (_ bv0 32))))
 (= $x77 $x97))))))
 ))
 (let (($x408 (and $x137 $x103)))
 (let (($x322 (and $x408 $x415)))
 (let (($x157 (and $x322 $x320)))
 (let (($x51 (and $x157 $x19)))
 (let (($x297 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x237 (and $x297 $x51)))
 (let (($x24 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x314 (bvadd ?x108 (_ bv3 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x314)))
 (let (($x225 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x314)))
 (let (($x107 (or false (or false (and (and true (or $x88 $x225)) (or $x267 $x24))))))
 (let (($x231 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) $x107)))
 (let (($x193 (=> (and $x229 (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32)))) $x107)))
 (let (($x305 (and $x193 $x237)))
 (let (($x220 (=> $x305 $x39)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x190 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x184 (bvule ?x190 (_ bv4294967294 32))))
 (let (($x300 (= $x184 true)))
 (let (($x39 (= $x300 true)))
 (let ((?x25 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x62 (bvneg ?x25)))
 (let (($x43 (= ?x62 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x43 true)))
 (let (($x180 (= $x175 true)))
 (let (($x76 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x292 (= $x76 true)))
 (let (($x163 (= $x292 true)))
 (let (($x276 (= $x163 true)))
 (let (($x274 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x111 (= $x274 true)))
 (let (($x255 (= $x111 true)))
 (let (($x201 (= $x255 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x139)))
 (let ((?x259 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x259)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x141 $x155)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (and $x381 $x18)))
 (let (($x343 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x341 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x337 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x380 (and $x337 $x339)))
 (let (($x382 (not $x380)))
 (let (($x336 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x361 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x347 (and $x361 $x336)))
 (let (($x379 (and (not $x347) $x382)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x17 $x89)))
 (let (($x362 (not $x110)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x158 $x154)))
 (let (($x331 (and (not $x9) $x362)))
 (let (($x140 (and (and (and (and (and (and $x331 $x379) $x341) $x343) $x251) $x147) $x212)))
 (let (($x375 (and $x140 $x233)))
 (let (($x224 (= $x375 true)))
 (let (($x105 (= $x224 true)))
 (let (($x68 (= $x105 true)))
 (let (($x351 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x358 (= $x351 true)))
 (let (($x37 (= $x358 true)))
 (let (($x20 (= $x37 true)))
 (let ((?x327 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x386 (bvneg ?x327)))
 (let (($x360 (= ?x386 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x357 (= $x360 true)))
 (let (($x365 (= $x357 true)))
 (let (($x359 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x372 (= $x359 true)))
 (let (($x354 (= $x372 true)))
 (let (($x352 (= $x354 true)))
 (let (($x146 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x270 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x270))))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv2 32))) ?x172)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x270 (_ bv3 32))) ?x324)))
 (let ((?x291 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x291 (_ bv1 32))))
 (=> $x86 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x281)))))))))
 ))
 (let (($x22 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x49 (ite $x272 (_ bv1 32) (_ bv0 32))))
 (let ((?x291 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x291 (_ bv1 32))))
 (= $x86 (bvuge ?x49 (_ bv1 32))))))))
 ))
 (let (($x153 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x291 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x291 (_ bv0 32))))
 (=> $x118 $x55)))))
 ))
 (let (($x57 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x49 (ite $x272 (_ bv1 32) (_ bv0 32))))
 (let ((?x291 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x291 (_ bv0 32))))
 (= $x118 (= ?x49 (_ bv0 32))))))))
 ))
 (let (($x183 (and $x57 $x153)))
 (let (($x6 (and $x183 $x22)))
 (let (($x329 (and $x6 $x146)))
 (let (($x364 (= $x329 true)))
 (let (($x277 (= $x364 true)))
 (let (($x363 (= $x277 true)))
 (let ((?x268 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x34 (= (_ bv0 2) ?x268)))
 (let (($x317 (= $x34 true)))
 (let (($x294 (= $x317 true)))
 (let (($x345 (= ?x386 input.dst.llvm-%n)))
 (let (($x385 (= $x345 true)))
 (let (($x383 (= $x385 true)))
 (let ((?x83 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x108 (bvadd input.dst.llvm-%m ?x83)))
 (let ((?x371 (bvsub ?x108 ?x83)))
 (let (($x321 (ite (bvsge ?x83 (_ bv0 32)) (bvuge ?x108 ?x371) (bvult ?x108 ?x371))))
 (let (($x227 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x143 (ite $x227 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvmul (_ bv4 64) ?x248)))
 (let ((?x245 ((_ extract 63 32) ?x7)))
 (let (($x366 (= ?x245 ?x143)))
 (let (($x257 (and $x366 $x321)))
 (let (($x256 (= (bvand ?x108 (_ bv4294967292 32)) ?x108)))
 (let (($x263 (and $x256 $x257)))
 (let (($x236 (= true $x263)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x12 (=> $x229 $x236)))
 (let (($x115 (= $x12 true)))
 (let (($x127 (= $x115 true)))
 (let (($x376 (= $x127 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x226 true)))
 (let (($x214 (= $x261 true)))
 (let (($x217 (= $x214 true)))
 (let (($x346 (= $x229 true)))
 (let (($x169 (= $x346 true)))
 (let (($x36 (= $x169 true)))
 (let (($x260 (and $x36 $x217)))
 (let (($x377 (and $x260 $x376)))
 (let (($x243 (and $x377 $x383)))
 (let (($x313 (and $x243 $x294)))
 (let (($x288 (and $x313 $x363)))
 (let (($x353 (and $x288 $x352)))
 (let (($x356 (and $x353 $x365)))
 (let (($x100 (and $x356 $x20)))
 (let (($x28 (and $x100 $x68)))
 (let (($x197 (and $x28 $x201)))
 (let (($x170 (and $x197 $x276)))
 (let (($x304 (and $x170 $x180)))
 (let (($x333 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x199 (and (not $x333) $x304)))
 (let (($x208 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x198 (and $x208 $x199)))
 (let (($x334 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x19 (and $x334 $x198)))
 (let (($x320 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x148 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x148 (_ bv1 32))))
 (=> $x412 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x415 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x53 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x53 (_ bv1 32))))
 (let ((?x148 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x148 (_ bv1 32))))
 (= $x412 $x406))))))
 ))
 (let (($x103 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x148 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x148 (_ bv0 32))))
 (=> $x77 $x55)))))
 ))
 (let (($x137 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x53 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x53 (_ bv0 32))))
 (let ((?x148 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x148 (_ bv0 32))))
 (= $x77 $x97))))))
 ))
 (let (($x408 (and $x137 $x103)))
 (let (($x322 (and $x408 $x415)))
 (let (($x157 (and $x322 $x320)))
 (let (($x51 (and $x157 $x19)))
 (let (($x297 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x237 (and $x297 $x51)))
 (let (($x24 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x314 (bvadd ?x108 (_ bv3 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x314)))
 (let (($x225 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x314)))
 (let (($x107 (or false (or false (and (and true (or $x88 $x225)) (or $x267 $x24))))))
 (let (($x231 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) $x107)))
 (let (($x193 (=> (and $x229 (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32)))) $x107)))
 (let (($x305 (and $x193 $x237)))
 (let (($x220 (=> $x305 $x39)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 210 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x69 (bvsge ?x64 (_ bv0 32))))
 (let (($x235 (= $x69 true)))
 (let (($x151 (= $x235 true)))
 (let ((?x301 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x307 (bvneg ?x301)))
 (let (($x296 (= ?x307 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x296 true)))
 (let (($x67 (= $x113 true)))
 (let (($x84 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x221 (= $x84 true)))
 (let (($x223 (= $x221 true)))
 (let (($x185 (= $x223 true)))
 (let (($x279 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x302 (= $x279 true)))
 (let (($x173 (= $x302 true)))
 (let (($x177 (= $x173 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x135)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x87)))
 (let ((?x285 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x285)))
 (let ((?x328 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x328)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (and $x203 $x204)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x206 $x121)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x32 $x47)))
 (let (($x131 (not $x179)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x400 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x399 (and $x400 $x128)))
 (let (($x319 (and (not $x399) $x131)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x398 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x398 $x349)))
 (let (($x78 (not $x136)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x332 $x397)))
 (let (($x92 (and (not $x16) $x78)))
 (let (($x122 (and (and (and (and (and (and $x92 $x319) $x318) $x56) $x132) $x299) $x152)))
 (let (($x168 (and $x122 $x41)))
 (let (($x176 (= $x168 true)))
 (let (($x187 (= $x176 true)))
 (let (($x59 (= $x187 true)))
 (let (($x70 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x70 true)))
 (let (($x396 (= $x150 true)))
 (let (($x394 (= $x396 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x326 (bvneg ?x71)))
 (let (($x129 (= ?x326 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x298 (= $x129 true)))
 (let (($x194 (= $x298 true)))
 (let (($x390 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x393 (= $x390 true)))
 (let (($x295 (= $x393 true)))
 (let (($x280 (= $x295 true)))
 (let (($x116 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x191))))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv2 32))) ?x159)))
 (let ((?x402 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv3 32))) ?x192)))
 (let ((?x45 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x45 (_ bv1 32))))
 (=> $x106 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x402)))))))))
 ))
 (let (($x234 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x39 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x45 (_ bv1 32))))
 (= $x106 (bvuge ?x39 (_ bv1 32))))))))
 ))
 (let (($x14 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x261 (= false false)))
 (let ((?x45 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x45 (_ bv0 32))))
 (=> $x373 $x261)))))
 ))
 (let (($x370 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x39 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x45 (_ bv0 32))))
 (= $x373 (= ?x39 (_ bv0 32))))))))
 ))
 (let (($x283 (and $x370 $x14)))
 (let (($x133 (and $x283 $x234)))
 (let (($x388 (and $x133 $x116)))
 (let (($x413 (= $x388 true)))
 (let (($x387 (= $x413 true)))
 (let (($x188 (= $x387 true)))
 (let ((?x146 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x329 (= (_ bv0 2) ?x146)))
 (let (($x364 (= $x329 true)))
 (let (($x277 (= $x364 true)))
 (let (($x172 (= ?x326 input.dst.llvm-%n)))
 (let (($x324 (= $x172 true)))
 (let (($x281 (= $x324 true)))
 (let ((?x108 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x311 (bvadd input.dst.llvm-%m ?x108)))
 (let ((?x144 (bvsub ?x311 ?x108)))
 (let (($x374 (ite (bvsge ?x108 (_ bv0 32)) (bvuge ?x311 ?x144) (bvult ?x311 ?x144))))
 (let (($x153 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x86 (ite $x153 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x57 (bvmul (_ bv4 64) ?x112)))
 (let ((?x27 ((_ extract 63 32) ?x57)))
 (let (($x33 (= ?x27 ?x86)))
 (let (($x63 (and $x33 $x374)))
 (let (($x49 (= (bvand ?x311 (_ bv4294967292 32)) ?x311)))
 (let (($x270 (and $x49 $x63)))
 (let (($x309 (= true $x270)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x325 (=> $x229 $x309)))
 (let (($x104 (= $x325 true)))
 (let (($x26 (= $x104 true)))
 (let (($x310 (= $x26 true)))
 (let (($x313 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x96 (= $x313 true)))
 (let (($x291 (= $x96 true)))
 (let (($x118 (= $x291 true)))
 (let (($x268 (= $x229 true)))
 (let (($x34 (= $x268 true)))
 (let (($x317 (= $x34 true)))
 (let (($x284 (and $x317 $x118)))
 (let (($x350 (and $x284 $x310)))
 (let (($x66 (and $x350 $x281)))
 (let (($x363 (and $x66 $x277)))
 (let (($x389 (and $x363 $x188)))
 (let (($x252 (and $x389 $x280)))
 (let (($x290 (and $x252 $x194)))
 (let (($x395 (and $x290 $x394)))
 (let (($x40 (and $x395 $x59)))
 (let (($x101 (and $x40 $x177)))
 (let (($x228 (and $x101 $x185)))
 (let (($x348 (and $x228 $x67)))
 (let (($x338 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x269 (and (not $x338) $x348)))
 (let (($x383 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x85 (and $x383 $x269)))
 (let (($x386 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x232 (and $x386 $x85)))
 (let (($x376 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x169 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x169 (_ bv1 32))))
 (=> $x143 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x368 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x157 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x157 (_ bv1 32))))
 (let ((?x169 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x169 (_ bv1 32))))
 (= $x143 $x245))))))
 ))
 (let (($x260 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x261 (= false false)))
 (let ((?x169 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x169 (_ bv0 32))))
 (=> $x36 $x261)))))
 ))
 (let (($x226 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x157 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x157 (_ bv0 32))))
 (let ((?x169 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x169 (_ bv0 32))))
 (= $x36 $x330))))))
 ))
 (let (($x218 (and $x226 $x260)))
 (let (($x371 (and $x218 $x368)))
 (let (($x377 (and $x371 $x376)))
 (let (($x30 (and $x377 $x232)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x95 (and $x90 $x30)))
 (let (($x316 (bvugt ?x311 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd ?x311 (_ bv3 32))))
 (let (($x401 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x262 (bvugt ?x311 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x134)))
 (let (($x287 (or false (or false (and (and true (or $x247 $x262)) (or $x401 $x316))))))
 (let (($x246 (=> (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32))) $x287)))
 (let (($x216 (=> (and $x229 (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32)))) $x287)))
 (let (($x242 (and $x216 $x95)))
 (let (($x102 (=> $x242 $x151)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x69 (bvsge ?x64 (_ bv0 32))))
 (let (($x235 (= $x69 true)))
 (let (($x151 (= $x235 true)))
 (let ((?x301 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x307 (bvneg ?x301)))
 (let (($x296 (= ?x307 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x296 true)))
 (let (($x67 (= $x113 true)))
 (let (($x84 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x221 (= $x84 true)))
 (let (($x223 (= $x221 true)))
 (let (($x185 (= $x223 true)))
 (let (($x279 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x302 (= $x279 true)))
 (let (($x173 (= $x302 true)))
 (let (($x177 (= $x173 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x135)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x87)))
 (let ((?x285 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x285)))
 (let ((?x328 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x328)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (and $x203 $x204)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x206 $x121)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x32 $x47)))
 (let (($x131 (not $x179)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x400 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x399 (and $x400 $x128)))
 (let (($x319 (and (not $x399) $x131)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x398 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x398 $x349)))
 (let (($x78 (not $x136)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x332 $x397)))
 (let (($x92 (and (not $x16) $x78)))
 (let (($x122 (and (and (and (and (and (and $x92 $x319) $x318) $x56) $x132) $x299) $x152)))
 (let (($x168 (and $x122 $x41)))
 (let (($x176 (= $x168 true)))
 (let (($x187 (= $x176 true)))
 (let (($x59 (= $x187 true)))
 (let (($x70 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x70 true)))
 (let (($x396 (= $x150 true)))
 (let (($x394 (= $x396 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x326 (bvneg ?x71)))
 (let (($x129 (= ?x326 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x298 (= $x129 true)))
 (let (($x194 (= $x298 true)))
 (let (($x390 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x393 (= $x390 true)))
 (let (($x295 (= $x393 true)))
 (let (($x280 (= $x295 true)))
 (let (($x116 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x191))))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv2 32))) ?x159)))
 (let ((?x402 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv3 32))) ?x192)))
 (let ((?x45 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x45 (_ bv1 32))))
 (=> $x106 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x402)))))))))
 ))
 (let (($x234 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x39 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x45 (_ bv1 32))))
 (= $x106 (bvuge ?x39 (_ bv1 32))))))))
 ))
 (let (($x14 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x261 (= false false)))
 (let ((?x45 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x45 (_ bv0 32))))
 (=> $x373 $x261)))))
 ))
 (let (($x370 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x300 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x39 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x45 (_ bv0 32))))
 (= $x373 (= ?x39 (_ bv0 32))))))))
 ))
 (let (($x283 (and $x370 $x14)))
 (let (($x133 (and $x283 $x234)))
 (let (($x388 (and $x133 $x116)))
 (let (($x413 (= $x388 true)))
 (let (($x387 (= $x413 true)))
 (let (($x188 (= $x387 true)))
 (let ((?x146 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x329 (= (_ bv0 2) ?x146)))
 (let (($x364 (= $x329 true)))
 (let (($x277 (= $x364 true)))
 (let (($x172 (= ?x326 input.dst.llvm-%n)))
 (let (($x324 (= $x172 true)))
 (let (($x281 (= $x324 true)))
 (let ((?x108 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x311 (bvadd input.dst.llvm-%m ?x108)))
 (let ((?x144 (bvsub ?x311 ?x108)))
 (let (($x374 (ite (bvsge ?x108 (_ bv0 32)) (bvuge ?x311 ?x144) (bvult ?x311 ?x144))))
 (let (($x153 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x86 (ite $x153 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x57 (bvmul (_ bv4 64) ?x112)))
 (let ((?x27 ((_ extract 63 32) ?x57)))
 (let (($x33 (= ?x27 ?x86)))
 (let (($x63 (and $x33 $x374)))
 (let (($x49 (= (bvand ?x311 (_ bv4294967292 32)) ?x311)))
 (let (($x270 (and $x49 $x63)))
 (let (($x309 (= true $x270)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x325 (=> $x229 $x309)))
 (let (($x104 (= $x325 true)))
 (let (($x26 (= $x104 true)))
 (let (($x310 (= $x26 true)))
 (let (($x313 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x96 (= $x313 true)))
 (let (($x291 (= $x96 true)))
 (let (($x118 (= $x291 true)))
 (let (($x268 (= $x229 true)))
 (let (($x34 (= $x268 true)))
 (let (($x317 (= $x34 true)))
 (let (($x284 (and $x317 $x118)))
 (let (($x350 (and $x284 $x310)))
 (let (($x66 (and $x350 $x281)))
 (let (($x363 (and $x66 $x277)))
 (let (($x389 (and $x363 $x188)))
 (let (($x252 (and $x389 $x280)))
 (let (($x290 (and $x252 $x194)))
 (let (($x395 (and $x290 $x394)))
 (let (($x40 (and $x395 $x59)))
 (let (($x101 (and $x40 $x177)))
 (let (($x228 (and $x101 $x185)))
 (let (($x348 (and $x228 $x67)))
 (let (($x338 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x269 (and (not $x338) $x348)))
 (let (($x383 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x85 (and $x383 $x269)))
 (let (($x386 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x232 (and $x386 $x85)))
 (let (($x376 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x169 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x169 (_ bv1 32))))
 (=> $x143 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x368 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x157 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x157 (_ bv1 32))))
 (let ((?x169 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x169 (_ bv1 32))))
 (= $x143 $x245))))))
 ))
 (let (($x260 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x261 (= false false)))
 (let ((?x169 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x169 (_ bv0 32))))
 (=> $x36 $x261)))))
 ))
 (let (($x226 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x157 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x157 (_ bv0 32))))
 (let ((?x169 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x169 (_ bv0 32))))
 (= $x36 $x330))))))
 ))
 (let (($x218 (and $x226 $x260)))
 (let (($x371 (and $x218 $x368)))
 (let (($x377 (and $x371 $x376)))
 (let (($x30 (and $x377 $x232)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x95 (and $x90 $x30)))
 (let (($x316 (bvugt ?x311 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd ?x311 (_ bv3 32))))
 (let (($x401 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x262 (bvugt ?x311 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x134)))
 (let (($x287 (or false (or false (and (and true (or $x247 $x262)) (or $x401 $x316))))))
 (let (($x246 (=> (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32))) $x287)))
 (let (($x216 (=> (and $x229 (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32)))) $x287)))
 (let (($x242 (and $x216 $x95)))
 (let (($x102 (=> $x242 $x151)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (bvule ?x21 (_ bv4294967294 32))))
 (let (($x125 (= $x117 true)))
 (let (($x211 (= $x125 true)))
 (let ((?x13 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x38 (bvneg ?x13)))
 (let (($x410 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x405 (= $x410 true)))
 (let (($x407 (= $x405 true)))
 (let (($x403 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x293 (= $x403 true)))
 (let (($x409 (= $x293 true)))
 (let (($x42 (= $x409 true)))
 (let (($x249 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (= $x249 true)))
 (let (($x54 (= $x48 true)))
 (let (($x60 (= $x54 true)))
 (let (($x52 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x199 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x199))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv2 32))) ?x305)))
 (let ((?x138 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv3 32))) ?x91)))
 (let ((?x382 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x382 (_ bv1 32))))
 (=> $x353 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x138)))))))))
 ))
 (let (($x365 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x331 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x110 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x382 (_ bv1 32))))
 (= $x353 (bvuge ?x110 (_ bv1 32))))))))
 ))
 (let (($x341 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x96 (= false false)))
 (let ((?x382 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x382 (_ bv0 32))))
 (=> $x158 $x96)))))
 ))
 (let (($x379 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x331 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x110 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x382 (_ bv0 32))))
 (= $x158 (= ?x110 (_ bv0 32))))))))
 ))
 (let (($x289 (and $x379 $x341)))
 (let (($x356 (and $x289 $x365)))
 (let (($x156 (and $x356 $x52)))
 (let (($x189 (= $x156 true)))
 (let (($x209 (= $x189 true)))
 (let (($x240 (= $x209 true)))
 (let ((?x311 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x196 (bvadd input.dst.llvm-%m ?x311)))
 (let ((?x178 (bvsub ?x196 ?x311)))
 (let (($x87 (ite (bvsge ?x311 (_ bv0 32)) (bvuge ?x196 ?x178) (bvult ?x196 ?x178))))
 (let (($x204 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x121 (ite $x204 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x206 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvmul (_ bv4 64) ?x206)))
 (let ((?x328 ((_ extract 63 32) ?x203)))
 (let (($x132 (= ?x328 ?x121)))
 (let (($x152 (and $x132 $x87)))
 (let (($x56 (= (bvand ?x196 (_ bv4294967292 32)) ?x196)))
 (let (($x122 (and $x56 $x152)))
 (let (($x135 (= true $x122)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (=> $x229 $x135)))
 (let (($x168 (= $x41 true)))
 (let (($x176 (= $x168 true)))
 (let (($x187 (= $x176 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x319 (= $x131 true)))
 (let (($x142 (= $x319 true)))
 (let (($x323 (= $x142 true)))
 (let (($x35 (= $x229 true)))
 (let (($x32 (= $x35 true)))
 (let (($x47 (= $x32 true)))
 (let ((?x395 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x332 (= (_ bv0 32) ?x395)))
 (let ((?x396 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x394 (= (_ bv0 32) ?x396)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (and $x252 $x298)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (and $x280 $x194)))
 (let (($x295 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x390 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x392 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x388 (and $x392 $x116)))
 (let (($x413 (not $x388)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x391 (and $x192 $x402)))
 (let (($x188 (and (not $x391) $x413)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x200 $x165)))
 (let (($x31 (not $x29)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x336 (and $x205 $x278)))
 (let (($x159 (and (not $x336) $x31)))
 (let (($x136 (and (and (and (and (and (and $x159 $x188) $x390) $x295) $x290) $x150) $x394)))
 (let (($x78 (and $x136 $x332)))
 (let (($x92 (= $x78 true)))
 (let (($x400 (= $x92 true)))
 (let (($x128 (= $x400 true)))
 (let (($x133 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x171 (= $x133 true)))
 (let (($x335 (= $x171 true)))
 (let (($x161 (= $x335 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x373 (bvneg ?x45)))
 (let (($x106 (= ?x373 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x355 (= $x106 true)))
 (let (($x202 (= $x355 true)))
 (let ((?x120 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x370 (= (_ bv0 2) ?x120)))
 (let (($x273 (= $x370 true)))
 (let (($x14 (= $x273 true)))
 (let (($x184 (= ?x373 input.dst.llvm-%n)))
 (let (($x190 (= $x184 true)))
 (let (($x300 (= $x190 true)))
 (let (($x329 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x364 (= $x329 true)))
 (let (($x277 (= $x364 true)))
 (let (($x363 (= $x277 true)))
 (let (($x39 (and $x363 $x300)))
 (let (($x283 (and $x39 $x14)))
 (let (($x234 (and $x283 $x202)))
 (let (($x191 (and $x234 $x161)))
 (let (($x399 (and $x191 $x128)))
 (let (($x179 (and $x399 $x47)))
 (let (($x318 (and $x179 $x323)))
 (let (($x59 (and $x318 $x187)))
 (let (($x238 (and $x59 $x240)))
 (let (($x404 (and $x238 $x60)))
 (let (($x126 (and $x404 $x42)))
 (let (($x411 (and $x126 $x407)))
 (let (($x166 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x50 (and (not $x166) $x411)))
 (let (($x281 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x98 (and $x281 $x50)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x344 (and $x326 $x98)))
 (let (($x310 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x34 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x34 (_ bv1 32))))
 (=> $x86 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x22 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x377 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x27 (bvuge ?x377 (_ bv1 32))))
 (let ((?x34 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x34 (_ bv1 32))))
 (= $x86 $x27))))))
 ))
 (let (($x284 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x96 (= false false)))
 (let ((?x34 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x34 (_ bv0 32))))
 (=> $x317 $x96)))))
 ))
 (let (($x313 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x377 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x377 (_ bv0 32))))
 (let ((?x34 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x34 (_ bv0 32))))
 (= $x317 $x345))))))
 ))
 (let (($x282 (and $x313 $x284)))
 (let (($x144 (and $x282 $x22)))
 (let (($x350 (and $x144 $x310)))
 (let (($x367 (and $x350 $x344)))
 (let (($x346 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x286 (and $x346 $x367)))
 (let (($x193 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd ?x196 (_ bv3 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x24 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x186 (or false (or false (and (and true (or $x222 $x24)) (or $x231 $x193))))))
 (let (($x181 (=> (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32))) $x186)))
 (let (($x314 (=> (and $x229 (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32)))) $x186)))
 (let (($x123 (and $x314 $x286)))
 (let (($x82 (=> $x123 $x211)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (bvule ?x21 (_ bv4294967294 32))))
 (let (($x125 (= $x117 true)))
 (let (($x211 (= $x125 true)))
 (let ((?x13 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x38 (bvneg ?x13)))
 (let (($x410 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x405 (= $x410 true)))
 (let (($x407 (= $x405 true)))
 (let (($x403 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x293 (= $x403 true)))
 (let (($x409 (= $x293 true)))
 (let (($x42 (= $x409 true)))
 (let (($x249 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (= $x249 true)))
 (let (($x54 (= $x48 true)))
 (let (($x60 (= $x54 true)))
 (let (($x52 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x199 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x199))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv2 32))) ?x305)))
 (let ((?x138 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x199 (_ bv3 32))) ?x91)))
 (let ((?x382 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x382 (_ bv1 32))))
 (=> $x353 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x138)))))))))
 ))
 (let (($x365 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x331 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x110 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x382 (_ bv1 32))))
 (= $x353 (bvuge ?x110 (_ bv1 32))))))))
 ))
 (let (($x341 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x96 (= false false)))
 (let ((?x382 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x382 (_ bv0 32))))
 (=> $x158 $x96)))))
 ))
 (let (($x379 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x331 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x110 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x382 (_ bv0 32))))
 (= $x158 (= ?x110 (_ bv0 32))))))))
 ))
 (let (($x289 (and $x379 $x341)))
 (let (($x356 (and $x289 $x365)))
 (let (($x156 (and $x356 $x52)))
 (let (($x189 (= $x156 true)))
 (let (($x209 (= $x189 true)))
 (let (($x240 (= $x209 true)))
 (let ((?x311 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x196 (bvadd input.dst.llvm-%m ?x311)))
 (let ((?x178 (bvsub ?x196 ?x311)))
 (let (($x87 (ite (bvsge ?x311 (_ bv0 32)) (bvuge ?x196 ?x178) (bvult ?x196 ?x178))))
 (let (($x204 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x121 (ite $x204 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x206 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvmul (_ bv4 64) ?x206)))
 (let ((?x328 ((_ extract 63 32) ?x203)))
 (let (($x132 (= ?x328 ?x121)))
 (let (($x152 (and $x132 $x87)))
 (let (($x56 (= (bvand ?x196 (_ bv4294967292 32)) ?x196)))
 (let (($x122 (and $x56 $x152)))
 (let (($x135 (= true $x122)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (=> $x229 $x135)))
 (let (($x168 (= $x41 true)))
 (let (($x176 (= $x168 true)))
 (let (($x187 (= $x176 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x319 (= $x131 true)))
 (let (($x142 (= $x319 true)))
 (let (($x323 (= $x142 true)))
 (let (($x35 (= $x229 true)))
 (let (($x32 (= $x35 true)))
 (let (($x47 (= $x32 true)))
 (let ((?x395 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x332 (= (_ bv0 32) ?x395)))
 (let ((?x396 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x394 (= (_ bv0 32) ?x396)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (and $x252 $x298)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (and $x280 $x194)))
 (let (($x295 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x390 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x392 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x388 (and $x392 $x116)))
 (let (($x413 (not $x388)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x391 (and $x192 $x402)))
 (let (($x188 (and (not $x391) $x413)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x200 $x165)))
 (let (($x31 (not $x29)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x336 (and $x205 $x278)))
 (let (($x159 (and (not $x336) $x31)))
 (let (($x136 (and (and (and (and (and (and $x159 $x188) $x390) $x295) $x290) $x150) $x394)))
 (let (($x78 (and $x136 $x332)))
 (let (($x92 (= $x78 true)))
 (let (($x400 (= $x92 true)))
 (let (($x128 (= $x400 true)))
 (let (($x133 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x171 (= $x133 true)))
 (let (($x335 (= $x171 true)))
 (let (($x161 (= $x335 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x373 (bvneg ?x45)))
 (let (($x106 (= ?x373 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x355 (= $x106 true)))
 (let (($x202 (= $x355 true)))
 (let ((?x120 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x370 (= (_ bv0 2) ?x120)))
 (let (($x273 (= $x370 true)))
 (let (($x14 (= $x273 true)))
 (let (($x184 (= ?x373 input.dst.llvm-%n)))
 (let (($x190 (= $x184 true)))
 (let (($x300 (= $x190 true)))
 (let (($x329 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x364 (= $x329 true)))
 (let (($x277 (= $x364 true)))
 (let (($x363 (= $x277 true)))
 (let (($x39 (and $x363 $x300)))
 (let (($x283 (and $x39 $x14)))
 (let (($x234 (and $x283 $x202)))
 (let (($x191 (and $x234 $x161)))
 (let (($x399 (and $x191 $x128)))
 (let (($x179 (and $x399 $x47)))
 (let (($x318 (and $x179 $x323)))
 (let (($x59 (and $x318 $x187)))
 (let (($x238 (and $x59 $x240)))
 (let (($x404 (and $x238 $x60)))
 (let (($x126 (and $x404 $x42)))
 (let (($x411 (and $x126 $x407)))
 (let (($x166 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x50 (and (not $x166) $x411)))
 (let (($x281 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x98 (and $x281 $x50)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x344 (and $x326 $x98)))
 (let (($x310 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x34 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x34 (_ bv1 32))))
 (=> $x86 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x22 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x377 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x27 (bvuge ?x377 (_ bv1 32))))
 (let ((?x34 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x34 (_ bv1 32))))
 (= $x86 $x27))))))
 ))
 (let (($x284 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x96 (= false false)))
 (let ((?x34 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x34 (_ bv0 32))))
 (=> $x317 $x96)))))
 ))
 (let (($x313 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x377 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x377 (_ bv0 32))))
 (let ((?x34 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x317 (= ?x34 (_ bv0 32))))
 (= $x317 $x345))))))
 ))
 (let (($x282 (and $x313 $x284)))
 (let (($x144 (and $x282 $x22)))
 (let (($x350 (and $x144 $x310)))
 (let (($x367 (and $x350 $x344)))
 (let (($x346 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x286 (and $x346 $x367)))
 (let (($x193 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd ?x196 (_ bv3 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x24 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x186 (or false (or false (and (and true (or $x222 $x24)) (or $x231 $x193))))))
 (let (($x181 (=> (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32))) $x186)))
 (let (($x314 (=> (and $x229 (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32)))) $x186)))
 (let (($x123 (and $x314 $x286)))
 (let (($x82 (=> $x123 $x211)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 210 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x274 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x163 (bvsge ?x274 (_ bv0 32))))
 (let (($x25 (= $x163 true)))
 (let (($x175 (= $x25 true)))
 (let ((?x212 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x139 (bvneg ?x212)))
 (let (($x197 (= ?x139 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x197 true)))
 (let (($x68 (= $x255 true)))
 (let (($x111 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x375 (= $x111 true)))
 (let (($x224 (= $x375 true)))
 (let (($x259 (= $x224 true)))
 (let (($x358 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (= $x358 true)))
 (let (($x233 (= $x37 true)))
 (let (($x258 (= $x233 true)))
 (let (($x162 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x347 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x263))))
 (let ((?x343 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x263 (_ bv2 32))) ?x347)))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x263 (_ bv3 32))) ?x343)))
 (let ((?x100 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x100 (_ bv1 32))))
 (=> $x101 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x155)))))))))
 ))
 (let (($x223 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x64 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x95 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let ((?x100 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x100 (_ bv1 32))))
 (= $x101 (bvuge ?x95 (_ bv1 32))))))))
 ))
 (let (($x359 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x275 (= false false)))
 (let ((?x100 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x100 (_ bv0 32))))
 (=> $x67 $x275)))))
 ))
 (let (($x17 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x64 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x95 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let ((?x100 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x100 (_ bv0 32))))
 (= $x67 (= ?x95 (_ bv0 32))))))))
 ))
 (let (($x372 (and $x17 $x359)))
 (let (($x185 (and $x372 $x223)))
 (let (($x80 (and $x185 $x162)))
 (let (($x251 (= $x80 true)))
 (let (($x147 (= $x251 true)))
 (let (($x357 (= $x147 true)))
 (let ((?x196 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x88 (bvadd input.dst.llvm-%m ?x196)))
 (let ((?x51 (bvsub ?x88 ?x196)))
 (let (($x91 (ite (bvsge ?x196 (_ bv0 32)) (bvuge ?x88 ?x51) (bvult ?x88 ?x51))))
 (let (($x235 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x58 (ite $x235 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x199 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x239 (bvmul (_ bv4 64) ?x199)))
 (let ((?x72 ((_ extract 63 32) ?x239)))
 (let (($x250 (= ?x72 ?x58)))
 (let (($x138 (and $x250 $x91)))
 (let (($x85 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x167 (and $x85 $x138)))
 (let (($x46 (= true $x167)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (=> $x229 $x46)))
 (let (($x156 (= $x52 true)))
 (let (($x189 (= $x156 true)))
 (let (($x209 (= $x189 true)))
 (let (($x289 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x353 (= $x289 true)))
 (let (($x352 (= $x353 true)))
 (let (($x360 (= $x352 true)))
 (let (($x154 (= $x229 true)))
 (let (($x379 (= $x154 true)))
 (let (($x266 (= $x379 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x41)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x122)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x285 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x285)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x299 (and $x132 $x178)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x121 $x299)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x323 $x318)))
 (let (($x315 (not $x124)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x131 $x319)))
 (let (($x119 (and (not $x142) $x315)))
 (let (($x399 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x128 $x399)))
 (let (($x32 (not $x35)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x400 (and $x78 $x92)))
 (let (($x179 (and (not $x400) $x32)))
 (let (($x158 (and (and (and (and (and (and $x179 $x119) $x203) $x204) $x81) $x152) $x135)))
 (let (($x362 (and $x158 $x168)))
 (let (($x384 (= $x362 true)))
 (let (($x331 (= $x384 true)))
 (let (($x110 (= $x331 true)))
 (let (($x396 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x394 (= $x396 true)))
 (let (($x136 (= $x394 true)))
 (let (($x395 (= $x136 true)))
 (let ((?x389 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x390 (bvneg ?x389)))
 (let (($x398 (= ?x390 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x70 (= $x398 true)))
 (let (($x150 (= $x70 true)))
 (let ((?x252 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x129 (= (_ bv0 2) ?x252)))
 (let (($x298 (= $x129 true)))
 (let (($x194 (= $x298 true)))
 (let (($x16 (= ?x390 input.dst.llvm-%n)))
 (let (($x393 (= $x16 true)))
 (let (($x295 (= $x393 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x388 (= $x116 true)))
 (let (($x413 (= $x388 true)))
 (let (($x188 (= $x413 true)))
 (let (($x79 (and $x188 $x295)))
 (let (($x290 (and $x79 $x194)))
 (let (($x349 (and $x290 $x150)))
 (let (($x332 (and $x349 $x395)))
 (let (($x361 (and $x332 $x110)))
 (let (($x341 (and $x361 $x266)))
 (let (($x365 (and $x341 $x360)))
 (let (($x240 (and $x365 $x209)))
 (let (($x351 (and $x240 $x357)))
 (let (($x76 (and $x351 $x258)))
 (let (($x140 (and $x76 $x259)))
 (let (($x28 (and $x140 $x68)))
 (let (($x387 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x62 (and (not $x387) $x28)))
 (let (($x402 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x43 (and $x402 $x62)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x170 (and $x31 $x43)))
 (let (($x200 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x329 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x329 (_ bv1 32))))
 (=> $x106 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x202 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x350 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x350 (_ bv1 32))))
 (let ((?x329 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x329 (_ bv1 32))))
 (= $x106 $x273))))))
 ))
 (let (($x184 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x275 (= false false)))
 (let ((?x329 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x329 (_ bv0 32))))
 (=> $x364 $x275)))))
 ))
 (let (($x363 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x350 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x350 (_ bv0 32))))
 (let ((?x329 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x329 (_ bv0 32))))
 (= $x364 $x172))))))
 ))
 (let (($x190 (and $x363 $x184)))
 (let (($x234 (and $x190 $x202)))
 (let (($x165 (and $x234 $x200)))
 (let (($x276 (and $x165 $x170)))
 (let (($x268 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x201 (and $x268 $x276)))
 (let (($x216 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x401 (bvadd ?x88 (_ bv3 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x401)))
 (let (($x316 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x401)))
 (let (($x297 (or false (or false (and (and true (or $x195 $x316)) (or $x246 $x216))))))
 (let (($x215 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) $x297)))
 (let (($x134 (=> (and $x229 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) $x297)))
 (let (($x292 (and $x134 $x201)))
 (let (($x180 (=> $x292 $x175)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x274 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x163 (bvsge ?x274 (_ bv0 32))))
 (let (($x25 (= $x163 true)))
 (let (($x175 (= $x25 true)))
 (let ((?x212 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x139 (bvneg ?x212)))
 (let (($x197 (= ?x139 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x197 true)))
 (let (($x68 (= $x255 true)))
 (let (($x111 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x375 (= $x111 true)))
 (let (($x224 (= $x375 true)))
 (let (($x259 (= $x224 true)))
 (let (($x358 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (= $x358 true)))
 (let (($x233 (= $x37 true)))
 (let (($x258 (= $x233 true)))
 (let (($x162 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x263 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x347 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x263))))
 (let ((?x343 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x263 (_ bv2 32))) ?x347)))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x263 (_ bv3 32))) ?x343)))
 (let ((?x100 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x100 (_ bv1 32))))
 (=> $x101 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x155)))))))))
 ))
 (let (($x223 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x64 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x95 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let ((?x100 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x100 (_ bv1 32))))
 (= $x101 (bvuge ?x95 (_ bv1 32))))))))
 ))
 (let (($x359 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x275 (= false false)))
 (let ((?x100 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x100 (_ bv0 32))))
 (=> $x67 $x275)))))
 ))
 (let (($x17 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x64 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x95 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let ((?x100 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x100 (_ bv0 32))))
 (= $x67 (= ?x95 (_ bv0 32))))))))
 ))
 (let (($x372 (and $x17 $x359)))
 (let (($x185 (and $x372 $x223)))
 (let (($x80 (and $x185 $x162)))
 (let (($x251 (= $x80 true)))
 (let (($x147 (= $x251 true)))
 (let (($x357 (= $x147 true)))
 (let ((?x196 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x88 (bvadd input.dst.llvm-%m ?x196)))
 (let ((?x51 (bvsub ?x88 ?x196)))
 (let (($x91 (ite (bvsge ?x196 (_ bv0 32)) (bvuge ?x88 ?x51) (bvult ?x88 ?x51))))
 (let (($x235 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x58 (ite $x235 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x199 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x239 (bvmul (_ bv4 64) ?x199)))
 (let ((?x72 ((_ extract 63 32) ?x239)))
 (let (($x250 (= ?x72 ?x58)))
 (let (($x138 (and $x250 $x91)))
 (let (($x85 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x167 (and $x85 $x138)))
 (let (($x46 (= true $x167)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (=> $x229 $x46)))
 (let (($x156 (= $x52 true)))
 (let (($x189 (= $x156 true)))
 (let (($x209 (= $x189 true)))
 (let (($x289 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x353 (= $x289 true)))
 (let (($x352 (= $x353 true)))
 (let (($x360 (= $x352 true)))
 (let (($x154 (= $x229 true)))
 (let (($x379 (= $x154 true)))
 (let (($x266 (= $x379 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x41)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x122)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x285 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x285)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x299 (and $x132 $x178)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x121 $x299)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x323 $x318)))
 (let (($x315 (not $x124)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x131 $x319)))
 (let (($x119 (and (not $x142) $x315)))
 (let (($x399 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x128 $x399)))
 (let (($x32 (not $x35)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x400 (and $x78 $x92)))
 (let (($x179 (and (not $x400) $x32)))
 (let (($x158 (and (and (and (and (and (and $x179 $x119) $x203) $x204) $x81) $x152) $x135)))
 (let (($x362 (and $x158 $x168)))
 (let (($x384 (= $x362 true)))
 (let (($x331 (= $x384 true)))
 (let (($x110 (= $x331 true)))
 (let (($x396 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x394 (= $x396 true)))
 (let (($x136 (= $x394 true)))
 (let (($x395 (= $x136 true)))
 (let ((?x389 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x390 (bvneg ?x389)))
 (let (($x398 (= ?x390 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x70 (= $x398 true)))
 (let (($x150 (= $x70 true)))
 (let ((?x252 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x129 (= (_ bv0 2) ?x252)))
 (let (($x298 (= $x129 true)))
 (let (($x194 (= $x298 true)))
 (let (($x16 (= ?x390 input.dst.llvm-%n)))
 (let (($x393 (= $x16 true)))
 (let (($x295 (= $x393 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x388 (= $x116 true)))
 (let (($x413 (= $x388 true)))
 (let (($x188 (= $x413 true)))
 (let (($x79 (and $x188 $x295)))
 (let (($x290 (and $x79 $x194)))
 (let (($x349 (and $x290 $x150)))
 (let (($x332 (and $x349 $x395)))
 (let (($x361 (and $x332 $x110)))
 (let (($x341 (and $x361 $x266)))
 (let (($x365 (and $x341 $x360)))
 (let (($x240 (and $x365 $x209)))
 (let (($x351 (and $x240 $x357)))
 (let (($x76 (and $x351 $x258)))
 (let (($x140 (and $x76 $x259)))
 (let (($x28 (and $x140 $x68)))
 (let (($x387 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x62 (and (not $x387) $x28)))
 (let (($x402 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x43 (and $x402 $x62)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x170 (and $x31 $x43)))
 (let (($x200 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x329 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x329 (_ bv1 32))))
 (=> $x106 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x202 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x350 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x350 (_ bv1 32))))
 (let ((?x329 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x329 (_ bv1 32))))
 (= $x106 $x273))))))
 ))
 (let (($x184 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x275 (= false false)))
 (let ((?x329 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x329 (_ bv0 32))))
 (=> $x364 $x275)))))
 ))
 (let (($x363 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x350 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x350 (_ bv0 32))))
 (let ((?x329 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x329 (_ bv0 32))))
 (= $x364 $x172))))))
 ))
 (let (($x190 (and $x363 $x184)))
 (let (($x234 (and $x190 $x202)))
 (let (($x165 (and $x234 $x200)))
 (let (($x276 (and $x165 $x170)))
 (let (($x268 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x201 (and $x268 $x276)))
 (let (($x216 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x401 (bvadd ?x88 (_ bv3 32))))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x401)))
 (let (($x316 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x401)))
 (let (($x297 (or false (or false (and (and true (or $x195 $x316)) (or $x246 $x216))))))
 (let (($x215 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) $x297)))
 (let (($x134 (=> (and $x229 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) $x297)))
 (let (($x292 (and $x134 $x201)))
 (let (($x180 (=> $x292 $x175)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 210 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x210 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (bvule ?x210 input.dst.llvm-%n)))
 (let (($x227 (= $x11 true)))
 (let (($x23 (= $x227 true)))
 (let ((?x73 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x412 (bvneg ?x73)))
 (let (($x214 (= ?x412 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x214 true)))
 (let (($x320 (= $x74 true)))
 (let ((?x121 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x121)))
 (let (($x414 (= ?x132 input.dst.llvm-%n)))
 (let (($x415 (= $x414 true)))
 (let (($x137 (= $x415 true)))
 (let (($x307 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x406 (= $x307 true)))
 (let (($x149 (= $x406 true)))
 (let (($x253 (= $x149 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x160 true)))
 (let (($x221 (= $x103 true)))
 (let (($x228 (= $x221 true)))
 (let (($x369 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x8))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x8 (_ bv2 32))) ?x270)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x8 (_ bv3 32))) ?x9)))
 (let ((?x21 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x21 (_ bv1 32))))
 (=> $x115 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x354)))))))))
 ))
 (let (($x293 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x211 (ite $x296 (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x21 (_ bv1 32))))
 (= $x115 (bvuge ?x211 (_ bv1 32))))))))
 ))
 (let (($x411 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x397 (= false false)))
 (let ((?x21 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x286 (= ?x21 (_ bv0 32))))
 (=> $x286 $x397)))))
 ))
 (let (($x93 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x211 (ite $x296 (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x286 (= ?x21 (_ bv0 32))))
 (= $x286 (= ?x211 (_ bv0 32))))))))
 ))
 (let (($x113 (and $x93 $x411)))
 (let (($x60 (and $x113 $x293)))
 (let (($x53 (and $x60 $x369)))
 (let (($x182 (= $x53 true)))
 (let (($x97 (= $x182 true)))
 (let (($x77 (= $x97 true)))
 (let ((?x88 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x247 (bvadd input.dst.llvm-%m ?x88)))
 (let ((?x130 (bvsub ?x247 ?x88)))
 (let (($x339 (ite (bvsge ?x88 (_ bv0 32)) (bvuge ?x247 ?x130) (bvult ?x247 ?x130))))
 (let (($x236 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x263 (ite $x236 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x185 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x381 (bvmul (_ bv4 64) ?x185)))
 (let ((?x98 ((_ extract 63 32) ?x381)))
 (let (($x219 (= ?x98 ?x263)))
 (let (($x380 (and $x219 $x339)))
 (let (($x84 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x89 (and $x84 $x380)))
 (let (($x347 (= true $x89)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x343 (=> $x229 $x347)))
 (let (($x155 (= $x343 true)))
 (let (($x18 (= $x155 true)))
 (let (($x141 (= $x18 true)))
 (let (($x348 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x17 (= $x348 true)))
 (let (($x254 (= $x17 true)))
 (let (($x359 (= $x254 true)))
 (let (($x102 (= $x229 true)))
 (let (($x64 (= $x102 true)))
 (let (($x95 (= $x64 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x91)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x305 (= (_ bv0 32) ?x19)))
 (let ((?x237 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x237)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (and $x239 $x235)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x199 $x58)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x341 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x353 (and $x341 $x289)))
 (let (($x352 (not $x353)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x266 (and $x154 $x379)))
 (let (($x365 (and (not $x266) $x352)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (and $x168 $x362)))
 (let (($x331 (not $x384)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x135 $x158)))
 (let (($x361 (and (not $x41) $x331)))
 (let (($x209 (and (and (and (and (and (and $x361 $x365) $x164) $x198) $x250) $x51) $x305)))
 (let (($x240 (and $x209 $x138)))
 (let (($x44 (= $x240 true)))
 (let (($x100 (= $x44 true)))
 (let (($x67 (= $x100 true)))
 (let (($x337 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x87 (= $x337 true)))
 (let (($x152 (= $x87 true)))
 (let (($x382 (= $x152 true)))
 (let (($x285 (= ?x132 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x178 (= $x285 true)))
 (let (($x299 (= $x178 true)))
 (let ((?x206 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x203 (= (_ bv0 2) ?x206)))
 (let (($x187 (= $x203 true)))
 (let (($x328 (= $x187 true)))
 (let (($x318 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x124 (= $x318 true)))
 (let (($x315 (= $x124 true)))
 (let (($x119 (= $x315 true)))
 (let (($x204 (and $x119 $x328)))
 (let (($x81 (and $x204 $x299)))
 (let (($x122 (and $x81 $x382)))
 (let (($x242 (and $x122 $x67)))
 (let (($x69 (and $x242 $x95)))
 (let (($x372 (and $x69 $x359)))
 (let (($x162 (and $x372 $x141)))
 (let (($x322 (and $x162 $x77)))
 (let (($x301 (and $x322 $x228)))
 (let (($x208 (and $x301 $x253)))
 (let (($x408 (and $x208 $x137)))
 (let (($x334 (and $x408 $x320)))
 (let (($x56 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x265 (and (not $x56) $x334)))
 (let (($x319 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x99 (and $x319 $x265)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x7 (and $x32 $x99)))
 (let (($x128 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x116 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x116 (_ bv1 32))))
 (=> $x398 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x150 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x165 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x165 (_ bv1 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x116 (_ bv1 32))))
 (= $x398 $x298))))))
 ))
 (let (($x16 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x397 (= false false)))
 (let ((?x116 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x388 (= ?x116 (_ bv0 32))))
 (=> $x388 $x397)))))
 ))
 (let (($x188 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x165 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x159 (= ?x165 (_ bv0 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x388 (= ?x116 (_ bv0 32))))
 (= $x388 $x159))))))
 ))
 (let (($x393 (and $x188 $x16)))
 (let (($x349 (and $x393 $x150)))
 (let (($x399 (and $x349 $x128)))
 (let (($x248 (and $x399 $x7)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x333 (and $x146 $x248)))
 (let (($x314 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x231 (bvadd ?x247 (_ bv3 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x193 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x231)))
 (let (($x90 (or false (or false (and (and true (or $x107 $x193)) (or $x181 $x314))))))
 (let (($x271 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) $x90)))
 (let (($x267 (=> (and $x229 (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32)))) $x90)))
 (let (($x256 (and $x267 $x333)))
 (let (($x321 (=> $x256 $x23)))
 (not $x321))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x210 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (bvule ?x210 input.dst.llvm-%n)))
 (let (($x227 (= $x11 true)))
 (let (($x23 (= $x227 true)))
 (let ((?x73 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x412 (bvneg ?x73)))
 (let (($x214 (= ?x412 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x214 true)))
 (let (($x320 (= $x74 true)))
 (let ((?x121 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x121)))
 (let (($x414 (= ?x132 input.dst.llvm-%n)))
 (let (($x415 (= $x414 true)))
 (let (($x137 (= $x415 true)))
 (let (($x307 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x406 (= $x307 true)))
 (let (($x149 (= $x406 true)))
 (let (($x253 (= $x149 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x160 true)))
 (let (($x221 (= $x103 true)))
 (let (($x228 (= $x221 true)))
 (let (($x369 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x8))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x8 (_ bv2 32))) ?x270)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x8 (_ bv3 32))) ?x9)))
 (let ((?x21 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x21 (_ bv1 32))))
 (=> $x115 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x354)))))))))
 ))
 (let (($x293 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x211 (ite $x296 (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x21 (_ bv1 32))))
 (= $x115 (bvuge ?x211 (_ bv1 32))))))))
 ))
 (let (($x411 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x397 (= false false)))
 (let ((?x21 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x286 (= ?x21 (_ bv0 32))))
 (=> $x286 $x397)))))
 ))
 (let (($x93 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x211 (ite $x296 (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x286 (= ?x21 (_ bv0 32))))
 (= $x286 (= ?x211 (_ bv0 32))))))))
 ))
 (let (($x113 (and $x93 $x411)))
 (let (($x60 (and $x113 $x293)))
 (let (($x53 (and $x60 $x369)))
 (let (($x182 (= $x53 true)))
 (let (($x97 (= $x182 true)))
 (let (($x77 (= $x97 true)))
 (let ((?x88 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x247 (bvadd input.dst.llvm-%m ?x88)))
 (let ((?x130 (bvsub ?x247 ?x88)))
 (let (($x339 (ite (bvsge ?x88 (_ bv0 32)) (bvuge ?x247 ?x130) (bvult ?x247 ?x130))))
 (let (($x236 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x263 (ite $x236 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x185 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x381 (bvmul (_ bv4 64) ?x185)))
 (let ((?x98 ((_ extract 63 32) ?x381)))
 (let (($x219 (= ?x98 ?x263)))
 (let (($x380 (and $x219 $x339)))
 (let (($x84 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x89 (and $x84 $x380)))
 (let (($x347 (= true $x89)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x343 (=> $x229 $x347)))
 (let (($x155 (= $x343 true)))
 (let (($x18 (= $x155 true)))
 (let (($x141 (= $x18 true)))
 (let (($x348 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x17 (= $x348 true)))
 (let (($x254 (= $x17 true)))
 (let (($x359 (= $x254 true)))
 (let (($x102 (= $x229 true)))
 (let (($x64 (= $x102 true)))
 (let (($x95 (= $x64 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x91)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x305 (= (_ bv0 32) ?x19)))
 (let ((?x237 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x237)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (and $x239 $x235)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x199 $x58)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x341 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x353 (and $x341 $x289)))
 (let (($x352 (not $x353)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x266 (and $x154 $x379)))
 (let (($x365 (and (not $x266) $x352)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (and $x168 $x362)))
 (let (($x331 (not $x384)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x135 $x158)))
 (let (($x361 (and (not $x41) $x331)))
 (let (($x209 (and (and (and (and (and (and $x361 $x365) $x164) $x198) $x250) $x51) $x305)))
 (let (($x240 (and $x209 $x138)))
 (let (($x44 (= $x240 true)))
 (let (($x100 (= $x44 true)))
 (let (($x67 (= $x100 true)))
 (let (($x337 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x87 (= $x337 true)))
 (let (($x152 (= $x87 true)))
 (let (($x382 (= $x152 true)))
 (let (($x285 (= ?x132 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x178 (= $x285 true)))
 (let (($x299 (= $x178 true)))
 (let ((?x206 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x203 (= (_ bv0 2) ?x206)))
 (let (($x187 (= $x203 true)))
 (let (($x328 (= $x187 true)))
 (let (($x318 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x124 (= $x318 true)))
 (let (($x315 (= $x124 true)))
 (let (($x119 (= $x315 true)))
 (let (($x204 (and $x119 $x328)))
 (let (($x81 (and $x204 $x299)))
 (let (($x122 (and $x81 $x382)))
 (let (($x242 (and $x122 $x67)))
 (let (($x69 (and $x242 $x95)))
 (let (($x372 (and $x69 $x359)))
 (let (($x162 (and $x372 $x141)))
 (let (($x322 (and $x162 $x77)))
 (let (($x301 (and $x322 $x228)))
 (let (($x208 (and $x301 $x253)))
 (let (($x408 (and $x208 $x137)))
 (let (($x334 (and $x408 $x320)))
 (let (($x56 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x265 (and (not $x56) $x334)))
 (let (($x319 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x99 (and $x319 $x265)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x7 (and $x32 $x99)))
 (let (($x128 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x116 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x116 (_ bv1 32))))
 (=> $x398 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x150 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x165 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x165 (_ bv1 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x116 (_ bv1 32))))
 (= $x398 $x298))))))
 ))
 (let (($x16 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x397 (= false false)))
 (let ((?x116 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x388 (= ?x116 (_ bv0 32))))
 (=> $x388 $x397)))))
 ))
 (let (($x188 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x165 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x159 (= ?x165 (_ bv0 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x388 (= ?x116 (_ bv0 32))))
 (= $x388 $x159))))))
 ))
 (let (($x393 (and $x188 $x16)))
 (let (($x349 (and $x393 $x150)))
 (let (($x399 (and $x349 $x128)))
 (let (($x248 (and $x399 $x7)))
 (let (($x146 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x333 (and $x146 $x248)))
 (let (($x314 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x231 (bvadd ?x247 (_ bv3 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x193 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x231)))
 (let (($x90 (or false (or false (and (and true (or $x107 $x193)) (or $x181 $x314))))))
 (let (($x271 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) $x90)))
 (let (($x267 (=> (and $x229 (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32)))) $x90)))
 (let (($x256 (and $x267 $x333)))
 (let (($x321 (=> $x256 $x23)))
 (not $x321))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x571 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x66 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x247 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvadd input.dst.llvm-%m ?x247)))
 (let ((?x246 (bvadd ?x222 (_ bv3 32))))
 (let ((?x432 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x222 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x435 (store ?x432 (bvadd ?x222 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x438 (store ?x435 (bvadd ?x222 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x440 (store ?x438 ?x246 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x565 (concat (select ?x440 (bvadd ?x66 (_ bv2 32))) (concat (select ?x440 (bvadd ?x66 (_ bv1 32))) (select ?x440 ?x66)))))
 (let ((?x133 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var)))
 (let (($x502 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x569 (= (ite $x502 input.spec-%var-i-0.L2%7%bbentry ?x133) (concat (select ?x440 (bvadd ?x66 (_ bv3 32))) ?x565))))
 (let ((?x504 (ite (or (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) $x502) (_ bv1 32) (_ bv0 32))))
 (let (($x528 (bvuge ?x504 (_ bv1 32))))
 (=> $x528 $x569))))))))))))))))
 ))
 (let (($x531 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x396 (bvule (_ bv0 32) Lambda25Var)))
 (let (($x499 (and $x396 (bvult Lambda25Var (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x500 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x502 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x504 (ite (or $x332 $x502) (_ bv1 32) (_ bv0 32))))
 (let (($x528 (bvuge ?x504 (_ bv1 32))))
 (= $x528 (bvuge ?x500 (_ bv1 32)))))))))))
 ))
 (let (($x510 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x176 (= false false)))
 (let (($x502 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x504 (ite (or $x332 $x502) (_ bv1 32) (_ bv0 32))))
 (let (($x505 (= ?x504 (_ bv0 32))))
 (=> $x505 $x176)))))))
 ))
 (let (($x507 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x396 (bvule (_ bv0 32) Lambda25Var)))
 (let (($x499 (and $x396 (bvult Lambda25Var (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x500 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x502 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x504 (ite (or $x332 $x502) (_ bv1 32) (_ bv0 32))))
 (let (($x505 (= ?x504 (_ bv0 32))))
 (= $x505 (= ?x500 (_ bv0 32)))))))))))
 ))
 (let (($x511 (and $x507 $x510)))
 (let (($x532 (and $x511 $x531)))
 (let (($x572 (and $x532 $x571)))
 (let (($x573 (= $x572 true)))
 (let (($x574 (= $x573 true)))
 (let ((?x13 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x213 (bvneg ?x13)))
 (let (($x218 (= ?x213 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x368 (= $x218 true)))
 (let (($x291 (= $x368 true)))
 (let ((?x366 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x217 (= (_ bv0 2) ?x366)))
 (let (($x226 (= $x217 true)))
 (let (($x38 (= $x226 true)))
 (let (($x404 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x403 (= $x404 true)))
 (let (($x409 (= $x403 true)))
 (let (($x42 (= $x409 true)))
 (let (($x371 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x12 (= $x371 true)))
 (let (($x36 (= $x12 true)))
 (let (($x157 (= $x36 true)))
 (let (($x279 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x302 (= $x279 true)))
 (let (($x127 (= $x302 true)))
 (let (($x173 (= $x127 true)))
 (let (($x191 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x66 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x66))))
 (let ((?x370 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv2 32))) ?x39)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv3 32))) ?x370)))
 (let ((?x133 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var)))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x78 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x78 (_ bv1 32))))
 (=> $x144 (= ?x133 ?x171)))))))))))
 ))
 (let (($x317 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x396 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x136 (ite (and $x396 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x78 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x78 (_ bv1 32))))
 (= $x144 (bvuge ?x136 (_ bv1 32)))))))))
 ))
 (let (($x43 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x176 (= false false)))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x78 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x78 (_ bv0 32))))
 (=> $x28 $x176))))))
 ))
 (let (($x175 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x396 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x136 (ite (and $x396 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x78 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x78 (_ bv0 32))))
 (= $x28 (= ?x136 (_ bv0 32)))))))))
 ))
 (let (($x170 (and $x175 $x43)))
 (let (($x249 (and $x170 $x317)))
 (let (($x205 (and $x249 $x191)))
 (let (($x269 (= $x205 true)))
 (let (($x15 (= $x269 true)))
 (let (($x232 (= $x15 true)))
 (let ((?x247 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvadd input.dst.llvm-%m ?x247)))
 (let ((?x6 (bvsub ?x222 ?x247)))
 (let (($x201 (ite (bvsge ?x247 (_ bv0 32)) (bvuge ?x222 ?x6) (bvult ?x222 ?x6))))
 (let (($x60 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x148 (ite $x60 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x330 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x260 (bvmul (_ bv4 64) ?x330)))
 (let ((?x293 ((_ extract 63 32) ?x260)))
 (let (($x255 (= ?x293 ?x148)))
 (let (($x30 (and $x255 $x201)))
 (let (($x113 (= (bvand ?x222 (_ bv4294967292 32)) ?x222)))
 (let (($x20 (and $x113 $x30)))
 (let (($x63 (= true $x20)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x309 (=> $x229 $x63)))
 (let (($x374 (= $x309 true)))
 (let (($x270 (= $x374 true)))
 (let (($x9 (= $x270 true)))
 (let (($x296 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x211 (= $x296 true)))
 (let (($x82 (= $x211 true)))
 (let (($x117 (= $x82 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x21 (= $x123 true)))
 (let (($x286 (= $x21 true)))
 (let (($x55 (= $x286 true)))
 (let (($x343 (= $x229 true)))
 (let (($x155 (= $x343 true)))
 (let (($x18 (= $x155 true)))
 (let ((?x381 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x381)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x223)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x254 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x359 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x254)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x372 (and $x17 $x359)))
 (let (($x348 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x348 $x372)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x138 $x240)))
 (let (($x100 (not $x44)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x305 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x305 $x209)))
 (let (($x242 (and (not $x91) $x100)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x250 $x156)))
 (let (($x51 (not $x237)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x72 $x235)))
 (let (($x19 (and (not $x58) $x51)))
 (let (($x342 (and (and (and (and (and (and $x19 $x242) $x64) $x69) $x101) $x84) $x185)))
 (let (($x340 (and $x342 $x98)))
 (let (($x339 (= $x340 true)))
 (let (($x380 (= $x339 true)))
 (let (($x89 (= $x380 true)))
 (let ((?x167 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x356 (bvneg ?x167)))
 (let (($x198 (= ?x356 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x52 (= $x198 true)))
 (let (($x199 (= $x52 true)))
 (let (($x164 (= ?x356 input.dst.llvm-%n)))
 (let (($x46 (= $x164 true)))
 (let (($x85 (= $x46 true)))
 (let (($x239 (and $x85 $x199)))
 (let (($x347 (and $x239 $x89)))
 (let (($x141 (and $x347 $x18)))
 (let (($x367 (and $x141 $x55)))
 (let (($x93 (and $x367 $x117)))
 (let (($x354 (and $x93 $x9)))
 (let (($x40 (and $x354 $x232)))
 (let (($x145 (and $x40 $x173)))
 (let (($x169 (and $x145 $x157)))
 (let (($x126 (and $x169 $x42)))
 (let (($x245 (and $x126 $x38)))
 (let (($x272 (and $x245 $x291)))
 (let (($x352 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x10 (and (not $x352) $x272)))
 (let (($x289 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x57 (and $x289 $x10)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x385 (and $x266 $x57)))
 (let (($x361 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x318 (_ bv1 32))))
 (=> $x337 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x152 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x399 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x399 (_ bv1 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x318 (_ bv1 32))))
 (= $x337 $x178))))))
 ))
 (let (($x187 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x176 (= false false)))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x318 (_ bv0 32))))
 (=> $x124 $x176)))))
 ))
 (let (($x119 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x399 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x179 (= ?x399 (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x318 (_ bv0 32))))
 (= $x124 $x179))))))
 ))
 (let (($x328 (and $x119 $x187)))
 (let (($x382 (and $x328 $x152)))
 (let (($x154 (and $x382 $x361)))
 (let (($x338 (and $x154 $x385)))
 (let (($x392 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x376 (and $x392 $x338)))
 (let (($x134 (bvugt ?x222 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x246 (bvadd ?x222 (_ bv3 32))))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x246)))
 (let (($x216 (bvugt ?x222 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x246)))
 (let (($x346 (or false (or false (and (and true (or $x287 $x216)) (or $x215 $x134))))))
 (let (($x105 (=> (bvule ?x222 (bvsub (bvadd ?x222 (_ bv4 32)) (_ bv1 32))) $x346)))
 (let (($x401 (=> (and $x229 (bvule ?x222 (bvsub (bvadd ?x222 (_ bv4 32)) (_ bv1 32)))) $x346)))
 (let (($x386 (and $x401 $x376)))
 (let (($x575 (=> $x386 $x574)))
 (not $x575)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x571 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x66 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x247 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvadd input.dst.llvm-%m ?x247)))
 (let ((?x246 (bvadd ?x222 (_ bv3 32))))
 (let ((?x432 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x222 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x435 (store ?x432 (bvadd ?x222 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x438 (store ?x435 (bvadd ?x222 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x440 (store ?x438 ?x246 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x565 (concat (select ?x440 (bvadd ?x66 (_ bv2 32))) (concat (select ?x440 (bvadd ?x66 (_ bv1 32))) (select ?x440 ?x66)))))
 (let ((?x133 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var)))
 (let (($x502 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x569 (= (ite $x502 input.spec-%var-i-0.L2%7%bbentry ?x133) (concat (select ?x440 (bvadd ?x66 (_ bv3 32))) ?x565))))
 (let ((?x504 (ite (or (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) $x502) (_ bv1 32) (_ bv0 32))))
 (let (($x528 (bvuge ?x504 (_ bv1 32))))
 (=> $x528 $x569))))))))))))))))
 ))
 (let (($x531 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x396 (bvule (_ bv0 32) Lambda25Var)))
 (let (($x499 (and $x396 (bvult Lambda25Var (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x500 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x502 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x504 (ite (or $x332 $x502) (_ bv1 32) (_ bv0 32))))
 (let (($x528 (bvuge ?x504 (_ bv1 32))))
 (= $x528 (bvuge ?x500 (_ bv1 32)))))))))))
 ))
 (let (($x510 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x176 (= false false)))
 (let (($x502 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x504 (ite (or $x332 $x502) (_ bv1 32) (_ bv0 32))))
 (let (($x505 (= ?x504 (_ bv0 32))))
 (=> $x505 $x176)))))))
 ))
 (let (($x507 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x396 (bvule (_ bv0 32) Lambda25Var)))
 (let (($x499 (and $x396 (bvult Lambda25Var (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x500 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x502 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x504 (ite (or $x332 $x502) (_ bv1 32) (_ bv0 32))))
 (let (($x505 (= ?x504 (_ bv0 32))))
 (= $x505 (= ?x500 (_ bv0 32)))))))))))
 ))
 (let (($x511 (and $x507 $x510)))
 (let (($x532 (and $x511 $x531)))
 (let (($x572 (and $x532 $x571)))
 (let (($x573 (= $x572 true)))
 (let (($x574 (= $x573 true)))
 (let ((?x13 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x213 (bvneg ?x13)))
 (let (($x218 (= ?x213 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x368 (= $x218 true)))
 (let (($x291 (= $x368 true)))
 (let ((?x366 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x217 (= (_ bv0 2) ?x366)))
 (let (($x226 (= $x217 true)))
 (let (($x38 (= $x226 true)))
 (let (($x404 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x403 (= $x404 true)))
 (let (($x409 (= $x403 true)))
 (let (($x42 (= $x409 true)))
 (let (($x371 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x12 (= $x371 true)))
 (let (($x36 (= $x12 true)))
 (let (($x157 (= $x36 true)))
 (let (($x279 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x302 (= $x279 true)))
 (let (($x127 (= $x302 true)))
 (let (($x173 (= $x127 true)))
 (let (($x191 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x66 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x66))))
 (let ((?x370 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv2 32))) ?x39)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv3 32))) ?x370)))
 (let ((?x133 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var)))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x78 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x78 (_ bv1 32))))
 (=> $x144 (= ?x133 ?x171)))))))))))
 ))
 (let (($x317 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x396 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x136 (ite (and $x396 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x78 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x78 (_ bv1 32))))
 (= $x144 (bvuge ?x136 (_ bv1 32)))))))))
 ))
 (let (($x43 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x176 (= false false)))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x78 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x78 (_ bv0 32))))
 (=> $x28 $x176))))))
 ))
 (let (($x175 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x396 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x136 (ite (and $x396 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x78 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x78 (_ bv0 32))))
 (= $x28 (= ?x136 (_ bv0 32)))))))))
 ))
 (let (($x170 (and $x175 $x43)))
 (let (($x249 (and $x170 $x317)))
 (let (($x205 (and $x249 $x191)))
 (let (($x269 (= $x205 true)))
 (let (($x15 (= $x269 true)))
 (let (($x232 (= $x15 true)))
 (let ((?x247 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvadd input.dst.llvm-%m ?x247)))
 (let ((?x6 (bvsub ?x222 ?x247)))
 (let (($x201 (ite (bvsge ?x247 (_ bv0 32)) (bvuge ?x222 ?x6) (bvult ?x222 ?x6))))
 (let (($x60 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x148 (ite $x60 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x330 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x260 (bvmul (_ bv4 64) ?x330)))
 (let ((?x293 ((_ extract 63 32) ?x260)))
 (let (($x255 (= ?x293 ?x148)))
 (let (($x30 (and $x255 $x201)))
 (let (($x113 (= (bvand ?x222 (_ bv4294967292 32)) ?x222)))
 (let (($x20 (and $x113 $x30)))
 (let (($x63 (= true $x20)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x309 (=> $x229 $x63)))
 (let (($x374 (= $x309 true)))
 (let (($x270 (= $x374 true)))
 (let (($x9 (= $x270 true)))
 (let (($x296 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x211 (= $x296 true)))
 (let (($x82 (= $x211 true)))
 (let (($x117 (= $x82 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x21 (= $x123 true)))
 (let (($x286 (= $x21 true)))
 (let (($x55 (= $x286 true)))
 (let (($x343 (= $x229 true)))
 (let (($x155 (= $x343 true)))
 (let (($x18 (= $x155 true)))
 (let ((?x381 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x381)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x223)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x254 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x359 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x254)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x372 (and $x17 $x359)))
 (let (($x348 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x348 $x372)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x138 $x240)))
 (let (($x100 (not $x44)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x305 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x305 $x209)))
 (let (($x242 (and (not $x91) $x100)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x250 $x156)))
 (let (($x51 (not $x237)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x72 $x235)))
 (let (($x19 (and (not $x58) $x51)))
 (let (($x342 (and (and (and (and (and (and $x19 $x242) $x64) $x69) $x101) $x84) $x185)))
 (let (($x340 (and $x342 $x98)))
 (let (($x339 (= $x340 true)))
 (let (($x380 (= $x339 true)))
 (let (($x89 (= $x380 true)))
 (let ((?x167 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x356 (bvneg ?x167)))
 (let (($x198 (= ?x356 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x52 (= $x198 true)))
 (let (($x199 (= $x52 true)))
 (let (($x164 (= ?x356 input.dst.llvm-%n)))
 (let (($x46 (= $x164 true)))
 (let (($x85 (= $x46 true)))
 (let (($x239 (and $x85 $x199)))
 (let (($x347 (and $x239 $x89)))
 (let (($x141 (and $x347 $x18)))
 (let (($x367 (and $x141 $x55)))
 (let (($x93 (and $x367 $x117)))
 (let (($x354 (and $x93 $x9)))
 (let (($x40 (and $x354 $x232)))
 (let (($x145 (and $x40 $x173)))
 (let (($x169 (and $x145 $x157)))
 (let (($x126 (and $x169 $x42)))
 (let (($x245 (and $x126 $x38)))
 (let (($x272 (and $x245 $x291)))
 (let (($x352 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x10 (and (not $x352) $x272)))
 (let (($x289 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x57 (and $x289 $x10)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x385 (and $x266 $x57)))
 (let (($x361 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x318 (_ bv1 32))))
 (=> $x337 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x152 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x399 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x399 (_ bv1 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x318 (_ bv1 32))))
 (= $x337 $x178))))))
 ))
 (let (($x187 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x176 (= false false)))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x318 (_ bv0 32))))
 (=> $x124 $x176)))))
 ))
 (let (($x119 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x399 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x179 (= ?x399 (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x318 (_ bv0 32))))
 (= $x124 $x179))))))
 ))
 (let (($x328 (and $x119 $x187)))
 (let (($x382 (and $x328 $x152)))
 (let (($x154 (and $x382 $x361)))
 (let (($x338 (and $x154 $x385)))
 (let (($x392 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x376 (and $x392 $x338)))
 (let (($x134 (bvugt ?x222 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x246 (bvadd ?x222 (_ bv3 32))))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x246)))
 (let (($x216 (bvugt ?x222 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x246)))
 (let (($x346 (or false (or false (and (and true (or $x287 $x216)) (or $x215 $x134))))))
 (let (($x105 (=> (bvule ?x222 (bvsub (bvadd ?x222 (_ bv4 32)) (_ bv1 32))) $x346)))
 (let (($x401 (=> (and $x229 (bvule ?x222 (bvsub (bvadd ?x222 (_ bv4 32)) (_ bv1 32)))) $x346)))
 (let (($x386 (and $x401 $x376)))
 (let (($x575 (=> $x386 $x574)))
 (not $x575)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x391 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x31 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x192 (bvmul (_ bv4294967295 32) ?x31)))
 (let ((?x402 (bvneg ?x192)))
 (let (($x387 (= ?x402 ?x391)))
 (let (($x389 (= $x387 true)))
 (let ((?x106 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x273 (bvneg ?x106)))
 (let (($x363 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x373 (= $x363 true)))
 (let (($x262 (= $x373 true)))
 (let (($x329 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x350 (= $x329 true)))
 (let (($x172 (= $x350 true)))
 (let (($x278 (= $x172 true)))
 (let (($x228 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x301 (= $x228 true)))
 (let (($x234 (= $x301 true)))
 (let (($x357 (= $x234 true)))
 (let (($x97 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x77 (= $x97 true)))
 (let (($x160 (= $x77 true)))
 (let (($x103 (= $x160 true)))
 (let (($x257 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x253))))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x253 (_ bv2 32))) ?x11)))
 (let ((?x140 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x253 (_ bv3 32))) ?x321)))
 (let ((?x5 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x5 (_ bv1 32))))
 (=> $x70 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x140)))))))))
 ))
 (let (($x35 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x112 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x49 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x5 (_ bv1 32))))
 (= $x70 (bvuge ?x49 (_ bv1 32))))))))
 ))
 (let (($x116 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x85 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x5 (_ bv0 32))))
 (=> $x174 $x85)))))
 ))
 (let (($x230 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x112 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x49 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x5 (_ bv0 32))))
 (= $x174 (= ?x49 (_ bv0 32))))))))
 ))
 (let (($x388 (and $x230 $x116)))
 (let (($x128 (and $x388 $x35)))
 (let (($x197 (and $x128 $x257)))
 (let (($x108 (= $x197 true)))
 (let (($x147 (= $x108 true)))
 (let (($x322 (= $x147 true)))
 (let ((?x222 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x195 (bvadd input.dst.llvm-%m ?x222)))
 (let ((?x335 (bvsub ?x195 ?x222)))
 (let (($x269 (ite (bvsge ?x222 (_ bv0 32)) (bvuge ?x195 ?x335) (bvult ?x195 ?x335))))
 (let (($x39 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x370 (ite $x39 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x45 (bvmul (_ bv4 64) ?x300)))
 (let ((?x166 ((_ extract 63 32) ?x45)))
 (let (($x171 (= ?x166 ?x370)))
 (let (($x15 (and $x171 $x269)))
 (let (($x220 (= (bvand ?x195 (_ bv4294967292 32)) ?x195)))
 (let (($x232 (and $x220 $x15)))
 (let (($x40 (= true $x232)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x279 (=> $x229 $x40)))
 (let (($x302 (= $x279 true)))
 (let (($x127 (= $x302 true)))
 (let (($x173 (= $x127 true)))
 (let (($x133 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x414 (= $x133 true)))
 (let (($x326 (= $x414 true)))
 (let (($x66 (= $x326 true)))
 (let (($x144 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x345 (= $x144 true)))
 (let (($x34 (= $x345 true)))
 (let (($x317 (= $x34 true)))
 (let (($x25 (= $x229 true)))
 (let (($x175 (= $x25 true)))
 (let (($x274 (= $x175 true)))
 (let ((?x309 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x374 (= (_ bv0 32) ?x309)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x20)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x255 $x6)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (and $x148 $x151)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x407 (and $x117 $x93)))
 (let (($x411 (not $x407)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x296 $x211)))
 (let (($x115 (and (not $x82) $x411)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x162 $x123)))
 (let (($x286 (not $x21)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x155 $x18)))
 (let (($x367 (and (not $x141) $x286)))
 (let (($x28 (and (and (and (and (and (and $x367 $x115) $x260) $x60) $x288) $x30) $x63)))
 (let (($x396 (and $x28 $x374)))
 (let (($x290 (= $x396 true)))
 (let (($x394 (= $x290 true)))
 (let (($x136 (= $x394 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x125)))
 (let (($x380 (= ?x177 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x89 (= $x380 true)))
 (let (($x347 (= $x89 true)))
 (let ((?x342 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x381 (= (_ bv0 2) ?x342)))
 (let (($x98 (= $x381 true)))
 (let (($x340 (= $x98 true)))
 (let (($x84 (= ?x177 input.dst.llvm-%n)))
 (let (($x130 (= $x84 true)))
 (let (($x223 (= $x130 true)))
 (let (($x339 (and $x223 $x340)))
 (let (($x343 (and $x339 $x347)))
 (let (($x395 (and $x343 $x136)))
 (let (($x43 (and $x395 $x274)))
 (let (($x249 (and $x43 $x317)))
 (let (($x14 (and $x249 $x66)))
 (let (($x145 (and $x14 $x173)))
 (let (($x182 (and $x145 $x322)))
 (let (($x221 (and $x182 $x103)))
 (let (($x364 (and $x221 $x357)))
 (let (($x336 (and $x364 $x278)))
 (let (($x184 (and $x336 $x262)))
 (let (($x372 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x277 (and (not $x372) $x184)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x190 (and $x254 $x277)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x355 (and $x219 $x190)))
 (let (($x263 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x167 (_ bv1 32))))
 (=> $x19 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x209 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x154 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x154 (_ bv1 32))))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x167 (_ bv1 32))))
 (= $x19 $x156))))))
 ))
 (let (($x199 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x85 (= false false)))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x167 (_ bv0 32))))
 (=> $x356 $x85)))))
 ))
 (let (($x46 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x154 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x360 (= ?x154 (_ bv0 32))))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x167 (_ bv0 32))))
 (= $x356 $x360))))))
 ))
 (let (($x239 (and $x46 $x199)))
 (let (($x91 (and $x239 $x209)))
 (let (($x95 (and $x91 $x263)))
 (let (($x202 (and $x95 $x355)))
 (let (($x323 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x200 (and $x323 $x202)))
 (let (($x267 (bvugt ?x195 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x181 (bvadd ?x195 (_ bv3 32))))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x314 (bvugt ?x195 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x181)))
 (let (($x268 (or false (or false (and (and true (or $x186 $x314)) (or $x271 $x267))))))
 (let (($x94 (=> (bvule ?x195 (bvsub (bvadd ?x195 (_ bv4 32)) (_ bv1 32))) $x268)))
 (let (($x231 (=> (and $x229 (bvule ?x195 (bvsub (bvadd ?x195 (_ bv4 32)) (_ bv1 32)))) $x268)))
 (let (($x29 (and $x231 $x200)))
 (let (($x79 (=> $x29 $x389)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x391 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x31 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x192 (bvmul (_ bv4294967295 32) ?x31)))
 (let ((?x402 (bvneg ?x192)))
 (let (($x387 (= ?x402 ?x391)))
 (let (($x389 (= $x387 true)))
 (let ((?x106 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x273 (bvneg ?x106)))
 (let (($x363 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x373 (= $x363 true)))
 (let (($x262 (= $x373 true)))
 (let (($x329 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x350 (= $x329 true)))
 (let (($x172 (= $x350 true)))
 (let (($x278 (= $x172 true)))
 (let (($x228 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x301 (= $x228 true)))
 (let (($x234 (= $x301 true)))
 (let (($x357 (= $x234 true)))
 (let (($x97 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x77 (= $x97 true)))
 (let (($x160 (= $x77 true)))
 (let (($x103 (= $x160 true)))
 (let (($x257 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x253))))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x253 (_ bv2 32))) ?x11)))
 (let ((?x140 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x253 (_ bv3 32))) ?x321)))
 (let ((?x5 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x5 (_ bv1 32))))
 (=> $x70 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x140)))))))))
 ))
 (let (($x35 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x112 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x49 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x5 (_ bv1 32))))
 (= $x70 (bvuge ?x49 (_ bv1 32))))))))
 ))
 (let (($x116 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x85 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x5 (_ bv0 32))))
 (=> $x174 $x85)))))
 ))
 (let (($x230 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x112 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x49 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x5 (_ bv0 32))))
 (= $x174 (= ?x49 (_ bv0 32))))))))
 ))
 (let (($x388 (and $x230 $x116)))
 (let (($x128 (and $x388 $x35)))
 (let (($x197 (and $x128 $x257)))
 (let (($x108 (= $x197 true)))
 (let (($x147 (= $x108 true)))
 (let (($x322 (= $x147 true)))
 (let ((?x222 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x195 (bvadd input.dst.llvm-%m ?x222)))
 (let ((?x335 (bvsub ?x195 ?x222)))
 (let (($x269 (ite (bvsge ?x222 (_ bv0 32)) (bvuge ?x195 ?x335) (bvult ?x195 ?x335))))
 (let (($x39 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x370 (ite $x39 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x45 (bvmul (_ bv4 64) ?x300)))
 (let ((?x166 ((_ extract 63 32) ?x45)))
 (let (($x171 (= ?x166 ?x370)))
 (let (($x15 (and $x171 $x269)))
 (let (($x220 (= (bvand ?x195 (_ bv4294967292 32)) ?x195)))
 (let (($x232 (and $x220 $x15)))
 (let (($x40 (= true $x232)))
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x279 (=> $x229 $x40)))
 (let (($x302 (= $x279 true)))
 (let (($x127 (= $x302 true)))
 (let (($x173 (= $x127 true)))
 (let (($x133 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x414 (= $x133 true)))
 (let (($x326 (= $x414 true)))
 (let (($x66 (= $x326 true)))
 (let (($x144 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x345 (= $x144 true)))
 (let (($x34 (= $x345 true)))
 (let (($x317 (= $x34 true)))
 (let (($x25 (= $x229 true)))
 (let (($x175 (= $x25 true)))
 (let (($x274 (= $x175 true)))
 (let ((?x309 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x374 (= (_ bv0 32) ?x309)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x20)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x255 $x6)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (and $x148 $x151)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x407 (and $x117 $x93)))
 (let (($x411 (not $x407)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x296 $x211)))
 (let (($x115 (and (not $x82) $x411)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x162 $x123)))
 (let (($x286 (not $x21)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x155 $x18)))
 (let (($x367 (and (not $x141) $x286)))
 (let (($x28 (and (and (and (and (and (and $x367 $x115) $x260) $x60) $x288) $x30) $x63)))
 (let (($x396 (and $x28 $x374)))
 (let (($x290 (= $x396 true)))
 (let (($x394 (= $x290 true)))
 (let (($x136 (= $x394 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x125)))
 (let (($x380 (= ?x177 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x89 (= $x380 true)))
 (let (($x347 (= $x89 true)))
 (let ((?x342 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x381 (= (_ bv0 2) ?x342)))
 (let (($x98 (= $x381 true)))
 (let (($x340 (= $x98 true)))
 (let (($x84 (= ?x177 input.dst.llvm-%n)))
 (let (($x130 (= $x84 true)))
 (let (($x223 (= $x130 true)))
 (let (($x339 (and $x223 $x340)))
 (let (($x343 (and $x339 $x347)))
 (let (($x395 (and $x343 $x136)))
 (let (($x43 (and $x395 $x274)))
 (let (($x249 (and $x43 $x317)))
 (let (($x14 (and $x249 $x66)))
 (let (($x145 (and $x14 $x173)))
 (let (($x182 (and $x145 $x322)))
 (let (($x221 (and $x182 $x103)))
 (let (($x364 (and $x221 $x357)))
 (let (($x336 (and $x364 $x278)))
 (let (($x184 (and $x336 $x262)))
 (let (($x372 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x277 (and (not $x372) $x184)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x190 (and $x254 $x277)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x355 (and $x219 $x190)))
 (let (($x263 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x167 (_ bv1 32))))
 (=> $x19 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x209 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x154 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x154 (_ bv1 32))))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x167 (_ bv1 32))))
 (= $x19 $x156))))))
 ))
 (let (($x199 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x85 (= false false)))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x167 (_ bv0 32))))
 (=> $x356 $x85)))))
 ))
 (let (($x46 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x154 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x360 (= ?x154 (_ bv0 32))))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x167 (_ bv0 32))))
 (= $x356 $x360))))))
 ))
 (let (($x239 (and $x46 $x199)))
 (let (($x91 (and $x239 $x209)))
 (let (($x95 (and $x91 $x263)))
 (let (($x202 (and $x95 $x355)))
 (let (($x323 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x200 (and $x323 $x202)))
 (let (($x267 (bvugt ?x195 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x181 (bvadd ?x195 (_ bv3 32))))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x314 (bvugt ?x195 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x181)))
 (let (($x268 (or false (or false (and (and true (or $x186 $x314)) (or $x271 $x267))))))
 (let (($x94 (=> (bvule ?x195 (bvsub (bvadd ?x195 (_ bv4 32)) (_ bv1 32))) $x268)))
 (let (($x231 (=> (and $x229 (bvule ?x195 (bvsub (bvadd ?x195 (_ bv4 32)) (_ bv1 32)))) $x268)))
 (let (($x29 (and $x231 $x200)))
 (let (($x79 (=> $x29 $x389)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x16 (not $x229)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x47 (not $x24)))
 (let (($x413 (or $x47 $x16)))
 (let (($x188 (= $x413 true)))
 (let (($x390 (= $x188 true)))
 (let ((?x208 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x415 (bvneg ?x208)))
 (let (($x311 (= ?x415 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x311 true)))
 (let (($x65 (= $x207 true)))
 (let ((?x570 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x572 (bvneg ?x570)))
 (let (($x576 (= ?x572 input.dst.llvm-%n)))
 (let (($x275 (= $x576 true)))
 (let (($x307 (= $x275 true)))
 (let (($x571 (= ?x572 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x573 (= $x571 true)))
 (let (($x574 (= $x573 true)))
 (let (($x440 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x566 (= $x440 true)))
 (let (($x439 (= $x566 true)))
 (let (($x564 (= $x439 true)))
 (let (($x438 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x565 (= $x438 true)))
 (let (($x567 (= $x565 true)))
 (let (($x562 (= $x567 true)))
 (let (($x434 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x432 (= $x434 true)))
 (let (($x433 (= $x432 true)))
 (let (($x435 (= $x433 true)))
 (let (($x126 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x568 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x511 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x568 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x568))))
 (let ((?x531 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x568 (_ bv2 32))) ?x511)))
 (let ((?x169 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x568 (_ bv3 32))) ?x531)))
 (let ((?x179 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x179 (_ bv1 32))))
 (=> $x198 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x169)))))))))
 ))
 (let (($x235 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x318 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let ((?x179 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x179 (_ bv1 32))))
 (= $x198 (bvuge ?x318 (_ bv1 32))))))))
 ))
 (let (($x187 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (= false false)))
 (let ((?x179 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x179 (_ bv0 32))))
 (=> $x382 $x223)))))
 ))
 (let (($x384 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x318 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let ((?x179 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x179 (_ bv0 32))))
 (= $x382 (= ?x318 (_ bv0 32))))))))
 ))
 (let (($x315 (and $x384 $x187)))
 (let (($x58 (and $x315 $x235)))
 (let (($x143 (and $x58 $x126)))
 (let (($x366 (= $x143 true)))
 (let (($x217 (= $x366 true)))
 (let (($x437 (= $x217 true)))
 (let (($x302 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x302 true)))
 (let (($x173 (= $x127 true)))
 (let (($x145 (= $x173 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x269 (= $x205 true)))
 (let (($x15 (= $x269 true)))
 (let (($x232 (= $x15 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x283 (= (_ bv0 32) ?x14)))
 (let ((?x326 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x326)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x414 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let ((?x345 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x345)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (and $x144 $x34)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (and $x170 $x317)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x396 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x374 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (and $x374 $x396)))
 (let (($x394 (not $x290)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x309 (and $x63 $x28)))
 (let (($x395 (and (not $x309) $x394)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x288 $x332)))
 (let (($x30 (not $x201)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x8 $x6)))
 (let (($x20 (and (not $x151) $x30)))
 (let (($x166 (and (and (and (and (and (and $x20 $x395) $x175) $x43) $x249) $x414) $x66)))
 (let (($x39 (and $x166 $x283)))
 (let (($x370 (= $x39 true)))
 (let (($x171 (= $x370 true)))
 (let (($x161 (= $x171 true)))
 (let ((?x60 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x354 (= (_ bv0 2) ?x60)))
 (let (($x148 (= $x354 true)))
 (let (($x255 (= $x148 true)))
 (let (($x335 (and $x255 $x161)))
 (let (($x40 (and $x335 $x232)))
 (let (($x183 (and $x40 $x145)))
 (let (($x430 (and $x183 $x437)))
 (let (($x436 (and $x430 $x435)))
 (let (($x561 (and $x436 $x562)))
 (let (($x563 (and $x561 $x564)))
 (let (($x575 (and $x563 $x574)))
 (let (($x406 (and $x575 $x307)))
 (let (($x264 (and $x406 $x65)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x165 (and $x9 $x264)))
 (let (($x270 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x159 (and $x270 $x165)))
 (let (($x407 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x125 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x125 (_ bv1 32))))
 (=> $x141 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x162 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x95 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x95 (_ bv1 32))))
 (let ((?x125 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x125 (_ bv1 32))))
 (= $x141 $x343))))))
 ))
 (let (($x381 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (= false false)))
 (let ((?x125 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x125 (_ bv0 32))))
 (=> $x177 $x223)))))
 ))
 (let (($x130 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x95 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x348 (= ?x95 (_ bv0 32))))
 (let ((?x125 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x125 (_ bv0 32))))
 (= $x177 $x348))))))
 ))
 (let (($x98 (and $x130 $x381)))
 (let (($x123 (and $x98 $x162)))
 (let (($x411 (and $x123 $x407)))
 (let (($x349 (and $x411 $x159)))
 (let (($x365 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x92 (and $x365 $x349)))
 (let ((?x195 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x107 (bvadd input.dst.llvm-%m ?x195)))
 (let (($x401 (bvugt ?x107 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x215 (bvadd ?x107 (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x134 (bvugt ?x107 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x146 (or false (or false (and (and true (or $x297 $x134)) (or $x105 $x401))))))
 (let (($x383 (=> (bvule ?x107 (bvsub (bvadd ?x107 (_ bv4 32)) (_ bv1 32))) $x146)))
 (let (($x246 (=> (and $x229 (bvule ?x107 (bvsub (bvadd ?x107 (_ bv4 32)) (_ bv1 32)))) $x146)))
 (let (($x400 (and $x246 $x92)))
 (let (($x393 (=> $x400 $x390)))
 (not $x393)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x16 (not $x229)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x47 (not $x24)))
 (let (($x413 (or $x47 $x16)))
 (let (($x188 (= $x413 true)))
 (let (($x390 (= $x188 true)))
 (let ((?x208 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x415 (bvneg ?x208)))
 (let (($x311 (= ?x415 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x311 true)))
 (let (($x65 (= $x207 true)))
 (let ((?x570 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x572 (bvneg ?x570)))
 (let (($x576 (= ?x572 input.dst.llvm-%n)))
 (let (($x275 (= $x576 true)))
 (let (($x307 (= $x275 true)))
 (let (($x571 (= ?x572 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x573 (= $x571 true)))
 (let (($x574 (= $x573 true)))
 (let (($x440 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x566 (= $x440 true)))
 (let (($x439 (= $x566 true)))
 (let (($x564 (= $x439 true)))
 (let (($x438 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x565 (= $x438 true)))
 (let (($x567 (= $x565 true)))
 (let (($x562 (= $x567 true)))
 (let (($x434 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x432 (= $x434 true)))
 (let (($x433 (= $x432 true)))
 (let (($x435 (= $x433 true)))
 (let (($x126 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x568 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x511 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x568 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x568))))
 (let ((?x531 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x568 (_ bv2 32))) ?x511)))
 (let ((?x169 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x568 (_ bv3 32))) ?x531)))
 (let ((?x179 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x179 (_ bv1 32))))
 (=> $x198 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x169)))))))))
 ))
 (let (($x235 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x318 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let ((?x179 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x179 (_ bv1 32))))
 (= $x198 (bvuge ?x318 (_ bv1 32))))))))
 ))
 (let (($x187 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (= false false)))
 (let ((?x179 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x179 (_ bv0 32))))
 (=> $x382 $x223)))))
 ))
 (let (($x384 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x318 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let ((?x179 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x179 (_ bv0 32))))
 (= $x382 (= ?x318 (_ bv0 32))))))))
 ))
 (let (($x315 (and $x384 $x187)))
 (let (($x58 (and $x315 $x235)))
 (let (($x143 (and $x58 $x126)))
 (let (($x366 (= $x143 true)))
 (let (($x217 (= $x366 true)))
 (let (($x437 (= $x217 true)))
 (let (($x302 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x302 true)))
 (let (($x173 (= $x127 true)))
 (let (($x145 (= $x173 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x269 (= $x205 true)))
 (let (($x15 (= $x269 true)))
 (let (($x232 (= $x15 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x283 (= (_ bv0 32) ?x14)))
 (let ((?x326 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x326)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x414 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let ((?x345 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x345)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (and $x144 $x34)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (and $x170 $x317)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x396 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x374 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (and $x374 $x396)))
 (let (($x394 (not $x290)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x309 (and $x63 $x28)))
 (let (($x395 (and (not $x309) $x394)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x288 $x332)))
 (let (($x30 (not $x201)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x8 $x6)))
 (let (($x20 (and (not $x151) $x30)))
 (let (($x166 (and (and (and (and (and (and $x20 $x395) $x175) $x43) $x249) $x414) $x66)))
 (let (($x39 (and $x166 $x283)))
 (let (($x370 (= $x39 true)))
 (let (($x171 (= $x370 true)))
 (let (($x161 (= $x171 true)))
 (let ((?x60 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x354 (= (_ bv0 2) ?x60)))
 (let (($x148 (= $x354 true)))
 (let (($x255 (= $x148 true)))
 (let (($x335 (and $x255 $x161)))
 (let (($x40 (and $x335 $x232)))
 (let (($x183 (and $x40 $x145)))
 (let (($x430 (and $x183 $x437)))
 (let (($x436 (and $x430 $x435)))
 (let (($x561 (and $x436 $x562)))
 (let (($x563 (and $x561 $x564)))
 (let (($x575 (and $x563 $x574)))
 (let (($x406 (and $x575 $x307)))
 (let (($x264 (and $x406 $x65)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x165 (and $x9 $x264)))
 (let (($x270 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x159 (and $x270 $x165)))
 (let (($x407 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x125 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x125 (_ bv1 32))))
 (=> $x141 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x162 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x95 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x95 (_ bv1 32))))
 (let ((?x125 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x125 (_ bv1 32))))
 (= $x141 $x343))))))
 ))
 (let (($x381 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (= false false)))
 (let ((?x125 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x125 (_ bv0 32))))
 (=> $x177 $x223)))))
 ))
 (let (($x130 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x95 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x348 (= ?x95 (_ bv0 32))))
 (let ((?x125 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x125 (_ bv0 32))))
 (= $x177 $x348))))))
 ))
 (let (($x98 (and $x130 $x381)))
 (let (($x123 (and $x98 $x162)))
 (let (($x411 (and $x123 $x407)))
 (let (($x349 (and $x411 $x159)))
 (let (($x365 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x92 (and $x365 $x349)))
 (let ((?x195 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x107 (bvadd input.dst.llvm-%m ?x195)))
 (let (($x401 (bvugt ?x107 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x215 (bvadd ?x107 (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x134 (bvugt ?x107 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x146 (or false (or false (and (and true (or $x297 $x134)) (or $x105 $x401))))))
 (let (($x383 (=> (bvule ?x107 (bvsub (bvadd ?x107 (_ bv4 32)) (_ bv1 32))) $x146)))
 (let (($x246 (=> (and $x229 (bvule ?x107 (bvsub (bvadd ?x107 (_ bv4 32)) (_ bv1 32)))) $x146)))
 (let (($x400 (and $x246 $x92)))
 (let (($x393 (=> $x400 $x390)))
 (not $x393)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x502 (not $x229)))
 (let (($x505 (= $x502 false)))
 (let (($x385 (= $x505 true)))
 (let ((?x138 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x100 (bvneg ?x138)))
 (let (($x503 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x386 (= $x503 true)))
 (let (($x10 (= $x386 true)))
 (let ((?x232 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x232)))
 (let (($x242 (= ?x40 input.dst.llvm-%n)))
 (let (($x291 (= $x242 true)))
 (let (($x240 (= $x291 true)))
 (let (($x237 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x51 (= $x237 true)))
 (let (($x67 (= $x51 true)))
 (let (($x504 (= $x67 true)))
 (let (($x341 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x289 (= $x341 true)))
 (let (($x353 (= $x289 true)))
 (let (($x189 (= $x353 true)))
 (let (($x178 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x79))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x79 (_ bv2 32))) ?x226)))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x79 (_ bv3 32))) ?x196)))
 (let ((?x338 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x338 (_ bv1 32))))
 (=> $x228 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x119)))))))))
 ))
 (let (($x303 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x321 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x210 (ite $x321 (_ bv1 32) (_ bv0 32))))
 (let ((?x338 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x338 (_ bv1 32))))
 (= $x228 (bvuge ?x210 (_ bv1 32))))))))
 ))
 (let (($x128 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x338 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x338 (_ bv0 32))))
 (=> $x80 $x78)))))
 ))
 (let (($x333 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x321 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x210 (ite $x321 (_ bv1 32) (_ bv0 32))))
 (let ((?x338 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x338 (_ bv0 32))))
 (= $x80 (= ?x210 (_ bv0 32))))))))
 ))
 (let (($x96 (and $x333 $x128)))
 (let (($x112 (and $x96 $x303)))
 (let (($x152 (and $x112 $x178)))
 (let (($x87 (= $x152 true)))
 (let (($x379 (= $x87 true)))
 (let (($x361 (= $x379 true)))
 (let (($x567 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x562 (= $x567 true)))
 (let (($x561 (= $x562 true)))
 (let (($x440 (= $x561 true)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x126)))
 (let ((?x403 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x403)))
 (let ((?x531 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x531)))
 (let ((?x530 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x510 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x530)))
 (let (($x528 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x527 (and $x528 $x510)))
 (let (($x509 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x511 (and $x509 $x527)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x431 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x72 $x235)))
 (let (($x404 (not $x58)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x352 (and $x315 $x198)))
 (let (($x532 (and (not $x352) $x404)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (and $x318 $x124)))
 (let (($x384 (not $x362)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x36 $x12)))
 (let (($x187 (and (not $x157) $x384)))
 (let (($x432 (and (and (and (and (and (and $x187 $x532) $x431) $x23) $x511) $x169) $x42)))
 (let (($x433 (and $x432 $x143)))
 (let (($x435 (= $x433 true)))
 (let (($x436 (= $x435 true)))
 (let (($x438 (= $x436 true)))
 (let (($x145 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x183 (= $x145 true)))
 (let (($x399 (= $x183 true)))
 (let (($x179 (= $x399 true)))
 (let (($x279 (= ?x40 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x302 (= $x279 true)))
 (let (($x127 (= $x302 true)))
 (let ((?x161 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x335 (= (_ bv0 2) ?x161)))
 (let (($x191 (= $x335 true)))
 (let (($x205 (= $x191 true)))
 (let (($x14 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x283 (= $x14 true)))
 (let (($x39 (= $x283 true)))
 (let (($x370 (= $x39 true)))
 (let (($x269 (and $x370 $x205)))
 (let (($x173 (and $x269 $x127)))
 (let (($x382 (and $x173 $x179)))
 (let (($x565 (and $x382 $x438)))
 (let (($x566 (and $x565 $x440)))
 (let (($x266 (and $x566 $x361)))
 (let (($x250 (and $x266 $x189)))
 (let (($x376 (and $x250 $x504)))
 (let (($x44 (and $x376 $x240)))
 (let (($x57 (and $x44 $x10)))
 (let (($x326 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x272 (and $x326 $x57)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x498 (and $x133 $x272)))
 (let (($x317 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x255 (_ bv1 32))))
 (=> $x394 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x74 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x411 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x411 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x255 (_ bv1 32))))
 (= $x394 $x374))))))
 ))
 (let (($x201 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x255 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x255 (_ bv0 32))))
 (=> $x8 $x78)))))
 ))
 (let (($x151 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x411 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x411 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x255 (_ bv0 32))))
 (= $x8 $x330))))))
 ))
 (let (($x30 (and $x151 $x201)))
 (let (($x25 (and $x30 $x74)))
 (let (($x249 (and $x25 $x317)))
 (let (($x500 (and $x249 $x498)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x13 (and $x101 $x500)))
 (let ((?x107 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x287 (bvadd input.dst.llvm-%m ?x107)))
 (let (($x231 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x271 (bvadd ?x287 (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x271)))
 (let (($x267 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x271)))
 (let (($x392 (or false (or false (and (and true (or $x90 $x267)) (or $x94 $x231))))))
 (let (($x75 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) $x392)))
 (let (($x181 (=> (and $x229 (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32)))) $x392)))
 (let (($x422 (and $x181 $x13)))
 (let (($x245 (=> $x422 $x385)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x502 (not $x229)))
 (let (($x505 (= $x502 false)))
 (let (($x385 (= $x505 true)))
 (let ((?x138 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x100 (bvneg ?x138)))
 (let (($x503 (= ?x100 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x386 (= $x503 true)))
 (let (($x10 (= $x386 true)))
 (let ((?x232 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x232)))
 (let (($x242 (= ?x40 input.dst.llvm-%n)))
 (let (($x291 (= $x242 true)))
 (let (($x240 (= $x291 true)))
 (let (($x237 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x51 (= $x237 true)))
 (let (($x67 (= $x51 true)))
 (let (($x504 (= $x67 true)))
 (let (($x341 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x289 (= $x341 true)))
 (let (($x353 (= $x289 true)))
 (let (($x189 (= $x353 true)))
 (let (($x178 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x79))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x79 (_ bv2 32))) ?x226)))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x79 (_ bv3 32))) ?x196)))
 (let ((?x338 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x338 (_ bv1 32))))
 (=> $x228 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x119)))))))))
 ))
 (let (($x303 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x321 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x210 (ite $x321 (_ bv1 32) (_ bv0 32))))
 (let ((?x338 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x338 (_ bv1 32))))
 (= $x228 (bvuge ?x210 (_ bv1 32))))))))
 ))
 (let (($x128 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x338 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x338 (_ bv0 32))))
 (=> $x80 $x78)))))
 ))
 (let (($x333 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x321 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x210 (ite $x321 (_ bv1 32) (_ bv0 32))))
 (let ((?x338 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x338 (_ bv0 32))))
 (= $x80 (= ?x210 (_ bv0 32))))))))
 ))
 (let (($x96 (and $x333 $x128)))
 (let (($x112 (and $x96 $x303)))
 (let (($x152 (and $x112 $x178)))
 (let (($x87 (= $x152 true)))
 (let (($x379 (= $x87 true)))
 (let (($x361 (= $x379 true)))
 (let (($x567 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x562 (= $x567 true)))
 (let (($x561 (= $x562 true)))
 (let (($x440 (= $x561 true)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x126)))
 (let ((?x403 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x403)))
 (let ((?x531 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x531)))
 (let ((?x530 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x510 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x530)))
 (let (($x528 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x527 (and $x528 $x510)))
 (let (($x509 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x511 (and $x509 $x527)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x431 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x72 $x235)))
 (let (($x404 (not $x58)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x352 (and $x315 $x198)))
 (let (($x532 (and (not $x352) $x404)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (and $x318 $x124)))
 (let (($x384 (not $x362)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x36 $x12)))
 (let (($x187 (and (not $x157) $x384)))
 (let (($x432 (and (and (and (and (and (and $x187 $x532) $x431) $x23) $x511) $x169) $x42)))
 (let (($x433 (and $x432 $x143)))
 (let (($x435 (= $x433 true)))
 (let (($x436 (= $x435 true)))
 (let (($x438 (= $x436 true)))
 (let (($x145 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x183 (= $x145 true)))
 (let (($x399 (= $x183 true)))
 (let (($x179 (= $x399 true)))
 (let (($x279 (= ?x40 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x302 (= $x279 true)))
 (let (($x127 (= $x302 true)))
 (let ((?x161 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x335 (= (_ bv0 2) ?x161)))
 (let (($x191 (= $x335 true)))
 (let (($x205 (= $x191 true)))
 (let (($x14 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x283 (= $x14 true)))
 (let (($x39 (= $x283 true)))
 (let (($x370 (= $x39 true)))
 (let (($x269 (and $x370 $x205)))
 (let (($x173 (and $x269 $x127)))
 (let (($x382 (and $x173 $x179)))
 (let (($x565 (and $x382 $x438)))
 (let (($x566 (and $x565 $x440)))
 (let (($x266 (and $x566 $x361)))
 (let (($x250 (and $x266 $x189)))
 (let (($x376 (and $x250 $x504)))
 (let (($x44 (and $x376 $x240)))
 (let (($x57 (and $x44 $x10)))
 (let (($x326 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x272 (and $x326 $x57)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x498 (and $x133 $x272)))
 (let (($x317 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x255 (_ bv1 32))))
 (=> $x394 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x74 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x411 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x411 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x255 (_ bv1 32))))
 (= $x394 $x374))))))
 ))
 (let (($x201 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x255 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x255 (_ bv0 32))))
 (=> $x8 $x78)))))
 ))
 (let (($x151 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x411 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x411 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x255 (_ bv0 32))))
 (= $x8 $x330))))))
 ))
 (let (($x30 (and $x151 $x201)))
 (let (($x25 (and $x30 $x74)))
 (let (($x249 (and $x25 $x317)))
 (let (($x500 (and $x249 $x498)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x13 (and $x101 $x500)))
 (let ((?x107 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x287 (bvadd input.dst.llvm-%m ?x107)))
 (let (($x231 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x271 (bvadd ?x287 (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x271)))
 (let (($x267 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x271)))
 (let (($x392 (or false (or false (and (and true (or $x90 $x267)) (or $x94 $x231))))))
 (let (($x75 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) $x392)))
 (let (($x181 (=> (and $x229 (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32)))) $x392)))
 (let (($x422 (and $x181 $x13)))
 (let (($x245 (=> $x422 $x385)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0fa86b92)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x0fa86b92)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x0fa86b92)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0fa86b92)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x0fa86b92)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0fa86b92 x!0)
         (ite (bvule #x0fa86b93 x!0) #x0fa86b93 #x0fa86b92)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x1011d7d0)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x1011d7d0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe977c8e0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8307ea44)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x1011d7d0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x1011d7d0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8307ea47)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe977c8e3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8307ea44)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe977c8e0)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x1011d7d0)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x1011d7d0 x!0)
         (ite (bvule #x1011d7d1 x!0) #x1011d7d1 #x1011d7d0)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x363 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x29 (or $x363 $x229)))
 (let (($x192 (= $x29 true)))
 (let (($x391 (= $x192 true)))
 (let ((?x273 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x202 (bvneg ?x273)))
 (let (($x200 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x277 (= $x200 true)))
 (let (($x31 (= $x277 true)))
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x278 (bvneg ?x116)))
 (let (($x336 (= ?x278 input.dst.llvm-%n)))
 (let (($x388 (= $x336 true)))
 (let (($x364 (= $x388 true)))
 (let (($x106 (= ?x278 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x350 (= $x106 true)))
 (let (($x329 (= $x350 true)))
 (let (($x77 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x182 (= $x77 true)))
 (let (($x49 (= $x182 true)))
 (let (($x153 (= $x49 true)))
 (let (($x322 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x234 (= $x322 true)))
 (let (($x103 (= $x234 true)))
 (let (($x221 (= $x103 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (= $x259 true)))
 (let (($x108 (= $x197 true)))
 (let (($x147 (= $x108 true)))
 (let (($x367 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x209 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x209))))
 (let ((?x380 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv2 32))) ?x340)))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv3 32))) ?x380)))
 (let ((?x43 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x43 (_ bv1 32))))
 (=> $x88 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x155)))))))))
 ))
 (let (($x91 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x175 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x43 (_ bv1 32))))
 (= $x88 (bvuge ?x175 (_ bv1 32))))))))
 ))
 (let (($x47 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x335 (= false false)))
 (let ((?x43 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x43 (_ bv0 32))))
 (=> $x120 $x335)))))
 ))
 (let (($x165 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x175 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x43 (_ bv0 32))))
 (= $x120 (= ?x175 (_ bv0 32))))))))
 ))
 (let (($x16 (and $x165 $x47)))
 (let (($x167 (and $x16 $x91)))
 (let (($x296 (and $x167 $x367)))
 (let (($x211 (= $x296 true)))
 (let (($x82 (= $x211 true)))
 (let (($x140 (= $x82 true)))
 (let (($x24 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x38 (= $x24 true)))
 (let (($x368 (= $x38 true)))
 (let (($x397 (= $x368 true)))
 (let (($x203 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x203 true)))
 (let (($x389 (= $x65 true)))
 (let (($x79 (= $x389 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x321 (= (_ bv0 32) ?x253)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x80)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x338 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x562 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x561 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x562)))
 (let (($x567 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x440 (and $x567 $x561)))
 (let (($x565 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x566 (and $x565 $x440)))
 (let (($x438 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x435 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x434 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x434 $x403)))
 (let (($x432 (not $x42)))
 (let (($x531 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x430 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x430 $x531)))
 (let (($x143 (and (not $x169) $x432)))
 (let (($x528 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x509 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x530 (and $x509 $x528)))
 (let (($x510 (not $x530)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x409 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x437 (and $x409 $x23)))
 (let (($x511 (and (not $x437) $x510)))
 (let (($x128 (and (and (and (and (and (and $x511 $x143) $x435) $x438) $x566) $x338) $x11)))
 (let (($x96 (and $x128 $x321)))
 (let (($x228 (= $x96 true)))
 (let (($x160 (= $x228 true)))
 (let (($x357 (= $x160 true)))
 (let ((?x366 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x568 (= (_ bv0 2) ?x366)))
 (let (($x431 (= $x568 true)))
 (let (($x217 (= $x431 true)))
 (let (($x303 (and $x217 $x357)))
 (let (($x371 (and $x303 $x79)))
 (let (($x213 (and $x371 $x397)))
 (let (($x257 (and $x213 $x140)))
 (let (($x301 (and $x257 $x147)))
 (let (($x97 (and $x301 $x221)))
 (let (($x230 (and $x97 $x153)))
 (let (($x70 (and $x230 $x329)))
 (let (($x172 (and $x70 $x364)))
 (let (($x402 (and $x172 $x31)))
 (let (($x404 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x184 (and $x404 $x402)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x355 (and $x72 $x184)))
 (let (($x198 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x39 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x399 (bvuge ?x39 (_ bv1 32))))
 (=> $x399 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x382 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x249 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x249 (_ bv1 32))))
 (let ((?x39 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x399 (bvuge ?x39 (_ bv1 32))))
 (= $x399 $x173))))))
 ))
 (let (($x269 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x335 (= false false)))
 (let ((?x39 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x39 (_ bv0 32))))
 (=> $x370 $x335)))))
 ))
 (let (($x161 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x249 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x249 (_ bv0 32))))
 (let ((?x39 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x39 (_ bv0 32))))
 (= $x370 $x414))))))
 ))
 (let (($x15 (and $x161 $x269)))
 (let (($x36 (and $x15 $x382)))
 (let (($x352 (and $x36 $x198)))
 (let (($x373 (and $x352 $x355)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x262 (and $x148 $x373)))
 (let ((?x287 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x186 (bvadd input.dst.llvm-%m ?x287)))
 (let (($x246 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd ?x186 (_ bv3 32))))
 (let (($x383 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x401 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x346 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x323 (or false (or false (and (and true (or $x346 $x401)) (or $x383 $x246))))))
 (let (($x354 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) $x323)))
 (let (($x215 (=> (and $x229 (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32)))) $x323)))
 (let (($x190 (and $x215 $x262)))
 (let (($x387 (=> $x190 $x391)))
 (not $x387)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x363 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x29 (or $x363 $x229)))
 (let (($x192 (= $x29 true)))
 (let (($x391 (= $x192 true)))
 (let ((?x273 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x202 (bvneg ?x273)))
 (let (($x200 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x277 (= $x200 true)))
 (let (($x31 (= $x277 true)))
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x278 (bvneg ?x116)))
 (let (($x336 (= ?x278 input.dst.llvm-%n)))
 (let (($x388 (= $x336 true)))
 (let (($x364 (= $x388 true)))
 (let (($x106 (= ?x278 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x350 (= $x106 true)))
 (let (($x329 (= $x350 true)))
 (let (($x77 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x182 (= $x77 true)))
 (let (($x49 (= $x182 true)))
 (let (($x153 (= $x49 true)))
 (let (($x322 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x234 (= $x322 true)))
 (let (($x103 (= $x234 true)))
 (let (($x221 (= $x103 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (= $x259 true)))
 (let (($x108 (= $x197 true)))
 (let (($x147 (= $x108 true)))
 (let (($x367 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x209 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x209))))
 (let ((?x380 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv2 32))) ?x340)))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv3 32))) ?x380)))
 (let ((?x43 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x43 (_ bv1 32))))
 (=> $x88 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x155)))))))))
 ))
 (let (($x91 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x175 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x43 (_ bv1 32))))
 (= $x88 (bvuge ?x175 (_ bv1 32))))))))
 ))
 (let (($x47 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x335 (= false false)))
 (let ((?x43 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x43 (_ bv0 32))))
 (=> $x120 $x335)))))
 ))
 (let (($x165 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x175 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x43 (_ bv0 32))))
 (= $x120 (= ?x175 (_ bv0 32))))))))
 ))
 (let (($x16 (and $x165 $x47)))
 (let (($x167 (and $x16 $x91)))
 (let (($x296 (and $x167 $x367)))
 (let (($x211 (= $x296 true)))
 (let (($x82 (= $x211 true)))
 (let (($x140 (= $x82 true)))
 (let (($x24 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x38 (= $x24 true)))
 (let (($x368 (= $x38 true)))
 (let (($x397 (= $x368 true)))
 (let (($x203 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x203 true)))
 (let (($x389 (= $x65 true)))
 (let (($x79 (= $x389 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x321 (= (_ bv0 32) ?x253)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x80)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x338 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x562 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x561 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x562)))
 (let (($x567 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x440 (and $x567 $x561)))
 (let (($x565 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x566 (and $x565 $x440)))
 (let (($x438 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x435 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x434 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x434 $x403)))
 (let (($x432 (not $x42)))
 (let (($x531 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x430 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x430 $x531)))
 (let (($x143 (and (not $x169) $x432)))
 (let (($x528 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x509 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x530 (and $x509 $x528)))
 (let (($x510 (not $x530)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x409 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x437 (and $x409 $x23)))
 (let (($x511 (and (not $x437) $x510)))
 (let (($x128 (and (and (and (and (and (and $x511 $x143) $x435) $x438) $x566) $x338) $x11)))
 (let (($x96 (and $x128 $x321)))
 (let (($x228 (= $x96 true)))
 (let (($x160 (= $x228 true)))
 (let (($x357 (= $x160 true)))
 (let ((?x366 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x568 (= (_ bv0 2) ?x366)))
 (let (($x431 (= $x568 true)))
 (let (($x217 (= $x431 true)))
 (let (($x303 (and $x217 $x357)))
 (let (($x371 (and $x303 $x79)))
 (let (($x213 (and $x371 $x397)))
 (let (($x257 (and $x213 $x140)))
 (let (($x301 (and $x257 $x147)))
 (let (($x97 (and $x301 $x221)))
 (let (($x230 (and $x97 $x153)))
 (let (($x70 (and $x230 $x329)))
 (let (($x172 (and $x70 $x364)))
 (let (($x402 (and $x172 $x31)))
 (let (($x404 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x184 (and $x404 $x402)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x355 (and $x72 $x184)))
 (let (($x198 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x39 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x399 (bvuge ?x39 (_ bv1 32))))
 (=> $x399 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x382 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x249 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x249 (_ bv1 32))))
 (let ((?x39 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x399 (bvuge ?x39 (_ bv1 32))))
 (= $x399 $x173))))))
 ))
 (let (($x269 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x335 (= false false)))
 (let ((?x39 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x39 (_ bv0 32))))
 (=> $x370 $x335)))))
 ))
 (let (($x161 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x249 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x249 (_ bv0 32))))
 (let ((?x39 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x39 (_ bv0 32))))
 (= $x370 $x414))))))
 ))
 (let (($x15 (and $x161 $x269)))
 (let (($x36 (and $x15 $x382)))
 (let (($x352 (and $x36 $x198)))
 (let (($x373 (and $x352 $x355)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x262 (and $x148 $x373)))
 (let ((?x287 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x186 (bvadd input.dst.llvm-%m ?x287)))
 (let (($x246 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd ?x186 (_ bv3 32))))
 (let (($x383 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x401 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x346 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x323 (or false (or false (and (and true (or $x346 $x401)) (or $x383 $x246))))))
 (let (($x354 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) $x323)))
 (let (($x215 (=> (and $x229 (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32)))) $x323)))
 (let (($x190 (and $x215 $x262)))
 (let (($x387 (=> $x190 $x391)))
 (not $x387)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x162 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x162))))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv2 32))) ?x270)))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv3 32))) ?x293)))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x386 (_ bv1 32))))
 (=> $x207 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x20)))))))))
 ))
 (let (($x405 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x280 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x386 (_ bv1 32))))
 (= $x207 (bvuge ?x280 (_ bv1 32)))))))
 ))
 (let (($x376 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x414 (= false false)))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x386 (_ bv0 32))))
 (=> $x10 $x414)))))
 ))
 (let (($x194 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x280 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x386 (_ bv0 32))))
 (= $x10 (= ?x280 (_ bv0 32)))))))
 ))
 (let (($x292 (and $x194 $x376)))
 (let (($x344 (and $x292 $x405)))
 (let (($x37 (and $x344 $x188)))
 (let (($x111 (= $x37 true)))
 (let (($x313 (= $x111 true)))
 (let ((?x567 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x562 (bvneg ?x567)))
 (let (($x5 (= ?x562 input.dst.llvm-%n)))
 (let (($x369 (= $x5 true)))
 (let (($x575 (= $x369 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x150 (= (_ bv0 2) ?x68)))
 (let (($x356 (= $x150 true)))
 (let (($x174 (= $x356 true)))
 (let (($x415 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x393 (= $x415 true)))
 (let (($x311 (= $x393 true)))
 (let (($x398 (= $x311 true)))
 (let (($x499 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x316 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x124 (ite (and $x316 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x386 (_ bv1 32))))
 (= $x207 (bvuge ?x124 (_ bv1 32))))))))
 ))
 (let (($x100 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x316 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x124 (ite (and $x316 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x386 (_ bv0 32))))
 (= $x10 (= ?x124 (_ bv0 32))))))))
 ))
 (let (($x240 (and $x100 $x376)))
 (let (($x385 (and $x240 $x499)))
 (let (($x349 (and $x385 $x188)))
 (let (($x92 (= $x349 true)))
 (let (($x159 (= $x92 true)))
 (let (($x400 (= $x159 true)))
 (let (($x296 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (not $x296)))
 (let (($x82 (= $x211 true)))
 (let (($x140 (= $x82 true)))
 (let (($x257 (= $x140 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x347 (= (_ bv0 32) ?x89)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x19)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x360 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x149)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x16 $x360)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x47 $x91)))
 (let (($x390 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x396 (and $x43 $x120)))
 (let (($x136 (not $x396)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x397 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x397 $x213)))
 (let (($x175 (and (not $x274) $x136)))
 (let (($x371 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (and $x79 $x371)))
 (let (($x24 (not $x331)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x303 $x203)))
 (let (($x368 (and (not $x65) $x24)))
 (let (($x219 (and (and (and (and (and (and $x368 $x175) $x170) $x390) $x167) $x51) $x209)))
 (let (($x340 (and $x219 $x347)))
 (let (($x380 (= $x340 true)))
 (let (($x155 (= $x380 true)))
 (let (($x286 (= $x155 true)))
 (let (($x128 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x253 (= $x128 true)))
 (let (($x321 (= $x253 true)))
 (let (($x96 (= $x321 true)))
 (let (($x251 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x338 (= $x251 true)))
 (let (($x35 (= $x338 true)))
 (let (($x80 (= $x35 true)))
 (let (($x561 (= ?x562 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x440 (= $x561 true)))
 (let (($x566 (= $x440 true)))
 (let ((?x435 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x256 (bvneg ?x435)))
 (let (($x436 (= ?x256 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x438 (= $x436 true)))
 (let (($x227 (= $x438 true)))
 (let (($x403 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x42 (= $x403 true)))
 (let (($x432 (= $x42 true)))
 (let (($x143 (= $x432 true)))
 (let (($x531 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x169 (= $x531 true)))
 (let (($x126 (= $x169 true)))
 (let (($x434 (= $x126 true)))
 (let (($x210 (and $x434 $x143)))
 (let (($x565 (and $x210 $x227)))
 (let (($x333 (and $x565 $x566)))
 (let (($x11 (and $x333 $x80)))
 (let (($x228 (and $x11 $x96)))
 (let (($x21 (and $x228 $x286)))
 (let (($x259 (and $x21 $x257)))
 (let (($x413 (and $x259 $x400)))
 (let (($x298 (and $x413 $x398)))
 (let (($x53 (and $x298 $x174)))
 (let (($x576 (and $x53 $x575)))
 (let (($x510 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x572 (and $x510 $x576)))
 (let (($x528 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x571 (and $x528 $x572)))
 (let (($x437 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x236 (and $x437 $x571)))
 (let (($x217 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x78 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x78 (_ bv1 32))))
 (=> $x187 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x392 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x382 (bvuge ?x392 (_ bv1 32))))
 (let ((?x78 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x78 (_ bv1 32))))
 (= $x187 $x382))))))
 ))
 (let (($x335 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x414 (= false false)))
 (let ((?x78 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x78 (_ bv0 32))))
 (=> $x39 $x414)))))
 ))
 (let (($x249 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x392 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x392 (_ bv0 32))))
 (let ((?x78 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x78 (_ bv0 32))))
 (= $x39 $x323))))))
 ))
 (let (($x205 (and $x249 $x335)))
 (let (($x352 (and $x205 $x198)))
 (let (($x409 (and $x352 $x217)))
 (let (($x573 (and $x409 $x236)))
 (let (($x244 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x154 (and $x244 $x573)))
 (let (($x104 (=> $x154 $x313)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x162 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x162))))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv2 32))) ?x270)))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv3 32))) ?x293)))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x386 (_ bv1 32))))
 (=> $x207 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x20)))))))))
 ))
 (let (($x405 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x280 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x386 (_ bv1 32))))
 (= $x207 (bvuge ?x280 (_ bv1 32)))))))
 ))
 (let (($x376 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x414 (= false false)))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x386 (_ bv0 32))))
 (=> $x10 $x414)))))
 ))
 (let (($x194 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x280 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x386 (_ bv0 32))))
 (= $x10 (= ?x280 (_ bv0 32)))))))
 ))
 (let (($x292 (and $x194 $x376)))
 (let (($x344 (and $x292 $x405)))
 (let (($x37 (and $x344 $x188)))
 (let (($x111 (= $x37 true)))
 (let (($x313 (= $x111 true)))
 (let ((?x567 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x562 (bvneg ?x567)))
 (let (($x5 (= ?x562 input.dst.llvm-%n)))
 (let (($x369 (= $x5 true)))
 (let (($x575 (= $x369 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x150 (= (_ bv0 2) ?x68)))
 (let (($x356 (= $x150 true)))
 (let (($x174 (= $x356 true)))
 (let (($x415 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x393 (= $x415 true)))
 (let (($x311 (= $x393 true)))
 (let (($x398 (= $x311 true)))
 (let (($x499 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x316 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x124 (ite (and $x316 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x386 (_ bv1 32))))
 (= $x207 (bvuge ?x124 (_ bv1 32))))))))
 ))
 (let (($x100 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x316 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x124 (ite (and $x316 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let ((?x386 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x386 (_ bv0 32))))
 (= $x10 (= ?x124 (_ bv0 32))))))))
 ))
 (let (($x240 (and $x100 $x376)))
 (let (($x385 (and $x240 $x499)))
 (let (($x349 (and $x385 $x188)))
 (let (($x92 (= $x349 true)))
 (let (($x159 (= $x92 true)))
 (let (($x400 (= $x159 true)))
 (let (($x296 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (not $x296)))
 (let (($x82 (= $x211 true)))
 (let (($x140 (= $x82 true)))
 (let (($x257 (= $x140 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x347 (= (_ bv0 32) ?x89)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x19)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x360 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x149)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x16 $x360)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x47 $x91)))
 (let (($x390 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x396 (and $x43 $x120)))
 (let (($x136 (not $x396)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x397 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x397 $x213)))
 (let (($x175 (and (not $x274) $x136)))
 (let (($x371 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (and $x79 $x371)))
 (let (($x24 (not $x331)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x303 $x203)))
 (let (($x368 (and (not $x65) $x24)))
 (let (($x219 (and (and (and (and (and (and $x368 $x175) $x170) $x390) $x167) $x51) $x209)))
 (let (($x340 (and $x219 $x347)))
 (let (($x380 (= $x340 true)))
 (let (($x155 (= $x380 true)))
 (let (($x286 (= $x155 true)))
 (let (($x128 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x253 (= $x128 true)))
 (let (($x321 (= $x253 true)))
 (let (($x96 (= $x321 true)))
 (let (($x251 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x338 (= $x251 true)))
 (let (($x35 (= $x338 true)))
 (let (($x80 (= $x35 true)))
 (let (($x561 (= ?x562 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x440 (= $x561 true)))
 (let (($x566 (= $x440 true)))
 (let ((?x435 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x256 (bvneg ?x435)))
 (let (($x436 (= ?x256 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x438 (= $x436 true)))
 (let (($x227 (= $x438 true)))
 (let (($x403 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x42 (= $x403 true)))
 (let (($x432 (= $x42 true)))
 (let (($x143 (= $x432 true)))
 (let (($x531 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x169 (= $x531 true)))
 (let (($x126 (= $x169 true)))
 (let (($x434 (= $x126 true)))
 (let (($x210 (and $x434 $x143)))
 (let (($x565 (and $x210 $x227)))
 (let (($x333 (and $x565 $x566)))
 (let (($x11 (and $x333 $x80)))
 (let (($x228 (and $x11 $x96)))
 (let (($x21 (and $x228 $x286)))
 (let (($x259 (and $x21 $x257)))
 (let (($x413 (and $x259 $x400)))
 (let (($x298 (and $x413 $x398)))
 (let (($x53 (and $x298 $x174)))
 (let (($x576 (and $x53 $x575)))
 (let (($x510 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x572 (and $x510 $x576)))
 (let (($x528 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x571 (and $x528 $x572)))
 (let (($x437 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x236 (and $x437 $x571)))
 (let (($x217 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x78 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x78 (_ bv1 32))))
 (=> $x187 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x392 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x382 (bvuge ?x392 (_ bv1 32))))
 (let ((?x78 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x78 (_ bv1 32))))
 (= $x187 $x382))))))
 ))
 (let (($x335 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x414 (= false false)))
 (let ((?x78 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x78 (_ bv0 32))))
 (=> $x39 $x414)))))
 ))
 (let (($x249 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x392 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x392 (_ bv0 32))))
 (let ((?x78 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x78 (_ bv0 32))))
 (= $x39 $x323))))))
 ))
 (let (($x205 (and $x249 $x335)))
 (let (($x352 (and $x205 $x198)))
 (let (($x409 (and $x352 $x217)))
 (let (($x573 (and $x409 $x236)))
 (let (($x244 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x154 (and $x244 $x573)))
 (let (($x104 (=> $x154 $x313)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x244 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x361 (not $x244)))
 (let (($x266 (or $x244 $x361)))
 (let (($x178 (= $x266 true)))
 (let (($x87 (= $x178 true)))
 (let ((?x502 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x505 (bvneg ?x502)))
 (let (($x264 (= ?x505 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x264 true)))
 (let (($x85 (= $x247 true)))
 (let ((?x380 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x380)))
 (let (($x498 (= ?x155 input.dst.llvm-%n)))
 (let (($x500 (= $x498 true)))
 (let (($x13 (= $x500 true)))
 (let (($x503 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x57 (= $x503 true)))
 (let (($x189 (= $x57 true)))
 (let (($x250 (= $x189 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x127 true)))
 (let (($x183 (= $x145 true)))
 (let (($x12 (= $x183 true)))
 (let (($x166 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x74 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x74))))
 (let ((?x374 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv2 32))) ?x151)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv3 32))) ?x374)))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x277 (_ bv1 32))))
 (=> $x363 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x45)))))))))
 ))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x184 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x202 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x277 (_ bv1 32))))
 (= $x363 (bvuge ?x202 (_ bv1 32))))))))
 ))
 (let (($x102 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x277 (_ bv0 32))))
 (=> $x355 $x160)))))
 ))
 (let (($x275 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x184 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x202 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x277 (_ bv0 32))))
 (= $x355 (= ?x202 (_ bv0 32))))))))
 ))
 (let (($x254 (and $x275 $x102)))
 (let (($x391 (and $x254 $x29)))
 (let (($x191 (and $x391 $x166)))
 (let (($x232 (= $x191 true)))
 (let (($x40 (= $x232 true)))
 (let (($x302 (= $x40 true)))
 (let (($x311 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x398 (= $x311 true)))
 (let (($x298 (= $x398 true)))
 (let (($x176 (= $x298 true)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x270)))
 (let ((?x407 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x407)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x288)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x162 $x60)))
 (let (($x364 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x364 $x31)))
 (let (($x343 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x406 (and $x240 $x207)))
 (let (($x245 (not $x406)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x376 (and $x100 $x291)))
 (let (($x385 (and (not $x376) $x245)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x316 $x157)))
 (let (($x124 (not $x318)))
 (let (($x386 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x504 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x504 $x386)))
 (let (($x138 (and (not $x10) $x124)))
 (let (($x92 (and (and (and (and (and (and $x138 $x385) $x350) $x343) $x260) $x115) $x55)))
 (let (($x159 (and $x92 $x293)))
 (let (($x400 (= $x159 true)))
 (let (($x413 (= $x400 true)))
 (let (($x415 (= $x413 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x82 (= $x211 true)))
 (let (($x140 (= $x82 true)))
 (let (($x257 (= $x140 true)))
 (let (($x286 (= ?x155 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x21 (= $x286 true)))
 (let (($x367 (= $x21 true)))
 (let ((?x19 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x209 (= (_ bv0 2) ?x19)))
 (let (($x219 (= $x209 true)))
 (let (($x89 (= $x219 true)))
 (let (($x167 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x359 (= $x167 true)))
 (let (($x18 (= $x359 true)))
 (let (($x51 (= $x18 true)))
 (let (($x347 (and $x51 $x89)))
 (let (($x296 (and $x347 $x367)))
 (let (($x259 (and $x296 $x257)))
 (let (($x393 (and $x259 $x415)))
 (let (($x68 (and $x393 $x176)))
 (let (($x279 (and $x68 $x302)))
 (let (($x242 (and $x279 $x12)))
 (let (($x272 (and $x242 $x250)))
 (let (($x422 (and $x272 $x13)))
 (let (($x208 (and $x422 $x85)))
 (let (($x149 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x439 (and $x149 $x208)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x152 (and $x47 $x439)))
 (let (($x165 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x253 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x397 (bvuge ?x253 (_ bv1 32))))
 (=> $x397 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x274 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x561 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x561 (_ bv1 32))))
 (let ((?x253 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x397 (bvuge ?x253 (_ bv1 32))))
 (= $x397 $x331))))))
 ))
 (let (($x112 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x253 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x253 (_ bv0 32))))
 (=> $x321 $x160)))))
 ))
 (let (($x228 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x561 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x333 (= ?x561 (_ bv0 32))))
 (let ((?x253 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x253 (_ bv0 32))))
 (= $x321 $x333))))))
 ))
 (let (($x203 (and $x228 $x112)))
 (let (($x290 (and $x203 $x274)))
 (let (($x390 (and $x290 $x165)))
 (let (($x328 (and $x390 $x152)))
 (let (($x510 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x95 (and $x510 $x328)))
 (let ((?x78 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x39 (bvadd input.dst.llvm-%m ?x78)))
 (let (($x409 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x382 (bvadd ?x39 (_ bv3 32))))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x382)))
 (let (($x198 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x382)))
 (let (($x509 (or false (or false (and (and true (or $x315 $x198)) (or $x217 $x409))))))
 (let (($x530 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) $x509)))
 (let (($x323 (=> (and $x244 (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32)))) $x509)))
 (let (($x564 (and $x323 $x95)))
 (let (($x337 (=> $x564 $x87)))
 (not $x337)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x244 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x361 (not $x244)))
 (let (($x266 (or $x244 $x361)))
 (let (($x178 (= $x266 true)))
 (let (($x87 (= $x178 true)))
 (let ((?x502 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x505 (bvneg ?x502)))
 (let (($x264 (= ?x505 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x264 true)))
 (let (($x85 (= $x247 true)))
 (let ((?x380 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x380)))
 (let (($x498 (= ?x155 input.dst.llvm-%n)))
 (let (($x500 (= $x498 true)))
 (let (($x13 (= $x500 true)))
 (let (($x503 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x57 (= $x503 true)))
 (let (($x189 (= $x57 true)))
 (let (($x250 (= $x189 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x127 true)))
 (let (($x183 (= $x145 true)))
 (let (($x12 (= $x183 true)))
 (let (($x166 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x74 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x74))))
 (let ((?x374 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv2 32))) ?x151)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv3 32))) ?x374)))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x277 (_ bv1 32))))
 (=> $x363 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x45)))))))))
 ))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x184 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x202 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (bvuge ?x277 (_ bv1 32))))
 (= $x363 (bvuge ?x202 (_ bv1 32))))))))
 ))
 (let (($x102 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x277 (_ bv0 32))))
 (=> $x355 $x160)))))
 ))
 (let (($x275 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x184 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x202 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x277 (_ bv0 32))))
 (= $x355 (= ?x202 (_ bv0 32))))))))
 ))
 (let (($x254 (and $x275 $x102)))
 (let (($x391 (and $x254 $x29)))
 (let (($x191 (and $x391 $x166)))
 (let (($x232 (= $x191 true)))
 (let (($x40 (= $x232 true)))
 (let (($x302 (= $x40 true)))
 (let (($x311 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x398 (= $x311 true)))
 (let (($x298 (= $x398 true)))
 (let (($x176 (= $x298 true)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x270)))
 (let ((?x407 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x407)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x288)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x162 $x60)))
 (let (($x364 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x364 $x31)))
 (let (($x343 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x406 (and $x240 $x207)))
 (let (($x245 (not $x406)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x376 (and $x100 $x291)))
 (let (($x385 (and (not $x376) $x245)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x316 $x157)))
 (let (($x124 (not $x318)))
 (let (($x386 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x504 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x504 $x386)))
 (let (($x138 (and (not $x10) $x124)))
 (let (($x92 (and (and (and (and (and (and $x138 $x385) $x350) $x343) $x260) $x115) $x55)))
 (let (($x159 (and $x92 $x293)))
 (let (($x400 (= $x159 true)))
 (let (($x413 (= $x400 true)))
 (let (($x415 (= $x413 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x82 (= $x211 true)))
 (let (($x140 (= $x82 true)))
 (let (($x257 (= $x140 true)))
 (let (($x286 (= ?x155 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x21 (= $x286 true)))
 (let (($x367 (= $x21 true)))
 (let ((?x19 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x209 (= (_ bv0 2) ?x19)))
 (let (($x219 (= $x209 true)))
 (let (($x89 (= $x219 true)))
 (let (($x167 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x359 (= $x167 true)))
 (let (($x18 (= $x359 true)))
 (let (($x51 (= $x18 true)))
 (let (($x347 (and $x51 $x89)))
 (let (($x296 (and $x347 $x367)))
 (let (($x259 (and $x296 $x257)))
 (let (($x393 (and $x259 $x415)))
 (let (($x68 (and $x393 $x176)))
 (let (($x279 (and $x68 $x302)))
 (let (($x242 (and $x279 $x12)))
 (let (($x272 (and $x242 $x250)))
 (let (($x422 (and $x272 $x13)))
 (let (($x208 (and $x422 $x85)))
 (let (($x149 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x439 (and $x149 $x208)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x152 (and $x47 $x439)))
 (let (($x165 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x253 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x397 (bvuge ?x253 (_ bv1 32))))
 (=> $x397 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x274 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x561 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x561 (_ bv1 32))))
 (let ((?x253 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x397 (bvuge ?x253 (_ bv1 32))))
 (= $x397 $x331))))))
 ))
 (let (($x112 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x160 (= false false)))
 (let ((?x253 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x253 (_ bv0 32))))
 (=> $x321 $x160)))))
 ))
 (let (($x228 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x561 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x333 (= ?x561 (_ bv0 32))))
 (let ((?x253 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x253 (_ bv0 32))))
 (= $x321 $x333))))))
 ))
 (let (($x203 (and $x228 $x112)))
 (let (($x290 (and $x203 $x274)))
 (let (($x390 (and $x290 $x165)))
 (let (($x328 (and $x390 $x152)))
 (let (($x510 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x95 (and $x510 $x328)))
 (let ((?x78 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x39 (bvadd input.dst.llvm-%m ?x78)))
 (let (($x409 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x382 (bvadd ?x39 (_ bv3 32))))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x382)))
 (let (($x198 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x382)))
 (let (($x509 (or false (or false (and (and true (or $x315 $x198)) (or $x217 $x409))))))
 (let (($x530 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) $x509)))
 (let (($x323 (=> (and $x244 (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32)))) $x509)))
 (let (($x564 (and $x323 $x95)))
 (let (($x337 (=> $x564 $x87)))
 (not $x337)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x364 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x364)))
 (let ((?x343 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x343)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x336 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x385 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x385)))
 (let (($x406 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x406 $x20)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x350 (and $x207 $x63)))
 (let (($x376 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x316 (and $x10 $x362)))
 (let (($x157 (not $x316)))
 (let (($x504 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x386 (and $x259 $x504)))
 (let (($x124 (and (not $x386) $x157)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x367 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x367 $x296)))
 (let (($x82 (not $x211)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x340 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x340 $x155)))
 (let (($x257 (and (not $x286) $x82)))
 (let (($x254 (and (and (and $x257 $x124) $x100) $x376)))
 (let (($x232 (and (and (and (and $x254 $x350) $x336) $x309) $x162)))
 (let (($x40 (= $x232 true)))
 (let (($x302 (= $x40 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x415 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x393 (concat ?x415 (concat ?x159 (concat ?x55 ?x349)))))
 (let (($x332 (= ?x393 input.dst.llvm-%n)))
 (let (($x394 (= $x332 true)))
 (let (($x6 (= $x394 true)))
 (let ((?x298 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x355 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x184 (concat ?x355 (concat ?x68 ?x298)))))
 (let (($x300 (= ?x202 input.dst.llvm-%m)))
 (let (($x317 (= $x300 true)))
 (let (($x111 (= $x317 true)))
 (let (($x200 (= input.dst.llvm-%m ?x202)))
 (let (($x311 (= input.dst.llvm-%n ?x393)))
 (let (($x190 (and $x311 $x200)))
 (let (($x260 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x275 (and $x260 $x190)))
 (let (($x192 (and (and (and $x254 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x350) $x336)))
 (let (($x133 (and (and (and $x192 $x309) $x162) $x275)))
 (let (($x194 (= $x133 true)))
 (let (($x395 (= $x194 true)))
 (let (($x74 (= $x395 true)))
 (let (($x201 (and $x74 $x111)))
 (let (($x30 (and $x201 $x6)))
 (let (($x219 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x151 (and $x219 $x30)))
 (let (($x372 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x374 (and $x372 $x151)))
 (let (($x359 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x128 (_ bv1 32))))
 (=> $x220 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x185 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x409 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x409 (_ bv1 32))))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x128 (_ bv1 32))))
 (= $x220 $x213))))))
 ))
 (let (($x228 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x561 (= false false)))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x128 (_ bv0 32))))
 (=> $x42 $x561)))))
 ))
 (let (($x321 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x409 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x527 (= ?x409 (_ bv0 32))))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x128 (_ bv0 32))))
 (= $x42 $x527))))))
 ))
 (let (($x160 (and $x321 $x228)))
 (let (($x165 (and $x160 $x185)))
 (let (($x18 (and $x165 $x359)))
 (let (($x45 (and $x18 $x374)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x326 (and $x229 $x45)))
 (let (($x279 (=> $x326 $x302)))
 (not $x279)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x364 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x364)))
 (let ((?x343 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x343)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x336 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x385 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x385)))
 (let (($x406 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x406 $x20)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x350 (and $x207 $x63)))
 (let (($x376 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x316 (and $x10 $x362)))
 (let (($x157 (not $x316)))
 (let (($x504 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x386 (and $x259 $x504)))
 (let (($x124 (and (not $x386) $x157)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x367 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x367 $x296)))
 (let (($x82 (not $x211)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x340 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x340 $x155)))
 (let (($x257 (and (not $x286) $x82)))
 (let (($x254 (and (and (and $x257 $x124) $x100) $x376)))
 (let (($x232 (and (and (and (and $x254 $x350) $x336) $x309) $x162)))
 (let (($x40 (= $x232 true)))
 (let (($x302 (= $x40 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x415 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x393 (concat ?x415 (concat ?x159 (concat ?x55 ?x349)))))
 (let (($x332 (= ?x393 input.dst.llvm-%n)))
 (let (($x394 (= $x332 true)))
 (let (($x6 (= $x394 true)))
 (let ((?x298 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x355 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x184 (concat ?x355 (concat ?x68 ?x298)))))
 (let (($x300 (= ?x202 input.dst.llvm-%m)))
 (let (($x317 (= $x300 true)))
 (let (($x111 (= $x317 true)))
 (let (($x200 (= input.dst.llvm-%m ?x202)))
 (let (($x311 (= input.dst.llvm-%n ?x393)))
 (let (($x190 (and $x311 $x200)))
 (let (($x260 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x275 (and $x260 $x190)))
 (let (($x192 (and (and (and $x254 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x350) $x336)))
 (let (($x133 (and (and (and $x192 $x309) $x162) $x275)))
 (let (($x194 (= $x133 true)))
 (let (($x395 (= $x194 true)))
 (let (($x74 (= $x395 true)))
 (let (($x201 (and $x74 $x111)))
 (let (($x30 (and $x201 $x6)))
 (let (($x219 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x151 (and $x219 $x30)))
 (let (($x372 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x374 (and $x372 $x151)))
 (let (($x359 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x128 (_ bv1 32))))
 (=> $x220 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x185 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x409 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x409 (_ bv1 32))))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x128 (_ bv1 32))))
 (= $x220 $x213))))))
 ))
 (let (($x228 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x561 (= false false)))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x128 (_ bv0 32))))
 (=> $x42 $x561)))))
 ))
 (let (($x321 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x409 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x527 (= ?x409 (_ bv0 32))))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x128 (_ bv0 32))))
 (= $x42 $x527))))))
 ))
 (let (($x160 (and $x321 $x228)))
 (let (($x165 (and $x160 $x185)))
 (let (($x18 (and $x165 $x359)))
 (let (($x45 (and $x18 $x374)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x326 (and $x229 $x45)))
 (let (($x279 (=> $x326 $x302)))
 (not $x279)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x290 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x390 (bvneg ?x290)))
 (let (($x339 (= ?x390 input.spec-%var-n-1)))
 (let (($x47 (= $x339 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x400 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x355 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x176 (concat ?x355 (concat ?x262 (concat ?x400 ?x349)))))
 (let (($x249 (= input.dst.llvm-%m ?x176)))
 (let ((?x343 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x413 (concat ?x188 (concat ?x288 (concat ?x29 ?x343)))))
 (let (($x39 (= input.dst.llvm-%n ?x413)))
 (let (($x528 (and $x39 $x249)))
 (let (($x335 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x187 (and $x335 $x528)))
 (let ((?x366 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x568 (= (_ bv0 32) ?x366)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x352 (= (_ bv0 32) ?x78)))
 (let ((?x283 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x283)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x398 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (and $x127 $x398)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x279 $x115)))
 (let (($x302 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x374 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x326 (and $x374 $x45)))
 (let (($x66 (not $x326)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x6 $x30)))
 (let (($x191 (and (not $x151) $x66)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x300 $x317)))
 (let (($x201 (not $x111)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x395 (and $x275 $x194)))
 (let (($x394 (and (not $x395) $x201)))
 (let (($x431 (and (and (and (and (and (and $x394 $x191) $x232) $x40) $x302) $x244) $x101)))
 (let (($x530 (and (and (and $x431 $x352) $x568) $x187)))
 (let (($x323 (= $x530 true)))
 (let (($x370 (= $x323 true)))
 (let (($x333 (= $x370 true)))
 (let (($x298 (= ?x176 input.dst.llvm-%m)))
 (let (($x273 (= $x298 true)))
 (let (($x402 (= $x273 true)))
 (let (($x270 (= ?x413 input.dst.llvm-%n)))
 (let (($x293 (= $x270 true)))
 (let (($x159 (= $x293 true)))
 (let (($x202 (and $x159 $x402)))
 (let (($x303 (and $x202 $x333)))
 (let (($x350 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x112 (and $x350 $x303)))
 (let (($x385 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x203 (and $x385 $x112)))
 (let (($x207 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x340 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x340 (_ bv1 32))))
 (=> $x316 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x124 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x167 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x167 (_ bv1 32))))
 (let ((?x340 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x340 (_ bv1 32))))
 (= $x316 $x318))))))
 ))
 (let (($x296 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x140 (= false false)))
 (let ((?x340 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (= ?x340 (_ bv0 32))))
 (=> $x380 $x140)))))
 ))
 (let (($x286 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x167 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x167 (_ bv0 32))))
 (let ((?x340 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (= ?x340 (_ bv0 32))))
 (= $x380 $x51))))))
 ))
 (let (($x211 (and $x286 $x296)))
 (let (($x307 (and $x211 $x124)))
 (let (($x406 (and $x307 $x207)))
 (let (($x397 (and $x406 $x203)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x331 (and $x229 $x397)))
 (let (($x16 (=> $x331 $x47)))
 (not $x16))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x290 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x390 (bvneg ?x290)))
 (let (($x339 (= ?x390 input.spec-%var-n-1)))
 (let (($x47 (= $x339 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x400 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x355 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x176 (concat ?x355 (concat ?x262 (concat ?x400 ?x349)))))
 (let (($x249 (= input.dst.llvm-%m ?x176)))
 (let ((?x343 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x413 (concat ?x188 (concat ?x288 (concat ?x29 ?x343)))))
 (let (($x39 (= input.dst.llvm-%n ?x413)))
 (let (($x528 (and $x39 $x249)))
 (let (($x335 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x187 (and $x335 $x528)))
 (let ((?x366 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x568 (= (_ bv0 32) ?x366)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x352 (= (_ bv0 32) ?x78)))
 (let ((?x283 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x283)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x398 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (and $x127 $x398)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x279 $x115)))
 (let (($x302 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x374 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x326 (and $x374 $x45)))
 (let (($x66 (not $x326)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x6 $x30)))
 (let (($x191 (and (not $x151) $x66)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x300 $x317)))
 (let (($x201 (not $x111)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x395 (and $x275 $x194)))
 (let (($x394 (and (not $x395) $x201)))
 (let (($x431 (and (and (and (and (and (and $x394 $x191) $x232) $x40) $x302) $x244) $x101)))
 (let (($x530 (and (and (and $x431 $x352) $x568) $x187)))
 (let (($x323 (= $x530 true)))
 (let (($x370 (= $x323 true)))
 (let (($x333 (= $x370 true)))
 (let (($x298 (= ?x176 input.dst.llvm-%m)))
 (let (($x273 (= $x298 true)))
 (let (($x402 (= $x273 true)))
 (let (($x270 (= ?x413 input.dst.llvm-%n)))
 (let (($x293 (= $x270 true)))
 (let (($x159 (= $x293 true)))
 (let (($x202 (and $x159 $x402)))
 (let (($x303 (and $x202 $x333)))
 (let (($x350 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x112 (and $x350 $x303)))
 (let (($x385 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x203 (and $x385 $x112)))
 (let (($x207 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x340 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x340 (_ bv1 32))))
 (=> $x316 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x124 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x167 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x167 (_ bv1 32))))
 (let ((?x340 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x340 (_ bv1 32))))
 (= $x316 $x318))))))
 ))
 (let (($x296 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x140 (= false false)))
 (let ((?x340 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (= ?x340 (_ bv0 32))))
 (=> $x380 $x140)))))
 ))
 (let (($x286 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x167 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x167 (_ bv0 32))))
 (let ((?x340 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (= ?x340 (_ bv0 32))))
 (= $x380 $x51))))))
 ))
 (let (($x211 (and $x286 $x296)))
 (let (($x307 (and $x211 $x124)))
 (let (($x406 (and $x307 $x207)))
 (let (($x397 (and $x406 $x203)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x331 (and $x229 $x397)))
 (let (($x16 (=> $x331 $x47)))
 (not $x16))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x138 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x138)))
 (let (($x102 (= ?x100 input.dst.llvm-%n)))
 (let (($x291 (= $x102 true)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x336 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x165 (concat ?x185 (concat ?x128 (concat ?x336 ?x28)))))
 (let (($x219 (= ?x165 input.dst.llvm-%n)))
 (let (($x21 (= $x219 true)))
 (let (($x82 (= $x21 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x326 (concat ?x151 (concat ?x201 ?x317)))))
 (let (($x510 (= input.dst.llvm-%m ?x66)))
 (let (($x360 (= input.dst.llvm-%n ?x165)))
 (let (($x561 (and $x360 $x510)))
 (let (($x16 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x409 (and $x16 $x561)))
 (let ((?x290 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x390 (= (_ bv0 32) ?x290)))
 (let ((?x331 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x331)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x397 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let ((?x370 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x333 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x370)))
 (let (($x323 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x303 (and $x323 $x333)))
 (let (($x530 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x530 $x303)))
 (let (($x187 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x249 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x335 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x437 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x568 (and $x437 $x366)))
 (let (($x509 (not $x568)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x431 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x352 (and $x431 $x78)))
 (let (($x109 (and (not $x352) $x509)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x398 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x398 $x115)))
 (let (($x23 (not $x244)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x302 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x302 $x279)))
 (let (($x101 (and (not $x127) $x23)))
 (let (($x220 (and (and (and (and (and (and $x101 $x109) $x335) $x249) $x187) $x112) $x397)))
 (let (($x91 (and (and (and $x220 $x274) $x390) $x409)))
 (let (($x18 (= $x91 true)))
 (let (($x372 (= $x18 true)))
 (let (($x19 (= $x372 true)))
 (let (($x382 (= ?x66 input.dst.llvm-%m)))
 (let (($x232 (= $x382 true)))
 (let (($x315 (= $x232 true)))
 (let (($x209 (and $x315 $x19)))
 (let (($x257 (and $x209 $x82)))
 (let (($x194 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x259 (and $x194 $x257)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x504 (and $x190 $x259)))
 (let (($x402 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x31 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x277 (bvuge ?x31 (_ bv1 32))))
 (=> $x277 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x311 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x363 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x363 (_ bv1 32))))
 (let ((?x31 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x277 (bvuge ?x31 (_ bv1 32))))
 (= $x277 $x293))))))
 ))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x391 (= false false)))
 (let ((?x31 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x31 (_ bv0 32))))
 (=> $x260 $x391)))))
 ))
 (let (($x162 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x363 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x363 (_ bv0 32))))
 (let ((?x31 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x31 (_ bv0 32))))
 (= $x260 $x245))))))
 ))
 (let (($x343 (and $x162 $x29)))
 (let (($x262 (and $x343 $x311)))
 (let (($x202 (and $x262 $x402)))
 (let (($x386 (and $x202 $x504)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x10 (and $x229 $x386)))
 (let (($x376 (=> $x10 $x291)))
 (not $x376))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x138 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x138)))
 (let (($x102 (= ?x100 input.dst.llvm-%n)))
 (let (($x291 (= $x102 true)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x336 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x165 (concat ?x185 (concat ?x128 (concat ?x336 ?x28)))))
 (let (($x219 (= ?x165 input.dst.llvm-%n)))
 (let (($x21 (= $x219 true)))
 (let (($x82 (= $x21 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x326 (concat ?x151 (concat ?x201 ?x317)))))
 (let (($x510 (= input.dst.llvm-%m ?x66)))
 (let (($x360 (= input.dst.llvm-%n ?x165)))
 (let (($x561 (and $x360 $x510)))
 (let (($x16 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x409 (and $x16 $x561)))
 (let ((?x290 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x390 (= (_ bv0 32) ?x290)))
 (let ((?x331 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x331)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x397 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let ((?x370 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x333 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x370)))
 (let (($x323 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x303 (and $x323 $x333)))
 (let (($x530 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x530 $x303)))
 (let (($x187 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x249 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x335 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x437 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x568 (and $x437 $x366)))
 (let (($x509 (not $x568)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x431 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x352 (and $x431 $x78)))
 (let (($x109 (and (not $x352) $x509)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x398 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x398 $x115)))
 (let (($x23 (not $x244)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x302 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x302 $x279)))
 (let (($x101 (and (not $x127) $x23)))
 (let (($x220 (and (and (and (and (and (and $x101 $x109) $x335) $x249) $x187) $x112) $x397)))
 (let (($x91 (and (and (and $x220 $x274) $x390) $x409)))
 (let (($x18 (= $x91 true)))
 (let (($x372 (= $x18 true)))
 (let (($x19 (= $x372 true)))
 (let (($x382 (= ?x66 input.dst.llvm-%m)))
 (let (($x232 (= $x382 true)))
 (let (($x315 (= $x232 true)))
 (let (($x209 (and $x315 $x19)))
 (let (($x257 (and $x209 $x82)))
 (let (($x194 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x259 (and $x194 $x257)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x504 (and $x190 $x259)))
 (let (($x402 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x31 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x277 (bvuge ?x31 (_ bv1 32))))
 (=> $x277 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x311 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x363 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x293 (bvuge ?x363 (_ bv1 32))))
 (let ((?x31 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x277 (bvuge ?x31 (_ bv1 32))))
 (= $x277 $x293))))))
 ))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x391 (= false false)))
 (let ((?x31 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x31 (_ bv0 32))))
 (=> $x260 $x391)))))
 ))
 (let (($x162 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x363 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x363 (_ bv0 32))))
 (let ((?x31 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x31 (_ bv0 32))))
 (= $x260 $x245))))))
 ))
 (let (($x343 (and $x162 $x29)))
 (let (($x262 (and $x343 $x311)))
 (let (($x202 (and $x262 $x402)))
 (let (($x386 (and $x202 $x504)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x10 (and $x229 $x386)))
 (let (($x376 (=> $x10 $x291)))
 (not $x376))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x400 (= (_ bv0 2) ?x92)))
 (let (($x349 (= $x400 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x499 (concat ?x307 (concat ?x380 (concat ?x347 ?x74)))))
 (let (($x350 (= ?x499 input.dst.llvm-%m)))
 (let (($x288 (= $x350 true)))
 (let (($x364 (= $x288 true)))
 (let (($x89 (= input.dst.llvm-%m ?x499)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x530 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x303 (concat ?x530 (concat ?x96 ?x39)))))
 (let (($x254 (= input.dst.llvm-%n ?x112)))
 (let (($x140 (and $x254 $x89)))
 (let (($x376 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x167 (and $x376 $x140)))
 (let ((?x362 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x362)))
 (let ((?x386 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x386)))
 (let ((?x259 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x504 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x259)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x219)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (and $x209 $x21)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (and $x19 $x82)))
 (let (($x372 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x11 $x42)))
 (let (($x360 (not $x165)))
 (let (($x336 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x407 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x407 $x336)))
 (let (($x561 (and (not $x28) $x360)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x47 $x16)))
 (let (($x185 (not $x170)))
 (let (($x390 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x359 (and $x213 $x390)))
 (let (($x128 (and (not $x359) $x185)))
 (let (($x316 (and (and (and (and (and (and $x128 $x561) $x91) $x18) $x372) $x257) $x504)))
 (let (($x240 (and (and (and $x316 $x10) $x138) $x167)))
 (let (($x406 (= $x240 true)))
 (let (($x385 (= $x406 true)))
 (let (($x20 (= $x385 true)))
 (let (($x203 (= ?x112 input.dst.llvm-%n)))
 (let (($x397 (= $x203 true)))
 (let (($x220 (= $x397 true)))
 (let (($x63 (and $x220 $x20)))
 (let (($x60 (and $x63 $x364)))
 (let (($x509 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x413 (and $x509 $x60)))
 (let (($x437 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x415 (and $x437 $x413)))
 (let (($x78 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x374 (_ bv1 32))))
 (=> $x205 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x273 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x273 (_ bv1 32))))
 (let ((?x374 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x374 (_ bv1 32))))
 (= $x205 $x232))))))
 ))
 (let (($x201 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x30 (= false false)))
 (let ((?x374 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x374 (_ bv0 32))))
 (=> $x45 $x30)))))
 ))
 (let (($x6 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x273 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x273 (_ bv0 32))))
 (let ((?x374 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x374 (_ bv0 32))))
 (= $x45 $x200))))))
 ))
 (let (($x317 (and $x6 $x201)))
 (let (($x279 (and $x317 $x198)))
 (let (($x352 (and $x279 $x78)))
 (let (($x270 (and $x352 $x415)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x159 (and $x229 $x270)))
 (let (($x393 (=> $x159 $x349)))
 (not $x393)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 ((_ extract 1 0) input.dst.llvm-%m)))
 (let (($x400 (= (_ bv0 2) ?x92)))
 (let (($x349 (= $x400 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x499 (concat ?x307 (concat ?x380 (concat ?x347 ?x74)))))
 (let (($x350 (= ?x499 input.dst.llvm-%m)))
 (let (($x288 (= $x350 true)))
 (let (($x364 (= $x288 true)))
 (let (($x89 (= input.dst.llvm-%m ?x499)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x530 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x112 (concat ?x303 (concat ?x530 (concat ?x96 ?x39)))))
 (let (($x254 (= input.dst.llvm-%n ?x112)))
 (let (($x140 (and $x254 $x89)))
 (let (($x376 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x167 (and $x376 $x140)))
 (let ((?x362 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x362)))
 (let ((?x386 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x386)))
 (let ((?x259 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x504 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x259)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x219)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (and $x209 $x21)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (and $x19 $x82)))
 (let (($x372 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x11 $x42)))
 (let (($x360 (not $x165)))
 (let (($x336 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x407 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x407 $x336)))
 (let (($x561 (and (not $x28) $x360)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x47 $x16)))
 (let (($x185 (not $x170)))
 (let (($x390 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x359 (and $x213 $x390)))
 (let (($x128 (and (not $x359) $x185)))
 (let (($x316 (and (and (and (and (and (and $x128 $x561) $x91) $x18) $x372) $x257) $x504)))
 (let (($x240 (and (and (and $x316 $x10) $x138) $x167)))
 (let (($x406 (= $x240 true)))
 (let (($x385 (= $x406 true)))
 (let (($x20 (= $x385 true)))
 (let (($x203 (= ?x112 input.dst.llvm-%n)))
 (let (($x397 (= $x203 true)))
 (let (($x220 (= $x397 true)))
 (let (($x63 (and $x220 $x20)))
 (let (($x60 (and $x63 $x364)))
 (let (($x509 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x413 (and $x509 $x60)))
 (let (($x437 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x415 (and $x437 $x413)))
 (let (($x78 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x374 (_ bv1 32))))
 (=> $x205 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x198 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x273 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x273 (_ bv1 32))))
 (let ((?x374 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x374 (_ bv1 32))))
 (= $x205 $x232))))))
 ))
 (let (($x201 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x30 (= false false)))
 (let ((?x374 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x374 (_ bv0 32))))
 (=> $x45 $x30)))))
 ))
 (let (($x6 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x273 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x273 (_ bv0 32))))
 (let ((?x374 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x374 (_ bv0 32))))
 (= $x45 $x200))))))
 ))
 (let (($x317 (and $x6 $x201)))
 (let (($x279 (and $x317 $x198)))
 (let (($x352 (and $x279 $x78)))
 (let (($x270 (and $x352 $x415)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x159 (and $x229 $x270)))
 (let (($x393 (=> $x159 $x349)))
 (not $x393)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x283 (= $x127 true)))
 (let (($x9 (= $x283 true)))
 (let ((?x332 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x262 (concat ?x260 (concat ?x192 ?x332)))))
 (let (($x151 (= ?x68 input.dst.llvm-%n)))
 (let (($x394 (= $x151 true)))
 (let (($x166 (= $x394 true)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x367 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x211 (concat ?x257 (concat ?x209 (concat ?x367 ?x286)))))
 (let (($x391 (= input.dst.llvm-%m ?x211)))
 (let (($x278 (= input.dst.llvm-%n ?x68)))
 (let (($x363 (and $x278 $x391)))
 (let (($x184 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x245 (and $x184 $x363)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x400 (= (_ bv0 32) ?x92)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x159)))
 (let ((?x415 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x415)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x364 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x288)))
 (let (($x350 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x350 $x364)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x413 (and $x63 $x60)))
 (let (($x20 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x406 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x74 $x253)))
 (let (($x499 (not $x157)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x380 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x347 (and $x380 $x88)))
 (let (($x140 (and (not $x347) $x499)))
 (let (($x376 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x291 $x376)))
 (let (($x124 (not $x254)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x362 $x207)))
 (let (($x340 (and (not $x100) $x124)))
 (let (($x293 (and (and (and (and (and (and $x340 $x140) $x167) $x406) $x20) $x413) $x270)))
 (let (($x202 (and (and (and $x293 $x55) $x400) $x245)))
 (let (($x190 (= $x202 true)))
 (let (($x275 (= $x190 true)))
 (let (($x133 (= $x275 true)))
 (let (($x504 (= ?x211 input.dst.llvm-%m)))
 (let (($x316 (= $x504 true)))
 (let (($x386 (= $x316 true)))
 (let (($x194 (and $x386 $x133)))
 (let (($x66 (and $x194 $x166)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x191 (and $x360 $x66)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x382 (and $x11 $x191)))
 (let (($x336 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x370 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x370 (_ bv1 32))))
 (=> $x274 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x290 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x431 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x397 (bvuge ?x431 (_ bv1 32))))
 (let ((?x370 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x370 (_ bv1 32))))
 (= $x274 $x397))))))
 ))
 (let (($x96 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x228 (= false false)))
 (let ((?x370 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (= ?x370 (_ bv0 32))))
 (=> $x333 $x228)))))
 ))
 (let (($x187 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x431 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x431 (_ bv0 32))))
 (let ((?x370 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (= ?x370 (_ bv0 32))))
 (= $x333 $x217))))))
 ))
 (let (($x39 (and $x187 $x96)))
 (let (($x390 (and $x39 $x290)))
 (let (($x28 (and $x390 $x336)))
 (let (($x315 (and $x28 $x382)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x40 (and $x229 $x315)))
 (let (($x398 (=> $x40 $x9)))
 (not $x398)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x283 (= $x127 true)))
 (let (($x9 (= $x283 true)))
 (let ((?x332 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x262 (concat ?x260 (concat ?x192 ?x332)))))
 (let (($x151 (= ?x68 input.dst.llvm-%n)))
 (let (($x394 (= $x151 true)))
 (let (($x166 (= $x394 true)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x367 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x211 (concat ?x257 (concat ?x209 (concat ?x367 ?x286)))))
 (let (($x391 (= input.dst.llvm-%m ?x211)))
 (let (($x278 (= input.dst.llvm-%n ?x68)))
 (let (($x363 (and $x278 $x391)))
 (let (($x184 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x245 (and $x184 $x363)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x400 (= (_ bv0 32) ?x92)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x159)))
 (let ((?x415 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x415)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x364 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x288)))
 (let (($x350 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x350 $x364)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x413 (and $x63 $x60)))
 (let (($x20 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x406 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x74 $x253)))
 (let (($x499 (not $x157)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x380 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x347 (and $x380 $x88)))
 (let (($x140 (and (not $x347) $x499)))
 (let (($x376 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x291 $x376)))
 (let (($x124 (not $x254)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x362 $x207)))
 (let (($x340 (and (not $x100) $x124)))
 (let (($x293 (and (and (and (and (and (and $x340 $x140) $x167) $x406) $x20) $x413) $x270)))
 (let (($x202 (and (and (and $x293 $x55) $x400) $x245)))
 (let (($x190 (= $x202 true)))
 (let (($x275 (= $x190 true)))
 (let (($x133 (= $x275 true)))
 (let (($x504 (= ?x211 input.dst.llvm-%m)))
 (let (($x316 (= $x504 true)))
 (let (($x386 (= $x316 true)))
 (let (($x194 (and $x386 $x133)))
 (let (($x66 (and $x194 $x166)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x191 (and $x360 $x66)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x382 (and $x11 $x191)))
 (let (($x336 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x370 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x370 (_ bv1 32))))
 (=> $x274 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x290 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x431 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x397 (bvuge ?x431 (_ bv1 32))))
 (let ((?x370 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x370 (_ bv1 32))))
 (= $x274 $x397))))))
 ))
 (let (($x96 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x228 (= false false)))
 (let ((?x370 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (= ?x370 (_ bv0 32))))
 (=> $x333 $x228)))))
 ))
 (let (($x187 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x431 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x431 (_ bv0 32))))
 (let ((?x370 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (= ?x370 (_ bv0 32))))
 (= $x333 $x217))))))
 ))
 (let (($x39 (and $x187 $x96)))
 (let (($x390 (and $x39 $x290)))
 (let (($x28 (and $x390 $x336)))
 (let (($x315 (and $x28 $x382)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x40 (and $x229 $x315)))
 (let (($x398 (=> $x40 $x9)))
 (not $x398)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x576 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x572 (concat (select input.dst.llvm-mem (bvadd ?x576 (_ bv1 32))) (select input.dst.llvm-mem ?x576))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x576 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x576 (_ bv2 32))) ?x572))))
 (let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x407 (_ bv1 32))))
 (=> $x316 (= (_ bv0 32) ?x134))))))))
 ))
 (let (($x261 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x338 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x407 (_ bv1 32))))
 (= $x316 (bvuge ?x338 (_ bv1 32)))))))
 ))
 (let (($x38 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x19 (= false false)))
 (let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x510 (= ?x407 (_ bv0 32))))
 (=> $x510 $x19)))))
 ))
 (let (($x357 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x510 (= ?x407 (_ bv0 32))))
 (= $x510 (= (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x389 (and $x357 $x38)))
 (let (($x195 (and $x389 $x261)))
 (let (($x346 (and $x195 $x105)))
 (let (($x401 (= $x346 true)))
 (let (($x94 (= $x401 true)))
 (let ((?x300 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x395 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x395 (concat ?x198 (concat ?x374 ?x300)))))
 (let (($x528 (= ?x30 input.dst.llvm-%m)))
 (let (($x323 (= $x528 true)))
 (let (($x112 (= $x323 true)))
 (let (($x273 (= input.dst.llvm-%m ?x30)))
 (let ((?x240 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x413 (concat ?x60 (concat ?x63 (concat ?x29 ?x240)))))
 (let (($x409 (= input.dst.llvm-%n ?x413)))
 (let (($x200 (and $x409 $x273)))
 (let (($x51 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x6 (and $x51 $x200)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x283 (= (_ bv0 32) ?x127)))
 (let ((?x315 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x315)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x382 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x394 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (and $x194 $x394)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x133 $x166)))
 (let (($x275 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x190 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x355 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x155 $x355)))
 (let (($x278 (not $x68)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x335 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x332 (and $x335 $x192)))
 (let (($x363 (and (not $x332) $x278)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x393 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (and $x393 $x184)))
 (let (($x262 (not $x311)))
 (let (($x400 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x402 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x402 $x400)))
 (let (($x260 (and (not $x298) $x262)))
 (let (($x78 (and (and (and (and (and (and $x260 $x363) $x202) $x190) $x275) $x66) $x382)))
 (let (($x437 (and (and (and $x78 $x40) $x283) $x6)))
 (let (($x366 (= $x437 true)))
 (let (($x568 (= $x366 true)))
 (let (($x509 (= $x568 true)))
 (let (($x415 (= ?x413 input.dst.llvm-%n)))
 (let (($x270 (= $x415 true)))
 (let (($x293 (= $x270 true)))
 (let (($x530 (and $x293 $x509)))
 (let (($x160 (and $x530 $x112)))
 (let (($x499 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x203 (and $x499 $x160)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x220 (and $x74 $x203)))
 (let (($x88 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x21 (_ bv1 32))))
 (=> $x318 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x138 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x407 (_ bv1 32))))
 (let ((?x21 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x21 (_ bv1 32))))
 (= $x318 $x316))))))
 ))
 (let (($x367 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x19 (= false false)))
 (let ((?x21 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x21 (_ bv0 32))))
 (=> $x82 $x19)))))
 ))
 (let (($x296 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x510 (= ?x407 (_ bv0 32))))
 (let ((?x21 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x21 (_ bv0 32))))
 (= $x82 $x510))))))
 ))
 (let (($x286 (and $x296 $x367)))
 (let (($x207 (and $x286 $x138)))
 (let (($x347 (and $x207 $x88)))
 (let (($x331 (and $x347 $x220)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x359 (and $x229 $x331)))
 (let (($x171 (=> $x359 $x94)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x576 (bvadd (bvmul Lambda25Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x572 (concat (select input.dst.llvm-mem (bvadd ?x576 (_ bv1 32))) (select input.dst.llvm-mem ?x576))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x576 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x576 (_ bv2 32))) ?x572))))
 (let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x407 (_ bv1 32))))
 (=> $x316 (= (_ bv0 32) ?x134))))))))
 ))
 (let (($x261 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x338 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x407 (_ bv1 32))))
 (= $x316 (bvuge ?x338 (_ bv1 32)))))))
 ))
 (let (($x38 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x19 (= false false)))
 (let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x510 (= ?x407 (_ bv0 32))))
 (=> $x510 $x19)))))
 ))
 (let (($x357 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x510 (= ?x407 (_ bv0 32))))
 (= $x510 (= (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x389 (and $x357 $x38)))
 (let (($x195 (and $x389 $x261)))
 (let (($x346 (and $x195 $x105)))
 (let (($x401 (= $x346 true)))
 (let (($x94 (= $x401 true)))
 (let ((?x300 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x395 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x395 (concat ?x198 (concat ?x374 ?x300)))))
 (let (($x528 (= ?x30 input.dst.llvm-%m)))
 (let (($x323 (= $x528 true)))
 (let (($x112 (= $x323 true)))
 (let (($x273 (= input.dst.llvm-%m ?x30)))
 (let ((?x240 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x413 (concat ?x60 (concat ?x63 (concat ?x29 ?x240)))))
 (let (($x409 (= input.dst.llvm-%n ?x413)))
 (let (($x200 (and $x409 $x273)))
 (let (($x51 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x6 (and $x51 $x200)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x283 (= (_ bv0 32) ?x127)))
 (let ((?x315 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x315)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x382 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x394 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (and $x194 $x394)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x133 $x166)))
 (let (($x275 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x190 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x355 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x155 $x355)))
 (let (($x278 (not $x68)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x335 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x332 (and $x335 $x192)))
 (let (($x363 (and (not $x332) $x278)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x393 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (and $x393 $x184)))
 (let (($x262 (not $x311)))
 (let (($x400 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x402 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x402 $x400)))
 (let (($x260 (and (not $x298) $x262)))
 (let (($x78 (and (and (and (and (and (and $x260 $x363) $x202) $x190) $x275) $x66) $x382)))
 (let (($x437 (and (and (and $x78 $x40) $x283) $x6)))
 (let (($x366 (= $x437 true)))
 (let (($x568 (= $x366 true)))
 (let (($x509 (= $x568 true)))
 (let (($x415 (= ?x413 input.dst.llvm-%n)))
 (let (($x270 (= $x415 true)))
 (let (($x293 (= $x270 true)))
 (let (($x530 (and $x293 $x509)))
 (let (($x160 (and $x530 $x112)))
 (let (($x499 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x203 (and $x499 $x160)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x220 (and $x74 $x203)))
 (let (($x88 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x21 (_ bv1 32))))
 (=> $x318 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x138 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x407 (_ bv1 32))))
 (let ((?x21 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x21 (_ bv1 32))))
 (= $x318 $x316))))))
 ))
 (let (($x367 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x19 (= false false)))
 (let ((?x21 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x21 (_ bv0 32))))
 (=> $x82 $x19)))))
 ))
 (let (($x296 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x407 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x510 (= ?x407 (_ bv0 32))))
 (let ((?x21 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x21 (_ bv0 32))))
 (= $x82 $x510))))))
 ))
 (let (($x286 (and $x296 $x367)))
 (let (($x207 (and $x286 $x138)))
 (let (($x347 (and $x207 $x88)))
 (let (($x331 (and $x347 $x220)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x359 (and $x229 $x331)))
 (let (($x171 (=> $x359 $x94)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285844/query
