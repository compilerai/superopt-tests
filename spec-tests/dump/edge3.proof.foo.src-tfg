=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%8%d L2%9%bbentry L2%11%bbentry L2%13%d L2%14%bbentry L2%16%bbentry L2%18%bbentry L2%19%bbentry E0%0%d
=Edges:
L0%0%d => L2%8%d
L2%8%d => L2%11%bbentry
L2%8%d => L2%9%bbentry
L2%9%bbentry => L2%19%bbentry
L2%11%bbentry => L2%13%d
L2%13%d => L2%16%bbentry
L2%13%d => L2%14%bbentry
L2%14%bbentry => L2%18%bbentry
L2%16%bbentry => L2%18%bbentry
L2%18%bbentry => L2%19%bbentry
L2%19%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%8%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%9%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%11%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%13%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%14%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%16%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%18%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%19%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-0 : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-y-0 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L2%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-2.L2%8%d
1 : input.spec-%var-x-0 : BV:32
2 : input.spec-%var-y-0 : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-0.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : map_init(1) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%tmpvar-3.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
3 : input.spec-%var-y-0 : BV:32
4 : input.spec-%var-x-0 : BV:32
5 : bvadd(4, 3) : BV:32
6 : map_set(2, 3, 5) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-4.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : map_init(1) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
3 : input.spec-%var-x-0 : BV:32
4 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
5 : map_init(4) : MAP[BV:32 -> BV:32]
6 : input.spec-%var-y-0 : BV:32
7 : bvadd(3, 6) : BV:32
8 : map_set(5, 6, 7) : MAP[BV:32 -> BV:32]
9 : map_set(2, 3, 8) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%tmpvar-5.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : map_init(1) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
3 : input.spec-%var-x-0 : BV:32
4 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
5 : map_init(4) : MAP[BV:32 -> BV:32]
6 : input.spec-%var-y-0 : BV:32
7 : bvadd(3, 6) : BV:32
8 : map_set(5, 6, 7) : MAP[BV:32 -> BV:32]
9 : map_set(2, 3, 8) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
10 : map_get(9, 3) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=spec-%var-m-0.L2%8%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : map_init(1) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
3 : input.spec-%var-x-0 : BV:32
4 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
5 : map_init(4) : MAP[BV:32 -> BV:32]
6 : input.spec-%var-y-0 : BV:32
7 : bvadd(3, 6) : BV:32
8 : map_set(5, 6, 7) : MAP[BV:32 -> BV:32]
9 : map_set(2, 3, 8) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((func_head*ctor_map)*ctor_map)*intrinsic_app_bvadd)*intrinsic_app_map_set)*((intrinsic_app_map_set*letin_def)*intrinsic_app_map_get))
tfg_edge_comment end

=Edge: L2%8%d => L2%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%8%d => L2%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:10:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%9%bbentry => L2%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-8.L2%19%bbentry
1 : input.spec-%var-x-0 : BV:32
=spec-%var-u-0.L2%19%bbentry
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_0)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%11%bbentry => L2%13%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-6.L2%13%d
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
4 : input.spec-%var-y-0 : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
=spec-%var-m1-0.L2%13%d
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%13%d => L2%16%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:17:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%13%d => L2%14%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:15:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%14%bbentry => L2%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%var-y-0 : BV:32
=spec-%var-u2-0.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_0)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%16%bbentry => L2%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-m2-0.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%18%bbentry => L2%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-8.L2%19%bbentry
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%19%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*letin_body)*func_ret)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-0
1 : input.spec-%var-x-0 : BV:32
=Loc 2 in src.spec.foo.
REGMEM
spec-%var-y-0
1 : input.spec-%var-y-0 : BV:32
=Loc 19 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 20 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 21 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 22 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L2%8%d
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 23 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L2%13%d
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
=Loc 24 in src.spec.foo.
REGMEM
spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-10.E0%0%d : BV:32
=Loc 25 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L2%19%bbentry
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-9.E0%0%d : BV:32
=Loc 27 in src.spec.foo.
REGMEM
spec-%var-m1-0.L2%13%d
1 : input.spec-%var-m1-0.L2%13%d : MAP[BV:32 -> BV:32]
=Loc 28 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%8%d
1 : input.spec-%tmpvar-0.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 29 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L2%8%d
1 : input.spec-%tmpvar-1.L2%8%d : MAP[BV:32 -> BV:32]
=Loc 30 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L2%8%d
1 : input.spec-%tmpvar-2.L2%8%d : BV:32
=Loc 31 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L2%8%d
1 : input.spec-%tmpvar-3.L2%8%d : MAP[BV:32 -> BV:32]
=Loc 32 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L2%8%d
1 : input.spec-%tmpvar-4.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 33 in src.spec.foo.
REGMEM
spec-%var-m-0.L2%8%d
1 : input.spec-%var-m-0.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 34 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-u2-0.L2%18%bbentry
1 : input.spec-%var-u2-0.L2%18%bbentry : UNIT
=Loc 36 in src.spec.foo.
REGMEM
spec-%var-m2-0.L2%18%bbentry
1 : input.spec-%var-m2-0.L2%18%bbentry : BV:32
=Loc 37 in src.spec.foo.
REGMEM
spec-%var-u-0.L2%19%bbentry
1 : input.spec-%var-u-0.L2%19%bbentry : UNIT
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 2, 
=live locs at L2%8%d
1, 2, 22, 
=live locs at L2%9%bbentry
1, 
=live locs at L2%11%bbentry
2, 22, 
=live locs at L2%13%d
2, 23, 
=live locs at L2%14%bbentry
2, 
=live locs at L2%16%bbentry
23, 
=live locs at L2%18%bbentry
34, 
=live locs at L2%19%bbentry
25, 
=live locs at E0%0%d
24[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 2, 19, 20, 21
=loc definedness at L2%8%d
1, 2, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33
=loc definedness at L2%9%bbentry
1, 2, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33
=loc definedness at L2%11%bbentry
1, 2, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33
=loc definedness at L2%13%d
1, 2, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33
=loc definedness at L2%14%bbentry
1, 2, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33
=loc definedness at L2%16%bbentry
1, 2, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33
=loc definedness at L2%18%bbentry
1, 2, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34
=loc definedness at L2%19%bbentry
1, 2, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 33
=loc definedness at E0%0%d
1, 2, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1, 2
=branch affecting variable locs at L2%8%d
2, 22
=branch affecting variable locs at L2%9%bbentry

=branch affecting variable locs at L2%11%bbentry
2, 22
=branch affecting variable locs at L2%13%d
23
=branch affecting variable locs at L2%14%bbentry

=branch affecting variable locs at L2%16%bbentry

=branch affecting variable locs at L2%18%bbentry

=branch affecting variable locs at L2%19%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 22 {input.spec-%tmpvar-5.L2%8%d }
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 28 {input.spec-%tmpvar-0.L2%8%d }
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 29 {input.spec-%tmpvar-1.L2%8%d }
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 30 {input.spec-%tmpvar-2.L2%8%d }
1 : input.spec-%var-x-0 : BV:32
2 : input.spec-%var-y-0 : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 31 {input.spec-%tmpvar-3.L2%8%d }
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-y-0 : BV:32
10 : input.spec-%var-x-0 : BV:32
11 : bvadd(10, 9) : BV:32
12 : map_set(8, 9, 11) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 32 {input.spec-%tmpvar-4.L2%8%d }
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d for loc_id 33 {input.spec-%var-m-0.L2%8%d }
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%8%d done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%19%bbentry for loc_id 25 {input.spec-%tmpvar-8.L2%19%bbentry }
1 : input.spec-%var-x-0 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%19%bbentry for loc_id 37 {input.spec-%var-u-0.L2%19%bbentry }
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%d
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%d for loc_id 23 {input.spec-%tmpvar-6.L2%13%d }
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
4 : input.spec-%var-y-0 : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%d for loc_id 27 {input.spec-%var-m1-0.L2%13%d }
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%11%bbentry=>L2%13%d done
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%14%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%14%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%16%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%13%d=>L2%16%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%18%bbentry for loc_id 34 {input.spec-%tmpvar-7.L2%18%bbentry }
1 : input.spec-%var-y-0 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%18%bbentry for loc_id 35 {input.spec-%var-u2-0.L2%18%bbentry }
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%14%bbentry=>L2%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry for loc_id 34 {input.spec-%tmpvar-7.L2%18%bbentry }
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry for loc_id 36 {input.spec-%var-m2-0.L2%18%bbentry }
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%19%bbentry for loc_id 25 {input.spec-%tmpvar-8.L2%19%bbentry }
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%19%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%19%bbentry=>E0%0%d for loc_id 24 {input.spec-%tmpvar-10.E0%0%d }
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%19%bbentry=>E0%0%d for loc_id 26 {input.spec-%tmpvar-9.E0%0%d }
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%19%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%8%d:
vacuous mls at L2%9%bbentry:
vacuous mls at L2%11%bbentry:
vacuous mls at L2%13%d:
vacuous mls at L2%14%bbentry:
vacuous mls at L2%16%bbentry:
vacuous mls at L2%18%bbentry:
vacuous mls at L2%19%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%8%d:
non-vacuous mls at L2%9%bbentry:
non-vacuous mls at L2%11%bbentry:
non-vacuous mls at L2%13%d:
non-vacuous mls at L2%14%bbentry:
non-vacuous mls at L2%16%bbentry:
non-vacuous mls at L2%18%bbentry:
non-vacuous mls at L2%19%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 2
=loc_expr
140274 : input.spec-%var-y-0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 22
=loc_expr
140324 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 23
=loc_expr
140327 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
26 : 1 { 0x1 +1.0e1025 } : INT
27 : sum_get(25, 26) : MAP[BV:32 -> BV:32]
28 : map_get(27, 21) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 27
=loc_expr
140339 : input.spec-%var-m1-0.L2%13%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
26 : 1 { 0x1 +1.0e1025 } : INT
27 : sum_get(25, 26) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 28
=loc_expr
140340 : input.spec-%tmpvar-0.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 29
=loc_expr
140341 : input.spec-%tmpvar-1.L2%8%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 30
=loc_expr
140342 : input.spec-%tmpvar-2.L2%8%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-0 : BV:32
2 : input.spec-%var-y-0 : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 31
=loc_expr
140344 : input.spec-%tmpvar-3.L2%8%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-y-0 : BV:32
10 : input.spec-%var-x-0 : BV:32
11 : bvadd(10, 9) : BV:32
12 : map_set(8, 9, 11) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 32
=loc_expr
140345 : input.spec-%tmpvar-4.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 33
=loc_expr
140346 : input.spec-%var-m-0.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 35
=loc_expr
140347 : input.spec-%var-u2-0.L2%18%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : unit : UNIT
=avail_exprs_val.end
=loc 36
=loc_expr
140348 : input.spec-%var-m2-0.L2%18%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
26 : 1 { 0x1 +1.0e1025 } : INT
27 : sum_get(25, 26) : MAP[BV:32 -> BV:32]
28 : map_get(27, 21) : SUM[UNIT,BV:32]
29 : sum_get(28, 26) : BV:32
=avail_exprs_val.end
=loc 37
=loc_expr
140351 : input.spec-%var-u-0.L2%19%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : unit : UNIT
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 28 expr
1 : input.spec-%tmpvar-0.L2%8%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=loc 28 spreled-expr
140573 : Lambda90 : BV:32
140319 : 0 { 0x0 } : BOOL
140574 : lambda(140573, 140319) : FUNCTION[BV:32 -> BOOL]
140580 : Lambda93 : BV:32
140575 : Lambda91 : BV:32
140576 : lambda(140575, 140319) : FUNCTION[BV:32 -> BOOL]
140577 : Lambda92 : BV:32
140311 : 0 { 0x0 +1.0e129 } : BV:32
140578 : lambda(140577, 140311) : FUNCTION[BV:32 -> BV:32]
140579 : map(140576, 140578) : MAP[BV:32 -> BV:32]
140593 : lambda(140580, 140579) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
140594 : map(140574, 140593) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140595 : sym_const(140594) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=loc 29 expr
1 : input.spec-%tmpvar-1.L2%8%d : MAP[BV:32 -> BV:32]
=loc 29 spreled-expr
140604 : Lambda96 : BV:32
140319 : 0 { 0x0 } : BOOL
140609 : lambda(140604, 140319) : FUNCTION[BV:32 -> BOOL]
140616 : Lambda97 : BV:32
140311 : 0 { 0x0 +1.0e129 } : BV:32
140618 : lambda(140616, 140311) : FUNCTION[BV:32 -> BV:32]
140619 : map(140609, 140618) : MAP[BV:32 -> BV:32]
140620 : sym_const(140619) : MAP[BV:32 -> BV:32]
=loc 35 expr
1 : input.spec-%var-u2-0.L2%18%bbentry : UNIT
=loc 35 spreled-expr
140451 : unit : UNIT
=loc 37 expr
1 : input.spec-%var-u-0.L2%19%bbentry : UNIT
=loc 37 spreled-expr
140451 : unit : UNIT
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 2 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.1, )
=loc_id 19 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 20 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 21 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 22 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 28 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 29 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 35 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 37 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%9%bbentry
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%11%bbentry
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%9%bbentry=>L2%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%11%bbentry=>L2%13%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%13%d=>L2%14%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%13%d=>L2%16%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%14%bbentry=>L2%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%16%bbentry=>L2%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%18%bbentry=>L2%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%19%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%8%d
=spec-%tmpvar-2.L2%8%d
1 : input.spec-%var-x-0 : BV:32
2 : input.spec-%var-y-0 : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L2%8%d
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-0.L2%8%d
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%tmpvar-3.L2%8%d
1 : Lambda96 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda97 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : input.spec-%var-y-0 : BV:32
10 : input.spec-%var-x-0 : BV:32
11 : bvadd(10, 9) : BV:32
12 : map_set(8, 9, 11) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-4.L2%8%d
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%tmpvar-5.L2%8%d
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : map_get(24, 14) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=spec-%var-m-0.L2%8%d
1 : Lambda90 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda93 : BV:32
5 : Lambda91 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda92 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : input.spec-%var-x-0 : BV:32
15 : Lambda96 : BV:32
16 : lambda(15, 2) : FUNCTION[BV:32 -> BOOL]
17 : Lambda97 : BV:32
18 : lambda(17, 8) : FUNCTION[BV:32 -> BV:32]
19 : map(16, 18) : MAP[BV:32 -> BV:32]
20 : sym_const(19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-y-0 : BV:32
22 : bvadd(14, 21) : BV:32
23 : map_set(20, 21, 22) : MAP[BV:32 -> BV:32]
24 : map_set(13, 14, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%9%bbentry=>L2%19%bbentry
=spec-%tmpvar-8.L2%19%bbentry
1 : input.spec-%var-x-0 : BV:32
=spec-%var-u-0.L2%19%bbentry
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%11%bbentry=>L2%13%d
=spec-%tmpvar-6.L2%13%d
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
4 : input.spec-%var-y-0 : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
=spec-%var-m1-0.L2%13%d
1 : input.spec-%tmpvar-5.L2%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%13%d=>L2%14%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%13%d=>L2%16%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%14%bbentry=>L2%18%bbentry
=spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%var-y-0 : BV:32
=spec-%var-u2-0.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%16%bbentry=>L2%18%bbentry
=spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-m2-0.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%13%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%18%bbentry=>L2%19%bbentry
=spec-%tmpvar-8.L2%19%bbentry
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%19%bbentry=>E0%0%d
=spec-%tmpvar-10.E0%0%d
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=spec-%tmpvar-9.E0%0%d
1 : input.spec-%tmpvar-8.L2%19%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%8%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%8%d done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%13%d
=graph_with_simplified_assets.simplified_assumes at L2%11%bbentry=>L2%13%d done
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%14%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%14%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%16%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%13%d=>L2%16%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%14%bbentry=>L2%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%14%bbentry=>L2%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%16%bbentry=>L2%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%16%bbentry=>L2%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%18%bbentry=>L2%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%18%bbentry=>L2%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%19%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%19%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%8%d for src.spec.foo
=suffixpath_at_L2%8%d.graph_edge_composition
(L0%0%d=>L2%8%d)
=suffixpath_at_L2%9%bbentry for src.spec.foo
=suffixpath_at_L2%9%bbentry.graph_edge_composition
((L0%0%d=>L2%8%d)*(L2%8%d=>L2%9%bbentry))
=suffixpath_at_L2%11%bbentry for src.spec.foo
=suffixpath_at_L2%11%bbentry.graph_edge_composition
((L0%0%d=>L2%8%d)*(L2%8%d=>L2%11%bbentry))
=suffixpath_at_L2%13%d for src.spec.foo
=suffixpath_at_L2%13%d.graph_edge_composition
((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*(L2%11%bbentry=>L2%13%d)))
=suffixpath_at_L2%14%bbentry for src.spec.foo
=suffixpath_at_L2%14%bbentry.graph_edge_composition
((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*(L2%13%d=>L2%14%bbentry))))
=suffixpath_at_L2%16%bbentry for src.spec.foo
=suffixpath_at_L2%16%bbentry.graph_edge_composition
((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*(L2%13%d=>L2%16%bbentry))))
=suffixpath_at_L2%18%bbentry for src.spec.foo
=suffixpath_at_L2%18%bbentry.graph_edge_composition
(((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*(L2%14%bbentry=>L2%18%bbentry)))))+((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry))))))
=suffixpath_at_L2%19%bbentry for src.spec.foo
=suffixpath_at_L2%19%bbentry.graph_edge_composition
(((L0%0%d=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>L2%19%bbentry)))+((((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*(L2%14%bbentry=>L2%18%bbentry)))))+((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry))))))*(L2%18%bbentry=>L2%19%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>L2%19%bbentry)))+((((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%14%bbentry)*(L2%14%bbentry=>L2%18%bbentry)))))+((L0%0%d=>L2%8%d)*((L2%8%d=>L2%11%bbentry)*((L2%11%bbentry=>L2%13%d)*((L2%13%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry))))))*(L2%18%bbentry=>L2%19%bbentry)))*(L2%19%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%8%d
tfg.assumes_around_edge at L0%0%d=>L2%8%d done
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry done
tfg.assumes_around_edge at L2%8%d=>L2%11%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%11%bbentry done
tfg.assumes_around_edge at L2%9%bbentry=>L2%19%bbentry
tfg.assumes_around_edge at L2%9%bbentry=>L2%19%bbentry done
tfg.assumes_around_edge at L2%11%bbentry=>L2%13%d
tfg.assumes_around_edge at L2%11%bbentry=>L2%13%d done
tfg.assumes_around_edge at L2%13%d=>L2%14%bbentry
tfg.assumes_around_edge at L2%13%d=>L2%14%bbentry done
tfg.assumes_around_edge at L2%13%d=>L2%16%bbentry
tfg.assumes_around_edge at L2%13%d=>L2%16%bbentry done
tfg.assumes_around_edge at L2%14%bbentry=>L2%18%bbentry
tfg.assumes_around_edge at L2%14%bbentry=>L2%18%bbentry done
tfg.assumes_around_edge at L2%16%bbentry=>L2%18%bbentry
tfg.assumes_around_edge at L2%16%bbentry=>L2%18%bbentry done
tfg.assumes_around_edge at L2%18%bbentry=>L2%19%bbentry
tfg.assumes_around_edge at L2%18%bbentry=>L2%19%bbentry done
tfg.assumes_around_edge at L2%19%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%19%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
