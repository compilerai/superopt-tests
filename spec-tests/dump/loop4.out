argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --houdini-axiom-based-smt-query-timeout=20
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=loop4.proof
argv[9] = --spec-iospecs=loop4.iospecs
argv[10] = loop4.spec
argv[11] = loop4.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.2675993
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/loop4.c
argv[10] = -o
argv[11] = par_tmpdir/loop4.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/loop4.spec.etfg
argv[11] = par_tmpdir/loop4.c.bc
argv[12] = -o
argv[13] = par_tmpdir/loop4.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 68 time spent: 0:0:0 [0.000117s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 121 time spent: 0:0:0 [0.000196s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 645 time spent: 0:0:0 [0.002371s total; 0.000004 per start]
expr_simplify_solver: num_starts 58 time spent: 0:0:0 [0.005472s total; 0.000094 per start]
expr_simplify_syntactic: num_starts 58 time spent: 0:0:0 [0.001873s total; 0.000032 per start]
expr_simplify_using_lhs_set_helper: num_starts 76 time spent: 0:0:0 [0.021796s total; 0.000287 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 172 time spent: 0:0:0 [0.021634s total; 0.000126 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 48 time spent: 0:0:0 [0.000233s total; 0.000005 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000007s total; 0.000003 per start]
canonicalize_expr_tree: num_starts 40 time spent: 0:0:0 [0.000544s total; 0.000014 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1 time spent: 0:0:0 [0.000002s total; 0.000002 per start]
get_arithmetic_addsub_atoms: num_starts 44 time spent: 0:0:0 [0.000037s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 60 time spent: 0:0:0 [0.000661s total; 0.000011 per start]
expr_is_consts_struct_constant: num_starts 131 time spent: 0:0:0 [0.000116s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 1469 time spent: 0:0:0 [0.023171s total; 0.000016 per start]
expr_do_simplify_helper_cache: num_starts 1469 time spent: 0:0:0 [0.000947s total; 0.000001 per start]
array_constant_equals: num_starts 3 time spent: 0:0:0 [0.000007s total; 0.000002 per start]
sort_dfa_canonical: num_starts 142576 time spent: 0:0:1 [1.122875s total; 0.000008 per start]
expr_convert_to_iexpr: num_starts 30 time spent: 0:0:0 [0.013116s total; 0.000437 per start]
combo_dfa_xfer_and_meet: num_starts 65 time spent: 0:0:0 [0.041937s total; 0.000645 per start]
alias_val_xfer_and_meet: num_starts 65 time spent: 0:0:0 [0.013246s total; 0.000204 per start]
get_sprel_map_from_avail_exprs: num_starts 86 time spent: 0:0:0 [0.005114s total; 0.000059 per start]
update_memlabels_for_memslot_locs: num_starts 20 time spent: 0:0:0 [0.000077s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 130 time spent: 0:0:0 [0.004901s total; 0.000038 per start]
compute_simplified_loc_exprs_for_edge: num_starts 384 time spent: 0:0:0 [0.029990s total; 0.000078 per start]
compute_locs_definitely_written_on_edge: num_starts 130 time spent: 0:0:0 [0.000050s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 28 time spent: 0:0:0 [0.004824s total; 0.000172 per start]
edge_update_memlabel_map_for_mlvars: num_starts 65 time spent: 0:0:0 [0.000363s total; 0.000006 per start]
add_new_locs_based_on_edge: num_starts 65 time spent: 0:0:0 [0.008162s total; 0.000126 per start]
expand_locset_to_include_slots_for_memmask: num_starts 45 time spent: 0:0:0 [0.000087s total; 0.000002 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_execution_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 7e-06s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 1.5e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 1.8e-05s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 2e-05s (num_starts 22; 0.0000s/start)
lr_status_meet.: 2.1e-05s (num_starts 31; 0.0000s/start)
add_extra_node_at_start_pc.: 2.5e-05s (num_starts 1; 0.0000s/start)
expr_is_callee_save_const.: 2.8e-05s (num_starts 26; 0.0000s/start)
context_constructor.solver.: 4.1e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 5.1e-05s (num_starts 1; 0.0001s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.7e-05s (num_starts 2; 0.0000s/start)
graph_locs_add_all_indvars.: 6.6e-05s (num_starts 1; 0.0001s/start)
graph_locs_add_all_specvars.: 6.6e-05s (num_starts 1; 0.0001s/start)
compute_sprel_relations.: 7.5e-05s (num_starts 1; 0.0001s/start)
main.3.: 7.5e-05s (num_starts 1; 0.0001s/start)
propagate_sprels.: 8.3e-05s (num_starts 1; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 8.7e-05s (num_starts 10; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 8.9e-05s (num_starts 33; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000104s (num_starts 5; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000105s (num_starts 1; 0.0001s/start)
graph_locs_add_local_vars_for_edge.: 0.000119s (num_starts 33; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000142s (num_starts 1; 0.0001s/start)
expr_represents_llvm_undef.: 0.000168s (num_starts 28; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000173s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000174s (num_starts 234; 0.0000s/start)
populate_locid2expr_map.: 0.000211s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000274s (num_starts 1; 0.0003s/start)
canonicalize_llvm_nextpcs.: 0.000279s (num_starts 1; 0.0003s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000281s (num_starts 65; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000292s (num_starts 65; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000307s (num_starts 1; 0.0003s/start)
compute_z3_expr.: 0.000348s (num_starts 27; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000357s (num_starts 1; 0.0004s/start)
def_analysis::xfer_and_meet.: 0.000389s (num_starts 66; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000392s (num_starts 1; 0.0004s/start)
sp_version_relations_val_t::meet.: 0.000395s (num_starts 759; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.00044s (num_starts 45; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.00051s (num_starts 28; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000562s (num_starts 65; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.000777s (num_starts 1; 0.0008s/start)
populate_simplified_to_state.: 0.000944s (num_starts 3; 0.0003s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.00099s (num_starts 552; 0.0000s/start)
create_closure_matrix.: 0.001212s (num_starts 85; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.00123s (num_starts 51; 0.0000s/start)
query:convert_to_z3.: 0.001306s (num_starts 27; 0.0000s/start)
query:convert_from_z3.: 0.001311s (num_starts 27; 0.0000s/start)
graph_visit_exprs.: 0.001325s (num_starts 4; 0.0003s/start)
compute_lr_status_for_expr.: 0.001386s (num_starts 36; 0.0000s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.001446s (num_starts 31; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.001468s (num_starts 121; 0.0000s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.001498s (num_starts 31; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001784s (num_starts 1; 0.0018s/start)
graph_with_locs_constructor.src.spec.foo.: 0.002334s (num_starts 1; 0.0023s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.003197s (num_starts 65; 0.0000s/start)
query:simplify-z3.: 0.003587s (num_starts 65; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.003846s (num_starts 2; 0.0019s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.003993s (num_starts 68; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.004021s (num_starts 1; 0.0040s/start)
compute_new_lr_status_on_locs.: 0.004107s (num_starts 65; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.004162s (num_starts 1; 0.0042s/start)
tfg::populate_loc_definedness.before_initialize.: 0.00417s (num_starts 2; 0.0021s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.00422s (num_starts 1; 0.0042s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.004295s (num_starts 65; 0.0001s/start)
graph_to_stream.: 0.004307s (num_starts 1; 0.0043s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.004308s (num_starts 1; 0.0043s/start)
tfg::populate_loc_definedness.: 0.004377s (num_starts 2; 0.0022s/start)
populate_simplified_assets.: 0.005116s (num_starts 6; 0.0009s/start)
populate_transitive_closure.: 0.005185s (num_starts 1; 0.0052s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.005473s (num_starts 65; 0.0001s/start)
populate_dominator_and_postdominator_relations.: 0.005506s (num_starts 2; 0.0028s/start)
populate_branch_affecting_locs.: 0.005939s (num_starts 2; 0.0030s/start)
create_sp_version_relations_lattice_at_pc.: 0.006035s (num_starts 85; 0.0001s/start)
graph_identify_back_edges.: 0.006294s (num_starts 6; 0.0010s/start)
graph_identify_natural_loops.: 0.006524s (num_starts 6; 0.0011s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.006573s (num_starts 1; 0.0066s/start)
avail_exprs_create_submap.: 0.007477s (num_starts 195; 0.0000s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.007716s (num_starts 1; 0.0077s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.00772s (num_starts 1; 0.0077s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.009278s (num_starts 645; 0.0000s/start)
compute_regions.: 0.01005s (num_starts 6; 0.0017s/start)
find_dominators.: 0.011113s (num_starts 10; 0.0011s/start)
tfg_preprocess.dst.llvm.foo.: 0.011323s (num_starts 1; 0.0113s/start)
tfg::tfg_preprocess.: 0.011325s (num_starts 1; 0.0113s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.011848s (num_starts 65; 0.0002s/start)
populate_loc_liveness.: 0.012485s (num_starts 2; 0.0062s/start)
main.2.: 0.012687s (num_starts 1; 0.0127s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.013362s (num_starts 65; 0.0002s/start)
get_tfg.: 0.014953s (num_starts 1; 0.0150s/start)
get_function_tfg_map.foo.: 0.014981s (num_starts 1; 0.0150s/start)
get_function_tfg_map.: 0.014984s (num_starts 1; 0.0150s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.021872s (num_starts 76; 0.0003s/start)
populate_locs_potentially_modified_on_edge.: 0.022096s (num_starts 3; 0.0074s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.022453s (num_starts 1; 0.0225s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.022456s (num_starts 1; 0.0225s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.022461s (num_starts 1; 0.0225s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.022466s (num_starts 1; 0.0225s/start)
tfg_constructor.src.spec.foo.: 0.02247s (num_starts 1; 0.0225s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.025278s (num_starts 645; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.026213s (num_starts 645; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.027222s (num_starts 3; 0.0091s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.02944s (num_starts 645; 0.0000s/start)
tfg_postprocess_after_pointsto_analysis.: 0.035419s (num_starts 1; 0.0354s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.042021s (num_starts 65; 0.0006s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.043915s (num_starts 1; 0.0439s/start)
ftmap_run_pointsto_analysis.: 0.0966s (num_starts 1; 0.0966s/start)
parse_consts_db.: 6.70051s (num_starts 1; 6.7005s/start)
main.: 6.90072s (num_starts 1; 6.9007s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:14 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:21 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:21 : Reading in SPEC-LLVM I/O specification from file loop4.iospecs...</MSG>
<MSG>0:21 : Computing equivalence for function: foo...</MSG>
<MSG>0:21 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:21 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:21 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:21 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:21 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L3%30%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L3%30%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L3%30%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L3%33%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L3%33%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L3%33%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : product-TFG foo: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : product-TFG foo created 3 possibilities in group foo.A...</MSG>
<MSG>0:21 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%30%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:21 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:21 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:21 : Creating ssa-path for the src-tfg path L0%0%d --> L3%30%bbentry ending at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Adding a CG edge composition using the src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:21 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%30%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Computing loop hoisting select expressions at toPC L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Adding node L3%30%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:21 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:21 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:21 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:21 : foo.A2: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:21 : foo.A2: Added the 2 propagated CEs at PC L3%30%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:21 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:21 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:21 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%30%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : Done adding a CG edge composition using the src path L0%0%d --> L3%30%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%n
      2.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      3.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-n-0.L3%30%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
      6.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    3 preds:
      0.: eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      2.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:21 : Added correlation to the product-TFG foo.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%30%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%n
      2.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      3.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.spec-%var-n-0.L3%30%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
      6.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    3 preds:
      0.: eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      1.: eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR))  ==  true
      2.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:21 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:21 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:21 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:21 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:21 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:21 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:21 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial4-prove3...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:22 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:22 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:22 : foo.A2 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:22 : foo.A2 (d:0, s:0, sp: 3): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:22 : Chosen product-TFG foo.A2 will be explored later...</MSG>
<MSG>0:22 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:22 : Chose (for CE propagation) product-TFG foo.A3 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%33%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:22 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A3...</MSG>
<MSG>0:22 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A3...</MSG>
<MSG>0:22 : Creating ssa-path for the src-tfg path L0%0%d --> L3%33%bbentry ending at L3%33%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Adding a CG edge composition using the src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : Adding new edge to the product-TFG foo.A3 for fromPC L0%0%d_L0%0%d and toPC L3%33%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A3: Computing loop hoisting select expressions at toPC L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A3: Computing loop hoisting non-linear expressions at toPC L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A3: Adding node L3%33%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:22 : foo.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A3: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A3: Adding edge L0%0%d_L0%0%d=>L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:22 : foo.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:22 : foo.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:22 : foo.A3: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%33%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
142598 : not(140275) : BOOL                        : false
140281 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140273 : input.spec-%var-n-1 : BV:32               : 0
140529 : bvsgt(140281, 140273) : BOOL              : true
142595 : not(140529) : BOOL                        : false
142599 : or(142598, 142595) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4 8d1c3a7abbe6ac21a12382866715e788
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda108 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda111 : BV:32
11 : Lambda109 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda110 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda101 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda102 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
2166810999
=counter_example_end


failcond-expr = or(not(true), not(bvsgt(1, input.spec-%var-n-1))):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : input.spec-%var-n-1 : BV:32
5 : bvsgt(3, 4) : BOOL
6 : not(5) : BOOL
7 : or(2, 6) : BOOL
</MSG>
<MSG>0:22 : foo.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:22 : foo.A3: Finished executing CG's add edge function...</MSG>
<MSG>0:22 : foo.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%33%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : Done adding new edge to the product-TFG foo.A3 for fromPC L0%0%d_L0%0%d and toPC L3%33%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : Done adding a CG edge composition using the src path L0%0%d --> L3%33%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : Failed correlation of src pathset L0%0%d=>L3%33%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%33%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
142598 : not(140275) : BOOL                        : false
140281 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140273 : input.spec-%var-n-1 : BV:32               : 0
140529 : bvsgt(140281, 140273) : BOOL              : true
142595 : not(140529) : BOOL                        : false
142599 : or(142598, 142595) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4 8d1c3a7abbe6ac21a12382866715e788
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda108 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda111 : BV:32
11 : Lambda109 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda110 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda101 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda102 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
2166810999
=counter_example_end


</MSG>
<MSG>0:22 : Discovered that the correlation was useless for the product-TFG foo.A3 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:22 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:22 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:22 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:22 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1: Adding node L0%0%d_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:22 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1: Adding edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:22 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:22 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:22 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : foo.A1: Added the 2 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:22 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:22 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:22 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvule(input.spec-%var-n-1, 0)  ==  true
      1.: bvsle(input.spec-%var-n-1, 0)  ==  true
      2.: bvsge(input.spec-%var-n-1, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:22 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 3 at column 21))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvule(input.spec-%var-n-1, 0)  ==  true
      1.: bvsle(input.spec-%var-n-1, 0)  ==  true
      2.: bvsge(input.spec-%var-n-1, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:22 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:22 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:22 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:22 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:22 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:22 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:22 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:22 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:22 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:22 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3v487.ce173
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3v487.ce173      2.:z3.ce191
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3v487.ce173      2.:z3.ce191
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3v487.ce173


<MSG>0:22 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:22 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3v487.ce173
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3v487.ce173      2.:z3.ce191
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3v487.ce173      2.:z3.ce191
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3v487.ce173


<MSG>0:22 : foo.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:22 : foo.A1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:22 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : product-TFG foo.A1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : product-TFG foo.A1 created 1 possibilities in group foo.A1.B...</MSG>
<MSG>0:22 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 3 at column 21))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:22 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:22 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:22 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:22 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1.B1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1.B1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1.B1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:22 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:22 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:22 : foo.A1.B1: Propagated 3 out of 5 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:22 : foo.A1.B1: Added the 3 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:22 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:22 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:22 : foo.A1.B1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A1.B1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3v487.ce173      2.:z3v487.ce235      3.:z3.ce220
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3v487.ce173      2.:z3.ce191
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3v487.ce173      2.:z3.ce191
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3v487.ce235
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3v487.ce173


<MSG>0:22 : Added correlation to the product-TFG foo.A1.B1 (d:2, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 3) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 3 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%30%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:22 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:22 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:22 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:22 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:22 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:22 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:22 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:23 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%30%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%30%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2 (d:0, s:0, sp: 3): checked newly added edge and inferred invariants...</MSG>
<MSG>0:23 : foo.A2 (d:0, s:0, sp: 3): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:23 : product-TFG foo.A2: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Considering 2 paths to src pc L3%30%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L3%30%bbentry=>L3%30%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L3%30%bbentry=>L3%30%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Found 2 feasible correlations for paths to src pc L3%30%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : product-TFG foo.A2: Found 2 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : product-TFG foo.A2 created 2 possibilities in group foo.A2.B...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A2.B2 (d:0, s:0, sp: 3) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%30%bbentry=>L3%30%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L3%30%bbentry --> L3%30%bbentry ending at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A2.B2 for fromPC L3%30%bbentry_Lfor.cond%1%bbentry and toPC L3%30%bbentry_Lfor.cond%1%bbentry, src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Getting alloca-ptrs on edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Found no alloca-ptrs on edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Adding edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A2.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A2.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A2.B2: Propagated 3 out of 5 counter-examples across edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A2.B2: Added the 3 propagated CEs at PC L3%30%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A2.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A2.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A2.B2: Computing CG regions after the addition of the edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Done computing CG regions after the addition of the edge L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A2.B2 for fromPC L3%30%bbentry_Lfor.cond%1%bbentry and toPC L3%30%bbentry_Lfor.cond%1%bbentry, src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L3%30%bbentry --> L3%30%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce286      3.:z3.ce317
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    2 preds:
      0.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce317
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    1 preds:
      0.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce317
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce317
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : Added correlation to the product-TFG foo.A2.B2 (d:0, s:0, sp: 3) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A2.B2 (d:0, s:0, sp: 3) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry => C L3%30%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%30%bbentry=>L3%30%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce286      3.:z3.ce317
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    2 preds:
      0.: bvuge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%30%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce317
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    1 preds:
      0.: bvsge(input.spec-%var-r-0.L3%30%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce317
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce317
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2.B2: Updating invariants over the newly added edges in edge composition L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%30%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce286      3.:z3.ce317
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce432
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%30%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce286      3.:z3.ce317
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce432
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:24 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce286      3.:z3.ce317
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce432
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:24 : foo.A2.B2 (d:0, s:0, sp: 3): checked newly added edge and inferred invariants...</MSG>
<MSG>0:24 : foo.A2.B2 (d:0, s:0, sp: 3): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:24 : product-TFG foo.A2.B2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L3%30%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A2.B2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%30%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A2.B2 created 1 possibilities in group foo.A2.B2.C...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 3) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry => C L3%30%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%30%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L3%30%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:24 : Adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%30%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Getting alloca-ptrs on edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Found no alloca-ptrs on edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Adding edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : foo.A2.B2.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Propagated 5 out of 18 counter-examples across edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:24 : foo.A2.B2.C1: Added the 5 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:24 : foo.A2.B2.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Computing CG regions after the addition of the edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Done computing CG regions after the addition of the edge L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : Done adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%30%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:24 : Done adding a CG edge composition using the src path L3%30%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce286      3.:z3.ce317
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce432
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:24 : Added correlation to the product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 3) and created a correlation entry...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 3) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry => C L3%30%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%30%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 21) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 7 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%30%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce286      3.:z3.ce317
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce432
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:24 : foo.A2.B2.C1: Updating invariants over the newly added edges in edge composition L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:24 : Constructed infer_invariants_dfa with initial worklist L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Done relaxing dst graph's memlabels for edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:24 : foo.A2.B2.C1: Checking well-formedness assertions on outgoing edges from L3%30%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Done relaxing memlabels and invariants across the edge composition (L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4867:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce286      3.:z3.ce317
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce432
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:24 : foo.A2.B2.C1 (d:0, s:0, sp: 3): checked newly added edge and inferred invariants...</MSG>
<MSG>0:24 : foo.A2.B2.C1 (d:0, s:0, sp: 3): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:24 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:24 : Checking equivalence proof...</MSG>
<MSG>0:25 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%30%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 3)
  Invariant state (9 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%30%bbentry ; 4-->input.spec-%var-n-0.L3%30%bbentry ; 5-->input.spec-%var-r-0.L3%30%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-r-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%30%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%30%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce286      3.:z3.ce317
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%30%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce432
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce27      2.:z3.ce51
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce317      2.:z3.ce377      3.:z3.ce487
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce27
    eqclass 8:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 17-->eq(spec-%tmpvar-9.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 18-->eq(spec-%tmpvar-7.L3%30%bbentry, map_init(SORT2EXPR.VAR)) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%30%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry => C L3%30%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%30%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 21) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%30%bbentry_Lfor.cond%1%bbentry (C L3%30%bbentry, A (line 3 at column 21))
                L3%30%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 7 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 3.75s, query:smt.: 1.15068s (num_starts 43; 0.0268s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 2.9189s (num_starts 93; 0.0314s/start)ftmap_run_pointsto_analysis.: 0.104545s (num_starts 2; 0.0523s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 4e-06s (num_starts 4; 0.0000s/start)
compute_tfg_pred_eqclass.: 6e-06s (num_starts 3; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 8e-06s (num_starts 6; 0.0000s/start)
prune_dst_memslots.: 9e-06s (num_starts 3; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.1e-05s (num_starts 6; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 1.5e-05s (num_starts 6; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.5e-05s (num_starts 6; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 1.6e-05s (num_starts 17; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1.9e-05s (num_starts 24; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 1.9e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 3e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 3.2e-05s (num_starts 3; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 3.3e-05s (num_starts 50; 0.0000s/start)
get_intersected_lr_status.: 3.5e-05s (num_starts 2; 0.0000s/start)
remove_complex_bv_exprs.: 3.5e-05s (num_starts 3; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 3.6e-05s (num_starts 11; 0.0000s/start)
ce_perform_memory_fuzzing.: 3.7e-05s (num_starts 28; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 3.7e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 3.7e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 3.7e-05s (num_starts 3; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 3.8e-05s (num_starts 2; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 4e-05s (num_starts 3; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes.: 4.3e-05s (num_starts 2; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry.: 4.7e-05s (num_starts 1; 0.0000s/start)
prove_trivial.: 4.8e-05s (num_starts 51; 0.0000s/start)
determinize_value_expr_map.: 5.1e-05s (num_starts 28; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.2e-05s (num_starts 3; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 6e-05s (num_starts 1; 0.0001s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 8.7e-05s (num_starts 3; 0.0000s/start)
expr_is_hidden_reg.: 8.8e-05s (num_starts 107; 0.0000s/start)
lr_status_meet.: 0.0001s (num_starts 160; 0.0000s/start)
expr_is_callee_save_const.: 0.000123s (num_starts 119; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000128s (num_starts 30; 0.0000s/start)
graph_locs_add_all_indvars.: 0.000139s (num_starts 2; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000142s (num_starts 3; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000144s (num_starts 95; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000153s (num_starts 22; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000167s (num_starts 2; 0.0001s/start)
collect_dst_to_src_submap_preds.: 0.000173s (num_starts 93; 0.0000s/start)
populate_locid2expr_map.: 0.000176s (num_starts 2; 0.0001s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry.: 0.000178s (num_starts 3; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.000191s (num_starts 57; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000208s (num_starts 57; 0.0000s/start)
compute_sprel_relations.: 0.000209s (num_starts 2; 0.0001s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000214s (num_starts 44; 0.0000s/start)
aliasing_constraints.convert_to_expr.: 0.000217s (num_starts 42; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000219s (num_starts 22; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000221s (num_starts 463; 0.0000s/start)
propagate_sprels.: 0.000222s (num_starts 2; 0.0001s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000227s (num_starts 7; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000231s (num_starts 16; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000233s (num_starts 2; 0.0001s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000239s (num_starts 9; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.cond%1%bbentry.inductive-invariants.: 0.000254s (num_starts 2; 0.0001s/start)
proof_query_is_trivial_helper.: 0.000261s (num_starts 107; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000262s (num_starts 46; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000263s (num_starts 1; 0.0003s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000266s (num_starts 1; 0.0003s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.000289s (num_starts 42; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000318s (num_starts 32; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000346s (num_starts 37; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000357s (num_starts 3; 0.0001s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.000365s (num_starts 1; 0.0004s/start)
compute_bv_bool_eqclass.: 0.000379s (num_starts 3; 0.0001s/start)
graph_locs_add_all_llvmvars.: 0.000409s (num_starts 2; 0.0002s/start)
def_analysis::xfer_and_meet.: 0.000417s (num_starts 30; 0.0000s/start)
identify_address_taken_local_variables.: 0.000425s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000468s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000468s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000472s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000473s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000477s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00048s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.000485s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-unsigned;-trivial.: 0.000487s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.000488s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-unsigned.: 0.000491s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-unsigned.: 0.000495s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000498s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-unsigned.: 0.0005s (num_starts 1; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000518s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.000521s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.000524s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.000527s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.00053s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.000531s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000534s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.000537s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.00054s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.000547s (num_starts 1; 0.0005s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.00056s (num_starts 128; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.000562s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.000564s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.000565s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.000568s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.000572s (num_starts 1; 0.0006s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.000574s (num_starts 128; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.000577s (num_starts 1; 0.0006s/start)
tfg::collect_assumes_around_edge.: 0.000596s (num_starts 50; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000596s (num_starts 1; 0.0006s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000597s (num_starts 3; 0.0002s/start)
parse_yices_model.: 0.000609s (num_starts 1; 0.0006s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000623s (num_starts 1; 0.0006s/start)
populate_dominator_and_postdominator_relations.: 0.000665s (num_starts 2; 0.0003s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.000683s (num_starts 57; 0.0000s/start)
collect_assumes_around_edge.: 0.000689s (num_starts 6; 0.0001s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000714s (num_starts 5; 0.0001s/start)
populate_simplified_to_state.: 0.000715s (num_starts 3; 0.0002s/start)
set_result_and_counter_example.: 0.000727s (num_starts 43; 0.0000s/start)
create_closure_matrix.: 0.00073s (num_starts 77; 0.0000s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.000737s (num_starts 4; 0.0002s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000776s (num_starts 10; 0.0001s/start)
pth_collect_preds_using_atom_func.: 0.00079s (num_starts 66; 0.0000s/start)
expr_represents_llvm_undef.: 0.000798s (num_starts 123; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000837s (num_starts 59; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000841s (num_starts 519; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.000851s (num_starts 5; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.000875s (num_starts 5; 0.0002s/start)
tfg_edge_composition_get_assumes.: 0.000879s (num_starts 66; 0.0000s/start)
construct_linear_combination_exprs.: 0.000901s (num_starts 41; 0.0000s/start)
proof_query_is_trivial.: 0.000928s (num_starts 95; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.000932s (num_starts 2; 0.0005s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.000984s (num_starts 5; 0.0002s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000992s (num_starts 59; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.001034s (num_starts 3; 0.0003s/start)
ldr_decomposition.: 0.001049s (num_starts 30; 0.0000s/start)
graph_with_guessing_sync_preds.: 0.001081s (num_starts 93; 0.0000s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.001098s (num_starts 36; 0.0000s/start)
graph_locs_add_all_specvars.: 0.001209s (num_starts 2; 0.0006s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.001245s (num_starts 42; 0.0000s/start)
parse_cvc4_model.: 0.001266s (num_starts 1; 0.0013s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.001324s (num_starts 30; 0.0000s/start)
removeMostPromising.: 0.001403s (num_starts 17; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.001422s (num_starts 3; 0.0005s/start)
corr_graph_enumerate_correlations.: 0.001471s (num_starts 6; 0.0002s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.001475s (num_starts 30; 0.0000s/start)
populate_simplified_assets.: 0.001653s (num_starts 6; 0.0003s/start)
tfg::populate_loc_definedness.before_initialize.: 0.001728s (num_starts 3; 0.0006s/start)
tfg::populate_loc_definedness.: 0.001831s (num_starts 3; 0.0006s/start)
bv_const_ref_map2expr_map.: 0.001848s (num_starts 41; 0.0000s/start)
graph_visit_exprs.: 0.001881s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001885s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001885s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.001889s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.002133s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.002142s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.002145s (num_starts 2; 0.0011s/start)
generate_aliasing_constraints_from_expr.: 0.002207s (num_starts 712; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.00233s (num_starts 3; 0.0008s/start)
expr_linear_relation_holds::visit.var.: 0.00238s (num_starts 123; 0.0000s/start)
graph_visit_exprs_and_keys.: 0.002449s (num_starts 2; 0.0012s/start)
compute_ssa_vars_renaming_map.: 0.002546s (num_starts 2; 0.0013s/start)
populate_branch_affecting_locs.: 0.003036s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.003045s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-unsigned;-trivial.: 0.003054s (num_starts 4; 0.0008s/start)
populate_locs_potentially_modified_on_edge.: 0.003054s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.003058s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.003073s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-unsigned.: 0.003083s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.003106s (num_starts 4; 0.0008s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.00312s (num_starts 30; 0.0001s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.003329s (num_starts 66; 0.0001s/start)
graph_identify_back_edges.: 0.0034s (num_starts 27; 0.0001s/start)
expr_substitute_using_available_exprs_submap.: 0.003417s (num_starts 158; 0.0000s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.003532s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.003534s (num_starts 5; 0.0007s/start)
find_dominators.: 0.003554s (num_starts 31; 0.0001s/start)
graph_identify_natural_loops.: 0.003614s (num_starts 27; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.003833s (num_starts 2; 0.0019s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.004044s (num_starts 5; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004055s (num_starts 2; 0.0020s/start)
compute_vars_reaching_definitions.: 0.004071s (num_starts 2; 0.0020s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.004099s (num_starts 69; 0.0001s/start)
create_sp_version_relations_lattice_at_pc.: 0.004107s (num_starts 77; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-trivial.: 0.004217s (num_starts 6; 0.0007s/start)
get_sprel_map_pair_at_pc.: 0.004337s (num_starts 44; 0.0001s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.004441s (num_starts 29; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.004568s (num_starts 6; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed;-trivial.: 0.004584s (num_starts 6; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.004584s (num_starts 6; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.004593s (num_starts 6; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-trivial.: 0.004611s (num_starts 6; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004613s (num_starts 6; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.004619s (num_starts 6; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed.: 0.004627s (num_starts 6; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004655s (num_starts 6; 0.0008s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.004718s (num_starts 3; 0.0016s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.005107s (num_starts 7; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.005116s (num_starts 7; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.005184s (num_starts 7; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.005193s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned;-trivial.: 0.005206s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.005214s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.005236s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned.: 0.005252s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.005283s (num_starts 6; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005361s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005367s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.005377s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess.: 0.005391s (num_starts 3; 0.0018s/start)
tfg_suffixpath_get_expr_helper.: 0.005484s (num_starts 20; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.005762s (num_starts 7; 0.0008s/start)
check_node_stability_after_CE_addition.: 0.005777s (num_starts 51; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 0.005843s (num_starts 7; 0.0008s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 0.006193s (num_starts 3; 0.0021s/start)
tfg::get_aliasing_constraints_for_edge.: 0.006435s (num_starts 199; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.00644s (num_starts 264; 0.0000s/start)
counter_example_falsifies_preds.: 0.006805s (num_starts 60; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007227s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007234s (num_starts 4; 0.0018s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.007247s (num_starts 42; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.00732s (num_starts 4; 0.0018s/start)
populate_transitive_closure.: 0.007327s (num_starts 37; 0.0002s/start)
compute_lr_status_for_expr.: 0.007337s (num_starts 176; 0.0000s/start)
predicate_canonicalized.: 0.007564s (num_starts 41; 0.0002s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.007602s (num_starts 22; 0.0003s/start)
ldr_decompose_and_linear_solve.: 0.007653s (num_starts 30; 0.0003s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.007665s (num_starts 22; 0.0003s/start)
pth_collect_simplified_preds_using_atom_func.: 0.007747s (num_starts 97; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-trivial.: 0.00787s (num_starts 4; 0.0020s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.007888s (num_starts 160; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.007917s (num_starts 163; 0.0000s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.007956s (num_starts 42; 0.0002s/start)
compute_regions.: 0.008079s (num_starts 27; 0.0003s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.00813s (num_starts 160; 0.0001s/start)
bv_linear_solve.: 0.008136s (num_starts 30; 0.0003s/start)
query:bv_solve.: 0.008295s (num_starts 30; 0.0003s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.008515s (num_starts 59; 0.0001s/start)
lhs_set_sort.: 0.008899s (num_starts 44; 0.0002s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.009126s (num_starts 3; 0.0030s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.009142s (num_starts 59; 0.0002s/start)
collect_aliasing_constraints_around_path_helper.: 0.009436s (num_starts 120; 0.0001s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.009752s (num_starts 59; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-trivial.: 0.00977s (num_starts 8; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.009789s (num_starts 8; 0.0012s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.009802s (num_starts 21; 0.0005s/start)
bv_solve_returning_intermediate_structures.: 0.009858s (num_starts 30; 0.0003s/start)
gen_pred_from_coeff_row.simplify.: 0.009952s (num_starts 41; 0.0002s/start)
collect_aliasing_constraints_around_path.: 0.010061s (num_starts 76; 0.0001s/start)
populate_loc_liveness.: 0.010143s (num_starts 3; 0.0034s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.010666s (num_starts 213; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-trivial.: 0.01069s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.010716s (num_starts 6; 0.0018s/start)
collect_assumes_around_path_helper.: 0.01127s (num_starts 128; 0.0001s/start)
bvsolve_cache_query.miss1.: 0.011308s (num_starts 30; 0.0004s/start)
bvsolve_cache_query.: 0.011545s (num_starts 30; 0.0004s/start)
graph_with_paths::collect_assumes_around_path.: 0.011711s (num_starts 128; 0.0001s/start)
counter_example_satisfies_preds.: 0.011881s (num_starts 392; 0.0000s/start)
do_ssa_transformation.: 0.012372s (num_starts 2; 0.0062s/start)
collect_inductive_preds_around_path.: 0.012447s (num_starts 93; 0.0001s/start)
get_next_potential_correlations.: 0.012764s (num_starts 4; 0.0032s/start)
avail_exprs_create_submap.: 0.01334s (num_starts 177; 0.0001s/start)
compute_expr_eqclasses_at_pc.: 0.013677s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.013768s (num_starts 10; 0.0014s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.013979s (num_starts 1; 0.0140s/start)
solve_for_bv_points.: 0.014185s (num_starts 30; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.014464s (num_starts 8; 0.0018s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.014508s (num_starts 5; 0.0029s/start)
cg_add_node.: 0.014683s (num_starts 5; 0.0029s/start)
propagate_nodece_across_edge.: 0.014771s (num_starts 11; 0.0013s/start)
compute_new_lr_status_on_locs.: 0.015158s (num_starts 59; 0.0003s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.015903s (num_starts 6; 0.0027s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.017211s (num_starts 30; 0.0006s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.017512s (num_starts 904; 0.0000s/start)
counter_example_evaluate_preds.: 0.017651s (num_starts 452; 0.0000s/start)
create_new_corr_graph_edge.new_node.: 0.01823s (num_starts 4; 0.0046s/start)
create_new_corr_graph_edge.: 0.018515s (num_starts 6; 0.0031s/start)
tfg_postprocess_after_pointsto_analysis.: 0.021544s (num_starts 2; 0.0108s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.021647s (num_starts 12; 0.0018s/start)
gen_pred_from_coeff_row.: 0.021745s (num_starts 41; 0.0005s/start)
compute_preds_for_bv_points.: 0.02213s (num_starts 10; 0.0022s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.022197s (num_starts 16; 0.0014s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.025146s (num_starts 112; 0.0002s/start)
graph_to_stream.: 0.026073s (num_starts 4; 0.0065s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.026186s (num_starts 59; 0.0004s/start)
tfg_relax_pointsto_vals_on_edge.: 0.027275s (num_starts 22; 0.0012s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.027308s (num_starts 81; 0.0003s/start)
get_unrolled_paths_from.: 0.027748s (num_starts 20; 0.0014s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.028986s (num_starts 243; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.030423s (num_starts 20; 0.0015s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.030751s (num_starts 110; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.031092s (num_starts 32; 0.0010s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%30%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.035041s (num_starts 10; 0.0035s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.037285s (num_starts 28; 0.0013s/start)
put_smtlib_string_in_file.: 0.03837s (num_starts 86; 0.0004s/start)
apply_mask_and_overlay_array_constant.: 0.039197s (num_starts 28; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.039366s (num_starts 1; 0.0394s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.039369s (num_starts 1; 0.0394s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.039373s (num_starts 1; 0.0394s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.039374s (num_starts 1; 0.0394s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.039378s (num_starts 1; 0.0394s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.03939s (num_starts 1; 0.0394s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities..: 0.039869s (num_starts 2; 0.0199s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.03988s (num_starts 2; 0.0199s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.040172s (num_starts 961; 0.0000s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.040775s (num_starts 44; 0.0009s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.041407s (num_starts 904; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.042697s (num_starts 1; 0.0427s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.042708s (num_starts 1; 0.0427s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.042714s (num_starts 1; 0.0427s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.042723s (num_starts 1; 0.0427s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.042727s (num_starts 1; 0.0427s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.042735s (num_starts 1; 0.0427s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.044515s (num_starts 44; 0.0010s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.045446s (num_starts 16; 0.0028s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.046421s (num_starts 37; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.047456s (num_starts 1; 0.0475s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.047464s (num_starts 1; 0.0475s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.047472s (num_starts 1; 0.0475s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.048307s (num_starts 904; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess.: 0.049375s (num_starts 2; 0.0247s/start)
graph_ec_apply_trans_funs_helper.0.: 0.051909s (num_starts 222; 0.0002s/start)
graph_ec_apply_trans_funs_helper.: 0.053495s (num_starts 227; 0.0002s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.054118s (num_starts 227; 0.0002s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.054933s (num_starts 227; 0.0002s/start)
computeWP_for_pred_across_ec.: 0.055738s (num_starts 227; 0.0002s/start)
decide_hoare_triple_helper;-trivial.: 0.059893s (num_starts 51; 0.0012s/start)
query:convert_from_z3.: 0.06484s (num_starts 1726; 0.0000s/start)
query:convert_to_z3.: 0.068652s (num_starts 1726; 0.0000s/start)
compute_z3_expr.: 0.068826s (num_starts 1769; 0.0000s/start)
edge_composition_apply_trans_funs_on_pred.: 0.071361s (num_starts 93; 0.0008s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.071816s (num_starts 110; 0.0007s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.073588s (num_starts 540; 0.0001s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.074026s (num_starts 37; 0.0020s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.080934s (num_starts 28; 0.0029s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.081319s (num_starts 74; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084179s (num_starts 2; 0.0421s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084184s (num_starts 2; 0.0421s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.084197s (num_starts 2; 0.0421s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond.: 0.084206s (num_starts 2; 0.0421s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091804s (num_starts 1; 0.0918s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091805s (num_starts 1; 0.0918s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091809s (num_starts 1; 0.0918s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091813s (num_starts 1; 0.0918s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.091823s (num_starts 1; 0.0918s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;false-predicate.: 0.091827s (num_starts 1; 0.0918s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.09183s (num_starts 1; 0.0918s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.091835s (num_starts 1; 0.0918s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091845s (num_starts 1; 0.0918s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091854s (num_starts 1; 0.0919s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.091859s (num_starts 1; 0.0919s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.096507s (num_starts 7; 0.0138s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed.: 0.096525s (num_starts 7; 0.0138s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.096561s (num_starts 7; 0.0138s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097637s (num_starts 1; 0.0976s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.09764s (num_starts 1; 0.0976s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097646s (num_starts 1; 0.0976s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097647s (num_starts 1; 0.0976s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.097658s (num_starts 1; 0.0977s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.097665s (num_starts 1; 0.0977s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.09767s (num_starts 1; 0.0977s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon).: 0.097673s (num_starts 1; 0.0977s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.099077s (num_starts 2; 0.0495s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.099751s (num_starts 1; 0.0998s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.099752s (num_starts 1; 0.0998s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.099762s (num_starts 1; 0.0998s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false.: 0.099769s (num_starts 1; 0.0998s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101532s (num_starts 2; 0.0508s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101546s (num_starts 2; 0.0508s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.101561s (num_starts 2; 0.0508s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess.: 0.101568s (num_starts 2; 0.0508s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.103169s (num_starts 4; 0.0258s/start)
ftmap_run_pointsto_analysis.: 0.104545s (num_starts 2; 0.0523s/start)
tfg_run_pointsto_analysis.: 0.104771s (num_starts 2; 0.0524s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.105765s (num_starts 1; 0.1058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.105769s (num_starts 1; 0.1058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10577s (num_starts 1; 0.1058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.10631s (num_starts 2; 0.0532s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.106317s (num_starts 2; 0.0532s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.10633s (num_starts 2; 0.0532s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10811s (num_starts 2; 0.0541s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.109169s (num_starts 1; 0.1092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.109182s (num_starts 1; 0.1092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.109195s (num_starts 1; 0.1092s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false.: 0.109199s (num_starts 1; 0.1092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.111968s (num_starts 4; 0.0280s/start)
tfg_populate_structs_after_ssa_construction.: 0.118053s (num_starts 2; 0.0590s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.118336s (num_starts 1; 0.1183s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.118337s (num_starts 1; 0.1183s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.118338s (num_starts 1; 0.1183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.11834s (num_starts 1; 0.1183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.118348s (num_starts 1; 0.1183s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.118351s (num_starts 1; 0.1184s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.118357s (num_starts 1; 0.1184s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.118866s (num_starts 2; 0.0594s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 0.119065s (num_starts 3; 0.0397s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.133117s (num_starts 2; 0.0666s/start)
check_wfconds_on_edge.L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry.: 0.138007s (num_starts 3; 0.0460s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141268s (num_starts 3; 0.0471s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.141281s (num_starts 3; 0.0471s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.141295s (num_starts 3; 0.0471s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond.: 0.141307s (num_starts 3; 0.0471s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.145016s (num_starts 3; 0.0483s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.148959s (num_starts 3; 0.0497s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.149069s (num_starts 3; 0.0497s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153162s (num_starts 2; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153183s (num_starts 2; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15319s (num_starts 2; 0.0766s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153571s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153578s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153589s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153593s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.153603s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown.: 0.153615s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.153634s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.153645s (num_starts 2; 0.0768s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.155362s (num_starts 4; 0.0388s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 0.155379s (num_starts 4; 0.0388s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.155409s (num_starts 4; 0.0389s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158362s (num_starts 2; 0.0792s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158374s (num_starts 2; 0.0792s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158383s (num_starts 2; 0.0792s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158387s (num_starts 2; 0.0792s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.158402s (num_starts 2; 0.0792s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-unsigned.: 0.158413s (num_starts 2; 0.0792s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.158426s (num_starts 2; 0.0792s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 0.162012s (num_starts 7; 0.0231s/start)
query:simplify-z3.: 0.182832s (num_starts 3468; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.191674s (num_starts 4; 0.0479s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.199096s (num_starts 8; 0.0249s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.207157s (num_starts 4; 0.0518s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.208909s (num_starts 2; 0.1045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.208982s (num_starts 2; 0.1045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.209695s (num_starts 2; 0.1048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.209706s (num_starts 2; 0.1049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.209713s (num_starts 2; 0.1049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.209733s (num_starts 2; 0.1049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;pred-type-unknown.: 0.209739s (num_starts 2; 0.1049s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.209752s (num_starts 2; 0.1049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear.: 0.21518s (num_starts 8; 0.0269s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220468s (num_starts 2; 0.1102s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220475s (num_starts 2; 0.1102s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220481s (num_starts 2; 0.1102s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.220502s (num_starts 2; 0.1103s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed.: 0.22051s (num_starts 2; 0.1103s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.220528s (num_starts 2; 0.1103s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.222661s (num_starts 37; 0.0060s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.2227s (num_starts 7; 0.0318s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.222996s (num_starts 48; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.225419s (num_starts 5; 0.0451s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.225432s (num_starts 5; 0.0451s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.22554s (num_starts 5; 0.0451s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.225561s (num_starts 5; 0.0451s/start)
check_wfconds_on_edge.L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.250113s (num_starts 2; 0.1251s/start)
counter_example_translate_on_edge_composition_helper.: 0.254905s (num_starts 342; 0.0007s/start)
ce_reconcile_sorts_and_values.: 0.282296s (num_starts 31; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.289654s (num_starts 6; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.289688s (num_starts 6; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.290852s (num_starts 5; 0.0582s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.290871s (num_starts 5; 0.0582s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 0.294053s (num_starts 9; 0.0327s/start)
parse_z3_model.: 0.296182s (num_starts 29; 0.0102s/start)
read_counter_examples_from_channel.: 0.300471s (num_starts 15; 0.0200s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.300488s (num_starts 12; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear.: 0.300534s (num_starts 12; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.300742s (num_starts 13; 0.0231s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear.: 0.300785s (num_starts 13; 0.0231s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.301606s (num_starts 4; 0.0754s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%30%bbentry_Lfor.cond%1%bbentry.: 0.302559s (num_starts 3; 0.1009s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry).: 0.306146s (num_starts 10; 0.0306s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 0.321671s (num_starts 2; 0.1608s/start)
corr_graph::add_edge().: 0.350107s (num_starts 6; 0.0584s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363283s (num_starts 4; 0.0908s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 0.36337s (num_starts 4; 0.0908s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.370132s (num_starts 6; 0.0617s/start)
corr_graph_add_correlation.: 0.370331s (num_starts 6; 0.0617s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.374477s (num_starts 6; 0.0624s/start)
check_wfconds_on_edge.: 0.388462s (num_starts 9; 0.0432s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.389846s (num_starts 7; 0.0557s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.397671s (num_starts 8; 0.0497s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.404098s (num_starts 17; 0.0238s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);linear.: 0.412626s (num_starts 16; 0.0258s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.418088s (num_starts 4; 0.1045s/start)
guarded_predicate_set_and.: 0.419761s (num_starts 42; 0.0100s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 0.423389s (num_starts 11; 0.0385s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.424894s (num_starts 4; 0.1062s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 0.424997s (num_starts 4; 0.1062s/start)
dst_edge_composition_proves_false.: 0.440991s (num_starts 4; 0.1102s/start)
get_next_dst_edge_composition_to_correlate.: 0.453971s (num_starts 5; 0.0908s/start)
decide_hoare_triple.: 0.469533s (num_starts 6; 0.0783s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.473665s (num_starts 8; 0.0592s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(epsilon).: 0.47397s (num_starts 8; 0.0592s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.475236s (num_starts 3; 0.1584s/start)
check_equivalence_proof.: 0.507692s (num_starts 1; 0.5077s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.542444s (num_starts 420; 0.0013s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 0.646609s (num_starts 17; 0.0380s/start)
check_preds_on_edge_compositions.: 0.6588s (num_starts 12; 0.0549s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.776441s (num_starts 12; 0.0647s/start)
decide_hoare_triple_helper;per-path;L3%30%bbentry_Lfor.cond%1%bbentry;(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry).: 0.798993s (num_starts 24; 0.0333s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.932085s (num_starts 14; 0.0666s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.940752s (num_starts 17; 0.0553s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry).: 0.964507s (num_starts 46; 0.0210s/start)
decide_hoare_triple_helper;per-query-type;linear.: 0.97201s (num_starts 37; 0.0263s/start)
query:smt.: 1.15068s (num_starts 43; 0.0268s/start)
spawn_smt_query.: 1.45167s (num_starts 43; 0.0338s/start)
solver_provable.: 1.9293s (num_starts 42; 0.0459s/start)
expr_is_provable.: 1.94551s (num_starts 42; 0.0463s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 1.94648s (num_starts 42; 0.0463s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 1.949s (num_starts 42; 0.0464s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 1.95023s (num_starts 42; 0.0464s/start)
solver_satisfiable-cache-miss.: 1.9519s (num_starts 43; 0.0454s/start)
solver_satisfiable.: 1.9522s (num_starts 43; 0.0454s/start)
update_invariant_state_for_edges.: 2.12042s (num_starts 5; 0.4241s/start)
cg_check_new_cg_ec.: 2.12422s (num_starts 5; 0.4248s/start)
correl_entry_apply.: 2.12446s (num_starts 5; 0.4249s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 2.37855s (num_starts 42; 0.0566s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 2.38852s (num_starts 44; 0.0543s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 2.38944s (num_starts 44; 0.0543s/start)
expandProductCFG.: 2.59186s (num_starts 6; 0.4320s/start)
is_expr_equal_using_lhs_set_and_precond.: 2.7157s (num_starts 44; 0.0617s/start)
prove.: 2.7161s (num_starts 44; 0.0617s/start)
prove_spawn_and_join_helper.: 2.71641s (num_starts 44; 0.0617s/start)
prove_spawn_and_join.: 2.77785s (num_starts 44; 0.0631s/start)
prove_wrapper.proof_query_not_trivial.: 2.78573s (num_starts 44; 0.0633s/start)
prove_wrapper.: 2.80254s (num_starts 95; 0.0295s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.85529s (num_starts 42; 0.0680s/start)
decide_hoare_triple_check_ub.: 2.88083s (num_starts 93; 0.0310s/start)
decide_hoare_triple_helper.: 2.9189s (num_starts 93; 0.0314s/start)
decide_hoare_triple_with_alias_cons.: 3.00098s (num_starts 93; 0.0323s/start)
bestFirstSearch.: 3.00107s (num_starts 1; 3.0011s/start)
Time taken for equivalence check.: 3.51121s (num_starts 1; 3.5112s/start)

counters:
# of Paths Prunned through CE propagation.: 1
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 1
# of paths enumerated.: 16
# of paths expanded.: 5
# of queries to linear solver.: 30
# of smt-solver-queries.: 43
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 2
removed-siblings.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 6
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%30%bbentry_Lfor.cond%1%bbentry.prove_queries.: 3
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 29
total-correlation-possibilities.: 8
total-correlation-possibilities-mod-lsprels.: 8
total-correlations-explored.: 6

flags:
dst-aloc.: 0
dst-edges.: 6
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%30%bbentry_Lfor.cond%1%bbentry.: 8
final-CG-counterexamples-total-at-L3%30%bbentry_Lfor.cond%1%bbentry.: 18
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 3
final-CG-edges.: 3
final-CG-nodes.: 3
final-CG-num-invariants.: 5
final-CG-super-edges.: 0
src-edges.: 16
src-nodes.: 14
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 2.14
final-CG-time-to-total-time-ratio.: 0.71
query-time-to-total-time-ratio.: 0.32

Context stats:
exprs: count: 150119
sorts: count: 153
num_proof_queries: 44
num_proof_queries_answered_by_syntactic_check: 2
cache_stats:
m_simplify:
	----------- total:	5177
	        hit ratio:	0.93587
m_simplify_solver:
	----------- total:	2595
	        hit ratio:	0.327168
m_z3_solver_substitution:
	----------- total:	1742
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1746
	        hit ratio:	0
m_expr_size:
	----------- total:	9421
	        hit ratio:	0.798323
m_expr_evaluates_to_constant_visitor:
	----------- total:	15421
	        hit ratio:	0.484988
m_sort_dfa_canonicalize:
	----------- total:	75374
	        hit ratio:	0.999761
m_expr_convert_to_iexpr:
	----------- total:	527
	        hit ratio:	0.690702

z3_solver expr_query_cache entry size: 43
	----------- total:	43
	             hits:	0
	        hit ratio:	0
histogram (time taken by solver in ms):
[ 9.0180, 10.5919) (avg.  9.0180)        : 1
[10.5919, 12.4405) (avg. 11.2010)        : 1
[12.4405, 14.6118) (avg. 14.1457)        : 3
[14.6118, 17.1620) (avg. 16.0610)        : 7
[17.1620, 20.1573) (avg. 18.5390)        : 5
[20.1573, 23.6753) (avg. 22.4645)        : 2
[23.6753, 27.8074) (avg. 26.1807)        : 3
[27.8074, 32.6606) (avg. 29.7200)        : 7
[32.6606, 38.3609) (avg. 35.4730)        : 5
[38.3609, 45.0560) (avg. 41.4994)        : 9
histogram (number of quantifiers in query)
[ 0,  2) (avg.  0)                       : 1
[ 2,  4) (avg.  0)                       : 0
[ 4,  6) (avg.  5)                       : 18
[ 6,  8) (avg.  7)                       : 1
[ 8, 10) (avg.  8)                       : 1
[10, 12) (avg. 10)                       : 22
[12, 14) (avg.  0)                       : 0
[14, 16) (avg.  0)                       : 0
[16, 18) (avg.  0)                       : 0
[18, 20) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[ 40,  57) (avg.  40)                    : 1
[ 57,  74) (avg.   0)                    : 0
[ 74,  91) (avg.   0)                    : 0
[ 91, 108) (avg.   0)                    : 0
[108, 125) (avg. 116)                    : 18
[125, 142) (avg. 132)                    : 2
[142, 159) (avg. 149)                    : 14
[159, 176) (avg. 169)                    : 5
[176, 193) (avg. 177)                    : 2
[193, 210) (avg. 200)                    : 1
Top 10 highest time taking queries:
1. [0.044s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%30%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.0
2. [0.044s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.3.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1
3. [0.042s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
4. [0.042s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.3
5. [0.042s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L0%0%d_L0%0%d.dstToPC.Lfor.cond%1%bbentry.from_pcL0%0%d_L0%0%d.cond_apply_set_.0
6. [0.042s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-unsigned.from_pcL3%30%bbentry_Lfor.cond%1%bbentry.cond.0
7. [0.040s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.6.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
8. [0.039s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%30%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.1
9. [0.039s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.false-predicate.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
10. [0.037s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1

<MSG>0:25 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 132 time spent: 0:0:0 [0.002634s total; 0.000020 per start]
tfg_computeWP: num_starts 299 time spent: 0:0:0 [0.045512s total; 0.000152 per start]
tfg_get_simplified_to_state_for_edge: num_starts 1195 time spent: 0:0:0 [0.002466s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 1352 time spent: 0:0:0 [0.002735s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 566 time spent: 0:0:0 [0.001116s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 33 time spent: 0:0:0 [0.112870s total; 0.003420 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 12 time spent: 0:0:0 [0.299692s total; 0.024974 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 341 time spent: 0:0:0 [0.240135s total; 0.000704 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 86 time spent: 0:0:0 [0.129555s total; 0.001506 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 288 time spent: 0:0:0 [0.199253s total; 0.000692 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 1282 time spent: 0:0:0 [0.218205s total; 0.000170 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 288 time spent: 0:0:0 [0.009370s total; 0.000033 per start]
tfg_graph_get_vars_written_on_edge: num_starts 288 time spent: 0:0:0 [0.007910s total; 0.000027 per start]
cg_with_rank_add_CE_at_pc: num_starts 51 time spent: 0:0:0 [0.097768s total; 0.001917 per start]
graph_with_ce_add_CE_at_pc: num_starts 31 time spent: 0:0:0 [0.000623s total; 0.000020 per start]
graph_with_guessing_add_CE_at_pc: num_starts 51 time spent: 0:0:0 [0.096851s total; 0.001899 per start]
point_set_add_point_using_CE: num_starts 222 time spent: 0:0:0 [0.031849s total; 0.000143 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 222 time spent: 0:0:0 [0.032451s total; 0.000146 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 33 time spent: 0:0:0 [0.090162s total; 0.002732 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 33 time spent: 0:0:0 [0.056780s total; 0.001721 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2309 time spent: 0:0:0 [0.022878s total; 0.000010 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 453 time spent: 0:0:0 [0.015166s total; 0.000033 per start]
expr_simplify_solver: num_starts 2640 time spent: 0:0:0 [0.349529s total; 0.000132 per start]
expr_simplify_syntactic: num_starts 2640 time spent: 0:0:0 [0.039836s total; 0.000015 per start]
expr_simplify_select_on_store: num_starts 4 time spent: 0:0:0 [0.011622s total; 0.002906 per start]
expr_simplify_using_lhs_set_helper: num_starts 486 time spent: 0:0:0 [0.570825s total; 0.001175 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 4176 time spent: 0:0:0 [0.566177s total; 0.000136 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 3232 time spent: 0:0:0 [0.014796s total; 0.000005 per start]
expr_simplify_eq: num_starts 811 time spent: 0:0:0 [0.008194s total; 0.000010 per start]
expr_simplify_or: num_starts 25 time spent: 0:0:0 [0.000038s total; 0.000002 per start]
expr_simplify_and: num_starts 259 time spent: 0:0:0 [0.001446s total; 0.000006 per start]
expr_simplify_not: num_starts 22 time spent: 0:0:0 [0.000089s total; 0.000004 per start]
expr_simplify_implies: num_starts 192 time spent: 0:0:0 [0.001931s total; 0.000010 per start]
canonicalize_expr_tree: num_starts 1779 time spent: 0:0:0 [0.048004s total; 0.000027 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1 time spent: 0:0:0 [0.000003s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 4 time spent: 0:0:0 [0.011525s total; 0.002881 per start]
get_arithmetic_addsub_atoms: num_starts 2867 time spent: 0:0:0 [0.001509s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 304 time spent: 0:0:0 [0.003267s total; 0.000011 per start]
expr_is_consts_struct_constant: num_starts 659 time spent: 0:0:0 [0.000418s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 5531 time spent: 0:0:0 [0.573568s total; 0.000104 per start]
expr_do_simplify_helper_cache: num_starts 5531 time spent: 0:0:0 [0.005572s total; 0.000001 per start]
evaluate_expr_and_check_bounds: num_starts 1149 time spent: 0:0:0 [0.233129s total; 0.000203 per start]
array_constant_equals: num_starts 685 time spent: 0:0:0 [0.001253s total; 0.000002 per start]
sort_dfa_canonical: num_starts 217924 time spent: 0:0:1 [1.182864s total; 0.000005 per start]
expr_convert_to_iexpr: num_starts 557 time spent: 0:0:0 [0.345834s total; 0.000621 per start]
combo_dfa_xfer_and_meet: num_starts 37 time spent: 0:0:0 [0.073984s total; 0.002000 per start]
alias_val_xfer_and_meet: num_starts 37 time spent: 0:0:0 [0.046346s total; 0.001253 per start]
get_sprel_map_from_avail_exprs: num_starts 57 time spent: 0:0:0 [0.004442s total; 0.000078 per start]
update_memlabels_for_memslot_locs: num_starts 18 time spent: 0:0:0 [0.000075s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 118 time spent: 0:0:0 [0.013864s total; 0.000117 per start]
compute_simplified_loc_exprs_for_edge: num_starts 322 time spent: 0:0:0 [0.059321s total; 0.000184 per start]
compute_locs_definitely_written_on_edge: num_starts 118 time spent: 0:0:0 [0.000181s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 33 time spent: 0:0:0 [0.005601s total; 0.000170 per start]
edge_update_memlabel_map_for_mlvars: num_starts 59 time spent: 0:0:0 [0.001085s total; 0.000018 per start]
add_new_locs_based_on_edge: num_starts 37 time spent: 0:0:0 [0.037419s total; 0.001011 per start]
expand_locset_to_include_slots_for_memmask: num_starts 66 time spent: 0:0:0 [0.000141s total; 0.000002 per start]
total: num_starts 1 time spent: 0:0:31 [31.233001s total; 31.233001 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 3.76s.
ftmap_run_pointsto_analysis.: 0.104545s (num_starts 2; 0.0523s/start)s.
EQ Time after pointsto analysis: 3.65455s.
EQ Time after pointsto analysis and smt_query: 0.852004s.
EQ Time after pointsto analysis and smt_query and bv-solve: 0.840459s.
Equivalence proof found. The programs are equivalent.
