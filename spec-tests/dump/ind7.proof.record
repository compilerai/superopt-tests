==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x32 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x32)))))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x13)))
 (let (($x19 (and $x12 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x36))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x32 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x32)))))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x13)))
 (let (($x19 (and $x12 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x36))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-mem.alloc @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000001))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv0 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x01))
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x94 (= true false)))
 (let (($x95 (= $x94 true)))
 (let (($x75 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x85 (= $x84 $x75)))
 (let (($x74 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x86 (=> $x74 $x85)))
 (let (($x70 (= (_ bv0 32) (_ bv0 32))))
 (let (($x81 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x82 (= $x81 $x70)))
 (let (($x83 (=> $x74 $x82)))
 (let (($x78 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x79 (=> $x74 $x78)))
 (let (($x76 (= $x74 $x75)))
 (let (($x72 (= false false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x73 (=> $x69 $x72)))
 (let (($x71 (= $x69 $x70)))
 (let (($x91 (and (and (and (and (and $x71 $x73) $x76) $x79) $x83) $x86)))
 (let (($x92 (= $x91 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x62 (concat ?x59 (concat ?x55 ?x53)))))
 (let (($x64 (= ?x63 input.dst.llvm-%val)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x26 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let (($x50 (= $x11 true)))
 (let ((?x22 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x22)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x17 $x41)))
 (let (($x18 (and $x10 $x19)))
 (let (($x47 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x47 $x18)))
 (let (($x7 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x7)))))
 (let (($x14 (and $x27 $x12)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x9 (= $x28 true)))
 (let (($x51 (and $x9 $x50)))
 (let (($x67 (and $x51 $x66)))
 (let (($x93 (and $x67 $x92)))
 (let (($x96 (=> $x93 $x95)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x38 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x34 $x38) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x94 (= true false)))
 (let (($x95 (= $x94 true)))
 (let (($x75 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x85 (= $x84 $x75)))
 (let (($x74 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x86 (=> $x74 $x85)))
 (let (($x70 (= (_ bv0 32) (_ bv0 32))))
 (let (($x81 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x82 (= $x81 $x70)))
 (let (($x83 (=> $x74 $x82)))
 (let (($x78 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x79 (=> $x74 $x78)))
 (let (($x76 (= $x74 $x75)))
 (let (($x72 (= false false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x73 (=> $x69 $x72)))
 (let (($x71 (= $x69 $x70)))
 (let (($x91 (and (and (and (and (and $x71 $x73) $x76) $x79) $x83) $x86)))
 (let (($x92 (= $x91 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x62 (concat ?x59 (concat ?x55 ?x53)))))
 (let (($x64 (= ?x63 input.dst.llvm-%val)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let (($x26 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let (($x50 (= $x11 true)))
 (let ((?x22 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x22)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x17 $x41)))
 (let (($x18 (and $x10 $x19)))
 (let (($x47 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x47 $x18)))
 (let (($x7 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x7)))))
 (let (($x14 (and $x27 $x12)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x9 (= $x28 true)))
 (let (($x51 (and $x9 $x50)))
 (let (($x67 (and $x51 $x66)))
 (let (($x93 (and $x67 $x92)))
 (let (($x96 (=> $x93 $x95)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x38 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x34 $x38) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x100 (= true false)))
 (let (($x101 (= $x100 true)))
 (let (($x78 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x84 (and $x73 $x78)))
 (let (($x85 (not $x84)))
 (let (($x80 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x83 (and $x73 $x80)))
 (let (($x90 (not $x83)))
 (let (($x87 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x81 (= $x80 $x87)))
 (let (($x82 (=> $x73 $x81)))
 (let (($x69 (= (_ bv0 32) (_ bv0 32))))
 (let (($x79 (= $x78 $x69)))
 (let (($x89 (=> $x73 $x79)))
 (let (($x76 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x88 (=> $x73 $x76)))
 (let (($x74 (= $x73 $x87)))
 (let (($x71 (= false false)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x72 (=> $x68 $x71)))
 (let (($x70 (= $x68 $x69)))
 (let (($x95 (and (and (and (and (and (and $x70 $x72) $x74) $x88) $x89) $x82) $x90)))
 (let (($x96 (and $x95 $x85)))
 (let (($x97 (= $x96 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x56 (concat ?x54 (concat ?x62 ?x52)))))
 (let (($x63 (= ?x60 input.dst.llvm-%val)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x36 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x26 (= $x36 true)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let ((?x10 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x10)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x37 $x29)))
 (let (($x19 (and $x41 $x22)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x15 $x19)))
 (let (($x43 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x43)))))
 (let (($x12 (and $x25 $x18)))
 (let (($x14 (= $x12 true)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x50 (and $x28 $x11)))
 (let (($x66 (and $x50 $x65)))
 (let (($x98 (and $x66 $x97)))
 (let (($x102 (=> $x98 $x101)))
 (let (($x44 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x17 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x44 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x100 (= true false)))
 (let (($x101 (= $x100 true)))
 (let (($x78 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x84 (and $x73 $x78)))
 (let (($x85 (not $x84)))
 (let (($x80 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x83 (and $x73 $x80)))
 (let (($x90 (not $x83)))
 (let (($x87 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x81 (= $x80 $x87)))
 (let (($x82 (=> $x73 $x81)))
 (let (($x69 (= (_ bv0 32) (_ bv0 32))))
 (let (($x79 (= $x78 $x69)))
 (let (($x89 (=> $x73 $x79)))
 (let (($x76 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x88 (=> $x73 $x76)))
 (let (($x74 (= $x73 $x87)))
 (let (($x71 (= false false)))
 (let (($x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x72 (=> $x68 $x71)))
 (let (($x70 (= $x68 $x69)))
 (let (($x95 (and (and (and (and (and (and $x70 $x72) $x74) $x88) $x89) $x82) $x90)))
 (let (($x96 (and $x95 $x85)))
 (let (($x97 (= $x96 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x56 (concat ?x54 (concat ?x62 ?x52)))))
 (let (($x63 (= ?x60 input.dst.llvm-%val)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x36 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x26 (= $x36 true)))
 (let (($x6 (= $x26 true)))
 (let (($x11 (= $x6 true)))
 (let ((?x10 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x10)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x37 $x29)))
 (let (($x19 (and $x41 $x22)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x15 $x19)))
 (let (($x43 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x43)))))
 (let (($x12 (and $x25 $x18)))
 (let (($x14 (= $x12 true)))
 (let (($x42 (= $x14 true)))
 (let (($x28 (= $x42 true)))
 (let (($x50 (and $x28 $x11)))
 (let (($x66 (and $x50 $x65)))
 (let (($x98 (and $x66 $x97)))
 (let (($x102 (=> $x98 $x101)))
 (let (($x44 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x17 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x44 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x116 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x116)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x112 $x114)))
 (let (($x118 (and $x115 $x117)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x111 $x118)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x169 (and $x108 $x119)))
 (let (($x170 (= $x169 true)))
 (let (($x171 (= $x170 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x160 (= $x159 $x150)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x161 (=> $x149 $x160)))
 (let (($x145 (= (_ bv0 32) (_ bv0 32))))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (= $x156 $x145)))
 (let (($x158 (=> $x149 $x157)))
 (let (($x153 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x154 (=> $x149 $x153)))
 (let (($x151 (= $x149 $x150)))
 (let (($x147 (= false false)))
 (let (($x144 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x148 (=> $x144 $x147)))
 (let (($x146 (= $x144 $x145)))
 (let (($x166 (and (and (and (and (and $x146 $x148) $x151) $x154) $x158) $x161)))
 (let (($x167 (= $x166 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x129 (concat ?x126 (concat ?x123 ?x121)))))
 (let (($x131 (= input.dst.llvm-%val ?x130)))
 (let (($x134 (and (and (and $x108 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x119) $x131)))
 (let (($x84 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x135 (and $x84 $x134)))
 (let ((?x72 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x66 (and (and (and (and true (= ?x91 (_ bv1 8))) (= ?x25 (_ bv1 8))) (= ?x69 (_ bv1 8))) (= ?x65 (_ bv1 8)))))
 (let (($x81 (and (and (and (and $x66 (= ?x58 (_ bv1 8))) (= ?x56 (_ bv1 8))) (= ?x78 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x72) (_ bv1 8)))))
 (let (($x83 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x90 (=> $x83 (or false (or false $x81)))))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x18 (or $x19 $x90)))
 (let ((?x7 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x75 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x46 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x7 (bvsub ?x7 (_ bv4 32))) (bvult ?x7 (bvsub ?x7 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x57 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x29 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x57) (bvult input.dst.llvm-%call.Lentry%2%d ?x57))))
 (let (($x36 (and true $x29)))
 (let (($x6 (and $x29 $x36)))
 (let (($x55 (and (and (and $x36 $x6) $x22) $x46)))
 (let (($x138 (and (and (and $x55 $x75) $x18) $x135)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x72)))
 (let (($x10 (or false $x50)))
 (let (($x41 (or $x19 $x10)))
 (let (($x139 (and $x41 $x138)))
 (let (($x140 (= $x139 true)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x168 (and $x142 $x167)))
 (let (($x172 (=> $x168 $x171)))
 (let (($x63 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x74 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x34 $x74) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x63 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x116 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x116)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x112 $x114)))
 (let (($x118 (and $x115 $x117)))
 (let (($x111 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x111 $x118)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x169 (and $x108 $x119)))
 (let (($x170 (= $x169 true)))
 (let (($x171 (= $x170 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x160 (= $x159 $x150)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x161 (=> $x149 $x160)))
 (let (($x145 (= (_ bv0 32) (_ bv0 32))))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (= $x156 $x145)))
 (let (($x158 (=> $x149 $x157)))
 (let (($x153 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x154 (=> $x149 $x153)))
 (let (($x151 (= $x149 $x150)))
 (let (($x147 (= false false)))
 (let (($x144 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x148 (=> $x144 $x147)))
 (let (($x146 (= $x144 $x145)))
 (let (($x166 (and (and (and (and (and $x146 $x148) $x151) $x154) $x158) $x161)))
 (let (($x167 (= $x166 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x129 (concat ?x126 (concat ?x123 ?x121)))))
 (let (($x131 (= input.dst.llvm-%val ?x130)))
 (let (($x134 (and (and (and $x108 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x119) $x131)))
 (let (($x84 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x135 (and $x84 $x134)))
 (let ((?x72 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x66 (and (and (and (and true (= ?x91 (_ bv1 8))) (= ?x25 (_ bv1 8))) (= ?x69 (_ bv1 8))) (= ?x65 (_ bv1 8)))))
 (let (($x81 (and (and (and (and $x66 (= ?x58 (_ bv1 8))) (= ?x56 (_ bv1 8))) (= ?x78 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x72) (_ bv1 8)))))
 (let (($x83 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x90 (=> $x83 (or false (or false $x81)))))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x18 (or $x19 $x90)))
 (let ((?x7 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x75 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x46 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x7 (bvsub ?x7 (_ bv4 32))) (bvult ?x7 (bvsub ?x7 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x57 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x29 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x57) (bvult input.dst.llvm-%call.Lentry%2%d ?x57))))
 (let (($x36 (and true $x29)))
 (let (($x6 (and $x29 $x36)))
 (let (($x55 (and (and (and $x36 $x6) $x22) $x46)))
 (let (($x138 (and (and (and $x55 $x75) $x18) $x135)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x72)))
 (let (($x10 (or false $x50)))
 (let (($x41 (or $x19 $x10)))
 (let (($x139 (and $x41 $x138)))
 (let (($x140 (= $x139 true)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x168 (and $x142 $x167)))
 (let (($x172 (=> $x168 $x171)))
 (let (($x63 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x74 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x34 $x74) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x63 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x170 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x171 (= $x170 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x158 (= $x157 $x150)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x165 (=> $x149 $x158)))
 (let (($x146 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x155 (= $x164 $x146)))
 (let (($x156 (=> $x149 $x155)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x153 (=> $x149 $x152)))
 (let (($x151 (= $x149 $x150)))
 (let (($x148 (= false false)))
 (let (($x145 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x162 (=> $x145 $x148)))
 (let (($x147 (= $x145 $x146)))
 (let (($x167 (and (and (and (and (and $x147 $x162) $x151) $x153) $x156) $x165)))
 (let (($x168 (= $x167 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x123 (concat ?x125 (concat ?x120 ?x119)))))
 (let (($x124 (= input.dst.llvm-%val ?x121)))
 (let ((?x114 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x114)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x110 $x112)))
 (let (($x116 (and $x113 $x115)))
 (let (($x132 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x132 $x116)))
 (let (($x96 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x131 (and (and (and $x85 $x96) $x117) $x124)))
 (let (($x95 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x134 (and $x95 $x131)))
 (let ((?x87 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x44 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x64 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x59 (and (and (and (and true (= ?x32 (_ bv1 8))) (= ?x31 (_ bv1 8))) (= ?x64 (_ bv1 8))) (= ?x67 (_ bv1 8)))))
 (let (($x82 (and (and (and (and $x59 (= ?x73 (_ bv1 8))) (= ?x44 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x87) (_ bv1 8)))))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x137 (=> $x18 (or false (or false $x82)))))
 (let (($x24 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x20 (or $x24 $x137)))
 (let ((?x53 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x136 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x35 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x53 (bvsub ?x53 (_ bv4 32))) (bvult ?x53 (bvsub ?x53 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x57 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x36 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x57) (bvult input.dst.llvm-%call.Lentry%2%d ?x57))))
 (let (($x6 (and true $x36)))
 (let (($x99 (and $x36 $x6)))
 (let (($x42 (and (and (and $x6 $x99) $x22) $x35)))
 (let (($x139 (and (and (and $x42 $x136) $x20) $x134)))
 (let (($x5 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x87)))
 (let (($x41 (or false $x5)))
 (let (($x51 (or $x24 $x41)))
 (let (($x140 (and $x51 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x169 (and $x143 $x168)))
 (let (($x172 (=> $x169 $x171)))
 (let (($x10 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x19 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x14 $x19) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x10 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x170 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x171 (= $x170 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x158 (= $x157 $x150)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x165 (=> $x149 $x158)))
 (let (($x146 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x155 (= $x164 $x146)))
 (let (($x156 (=> $x149 $x155)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x153 (=> $x149 $x152)))
 (let (($x151 (= $x149 $x150)))
 (let (($x148 (= false false)))
 (let (($x145 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x162 (=> $x145 $x148)))
 (let (($x147 (= $x145 $x146)))
 (let (($x167 (and (and (and (and (and $x147 $x162) $x151) $x153) $x156) $x165)))
 (let (($x168 (= $x167 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x123 (concat ?x125 (concat ?x120 ?x119)))))
 (let (($x124 (= input.dst.llvm-%val ?x121)))
 (let ((?x114 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x114)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x110 $x112)))
 (let (($x116 (and $x113 $x115)))
 (let (($x132 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x132 $x116)))
 (let (($x96 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x131 (and (and (and $x85 $x96) $x117) $x124)))
 (let (($x95 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x134 (and $x95 $x131)))
 (let ((?x87 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x44 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x64 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x59 (and (and (and (and true (= ?x32 (_ bv1 8))) (= ?x31 (_ bv1 8))) (= ?x64 (_ bv1 8))) (= ?x67 (_ bv1 8)))))
 (let (($x82 (and (and (and (and $x59 (= ?x73 (_ bv1 8))) (= ?x44 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x87) (_ bv1 8)))))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x137 (=> $x18 (or false (or false $x82)))))
 (let (($x24 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x20 (or $x24 $x137)))
 (let ((?x53 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x136 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x35 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x53 (bvsub ?x53 (_ bv4 32))) (bvult ?x53 (bvsub ?x53 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x57 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x36 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x57) (bvult input.dst.llvm-%call.Lentry%2%d ?x57))))
 (let (($x6 (and true $x36)))
 (let (($x99 (and $x36 $x6)))
 (let (($x42 (and (and (and $x6 $x99) $x22) $x35)))
 (let (($x139 (and (and (and $x42 $x136) $x20) $x134)))
 (let (($x5 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x87)))
 (let (($x41 (or false $x5)))
 (let (($x51 (or $x24 $x41)))
 (let (($x140 (and $x51 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x169 (and $x143 $x168)))
 (let (($x172 (=> $x169 $x171)))
 (let (($x10 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x19 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x14 $x19) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x10 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00021540)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000084) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000087) #x01
    (ite (= x!0 #x00000088) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000086) #x01
    (ite (= x!0 #x00000089) #x01
    (ite (= x!0 #x00000083) #x01
    (ite (= x!0 #x0000008a) #x01
    (ite (= x!0 #x00000085) #x01
      #x02)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000088 x!0)
                    (ite (bvule #x00000089 x!0)
                         (ite (bvule #x0000008a x!0) #x0000008a #x00000089)
                         #x00000088)
                    #x00000087)))
    (let ((a!2 (ite (bvule #x00000085 x!0)
                    (ite (bvule #x00000086 x!0)
                         (ite (bvule #x00000087 x!0) a!1 #x00000086)
                         #x00000085)
                    #x00000084)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000083 x!0)
                         (ite (bvule #x00000084 x!0) a!2 #x00000083)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x39d00000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x1a031c52)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x95610fb7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x02)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1a031c54) #x01
    (ite (= x!0 #x95610fb4) #x03
    (ite (= x!0 #x1a031c57) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x1a031c53) #x01
    (ite (= x!0 #x1a031c56) #x01
    (ite (= x!0 #x95610fb5) #x03
    (ite (= x!0 #x95610fb7) #x03
    (ite (= x!0 #x1a031c58) #x01
    (ite (= x!0 #x1a031c52) #x01
    (ite (= x!0 #x1a031c59) #x01
    (ite (= x!0 #x1a031c55) #x01
      #x04)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x95610fb5 x!0)
                    (ite (bvule #x95610fb7 x!0)
                         (ite (bvule #x95610fb8 x!0) #x95610fb8 #x95610fb7)
                         #x95610fb5)
                    #x95610fb4)))
    (let ((a!2 (ite (bvule #x1a031c58 x!0)
                    (ite (bvule #x1a031c59 x!0)
                         (ite (bvule #x95610fb4 x!0) a!1 #x1a031c59)
                         #x1a031c58)
                    #x1a031c57)))
    (let ((a!3 (ite (bvule #x1a031c55 x!0)
                    (ite (bvule #x1a031c56 x!0)
                         (ite (bvule #x1a031c57 x!0) a!2 #x1a031c56)
                         #x1a031c55)
                    #x1a031c54)))
      (ite (bvule #x1a031c52 x!0)
           (ite (bvule #x1a031c53 x!0)
                (ite (bvule #x1a031c54 x!0) a!3 #x1a031c53)
                #x1a031c52)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x175 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x176 (= $x175 true)))
 (let (($x161 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x165 (and $x149 $x161)))
 (let (($x167 (not $x165)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x157 (and $x149 $x155)))
 (let (($x158 (not $x157)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x156 (= $x155 $x150)))
 (let (($x166 (=> $x149 $x156)))
 (let (($x147 (= (_ bv0 32) (_ bv0 32))))
 (let (($x154 (= $x161 $x147)))
 (let (($x164 (=> $x149 $x154)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x152 (=> $x149 $x163)))
 (let (($x151 (= $x149 $x150)))
 (let (($x162 (= false false)))
 (let (($x146 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x159 (=> $x146 $x162)))
 (let (($x148 (= $x146 $x147)))
 (let (($x173 (and (and (and (and (and (and $x148 $x159) $x151) $x152) $x164) $x166) $x158)))
 (let (($x174 (and $x173 $x167)))
 (let (($x49 (= $x174 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x120 (concat ?x129 (concat ?x118 ?x117)))))
 (let (($x128 (= input.dst.llvm-%val ?x119)))
 (let ((?x112 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x109 $x110)))
 (let (($x114 (and $x111 $x113)))
 (let (($x127 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x127 $x114)))
 (let (($x97 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x124 (and (and (and $x84 $x97) $x115) $x128)))
 (let (($x27 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x131 (and $x27 $x124)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x30 (_ bv1 8))) (= ?x23 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x66 (_ bv1 8)))))
 (let (($x94 (and (and (and (and $x58 (= ?x86 (_ bv1 8))) (= ?x88 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv1 8)))))
 (let (($x20 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x138 (=> $x20 (or false (or false $x94)))))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x16 (or $x47 $x138)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x135 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x57 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x57) (bvult input.dst.llvm-%call.Lentry%2%d ?x57))))
 (let (($x99 (and true $x6)))
 (let (($x46 (and $x6 $x99)))
 (let (($x75 (and (and (and $x99 $x46) $x22) $x71)))
 (let (($x140 (and (and (and $x75 $x135) $x16) $x131)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let (($x51 (or false $x50)))
 (let (($x68 (or $x47 $x51)))
 (let (($x141 (and $x68 $x140)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x33 (and $x144 $x49)))
 (let (($x177 (=> $x33 $x176)))
 (let (($x41 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x48 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x41 (not $x177)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x175 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x176 (= $x175 true)))
 (let (($x161 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x165 (and $x149 $x161)))
 (let (($x167 (not $x165)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x157 (and $x149 $x155)))
 (let (($x158 (not $x157)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x156 (= $x155 $x150)))
 (let (($x166 (=> $x149 $x156)))
 (let (($x147 (= (_ bv0 32) (_ bv0 32))))
 (let (($x154 (= $x161 $x147)))
 (let (($x164 (=> $x149 $x154)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x152 (=> $x149 $x163)))
 (let (($x151 (= $x149 $x150)))
 (let (($x162 (= false false)))
 (let (($x146 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x159 (=> $x146 $x162)))
 (let (($x148 (= $x146 $x147)))
 (let (($x173 (and (and (and (and (and (and $x148 $x159) $x151) $x152) $x164) $x166) $x158)))
 (let (($x174 (and $x173 $x167)))
 (let (($x49 (= $x174 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x120 (concat ?x129 (concat ?x118 ?x117)))))
 (let (($x128 (= input.dst.llvm-%val ?x119)))
 (let ((?x112 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x109 $x110)))
 (let (($x114 (and $x111 $x113)))
 (let (($x127 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x127 $x114)))
 (let (($x97 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x103 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x124 (and (and (and $x84 $x97) $x115) $x128)))
 (let (($x27 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x131 (and $x27 $x124)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x30 (_ bv1 8))) (= ?x23 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x66 (_ bv1 8)))))
 (let (($x94 (and (and (and (and $x58 (= ?x86 (_ bv1 8))) (= ?x88 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv1 8)))))
 (let (($x20 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x138 (=> $x20 (or false (or false $x94)))))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x16 (or $x47 $x138)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x135 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x57 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x57) (bvult input.dst.llvm-%call.Lentry%2%d ?x57))))
 (let (($x99 (and true $x6)))
 (let (($x46 (and $x6 $x99)))
 (let (($x75 (and (and (and $x99 $x46) $x22) $x71)))
 (let (($x140 (and (and (and $x75 $x135) $x16) $x131)))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let (($x51 (or false $x50)))
 (let (($x68 (or $x47 $x51)))
 (let (($x141 (and $x68 $x140)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x33 (and $x144 $x49)))
 (let (($x177 (=> $x33 $x176)))
 (let (($x41 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x48 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x41 (not $x177)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00021540)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000084) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000087) #x01
    (ite (= x!0 #x00000088) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000086) #x01
    (ite (= x!0 #x00000089) #x01
    (ite (= x!0 #x00000083) #x01
    (ite (= x!0 #x0000008a) #x01
    (ite (= x!0 #x00000085) #x01
      #x02)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000088 x!0)
                    (ite (bvule #x00000089 x!0)
                         (ite (bvule #x0000008a x!0) #x0000008a #x00000089)
                         #x00000088)
                    #x00000087)))
    (let ((a!2 (ite (bvule #x00000085 x!0)
                    (ite (bvule #x00000086 x!0)
                         (ite (bvule #x00000087 x!0) a!1 #x00000086)
                         #x00000085)
                    #x00000084)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000083 x!0)
                         (ite (bvule #x00000084 x!0) a!2 #x00000083)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x39d00000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x1a031c52)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x95610fb7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x02)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1a031c54) #x01
    (ite (= x!0 #x95610fb4) #x03
    (ite (= x!0 #x1a031c57) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x1a031c53) #x01
    (ite (= x!0 #x1a031c56) #x01
    (ite (= x!0 #x95610fb5) #x03
    (ite (= x!0 #x95610fb7) #x03
    (ite (= x!0 #x1a031c58) #x01
    (ite (= x!0 #x1a031c52) #x01
    (ite (= x!0 #x1a031c59) #x01
    (ite (= x!0 #x1a031c55) #x01
      #x04)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x95610fb5 x!0)
                    (ite (bvule #x95610fb7 x!0)
                         (ite (bvule #x95610fb8 x!0) #x95610fb8 #x95610fb7)
                         #x95610fb5)
                    #x95610fb4)))
    (let ((a!2 (ite (bvule #x1a031c58 x!0)
                    (ite (bvule #x1a031c59 x!0)
                         (ite (bvule #x95610fb4 x!0) a!1 #x1a031c59)
                         #x1a031c58)
                    #x1a031c57)))
    (let ((a!3 (ite (bvule #x1a031c55 x!0)
                    (ite (bvule #x1a031c56 x!0)
                         (ite (bvule #x1a031c57 x!0) a!2 #x1a031c56)
                         #x1a031c55)
                    #x1a031c54)))
      (ite (bvule #x1a031c52 x!0)
           (ite (bvule #x1a031c53 x!0)
                (ite (bvule #x1a031c54 x!0) a!3 #x1a031c53)
                #x1a031c52)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x165 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x165)))
 (let (($x174 (= ?x167 input.dst.llvm-%val)))
 (let (($x49 (= $x174 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x164 (= $x154 $x150)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x171 (=> $x149 $x164)))
 (let (($x148 (= (_ bv0 32) (_ bv0 32))))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x153 (= $x170 $x148)))
 (let (($x161 (=> $x149 $x153)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x163 (=> $x149 $x160)))
 (let (($x151 (= $x149 $x150)))
 (let (($x159 (= false false)))
 (let (($x147 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x168 (=> $x147 $x159)))
 (let (($x162 (= $x147 $x148)))
 (let (($x157 (and (and (and (and (and $x162 $x168) $x151) $x163) $x161) $x171)))
 (let (($x158 (= $x157 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x118 (concat ?x123 (concat ?x116 ?x115)))))
 (let (($x122 (= input.dst.llvm-%val ?x117)))
 (let ((?x110 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x110)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x96 $x109)))
 (let (($x112 (and $x132 $x111)))
 (let (($x126 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x126 $x112)))
 (let (($x98 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x128 (and (and (and $x84 $x98) $x113) $x122)))
 (let (($x91 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (and $x91 $x128)))
 (let ((?x34 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x83 (_ bv1 8))) (= ?x23 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x66 (_ bv1 8)))))
 (let (($x94 (and (and (and (and $x58 (= ?x86 (_ bv1 8))) (= ?x88 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x34) (_ bv1 8)))))
 (let (($x138 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x16 (=> $x138 (or false (or false $x94)))))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x18 (or $x14 $x16)))
 (let ((?x42 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x135 (= (bvand ?x42 (_ bv4294967292 32)) ?x42)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x42 (bvsub ?x42 (_ bv4 32))) (bvult ?x42 (bvsub ?x42 (_ bv4 32))))))
 (let (($x40 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x26 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x26) (bvult input.dst.llvm-%call.Lentry%2%d ?x26))))
 (let (($x99 (and true $x6)))
 (let (($x46 (and $x6 $x99)))
 (let (($x75 (and (and (and $x99 $x46) $x40) $x70)))
 (let (($x141 (and (and (and $x75 $x135) $x18) $x124)))
 (let (($x17 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x34)))
 (let (($x51 (or false $x17)))
 (let (($x68 (or $x14 $x51)))
 (let (($x142 (and $x68 $x141)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x145 (= $x144 true)))
 (let (($x173 (and $x145 $x158)))
 (let (($x33 (=> $x173 $x49)))
 (let (($x50 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x72 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x47 $x72) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x50 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x165 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x165)))
 (let (($x174 (= ?x167 input.dst.llvm-%val)))
 (let (($x49 (= $x174 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x164 (= $x154 $x150)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x171 (=> $x149 $x164)))
 (let (($x148 (= (_ bv0 32) (_ bv0 32))))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x153 (= $x170 $x148)))
 (let (($x161 (=> $x149 $x153)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x163 (=> $x149 $x160)))
 (let (($x151 (= $x149 $x150)))
 (let (($x159 (= false false)))
 (let (($x147 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x168 (=> $x147 $x159)))
 (let (($x162 (= $x147 $x148)))
 (let (($x157 (and (and (and (and (and $x162 $x168) $x151) $x163) $x161) $x171)))
 (let (($x158 (= $x157 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x118 (concat ?x123 (concat ?x116 ?x115)))))
 (let (($x122 (= input.dst.llvm-%val ?x117)))
 (let ((?x110 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x110)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x96 $x109)))
 (let (($x112 (and $x132 $x111)))
 (let (($x126 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x126 $x112)))
 (let (($x98 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x128 (and (and (and $x84 $x98) $x113) $x122)))
 (let (($x91 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x124 (and $x91 $x128)))
 (let ((?x34 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x83 (_ bv1 8))) (= ?x23 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x66 (_ bv1 8)))))
 (let (($x94 (and (and (and (and $x58 (= ?x86 (_ bv1 8))) (= ?x88 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x34) (_ bv1 8)))))
 (let (($x138 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x16 (=> $x138 (or false (or false $x94)))))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x18 (or $x14 $x16)))
 (let ((?x42 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x135 (= (bvand ?x42 (_ bv4294967292 32)) ?x42)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x42 (bvsub ?x42 (_ bv4 32))) (bvult ?x42 (bvsub ?x42 (_ bv4 32))))))
 (let (($x40 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x26 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x26) (bvult input.dst.llvm-%call.Lentry%2%d ?x26))))
 (let (($x99 (and true $x6)))
 (let (($x46 (and $x6 $x99)))
 (let (($x75 (and (and (and $x99 $x46) $x40) $x70)))
 (let (($x141 (and (and (and $x75 $x135) $x18) $x124)))
 (let (($x17 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x34)))
 (let (($x51 (or false $x17)))
 (let (($x68 (or $x14 $x51)))
 (let (($x142 (and $x68 $x141)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x145 (= $x144 true)))
 (let (($x173 (and $x145 $x158)))
 (let (($x33 (=> $x173 $x49)))
 (let (($x50 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x72 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x47 $x72) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x50 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var154X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var154X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var154X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x201 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var154X) (_ bv1 32)))))
 (let ((?x202 (concat ?x201 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var154X)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var154X) (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var154X) (_ bv3 32)))))
 (let ((?x208 (concat ?x207 (concat ?x204 ?x202))))
 (let (($x209 (= input.ind-%var154X.2.1 ?x208)))
 (let (($x12 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x210 (=> $x12 $x209)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.ind-%var154X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var154X))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.ind-%var154X (_ bv2 32))) ?x188)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd input.ind-%var154X (_ bv3 32))) ?x191)))
 (let (($x195 (= input.ind-%var154X.2.0 ?x194)))
 (let (($x196 (=> $x12 $x195)))
 (let (($x176 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x62 (ite $x176 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x62 (_ bv1 32))))
 (let (($x181 (= $x12 $x180)))
 (let (($x168 (= false false)))
 (let (($x175 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x179 (=> $x175 $x168)))
 (let (($x177 (= ?x62 (_ bv0 32))))
 (let (($x178 (= $x175 $x177)))
 (let (($x49 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x215 (and (and (and (and (and $x49 $x178) $x179) $x181) $x196) $x210)))
 (let (($x167 (= true true)))
 (let (($x216 (and $x167 $x215)))
 (let (($x217 (= $x216 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x161 (= $x153 $x150)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x172 (=> $x149 $x161)))
 (let (($x162 (= (_ bv0 32) (_ bv0 32))))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x152 (= $x166 $x162)))
 (let (($x170 (=> $x149 $x152)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x160 (=> $x149 $x169)))
 (let (($x151 (= $x149 $x150)))
 (let (($x148 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x155 (=> $x148 $x168)))
 (let (($x159 (= $x148 $x162)))
 (let (($x158 (and (and (and (and (and $x159 $x155) $x151) $x160) $x170) $x172)))
 (let (($x173 (= $x158 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x116 (concat ?x120 (concat ?x114 ?x113)))))
 (let (($x133 (= input.dst.llvm-%val ?x115)))
 (let ((?x109 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x109)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x126)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x97 $x96)))
 (let (($x110 (and $x127 $x132)))
 (let (($x125 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x125 $x110)))
 (let (($x27 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x122 (and (and (and $x38 $x27) $x111) $x133)))
 (let (($x139 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x128 (and $x139 $x122)))
 (let ((?x24 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x54 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x59 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x9 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x73 (and (and (and (and true (= ?x13 (_ bv1 8))) (= ?x37 (_ bv1 8))) (= ?x9 (_ bv1 8))) (= ?x59 (_ bv1 8)))))
 (let (($x90 (and (and (and (and $x73 (= ?x54 (_ bv1 8))) (= ?x92 (_ bv1 8))) (= ?x93 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x24) (_ bv1 8)))))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x140 (=> $x18 (or false (or false $x90)))))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x20 (or $x21 $x140)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x131 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x7 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x40 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x26 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x26) (bvult input.dst.llvm-%call.Lentry%2%d ?x26))))
 (let (($x46 (and true $x99)))
 (let (($x8 (and $x99 $x46)))
 (let (($x136 (and (and (and $x46 $x8) $x40) $x7)))
 (let (($x142 (and (and (and $x136 $x131) $x20) $x128)))
 (let (($x19 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x24)))
 (let (($x68 (or false $x19)))
 (let (($x57 (or $x21 $x68)))
 (let (($x143 (and $x57 $x142)))
 (let (($x144 (= $x143 true)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x165 (and $x146 $x173)))
 (let (($x218 (=> $x165 $x217)))
 (let (($x51 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x14 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x74 $x14) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x51 (not $x218))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var154X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var154X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var154X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x201 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var154X) (_ bv1 32)))))
 (let ((?x202 (concat ?x201 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var154X)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var154X) (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var154X) (_ bv3 32)))))
 (let ((?x208 (concat ?x207 (concat ?x204 ?x202))))
 (let (($x209 (= input.ind-%var154X.2.1 ?x208)))
 (let (($x12 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x210 (=> $x12 $x209)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.ind-%var154X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var154X))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.ind-%var154X (_ bv2 32))) ?x188)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd input.ind-%var154X (_ bv3 32))) ?x191)))
 (let (($x195 (= input.ind-%var154X.2.0 ?x194)))
 (let (($x196 (=> $x12 $x195)))
 (let (($x176 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x62 (ite $x176 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x62 (_ bv1 32))))
 (let (($x181 (= $x12 $x180)))
 (let (($x168 (= false false)))
 (let (($x175 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x179 (=> $x175 $x168)))
 (let (($x177 (= ?x62 (_ bv0 32))))
 (let (($x178 (= $x175 $x177)))
 (let (($x49 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x215 (and (and (and (and (and $x49 $x178) $x179) $x181) $x196) $x210)))
 (let (($x167 (= true true)))
 (let (($x216 (and $x167 $x215)))
 (let (($x217 (= $x216 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x161 (= $x153 $x150)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x172 (=> $x149 $x161)))
 (let (($x162 (= (_ bv0 32) (_ bv0 32))))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x152 (= $x166 $x162)))
 (let (($x170 (=> $x149 $x152)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x160 (=> $x149 $x169)))
 (let (($x151 (= $x149 $x150)))
 (let (($x148 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x155 (=> $x148 $x168)))
 (let (($x159 (= $x148 $x162)))
 (let (($x158 (and (and (and (and (and $x159 $x155) $x151) $x160) $x170) $x172)))
 (let (($x173 (= $x158 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x116 (concat ?x120 (concat ?x114 ?x113)))))
 (let (($x133 (= input.dst.llvm-%val ?x115)))
 (let ((?x109 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x109)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x126)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x97 $x96)))
 (let (($x110 (and $x127 $x132)))
 (let (($x125 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x125 $x110)))
 (let (($x27 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x122 (and (and (and $x38 $x27) $x111) $x133)))
 (let (($x139 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x128 (and $x139 $x122)))
 (let ((?x24 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x54 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x59 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x9 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x73 (and (and (and (and true (= ?x13 (_ bv1 8))) (= ?x37 (_ bv1 8))) (= ?x9 (_ bv1 8))) (= ?x59 (_ bv1 8)))))
 (let (($x90 (and (and (and (and $x73 (= ?x54 (_ bv1 8))) (= ?x92 (_ bv1 8))) (= ?x93 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x24) (_ bv1 8)))))
 (let (($x18 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x140 (=> $x18 (or false (or false $x90)))))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x20 (or $x21 $x140)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x131 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x7 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x40 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x26 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x26) (bvult input.dst.llvm-%call.Lentry%2%d ?x26))))
 (let (($x46 (and true $x99)))
 (let (($x8 (and $x99 $x46)))
 (let (($x136 (and (and (and $x46 $x8) $x40) $x7)))
 (let (($x142 (and (and (and $x136 $x131) $x20) $x128)))
 (let (($x19 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x24)))
 (let (($x68 (or false $x19)))
 (let (($x57 (or $x21 $x68)))
 (let (($x143 (and $x57 $x142)))
 (let (($x144 (= $x143 true)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x165 (and $x146 $x173)))
 (let (($x218 (=> $x165 $x217)))
 (let (($x51 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x14 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x74 $x14) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x51 (not $x218))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8e3a8c00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xb9c5a800)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf751656c)
  (define-fun input.ind-%var154X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var154X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var154X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x71c573ff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf751656f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf751656c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf751656d x!0)
                    (ite (bvule #xf751656f x!0)
                         (ite (bvule #xf7516570 x!0) #xf7516570 #xf751656f)
                         #xf751656d)
                    #xf751656c)))
    (let ((a!2 (ite (bvule #xb9c5a806 x!0)
                    (ite (bvule #xb9c5a807 x!0)
                         (ite (bvule #xf751656c x!0) a!1 #xb9c5a807)
                         #xb9c5a806)
                    #xb9c5a805)))
    (let ((a!3 (ite (bvule #xb9c5a803 x!0)
                    (ite (bvule #xb9c5a804 x!0)
                         (ite (bvule #xb9c5a805 x!0) a!2 #xb9c5a804)
                         #xb9c5a803)
                    #xb9c5a802)))
      (ite (bvule #xb9c5a800 x!0)
           (ite (bvule #xb9c5a801 x!0)
                (ite (bvule #xb9c5a802 x!0) a!3 #xb9c5a801)
                #xb9c5a800)
           #x00000000)))))
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb9c5a802) #x01
    (ite (= x!0 #xf751656c) #x03
    (ite (= x!0 #xb9c5a805) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xb9c5a801) #x01
    (ite (= x!0 #xb9c5a804) #x01
    (ite (= x!0 #xf751656d) #x03
    (ite (= x!0 #xf751656f) #x03
    (ite (= x!0 #xb9c5a806) #x01
    (ite (= x!0 #xb9c5a800) #x01
    (ite (= x!0 #xb9c5a807) #x01
    (ite (= x!0 #xb9c5a803) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0a800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var154X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var154X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var154X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0a800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x0a800004) #x01
    (ite (= x!0 #x0a800005) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x0a800003) #x01
    (ite (= x!0 #x0a800006) #x01
    (ite (= x!0 #x0a800000) #x01
    (ite (= x!0 #x0a800007) #x01
    (ite (= x!0 #x0a800002) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x0a800005 x!0)
                    (ite (bvule #x0a800006 x!0)
                         (ite (bvule #x0a800007 x!0) #x0a800007 #x0a800006)
                         #x0a800005)
                    #x0a800004)))
    (let ((a!2 (ite (bvule #x0a800002 x!0)
                    (ite (bvule #x0a800003 x!0)
                         (ite (bvule #x0a800004 x!0) a!1 #x0a800003)
                         #x0a800002)
                    #x0a800001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x0a800000 x!0)
                         (ite (bvule #x0a800001 x!0) a!2 #x0a800000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var184X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var184X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var184X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var184X) (_ bv1 32)))))
 (let ((?x63 (concat ?x220 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var184X)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var184X) (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var184X) (_ bv3 32)))))
 (let ((?x225 (concat ?x224 (concat ?x221 ?x63))))
 (let (($x226 (= input.ind-%var184X.2.1 ?x225)))
 (let (($x194 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x227 (=> $x194 $x226)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.ind-%var184X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var184X))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.ind-%var184X (_ bv2 32))) ?x200)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.ind-%var184X (_ bv3 32))) ?x202)))
 (let (($x210 (= input.ind-%var184X.2.0 ?x209)))
 (let (($x215 (=> $x194 $x210)))
 (let (($x155 (= false false)))
 (let (($x186 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x214 (=> $x186 $x155)))
 (let (($x187 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x185 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x185 (_ bv1 32))))
 (let (($x196 (= $x194 $x195)))
 (let (($x188 (= ?x185 (_ bv0 32))))
 (let (($x191 (= $x186 $x188)))
 (let (($x189 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x232 (and (and (and (and (and $x189 $x191) $x196) $x214) $x215) $x227)))
 (let (($x192 (= true true)))
 (let (($x233 (and $x192 $x232)))
 (let (($x234 (= $x233 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x176 (= $x175 $x150)))
 (let (($x152 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x172 (and $x149 $x152)))
 (let (($x62 (=> $x172 $x176)))
 (let (($x159 (= (_ bv0 32) (_ bv0 32))))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x49 (= $x174 $x159)))
 (let (($x33 (=> $x172 $x49)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x165 (=> $x172 $x173)))
 (let (($x171 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x153 (and $x149 $x171)))
 (let (($x161 (=> $x153 $x155)))
 (let (($x170 (= $x152 $x150)))
 (let (($x157 (=> $x149 $x170)))
 (let (($x163 (= $x171 $x159)))
 (let (($x166 (=> $x149 $x163)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x169 (=> $x149 $x156)))
 (let (($x151 (= $x149 $x150)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x154 (=> $x162 $x155)))
 (let (($x168 (= $x162 $x159)))
 (let (($x12 (and (and (and (and (and (and $x168 $x154) $x151) $x169) $x166) $x157) $x161)))
 (let (($x213 (and (and (and $x12 $x165) $x33) $x62)))
 (let (($x182 (= $x213 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x114 (concat ?x118 (concat ?x112 ?x111)))))
 (let (($x130 (= input.dst.llvm-%val ?x113)))
 (let ((?x96 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x96)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x98 $x97)))
 (let (($x109 (and $x126 $x127)))
 (let (($x129 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x129 $x109)))
 (let (($x107 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x133 (and (and (and $x91 $x107) $x132) $x130)))
 (let (($x45 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x122 (and $x45 $x133)))
 (let ((?x48 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x39 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x43 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x86 (and (and (and (and true (= ?x25 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x43 (_ bv1 8))) (= ?x58 (_ bv1 8)))))
 (let (($x137 (and (and (and (and $x86 (= ?x39 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x80 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x48) (_ bv1 8)))))
 (let (($x20 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x141 (=> $x20 (or false (or false $x137)))))
 (let (($x87 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x30 (or $x87 $x141)))
 (let ((?x71 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x124 (= (bvand ?x71 (_ bv4294967292 32)) ?x71)))
 (let (($x28 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x71 (bvsub ?x71 (_ bv4 32))) (bvult ?x71 (bvsub ?x71 (_ bv4 32))))))
 (let (($x40 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x57 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x46 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x57) (bvult input.dst.llvm-%call.Lentry%2%d ?x57))))
 (let (($x8 (and true $x46)))
 (let (($x70 (and $x46 $x8)))
 (let (($x135 (and (and (and $x8 $x70) $x40) $x28)))
 (let (($x143 (and (and (and $x135 $x124) $x30) $x122)))
 (let (($x17 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x48)))
 (let (($x24 (or false $x17)))
 (let (($x19 (or $x87 $x24)))
 (let (($x144 (and $x19 $x143)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x184 (and $x147 $x182)))
 (let (($x235 (=> $x184 $x234)))
 (let (($x41 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x52 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x47 $x52) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x41 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var184X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var184X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var184X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var184X) (_ bv1 32)))))
 (let ((?x63 (concat ?x220 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var184X)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var184X) (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var184X) (_ bv3 32)))))
 (let ((?x225 (concat ?x224 (concat ?x221 ?x63))))
 (let (($x226 (= input.ind-%var184X.2.1 ?x225)))
 (let (($x194 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x227 (=> $x194 $x226)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.ind-%var184X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var184X))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.ind-%var184X (_ bv2 32))) ?x200)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.ind-%var184X (_ bv3 32))) ?x202)))
 (let (($x210 (= input.ind-%var184X.2.0 ?x209)))
 (let (($x215 (=> $x194 $x210)))
 (let (($x155 (= false false)))
 (let (($x186 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x214 (=> $x186 $x155)))
 (let (($x187 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x185 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x185 (_ bv1 32))))
 (let (($x196 (= $x194 $x195)))
 (let (($x188 (= ?x185 (_ bv0 32))))
 (let (($x191 (= $x186 $x188)))
 (let (($x189 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x232 (and (and (and (and (and $x189 $x191) $x196) $x214) $x215) $x227)))
 (let (($x192 (= true true)))
 (let (($x233 (and $x192 $x232)))
 (let (($x234 (= $x233 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x176 (= $x175 $x150)))
 (let (($x152 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x172 (and $x149 $x152)))
 (let (($x62 (=> $x172 $x176)))
 (let (($x159 (= (_ bv0 32) (_ bv0 32))))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x49 (= $x174 $x159)))
 (let (($x33 (=> $x172 $x49)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x165 (=> $x172 $x173)))
 (let (($x171 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x153 (and $x149 $x171)))
 (let (($x161 (=> $x153 $x155)))
 (let (($x170 (= $x152 $x150)))
 (let (($x157 (=> $x149 $x170)))
 (let (($x163 (= $x171 $x159)))
 (let (($x166 (=> $x149 $x163)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x169 (=> $x149 $x156)))
 (let (($x151 (= $x149 $x150)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x154 (=> $x162 $x155)))
 (let (($x168 (= $x162 $x159)))
 (let (($x12 (and (and (and (and (and (and $x168 $x154) $x151) $x169) $x166) $x157) $x161)))
 (let (($x213 (and (and (and $x12 $x165) $x33) $x62)))
 (let (($x182 (= $x213 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x114 (concat ?x118 (concat ?x112 ?x111)))))
 (let (($x130 (= input.dst.llvm-%val ?x113)))
 (let ((?x96 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x96)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x98 $x97)))
 (let (($x109 (and $x126 $x127)))
 (let (($x129 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x129 $x109)))
 (let (($x107 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x133 (and (and (and $x91 $x107) $x132) $x130)))
 (let (($x45 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x122 (and $x45 $x133)))
 (let ((?x48 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x77 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x39 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x43 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x86 (and (and (and (and true (= ?x25 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x43 (_ bv1 8))) (= ?x58 (_ bv1 8)))))
 (let (($x137 (and (and (and (and $x86 (= ?x39 (_ bv1 8))) (= ?x77 (_ bv1 8))) (= ?x80 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x48) (_ bv1 8)))))
 (let (($x20 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x141 (=> $x20 (or false (or false $x137)))))
 (let (($x87 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x30 (or $x87 $x141)))
 (let ((?x71 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x124 (= (bvand ?x71 (_ bv4294967292 32)) ?x71)))
 (let (($x28 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x71 (bvsub ?x71 (_ bv4 32))) (bvult ?x71 (bvsub ?x71 (_ bv4 32))))))
 (let (($x40 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x57 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x46 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x57) (bvult input.dst.llvm-%call.Lentry%2%d ?x57))))
 (let (($x8 (and true $x46)))
 (let (($x70 (and $x46 $x8)))
 (let (($x135 (and (and (and $x8 $x70) $x40) $x28)))
 (let (($x143 (and (and (and $x135 $x124) $x30) $x122)))
 (let (($x17 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x48)))
 (let (($x24 (or false $x17)))
 (let (($x19 (or $x87 $x24)))
 (let (($x144 (and $x19 $x143)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x184 (and $x147 $x182)))
 (let (($x235 (=> $x184 $x234)))
 (let (($x41 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x52 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x47 $x52) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x41 (not $x235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0a800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var184X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var184X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var184X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0a800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x0a800004) #x01
    (ite (= x!0 #x0a800005) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x0a800003) #x01
    (ite (= x!0 #x0a800006) #x01
    (ite (= x!0 #x0a800000) #x01
    (ite (= x!0 #x0a800007) #x01
    (ite (= x!0 #x0a800002) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x0a800005 x!0)
                    (ite (bvule #x0a800006 x!0)
                         (ite (bvule #x0a800007 x!0) #x0a800007 #x0a800006)
                         #x0a800005)
                    #x0a800004)))
    (let ((a!2 (ite (bvule #x0a800002 x!0)
                    (ite (bvule #x0a800003 x!0)
                         (ite (bvule #x0a800004 x!0) a!1 #x0a800003)
                         #x0a800002)
                    #x0a800001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x0a800000 x!0)
                         (ite (bvule #x0a800001 x!0) a!2 #x0a800000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8e3a8c00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xb9c5a800)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf751656c)
  (define-fun input.ind-%var184X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var184X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var184X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x71c573ff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf751656f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf751656c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf751656d x!0)
                    (ite (bvule #xf751656f x!0)
                         (ite (bvule #xf7516570 x!0) #xf7516570 #xf751656f)
                         #xf751656d)
                    #xf751656c)))
    (let ((a!2 (ite (bvule #xb9c5a806 x!0)
                    (ite (bvule #xb9c5a807 x!0)
                         (ite (bvule #xf751656c x!0) a!1 #xb9c5a807)
                         #xb9c5a806)
                    #xb9c5a805)))
    (let ((a!3 (ite (bvule #xb9c5a803 x!0)
                    (ite (bvule #xb9c5a804 x!0)
                         (ite (bvule #xb9c5a805 x!0) a!2 #xb9c5a804)
                         #xb9c5a803)
                    #xb9c5a802)))
      (ite (bvule #xb9c5a800 x!0)
           (ite (bvule #xb9c5a801 x!0)
                (ite (bvule #xb9c5a802 x!0) a!3 #xb9c5a801)
                #xb9c5a800)
           #x00000000)))))
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb9c5a802) #x01
    (ite (= x!0 #xf751656c) #x03
    (ite (= x!0 #xb9c5a805) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xb9c5a801) #x01
    (ite (= x!0 #xb9c5a804) #x01
    (ite (= x!0 #xf751656d) #x03
    (ite (= x!0 #xf751656f) #x03
    (ite (= x!0 #xb9c5a806) #x01
    (ite (= x!0 #xb9c5a800) #x01
    (ite (= x!0 #xb9c5a807) #x01
    (ite (= x!0 #xb9c5a803) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var214X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var214X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var214X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var214X) (_ bv1 32)))))
 (let ((?x256 (concat ?x255 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var214X)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var214X) (_ bv2 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var214X) (_ bv3 32)))))
 (let ((?x262 (concat ?x261 (concat ?x258 ?x256))))
 (let (($x263 (= input.ind-%var214X.2.1 ?x262)))
 (let (($x234 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x264 (=> $x234 $x263)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd input.ind-%var214X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var214X))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd input.ind-%var214X (_ bv2 32))) ?x242)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd input.ind-%var214X (_ bv3 32))) ?x245)))
 (let (($x249 (= input.ind-%var214X.2.0 ?x248)))
 (let (($x250 (=> $x234 $x249)))
 (let (($x154 (= false false)))
 (let (($x225 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x237 (=> $x225 $x154)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x227 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x227 (_ bv1 32))))
 (let (($x236 (= $x234 $x235)))
 (let (($x232 (= ?x227 (_ bv0 32))))
 (let (($x233 (= $x225 $x232)))
 (let (($x63 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x269 (and (and (and (and (and $x63 $x233) $x236) $x237) $x250) $x264)))
 (let (($x220 (= true true)))
 (let (($x270 (and $x220 $x269)))
 (let (($x271 (= $x270 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x230 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x197 (= $x230 $x150)))
 (let (($x189 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x165 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x157 (and $x149 $x163)))
 (let (($x33 (and $x157 $x165)))
 (let (($x187 (and $x33 $x189)))
 (let (($x206 (=> $x187 $x197)))
 (let (($x194 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x229 (and $x187 $x194)))
 (let (($x214 (=> $x229 $x154)))
 (let (($x168 (= (_ bv0 32) (_ bv0 32))))
 (let (($x195 (= $x194 $x168)))
 (let (($x196 (=> $x187 $x195)))
 (let (($x188 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x191 (=> $x187 $x188)))
 (let (($x190 (= $x189 $x150)))
 (let (($x186 (=> $x33 $x190)))
 (let (($x213 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x192 (and $x33 $x213)))
 (let (($x193 (=> $x192 $x154)))
 (let (($x182 (= $x213 $x168)))
 (let (($x184 (=> $x33 $x182)))
 (let (($x175 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x176 (=> $x33 $x175)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x174 (and $x157 $x172)))
 (let (($x49 (=> $x174 $x154)))
 (let (($x180 (= $x165 $x150)))
 (let (($x167 (=> $x157 $x180)))
 (let (($x158 (= $x172 $x168)))
 (let (($x173 (=> $x157 $x158)))
 (let (($x153 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x161 (=> $x157 $x153)))
 (let (($x211 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x152 (and $x149 $x211)))
 (let (($x170 (=> $x152 $x154)))
 (let (($x166 (= $x163 $x150)))
 (let (($x179 (=> $x149 $x166)))
 (let (($x160 (= $x211 $x168)))
 (let (($x171 (=> $x149 $x160)))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x156 (=> $x149 $x164)))
 (let (($x151 (= $x149 $x150)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x177 (=> $x159 $x154)))
 (let (($x155 (= $x159 $x168)))
 (let (($x204 (and (and (and (and (and (and $x155 $x177) $x151) $x156) $x171) $x179) $x170)))
 (let (($x215 (and (and (and (and (and (and $x204 $x161) $x173) $x167) $x49) $x176) $x184)))
 (let (($x183 (and (and (and (and (and (and $x215 $x193) $x186) $x191) $x196) $x214) $x206)))
 (let (($x221 (= $x183 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x112 (concat ?x116 (concat ?x110 ?x132)))))
 (let (($x121 (= input.dst.llvm-%val ?x111)))
 (let ((?x97 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x97)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x27 $x98)))
 (let (($x96 (and $x125 $x126)))
 (let (($x123 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x123 $x96)))
 (let (($x108 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x130 (and (and (and $x139 $x108) $x127) $x121)))
 (let (($x15 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x133 (and $x15 $x130)))
 (let ((?x95 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x54 (and (and (and (and true (= ?x31 (_ bv1 8))) (= ?x69 (_ bv1 8))) (= ?x65 (_ bv1 8))) (= ?x73 (_ bv1 8)))))
 (let (($x16 (and (and (and (and $x54 (= ?x56 (_ bv1 8))) (= ?x78 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x95) (_ bv1 8)))))
 (let (($x30 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x142 (=> $x30 (or false (or false $x16)))))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x11 (or $x34 $x142)))
 (let ((?x76 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x135 (= (bvand ?x76 (_ bv4294967292 32)) ?x76)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x76 (bvsub ?x76 (_ bv4 32))) (bvult ?x76 (bvsub ?x76 (_ bv4 32))))))
 (let (($x7 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x128 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x14 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x128) (bvult input.dst.llvm-%call.Lentry%2%d ?x128))))
 (let (($x26 (and true $x14)))
 (let (($x46 (and $x14 $x26)))
 (let (($x55 (and (and (and $x26 $x46) $x7) $x71)))
 (let (($x144 (and (and (and $x55 $x135) $x11) $x133)))
 (let (($x10 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x95)))
 (let (($x29 (or false $x10)))
 (let (($x68 (or $x34 $x29)))
 (let (($x145 (and $x68 $x144)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x219 (and $x148 $x221)))
 (let (($x272 (=> $x219 $x271)))
 (let (($x19 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x5 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x48 $x5) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x19 (not $x272)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.ind-%var214X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var214X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var214X.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var214X) (_ bv1 32)))))
 (let ((?x256 (concat ?x255 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.ind-%var214X)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var214X) (_ bv2 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.ind-%var214X) (_ bv3 32)))))
 (let ((?x262 (concat ?x261 (concat ?x258 ?x256))))
 (let (($x263 (= input.ind-%var214X.2.1 ?x262)))
 (let (($x234 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x264 (=> $x234 $x263)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd input.ind-%var214X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var214X))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd input.ind-%var214X (_ bv2 32))) ?x242)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd input.ind-%var214X (_ bv3 32))) ?x245)))
 (let (($x249 (= input.ind-%var214X.2.0 ?x248)))
 (let (($x250 (=> $x234 $x249)))
 (let (($x154 (= false false)))
 (let (($x225 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x237 (=> $x225 $x154)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x227 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x227 (_ bv1 32))))
 (let (($x236 (= $x234 $x235)))
 (let (($x232 (= ?x227 (_ bv0 32))))
 (let (($x233 (= $x225 $x232)))
 (let (($x63 (= input.spec-%tmpvar-3.E0%0%d input.dst.llvm-%call.Lentry%2%d)))
 (let (($x269 (and (and (and (and (and $x63 $x233) $x236) $x237) $x250) $x264)))
 (let (($x220 (= true true)))
 (let (($x270 (and $x220 $x269)))
 (let (($x271 (= $x270 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x230 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x197 (= $x230 $x150)))
 (let (($x189 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x165 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x157 (and $x149 $x163)))
 (let (($x33 (and $x157 $x165)))
 (let (($x187 (and $x33 $x189)))
 (let (($x206 (=> $x187 $x197)))
 (let (($x194 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x229 (and $x187 $x194)))
 (let (($x214 (=> $x229 $x154)))
 (let (($x168 (= (_ bv0 32) (_ bv0 32))))
 (let (($x195 (= $x194 $x168)))
 (let (($x196 (=> $x187 $x195)))
 (let (($x188 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x191 (=> $x187 $x188)))
 (let (($x190 (= $x189 $x150)))
 (let (($x186 (=> $x33 $x190)))
 (let (($x213 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x192 (and $x33 $x213)))
 (let (($x193 (=> $x192 $x154)))
 (let (($x182 (= $x213 $x168)))
 (let (($x184 (=> $x33 $x182)))
 (let (($x175 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x176 (=> $x33 $x175)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x174 (and $x157 $x172)))
 (let (($x49 (=> $x174 $x154)))
 (let (($x180 (= $x165 $x150)))
 (let (($x167 (=> $x157 $x180)))
 (let (($x158 (= $x172 $x168)))
 (let (($x173 (=> $x157 $x158)))
 (let (($x153 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x161 (=> $x157 $x153)))
 (let (($x211 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x152 (and $x149 $x211)))
 (let (($x170 (=> $x152 $x154)))
 (let (($x166 (= $x163 $x150)))
 (let (($x179 (=> $x149 $x166)))
 (let (($x160 (= $x211 $x168)))
 (let (($x171 (=> $x149 $x160)))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x156 (=> $x149 $x164)))
 (let (($x151 (= $x149 $x150)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x177 (=> $x159 $x154)))
 (let (($x155 (= $x159 $x168)))
 (let (($x204 (and (and (and (and (and (and $x155 $x177) $x151) $x156) $x171) $x179) $x170)))
 (let (($x215 (and (and (and (and (and (and $x204 $x161) $x173) $x167) $x49) $x176) $x184)))
 (let (($x183 (and (and (and (and (and (and $x215 $x193) $x186) $x191) $x196) $x214) $x206)))
 (let (($x221 (= $x183 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x112 (concat ?x116 (concat ?x110 ?x132)))))
 (let (($x121 (= input.dst.llvm-%val ?x111)))
 (let ((?x97 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x97)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x27 $x98)))
 (let (($x96 (and $x125 $x126)))
 (let (($x123 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x123 $x96)))
 (let (($x108 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x130 (and (and (and $x139 $x108) $x127) $x121)))
 (let (($x15 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x133 (and $x15 $x130)))
 (let ((?x95 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x78 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x56 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x65 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x54 (and (and (and (and true (= ?x31 (_ bv1 8))) (= ?x69 (_ bv1 8))) (= ?x65 (_ bv1 8))) (= ?x73 (_ bv1 8)))))
 (let (($x16 (and (and (and (and $x54 (= ?x56 (_ bv1 8))) (= ?x78 (_ bv1 8))) (= ?x81 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x95) (_ bv1 8)))))
 (let (($x30 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x142 (=> $x30 (or false (or false $x16)))))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x11 (or $x34 $x142)))
 (let ((?x76 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x135 (= (bvand ?x76 (_ bv4294967292 32)) ?x76)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x76 (bvsub ?x76 (_ bv4 32))) (bvult ?x76 (bvsub ?x76 (_ bv4 32))))))
 (let (($x7 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x128 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x14 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x128) (bvult input.dst.llvm-%call.Lentry%2%d ?x128))))
 (let (($x26 (and true $x14)))
 (let (($x46 (and $x14 $x26)))
 (let (($x55 (and (and (and $x26 $x46) $x7) $x71)))
 (let (($x144 (and (and (and $x55 $x135) $x11) $x133)))
 (let (($x10 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x95)))
 (let (($x29 (or false $x10)))
 (let (($x68 (or $x34 $x29)))
 (let (($x145 (and $x68 $x144)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x219 (and $x148 $x221)))
 (let (($x272 (=> $x219 $x271)))
 (let (($x19 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x5 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x48 $x5) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x19 (not $x272)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8e3a8c00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xb9c5a800)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf751656c)
  (define-fun input.ind-%var214X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var214X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var214X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #x71c573ff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf751656f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf751656c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf751656d x!0)
                    (ite (bvule #xf751656f x!0)
                         (ite (bvule #xf7516570 x!0) #xf7516570 #xf751656f)
                         #xf751656d)
                    #xf751656c)))
    (let ((a!2 (ite (bvule #xb9c5a806 x!0)
                    (ite (bvule #xb9c5a807 x!0)
                         (ite (bvule #xf751656c x!0) a!1 #xb9c5a807)
                         #xb9c5a806)
                    #xb9c5a805)))
    (let ((a!3 (ite (bvule #xb9c5a803 x!0)
                    (ite (bvule #xb9c5a804 x!0)
                         (ite (bvule #xb9c5a805 x!0) a!2 #xb9c5a804)
                         #xb9c5a803)
                    #xb9c5a802)))
      (ite (bvule #xb9c5a800 x!0)
           (ite (bvule #xb9c5a801 x!0)
                (ite (bvule #xb9c5a802 x!0) a!3 #xb9c5a801)
                #xb9c5a800)
           #x00000000)))))
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb9c5a802) #x01
    (ite (= x!0 #xf751656c) #x03
    (ite (= x!0 #xb9c5a805) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xb9c5a801) #x01
    (ite (= x!0 #xb9c5a804) #x01
    (ite (= x!0 #xf751656d) #x03
    (ite (= x!0 #xf751656f) #x03
    (ite (= x!0 #xb9c5a806) #x01
    (ite (= x!0 #xb9c5a800) #x01
    (ite (= x!0 #xb9c5a807) #x01
    (ite (= x!0 #xb9c5a803) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0a800000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var214X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var214X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var214X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0a800001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x0a800004) #x01
    (ite (= x!0 #x0a800005) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x0a800003) #x01
    (ite (= x!0 #x0a800006) #x01
    (ite (= x!0 #x0a800000) #x01
    (ite (= x!0 #x0a800007) #x01
    (ite (= x!0 #x0a800002) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x0a800005 x!0)
                    (ite (bvule #x0a800006 x!0)
                         (ite (bvule #x0a800007 x!0) #x0a800007 #x0a800006)
                         #x0a800005)
                    #x0a800004)))
    (let ((a!2 (ite (bvule #x0a800002 x!0)
                    (ite (bvule #x0a800003 x!0)
                         (ite (bvule #x0a800004 x!0) a!1 #x0a800003)
                         #x0a800002)
                    #x0a800001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x0a800000 x!0)
                         (ite (bvule #x0a800001 x!0) a!2 #x0a800000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x157 (= false true)))
 (let (($x212 (= $x157 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x171 (= $x160 $x150)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x199 (=> $x149 $x171)))
 (let (($x155 (= (_ bv0 32) (_ bv0 32))))
 (let (($x201 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x169 (= $x201 $x155)))
 (let (($x211 (=> $x149 $x169)))
 (let (($x178 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x164 (=> $x149 $x178)))
 (let (($x151 (= $x149 $x150)))
 (let (($x177 (= false false)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x205 (=> $x168 $x177)))
 (let (($x154 (= $x168 $x155)))
 (let (($x152 (and (and (and (and (and $x154 $x205) $x151) $x164) $x211) $x199)))
 (let (($x170 (= $x152 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x110 (concat ?x114 (concat ?x109 ?x127)))))
 (let (($x119 (= input.dst.llvm-%val ?x132)))
 (let ((?x98 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x98)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x107 $x27)))
 (let (($x97 (and $x129 $x125)))
 (let (($x120 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x120 $x97)))
 (let (($x106 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x121 (and (and (and $x45 $x106) $x126) $x119)))
 (let (($x83 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x130 (and $x83 $x121)))
 (let ((?x87 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x44 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x39 (and (and (and (and true (= ?x23 (_ bv1 8))) (= ?x64 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x140 (and (and (and (and $x39 (= ?x44 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x87) (_ bv1 8)))))
 (let (($x11 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x143 (=> $x11 (or false (or false $x140)))))
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x32 (or $x52 $x143)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x122 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x22 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x7 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x128 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x26 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x128) (bvult input.dst.llvm-%call.Lentry%2%d ?x128))))
 (let (($x46 (and true $x26)))
 (let (($x42 (and $x26 $x46)))
 (let (($x28 (and (and (and $x46 $x42) $x7) $x22)))
 (let (($x145 (and (and (and $x28 $x122) $x32) $x130)))
 (let (($x24 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x87)))
 (let (($x68 (or false $x24)))
 (let (($x47 (or $x52 $x68)))
 (let (($x146 (and $x47 $x145)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x162 (= $x148 true)))
 (let (($x204 (and $x162 $x170)))
 (let (($x153 (=> $x204 $x212)))
 (let (($x29 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x34 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x34) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x29 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x157 (= false true)))
 (let (($x212 (= $x157 true)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x171 (= $x160 $x150)))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x199 (=> $x149 $x171)))
 (let (($x155 (= (_ bv0 32) (_ bv0 32))))
 (let (($x201 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x169 (= $x201 $x155)))
 (let (($x211 (=> $x149 $x169)))
 (let (($x178 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x164 (=> $x149 $x178)))
 (let (($x151 (= $x149 $x150)))
 (let (($x177 (= false false)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x205 (=> $x168 $x177)))
 (let (($x154 (= $x168 $x155)))
 (let (($x152 (and (and (and (and (and $x154 $x205) $x151) $x164) $x211) $x199)))
 (let (($x170 (= $x152 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x110 (concat ?x114 (concat ?x109 ?x127)))))
 (let (($x119 (= input.dst.llvm-%val ?x132)))
 (let ((?x98 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x98)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x107 $x27)))
 (let (($x97 (and $x129 $x125)))
 (let (($x120 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x120 $x97)))
 (let (($x106 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x121 (and (and (and $x45 $x106) $x126) $x119)))
 (let (($x83 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x130 (and $x83 $x121)))
 (let ((?x87 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x44 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x39 (and (and (and (and true (= ?x23 (_ bv1 8))) (= ?x64 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x86 (_ bv1 8)))))
 (let (($x140 (and (and (and (and $x39 (= ?x44 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x87) (_ bv1 8)))))
 (let (($x11 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x143 (=> $x11 (or false (or false $x140)))))
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x32 (or $x52 $x143)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x122 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x22 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x7 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x128 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x26 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x128) (bvult input.dst.llvm-%call.Lentry%2%d ?x128))))
 (let (($x46 (and true $x26)))
 (let (($x42 (and $x26 $x46)))
 (let (($x28 (and (and (and $x46 $x42) $x7) $x22)))
 (let (($x145 (and (and (and $x28 $x122) $x32) $x130)))
 (let (($x24 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x87)))
 (let (($x68 (or false $x24)))
 (let (($x47 (or $x52 $x68)))
 (let (($x146 (and $x47 $x145)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x162 (= $x148 true)))
 (let (($x204 (and $x162 $x170)))
 (let (($x153 (=> $x204 $x212)))
 (let (($x29 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x34 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x36 $x34) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x29 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x172 (= false true)))
 (let (($x158 (= $x172 true)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x199 (and $x149 $x179)))
 (let (($x152 (not $x199)))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x160 (and $x149 $x169)))
 (let (($x171 (not $x160)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x211 (= $x169 $x150)))
 (let (($x203 (=> $x149 $x211)))
 (let (($x154 (= (_ bv0 32) (_ bv0 32))))
 (let (($x156 (= $x179 $x154)))
 (let (($x201 (=> $x149 $x156)))
 (let (($x208 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x178 (=> $x149 $x208)))
 (let (($x151 (= $x149 $x150)))
 (let (($x205 (= false false)))
 (let (($x155 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x163 (=> $x155 $x205)))
 (let (($x177 (= $x155 $x154)))
 (let (($x161 (and (and (and (and (and (and $x177 $x163) $x151) $x178) $x201) $x203) $x171)))
 (let (($x207 (and $x161 $x152)))
 (let (($x6 (= $x207 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x109 (concat ?x112 (concat ?x96 ?x126)))))
 (let (($x117 (= input.dst.llvm-%val ?x127)))
 (let ((?x27 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x27)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x108 $x107)))
 (let (($x98 (and $x123 $x129)))
 (let (($x118 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x118 $x98)))
 (let (($x84 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x119 (and (and (and $x15 $x84) $x125) $x117)))
 (let (($x13 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x121 (and $x13 $x119)))
 (let ((?x124 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x54 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x56 (and (and (and (and true (= ?x37 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x66 (_ bv1 8))) (= ?x54 (_ bv1 8)))))
 (let (($x141 (and (and (and (and $x56 (= ?x88 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x124) (_ bv1 8)))))
 (let (($x32 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x144 (=> $x32 (or false (or false $x141)))))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x138 (or $x74 $x144)))
 (let ((?x53 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x133 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x75 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x53 (bvsub ?x53 (_ bv4 32))) (bvult ?x53 (bvsub ?x53 (_ bv4 32))))))
 (let (($x7 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x128 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x46 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x128) (bvult input.dst.llvm-%call.Lentry%2%d ?x128))))
 (let (($x42 (and true $x46)))
 (let (($x71 (and $x46 $x42)))
 (let (($x135 (and (and (and $x42 $x71) $x7) $x75)))
 (let (($x146 (and (and (and $x135 $x133) $x138) $x121)))
 (let (($x10 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x124)))
 (let (($x47 (or false $x10)))
 (let (($x72 (or $x74 $x47)))
 (let (($x147 (and $x72 $x146)))
 (let (($x148 (= $x147 true)))
 (let (($x162 (= $x148 true)))
 (let (($x159 (= $x162 true)))
 (let (($x12 (and $x159 $x6)))
 (let (($x173 (=> $x12 $x158)))
 (let (($x68 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x52 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x52) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x68 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x172 (= false true)))
 (let (($x158 (= $x172 true)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x199 (and $x149 $x179)))
 (let (($x152 (not $x199)))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x160 (and $x149 $x169)))
 (let (($x171 (not $x160)))
 (let (($x150 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x211 (= $x169 $x150)))
 (let (($x203 (=> $x149 $x211)))
 (let (($x154 (= (_ bv0 32) (_ bv0 32))))
 (let (($x156 (= $x179 $x154)))
 (let (($x201 (=> $x149 $x156)))
 (let (($x208 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x178 (=> $x149 $x208)))
 (let (($x151 (= $x149 $x150)))
 (let (($x205 (= false false)))
 (let (($x155 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x163 (=> $x155 $x205)))
 (let (($x177 (= $x155 $x154)))
 (let (($x161 (and (and (and (and (and (and $x177 $x163) $x151) $x178) $x201) $x203) $x171)))
 (let (($x207 (and $x161 $x152)))
 (let (($x6 (= $x207 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x109 (concat ?x112 (concat ?x96 ?x126)))))
 (let (($x117 (= input.dst.llvm-%val ?x127)))
 (let ((?x27 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x27)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x108 $x107)))
 (let (($x98 (and $x123 $x129)))
 (let (($x118 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x118 $x98)))
 (let (($x84 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x119 (and (and (and $x15 $x84) $x125) $x117)))
 (let (($x13 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x121 (and $x13 $x119)))
 (let ((?x124 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x54 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x56 (and (and (and (and true (= ?x37 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x66 (_ bv1 8))) (= ?x54 (_ bv1 8)))))
 (let (($x141 (and (and (and (and $x56 (= ?x88 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x124) (_ bv1 8)))))
 (let (($x32 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x144 (=> $x32 (or false (or false $x141)))))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x138 (or $x74 $x144)))
 (let ((?x53 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x133 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x75 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x53 (bvsub ?x53 (_ bv4 32))) (bvult ?x53 (bvsub ?x53 (_ bv4 32))))))
 (let (($x7 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x128 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x46 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x128) (bvult input.dst.llvm-%call.Lentry%2%d ?x128))))
 (let (($x42 (and true $x46)))
 (let (($x71 (and $x46 $x42)))
 (let (($x135 (and (and (and $x42 $x71) $x7) $x75)))
 (let (($x146 (and (and (and $x135 $x133) $x138) $x121)))
 (let (($x10 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x124)))
 (let (($x47 (or false $x10)))
 (let (($x72 (or $x74 $x47)))
 (let (($x147 (and $x72 $x146)))
 (let (($x148 (= $x147 true)))
 (let (($x162 (= $x148 true)))
 (let (($x159 (= $x162 true)))
 (let (($x12 (and $x159 $x6)))
 (let (($x173 (=> $x12 $x158)))
 (let (($x68 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x52 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x51 $x52) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x68 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x89 (= true false)))
 (let (($x93 (= $x89 true)))
 (let (($x61 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x86 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x54 (= $x86 $x61)))
 (let (($x64 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x39 (=> $x64 $x54)))
 (let (($x37 (= (_ bv0 32) (_ bv0 32))))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x58 (= $x59 $x37)))
 (let (($x73 (=> $x64 $x58)))
 (let (($x65 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x67 (=> $x64 $x65)))
 (let (($x9 (= $x64 $x61)))
 (let (($x105 (= false false)))
 (let (($x20 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x69 (=> $x20 $x105)))
 (let (($x30 (= $x20 $x37)))
 (let (($x77 (and (and (and (and (and $x30 $x69) $x9) $x67) $x73) $x39)))
 (let (($x78 (= $x77 true)))
 (let ((?x75 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x75)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x35 $x136)))
 (let (($x122 (and $x40 $x135)))
 (let (($x14 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x14 $x122)))
 (let (($x8 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x130 (and $x55 $x133)))
 (let (($x134 (= $x130 true)))
 (let (($x11 (= $x134 true)))
 (let (($x18 (= $x11 true)))
 (let ((?x36 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x36)))
 (let (($x21 (= ?x52 input.dst.llvm-%val)))
 (let (($x17 (= $x21 true)))
 (let (($x47 (= $x17 true)))
 (let (($x23 (and $x47 $x18)))
 (let (($x79 (and $x23 $x78)))
 (let (($x80 (=> $x79 $x93)))
 (let (($x10 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x95 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x74 $x95) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x10 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x89 (= true false)))
 (let (($x93 (= $x89 true)))
 (let (($x61 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x86 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x54 (= $x86 $x61)))
 (let (($x64 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x39 (=> $x64 $x54)))
 (let (($x37 (= (_ bv0 32) (_ bv0 32))))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x58 (= $x59 $x37)))
 (let (($x73 (=> $x64 $x58)))
 (let (($x65 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x67 (=> $x64 $x65)))
 (let (($x9 (= $x64 $x61)))
 (let (($x105 (= false false)))
 (let (($x20 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x69 (=> $x20 $x105)))
 (let (($x30 (= $x20 $x37)))
 (let (($x77 (and (and (and (and (and $x30 $x69) $x9) $x67) $x73) $x39)))
 (let (($x78 (= $x77 true)))
 (let ((?x75 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x75)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x35 $x136)))
 (let (($x122 (and $x40 $x135)))
 (let (($x14 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x14 $x122)))
 (let (($x8 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x130 (and $x55 $x133)))
 (let (($x134 (= $x130 true)))
 (let (($x11 (= $x134 true)))
 (let (($x18 (= $x11 true)))
 (let ((?x36 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x36)))
 (let (($x21 (= ?x52 input.dst.llvm-%val)))
 (let (($x17 (= $x21 true)))
 (let (($x47 (= $x17 true)))
 (let (($x23 (and $x47 $x18)))
 (let (($x79 (and $x23 $x78)))
 (let (($x80 (=> $x79 $x93)))
 (let (($x10 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x95 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x74 $x95) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x10 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x90 (= true false)))
 (let (($x137 (= $x90 true)))
 (let (($x67 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x56 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x54 (and $x56 $x67)))
 (let (($x39 (not $x54)))
 (let (($x59 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x92 (and $x56 $x59)))
 (let (($x86 (not $x92)))
 (let (($x64 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x58 (= $x59 $x64)))
 (let (($x73 (=> $x56 $x58)))
 (let (($x37 (= (_ bv0 32) (_ bv0 32))))
 (let (($x88 (= $x67 $x37)))
 (let (($x66 (=> $x56 $x88)))
 (let (($x44 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x43 (=> $x56 $x44)))
 (let (($x61 (= $x56 $x64)))
 (let (($x105 (= false false)))
 (let (($x20 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x69 (=> $x20 $x105)))
 (let (($x30 (= $x20 $x37)))
 (let (($x80 (and (and (and (and (and (and $x30 $x69) $x61) $x43) $x66) $x73) $x86)))
 (let (($x81 (and $x80 $x39)))
 (let (($x82 (= $x81 true)))
 (let ((?x75 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x75)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x35 $x136)))
 (let (($x122 (and $x40 $x135)))
 (let (($x28 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x28 $x122)))
 (let (($x70 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x130 (and $x14 $x133)))
 (let (($x134 (= $x130 true)))
 (let (($x11 (= $x134 true)))
 (let (($x18 (= $x11 true)))
 (let ((?x38 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x38)))
 (let (($x34 (= ?x68 input.dst.llvm-%val)))
 (let (($x124 (= $x34 true)))
 (let (($x47 (= $x124 true)))
 (let (($x23 (and $x47 $x18)))
 (let (($x94 (and $x23 $x82)))
 (let (($x16 (=> $x94 $x137)))
 (let (($x17 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x36 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x52 $x36) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x17 (not $x16))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x90 (= true false)))
 (let (($x137 (= $x90 true)))
 (let (($x67 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x56 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x54 (and $x56 $x67)))
 (let (($x39 (not $x54)))
 (let (($x59 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x92 (and $x56 $x59)))
 (let (($x86 (not $x92)))
 (let (($x64 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x58 (= $x59 $x64)))
 (let (($x73 (=> $x56 $x58)))
 (let (($x37 (= (_ bv0 32) (_ bv0 32))))
 (let (($x88 (= $x67 $x37)))
 (let (($x66 (=> $x56 $x88)))
 (let (($x44 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x43 (=> $x56 $x44)))
 (let (($x61 (= $x56 $x64)))
 (let (($x105 (= false false)))
 (let (($x20 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x69 (=> $x20 $x105)))
 (let (($x30 (= $x20 $x37)))
 (let (($x80 (and (and (and (and (and (and $x30 $x69) $x61) $x43) $x66) $x73) $x86)))
 (let (($x81 (and $x80 $x39)))
 (let (($x82 (= $x81 true)))
 (let ((?x75 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x75)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x35 $x136)))
 (let (($x122 (and $x40 $x135)))
 (let (($x28 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x28 $x122)))
 (let (($x70 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x130 (and $x14 $x133)))
 (let (($x134 (= $x130 true)))
 (let (($x11 (= $x134 true)))
 (let (($x18 (= $x11 true)))
 (let ((?x38 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x38)))
 (let (($x34 (= ?x68 input.dst.llvm-%val)))
 (let (($x124 (= $x34 true)))
 (let (($x47 (= $x124 true)))
 (let (($x23 (and $x47 $x18)))
 (let (($x94 (and $x23 $x82)))
 (let (($x16 (=> $x94 $x137)))
 (let (($x17 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x36 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x52 $x36) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x17 (not $x16))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x161 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let ((?x199 ((_ extract 0 0) ?x161)))
 (let (($x152 (= (_ bv1 1) ?x199)))
 (let (($x207 (= $x152 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x208 (= $x166 $x154)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (=> $x155 $x208)))
 (let (($x148 (= (_ bv0 32) (_ bv0 32))))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x151 (= $x150 $x148)))
 (let (($x204 (=> $x155 $x151)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x170 (=> $x155 $x163)))
 (let (($x177 (= $x155 $x154)))
 (let (($x159 (= false false)))
 (let (($x147 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x168 (=> $x147 $x159)))
 (let (($x162 (= $x147 $x148)))
 (let (($x201 (and (and (and (and (and $x162 $x168) $x177) $x170) $x204) $x178)))
 (let (($x212 (= $x201 true)))
 (let ((?x111 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x111)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x113 $x110)))
 (let (($x126 (and $x112 $x96)))
 (let (($x118 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x118 $x126)))
 (let (($x129 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x129)))))
 (let (($x114 (and $x97 $x115)))
 (let (($x127 (= $x114 true)))
 (let (($x117 (= $x127 true)))
 (let (($x119 (= $x117 true)))
 (let ((?x102 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x102)))
 (let (($x15 (= ?x103 input.dst.llvm-%val)))
 (let (($x83 (= $x15 true)))
 (let (($x84 (= $x83 true)))
 (let ((?x24 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x39 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x69 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= ?x89 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x58 (= ?x93 (_ bv1 8))) (= ?x39 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x24) (_ bv1 8)))))
 (let (($x31 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x25 (=> $x31 (or false (or false $x144)))))
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x23 (or $x48 $x25)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x134 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x75 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x46 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x19 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x8 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x19) (bvult input.dst.llvm-%call.Lentry%2%d ?x19))))
 (let (($x70 (and true $x8)))
 (let (($x7 (and $x8 $x70)))
 (let (($x133 (and (and (and $x70 $x7) $x46) $x75)))
 (let (($x95 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x91 (and (and (and $x95 $x133) $x134) $x23)))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x24)))
 (let (($x87 (or false $x74)))
 (let (($x42 (or $x48 $x87)))
 (let (($x139 (and $x42 $x91)))
 (let (($x45 (= $x139 true)))
 (let (($x85 (= $x45 true)))
 (let (($x100 (= $x85 true)))
 (let (($x116 (and $x100 $x84)))
 (let (($x121 (and $x116 $x119)))
 (let (($x169 (and $x121 $x212)))
 (let (($x6 (=> $x169 $x207)))
 (let (($x57 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x68 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x17 $x68) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x57 (not $x6))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x161 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let ((?x199 ((_ extract 0 0) ?x161)))
 (let (($x152 (= (_ bv1 1) ?x199)))
 (let (($x207 (= $x152 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x208 (= $x166 $x154)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (=> $x155 $x208)))
 (let (($x148 (= (_ bv0 32) (_ bv0 32))))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x151 (= $x150 $x148)))
 (let (($x204 (=> $x155 $x151)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x170 (=> $x155 $x163)))
 (let (($x177 (= $x155 $x154)))
 (let (($x159 (= false false)))
 (let (($x147 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x168 (=> $x147 $x159)))
 (let (($x162 (= $x147 $x148)))
 (let (($x201 (and (and (and (and (and $x162 $x168) $x177) $x170) $x204) $x178)))
 (let (($x212 (= $x201 true)))
 (let ((?x111 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x111)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x113 $x110)))
 (let (($x126 (and $x112 $x96)))
 (let (($x118 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x118 $x126)))
 (let (($x129 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x129)))))
 (let (($x114 (and $x97 $x115)))
 (let (($x127 (= $x114 true)))
 (let (($x117 (= $x127 true)))
 (let (($x119 (= $x117 true)))
 (let ((?x102 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x102)))
 (let (($x15 (= ?x103 input.dst.llvm-%val)))
 (let (($x83 (= $x15 true)))
 (let (($x84 (= $x83 true)))
 (let ((?x24 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x39 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x69 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= ?x89 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x58 (= ?x93 (_ bv1 8))) (= ?x39 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x24) (_ bv1 8)))))
 (let (($x31 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x25 (=> $x31 (or false (or false $x144)))))
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x23 (or $x48 $x25)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x134 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x75 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x46 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x19 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x8 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x19) (bvult input.dst.llvm-%call.Lentry%2%d ?x19))))
 (let (($x70 (and true $x8)))
 (let (($x7 (and $x8 $x70)))
 (let (($x133 (and (and (and $x70 $x7) $x46) $x75)))
 (let (($x95 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x91 (and (and (and $x95 $x133) $x134) $x23)))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x24)))
 (let (($x87 (or false $x74)))
 (let (($x42 (or $x48 $x87)))
 (let (($x139 (and $x42 $x91)))
 (let (($x45 (= $x139 true)))
 (let (($x85 (= $x45 true)))
 (let (($x100 (= $x85 true)))
 (let (($x116 (and $x100 $x84)))
 (let (($x121 (and $x116 $x119)))
 (let (($x169 (and $x121 $x212)))
 (let (($x6 (=> $x169 $x207)))
 (let (($x57 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x68 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x17 $x68) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x57 (not $x6))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3ffefff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x03026800)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x3ffefffe x!0)
                    (ite (bvule #x3ffeffff x!0)
                         (ite (bvule #x3fff0000 x!0) #x3fff0000 #x3ffeffff)
                         #x3ffefffe)
                    #x3ffefffd)))
    (let ((a!2 (ite (bvule #x3ffefffb x!0)
                    (ite (bvule #x3ffefffc x!0)
                         (ite (bvule #x3ffefffd x!0) a!1 #x3ffefffc)
                         #x3ffefffb)
                    #x3ffefffa)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x3ffefff9 x!0)
                         (ite (bvule #x3ffefffa x!0) a!2 #x3ffefff9)
                         #x00000008)
                    #x00000007)))
    (let ((a!4 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000007 x!0) a!3 #x00000005)
                         #x00000004)
                    #x00000002)))
      (ite (bvule #x00000002 x!0) a!4 #x00000000))))))
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3ffefffa) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000002) #x20
    (ite (= x!0 #x3ffefffd) #x01
    (ite (= x!0 #x3ffefffe) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x3ffefffc) #x01
    (ite (= x!0 #x3ffeffff) #x01
    (ite (= x!0 #x3ffefff9) #x01
    (ite (= x!0 #x3fff0000) #x01
    (ite (= x!0 #x3ffefffb) #x01
      #x02))))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!66))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xfe000000)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x452d7668)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x452d766b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x452d7668)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x054dbb2c) #x30
      #xc7))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!66 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x052d366a) #x00
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x452d366a) #x00
    (ite (= x!0 #xc52d766a) #x00
    (ite (= x!0 #xc52d366a) #x00
    (ite (= x!0 #x052d766a) #x00
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x452d3a6a) #x00
    (ite (= x!0 #x852d766a) #x00
    (ite (= x!0 #x452d7669) #x03
    (ite (= x!0 #x452d766b) #x03
    (ite (= x!0 #x452d766a) #x03
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x452d7668) #x03
    (ite (= x!0 #x7ffffffe) #x01
      #xc7)))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x52 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let ((?x158 ((_ extract 0 0) ?x52)))
 (let (($x173 (= (_ bv1 1) ?x158)))
 (let (($x200 (= $x173 true)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (and $x155 $x179)))
 (let (($x201 (not $x178)))
 (let (($x151 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x166 (and $x155 $x151)))
 (let (($x208 (not $x166)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x204 (= $x151 $x154)))
 (let (($x156 (=> $x155 $x204)))
 (let (($x162 (= (_ bv0 32) (_ bv0 32))))
 (let (($x149 (= $x179 $x162)))
 (let (($x150 (=> $x155 $x149)))
 (let (($x205 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x163 (=> $x155 $x205)))
 (let (($x177 (= $x155 $x154)))
 (let (($x168 (= false false)))
 (let (($x148 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x157 (=> $x148 $x168)))
 (let (($x159 (= $x148 $x162)))
 (let (($x152 (and (and (and (and (and (and $x159 $x157) $x177) $x163) $x150) $x156) $x208)))
 (let (($x207 (and $x152 $x201)))
 (let (($x6 (= $x207 true)))
 (let ((?x96 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x96)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x109 $x112)))
 (let (($x115 (and $x111 $x126)))
 (let (($x132 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x132 $x115)))
 (let (($x125 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x125)))))
 (let (($x127 (and $x113 $x114)))
 (let (($x117 (= $x127 true)))
 (let (($x119 (= $x117 true)))
 (let (($x121 (= $x119 true)))
 (let ((?x103 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x103)))
 (let (($x83 (= ?x104 input.dst.llvm-%val)))
 (let (($x84 (= $x83 true)))
 (let (($x116 (= $x84 true)))
 (let ((?x38 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x39 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x18 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= ?x89 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x58 (= ?x93 (_ bv1 8))) (= ?x39 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x38) (_ bv1 8)))))
 (let (($x25 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x23 (=> $x25 (or false (or false $x144)))))
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x20 (or $x71 $x23)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x134 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x40 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x46 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x19 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x19) (bvult input.dst.llvm-%call.Lentry%2%d ?x19))))
 (let (($x7 (and true $x70)))
 (let (($x135 (and $x70 $x7)))
 (let (($x32 (and (and (and $x7 $x135) $x46) $x40)))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x139 (and (and (and $x51 $x32) $x134) $x20)))
 (let (($x124 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x38)))
 (let (($x42 (or false $x124)))
 (let (($x128 (or $x71 $x42)))
 (let (($x45 (and $x128 $x139)))
 (let (($x85 (= $x45 true)))
 (let (($x100 (= $x85 true)))
 (let (($x101 (= $x100 true)))
 (let (($x108 (and $x101 $x116)))
 (let (($x146 (and $x108 $x121)))
 (let (($x12 (and $x146 $x6)))
 (let (($x165 (=> $x12 $x200)))
 (let (($x87 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x48 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x48) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x87 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x52 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let ((?x158 ((_ extract 0 0) ?x52)))
 (let (($x173 (= (_ bv1 1) ?x158)))
 (let (($x200 (= $x173 true)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (and $x155 $x179)))
 (let (($x201 (not $x178)))
 (let (($x151 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x166 (and $x155 $x151)))
 (let (($x208 (not $x166)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x204 (= $x151 $x154)))
 (let (($x156 (=> $x155 $x204)))
 (let (($x162 (= (_ bv0 32) (_ bv0 32))))
 (let (($x149 (= $x179 $x162)))
 (let (($x150 (=> $x155 $x149)))
 (let (($x205 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x163 (=> $x155 $x205)))
 (let (($x177 (= $x155 $x154)))
 (let (($x168 (= false false)))
 (let (($x148 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x157 (=> $x148 $x168)))
 (let (($x159 (= $x148 $x162)))
 (let (($x152 (and (and (and (and (and (and $x159 $x157) $x177) $x163) $x150) $x156) $x208)))
 (let (($x207 (and $x152 $x201)))
 (let (($x6 (= $x207 true)))
 (let ((?x96 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x96)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x109 $x112)))
 (let (($x115 (and $x111 $x126)))
 (let (($x132 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x132 $x115)))
 (let (($x125 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x125)))))
 (let (($x127 (and $x113 $x114)))
 (let (($x117 (= $x127 true)))
 (let (($x119 (= $x117 true)))
 (let (($x121 (= $x119 true)))
 (let ((?x103 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x103)))
 (let (($x83 (= ?x104 input.dst.llvm-%val)))
 (let (($x84 (= $x83 true)))
 (let (($x116 (= $x84 true)))
 (let ((?x38 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x39 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x18 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= ?x89 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x58 (= ?x93 (_ bv1 8))) (= ?x39 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x38) (_ bv1 8)))))
 (let (($x25 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x23 (=> $x25 (or false (or false $x144)))))
 (let (($x71 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x20 (or $x71 $x23)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x134 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x40 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x46 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x19 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x19) (bvult input.dst.llvm-%call.Lentry%2%d ?x19))))
 (let (($x7 (and true $x70)))
 (let (($x135 (and $x70 $x7)))
 (let (($x32 (and (and (and $x7 $x135) $x46) $x40)))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x139 (and (and (and $x51 $x32) $x134) $x20)))
 (let (($x124 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x38)))
 (let (($x42 (or false $x124)))
 (let (($x128 (or $x71 $x42)))
 (let (($x45 (and $x128 $x139)))
 (let (($x85 (= $x45 true)))
 (let (($x100 (= $x85 true)))
 (let (($x101 (= $x100 true)))
 (let (($x108 (and $x101 $x116)))
 (let (($x146 (and $x108 $x121)))
 (let (($x12 (and $x146 $x6)))
 (let (($x165 (=> $x12 $x200)))
 (let (($x87 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x48 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x48) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x87 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3ffefff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x03026800)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x3ffefffe x!0)
                    (ite (bvule #x3ffeffff x!0)
                         (ite (bvule #x3fff0000 x!0) #x3fff0000 #x3ffeffff)
                         #x3ffefffe)
                    #x3ffefffd)))
    (let ((a!2 (ite (bvule #x3ffefffb x!0)
                    (ite (bvule #x3ffefffc x!0)
                         (ite (bvule #x3ffefffd x!0) a!1 #x3ffefffc)
                         #x3ffefffb)
                    #x3ffefffa)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x3ffefff9 x!0)
                         (ite (bvule #x3ffefffa x!0) a!2 #x3ffefff9)
                         #x00000008)
                    #x00000007)))
    (let ((a!4 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000007 x!0) a!3 #x00000005)
                         #x00000004)
                    #x00000002)))
      (ite (bvule #x00000002 x!0) a!4 #x00000000))))))
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3ffefffa) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000002) #x20
    (ite (= x!0 #x3ffefffd) #x01
    (ite (= x!0 #x3ffefffe) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x3ffefffc) #x01
    (ite (= x!0 #x3ffeffff) #x01
    (ite (= x!0 #x3ffefff9) #x01
    (ite (= x!0 #x3fff0000) #x01
    (ite (= x!0 #x3ffefffb) #x01
      #x02))))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!66))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xfe000000)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x452d7668)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x452d766b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x452d7668)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x054dbb2c) #x30
      #xc7))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!66 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x052d366a) #x00
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x452d366a) #x00
    (ite (= x!0 #xc52d766a) #x00
    (ite (= x!0 #xc52d366a) #x00
    (ite (= x!0 #x052d766a) #x00
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x452d3a6a) #x00
    (ite (= x!0 #x852d766a) #x00
    (ite (= x!0 #x452d7669) #x03
    (ite (= x!0 #x452d766b) #x03
    (ite (= x!0 #x452d766a) #x03
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x452d7668) #x03
    (ite (= x!0 #x7ffffffe) #x01
      #xc7)))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x178 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x201 (= $x178 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x150 (= $x149 $x154)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x161 (=> $x155 $x150)))
 (let (($x159 (= (_ bv0 32) (_ bv0 32))))
 (let (($x211 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x170 (= $x211 $x159)))
 (let (($x179 (=> $x155 $x170)))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x205 (=> $x155 $x164)))
 (let (($x177 (= $x155 $x154)))
 (let (($x157 (= false false)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x212 (=> $x162 $x157)))
 (let (($x168 (= $x162 $x159)))
 (let (($x166 (and (and (and (and (and $x168 $x212) $x177) $x205) $x179) $x161)))
 (let (($x208 (= $x166 true)))
 (let ((?x114 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x114)))
 (let (($x119 (= ?x127 input.dst.llvm-%val)))
 (let (($x121 (= $x119 true)))
 (let (($x146 (= $x121 true)))
 (let ((?x113 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x113)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x98 $x97)))
 (let (($x132 (and $x106 $x120)))
 (let (($x104 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x104 $x132)))
 (let (($x107 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x107)))))
 (let (($x110 (and $x129 $x109)))
 (let (($x112 (= $x110 true)))
 (let (($x111 (= $x112 true)))
 (let (($x96 (= $x111 true)))
 (let ((?x5 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x39 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x13 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= ?x89 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x58 (= ?x93 (_ bv1 8))) (= ?x39 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x5) (_ bv1 8)))))
 (let (($x23 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x20 (=> $x23 (or false (or false $x144)))))
 (let (($x24 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x30 (or $x24 $x20)))
 (let ((?x122 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x134 (= (bvand ?x122 (_ bv4294967292 32)) ?x122)))
 (let (($x136 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x122 (bvsub ?x122 (_ bv4 32))) (bvult ?x122 (bvsub ?x122 (_ bv4 32))))))
 (let (($x46 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x19 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x7 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x19) (bvult input.dst.llvm-%call.Lentry%2%d ?x19))))
 (let (($x135 (and true $x7)))
 (let (($x75 (and $x7 $x135)))
 (let (($x37 (and (and (and $x135 $x75) $x46) $x136)))
 (let (($x131 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x45 (and (and (and $x131 $x37) $x134) $x30)))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x5)))
 (let (($x128 (or false $x74)))
 (let (($x142 (or $x24 $x128)))
 (let (($x85 (and $x142 $x45)))
 (let (($x100 (= $x85 true)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x126 (and $x102 $x96)))
 (let (($x147 (and $x126 $x146)))
 (let (($x152 (and $x147 $x208)))
 (let (($x207 (=> $x152 $x201)))
 (let (($x42 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x71 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x60 $x71) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x42 (not $x207))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x178 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x201 (= $x178 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x150 (= $x149 $x154)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x161 (=> $x155 $x150)))
 (let (($x159 (= (_ bv0 32) (_ bv0 32))))
 (let (($x211 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x170 (= $x211 $x159)))
 (let (($x179 (=> $x155 $x170)))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x205 (=> $x155 $x164)))
 (let (($x177 (= $x155 $x154)))
 (let (($x157 (= false false)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x212 (=> $x162 $x157)))
 (let (($x168 (= $x162 $x159)))
 (let (($x166 (and (and (and (and (and $x168 $x212) $x177) $x205) $x179) $x161)))
 (let (($x208 (= $x166 true)))
 (let ((?x114 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x114)))
 (let (($x119 (= ?x127 input.dst.llvm-%val)))
 (let (($x121 (= $x119 true)))
 (let (($x146 (= $x121 true)))
 (let ((?x113 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x113)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x98 $x97)))
 (let (($x132 (and $x106 $x120)))
 (let (($x104 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x104 $x132)))
 (let (($x107 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x107)))))
 (let (($x110 (and $x129 $x109)))
 (let (($x112 (= $x110 true)))
 (let (($x111 (= $x112 true)))
 (let (($x96 (= $x111 true)))
 (let ((?x5 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x39 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x13 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= ?x89 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x58 (= ?x93 (_ bv1 8))) (= ?x39 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x5) (_ bv1 8)))))
 (let (($x23 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x20 (=> $x23 (or false (or false $x144)))))
 (let (($x24 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x30 (or $x24 $x20)))
 (let ((?x122 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x134 (= (bvand ?x122 (_ bv4294967292 32)) ?x122)))
 (let (($x136 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x122 (bvsub ?x122 (_ bv4 32))) (bvult ?x122 (bvsub ?x122 (_ bv4 32))))))
 (let (($x46 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x19 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x7 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x19) (bvult input.dst.llvm-%call.Lentry%2%d ?x19))))
 (let (($x135 (and true $x7)))
 (let (($x75 (and $x7 $x135)))
 (let (($x37 (and (and (and $x135 $x75) $x46) $x136)))
 (let (($x131 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x45 (and (and (and $x131 $x37) $x134) $x30)))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x5)))
 (let (($x128 (or false $x74)))
 (let (($x142 (or $x24 $x128)))
 (let (($x85 (and $x142 $x45)))
 (let (($x100 (= $x85 true)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x126 (and $x102 $x96)))
 (let (($x147 (and $x126 $x146)))
 (let (($x152 (and $x147 $x208)))
 (let (($x207 (=> $x152 $x201)))
 (let (($x42 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x71 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x60 $x71) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x42 (not $x207))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00900400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00400003) #x03
    (ite (= x!0 #x00400001) #x03
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000003) #x01
    (ite (= x!0 #x00400000) #x03
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400001 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) #x00400004 #x00400003)
                         #x00400001)
                    #x00400000)))
    (let ((a!2 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x00000008 x!0)
                         (ite (bvule #x00400000 x!0) a!1 #x00000008)
                         #x00000007)
                    #x00000006)))
    (let ((a!3 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!2 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!3 #x00000002)
                #x00000001)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x2decfff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08b34583)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2decfffe x!0)
                    (ite (bvule #x2decffff x!0)
                         (ite (bvule #x2ded0000 x!0) #x2ded0000 #x2decffff)
                         #x2decfffe)
                    #x2decfffd)))
    (let ((a!2 (ite (bvule #x2decfffb x!0)
                    (ite (bvule #x2decfffc x!0)
                         (ite (bvule #x2decfffd x!0) a!1 #x2decfffc)
                         #x2decfffb)
                    #x2decfffa)))
    (let ((a!3 (ite (bvule #x08b34584 x!0)
                    (ite (bvule #x2decfff9 x!0)
                         (ite (bvule #x2decfffa x!0) a!2 #x2decfff9)
                         #x08b34584)
                    #x08b34583)))
      (ite (bvule #x08b34580 x!0)
           (ite (bvule #x08b34581 x!0)
                (ite (bvule #x08b34583 x!0) a!3 #x08b34581)
                #x08b34580)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2decfffb) #x01
    (ite (= x!0 #x08b34580) #x03
    (ite (= x!0 #x2decfffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x2decfffa) #x01
    (ite (= x!0 #x2decfffd) #x01
    (ite (= x!0 #x08b34581) #x03
    (ite (= x!0 #x08b34583) #x03
    (ite (= x!0 #x2decffff) #x01
    (ite (= x!0 #x2decfff9) #x01
    (ite (= x!0 #x2ded0000) #x01
    (ite (= x!0 #x2decfffc) #x01
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x158 (= $x52 true)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x161 (and $x155 $x156)))
 (let (($x166 (not $x161)))
 (let (($x170 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x149 (and $x155 $x170)))
 (let (($x150 (not $x149)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x179 (= $x170 $x154)))
 (let (($x199 (=> $x155 $x179)))
 (let (($x168 (= (_ bv0 32) (_ bv0 32))))
 (let (($x163 (= $x156 $x168)))
 (let (($x211 (=> $x155 $x163)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x164 (=> $x155 $x169)))
 (let (($x177 (= $x155 $x154)))
 (let (($x212 (= false false)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (=> $x159 $x212)))
 (let (($x157 (= $x159 $x168)))
 (let (($x6 (and (and (and (and (and (and $x157 $x151) $x177) $x164) $x211) $x199) $x150)))
 (let (($x12 (and $x6 $x166)))
 (let (($x10 (= $x12 true)))
 (let ((?x127 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x127)))
 (let (($x121 (= ?x117 input.dst.llvm-%val)))
 (let (($x146 (= $x121 true)))
 (let (($x147 (= $x146 true)))
 (let ((?x120 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x120)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x125 $x106)))
 (let (($x109 (and $x113 $x132)))
 (let (($x27 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x27 $x109)))
 (let (($x118 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x118)))))
 (let (($x112 (and $x98 $x110)))
 (let (($x111 (= $x112 true)))
 (let (($x96 (= $x111 true)))
 (let (($x126 (= $x96 true)))
 (let ((?x68 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x39 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x91 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= ?x89 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x58 (= ?x93 (_ bv1 8))) (= ?x39 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x68) (_ bv1 8)))))
 (let (($x20 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x30 (=> $x20 (or false (or false $x144)))))
 (let (($x38 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x105 (or $x38 $x30)))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x134 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x53 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x46 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x19 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x135 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x19) (bvult input.dst.llvm-%call.Lentry%2%d ?x19))))
 (let (($x75 (and true $x135)))
 (let (($x40 (and $x135 $x75)))
 (let (($x31 (and (and (and $x75 $x40) $x46) $x53)))
 (let (($x26 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x85 (and (and (and $x26 $x31) $x134) $x105)))
 (let (($x124 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x68)))
 (let (($x142 (or false $x124)))
 (let (($x95 (or $x38 $x142)))
 (let (($x100 (and $x95 $x85)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x15 (= $x102 true)))
 (let (($x115 (and $x15 $x126)))
 (let (($x148 (and $x115 $x147)))
 (let (($x172 (and $x148 $x10)))
 (let (($x173 (=> $x172 $x158)))
 (let (($x128 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x17 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x128 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x158 (= $x52 true)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x161 (and $x155 $x156)))
 (let (($x166 (not $x161)))
 (let (($x170 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x149 (and $x155 $x170)))
 (let (($x150 (not $x149)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x179 (= $x170 $x154)))
 (let (($x199 (=> $x155 $x179)))
 (let (($x168 (= (_ bv0 32) (_ bv0 32))))
 (let (($x163 (= $x156 $x168)))
 (let (($x211 (=> $x155 $x163)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x164 (=> $x155 $x169)))
 (let (($x177 (= $x155 $x154)))
 (let (($x212 (= false false)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (=> $x159 $x212)))
 (let (($x157 (= $x159 $x168)))
 (let (($x6 (and (and (and (and (and (and $x157 $x151) $x177) $x164) $x211) $x199) $x150)))
 (let (($x12 (and $x6 $x166)))
 (let (($x10 (= $x12 true)))
 (let ((?x127 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x127)))
 (let (($x121 (= ?x117 input.dst.llvm-%val)))
 (let (($x146 (= $x121 true)))
 (let (($x147 (= $x146 true)))
 (let ((?x120 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x120)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x125 $x106)))
 (let (($x109 (and $x113 $x132)))
 (let (($x27 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x27 $x109)))
 (let (($x118 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x118)))))
 (let (($x112 (and $x98 $x110)))
 (let (($x111 (= $x112 true)))
 (let (($x96 (= $x111 true)))
 (let (($x126 (= $x96 true)))
 (let ((?x68 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x39 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x58 (and (and (and (and true (= ?x91 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= ?x89 (_ bv1 8)))))
 (let (($x144 (and (and (and (and $x58 (= ?x93 (_ bv1 8))) (= ?x39 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x68) (_ bv1 8)))))
 (let (($x20 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x30 (=> $x20 (or false (or false $x144)))))
 (let (($x38 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x105 (or $x38 $x30)))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x134 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x53 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x46 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x19 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x135 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x19) (bvult input.dst.llvm-%call.Lentry%2%d ?x19))))
 (let (($x75 (and true $x135)))
 (let (($x40 (and $x135 $x75)))
 (let (($x31 (and (and (and $x75 $x40) $x46) $x53)))
 (let (($x26 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x85 (and (and (and $x26 $x31) $x134) $x105)))
 (let (($x124 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x68)))
 (let (($x142 (or false $x124)))
 (let (($x95 (or $x38 $x142)))
 (let (($x100 (and $x95 $x85)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let (($x15 (= $x102 true)))
 (let (($x115 (and $x15 $x126)))
 (let (($x148 (and $x115 $x147)))
 (let (($x172 (and $x148 $x10)))
 (let (($x173 (=> $x172 $x158)))
 (let (($x128 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x17 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x128 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00900400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00400003) #x03
    (ite (= x!0 #x00400001) #x03
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000003) #x01
    (ite (= x!0 #x00400000) #x03
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400001 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) #x00400004 #x00400003)
                         #x00400001)
                    #x00400000)))
    (let ((a!2 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x00000008 x!0)
                         (ite (bvule #x00400000 x!0) a!1 #x00000008)
                         #x00000007)
                    #x00000006)))
    (let ((a!3 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!2 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!3 #x00000002)
                #x00000001)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x2decfff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08b34583)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2decfffe x!0)
                    (ite (bvule #x2decffff x!0)
                         (ite (bvule #x2ded0000 x!0) #x2ded0000 #x2decffff)
                         #x2decfffe)
                    #x2decfffd)))
    (let ((a!2 (ite (bvule #x2decfffb x!0)
                    (ite (bvule #x2decfffc x!0)
                         (ite (bvule #x2decfffd x!0) a!1 #x2decfffc)
                         #x2decfffb)
                    #x2decfffa)))
    (let ((a!3 (ite (bvule #x08b34584 x!0)
                    (ite (bvule #x2decfff9 x!0)
                         (ite (bvule #x2decfffa x!0) a!2 #x2decfff9)
                         #x08b34584)
                    #x08b34583)))
      (ite (bvule #x08b34580 x!0)
           (ite (bvule #x08b34581 x!0)
                (ite (bvule #x08b34583 x!0) a!3 #x08b34581)
                #x08b34580)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2decfffb) #x01
    (ite (= x!0 #x08b34580) #x03
    (ite (= x!0 #x2decfffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x2decfffa) #x01
    (ite (= x!0 #x2decfffd) #x01
    (ite (= x!0 #x08b34581) #x03
    (ite (= x!0 #x08b34583) #x03
    (ite (= x!0 #x2decffff) #x01
    (ite (= x!0 #x2decfff9) #x01
    (ite (= x!0 #x2ded0000) #x01
    (ite (= x!0 #x2decfffc) #x01
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var379X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var379X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var379X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var379X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x186 (concat ?x190 (select input.dst.llvm-mem (bvadd input.ind-%var379X (_ bv4 32))))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var379X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var379X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x217 (concat ?x191 (concat ?x187 ?x186))))
 (let (($x228 (= input.ind-%var379X.2.1 ?x217)))
 (let (($x99 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x194 (=> $x99 $x228)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd input.ind-%var379X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var379X))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.ind-%var379X (_ bv2 32))) ?x181)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd input.ind-%var379X (_ bv3 32))) ?x210)))
 (let (($x184 (= input.ind-%var379X.2.0 ?x182)))
 (let (($x215 (=> $x99 $x184)))
 (let ((?x12 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x158 (= (_ bv0 32) ?x12)))
 (let ((?x173 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x173 (_ bv1 32))))
 (let (($x22 (= $x99 $x180)))
 (let (($x151 (= false false)))
 (let (($x52 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x34 (=> $x52 $x151)))
 (let (($x196 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x12) (= $x52 (= ?x173 (_ bv0 32)))) $x34)))
 (let (($x214 (and (and (and $x196 $x22) $x215) $x194)))
 (let (($x161 (= true true)))
 (let (($x224 (and $x161 $x214)))
 (let (($x230 (= $x224 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x211 (= $x163 $x154)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x201 (=> $x155 $x211)))
 (let (($x157 (= (_ bv0 32) (_ bv0 32))))
 (let (($x178 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x205 (= $x178 $x157)))
 (let (($x156 (=> $x155 $x205)))
 (let (($x204 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x169 (=> $x155 $x204)))
 (let (($x177 (= $x155 $x154)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x208 (=> $x168 $x151)))
 (let (($x212 (= $x168 $x157)))
 (let (($x149 (and (and (and (and (and $x212 $x208) $x177) $x169) $x156) $x201)))
 (let (($x150 (= $x149 true)))
 (let ((?x91 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x123 (and (and (and (and true (= ?x144 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= ?x108 (_ bv1 8)))))
 (let (($x96 (and (and (and (and $x123 (= ?x129 (_ bv1 8))) (= ?x125 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x91) (_ bv1 8)))))
 (let (($x114 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x127 (=> $x114 (or false (or false $x96)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x137 (or $x18 $x127)))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x90 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x54 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x9 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x9) (bvult input.dst.llvm-%call.Lentry%2%d ?x9))))
 (let (($x67 (and true $x65)))
 (let (($x88 (and $x65 $x67)))
 (let (($x82 (and (and (and $x67 $x88) $x59) $x54)))
 (let (($x61 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x119 (and (and (and $x61 $x82) $x90) $x137)))
 (let (($x139 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x91)))
 (let (($x77 (or false $x139)))
 (let (($x56 (or $x18 $x77)))
 (let (($x121 (and $x56 $x119)))
 (let (($x146 (= $x121 true)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x35)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x37 $x133)))
 (let (($x53 (and $x28 $x76)))
 (let (($x21 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x21 $x53)))
 (let (($x40 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x40)))))
 (let (($x25 (and $x46 $x31)))
 (let (($x130 (= $x25 true)))
 (let (($x134 (= $x130 true)))
 (let (($x45 (= $x134 true)))
 (let ((?x5 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x5)))
 (let (($x48 (= ?x29 input.dst.llvm-%val)))
 (let (($x74 (= $x48 true)))
 (let (($x95 (= $x74 true)))
 (let (($x69 (and $x95 $x45)))
 (let (($x162 (and $x69 $x148)))
 (let (($x6 (and $x162 $x150)))
 (let (($x197 (=> $x6 $x230)))
 (let (($x142 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x38 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x38) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x142 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var379X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var379X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var379X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var379X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x186 (concat ?x190 (select input.dst.llvm-mem (bvadd input.ind-%var379X (_ bv4 32))))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var379X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var379X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x217 (concat ?x191 (concat ?x187 ?x186))))
 (let (($x228 (= input.ind-%var379X.2.1 ?x217)))
 (let (($x99 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x194 (=> $x99 $x228)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd input.ind-%var379X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var379X))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.ind-%var379X (_ bv2 32))) ?x181)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd input.ind-%var379X (_ bv3 32))) ?x210)))
 (let (($x184 (= input.ind-%var379X.2.0 ?x182)))
 (let (($x215 (=> $x99 $x184)))
 (let ((?x12 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x158 (= (_ bv0 32) ?x12)))
 (let ((?x173 (ite $x158 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x173 (_ bv1 32))))
 (let (($x22 (= $x99 $x180)))
 (let (($x151 (= false false)))
 (let (($x52 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x34 (=> $x52 $x151)))
 (let (($x196 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x12) (= $x52 (= ?x173 (_ bv0 32)))) $x34)))
 (let (($x214 (and (and (and $x196 $x22) $x215) $x194)))
 (let (($x161 (= true true)))
 (let (($x224 (and $x161 $x214)))
 (let (($x230 (= $x224 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x211 (= $x163 $x154)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x201 (=> $x155 $x211)))
 (let (($x157 (= (_ bv0 32) (_ bv0 32))))
 (let (($x178 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x205 (= $x178 $x157)))
 (let (($x156 (=> $x155 $x205)))
 (let (($x204 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x169 (=> $x155 $x204)))
 (let (($x177 (= $x155 $x154)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x208 (=> $x168 $x151)))
 (let (($x212 (= $x168 $x157)))
 (let (($x149 (and (and (and (and (and $x212 $x208) $x177) $x169) $x156) $x201)))
 (let (($x150 (= $x149 true)))
 (let ((?x91 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x123 (and (and (and (and true (= ?x144 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= ?x108 (_ bv1 8)))))
 (let (($x96 (and (and (and (and $x123 (= ?x129 (_ bv1 8))) (= ?x125 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x91) (_ bv1 8)))))
 (let (($x114 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x127 (=> $x114 (or false (or false $x96)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x137 (or $x18 $x127)))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x90 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x54 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x9 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x9) (bvult input.dst.llvm-%call.Lentry%2%d ?x9))))
 (let (($x67 (and true $x65)))
 (let (($x88 (and $x65 $x67)))
 (let (($x82 (and (and (and $x67 $x88) $x59) $x54)))
 (let (($x61 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x119 (and (and (and $x61 $x82) $x90) $x137)))
 (let (($x139 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x91)))
 (let (($x77 (or false $x139)))
 (let (($x56 (or $x18 $x77)))
 (let (($x121 (and $x56 $x119)))
 (let (($x146 (= $x121 true)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x35)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x37 $x133)))
 (let (($x53 (and $x28 $x76)))
 (let (($x21 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x21 $x53)))
 (let (($x40 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x40)))))
 (let (($x25 (and $x46 $x31)))
 (let (($x130 (= $x25 true)))
 (let (($x134 (= $x130 true)))
 (let (($x45 (= $x134 true)))
 (let ((?x5 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x5)))
 (let (($x48 (= ?x29 input.dst.llvm-%val)))
 (let (($x74 (= $x48 true)))
 (let (($x95 (= $x74 true)))
 (let (($x69 (and $x95 $x45)))
 (let (($x162 (and $x69 $x148)))
 (let (($x6 (and $x162 $x150)))
 (let (($x197 (=> $x6 $x230)))
 (let (($x142 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x38 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x38) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x142 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00e53054)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var379X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var379X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var379X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00e53057)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00e53054)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000021) #x01
    (ite (= x!0 #x00e53057) #x03
    (ite (= x!0 #x00e53055) #x03
    (ite (= x!0 #x00000024) #x01
    (ite (= x!0 #x00000025) #x01
    (ite (= x!0 #x00000023) #x01
    (ite (= x!0 #x00e53054) #x03
    (ite (= x!0 #x00000020) #x01
    (ite (= x!0 #x00000026) #x01
    (ite (= x!0 #x00000027) #x01
    (ite (= x!0 #x00000022) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00e53055 x!0)
                    (ite (bvule #x00e53057 x!0)
                         (ite (bvule #x00e53058 x!0) #x00e53058 #x00e53057)
                         #x00e53055)
                    #x00e53054)))
    (let ((a!2 (ite (bvule #x00000026 x!0)
                    (ite (bvule #x00000027 x!0)
                         (ite (bvule #x00e53054 x!0) a!1 #x00000027)
                         #x00000026)
                    #x00000025)))
    (let ((a!3 (ite (bvule #x00000023 x!0)
                    (ite (bvule #x00000024 x!0)
                         (ite (bvule #x00000025 x!0) a!2 #x00000024)
                         #x00000023)
                    #x00000022)))
      (ite (bvule #x00000020 x!0)
           (ite (bvule #x00000021 x!0)
                (ite (bvule #x00000022 x!0) a!3 #x00000021)
                #x00000020)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!17))
  (define-fun input.ind-%var379X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x13afc188)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3ffffff9)
  (define-fun input.ind-%var379X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var379X () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x13afc18b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x13afc188)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!18 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x3ffffffe x!0)
                    (ite (bvule #x3fffffff x!0)
                         (ite (bvule #x40000000 x!0) #x40000000 #x3fffffff)
                         #x3ffffffe)
                    #x3ffffffd)))
    (let ((a!2 (ite (bvule #x3ffffffb x!0)
                    (ite (bvule #x3ffffffc x!0)
                         (ite (bvule #x3ffffffd x!0) a!1 #x3ffffffc)
                         #x3ffffffb)
                    #x3ffffffa)))
    (let ((a!3 (ite (bvule #x13afc18c x!0)
                    (ite (bvule #x3ffffff9 x!0)
                         (ite (bvule #x3ffffffa x!0) a!2 #x3ffffff9)
                         #x13afc18c)
                    #x13afc18b)))
      (ite (bvule #x13afc188 x!0)
           (ite (bvule #x13afc189 x!0)
                (ite (bvule #x13afc18b x!0) a!3 #x13afc189)
                #x13afc188)
           #x00000000)))))
  (define-fun k!17!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3ffffffb) #x01
    (ite (= x!0 #x13afc188) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x3ffffffe) #x01
    (ite (= x!0 #x3ffffffa) #x01
    (ite (= x!0 #x3ffffffd) #x01
    (ite (= x!0 #x13afc189) #x03
    (ite (= x!0 #x13afc18b) #x03
    (ite (= x!0 #x3fffffff) #x01
    (ite (= x!0 #x3ffffff9) #x01
    (ite (= x!0 #x40000000) #x01
    (ite (= x!0 #x3ffffffc) #x01
      #x02)))))))))))))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!17!19 (k!18 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var409X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var409X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var409X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let ((?x206 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x183 (concat ?x206 (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv4 32))))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x63 (concat ?x218 (concat ?x221 ?x183))))
 (let (($x222 (= input.ind-%var409X.2.1 ?x63)))
 (let (($x210 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x225 (=> $x210 $x222)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var409X))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv2 32))) ?x187)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv3 32))) ?x231)))
 (let (($x228 (= input.ind-%var409X.2.0 ?x217)))
 (let (($x194 (=> $x210 $x228)))
 (let (($x208 (= false false)))
 (let (($x176 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x215 (=> $x176 $x208)))
 (let ((?x62 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x209 (= (_ bv0 32) ?x62)))
 (let ((?x33 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x33 (_ bv1 32))))
 (let (($x184 (= $x210 $x182)))
 (let (($x227 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x62) (= $x176 (= ?x33 (_ bv0 32)))) $x184)))
 (let (($x265 (and (and (and $x227 $x215) $x194) $x225)))
 (let (($x202 (= true true)))
 (let (($x234 (and $x202 $x265)))
 (let (($x235 (= $x234 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x52 (= $x172 $x154)))
 (let (($x205 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x201 (and $x155 $x205)))
 (let (($x158 (=> $x201 $x52)))
 (let (($x212 (= (_ bv0 32) (_ bv0 32))))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x12 (= $x166 $x212)))
 (let (($x10 (=> $x201 $x12)))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x6 (=> $x201 $x150)))
 (let (($x199 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x163 (and $x155 $x199)))
 (let (($x211 (=> $x163 $x208)))
 (let (($x156 (= $x205 $x154)))
 (let (($x207 (=> $x155 $x156)))
 (let (($x164 (= $x199 $x212)))
 (let (($x178 (=> $x155 $x164)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x204 (=> $x155 $x152)))
 (let (($x177 (= $x155 $x154)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x170 (=> $x157 $x208)))
 (let (($x151 (= $x157 $x212)))
 (let (($x196 (and (and (and (and (and (and $x151 $x170) $x177) $x204) $x178) $x207) $x211)))
 (let (($x22 (and (and (and $x196 $x6) $x10) $x158)))
 (let (($x223 (= $x22 true)))
 (let ((?x139 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x123 (and (and (and (and true (= ?x144 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= ?x108 (_ bv1 8)))))
 (let (($x96 (and (and (and (and $x123 (= ?x129 (_ bv1 8))) (= ?x125 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x139) (_ bv1 8)))))
 (let (($x127 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x137 (=> $x127 (or false (or false $x96)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x117 (or $x18 $x137)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x90 (= (bvand ?x58 (_ bv4294967292 32)) ?x58)))
 (let (($x80 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x58 (bvsub ?x58 (_ bv4 32))) (bvult ?x58 (bvsub ?x58 (_ bv4 32))))))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x9 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x9) (bvult input.dst.llvm-%call.Lentry%2%d ?x9))))
 (let (($x88 (and true $x67)))
 (let (($x39 (and $x67 $x88)))
 (let (($x16 (and (and (and $x88 $x39) $x59) $x80)))
 (let (($x44 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x121 (and (and (and $x44 $x16) $x90) $x117)))
 (let (($x77 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x139)))
 (let (($x56 (or false $x77)))
 (let (($x64 (or $x18 $x56)))
 (let (($x146 (and $x64 $x121)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x162 (= $x148 true)))
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x35)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x37 $x133)))
 (let (($x53 (and $x28 $x76)))
 (let (($x14 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x14 $x53)))
 (let (($x136 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x136)))))
 (let (($x25 (and $x21 $x31)))
 (let (($x130 (= $x25 true)))
 (let (($x134 (= $x130 true)))
 (let (($x45 (= $x134 true)))
 (let ((?x68 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x68)))
 (let (($x71 (= ?x57 input.dst.llvm-%val)))
 (let (($x124 (= $x71 true)))
 (let (($x95 (= $x124 true)))
 (let (($x69 (and $x95 $x45)))
 (let (($x159 (and $x69 $x162)))
 (let (($x167 (and $x159 $x223)))
 (let (($x236 (=> $x167 $x235)))
 (let (($x74 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x5 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x29 $x5) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x74 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var409X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var409X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var409X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let ((?x206 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x183 (concat ?x206 (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv4 32))))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x63 (concat ?x218 (concat ?x221 ?x183))))
 (let (($x222 (= input.ind-%var409X.2.1 ?x63)))
 (let (($x210 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x225 (=> $x210 $x222)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var409X))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv2 32))) ?x187)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv3 32))) ?x231)))
 (let (($x228 (= input.ind-%var409X.2.0 ?x217)))
 (let (($x194 (=> $x210 $x228)))
 (let (($x208 (= false false)))
 (let (($x176 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x215 (=> $x176 $x208)))
 (let ((?x62 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x209 (= (_ bv0 32) ?x62)))
 (let ((?x33 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x33 (_ bv1 32))))
 (let (($x184 (= $x210 $x182)))
 (let (($x227 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x62) (= $x176 (= ?x33 (_ bv0 32)))) $x184)))
 (let (($x265 (and (and (and $x227 $x215) $x194) $x225)))
 (let (($x202 (= true true)))
 (let (($x234 (and $x202 $x265)))
 (let (($x235 (= $x234 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x52 (= $x172 $x154)))
 (let (($x205 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x201 (and $x155 $x205)))
 (let (($x158 (=> $x201 $x52)))
 (let (($x212 (= (_ bv0 32) (_ bv0 32))))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x12 (= $x166 $x212)))
 (let (($x10 (=> $x201 $x12)))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x6 (=> $x201 $x150)))
 (let (($x199 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x163 (and $x155 $x199)))
 (let (($x211 (=> $x163 $x208)))
 (let (($x156 (= $x205 $x154)))
 (let (($x207 (=> $x155 $x156)))
 (let (($x164 (= $x199 $x212)))
 (let (($x178 (=> $x155 $x164)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x204 (=> $x155 $x152)))
 (let (($x177 (= $x155 $x154)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x170 (=> $x157 $x208)))
 (let (($x151 (= $x157 $x212)))
 (let (($x196 (and (and (and (and (and (and $x151 $x170) $x177) $x204) $x178) $x207) $x211)))
 (let (($x22 (and (and (and $x196 $x6) $x10) $x158)))
 (let (($x223 (= $x22 true)))
 (let ((?x139 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x123 (and (and (and (and true (= ?x144 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= ?x108 (_ bv1 8)))))
 (let (($x96 (and (and (and (and $x123 (= ?x129 (_ bv1 8))) (= ?x125 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x139) (_ bv1 8)))))
 (let (($x127 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x137 (=> $x127 (or false (or false $x96)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x117 (or $x18 $x137)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x90 (= (bvand ?x58 (_ bv4294967292 32)) ?x58)))
 (let (($x80 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x58 (bvsub ?x58 (_ bv4 32))) (bvult ?x58 (bvsub ?x58 (_ bv4 32))))))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x9 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x9) (bvult input.dst.llvm-%call.Lentry%2%d ?x9))))
 (let (($x88 (and true $x67)))
 (let (($x39 (and $x67 $x88)))
 (let (($x16 (and (and (and $x88 $x39) $x59) $x80)))
 (let (($x44 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x121 (and (and (and $x44 $x16) $x90) $x117)))
 (let (($x77 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x139)))
 (let (($x56 (or false $x77)))
 (let (($x64 (or $x18 $x56)))
 (let (($x146 (and $x64 $x121)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let (($x162 (= $x148 true)))
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x35)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x37 $x133)))
 (let (($x53 (and $x28 $x76)))
 (let (($x14 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x14 $x53)))
 (let (($x136 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x136)))))
 (let (($x25 (and $x21 $x31)))
 (let (($x130 (= $x25 true)))
 (let (($x134 (= $x130 true)))
 (let (($x45 (= $x134 true)))
 (let ((?x68 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x68)))
 (let (($x71 (= ?x57 input.dst.llvm-%val)))
 (let (($x124 (= $x71 true)))
 (let (($x95 (= $x124 true)))
 (let (($x69 (and $x95 $x45)))
 (let (($x159 (and $x69 $x162)))
 (let (($x167 (and $x159 $x223)))
 (let (($x236 (=> $x167 $x235)))
 (let (($x74 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x5 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x29 $x5) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x74 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!17))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.ind-%var409X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6f62375c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3ffffff9)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var409X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var409X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6f62375f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6f62375c)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!18 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x6f62375f x!0)
                    (ite (bvule #x6f623760 x!0)
                         (ite (bvule #xf77ad806 x!0) #xf77ad806 #x6f623760)
                         #x6f62375f)
                    #x6f62375d)))
    (let ((a!2 (ite (bvule #x40000000 x!0)
                    (ite (bvule #x6f62375c x!0)
                         (ite (bvule #x6f62375d x!0) a!1 #x6f62375c)
                         #x40000000)
                    #x3fffffff)))
    (let ((a!3 (ite (bvule #x3ffffffd x!0)
                    (ite (bvule #x3ffffffe x!0)
                         (ite (bvule #x3fffffff x!0) a!2 #x3ffffffe)
                         #x3ffffffd)
                    #x3ffffffc)))
    (let ((a!4 (ite (bvule #x3ffffffa x!0)
                    (ite (bvule #x3ffffffb x!0)
                         (ite (bvule #x3ffffffc x!0) a!3 #x3ffffffb)
                         #x3ffffffa)
                    #x3ffffff9)))
      (ite (bvule #x3ffffff9 x!0) a!4 #x00000000))))))
  (define-fun k!17!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3ffffffb) #x01
    (ite (= x!0 #x6f62375c) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x3ffffffe) #x01
    (ite (= x!0 #x3ffffffa) #x01
    (ite (= x!0 #x3ffffffd) #x01
    (ite (= x!0 #x6f62375d) #x03
    (ite (= x!0 #x6f62375f) #x03
    (ite (= x!0 #x3fffffff) #x01
    (ite (= x!0 #xf77ad806) #x00
    (ite (= x!0 #x3ffffff9) #x01
    (ite (= x!0 #x40000000) #x01
    (ite (= x!0 #x3ffffffc) #x01
      #x02))))))))))))))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!17!19 (k!18 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1331f310)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var409X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var409X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var409X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1331f313)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1331f310)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001001) #x01
    (ite (= x!0 #x1331f313) #x03
    (ite (= x!0 #x1331f311) #x03
    (ite (= x!0 #x00001004) #x01
    (ite (= x!0 #x00001005) #x01
    (ite (= x!0 #x00001003) #x01
    (ite (= x!0 #x1331f310) #x03
    (ite (= x!0 #x00001000) #x01
    (ite (= x!0 #x00001006) #x01
    (ite (= x!0 #x00001007) #x01
    (ite (= x!0 #x00001002) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x1331f311 x!0)
                    (ite (bvule #x1331f313 x!0)
                         (ite (bvule #x1331f314 x!0) #x1331f314 #x1331f313)
                         #x1331f311)
                    #x1331f310)))
    (let ((a!2 (ite (bvule #x00001006 x!0)
                    (ite (bvule #x00001007 x!0)
                         (ite (bvule #x1331f310 x!0) a!1 #x00001007)
                         #x00001006)
                    #x00001005)))
    (let ((a!3 (ite (bvule #x00001003 x!0)
                    (ite (bvule #x00001004 x!0)
                         (ite (bvule #x00001005 x!0) a!2 #x00001004)
                         #x00001003)
                    #x00001002)))
      (ite (bvule #x00001000 x!0)
           (ite (bvule #x00001001 x!0)
                (ite (bvule #x00001002 x!0) a!3 #x00001001)
                #x00001000)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var439X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var439X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var439X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let ((?x252 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var439X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x260 (concat ?x252 (select input.dst.llvm-mem (bvadd input.ind-%var439X (_ bv4 32))))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var439X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var439X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x253 (concat ?x255 (concat ?x257 ?x260))))
 (let (($x256 (= input.ind-%var439X.2.1 ?x253)))
 (let (($x234 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x259 (=> $x234 $x256)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd input.ind-%var439X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var439X))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.ind-%var439X (_ bv2 32))) ?x247)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd input.ind-%var439X (_ bv3 32))) ?x240)))
 (let (($x245 (= input.ind-%var439X.2.0 ?x242)))
 (let (($x248 (=> $x234 $x245)))
 (let (($x170 (= false false)))
 (let (($x219 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x266 (=> $x219 $x170)))
 (let ((?x206 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x63 (= (_ bv0 32) ?x206)))
 (let ((?x222 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x222 (_ bv1 32))))
 (let (($x236 (= $x234 $x235)))
 (let (($x263 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x206) (= $x219 (= ?x222 (_ bv0 32)))) $x236)))
 (let (($x270 (and (and (and $x263 $x266) $x248) $x259)))
 (let (($x221 (= true true)))
 (let (($x271 (and $x221 $x270)))
 (let (($x272 (= $x271 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x232 (= $x215 $x154)))
 (let (($x62 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x6 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x164 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x207 (and $x155 $x164)))
 (let (($x10 (and $x207 $x6)))
 (let (($x176 (and $x10 $x62)))
 (let (($x229 (=> $x176 $x232)))
 (let (($x226 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x184 (and $x176 $x226)))
 (let (($x227 (=> $x184 $x170)))
 (let (($x151 (= (_ bv0 32) (_ bv0 32))))
 (let (($x210 (= $x226 $x151)))
 (let (($x182 (=> $x176 $x210)))
 (let (($x33 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x49 (=> $x176 $x33)))
 (let (($x213 (= $x62 $x154)))
 (let (($x175 (=> $x10 $x213)))
 (let (($x22 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x202 (and $x10 $x22)))
 (let (($x174 (=> $x202 $x170)))
 (let (($x223 (= $x22 $x151)))
 (let (($x167 (=> $x10 $x223)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x52 (=> $x10 $x172)))
 (let (($x201 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x166 (and $x207 $x201)))
 (let (($x12 (=> $x166 $x170)))
 (let (($x99 (= $x6 $x154)))
 (let (($x161 (=> $x207 $x99)))
 (let (($x149 (= $x201 $x151)))
 (let (($x150 (=> $x207 $x149)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x211 (=> $x207 $x163)))
 (let (($x165 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x205 (and $x155 $x165)))
 (let (($x156 (=> $x205 $x170)))
 (let (($x178 (= $x164 $x154)))
 (let (($x195 (=> $x155 $x178)))
 (let (($x169 (= $x165 $x151)))
 (let (($x199 (=> $x155 $x169)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x152 (=> $x155 $x179)))
 (let (($x177 (= $x155 $x154)))
 (let (($x212 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x173 (=> $x212 $x170)))
 (let (($x208 (= $x212 $x151)))
 (let (($x190 (and (and (and (and (and (and $x208 $x173) $x177) $x152) $x199) $x195) $x156)))
 (let (($x217 (and (and (and (and (and (and $x190 $x211) $x150) $x161) $x12) $x52) $x167)))
 (let (($x220 (and (and (and (and (and (and $x217 $x174) $x175) $x49) $x182) $x227) $x229)))
 (let (($x218 (= $x220 true)))
 (let ((?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x123 (and (and (and (and true (= ?x144 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= ?x108 (_ bv1 8)))))
 (let (($x96 (and (and (and (and $x123 (= ?x129 (_ bv1 8))) (= ?x125 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x77) (_ bv1 8)))))
 (let (($x137 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x117 (=> $x137 (or false (or false $x96)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x119 (or $x18 $x117)))
 (let ((?x81 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x90 (= (bvand ?x81 (_ bv4294967292 32)) ?x81)))
 (let (($x86 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x81 (bvsub ?x81 (_ bv4 32))) (bvult ?x81 (bvsub ?x81 (_ bv4 32))))))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x9 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x88 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x9) (bvult input.dst.llvm-%call.Lentry%2%d ?x9))))
 (let (($x39 (and true $x88)))
 (let (($x54 (and $x88 $x39)))
 (let (($x140 (and (and (and $x39 $x54) $x59) $x86)))
 (let (($x43 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (and (and (and $x43 $x140) $x90) $x119)))
 (let (($x56 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x77)))
 (let (($x64 (or false $x56)))
 (let (($x61 (or $x18 $x64)))
 (let (($x147 (and $x61 $x146)))
 (let (($x148 (= $x147 true)))
 (let (($x162 (= $x148 true)))
 (let (($x159 (= $x162 true)))
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x35)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x37 $x133)))
 (let (($x53 (and $x28 $x76)))
 (let (($x8 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x8 $x53)))
 (let (($x55 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x55)))))
 (let (($x25 (and $x14 $x31)))
 (let (($x130 (= $x25 true)))
 (let (($x134 (= $x130 true)))
 (let (($x45 (= $x134 true)))
 (let ((?x60 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x60)))
 (let (($x24 (= ?x87 input.dst.llvm-%val)))
 (let (($x48 (= $x24 true)))
 (let (($x95 (= $x48 true)))
 (let (($x69 (and $x95 $x45)))
 (let (($x168 (and $x69 $x159)))
 (let (($x20 (and $x168 $x218)))
 (let (($x273 (=> $x20 $x272)))
 (let (($x124 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x68 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x57 $x68) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x124 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.ind-%var439X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.ind-%var439X.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.ind-%var439X.2.0 () (_ BitVec 32))
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let ((?x252 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var439X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x260 (concat ?x252 (select input.dst.llvm-mem (bvadd input.ind-%var439X (_ bv4 32))))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var439X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var439X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x253 (concat ?x255 (concat ?x257 ?x260))))
 (let (($x256 (= input.ind-%var439X.2.1 ?x253)))
 (let (($x234 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x259 (=> $x234 $x256)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd input.ind-%var439X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var439X))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.ind-%var439X (_ bv2 32))) ?x247)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd input.ind-%var439X (_ bv3 32))) ?x240)))
 (let (($x245 (= input.ind-%var439X.2.0 ?x242)))
 (let (($x248 (=> $x234 $x245)))
 (let (($x170 (= false false)))
 (let (($x219 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x266 (=> $x219 $x170)))
 (let ((?x206 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let (($x63 (= (_ bv0 32) ?x206)))
 (let ((?x222 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x222 (_ bv1 32))))
 (let (($x236 (= $x234 $x235)))
 (let (($x263 (and (and (= input.spec-%tmpvar-3.E0%0%d ?x206) (= $x219 (= ?x222 (_ bv0 32)))) $x236)))
 (let (($x270 (and (and (and $x263 $x266) $x248) $x259)))
 (let (($x221 (= true true)))
 (let (($x271 (and $x221 $x270)))
 (let (($x272 (= $x271 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x232 (= $x215 $x154)))
 (let (($x62 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x6 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x164 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x207 (and $x155 $x164)))
 (let (($x10 (and $x207 $x6)))
 (let (($x176 (and $x10 $x62)))
 (let (($x229 (=> $x176 $x232)))
 (let (($x226 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x184 (and $x176 $x226)))
 (let (($x227 (=> $x184 $x170)))
 (let (($x151 (= (_ bv0 32) (_ bv0 32))))
 (let (($x210 (= $x226 $x151)))
 (let (($x182 (=> $x176 $x210)))
 (let (($x33 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x49 (=> $x176 $x33)))
 (let (($x213 (= $x62 $x154)))
 (let (($x175 (=> $x10 $x213)))
 (let (($x22 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x202 (and $x10 $x22)))
 (let (($x174 (=> $x202 $x170)))
 (let (($x223 (= $x22 $x151)))
 (let (($x167 (=> $x10 $x223)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x52 (=> $x10 $x172)))
 (let (($x201 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x166 (and $x207 $x201)))
 (let (($x12 (=> $x166 $x170)))
 (let (($x99 (= $x6 $x154)))
 (let (($x161 (=> $x207 $x99)))
 (let (($x149 (= $x201 $x151)))
 (let (($x150 (=> $x207 $x149)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x211 (=> $x207 $x163)))
 (let (($x165 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x205 (and $x155 $x165)))
 (let (($x156 (=> $x205 $x170)))
 (let (($x178 (= $x164 $x154)))
 (let (($x195 (=> $x155 $x178)))
 (let (($x169 (= $x165 $x151)))
 (let (($x199 (=> $x155 $x169)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x152 (=> $x155 $x179)))
 (let (($x177 (= $x155 $x154)))
 (let (($x212 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x173 (=> $x212 $x170)))
 (let (($x208 (= $x212 $x151)))
 (let (($x190 (and (and (and (and (and (and $x208 $x173) $x177) $x152) $x199) $x195) $x156)))
 (let (($x217 (and (and (and (and (and (and $x190 $x211) $x150) $x161) $x12) $x52) $x167)))
 (let (($x220 (and (and (and (and (and (and $x217 $x174) $x175) $x49) $x182) $x227) $x229)))
 (let (($x218 (= $x220 true)))
 (let ((?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x123 (and (and (and (and true (= ?x144 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= ?x108 (_ bv1 8)))))
 (let (($x96 (and (and (and (and $x123 (= ?x129 (_ bv1 8))) (= ?x125 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x77) (_ bv1 8)))))
 (let (($x137 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x117 (=> $x137 (or false (or false $x96)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x119 (or $x18 $x117)))
 (let ((?x81 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x90 (= (bvand ?x81 (_ bv4294967292 32)) ?x81)))
 (let (($x86 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x81 (bvsub ?x81 (_ bv4 32))) (bvult ?x81 (bvsub ?x81 (_ bv4 32))))))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x9 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x88 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x9) (bvult input.dst.llvm-%call.Lentry%2%d ?x9))))
 (let (($x39 (and true $x88)))
 (let (($x54 (and $x88 $x39)))
 (let (($x140 (and (and (and $x39 $x54) $x59) $x86)))
 (let (($x43 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (and (and (and $x43 $x140) $x90) $x119)))
 (let (($x56 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x77)))
 (let (($x64 (or false $x56)))
 (let (($x61 (or $x18 $x64)))
 (let (($x147 (and $x61 $x146)))
 (let (($x148 (= $x147 true)))
 (let (($x162 (= $x148 true)))
 (let (($x159 (= $x162 true)))
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x35)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x37 $x133)))
 (let (($x53 (and $x28 $x76)))
 (let (($x8 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x8 $x53)))
 (let (($x55 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x55)))))
 (let (($x25 (and $x14 $x31)))
 (let (($x130 (= $x25 true)))
 (let (($x134 (= $x130 true)))
 (let (($x45 (= $x134 true)))
 (let ((?x60 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x60)))
 (let (($x24 (= ?x87 input.dst.llvm-%val)))
 (let (($x48 (= $x24 true)))
 (let (($x95 (= $x48 true)))
 (let (($x69 (and $x95 $x45)))
 (let (($x168 (and $x69 $x159)))
 (let (($x20 (and $x168 $x218)))
 (let (($x273 (=> $x20 $x272)))
 (let (($x124 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x68 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x57 $x68) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x124 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1331f310)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var439X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var439X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var439X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1331f313)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1331f310)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00001001) #x01
    (ite (= x!0 #x1331f313) #x03
    (ite (= x!0 #x1331f311) #x03
    (ite (= x!0 #x00001004) #x01
    (ite (= x!0 #x00001005) #x01
    (ite (= x!0 #x00001003) #x01
    (ite (= x!0 #x1331f310) #x03
    (ite (= x!0 #x00001000) #x01
    (ite (= x!0 #x00001006) #x01
    (ite (= x!0 #x00001007) #x01
    (ite (= x!0 #x00001002) #x01
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x1331f311 x!0)
                    (ite (bvule #x1331f313 x!0)
                         (ite (bvule #x1331f314 x!0) #x1331f314 #x1331f313)
                         #x1331f311)
                    #x1331f310)))
    (let ((a!2 (ite (bvule #x00001006 x!0)
                    (ite (bvule #x00001007 x!0)
                         (ite (bvule #x1331f310 x!0) a!1 #x00001007)
                         #x00001006)
                    #x00001005)))
    (let ((a!3 (ite (bvule #x00001003 x!0)
                    (ite (bvule #x00001004 x!0)
                         (ite (bvule #x00001005 x!0) a!2 #x00001004)
                         #x00001003)
                    #x00001002)))
      (ite (bvule #x00001000 x!0)
           (ite (bvule #x00001001 x!0)
                (ite (bvule #x00001002 x!0) a!3 #x00001001)
                #x00001000)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!17))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.ind-%var439X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6f62375c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3ffffff9)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var439X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var439X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d () (_ BitVec 32)
    #xffffffff)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6f62375f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6f62375c)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!18 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x6f62375f x!0)
                    (ite (bvule #x6f623760 x!0)
                         (ite (bvule #xf77ad806 x!0) #xf77ad806 #x6f623760)
                         #x6f62375f)
                    #x6f62375d)))
    (let ((a!2 (ite (bvule #x40000000 x!0)
                    (ite (bvule #x6f62375c x!0)
                         (ite (bvule #x6f62375d x!0) a!1 #x6f62375c)
                         #x40000000)
                    #x3fffffff)))
    (let ((a!3 (ite (bvule #x3ffffffd x!0)
                    (ite (bvule #x3ffffffe x!0)
                         (ite (bvule #x3fffffff x!0) a!2 #x3ffffffe)
                         #x3ffffffd)
                    #x3ffffffc)))
    (let ((a!4 (ite (bvule #x3ffffffa x!0)
                    (ite (bvule #x3ffffffb x!0)
                         (ite (bvule #x3ffffffc x!0) a!3 #x3ffffffb)
                         #x3ffffffa)
                    #x3ffffff9)))
      (ite (bvule #x3ffffff9 x!0) a!4 #x00000000))))))
  (define-fun k!17!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3ffffffb) #x01
    (ite (= x!0 #x6f62375c) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x3ffffffe) #x01
    (ite (= x!0 #x3ffffffa) #x01
    (ite (= x!0 #x3ffffffd) #x01
    (ite (= x!0 #x6f62375d) #x03
    (ite (= x!0 #x6f62375f) #x03
    (ite (= x!0 #x3fffffff) #x01
    (ite (= x!0 #xf77ad806) #x00
    (ite (= x!0 #x3ffffff9) #x01
    (ite (= x!0 #x40000000) #x01
    (ite (= x!0 #x3ffffffc) #x01
      #x02))))))))))))))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!17!19 (k!18 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x207 (= false true)))
 (let (($x34 (= $x207 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x199 (= $x169 $x154)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x185 (=> $x155 $x199)))
 (let (($x208 (= (_ bv0 32) (_ bv0 32))))
 (let (($x186 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x204 (= $x186 $x208)))
 (let (($x165 (=> $x155 $x204)))
 (let (($x200 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x179 (=> $x155 $x200)))
 (let (($x177 (= $x155 $x154)))
 (let (($x173 (= false false)))
 (let (($x151 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x192 (=> $x151 $x173)))
 (let (($x170 (= $x151 $x208)))
 (let (($x205 (and (and (and (and (and $x170 $x192) $x177) $x179) $x165) $x185)))
 (let (($x156 (= $x205 true)))
 (let ((?x56 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x123 (and (and (and (and true (= ?x144 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= ?x108 (_ bv1 8)))))
 (let (($x96 (and (and (and (and $x123 (= ?x129 (_ bv1 8))) (= ?x125 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x56) (_ bv1 8)))))
 (let (($x117 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x119 (=> $x117 (or false (or false $x96)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x121 (or $x18 $x119)))
 (let ((?x82 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x90 (= (bvand ?x82 (_ bv4294967292 32)) ?x82)))
 (let (($x93 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x82 (bvsub ?x82 (_ bv4 32))) (bvult ?x82 (bvsub ?x82 (_ bv4 32))))))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x9 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x39 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x9) (bvult input.dst.llvm-%call.Lentry%2%d ?x9))))
 (let (($x54 (and true $x39)))
 (let (($x80 (and $x39 $x54)))
 (let (($x141 (and (and (and $x54 $x80) $x59) $x93)))
 (let (($x79 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x147 (and (and (and $x79 $x141) $x90) $x121)))
 (let (($x64 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x56)))
 (let (($x61 (or false $x64)))
 (let (($x44 (or $x18 $x61)))
 (let (($x148 (and $x44 $x147)))
 (let (($x162 (= $x148 true)))
 (let (($x159 (= $x162 true)))
 (let (($x168 (= $x159 true)))
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x35)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x37 $x133)))
 (let (($x53 (and $x28 $x76)))
 (let (($x70 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x70 $x53)))
 (let (($x46 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x46)))))
 (let (($x25 (and $x8 $x31)))
 (let (($x130 (= $x25 true)))
 (let (($x134 (= $x130 true)))
 (let (($x45 (= $x134 true)))
 (let ((?x17 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x17)))
 (let (($x38 (= ?x42 input.dst.llvm-%val)))
 (let (($x71 (= $x38 true)))
 (let (($x95 (= $x71 true)))
 (let (($x69 (and $x95 $x45)))
 (let (($x157 (and $x69 $x168)))
 (let (($x190 (and $x157 $x156)))
 (let (($x163 (=> $x190 $x34)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x60 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x87 $x60) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x207 (= false true)))
 (let (($x34 (= $x207 true)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x199 (= $x169 $x154)))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x185 (=> $x155 $x199)))
 (let (($x208 (= (_ bv0 32) (_ bv0 32))))
 (let (($x186 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x204 (= $x186 $x208)))
 (let (($x165 (=> $x155 $x204)))
 (let (($x200 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x179 (=> $x155 $x200)))
 (let (($x177 (= $x155 $x154)))
 (let (($x173 (= false false)))
 (let (($x151 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x192 (=> $x151 $x173)))
 (let (($x170 (= $x151 $x208)))
 (let (($x205 (and (and (and (and (and $x170 $x192) $x177) $x179) $x165) $x185)))
 (let (($x156 (= $x205 true)))
 (let ((?x56 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x123 (and (and (and (and true (= ?x144 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= ?x108 (_ bv1 8)))))
 (let (($x96 (and (and (and (and $x123 (= ?x129 (_ bv1 8))) (= ?x125 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x56) (_ bv1 8)))))
 (let (($x117 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x119 (=> $x117 (or false (or false $x96)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x121 (or $x18 $x119)))
 (let ((?x82 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x90 (= (bvand ?x82 (_ bv4294967292 32)) ?x82)))
 (let (($x93 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x82 (bvsub ?x82 (_ bv4 32))) (bvult ?x82 (bvsub ?x82 (_ bv4 32))))))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x9 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x39 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x9) (bvult input.dst.llvm-%call.Lentry%2%d ?x9))))
 (let (($x54 (and true $x39)))
 (let (($x80 (and $x39 $x54)))
 (let (($x141 (and (and (and $x54 $x80) $x59) $x93)))
 (let (($x79 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x147 (and (and (and $x79 $x141) $x90) $x121)))
 (let (($x64 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x56)))
 (let (($x61 (or false $x64)))
 (let (($x44 (or $x18 $x61)))
 (let (($x148 (and $x44 $x147)))
 (let (($x162 (= $x148 true)))
 (let (($x159 (= $x162 true)))
 (let (($x168 (= $x159 true)))
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x35)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x37 $x133)))
 (let (($x53 (and $x28 $x76)))
 (let (($x70 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x70 $x53)))
 (let (($x46 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x46)))))
 (let (($x25 (and $x8 $x31)))
 (let (($x130 (= $x25 true)))
 (let (($x134 (= $x130 true)))
 (let (($x45 (= $x134 true)))
 (let ((?x17 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x17)))
 (let (($x38 (= ?x42 input.dst.llvm-%val)))
 (let (($x71 (= $x38 true)))
 (let (($x95 (= $x71 true)))
 (let (($x69 (and $x95 $x45)))
 (let (($x157 (and $x69 $x168)))
 (let (($x190 (and $x157 $x156)))
 (let (($x163 (=> $x190 $x34)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x60 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x87 $x60) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x201 (= false true)))
 (let (($x149 (= $x201 true)))
 (let (($x195 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x185 (and $x155 $x195)))
 (let (($x205 (not $x185)))
 (let (($x204 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x169 (and $x155 $x204)))
 (let (($x199 (not $x169)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x165 (= $x204 $x154)))
 (let (($x189 (=> $x155 $x165)))
 (let (($x170 (= (_ bv0 32) (_ bv0 32))))
 (let (($x152 (= $x195 $x170)))
 (let (($x186 (=> $x155 $x152)))
 (let (($x193 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x200 (=> $x155 $x193)))
 (let (($x177 (= $x155 $x154)))
 (let (($x192 (= false false)))
 (let (($x208 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x164 (=> $x208 $x192)))
 (let (($x173 (= $x208 $x170)))
 (let (($x211 (and (and (and (and (and (and $x173 $x164) $x177) $x200) $x186) $x189) $x199)))
 (let (($x191 (and $x211 $x205)))
 (let (($x139 (= $x191 true)))
 (let ((?x64 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x123 (and (and (and (and true (= ?x144 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= ?x108 (_ bv1 8)))))
 (let (($x96 (and (and (and (and $x123 (= ?x129 (_ bv1 8))) (= ?x125 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x64) (_ bv1 8)))))
 (let (($x119 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x121 (=> $x119 (or false (or false $x96)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (or $x18 $x121)))
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x90 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x92 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x9 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x54 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x9) (bvult input.dst.llvm-%call.Lentry%2%d ?x9))))
 (let (($x80 (and true $x54)))
 (let (($x86 (and $x54 $x80)))
 (let (($x114 (and (and (and $x80 $x86) $x59) $x92)))
 (let (($x65 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x148 (and (and (and $x65 $x114) $x90) $x146)))
 (let (($x61 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x64)))
 (let (($x44 (or false $x61)))
 (let (($x43 (or $x18 $x44)))
 (let (($x162 (and $x43 $x148)))
 (let (($x159 (= $x162 true)))
 (let (($x168 (= $x159 true)))
 (let (($x157 (= $x168 true)))
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x35)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x37 $x133)))
 (let (($x53 (and $x28 $x76)))
 (let (($x135 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x135 $x53)))
 (let (($x21 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x21)))))
 (let (($x25 (and $x70 $x31)))
 (let (($x130 (= $x25 true)))
 (let (($x134 (= $x130 true)))
 (let (($x45 (= $x134 true)))
 (let ((?x72 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x72)))
 (let (($x5 (= ?x128 input.dst.llvm-%val)))
 (let (($x24 (= $x5 true)))
 (let (($x95 (= $x24 true)))
 (let (($x69 (and $x95 $x45)))
 (let (($x212 (and $x69 $x157)))
 (let (($x196 (and $x212 $x139)))
 (let (($x150 (=> $x196 $x149)))
 (let (($x71 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x17 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x42 $x17) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x71 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x201 (= false true)))
 (let (($x149 (= $x201 true)))
 (let (($x195 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x155 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x185 (and $x155 $x195)))
 (let (($x205 (not $x185)))
 (let (($x204 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x169 (and $x155 $x204)))
 (let (($x199 (not $x169)))
 (let (($x154 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x165 (= $x204 $x154)))
 (let (($x189 (=> $x155 $x165)))
 (let (($x170 (= (_ bv0 32) (_ bv0 32))))
 (let (($x152 (= $x195 $x170)))
 (let (($x186 (=> $x155 $x152)))
 (let (($x193 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x200 (=> $x155 $x193)))
 (let (($x177 (= $x155 $x154)))
 (let (($x192 (= false false)))
 (let (($x208 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x164 (=> $x208 $x192)))
 (let (($x173 (= $x208 $x170)))
 (let (($x211 (and (and (and (and (and (and $x173 $x164) $x177) $x200) $x186) $x189) $x199)))
 (let (($x191 (and $x211 $x205)))
 (let (($x139 (= $x191 true)))
 (let ((?x64 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x132 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x129 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x123 (and (and (and (and true (= ?x144 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x15 (_ bv1 8))) (= ?x108 (_ bv1 8)))))
 (let (($x96 (and (and (and (and $x123 (= ?x129 (_ bv1 8))) (= ?x125 (_ bv1 8))) (= ?x132 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x64) (_ bv1 8)))))
 (let (($x119 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x121 (=> $x119 (or false (or false $x96)))))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (or $x18 $x121)))
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x90 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x92 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x59 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x9 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x54 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x9) (bvult input.dst.llvm-%call.Lentry%2%d ?x9))))
 (let (($x80 (and true $x54)))
 (let (($x86 (and $x54 $x80)))
 (let (($x114 (and (and (and $x80 $x86) $x59) $x92)))
 (let (($x65 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x148 (and (and (and $x65 $x114) $x90) $x146)))
 (let (($x61 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x64)))
 (let (($x44 (or false $x61)))
 (let (($x43 (or $x18 $x44)))
 (let (($x162 (and $x43 $x148)))
 (let (($x159 (= $x162 true)))
 (let (($x168 (= $x159 true)))
 (let (($x157 (= $x168 true)))
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x35)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x37 $x133)))
 (let (($x53 (and $x28 $x76)))
 (let (($x135 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x135 $x53)))
 (let (($x21 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x21)))))
 (let (($x25 (and $x70 $x31)))
 (let (($x130 (= $x25 true)))
 (let (($x134 (= $x130 true)))
 (let (($x45 (= $x134 true)))
 (let ((?x72 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x72)))
 (let (($x5 (= ?x128 input.dst.llvm-%val)))
 (let (($x24 (= $x5 true)))
 (let (($x95 (= $x24 true)))
 (let (($x69 (and $x95 $x45)))
 (let (($x212 (and $x69 $x157)))
 (let (($x196 (and $x212 $x139)))
 (let (($x150 (=> $x196 $x149)))
 (let (($x71 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x17 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x42 $x17) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x71 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x163 (= true false)))
 (let (($x169 (= $x163 true)))
 (let (($x192 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x207 (= $x200 $x192)))
 (let (($x173 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x179 (=> $x173 $x207)))
 (let (($x212 (= (_ bv0 32) (_ bv0 32))))
 (let (($x190 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x178 (= $x190 $x212)))
 (let (($x193 (=> $x173 $x178)))
 (let (($x155 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x154 (=> $x173 $x155)))
 (let (($x164 (= $x173 $x192)))
 (let (($x208 (= false false)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x170 (=> $x157 $x208)))
 (let (($x151 (= $x157 $x212)))
 (let (($x204 (and (and (and (and (and $x151 $x170) $x164) $x154) $x193) $x179)))
 (let (($x165 (= $x204 true)))
 (let ((?x19 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x108 (ite $x17 (_ bv4 32) ?x19)))
 (let ((?x87 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x7 (store (store ?x87 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x46 (store (store ?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x19 (_ bv2 8))))
 (let ((?x135 (store (store ?x46 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x122 (store ?x135 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x133 (ite $x17 input.dst.llvm-mem.alloc ?x122)))
 (let (($x113 (and (and true (= (select ?x133 (bvadd ?x108 (_ bv0 32))) (_ bv2 8))) (= (select ?x133 (bvadd ?x108 (_ bv1 32))) (_ bv2 8)))))
 (let (($x126 (and (and $x113 (= (select ?x133 (bvadd ?x108 (_ bv2 32))) (_ bv2 8))) (= (select ?x133 (bvadd ?x108 (_ bv3 32))) (_ bv2 8)))))
 (let (($x148 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false $x126)))))
 (let (($x107 (= $x148 true)))
 (let (($x123 (= $x107 true)))
 (let (($x162 (= $x123 true)))
 (let ((?x105 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x105)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x144 $x145)))
 (let (($x100 (and $x30 $x85)))
 (let (($x73 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x73 $x100)))
 (let (($x147 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x147)))))
 (let (($x102 (and $x143 $x101)))
 (let (($x15 (= $x102 true)))
 (let (($x84 (= $x15 true)))
 (let (($x116 (= $x84 true)))
 (let ((?x66 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x66)))
 (let (($x141 (= ?x89 input.dst.llvm-%val)))
 (let (($x140 (= $x141 true)))
 (let (($x82 (= $x140 true)))
 (let ((?x65 (select ?x133 (bvadd (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x61 (select ?x133 (bvadd (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x23 (select ?x133 (bvadd (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x130 (select ?x133 (bvadd (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x78 (and (and (and (and true (= ?x130 (_ bv2 8))) (= ?x23 (_ bv2 8))) (= ?x61 (_ bv2 8))) (= ?x65 (_ bv2 8)))))
 (let ((?x31 (bvsub (bvadd (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x28 (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x54 (=> (bvule ?x28 ?x31) (or false (or false $x78)))))
 (let (($x35 (= $x54 true)))
 (let (($x76 (= $x35 true)))
 (let (($x80 (= $x76 true)))
 (let (($x16 (and $x80 $x82)))
 (let (($x104 (and $x16 $x116)))
 (let (($x159 (and $x104 $x162)))
 (let (($x189 (and $x159 $x165)))
 (let (($x199 (=> $x189 $x169)))
 (let (($x5 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x60 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x60) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x5 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x163 (= true false)))
 (let (($x169 (= $x163 true)))
 (let (($x192 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x207 (= $x200 $x192)))
 (let (($x173 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x179 (=> $x173 $x207)))
 (let (($x212 (= (_ bv0 32) (_ bv0 32))))
 (let (($x190 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x178 (= $x190 $x212)))
 (let (($x193 (=> $x173 $x178)))
 (let (($x155 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x154 (=> $x173 $x155)))
 (let (($x164 (= $x173 $x192)))
 (let (($x208 (= false false)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x170 (=> $x157 $x208)))
 (let (($x151 (= $x157 $x212)))
 (let (($x204 (and (and (and (and (and $x151 $x170) $x164) $x154) $x193) $x179)))
 (let (($x165 (= $x204 true)))
 (let ((?x19 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x108 (ite $x17 (_ bv4 32) ?x19)))
 (let ((?x87 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x7 (store (store ?x87 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x46 (store (store ?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x19 (_ bv2 8))))
 (let ((?x135 (store (store ?x46 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x122 (store ?x135 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x133 (ite $x17 input.dst.llvm-mem.alloc ?x122)))
 (let (($x113 (and (and true (= (select ?x133 (bvadd ?x108 (_ bv0 32))) (_ bv2 8))) (= (select ?x133 (bvadd ?x108 (_ bv1 32))) (_ bv2 8)))))
 (let (($x126 (and (and $x113 (= (select ?x133 (bvadd ?x108 (_ bv2 32))) (_ bv2 8))) (= (select ?x133 (bvadd ?x108 (_ bv3 32))) (_ bv2 8)))))
 (let (($x148 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false $x126)))))
 (let (($x107 (= $x148 true)))
 (let (($x123 (= $x107 true)))
 (let (($x162 (= $x123 true)))
 (let ((?x105 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x105)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x144 $x145)))
 (let (($x100 (and $x30 $x85)))
 (let (($x73 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x73 $x100)))
 (let (($x147 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x147)))))
 (let (($x102 (and $x143 $x101)))
 (let (($x15 (= $x102 true)))
 (let (($x84 (= $x15 true)))
 (let (($x116 (= $x84 true)))
 (let ((?x66 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x66)))
 (let (($x141 (= ?x89 input.dst.llvm-%val)))
 (let (($x140 (= $x141 true)))
 (let (($x82 (= $x140 true)))
 (let ((?x65 (select ?x133 (bvadd (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x61 (select ?x133 (bvadd (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x23 (select ?x133 (bvadd (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x130 (select ?x133 (bvadd (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x78 (and (and (and (and true (= ?x130 (_ bv2 8))) (= ?x23 (_ bv2 8))) (= ?x61 (_ bv2 8))) (= ?x65 (_ bv2 8)))))
 (let ((?x31 (bvsub (bvadd (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x28 (ite $x17 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x54 (=> (bvule ?x28 ?x31) (or false (or false $x78)))))
 (let (($x35 (= $x54 true)))
 (let (($x76 (= $x35 true)))
 (let (($x80 (= $x76 true)))
 (let (($x16 (and $x80 $x82)))
 (let (($x104 (and $x16 $x116)))
 (let (($x159 (and $x104 $x162)))
 (let (($x189 (and $x159 $x165)))
 (let (($x199 (=> $x189 $x169)))
 (let (($x5 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x60 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x60) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x5 (not $x199)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!78))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xfffffefe)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x09a45f20)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x09a45f23)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x09a45f20)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!79 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
      #x00)))))))
  (define-fun k!80 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
      #x00))))))))
  (define-fun k!81 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff00) #x02
      #x00)))))))))
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #xffffff01) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff00) #x02
      #x00))))))))))
  (define-fun k!83 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff01) #x02
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xffffff02) #x02
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff00) #x02
      #x00)))))))))))
  (define-fun k!84 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff01) #x02
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xffffff02) #x02
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #xffffff03) #x02
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff00) #x02
      #x00))))))))))))
  (define-fun k!77 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff00) #x02
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xffffff02) #x02
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xffffff04) #x02
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #xffffff03) #x02
    (ite (= x!0 #xffffff05) #x02
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff01) #x02
      #x00))))))))))))))
  (define-fun k!85 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff00) #x02
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xffffff02) #x02
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xffffff04) #x02
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #xffffff03) #x02
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff01) #x02
      #x00)))))))))))))
  (define-fun k!78 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
      #x00))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x25c000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x14100000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!144))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x14100003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x14100000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!144 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x14100000) #x03
      #x00))))))
  (define-fun k!149 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000ff) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x25c00100) #x02
    (ite (= x!0 #x14100000) #x03
      #x00)))))))))))
  (define-fun k!146 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x14100000) #x03
      #x00))))))))
  (define-fun k!143 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x25c00101) #x02
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c00103) #x02
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000ff) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x25c00100) #x02
    (ite (= x!0 #x25c00102) #x02
    (ite (= x!0 #x14100000) #x03
      #x00))))))))))))))
  (define-fun k!151 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x25c00101) #x02
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000ff) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x25c00100) #x02
    (ite (= x!0 #x25c00102) #x02
    (ite (= x!0 #x14100000) #x03
      #x00)))))))))))))
  (define-fun k!148 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000ff) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x14100000) #x03
      #x00))))))))))
  (define-fun k!145 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x14100000) #x03
      #x00)))))))
  (define-fun k!150 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x25c00101) #x02
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000ff) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x25c00100) #x02
    (ite (= x!0 #x14100000) #x03
      #x00))))))))))))
  (define-fun k!147 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x14100000) #x03
      #x00)))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x191 (= true false)))
 (let (($x139 (= $x191 true)))
 (let (($x154 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x195 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x207 (and $x195 $x154)))
 (let (($x179 (not $x207)))
 (let (($x190 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x34 (and $x195 $x190)))
 (let (($x200 (not $x34)))
 (let (($x173 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x178 (= $x190 $x173)))
 (let (($x193 (=> $x195 $x178)))
 (let (($x212 (= (_ bv0 32) (_ bv0 32))))
 (let (($x186 (= $x154 $x212)))
 (let (($x177 (=> $x195 $x186)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x156 (=> $x195 $x152)))
 (let (($x192 (= $x195 $x173)))
 (let (($x208 (= false false)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x170 (=> $x157 $x208)))
 (let (($x151 (= $x157 $x212)))
 (let (($x199 (and (and (and (and (and (and $x151 $x170) $x192) $x156) $x177) $x193) $x200)))
 (let (($x211 (and $x199 $x179)))
 (let (($x185 (= $x211 true)))
 (let ((?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x108 (ite $x128 (_ bv4 32) ?x7)))
 (let ((?x74 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x87 (store (store ?x74 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x136 (store (store ?x87 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x7 (_ bv2 8))))
 (let ((?x14 (store (store ?x136 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x40 (store ?x14 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x135 (ite $x128 input.dst.llvm-mem.alloc ?x40)))
 (let (($x120 (and (and true (= (select ?x135 (bvadd ?x108 (_ bv0 32))) (_ bv2 8))) (= (select ?x135 (bvadd ?x108 (_ bv1 32))) (_ bv2 8)))))
 (let (($x115 (and (and $x120 (= (select ?x135 (bvadd ?x108 (_ bv2 32))) (_ bv2 8))) (= (select ?x135 (bvadd ?x108 (_ bv3 32))) (_ bv2 8)))))
 (let (($x123 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x118 (= $x123 true)))
 (let (($x129 (= $x118 true)))
 (let (($x162 (= $x129 true)))
 (let ((?x105 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x105)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x144 $x145)))
 (let (($x100 (and $x30 $x85)))
 (let (($x119 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x119 $x100)))
 (let (($x137 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x137)))))
 (let (($x102 (and $x73 $x101)))
 (let (($x15 (= $x102 true)))
 (let (($x84 (= $x15 true)))
 (let (($x116 (= $x84 true)))
 (let ((?x66 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x66)))
 (let (($x141 (= ?x89 input.dst.llvm-%val)))
 (let (($x140 (= $x141 true)))
 (let (($x82 (= $x140 true)))
 (let ((?x67 (select ?x135 (bvadd (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x44 (select ?x135 (bvadd (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x18 (select ?x135 (bvadd (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x134 (select ?x135 (bvadd (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x9 (and (and (and (and true (= ?x134 (_ bv2 8))) (= ?x18 (_ bv2 8))) (= ?x44 (_ bv2 8))) (= ?x67 (_ bv2 8)))))
 (let ((?x25 (bvsub (bvadd (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x37 (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x76 (=> (bvule ?x37 ?x25) (or false (or false $x9)))))
 (let (($x32 (= $x76 true)))
 (let (($x122 (= $x32 true)))
 (let (($x80 (= $x122 true)))
 (let (($x16 (and $x80 $x82)))
 (let (($x104 (and $x16 $x116)))
 (let (($x159 (and $x104 $x162)))
 (let (($x205 (and $x159 $x185)))
 (let (($x196 (=> $x205 $x139)))
 (let (($x68 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x17 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x28 $x17) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x68 (not $x196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x191 (= true false)))
 (let (($x139 (= $x191 true)))
 (let (($x154 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x195 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x207 (and $x195 $x154)))
 (let (($x179 (not $x207)))
 (let (($x190 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x34 (and $x195 $x190)))
 (let (($x200 (not $x34)))
 (let (($x173 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x178 (= $x190 $x173)))
 (let (($x193 (=> $x195 $x178)))
 (let (($x212 (= (_ bv0 32) (_ bv0 32))))
 (let (($x186 (= $x154 $x212)))
 (let (($x177 (=> $x195 $x186)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x156 (=> $x195 $x152)))
 (let (($x192 (= $x195 $x173)))
 (let (($x208 (= false false)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x170 (=> $x157 $x208)))
 (let (($x151 (= $x157 $x212)))
 (let (($x199 (and (and (and (and (and (and $x151 $x170) $x192) $x156) $x177) $x193) $x200)))
 (let (($x211 (and $x199 $x179)))
 (let (($x185 (= $x211 true)))
 (let ((?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x108 (ite $x128 (_ bv4 32) ?x7)))
 (let ((?x74 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x87 (store (store ?x74 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x136 (store (store ?x87 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x7 (_ bv2 8))))
 (let ((?x14 (store (store ?x136 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x40 (store ?x14 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x135 (ite $x128 input.dst.llvm-mem.alloc ?x40)))
 (let (($x120 (and (and true (= (select ?x135 (bvadd ?x108 (_ bv0 32))) (_ bv2 8))) (= (select ?x135 (bvadd ?x108 (_ bv1 32))) (_ bv2 8)))))
 (let (($x115 (and (and $x120 (= (select ?x135 (bvadd ?x108 (_ bv2 32))) (_ bv2 8))) (= (select ?x135 (bvadd ?x108 (_ bv3 32))) (_ bv2 8)))))
 (let (($x123 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x118 (= $x123 true)))
 (let (($x129 (= $x118 true)))
 (let (($x162 (= $x129 true)))
 (let ((?x105 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x105)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x144 $x145)))
 (let (($x100 (and $x30 $x85)))
 (let (($x119 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x119 $x100)))
 (let (($x137 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x137)))))
 (let (($x102 (and $x73 $x101)))
 (let (($x15 (= $x102 true)))
 (let (($x84 (= $x15 true)))
 (let (($x116 (= $x84 true)))
 (let ((?x66 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x66)))
 (let (($x141 (= ?x89 input.dst.llvm-%val)))
 (let (($x140 (= $x141 true)))
 (let (($x82 (= $x140 true)))
 (let ((?x67 (select ?x135 (bvadd (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x44 (select ?x135 (bvadd (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x18 (select ?x135 (bvadd (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x134 (select ?x135 (bvadd (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x9 (and (and (and (and true (= ?x134 (_ bv2 8))) (= ?x18 (_ bv2 8))) (= ?x44 (_ bv2 8))) (= ?x67 (_ bv2 8)))))
 (let ((?x25 (bvsub (bvadd (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x37 (ite $x128 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x76 (=> (bvule ?x37 ?x25) (or false (or false $x9)))))
 (let (($x32 (= $x76 true)))
 (let (($x122 (= $x32 true)))
 (let (($x80 (= $x122 true)))
 (let (($x16 (and $x80 $x82)))
 (let (($x104 (and $x16 $x116)))
 (let (($x159 (and $x104 $x162)))
 (let (($x205 (and $x159 $x185)))
 (let (($x196 (=> $x205 $x139)))
 (let (($x68 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x17 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x28 $x17) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x68 (not $x196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!78))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xfffffefe)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x09a45f20)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x09a45f23)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x09a45f20)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!79 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
      #x00)))))))
  (define-fun k!80 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
      #x00))))))))
  (define-fun k!81 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff00) #x02
      #x00)))))))))
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #xffffff01) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff00) #x02
      #x00))))))))))
  (define-fun k!83 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff01) #x02
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xffffff02) #x02
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff00) #x02
      #x00)))))))))))
  (define-fun k!84 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff01) #x02
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xffffff02) #x02
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #xffffff03) #x02
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff00) #x02
      #x00))))))))))))
  (define-fun k!77 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff00) #x02
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xffffff02) #x02
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xffffff04) #x02
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #xffffff03) #x02
    (ite (= x!0 #xffffff05) #x02
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff01) #x02
      #x00))))))))))))))
  (define-fun k!85 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff00) #x02
    (ite (= x!0 #xfffffeff) #x02
    (ite (= x!0 #xffffff02) #x02
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xffffff04) #x02
    (ite (= x!0 #xfffffefe) #x02
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #xffffff03) #x02
    (ite (= x!0 #x09a45f20) #x03
    (ite (= x!0 #xffffff01) #x02
      #x00)))))))))))))
  (define-fun k!78 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09a45f22) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x09a45f21) #x03
    (ite (= x!0 #x09a45f23) #x03
    (ite (= x!0 #x09a45f20) #x03
      #x00))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x25c000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x14100000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!144))
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x14100003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x14100000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!144 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x14100000) #x03
      #x00))))))
  (define-fun k!149 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000ff) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x25c00100) #x02
    (ite (= x!0 #x14100000) #x03
      #x00)))))))))))
  (define-fun k!146 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x14100000) #x03
      #x00))))))))
  (define-fun k!143 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x25c00101) #x02
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c00103) #x02
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000ff) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x25c00100) #x02
    (ite (= x!0 #x25c00102) #x02
    (ite (= x!0 #x14100000) #x03
      #x00))))))))))))))
  (define-fun k!151 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x25c00101) #x02
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000ff) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x25c00100) #x02
    (ite (= x!0 #x25c00102) #x02
    (ite (= x!0 #x14100000) #x03
      #x00)))))))))))))
  (define-fun k!148 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000ff) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x14100000) #x03
      #x00))))))))))
  (define-fun k!145 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x14100000) #x03
      #x00)))))))
  (define-fun k!150 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x25c00101) #x02
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000ff) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x25c00100) #x02
    (ite (= x!0 #x14100000) #x03
      #x00))))))))))))
  (define-fun k!147 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14100002) #x03
    (ite (= x!0 #x14100001) #x03
    (ite (= x!0 #x25c000fc) #x02
    (ite (= x!0 #x25c000fe) #x02
    (ite (= x!0 #x25c000fd) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x14100003) #x03
    (ite (= x!0 #x14100000) #x03
      #x00)))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x266 (= false false)))
 (let (($x236 (= (_ bv0 32) (_ bv0 32))))
 (let (($x251 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x307 (and $x251 $x236)))
 (let (($x308 (=> $x307 $x266)))
 (let (($x257 (= true true)))
 (let (($x306 (=> $x251 $x257)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x14 (ite $x5 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x25 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x8 (ite $x5 (_ bv4 32) ?x25)))
 (let ((?x90 (bvadd ?x8 (_ bv3 32))))
 (let ((?x127 (bvadd ?x8 (_ bv2 32))))
 (let ((?x141 (bvadd ?x8 (_ bv1 32))))
 (let ((?x93 (bvadd ?x8 (_ bv0 32))))
 (let ((?x65 (bvadd ?x14 (_ bv3 32))))
 (let ((?x61 (bvadd ?x14 (_ bv2 32))))
 (let ((?x23 (bvadd ?x14 (_ bv1 32))))
 (let ((?x130 (bvadd ?x14 (_ bv0 32))))
 (let ((?x274 (ite $x5 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_0)))
 (let ((?x275 (store (store ?x274 ?x130 ((_ extract 7 0) input.dst.llvm-%val)) ?x23 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x279 (store (store ?x275 ?x61 ((_ extract 23 16) input.dst.llvm-%val)) ?x65 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x294 (store (store (store ?x279 ?x93 ((_ extract 7 0) (_ bv0 32))) ?x141 ((_ extract 15 8) (_ bv0 32))) ?x127 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x296 (store ?x294 ?x90 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x301 (concat (select ?x296 ?x61) (concat (select ?x296 ?x23) (select ?x296 ?x14)))))
 (let ((?x303 (concat (select ?x296 ?x65) ?x301)))
 (let (($x304 (= input.spec-%var-val-0 ?x303)))
 (let (($x305 (=> $x251 $x304)))
 (let (($x268 (= (_ bv0 32) ?x14)))
 (let ((?x260 (ite $x268 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x260 (_ bv1 32))))
 (let (($x259 (= true $x256)))
 (let (($x311 (and (and (and (=> $x251 $x266) (= false (= ?x260 (_ bv0 32)))) $x259) $x305)))
 (let (($x313 (and (and $x311 $x306) $x308)))
 (let (($x314 (and $x257 $x313)))
 (let (($x315 (= $x314 true)))
 (let (($x13 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x247 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x240 (= $x247 $x13)))
 (let (($x237 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x242 (=> $x237 $x240)))
 (let (($x238 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x246 (= $x238 $x236)))
 (let (($x50 (=> $x237 $x246)))
 (let (($x239 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x243 (=> $x237 $x239)))
 (let (($x267 (= $x237 $x13)))
 (let (($x235 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x264 (=> $x235 $x266)))
 (let (($x263 (= $x235 $x236)))
 (let (($x250 (and (and (and (and (and $x263 $x264) $x267) $x243) $x50) $x242)))
 (let (($x254 (= $x250 true)))
 (let ((?x183 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x183)))
 (let (($x222 (= ?x219 input.dst.llvm-%val)))
 (let (($x225 (= $x222 true)))
 (let (($x265 (= $x225 true)))
 (let (($x215 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x116 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x182 (ite $x116 (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x233 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x144 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x176 (ite $x144 (bvuge ?x14 (bvsub ?x14 (_ bv0 32))) (bvult ?x14 (bvsub ?x14 (_ bv0 32))))))
 (let (($x209 (and true $x176)))
 (let (($x33 (and $x176 $x209)))
 (let (($x227 (and (and (and $x209 $x33) $x233) $x182)))
 (let (($x232 (and $x227 $x215)))
 (let ((?x19 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x136 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x95 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x31 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x71 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x39 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x47 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x199 (and (and true (= (select input.dst.llvm-mem.alloc ?x47) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x39) (_ bv1 8)))))
 (let (($x191 (and (and $x199 (= (select input.dst.llvm-mem.alloc ?x71) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x31) (_ bv1 8)))))
 (let (($x6 (and (and $x191 (= (select input.dst.llvm-mem.alloc ?x25) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x95) (_ bv1 8)))))
 (let (($x187 (and (and $x6 (= (select input.dst.llvm-mem.alloc ?x136) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x19) (_ bv1 8)))))
 (let ((?x190 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x52 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x190) (or false (or false $x187)))))
 (let (($x186 (or $x5 $x52)))
 (let (($x165 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x19)))
 (let (($x164 (or false $x165)))
 (let (($x152 (or $x5 $x164)))
 (let (($x217 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x218 (and (and (and $x217 $x152) $x186) $x232)))
 (let (($x20 (= $x218 true)))
 (let (($x221 (= $x20 true)))
 (let (($x197 (= $x221 true)))
 (let (($x202 (= $x217 true)))
 (let (($x174 (= $x202 true)))
 (let (($x228 (= $x174 true)))
 (let (($x177 (= $x186 true)))
 (let (($x231 (= $x177 true)))
 (let (($x158 (= $x231 true)))
 (let (($x156 (= $x152 true)))
 (let (($x189 (= $x156 true)))
 (let (($x155 (= $x189 true)))
 (let ((?x157 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x157)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x129 $x159)))
 (let (($x151 (and $x168 $x212)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x109 $x151)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x170 (and $x118 $x208)))
 (let (($x204 (= $x170 true)))
 (let (($x195 (= $x204 true)))
 (let (($x173 (= $x195 true)))
 (let ((?x15 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x27 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x146 (ite $x116 (bvuge ?x15 (bvsub ?x15 (_ bv4 32))) (bvult ?x15 (bvsub ?x15 (_ bv4 32))))))
 (let (($x102 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x119 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x30 (ite $x144 (bvuge input.dst.llvm-%call.Lentry%2%d ?x119) (bvult input.dst.llvm-%call.Lentry%2%d ?x119))))
 (let (($x105 (and true $x30)))
 (let (($x85 (and $x30 $x105)))
 (let (($x98 (and (and (and $x105 $x85) $x102) $x146)))
 (let (($x125 (and $x98 $x27)))
 (let (($x97 (= $x125 true)))
 (let (($x106 (= $x97 true)))
 (let (($x113 (= $x106 true)))
 (let (($x192 (and $x113 $x173)))
 (let (($x154 (and $x192 $x155)))
 (let (($x22 (and $x154 $x158)))
 (let (($x62 (and $x22 $x228)))
 (let (($x206 (and $x62 $x197)))
 (let (($x262 (and $x206 $x265)))
 (let (($x255 (and $x262 $x254)))
 (let ((?x74 (store (store (store input.dst.llvm-mem.alloc ?x47 (_ bv2 8)) ?x39 (_ bv2 8)) ?x71 (_ bv2 8))))
 (let ((?x75 (store (store (store (store ?x74 ?x31 (_ bv2 8)) ?x25 (_ bv2 8)) ?x95 (_ bv2 8)) ?x136 (_ bv2 8))))
 (let ((?x46 (store ?x75 ?x19 (_ bv2 8))))
 (let ((?x21 (ite $x5 input.dst.llvm-mem.alloc ?x46)))
 (let (($x16 (and (and true (= (select ?x21 ?x93) (_ bv2 8))) (= (select ?x21 ?x141) (_ bv2 8)))))
 (let (($x137 (and (and $x16 (= (select ?x21 ?x127) (_ bv2 8))) (= (select ?x21 ?x90) (_ bv2 8)))))
 (let (($x114 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false $x137)))))
 (let (($x64 (and (and true (= (select ?x21 ?x130) (_ bv2 8))) (= (select ?x21 ?x23) (_ bv2 8)))))
 (let (($x9 (and (and $x64 (= (select ?x21 ?x61) (_ bv2 8))) (= (select ?x21 ?x65) (_ bv2 8)))))
 (let (($x32 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) (or false (or false $x9)))))
 (let (($x70 (and $x32 $x114)))
 (let (($x261 (and $x70 $x255)))
 (let (($x316 (=> $x261 $x315)))
 (let (($x77 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x124 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x55 $x124) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x318 (and $x77 (not $x316))))
 (let (($x288 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x281 (select solver-mem_0 us-bounded-var!)))
 (let ((?x190 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x286 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x190))))
 (ite $x286 (= ?x281 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x281 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x288) $x318)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x266 (= false false)))
 (let (($x236 (= (_ bv0 32) (_ bv0 32))))
 (let (($x251 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x307 (and $x251 $x236)))
 (let (($x308 (=> $x307 $x266)))
 (let (($x257 (= true true)))
 (let (($x306 (=> $x251 $x257)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x14 (ite $x5 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x25 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x8 (ite $x5 (_ bv4 32) ?x25)))
 (let ((?x90 (bvadd ?x8 (_ bv3 32))))
 (let ((?x127 (bvadd ?x8 (_ bv2 32))))
 (let ((?x141 (bvadd ?x8 (_ bv1 32))))
 (let ((?x93 (bvadd ?x8 (_ bv0 32))))
 (let ((?x65 (bvadd ?x14 (_ bv3 32))))
 (let ((?x61 (bvadd ?x14 (_ bv2 32))))
 (let ((?x23 (bvadd ?x14 (_ bv1 32))))
 (let ((?x130 (bvadd ?x14 (_ bv0 32))))
 (let ((?x274 (ite $x5 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_0)))
 (let ((?x275 (store (store ?x274 ?x130 ((_ extract 7 0) input.dst.llvm-%val)) ?x23 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x279 (store (store ?x275 ?x61 ((_ extract 23 16) input.dst.llvm-%val)) ?x65 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x294 (store (store (store ?x279 ?x93 ((_ extract 7 0) (_ bv0 32))) ?x141 ((_ extract 15 8) (_ bv0 32))) ?x127 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x296 (store ?x294 ?x90 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x301 (concat (select ?x296 ?x61) (concat (select ?x296 ?x23) (select ?x296 ?x14)))))
 (let ((?x303 (concat (select ?x296 ?x65) ?x301)))
 (let (($x304 (= input.spec-%var-val-0 ?x303)))
 (let (($x305 (=> $x251 $x304)))
 (let (($x268 (= (_ bv0 32) ?x14)))
 (let ((?x260 (ite $x268 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x260 (_ bv1 32))))
 (let (($x259 (= true $x256)))
 (let (($x311 (and (and (and (=> $x251 $x266) (= false (= ?x260 (_ bv0 32)))) $x259) $x305)))
 (let (($x313 (and (and $x311 $x306) $x308)))
 (let (($x314 (and $x257 $x313)))
 (let (($x315 (= $x314 true)))
 (let (($x13 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x247 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x240 (= $x247 $x13)))
 (let (($x237 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x242 (=> $x237 $x240)))
 (let (($x238 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x246 (= $x238 $x236)))
 (let (($x50 (=> $x237 $x246)))
 (let (($x239 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x243 (=> $x237 $x239)))
 (let (($x267 (= $x237 $x13)))
 (let (($x235 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x264 (=> $x235 $x266)))
 (let (($x263 (= $x235 $x236)))
 (let (($x250 (and (and (and (and (and $x263 $x264) $x267) $x243) $x50) $x242)))
 (let (($x254 (= $x250 true)))
 (let ((?x183 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x183)))
 (let (($x222 (= ?x219 input.dst.llvm-%val)))
 (let (($x225 (= $x222 true)))
 (let (($x265 (= $x225 true)))
 (let (($x215 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x116 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x182 (ite $x116 (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x233 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x144 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x176 (ite $x144 (bvuge ?x14 (bvsub ?x14 (_ bv0 32))) (bvult ?x14 (bvsub ?x14 (_ bv0 32))))))
 (let (($x209 (and true $x176)))
 (let (($x33 (and $x176 $x209)))
 (let (($x227 (and (and (and $x209 $x33) $x233) $x182)))
 (let (($x232 (and $x227 $x215)))
 (let ((?x19 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x136 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x95 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x31 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x71 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x39 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x47 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x199 (and (and true (= (select input.dst.llvm-mem.alloc ?x47) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x39) (_ bv1 8)))))
 (let (($x191 (and (and $x199 (= (select input.dst.llvm-mem.alloc ?x71) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x31) (_ bv1 8)))))
 (let (($x6 (and (and $x191 (= (select input.dst.llvm-mem.alloc ?x25) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x95) (_ bv1 8)))))
 (let (($x187 (and (and $x6 (= (select input.dst.llvm-mem.alloc ?x136) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x19) (_ bv1 8)))))
 (let ((?x190 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x52 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x190) (or false (or false $x187)))))
 (let (($x186 (or $x5 $x52)))
 (let (($x165 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x19)))
 (let (($x164 (or false $x165)))
 (let (($x152 (or $x5 $x164)))
 (let (($x217 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x218 (and (and (and $x217 $x152) $x186) $x232)))
 (let (($x20 (= $x218 true)))
 (let (($x221 (= $x20 true)))
 (let (($x197 (= $x221 true)))
 (let (($x202 (= $x217 true)))
 (let (($x174 (= $x202 true)))
 (let (($x228 (= $x174 true)))
 (let (($x177 (= $x186 true)))
 (let (($x231 (= $x177 true)))
 (let (($x158 (= $x231 true)))
 (let (($x156 (= $x152 true)))
 (let (($x189 (= $x156 true)))
 (let (($x155 (= $x189 true)))
 (let ((?x157 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x157)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x129 $x159)))
 (let (($x151 (and $x168 $x212)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x109 $x151)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x170 (and $x118 $x208)))
 (let (($x204 (= $x170 true)))
 (let (($x195 (= $x204 true)))
 (let (($x173 (= $x195 true)))
 (let ((?x15 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x27 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x146 (ite $x116 (bvuge ?x15 (bvsub ?x15 (_ bv4 32))) (bvult ?x15 (bvsub ?x15 (_ bv4 32))))))
 (let (($x102 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x119 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x30 (ite $x144 (bvuge input.dst.llvm-%call.Lentry%2%d ?x119) (bvult input.dst.llvm-%call.Lentry%2%d ?x119))))
 (let (($x105 (and true $x30)))
 (let (($x85 (and $x30 $x105)))
 (let (($x98 (and (and (and $x105 $x85) $x102) $x146)))
 (let (($x125 (and $x98 $x27)))
 (let (($x97 (= $x125 true)))
 (let (($x106 (= $x97 true)))
 (let (($x113 (= $x106 true)))
 (let (($x192 (and $x113 $x173)))
 (let (($x154 (and $x192 $x155)))
 (let (($x22 (and $x154 $x158)))
 (let (($x62 (and $x22 $x228)))
 (let (($x206 (and $x62 $x197)))
 (let (($x262 (and $x206 $x265)))
 (let (($x255 (and $x262 $x254)))
 (let ((?x74 (store (store (store input.dst.llvm-mem.alloc ?x47 (_ bv2 8)) ?x39 (_ bv2 8)) ?x71 (_ bv2 8))))
 (let ((?x75 (store (store (store (store ?x74 ?x31 (_ bv2 8)) ?x25 (_ bv2 8)) ?x95 (_ bv2 8)) ?x136 (_ bv2 8))))
 (let ((?x46 (store ?x75 ?x19 (_ bv2 8))))
 (let ((?x21 (ite $x5 input.dst.llvm-mem.alloc ?x46)))
 (let (($x16 (and (and true (= (select ?x21 ?x93) (_ bv2 8))) (= (select ?x21 ?x141) (_ bv2 8)))))
 (let (($x137 (and (and $x16 (= (select ?x21 ?x127) (_ bv2 8))) (= (select ?x21 ?x90) (_ bv2 8)))))
 (let (($x114 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false $x137)))))
 (let (($x64 (and (and true (= (select ?x21 ?x130) (_ bv2 8))) (= (select ?x21 ?x23) (_ bv2 8)))))
 (let (($x9 (and (and $x64 (= (select ?x21 ?x61) (_ bv2 8))) (= (select ?x21 ?x65) (_ bv2 8)))))
 (let (($x32 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) (or false (or false $x9)))))
 (let (($x70 (and $x32 $x114)))
 (let (($x261 (and $x70 $x255)))
 (let (($x316 (=> $x261 $x315)))
 (let (($x77 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x124 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x55 $x124) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x318 (and $x77 (not $x316))))
 (let (($x288 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x281 (select solver-mem_0 us-bounded-var!)))
 (let ((?x190 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x286 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x190))))
 (ite $x286 (= ?x281 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x281 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x288) $x318)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 177 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x97 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x97)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x98 $x27)))
 (let (($x113 (and $x125 $x106)))
 (let (($x146 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x146 $x113)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x188 (and $x84 $x110)))
 (let (($x166 (= $x188 true)))
 (let (($x12 (= $x166 true)))
 (let (($x193 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x191 (= $x205 $x193)))
 (let (($x178 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x139 (=> $x178 $x191)))
 (let (($x189 (= (_ bv0 32) (_ bv0 32))))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x211 (= $x179 $x189)))
 (let (($x185 (=> $x178 $x211)))
 (let (($x200 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x199 (=> $x178 $x200)))
 (let (($x169 (= $x178 $x193)))
 (let (($x154 (= false false)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x172 (=> $x156 $x154)))
 (let (($x155 (= $x156 $x189)))
 (let (($x6 (and (and (and (and (and $x155 $x172) $x169) $x199) $x185) $x139)))
 (let (($x99 (= $x6 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x118 (concat ?x115 (concat ?x96 ?x123)))))
 (let (($x173 (= ?x132 input.dst.llvm-%val)))
 (let (($x192 (= $x173 true)))
 (let (($x165 (= $x192 true)))
 (let (($x109 (= input.dst.llvm-%val ?x132)))
 (let (($x159 (and (and (and $x84 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x110) $x109)))
 (let (($x70 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x168 (and $x70 $x159)))
 (let ((?x272 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x141 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x54 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x9 (and (and (and (and true (= ?x21 (_ bv1 8))) (= ?x69 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x67 (_ bv1 8)))))
 (let (($x94 (and (and (and (and $x9 (= ?x54 (_ bv1 8))) (= ?x73 (_ bv1 8))) (= ?x141 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x272) (_ bv1 8)))))
 (let (($x90 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x92 (=> $x90 (or false (or false $x94)))))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x7 (or $x190 $x92)))
 (let ((?x76 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x31 (= (bvand ?x76 (_ bv4294967292 32)) ?x76)))
 (let (($x17 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x76 (bvsub ?x76 (_ bv4 32))) (bvult ?x76 (bvsub ?x76 (_ bv4 32))))))
 (let (($x40 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x35 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x77 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x35) (bvult input.dst.llvm-%call.Lentry%2%d ?x35))))
 (let (($x60 (and true $x77)))
 (let (($x5 (and $x77 $x60)))
 (let (($x74 (and (and (and $x60 $x5) $x40) $x17)))
 (let (($x28 (and $x74 $x31)))
 (let (($x212 (and (and $x28 $x7) $x168)))
 (let (($x281 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x272)))
 (let (($x319 (or false $x281)))
 (let (($x53 (or $x190 $x319)))
 (let (($x151 (and $x53 $x212)))
 (let (($x208 (= $x151 true)))
 (let (($x170 (= $x208 true)))
 (let (($x204 (= $x170 true)))
 (let (($x144 (= $x70 true)))
 (let (($x122 (= $x144 true)))
 (let (($x119 (= $x122 true)))
 (let (($x136 (= $x7 true)))
 (let (($x147 (= $x136 true)))
 (let (($x137 (= $x147 true)))
 (let (($x25 (= $x28 true)))
 (let (($x87 (= $x25 true)))
 (let (($x24 (= $x87 true)))
 (let (($x55 (= $x53 true)))
 (let (($x68 (= $x55 true)))
 (let (($x124 (= $x68 true)))
 (let (($x95 (and $x124 $x24)))
 (let (($x117 (and $x95 $x137)))
 (let (($x138 (and $x117 $x119)))
 (let (($x195 (and $x138 $x204)))
 (let (($x164 (and $x195 $x165)))
 (let (($x161 (and $x164 $x99)))
 (let (($x187 (=> $x161 $x12)))
 (let (($x288 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x270 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x280 $x270) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x288 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x97 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x97)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x98 $x27)))
 (let (($x113 (and $x125 $x106)))
 (let (($x146 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x146 $x113)))
 (let (($x102 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x102)))))
 (let (($x188 (and $x84 $x110)))
 (let (($x166 (= $x188 true)))
 (let (($x12 (= $x166 true)))
 (let (($x193 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x191 (= $x205 $x193)))
 (let (($x178 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x139 (=> $x178 $x191)))
 (let (($x189 (= (_ bv0 32) (_ bv0 32))))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x211 (= $x179 $x189)))
 (let (($x185 (=> $x178 $x211)))
 (let (($x200 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x199 (=> $x178 $x200)))
 (let (($x169 (= $x178 $x193)))
 (let (($x154 (= false false)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x172 (=> $x156 $x154)))
 (let (($x155 (= $x156 $x189)))
 (let (($x6 (and (and (and (and (and $x155 $x172) $x169) $x199) $x185) $x139)))
 (let (($x99 (= $x6 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x118 (concat ?x115 (concat ?x96 ?x123)))))
 (let (($x173 (= ?x132 input.dst.llvm-%val)))
 (let (($x192 (= $x173 true)))
 (let (($x165 (= $x192 true)))
 (let (($x109 (= input.dst.llvm-%val ?x132)))
 (let (($x159 (and (and (and $x84 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x110) $x109)))
 (let (($x70 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x168 (and $x70 $x159)))
 (let ((?x272 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x141 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x73 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x54 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x61 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x9 (and (and (and (and true (= ?x21 (_ bv1 8))) (= ?x69 (_ bv1 8))) (= ?x61 (_ bv1 8))) (= ?x67 (_ bv1 8)))))
 (let (($x94 (and (and (and (and $x9 (= ?x54 (_ bv1 8))) (= ?x73 (_ bv1 8))) (= ?x141 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x272) (_ bv1 8)))))
 (let (($x90 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x92 (=> $x90 (or false (or false $x94)))))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x7 (or $x190 $x92)))
 (let ((?x76 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x31 (= (bvand ?x76 (_ bv4294967292 32)) ?x76)))
 (let (($x17 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x76 (bvsub ?x76 (_ bv4 32))) (bvult ?x76 (bvsub ?x76 (_ bv4 32))))))
 (let (($x40 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x35 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x77 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x35) (bvult input.dst.llvm-%call.Lentry%2%d ?x35))))
 (let (($x60 (and true $x77)))
 (let (($x5 (and $x77 $x60)))
 (let (($x74 (and (and (and $x60 $x5) $x40) $x17)))
 (let (($x28 (and $x74 $x31)))
 (let (($x212 (and (and $x28 $x7) $x168)))
 (let (($x281 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x272)))
 (let (($x319 (or false $x281)))
 (let (($x53 (or $x190 $x319)))
 (let (($x151 (and $x53 $x212)))
 (let (($x208 (= $x151 true)))
 (let (($x170 (= $x208 true)))
 (let (($x204 (= $x170 true)))
 (let (($x144 (= $x70 true)))
 (let (($x122 (= $x144 true)))
 (let (($x119 (= $x122 true)))
 (let (($x136 (= $x7 true)))
 (let (($x147 (= $x136 true)))
 (let (($x137 (= $x147 true)))
 (let (($x25 (= $x28 true)))
 (let (($x87 (= $x25 true)))
 (let (($x24 (= $x87 true)))
 (let (($x55 (= $x53 true)))
 (let (($x68 (= $x55 true)))
 (let (($x124 (= $x68 true)))
 (let (($x95 (and $x124 $x24)))
 (let (($x117 (and $x95 $x137)))
 (let (($x138 (and $x117 $x119)))
 (let (($x195 (and $x138 $x204)))
 (let (($x164 (and $x195 $x165)))
 (let (($x161 (and $x164 $x99)))
 (let (($x187 (=> $x161 $x12)))
 (let (($x288 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x270 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x280 $x270) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x288 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x166 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x166)))
 (let (($x187 (= ?x12 input.dst.llvm-%val)))
 (let (($x10 (= $x187 true)))
 (let (($x193 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x185 (= $x211 $x193)))
 (let (($x178 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x216 (=> $x178 $x185)))
 (let (($x155 (= (_ bv0 32) (_ bv0 32))))
 (let (($x149 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x207 (= $x149 $x155)))
 (let (($x179 (=> $x178 $x207)))
 (let (($x34 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x200 (=> $x178 $x34)))
 (let (($x169 (= $x178 $x193)))
 (let (($x172 (= false false)))
 (let (($x189 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x196 (=> $x189 $x172)))
 (let (($x154 (= $x189 $x155)))
 (let (($x99 (and (and (and (and (and $x154 $x196) $x169) $x200) $x179) $x216)))
 (let (($x161 (= $x99 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x123 (concat ?x115 (concat ?x148 ?x162)))))
 (let (($x192 (= ?x120 input.dst.llvm-%val)))
 (let (($x165 (= $x192 true)))
 (let (($x164 (= $x165 true)))
 (let (($x121 (= input.dst.llvm-%val ?x120)))
 (let ((?x125 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x125)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x146 $x83)))
 (let (($x106 (and $x27 $x97)))
 (let (($x108 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x108 $x106)))
 (let (($x104 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x107 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x107)))))
 (let (($x159 (and (and (and $x30 $x104) $x113) $x121)))
 (let (($x144 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x168 (and $x144 $x159)))
 (let ((?x283 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x8 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x9 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x43 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x54 (and (and (and (and true (= ?x134 (_ bv1 8))) (= ?x18 (_ bv1 8))) (= ?x43 (_ bv1 8))) (= ?x9 (_ bv1 8)))))
 (let (($x81 (and (and (and (and $x54 (= ?x8 (_ bv1 8))) (= ?x66 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x283) (_ bv1 8)))))
 (let (($x136 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x147 (=> $x136 (or false (or false $x81)))))
 (let (($x282 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x19 (or $x282 $x147)))
 (let ((?x135 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x28 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x39 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x135 (bvsub ?x135 (_ bv4 32))) (bvult ?x135 (bvsub ?x135 (_ bv4 32))))))
 (let (($x40 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x35 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x60 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x35) (bvult input.dst.llvm-%call.Lentry%2%d ?x35))))
 (let (($x5 (and true $x60)))
 (let (($x128 (and $x60 $x5)))
 (let (($x133 (and (and (and $x5 $x128) $x40) $x39)))
 (let (($x25 (and $x133 $x28)))
 (let (($x151 (and (and $x25 $x19) $x168)))
 (let (($x287 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x283)))
 (let (($x53 (or false $x287)))
 (let (($x55 (or $x282 $x53)))
 (let (($x208 (and $x55 $x151)))
 (let (($x170 (= $x208 true)))
 (let (($x204 (= $x170 true)))
 (let (($x195 (= $x204 true)))
 (let (($x122 (= $x144 true)))
 (let (($x119 (= $x122 true)))
 (let (($x138 (= $x119 true)))
 (let (($x90 (= $x19 true)))
 (let (($x137 (= $x90 true)))
 (let (($x117 (= $x137 true)))
 (let (($x87 (= $x25 true)))
 (let (($x24 (= $x87 true)))
 (let (($x95 (= $x24 true)))
 (let (($x68 (= $x55 true)))
 (let (($x124 (= $x68 true)))
 (let (($x48 (= $x124 true)))
 (let (($x75 (and $x48 $x95)))
 (let (($x143 (and $x75 $x117)))
 (let (($x157 (and $x143 $x138)))
 (let (($x173 (and $x157 $x195)))
 (let (($x152 (and $x173 $x164)))
 (let (($x188 (and $x152 $x161)))
 (let (($x180 (=> $x188 $x10)))
 (let (($x319 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x190 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x286 $x190) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x319 (not $x180)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x166 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x166)))
 (let (($x187 (= ?x12 input.dst.llvm-%val)))
 (let (($x10 (= $x187 true)))
 (let (($x193 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x185 (= $x211 $x193)))
 (let (($x178 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x216 (=> $x178 $x185)))
 (let (($x155 (= (_ bv0 32) (_ bv0 32))))
 (let (($x149 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x207 (= $x149 $x155)))
 (let (($x179 (=> $x178 $x207)))
 (let (($x34 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x200 (=> $x178 $x34)))
 (let (($x169 (= $x178 $x193)))
 (let (($x172 (= false false)))
 (let (($x189 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x196 (=> $x189 $x172)))
 (let (($x154 (= $x189 $x155)))
 (let (($x99 (and (and (and (and (and $x154 $x196) $x169) $x200) $x179) $x216)))
 (let (($x161 (= $x99 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x123 (concat ?x115 (concat ?x148 ?x162)))))
 (let (($x192 (= ?x120 input.dst.llvm-%val)))
 (let (($x165 (= $x192 true)))
 (let (($x164 (= $x165 true)))
 (let (($x121 (= input.dst.llvm-%val ?x120)))
 (let ((?x125 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x125)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x146 $x83)))
 (let (($x106 (and $x27 $x97)))
 (let (($x108 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x108 $x106)))
 (let (($x104 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x107 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x107)))))
 (let (($x159 (and (and (and $x30 $x104) $x113) $x121)))
 (let (($x144 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x168 (and $x144 $x159)))
 (let ((?x283 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x66 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x8 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x9 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x43 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x54 (and (and (and (and true (= ?x134 (_ bv1 8))) (= ?x18 (_ bv1 8))) (= ?x43 (_ bv1 8))) (= ?x9 (_ bv1 8)))))
 (let (($x81 (and (and (and (and $x54 (= ?x8 (_ bv1 8))) (= ?x66 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x283) (_ bv1 8)))))
 (let (($x136 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x147 (=> $x136 (or false (or false $x81)))))
 (let (($x282 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x19 (or $x282 $x147)))
 (let ((?x135 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x28 (= (bvand ?x135 (_ bv4294967292 32)) ?x135)))
 (let (($x39 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x135 (bvsub ?x135 (_ bv4 32))) (bvult ?x135 (bvsub ?x135 (_ bv4 32))))))
 (let (($x40 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x35 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x60 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x35) (bvult input.dst.llvm-%call.Lentry%2%d ?x35))))
 (let (($x5 (and true $x60)))
 (let (($x128 (and $x60 $x5)))
 (let (($x133 (and (and (and $x5 $x128) $x40) $x39)))
 (let (($x25 (and $x133 $x28)))
 (let (($x151 (and (and $x25 $x19) $x168)))
 (let (($x287 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x283)))
 (let (($x53 (or false $x287)))
 (let (($x55 (or $x282 $x53)))
 (let (($x208 (and $x55 $x151)))
 (let (($x170 (= $x208 true)))
 (let (($x204 (= $x170 true)))
 (let (($x195 (= $x204 true)))
 (let (($x122 (= $x144 true)))
 (let (($x119 (= $x122 true)))
 (let (($x138 (= $x119 true)))
 (let (($x90 (= $x19 true)))
 (let (($x137 (= $x90 true)))
 (let (($x117 (= $x137 true)))
 (let (($x87 (= $x25 true)))
 (let (($x24 (= $x87 true)))
 (let (($x95 (= $x24 true)))
 (let (($x68 (= $x55 true)))
 (let (($x124 (= $x68 true)))
 (let (($x48 (= $x124 true)))
 (let (($x75 (and $x48 $x95)))
 (let (($x143 (and $x75 $x117)))
 (let (($x157 (and $x143 $x138)))
 (let (($x173 (and $x157 $x195)))
 (let (($x152 (and $x173 $x164)))
 (let (($x188 (and $x152 $x161)))
 (let (($x180 (=> $x188 $x10)))
 (let (($x319 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x190 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x286 $x190) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x319 (not $x180)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677251/query
