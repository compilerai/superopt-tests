==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x32 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x32)))))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x13)))
 (let (($x19 (and $x12 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x36))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x32 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x32)))))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x13)))
 (let (($x19 (and $x12 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x36))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-mem.alloc @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000001))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x01))
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv0 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x105 (= false true)))
 (let (($x44 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x91 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x92 (= $x91 $x44)))
 (let (($x80 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x93 (=> $x80 $x92)))
 (let (($x33 (= false false)))
 (let (($x86 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x89 (and $x80 $x86)))
 (let (($x90 (=> $x89 $x33)))
 (let (($x8 (= (_ bv0 32) (_ bv0 32))))
 (let (($x87 (= $x86 $x8)))
 (let (($x88 (=> $x80 $x87)))
 (let (($x83 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x84 (=> $x80 $x83)))
 (let (($x81 (= $x80 $x44)))
 (let (($x77 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x79 (=> $x77 $x33)))
 (let (($x95 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x77 $x8)) $x79)))
 (let (($x100 (and (and (and (and (and $x95 $x81) $x84) $x88) $x90) $x93)))
 (let (($x40 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x101 (=> $x40 $x100)))
 (let (($x102 (= $x101 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x69 (concat ?x66 (concat ?x62 ?x60)))))
 (let (($x71 (= ?x70 input.dst.llvm-%val)))
 (let (($x72 (= $x71 true)))
 (let (($x56 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x57 (= $x56 true)))
 (let ((?x48 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x48)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x6 $x25)))
 (let (($x50 (and $x37 $x49)))
 (let (($x19 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x19 $x50)))
 (let (($x35 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x35)))))
 (let (($x52 (and $x11 $x51)))
 (let (($x53 (= $x52 true)))
 (let (($x58 (and $x53 $x57)))
 (let (($x73 (and $x58 $x72)))
 (let (($x103 (and $x73 $x102)))
 (let (($x45 (= $x40 $x44)))
 (let (($x5 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x7 (=> $x5 $x33)))
 (let (($x22 (= $x5 $x8)))
 (let (($x9 (and (and $x22 $x7) $x45)))
 (let (($x104 (and $x9 $x103)))
 (let (($x106 (=> $x104 $x105)))
 (let (($x43 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x13 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x43 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x105 (= false true)))
 (let (($x44 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x91 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x92 (= $x91 $x44)))
 (let (($x80 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x93 (=> $x80 $x92)))
 (let (($x33 (= false false)))
 (let (($x86 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x89 (and $x80 $x86)))
 (let (($x90 (=> $x89 $x33)))
 (let (($x8 (= (_ bv0 32) (_ bv0 32))))
 (let (($x87 (= $x86 $x8)))
 (let (($x88 (=> $x80 $x87)))
 (let (($x83 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x84 (=> $x80 $x83)))
 (let (($x81 (= $x80 $x44)))
 (let (($x77 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x79 (=> $x77 $x33)))
 (let (($x95 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x77 $x8)) $x79)))
 (let (($x100 (and (and (and (and (and $x95 $x81) $x84) $x88) $x90) $x93)))
 (let (($x40 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x101 (=> $x40 $x100)))
 (let (($x102 (= $x101 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x69 (concat ?x66 (concat ?x62 ?x60)))))
 (let (($x71 (= ?x70 input.dst.llvm-%val)))
 (let (($x72 (= $x71 true)))
 (let (($x56 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x57 (= $x56 true)))
 (let ((?x48 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x48)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x6 $x25)))
 (let (($x50 (and $x37 $x49)))
 (let (($x19 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x19 $x50)))
 (let (($x35 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x35)))))
 (let (($x52 (and $x11 $x51)))
 (let (($x53 (= $x52 true)))
 (let (($x58 (and $x53 $x57)))
 (let (($x73 (and $x58 $x72)))
 (let (($x103 (and $x73 $x102)))
 (let (($x45 (= $x40 $x44)))
 (let (($x5 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x7 (=> $x5 $x33)))
 (let (($x22 (= $x5 $x8)))
 (let (($x9 (and (and $x22 $x7) $x45)))
 (let (($x104 (and $x9 $x103)))
 (let (($x106 (=> $x104 $x105)))
 (let (($x43 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x13 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x43 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x107 (= false true)))
 (let (($x86 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x94 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x98 (and $x94 $x86)))
 (let (($x89 (not $x98)))
 (let (($x46 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x87 (= $x86 $x46)))
 (let (($x88 (=> $x94 $x87)))
 (let (($x41 (= false false)))
 (let (($x82 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x97 (and $x94 $x82)))
 (let (($x85 (=> $x97 $x41)))
 (let (($x21 (= (_ bv0 32) (_ bv0 32))))
 (let (($x83 (= $x82 $x21)))
 (let (($x84 (=> $x94 $x83)))
 (let (($x80 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x81 (=> $x94 $x80)))
 (let (($x79 (= $x94 $x46)))
 (let (($x76 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x78 (=> $x76 $x41)))
 (let (($x99 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x76 $x21)) $x78)))
 (let (($x102 (and (and (and (and (and (and $x99 $x79) $x81) $x84) $x85) $x88) $x89)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x103 (=> $x22 $x102)))
 (let (($x104 (= $x103 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x63 (concat ?x61 (concat ?x69 ?x59)))))
 (let (($x70 (= ?x67 input.dst.llvm-%val)))
 (let (($x71 (= $x70 true)))
 (let (($x55 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x56 (= $x55 true)))
 (let ((?x37 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x37)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x19 $x34)))
 (let (($x49 (and $x25 $x48)))
 (let (($x44 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x44 $x49)))
 (let (($x35 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x35)))))
 (let (($x51 (and $x28 $x50)))
 (let (($x52 (= $x51 true)))
 (let (($x57 (and $x52 $x56)))
 (let (($x72 (and $x57 $x71)))
 (let (($x105 (and $x72 $x104)))
 (let (($x33 (= $x22 $x46)))
 (let (($x47 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x16 (=> $x47 $x41)))
 (let (($x24 (= $x47 $x21)))
 (let (($x14 (and (and $x24 $x16) $x33)))
 (let (($x106 (and $x14 $x105)))
 (let (($x108 (=> $x106 $x107)))
 (let (($x32 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x42 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x5 $x42) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x32 (not $x108)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let (($x107 (= false true)))
 (let (($x86 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x94 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x98 (and $x94 $x86)))
 (let (($x89 (not $x98)))
 (let (($x46 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x87 (= $x86 $x46)))
 (let (($x88 (=> $x94 $x87)))
 (let (($x41 (= false false)))
 (let (($x82 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x97 (and $x94 $x82)))
 (let (($x85 (=> $x97 $x41)))
 (let (($x21 (= (_ bv0 32) (_ bv0 32))))
 (let (($x83 (= $x82 $x21)))
 (let (($x84 (=> $x94 $x83)))
 (let (($x80 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x81 (=> $x94 $x80)))
 (let (($x79 (= $x94 $x46)))
 (let (($x76 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x78 (=> $x76 $x41)))
 (let (($x99 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x76 $x21)) $x78)))
 (let (($x102 (and (and (and (and (and (and $x99 $x79) $x81) $x84) $x85) $x88) $x89)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x103 (=> $x22 $x102)))
 (let (($x104 (= $x103 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x63 (concat ?x61 (concat ?x69 ?x59)))))
 (let (($x70 (= ?x67 input.dst.llvm-%val)))
 (let (($x71 (= $x70 true)))
 (let (($x55 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x56 (= $x55 true)))
 (let ((?x37 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x37)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x19 $x34)))
 (let (($x49 (and $x25 $x48)))
 (let (($x44 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x44 $x49)))
 (let (($x35 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x35)))))
 (let (($x51 (and $x28 $x50)))
 (let (($x52 (= $x51 true)))
 (let (($x57 (and $x52 $x56)))
 (let (($x72 (and $x57 $x71)))
 (let (($x105 (and $x72 $x104)))
 (let (($x33 (= $x22 $x46)))
 (let (($x47 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x16 (=> $x47 $x41)))
 (let (($x24 (= $x47 $x21)))
 (let (($x14 (and (and $x24 $x16) $x33)))
 (let (($x106 (and $x14 $x105)))
 (let (($x108 (=> $x106 $x107)))
 (let (($x32 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x42 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x5 $x42) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x32 (not $x108)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x127 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x127)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x124)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x123 $x125)))
 (let (($x129 (and $x126 $x128)))
 (let (($x122 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x122 $x129)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x183 (and $x119 $x130)))
 (let (($x184 (= $x183 true)))
 (let (($x65 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x170 (= $x169 $x65)))
 (let (($x158 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x171 (=> $x158 $x170)))
 (let (($x6 (= false false)))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x167 (and $x158 $x164)))
 (let (($x168 (=> $x167 $x6)))
 (let (($x47 (= (_ bv0 32) (_ bv0 32))))
 (let (($x165 (= $x164 $x47)))
 (let (($x166 (=> $x158 $x165)))
 (let (($x161 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x162 (=> $x158 $x161)))
 (let (($x159 (= $x158 $x65)))
 (let (($x155 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x155 $x6)))
 (let (($x173 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x155 $x47)) $x157)))
 (let (($x178 (and (and (and (and (and $x173 $x159) $x162) $x166) $x168) $x171)))
 (let (($x76 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x179 (=> $x76 $x178)))
 (let (($x180 (= $x179 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x140 (concat ?x137 (concat ?x134 ?x132)))))
 (let (($x142 (= input.dst.llvm-%val ?x141)))
 (let (($x145 (and (and (and $x119 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x130) $x142)))
 (let ((?x11 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x87 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x80 (and (and (and (and true (= ?x26 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x90 (_ bv1 8))) (= ?x91 (_ bv1 8)))))
 (let (($x102 (and (and (and (and $x80 (= ?x92 (_ bv1 8))) (= ?x93 (_ bv1 8))) (= ?x87 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x11) (_ bv1 8)))))
 (let (($x105 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x106 (=> $x105 (or false (or false $x102)))))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x73 (or $x66 $x106)))
 (let (($x146 (and $x73 $x145)))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x147 (and $x21 $x146)))
 (let ((?x13 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x72 (= (bvand ?x13 (_ bv4294967292 32)) ?x13)))
 (let (($x34 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x13 (bvsub ?x13 (_ bv4 32))) (bvult ?x13 (bvsub ?x13 (_ bv4 32))))))
 (let (($x77 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x52 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x52) (bvult input.dst.llvm-%call.Lentry%2%d ?x52))))
 (let (($x42 (and true $x51)))
 (let (($x69 (and $x51 $x42)))
 (let (($x9 (and (and (and $x42 $x69) $x77) $x34)))
 (let (($x5 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x11)))
 (let (($x43 (or false $x5)))
 (let (($x33 (or $x66 $x43)))
 (let (($x150 (and (and (and $x33 $x9) $x72) $x147)))
 (let (($x151 (= $x150 true)))
 (let (($x181 (and $x151 $x180)))
 (let (($x112 (= $x76 $x65)))
 (let (($x25 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x68 (=> $x25 $x6)))
 (let (($x19 (= $x25 $x47)))
 (let (($x31 (and (and $x19 $x68) $x112)))
 (let (($x182 (and $x31 $x181)))
 (let (($x185 (=> $x182 $x184)))
 (let (($x53 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x59 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x50 $x59) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x53 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x127 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x127)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x124)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x123 $x125)))
 (let (($x129 (and $x126 $x128)))
 (let (($x122 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x122 $x129)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x183 (and $x119 $x130)))
 (let (($x184 (= $x183 true)))
 (let (($x65 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x170 (= $x169 $x65)))
 (let (($x158 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x171 (=> $x158 $x170)))
 (let (($x6 (= false false)))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x167 (and $x158 $x164)))
 (let (($x168 (=> $x167 $x6)))
 (let (($x47 (= (_ bv0 32) (_ bv0 32))))
 (let (($x165 (= $x164 $x47)))
 (let (($x166 (=> $x158 $x165)))
 (let (($x161 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x162 (=> $x158 $x161)))
 (let (($x159 (= $x158 $x65)))
 (let (($x155 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x155 $x6)))
 (let (($x173 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x155 $x47)) $x157)))
 (let (($x178 (and (and (and (and (and $x173 $x159) $x162) $x166) $x168) $x171)))
 (let (($x76 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x179 (=> $x76 $x178)))
 (let (($x180 (= $x179 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x140 (concat ?x137 (concat ?x134 ?x132)))))
 (let (($x142 (= input.dst.llvm-%val ?x141)))
 (let (($x145 (and (and (and $x119 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x130) $x142)))
 (let ((?x11 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x87 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x80 (and (and (and (and true (= ?x26 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x90 (_ bv1 8))) (= ?x91 (_ bv1 8)))))
 (let (($x102 (and (and (and (and $x80 (= ?x92 (_ bv1 8))) (= ?x93 (_ bv1 8))) (= ?x87 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x11) (_ bv1 8)))))
 (let (($x105 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x106 (=> $x105 (or false (or false $x102)))))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x73 (or $x66 $x106)))
 (let (($x146 (and $x73 $x145)))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x147 (and $x21 $x146)))
 (let ((?x13 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x72 (= (bvand ?x13 (_ bv4294967292 32)) ?x13)))
 (let (($x34 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x13 (bvsub ?x13 (_ bv4 32))) (bvult ?x13 (bvsub ?x13 (_ bv4 32))))))
 (let (($x77 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x52 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x52) (bvult input.dst.llvm-%call.Lentry%2%d ?x52))))
 (let (($x42 (and true $x51)))
 (let (($x69 (and $x51 $x42)))
 (let (($x9 (and (and (and $x42 $x69) $x77) $x34)))
 (let (($x5 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x11)))
 (let (($x43 (or false $x5)))
 (let (($x33 (or $x66 $x43)))
 (let (($x150 (and (and (and $x33 $x9) $x72) $x147)))
 (let (($x151 (= $x150 true)))
 (let (($x181 (and $x151 $x180)))
 (let (($x112 (= $x76 $x65)))
 (let (($x25 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x68 (=> $x25 $x6)))
 (let (($x19 (= $x25 $x47)))
 (let (($x31 (and (and $x19 $x68) $x112)))
 (let (($x182 (and $x31 $x181)))
 (let (($x185 (=> $x182 $x184)))
 (let (($x53 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x59 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x50 $x59) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x53 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x185 (= $x184 true)))
 (let (($x76 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x176 (= $x166 $x76)))
 (let (($x173 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x167 (=> $x173 $x176)))
 (let (($x40 (= false false)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x164 (and $x173 $x162)))
 (let (($x165 (=> $x164 $x40)))
 (let (($x41 (= (_ bv0 32) (_ bv0 32))))
 (let (($x175 (= $x162 $x41)))
 (let (($x163 (=> $x173 $x175)))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x160 (=> $x173 $x174)))
 (let (($x158 (= $x173 $x76)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x156 $x40)))
 (let (($x177 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x156 $x41)) $x157)))
 (let (($x179 (and (and (and (and (and $x177 $x158) $x160) $x163) $x165) $x167)))
 (let (($x75 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x180 (=> $x75 $x179)))
 (let (($x181 (= $x180 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x134 (concat ?x136 (concat ?x131 ?x130)))))
 (let (($x135 (= input.dst.llvm-%val ?x132)))
 (let ((?x125 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x125)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x121 $x123)))
 (let (($x127 (and $x124 $x126)))
 (let (($x143 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x143 $x127)))
 (let (($x107 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x142 (and (and (and $x71 $x107) $x128) $x135)))
 (let ((?x5 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x87 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x80 (and (and (and (and true (= ?x37 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x90 (_ bv1 8))) (= ?x91 (_ bv1 8)))))
 (let (($x102 (and (and (and (and $x80 (= ?x92 (_ bv1 8))) (= ?x93 (_ bv1 8))) (= ?x87 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x5) (_ bv1 8)))))
 (let (($x106 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x73 (=> $x106 (or false (or false $x102)))))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (or $x66 $x73)))
 (let (($x145 (and $x74 $x142)))
 (let (($x58 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (and $x58 $x145)))
 (let ((?x10 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x72 (= (bvand ?x10 (_ bv4294967292 32)) ?x10)))
 (let (($x44 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x10 (bvsub ?x10 (_ bv4 32))) (bvult ?x10 (bvsub ?x10 (_ bv4 32))))))
 (let (($x77 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x52 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x42 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x52) (bvult input.dst.llvm-%call.Lentry%2%d ?x52))))
 (let (($x69 (and true $x42)))
 (let (($x16 (and $x42 $x69)))
 (let (($x148 (and (and (and $x69 $x16) $x77) $x44)))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x5)))
 (let (($x33 (or false $x43)))
 (let (($x20 (or $x66 $x33)))
 (let (($x151 (and (and (and $x20 $x148) $x72) $x146)))
 (let (($x152 (= $x151 true)))
 (let (($x182 (and $x152 $x181)))
 (let (($x65 (= $x75 $x76)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x12 (=> $x48 $x40)))
 (let (($x56 (= $x48 $x41)))
 (let (($x31 (and (and $x56 $x12) $x65)))
 (let (($x183 (and $x31 $x182)))
 (let (($x186 (=> $x183 $x185)))
 (let (($x68 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x25 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x47 $x25) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x68 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x185 (= $x184 true)))
 (let (($x76 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x176 (= $x166 $x76)))
 (let (($x173 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x167 (=> $x173 $x176)))
 (let (($x40 (= false false)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x164 (and $x173 $x162)))
 (let (($x165 (=> $x164 $x40)))
 (let (($x41 (= (_ bv0 32) (_ bv0 32))))
 (let (($x175 (= $x162 $x41)))
 (let (($x163 (=> $x173 $x175)))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x160 (=> $x173 $x174)))
 (let (($x158 (= $x173 $x76)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x156 $x40)))
 (let (($x177 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x156 $x41)) $x157)))
 (let (($x179 (and (and (and (and (and $x177 $x158) $x160) $x163) $x165) $x167)))
 (let (($x75 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x180 (=> $x75 $x179)))
 (let (($x181 (= $x180 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x134 (concat ?x136 (concat ?x131 ?x130)))))
 (let (($x135 (= input.dst.llvm-%val ?x132)))
 (let ((?x125 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x125)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x121 $x123)))
 (let (($x127 (and $x124 $x126)))
 (let (($x143 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x143 $x127)))
 (let (($x107 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x142 (and (and (and $x71 $x107) $x128) $x135)))
 (let ((?x5 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x87 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x80 (and (and (and (and true (= ?x37 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x90 (_ bv1 8))) (= ?x91 (_ bv1 8)))))
 (let (($x102 (and (and (and (and $x80 (= ?x92 (_ bv1 8))) (= ?x93 (_ bv1 8))) (= ?x87 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x5) (_ bv1 8)))))
 (let (($x106 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x73 (=> $x106 (or false (or false $x102)))))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (or $x66 $x73)))
 (let (($x145 (and $x74 $x142)))
 (let (($x58 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (and $x58 $x145)))
 (let ((?x10 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x72 (= (bvand ?x10 (_ bv4294967292 32)) ?x10)))
 (let (($x44 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x10 (bvsub ?x10 (_ bv4 32))) (bvult ?x10 (bvsub ?x10 (_ bv4 32))))))
 (let (($x77 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x52 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x42 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x52) (bvult input.dst.llvm-%call.Lentry%2%d ?x52))))
 (let (($x69 (and true $x42)))
 (let (($x16 (and $x42 $x69)))
 (let (($x148 (and (and (and $x69 $x16) $x77) $x44)))
 (let (($x43 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x5)))
 (let (($x33 (or false $x43)))
 (let (($x20 (or $x66 $x33)))
 (let (($x151 (and (and (and $x20 $x148) $x72) $x146)))
 (let (($x152 (= $x151 true)))
 (let (($x182 (and $x152 $x181)))
 (let (($x65 (= $x75 $x76)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x12 (=> $x48 $x40)))
 (let (($x56 (= $x48 $x41)))
 (let (($x31 (and (and $x56 $x12) $x65)))
 (let (($x183 (and $x31 $x182)))
 (let (($x186 (=> $x183 $x185)))
 (let (($x68 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x25 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x47 $x25) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x68 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00021540)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000084) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000087) #x01
    (ite (= x!0 #x00000088) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000086) #x01
    (ite (= x!0 #x00000089) #x01
    (ite (= x!0 #x00000083) #x01
    (ite (= x!0 #x0000008a) #x01
    (ite (= x!0 #x00000085) #x01
      #x02)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000088 x!0)
                    (ite (bvule #x00000089 x!0)
                         (ite (bvule #x0000008a x!0) #x0000008a #x00000089)
                         #x00000088)
                    #x00000087)))
    (let ((a!2 (ite (bvule #x00000085 x!0)
                    (ite (bvule #x00000086 x!0)
                         (ite (bvule #x00000087 x!0) a!1 #x00000086)
                         #x00000085)
                    #x00000084)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000083 x!0)
                         (ite (bvule #x00000084 x!0) a!2 #x00000083)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x39d00000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x1a031c52)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x95610fb7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x02)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1a031c54) #x01
    (ite (= x!0 #x95610fb4) #x03
    (ite (= x!0 #x1a031c57) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x1a031c53) #x01
    (ite (= x!0 #x1a031c56) #x01
    (ite (= x!0 #x95610fb5) #x03
    (ite (= x!0 #x95610fb7) #x03
    (ite (= x!0 #x1a031c58) #x01
    (ite (= x!0 #x1a031c52) #x01
    (ite (= x!0 #x1a031c59) #x01
    (ite (= x!0 #x1a031c55) #x01
      #x04)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x95610fb5 x!0)
                    (ite (bvule #x95610fb7 x!0)
                         (ite (bvule #x95610fb8 x!0) #x95610fb8 #x95610fb7)
                         #x95610fb5)
                    #x95610fb4)))
    (let ((a!2 (ite (bvule #x1a031c58 x!0)
                    (ite (bvule #x1a031c59 x!0)
                         (ite (bvule #x95610fb4 x!0) a!1 #x1a031c59)
                         #x1a031c58)
                    #x1a031c57)))
    (let ((a!3 (ite (bvule #x1a031c55 x!0)
                    (ite (bvule #x1a031c56 x!0)
                         (ite (bvule #x1a031c57 x!0) a!2 #x1a031c56)
                         #x1a031c55)
                    #x1a031c54)))
      (ite (bvule #x1a031c52 x!0)
           (ite (bvule #x1a031c53 x!0)
                (ite (bvule #x1a031c54 x!0) a!3 #x1a031c53)
                #x1a031c52)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x24 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x30 (= $x24 true)))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x177 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x165 (and $x177 $x163)))
 (let (($x178 (not $x165)))
 (let (($x75 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x171 (= $x163 $x75)))
 (let (($x164 (=> $x177 $x171)))
 (let (($x18 (= false false)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x162 (and $x177 $x160)))
 (let (($x175 (=> $x162 $x18)))
 (let (($x63 (= (_ bv0 32) (_ bv0 32))))
 (let (($x170 (= $x160 $x63)))
 (let (($x161 (=> $x177 $x170)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x159 (=> $x177 $x169)))
 (let (($x173 (= $x177 $x75)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x172 $x18)))
 (let (($x176 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x172 $x63)) $x157)))
 (let (($x183 (and (and (and (and (and (and $x176 $x173) $x159) $x161) $x175) $x164) $x178)))
 (let (($x17 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (=> $x17 $x183)))
 (let (($x185 (= $x184 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x131 (concat ?x140 (concat ?x129 ?x128)))))
 (let (($x139 (= input.dst.llvm-%val ?x130)))
 (let ((?x123 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x123)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x120 $x121)))
 (let (($x125 (and $x122 $x124)))
 (let (($x138 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x138 $x125)))
 (let (($x108 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x135 (and (and (and $x14 $x108) $x126) $x139)))
 (let ((?x43 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x87 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x80 (and (and (and (and true (= ?x35 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x90 (_ bv1 8))) (= ?x91 (_ bv1 8)))))
 (let (($x102 (and (and (and (and $x80 (= ?x92 (_ bv1 8))) (= ?x93 (_ bv1 8))) (= ?x87 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x43) (_ bv1 8)))))
 (let (($x73 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x74 (=> $x73 (or false (or false $x102)))))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x105 (or $x66 $x74)))
 (let (($x142 (and $x105 $x135)))
 (let (($x57 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x145 (and $x57 $x142)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x72 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x23 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x77 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x52 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x69 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x52) (bvult input.dst.llvm-%call.Lentry%2%d ?x52))))
 (let (($x16 (and true $x69)))
 (let (($x34 (and $x69 $x16)))
 (let (($x147 (and (and (and $x16 $x34) $x77) $x23)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x43)))
 (let (($x20 (or false $x33)))
 (let (($x7 (or $x66 $x20)))
 (let (($x152 (and (and (and $x7 $x147) $x72) $x145)))
 (let (($x153 (= $x152 true)))
 (let (($x186 (and $x153 $x185)))
 (let (($x76 (= $x17 $x75)))
 (let (($x39 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x6 (=> $x39 $x18)))
 (let (($x46 (= $x39 $x63)))
 (let (($x31 (and (and $x46 $x6) $x76)))
 (let (($x187 (and $x31 $x186)))
 (let (($x188 (=> $x187 $x30)))
 (let (($x12 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x48 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x41 $x48) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x12 (not $x188))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x24 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x30 (= $x24 true)))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x177 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x165 (and $x177 $x163)))
 (let (($x178 (not $x165)))
 (let (($x75 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x171 (= $x163 $x75)))
 (let (($x164 (=> $x177 $x171)))
 (let (($x18 (= false false)))
 (let (($x160 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x162 (and $x177 $x160)))
 (let (($x175 (=> $x162 $x18)))
 (let (($x63 (= (_ bv0 32) (_ bv0 32))))
 (let (($x170 (= $x160 $x63)))
 (let (($x161 (=> $x177 $x170)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x159 (=> $x177 $x169)))
 (let (($x173 (= $x177 $x75)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x172 $x18)))
 (let (($x176 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x172 $x63)) $x157)))
 (let (($x183 (and (and (and (and (and (and $x176 $x173) $x159) $x161) $x175) $x164) $x178)))
 (let (($x17 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (=> $x17 $x183)))
 (let (($x185 (= $x184 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x131 (concat ?x140 (concat ?x129 ?x128)))))
 (let (($x139 (= input.dst.llvm-%val ?x130)))
 (let ((?x123 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x123)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x120 $x121)))
 (let (($x125 (and $x122 $x124)))
 (let (($x138 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x138 $x125)))
 (let (($x108 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x115 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x115)))))
 (let (($x135 (and (and (and $x14 $x108) $x126) $x139)))
 (let ((?x43 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x87 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x80 (and (and (and (and true (= ?x35 (_ bv1 8))) (= ?x67 (_ bv1 8))) (= ?x90 (_ bv1 8))) (= ?x91 (_ bv1 8)))))
 (let (($x102 (and (and (and (and $x80 (= ?x92 (_ bv1 8))) (= ?x93 (_ bv1 8))) (= ?x87 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x43) (_ bv1 8)))))
 (let (($x73 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x74 (=> $x73 (or false (or false $x102)))))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x105 (or $x66 $x74)))
 (let (($x142 (and $x105 $x135)))
 (let (($x57 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x145 (and $x57 $x142)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x72 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x23 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x77 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x52 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x69 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x52) (bvult input.dst.llvm-%call.Lentry%2%d ?x52))))
 (let (($x16 (and true $x69)))
 (let (($x34 (and $x69 $x16)))
 (let (($x147 (and (and (and $x16 $x34) $x77) $x23)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x43)))
 (let (($x20 (or false $x33)))
 (let (($x7 (or $x66 $x20)))
 (let (($x152 (and (and (and $x7 $x147) $x72) $x145)))
 (let (($x153 (= $x152 true)))
 (let (($x186 (and $x153 $x185)))
 (let (($x76 (= $x17 $x75)))
 (let (($x39 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x6 (=> $x39 $x18)))
 (let (($x46 (= $x39 $x63)))
 (let (($x31 (and (and $x46 $x6) $x76)))
 (let (($x187 (and $x31 $x186)))
 (let (($x188 (=> $x187 $x30)))
 (let (($x12 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x48 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x41 $x48) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x12 (not $x188))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00021540)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000084) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000087) #x01
    (ite (= x!0 #x00000088) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000086) #x01
    (ite (= x!0 #x00000089) #x01
    (ite (= x!0 #x00000083) #x01
    (ite (= x!0 #x0000008a) #x01
    (ite (= x!0 #x00000085) #x01
      #x02)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000088 x!0)
                    (ite (bvule #x00000089 x!0)
                         (ite (bvule #x0000008a x!0) #x0000008a #x00000089)
                         #x00000088)
                    #x00000087)))
    (let ((a!2 (ite (bvule #x00000085 x!0)
                    (ite (bvule #x00000086 x!0)
                         (ite (bvule #x00000087 x!0) a!1 #x00000086)
                         #x00000085)
                    #x00000084)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000083 x!0)
                         (ite (bvule #x00000084 x!0) a!2 #x00000083)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x39d00000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x1a031c52)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x95610fb7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x02020202)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x95610fb4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x02)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1a031c54) #x01
    (ite (= x!0 #x95610fb4) #x03
    (ite (= x!0 #x1a031c57) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x1a031c53) #x01
    (ite (= x!0 #x1a031c56) #x01
    (ite (= x!0 #x95610fb5) #x03
    (ite (= x!0 #x95610fb7) #x03
    (ite (= x!0 #x1a031c58) #x01
    (ite (= x!0 #x1a031c52) #x01
    (ite (= x!0 #x1a031c59) #x01
    (ite (= x!0 #x1a031c55) #x01
      #x04)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x95610fb5 x!0)
                    (ite (bvule #x95610fb7 x!0)
                         (ite (bvule #x95610fb8 x!0) #x95610fb8 #x95610fb7)
                         #x95610fb5)
                    #x95610fb4)))
    (let ((a!2 (ite (bvule #x1a031c58 x!0)
                    (ite (bvule #x1a031c59 x!0)
                         (ite (bvule #x95610fb4 x!0) a!1 #x1a031c59)
                         #x1a031c58)
                    #x1a031c57)))
    (let ((a!3 (ite (bvule #x1a031c55 x!0)
                    (ite (bvule #x1a031c56 x!0)
                         (ite (bvule #x1a031c57 x!0) a!2 #x1a031c56)
                         #x1a031c55)
                    #x1a031c54)))
      (ite (bvule #x1a031c52 x!0)
           (ite (bvule #x1a031c53 x!0)
                (ite (bvule #x1a031c54 x!0) a!3 #x1a031c53)
                #x1a031c52)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x186 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x186)))
 (let (($x24 (= ?x187 input.dst.llvm-%val)))
 (let (($x30 (= $x24 true)))
 (let (($x112 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x180 (= $x161 $x112)))
 (let (($x176 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x162 (=> $x176 $x180)))
 (let (($x50 (= false false)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x160 (and $x176 $x159)))
 (let (($x170 (=> $x160 $x50)))
 (let (($x60 (= (_ bv0 32) (_ bv0 32))))
 (let (($x179 (= $x159 $x60)))
 (let (($x174 (=> $x176 $x179)))
 (let (($x167 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x158 (=> $x176 $x167)))
 (let (($x177 (= $x176 $x112)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x168 $x50)))
 (let (($x181 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x168 $x60)) $x157)))
 (let (($x165 (and (and (and (and (and $x181 $x177) $x158) $x174) $x170) $x162)))
 (let (($x65 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (=> $x65 $x165)))
 (let (($x183 (= $x178 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x129 (concat ?x134 (concat ?x127 ?x126)))))
 (let (($x133 (= input.dst.llvm-%val ?x128)))
 (let ((?x121 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x121)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x107 $x120)))
 (let (($x123 (and $x143 $x122)))
 (let (($x137 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x137 $x123)))
 (let (($x110 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x139 (and (and (and $x14 $x110) $x124) $x133)))
 (let ((?x43 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x38 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x35 (_ bv1 8))) (= ?x36 (_ bv1 8))) (= ?x38 (_ bv1 8))) (= ?x79 (_ bv1 8)))))
 (let (($x89 (and (and (and (and $x95 (= ?x81 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x43) (_ bv1 8)))))
 (let (($x104 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x74 (=> $x104 (or false (or false $x89)))))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x58 (or $x8 $x74)))
 (let (($x135 (and $x58 $x139)))
 (let (($x150 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x142 (and $x150 $x135)))
 (let ((?x148 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x70 (= (bvand ?x148 (_ bv4294967292 32)) ?x148)))
 (let (($x27 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x148 (bvsub ?x148 (_ bv4 32))) (bvult ?x148 (bvsub ?x148 (_ bv4 32))))))
 (let (($x45 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x32 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x69 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x32) (bvult input.dst.llvm-%call.Lentry%2%d ?x32))))
 (let (($x16 (and true $x69)))
 (let (($x34 (and $x69 $x16)))
 (let (($x147 (and (and (and $x16 $x34) $x45) $x27)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x43)))
 (let (($x20 (or false $x33)))
 (let (($x7 (or $x8 $x20)))
 (let (($x153 (and (and (and $x7 $x147) $x70) $x142)))
 (let (($x154 (= $x153 true)))
 (let (($x184 (and $x154 $x183)))
 (let (($x17 (= $x65 $x112)))
 (let (($x47 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x29 (=> $x47 $x50)))
 (let (($x59 (= $x47 $x60)))
 (let (($x76 (and (and $x59 $x29) $x17)))
 (let (($x185 (and $x76 $x184)))
 (let (($x188 (=> $x185 $x30)))
 (let (($x18 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x19 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x19) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x18 (not $x188))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x186 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x186)))
 (let (($x24 (= ?x187 input.dst.llvm-%val)))
 (let (($x30 (= $x24 true)))
 (let (($x112 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x180 (= $x161 $x112)))
 (let (($x176 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x162 (=> $x176 $x180)))
 (let (($x50 (= false false)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x160 (and $x176 $x159)))
 (let (($x170 (=> $x160 $x50)))
 (let (($x60 (= (_ bv0 32) (_ bv0 32))))
 (let (($x179 (= $x159 $x60)))
 (let (($x174 (=> $x176 $x179)))
 (let (($x167 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x158 (=> $x176 $x167)))
 (let (($x177 (= $x176 $x112)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x168 $x50)))
 (let (($x181 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x168 $x60)) $x157)))
 (let (($x165 (and (and (and (and (and $x181 $x177) $x158) $x174) $x170) $x162)))
 (let (($x65 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (=> $x65 $x165)))
 (let (($x183 (= $x178 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x129 (concat ?x134 (concat ?x127 ?x126)))))
 (let (($x133 (= input.dst.llvm-%val ?x128)))
 (let ((?x121 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x121)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x107 $x120)))
 (let (($x123 (and $x143 $x122)))
 (let (($x137 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x137 $x123)))
 (let (($x110 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x139 (and (and (and $x14 $x110) $x124) $x133)))
 (let ((?x43 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x38 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x35 (_ bv1 8))) (= ?x36 (_ bv1 8))) (= ?x38 (_ bv1 8))) (= ?x79 (_ bv1 8)))))
 (let (($x89 (and (and (and (and $x95 (= ?x81 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x43) (_ bv1 8)))))
 (let (($x104 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x74 (=> $x104 (or false (or false $x89)))))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x58 (or $x8 $x74)))
 (let (($x135 (and $x58 $x139)))
 (let (($x150 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x142 (and $x150 $x135)))
 (let ((?x148 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x70 (= (bvand ?x148 (_ bv4294967292 32)) ?x148)))
 (let (($x27 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x148 (bvsub ?x148 (_ bv4 32))) (bvult ?x148 (bvsub ?x148 (_ bv4 32))))))
 (let (($x45 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x32 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x69 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x32) (bvult input.dst.llvm-%call.Lentry%2%d ?x32))))
 (let (($x16 (and true $x69)))
 (let (($x34 (and $x69 $x16)))
 (let (($x147 (and (and (and $x16 $x34) $x45) $x27)))
 (let (($x33 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x43)))
 (let (($x20 (or false $x33)))
 (let (($x7 (or $x8 $x20)))
 (let (($x153 (and (and (and $x7 $x147) $x70) $x142)))
 (let (($x154 (= $x153 true)))
 (let (($x184 (and $x154 $x183)))
 (let (($x17 (= $x65 $x112)))
 (let (($x47 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x29 (=> $x47 $x50)))
 (let (($x59 (= $x47 $x60)))
 (let (($x76 (and (and $x59 $x29) $x17)))
 (let (($x185 (and $x76 $x184)))
 (let (($x188 (=> $x185 $x30)))
 (let (($x18 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x19 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x19) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x18 (not $x188))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x187 (not true)))
 (let (($x24 (and true $x187)))
 (let (($x30 (= $x24 true)))
 (let (($x65 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x164 (= $x174 $x65)))
 (let (($x181 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x160 (=> $x181 $x164)))
 (let (($x48 (= false false)))
 (let (($x158 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x159 (and $x181 $x158)))
 (let (($x179 (=> $x159 $x48)))
 (let (($x53 (= (_ bv0 32) (_ bv0 32))))
 (let (($x171 (= $x158 $x53)))
 (let (($x169 (=> $x181 $x171)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x173 (=> $x181 $x163)))
 (let (($x176 (= $x181 $x65)))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x166 $x48)))
 (let (($x182 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x166 $x53)) $x157)))
 (let (($x178 (and (and (and (and (and $x182 $x176) $x173) $x169) $x179) $x160)))
 (let (($x6 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x183 (=> $x6 $x178)))
 (let (($x184 (= $x183 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x127 (concat ?x131 (concat ?x125 ?x124)))))
 (let (($x144 (= input.dst.llvm-%val ?x126)))
 (let ((?x120 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x120)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x137)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x108 $x107)))
 (let (($x121 (and $x138 $x143)))
 (let (($x136 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x136 $x121)))
 (let (($x105 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x133 (and (and (and $x106 $x105) $x122) $x144)))
 (let ((?x33 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x38 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x57 (_ bv1 8))) (= ?x36 (_ bv1 8))) (= ?x38 (_ bv1 8))) (= ?x79 (_ bv1 8)))))
 (let (($x89 (and (and (and (and $x95 (= ?x81 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x33) (_ bv1 8)))))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x58 (=> $x74 (or false (or false $x89)))))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x26 (or $x8 $x58)))
 (let (($x139 (and $x26 $x133)))
 (let (($x151 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x135 (and $x151 $x139)))
 (let ((?x77 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x70 (= (bvand ?x77 (_ bv4294967292 32)) ?x77)))
 (let (($x13 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x77 (bvsub ?x77 (_ bv4 32))) (bvult ?x77 (bvsub ?x77 (_ bv4 32))))))
 (let (($x45 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x32 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x32) (bvult input.dst.llvm-%call.Lentry%2%d ?x32))))
 (let (($x34 (and true $x16)))
 (let (($x109 (and $x16 $x34)))
 (let (($x145 (and (and (and $x34 $x109) $x45) $x13)))
 (let (($x20 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x33)))
 (let (($x7 (or false $x20)))
 (let (($x52 (or $x8 $x7)))
 (let (($x154 (and (and (and $x52 $x145) $x70) $x135)))
 (let (($x155 (= $x154 true)))
 (let (($x185 (and $x155 $x184)))
 (let (($x112 (= $x6 $x65)))
 (let (($x63 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x25 (=> $x63 $x48)))
 (let (($x12 (= $x63 $x53)))
 (let (($x76 (and (and $x12 $x25) $x112)))
 (let (($x186 (and $x76 $x185)))
 (let (($x188 (=> $x186 $x30)))
 (let (($x29 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x60 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x29 (not $x188)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x187 (not true)))
 (let (($x24 (and true $x187)))
 (let (($x30 (= $x24 true)))
 (let (($x65 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x164 (= $x174 $x65)))
 (let (($x181 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x160 (=> $x181 $x164)))
 (let (($x48 (= false false)))
 (let (($x158 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x159 (and $x181 $x158)))
 (let (($x179 (=> $x159 $x48)))
 (let (($x53 (= (_ bv0 32) (_ bv0 32))))
 (let (($x171 (= $x158 $x53)))
 (let (($x169 (=> $x181 $x171)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x173 (=> $x181 $x163)))
 (let (($x176 (= $x181 $x65)))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x166 $x48)))
 (let (($x182 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x166 $x53)) $x157)))
 (let (($x178 (and (and (and (and (and $x182 $x176) $x173) $x169) $x179) $x160)))
 (let (($x6 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x183 (=> $x6 $x178)))
 (let (($x184 (= $x183 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x127 (concat ?x131 (concat ?x125 ?x124)))))
 (let (($x144 (= input.dst.llvm-%val ?x126)))
 (let ((?x120 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x120)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x137)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x108 $x107)))
 (let (($x121 (and $x138 $x143)))
 (let (($x136 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x136 $x121)))
 (let (($x105 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x133 (and (and (and $x106 $x105) $x122) $x144)))
 (let ((?x33 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x38 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x57 (_ bv1 8))) (= ?x36 (_ bv1 8))) (= ?x38 (_ bv1 8))) (= ?x79 (_ bv1 8)))))
 (let (($x89 (and (and (and (and $x95 (= ?x81 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x33) (_ bv1 8)))))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x58 (=> $x74 (or false (or false $x89)))))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x26 (or $x8 $x58)))
 (let (($x139 (and $x26 $x133)))
 (let (($x151 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x135 (and $x151 $x139)))
 (let ((?x77 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x70 (= (bvand ?x77 (_ bv4294967292 32)) ?x77)))
 (let (($x13 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x77 (bvsub ?x77 (_ bv4 32))) (bvult ?x77 (bvsub ?x77 (_ bv4 32))))))
 (let (($x45 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x32 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x32) (bvult input.dst.llvm-%call.Lentry%2%d ?x32))))
 (let (($x34 (and true $x16)))
 (let (($x109 (and $x16 $x34)))
 (let (($x145 (and (and (and $x34 $x109) $x45) $x13)))
 (let (($x20 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x33)))
 (let (($x7 (or false $x20)))
 (let (($x52 (or $x8 $x7)))
 (let (($x154 (and (and (and $x52 $x145) $x70) $x135)))
 (let (($x155 (= $x154 true)))
 (let (($x185 (and $x155 $x184)))
 (let (($x112 (= $x6 $x65)))
 (let (($x63 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x25 (=> $x63 $x48)))
 (let (($x12 (= $x63 $x53)))
 (let (($x76 (and (and $x12 $x25) $x112)))
 (let (($x186 (and $x76 $x185)))
 (let (($x188 (=> $x186 $x30)))
 (let (($x29 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x47 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x60 $x47) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x29 (not $x188)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x24 (= false true)))
 (let (($x6 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x162 (= $x169 $x6)))
 (let (($x182 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x159 (=> $x182 $x162)))
 (let (($x56 (= false false)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x158 (and $x182 $x173)))
 (let (($x171 (=> $x158 $x56)))
 (let (($x18 (= (_ bv0 32) (_ bv0 32))))
 (let (($x180 (= $x173 $x18)))
 (let (($x167 (=> $x182 $x180)))
 (let (($x161 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x177 (=> $x182 $x161)))
 (let (($x181 (= $x182 $x6)))
 (let (($x175 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x175 $x56)))
 (let (($x165 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x175 $x18)) $x157)))
 (let (($x183 (and (and (and (and (and $x165 $x181) $x177) $x167) $x171) $x159)))
 (let (($x75 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (=> $x75 $x183)))
 (let (($x185 (= $x184 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x125 (concat ?x129 (concat ?x123 ?x122)))))
 (let (($x141 (= input.dst.llvm-%val ?x124)))
 (let ((?x107 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x107)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x136)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x110 $x108)))
 (let (($x120 (and $x137 $x138)))
 (let (($x140 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x140 $x120)))
 (let (($x118 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x144 (and (and (and $x73 $x118) $x143) $x141)))
 (let ((?x20 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x38 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x149 (_ bv1 8))) (= ?x36 (_ bv1 8))) (= ?x38 (_ bv1 8))) (= ?x79 (_ bv1 8)))))
 (let (($x89 (and (and (and (and $x95 (= ?x81 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x20) (_ bv1 8)))))
 (let (($x58 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x26 (=> $x58 (or false (or false $x89)))))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x104 (or $x8 $x26)))
 (let (($x133 (and $x104 $x144)))
 (let (($x72 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x139 (and $x72 $x133)))
 (let ((?x23 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x70 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x28 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv4 32))) (bvult ?x23 (bvsub ?x23 (_ bv4 32))))))
 (let (($x45 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x32 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x34 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x32) (bvult input.dst.llvm-%call.Lentry%2%d ?x32))))
 (let (($x109 (and true $x34)))
 (let (($x27 (and $x34 $x109)))
 (let (($x142 (and (and (and $x109 $x27) $x45) $x28)))
 (let (($x7 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x20)))
 (let (($x52 (or false $x7)))
 (let (($x51 (or $x8 $x52)))
 (let (($x155 (and (and (and $x51 $x142) $x70) $x139)))
 (let (($x156 (= $x155 true)))
 (let (($x186 (and $x156 $x185)))
 (let (($x65 (= $x75 $x6)))
 (let (($x39 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x50 (=> $x39 $x56)))
 (let (($x41 (= $x39 $x18)))
 (let (($x76 (and (and $x41 $x50) $x65)))
 (let (($x187 (and $x76 $x186)))
 (let (($x30 (=> $x187 $x24)))
 (let (($x25 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x63 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x53 $x63) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x25 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x24 (= false true)))
 (let (($x6 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x162 (= $x169 $x6)))
 (let (($x182 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x159 (=> $x182 $x162)))
 (let (($x56 (= false false)))
 (let (($x173 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x158 (and $x182 $x173)))
 (let (($x171 (=> $x158 $x56)))
 (let (($x18 (= (_ bv0 32) (_ bv0 32))))
 (let (($x180 (= $x173 $x18)))
 (let (($x167 (=> $x182 $x180)))
 (let (($x161 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x177 (=> $x182 $x161)))
 (let (($x181 (= $x182 $x6)))
 (let (($x175 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x175 $x56)))
 (let (($x165 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x175 $x18)) $x157)))
 (let (($x183 (and (and (and (and (and $x165 $x181) $x177) $x167) $x171) $x159)))
 (let (($x75 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (=> $x75 $x183)))
 (let (($x185 (= $x184 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x125 (concat ?x129 (concat ?x123 ?x122)))))
 (let (($x141 (= input.dst.llvm-%val ?x124)))
 (let ((?x107 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x107)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x136)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x110 $x108)))
 (let (($x120 (and $x137 $x138)))
 (let (($x140 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x140 $x120)))
 (let (($x118 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x144 (and (and (and $x73 $x118) $x143) $x141)))
 (let ((?x20 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x38 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x149 (_ bv1 8))) (= ?x36 (_ bv1 8))) (= ?x38 (_ bv1 8))) (= ?x79 (_ bv1 8)))))
 (let (($x89 (and (and (and (and $x95 (= ?x81 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x20) (_ bv1 8)))))
 (let (($x58 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x26 (=> $x58 (or false (or false $x89)))))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x104 (or $x8 $x26)))
 (let (($x133 (and $x104 $x144)))
 (let (($x72 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x139 (and $x72 $x133)))
 (let ((?x23 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x70 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x28 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv4 32))) (bvult ?x23 (bvsub ?x23 (_ bv4 32))))))
 (let (($x45 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x32 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x34 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x32) (bvult input.dst.llvm-%call.Lentry%2%d ?x32))))
 (let (($x109 (and true $x34)))
 (let (($x27 (and $x34 $x109)))
 (let (($x142 (and (and (and $x109 $x27) $x45) $x28)))
 (let (($x7 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x20)))
 (let (($x52 (or false $x7)))
 (let (($x51 (or $x8 $x52)))
 (let (($x155 (and (and (and $x51 $x142) $x70) $x139)))
 (let (($x156 (= $x155 true)))
 (let (($x186 (and $x156 $x185)))
 (let (($x65 (= $x75 $x6)))
 (let (($x39 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x50 (=> $x39 $x56)))
 (let (($x41 (= $x39 $x18)))
 (let (($x76 (and (and $x41 $x50) $x65)))
 (let (($x187 (and $x76 $x186)))
 (let (($x30 (=> $x187 $x24)))
 (let (($x25 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x63 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x53 $x63) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x25 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x43 (= false true)))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x165 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x171 (and $x165 $x167)))
 (let (($x178 (not $x171)))
 (let (($x75 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x160 (= $x167 $x75)))
 (let (($x158 (=> $x165 $x160)))
 (let (($x19 (= false false)))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x173 (and $x165 $x177)))
 (let (($x180 (=> $x173 $x19)))
 (let (($x61 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= $x177 $x61)))
 (let (($x163 (=> $x165 $x164)))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x176 (=> $x165 $x174)))
 (let (($x182 (= $x165 $x75)))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x170 $x19)))
 (let (($x162 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x170 $x61)) $x157)))
 (let (($x187 (and (and (and (and (and (and $x162 $x182) $x176) $x163) $x180) $x158) $x178)))
 (let (($x17 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x24 (=> $x17 $x187)))
 (let (($x30 (= $x24 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x123 (concat ?x127 (concat ?x121 ?x143)))))
 (let (($x132 (= input.dst.llvm-%val ?x122)))
 (let ((?x108 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x108)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x105 $x110)))
 (let (($x107 (and $x136 $x137)))
 (let (($x134 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x134 $x107)))
 (let (($x119 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x141 (and (and (and $x37 $x119) $x138) $x132)))
 (let ((?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x38 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x150 (_ bv1 8))) (= ?x36 (_ bv1 8))) (= ?x38 (_ bv1 8))) (= ?x79 (_ bv1 8)))))
 (let (($x89 (and (and (and (and $x95 (= ?x81 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x7) (_ bv1 8)))))
 (let (($x26 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x104 (=> $x26 (or false (or false $x89)))))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (or $x8 $x104)))
 (let (($x144 (and $x74 $x141)))
 (let (($x152 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x133 (and $x152 $x144)))
 (let ((?x147 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x70 (= (bvand ?x147 (_ bv4294967292 32)) ?x147)))
 (let (($x9 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x147 (bvsub ?x147 (_ bv4 32))) (bvult ?x147 (bvsub ?x147 (_ bv4 32))))))
 (let (($x45 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x32 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x32) (bvult input.dst.llvm-%call.Lentry%2%d ?x32))))
 (let (($x27 (and true $x109)))
 (let (($x13 (and $x109 $x27)))
 (let (($x135 (and (and (and $x27 $x13) $x45) $x9)))
 (let (($x52 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x7)))
 (let (($x51 (or false $x52)))
 (let (($x42 (or $x8 $x51)))
 (let (($x156 (and (and (and $x42 $x135) $x70) $x133)))
 (let (($x172 (= $x156 true)))
 (let (($x188 (and $x172 $x30)))
 (let (($x6 (= $x17 $x75)))
 (let (($x40 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x48 (=> $x40 $x19)))
 (let (($x68 (= $x40 $x61)))
 (let (($x76 (and (and $x68 $x48) $x6)))
 (let (($x189 (and $x76 $x188)))
 (let (($x190 (=> $x189 $x43)))
 (let (($x50 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x18 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x50 (not $x190)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x43 (= false true)))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x165 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x171 (and $x165 $x167)))
 (let (($x178 (not $x171)))
 (let (($x75 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x160 (= $x167 $x75)))
 (let (($x158 (=> $x165 $x160)))
 (let (($x19 (= false false)))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x173 (and $x165 $x177)))
 (let (($x180 (=> $x173 $x19)))
 (let (($x61 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= $x177 $x61)))
 (let (($x163 (=> $x165 $x164)))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x176 (=> $x165 $x174)))
 (let (($x182 (= $x165 $x75)))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x157 (=> $x170 $x19)))
 (let (($x162 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x170 $x61)) $x157)))
 (let (($x187 (and (and (and (and (and (and $x162 $x182) $x176) $x163) $x180) $x158) $x178)))
 (let (($x17 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x24 (=> $x17 $x187)))
 (let (($x30 (= $x24 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x123 (concat ?x127 (concat ?x121 ?x143)))))
 (let (($x132 (= input.dst.llvm-%val ?x122)))
 (let ((?x108 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x108)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x105 $x110)))
 (let (($x107 (and $x136 $x137)))
 (let (($x134 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x134 $x107)))
 (let (($x119 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x114 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x141 (and (and (and $x37 $x119) $x138) $x132)))
 (let ((?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x38 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x150 (_ bv1 8))) (= ?x36 (_ bv1 8))) (= ?x38 (_ bv1 8))) (= ?x79 (_ bv1 8)))))
 (let (($x89 (and (and (and (and $x95 (= ?x81 (_ bv1 8))) (= ?x84 (_ bv1 8))) (= ?x86 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x7) (_ bv1 8)))))
 (let (($x26 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x104 (=> $x26 (or false (or false $x89)))))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (or $x8 $x104)))
 (let (($x144 (and $x74 $x141)))
 (let (($x152 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x133 (and $x152 $x144)))
 (let ((?x147 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x70 (= (bvand ?x147 (_ bv4294967292 32)) ?x147)))
 (let (($x9 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x147 (bvsub ?x147 (_ bv4 32))) (bvult ?x147 (bvsub ?x147 (_ bv4 32))))))
 (let (($x45 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x32 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x32) (bvult input.dst.llvm-%call.Lentry%2%d ?x32))))
 (let (($x27 (and true $x109)))
 (let (($x13 (and $x109 $x27)))
 (let (($x135 (and (and (and $x27 $x13) $x45) $x9)))
 (let (($x52 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x7)))
 (let (($x51 (or false $x52)))
 (let (($x42 (or $x8 $x51)))
 (let (($x156 (and (and (and $x42 $x135) $x70) $x133)))
 (let (($x172 (= $x156 true)))
 (let (($x188 (and $x172 $x30)))
 (let (($x6 (= $x17 $x75)))
 (let (($x40 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x48 (=> $x40 $x19)))
 (let (($x68 (= $x40 $x61)))
 (let (($x76 (and (and $x68 $x48) $x6)))
 (let (($x189 (and $x76 $x188)))
 (let (($x190 (=> $x189 $x43)))
 (let (($x50 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x18 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x50 (not $x190)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x82 (= false true)))
 (let (($x112 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x64 (= $x55 $x112)))
 (let (($x57 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x38 (=> $x57 $x64)))
 (let (($x60 (= false false)))
 (let (($x22 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x67 (and $x57 $x22)))
 (let (($x62 (=> $x67 $x60)))
 (let (($x41 (= (_ bv0 32) (_ bv0 32))))
 (let (($x54 (= $x22 $x41)))
 (let (($x36 (=> $x57 $x54)))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x151 (=> $x57 $x150)))
 (let (($x26 (= $x57 $x112)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x58 (=> $x152 $x60)))
 (let (($x78 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x152 $x41)) $x58)))
 (let (($x95 (and (and (and (and (and $x78 $x26) $x151) $x36) $x62) $x38)))
 (let (($x65 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x80 (=> $x65 $x95)))
 (let (($x81 (= $x80 true)))
 (let ((?x148 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x148)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x142 $x147)))
 (let (($x9 (and $x77 $x10)))
 (let (($x49 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x49 $x9)))
 (let (($x13 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x13)))))
 (let (($x139 (and $x45 $x135)))
 (let (($x146 (= $x139 true)))
 (let ((?x8 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x8)))
 (let (($x52 (= ?x20 input.dst.llvm-%val)))
 (let (($x51 (= $x52 true)))
 (let (($x70 (and $x51 $x146)))
 (let (($x92 (and $x70 $x81)))
 (let (($x17 (= $x65 $x112)))
 (let (($x39 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x59 (=> $x39 $x60)))
 (let (($x46 (= $x39 $x41)))
 (let (($x6 (and (and $x46 $x59) $x17)))
 (let (($x96 (and $x6 $x92)))
 (let (($x83 (=> $x96 $x82)))
 (let (($x19 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x12 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x40 $x12) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x19 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x82 (= false true)))
 (let (($x112 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x64 (= $x55 $x112)))
 (let (($x57 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x38 (=> $x57 $x64)))
 (let (($x60 (= false false)))
 (let (($x22 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x67 (and $x57 $x22)))
 (let (($x62 (=> $x67 $x60)))
 (let (($x41 (= (_ bv0 32) (_ bv0 32))))
 (let (($x54 (= $x22 $x41)))
 (let (($x36 (=> $x57 $x54)))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x151 (=> $x57 $x150)))
 (let (($x26 (= $x57 $x112)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x58 (=> $x152 $x60)))
 (let (($x78 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x152 $x41)) $x58)))
 (let (($x95 (and (and (and (and (and $x78 $x26) $x151) $x36) $x62) $x38)))
 (let (($x65 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x80 (=> $x65 $x95)))
 (let (($x81 (= $x80 true)))
 (let ((?x148 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x148)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x142 $x147)))
 (let (($x9 (and $x77 $x10)))
 (let (($x49 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x49 $x9)))
 (let (($x13 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x13)))))
 (let (($x139 (and $x45 $x135)))
 (let (($x146 (= $x139 true)))
 (let ((?x8 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x8)))
 (let (($x52 (= ?x20 input.dst.llvm-%val)))
 (let (($x51 (= $x52 true)))
 (let (($x70 (and $x51 $x146)))
 (let (($x92 (and $x70 $x81)))
 (let (($x17 (= $x65 $x112)))
 (let (($x39 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x59 (=> $x39 $x60)))
 (let (($x46 (= $x39 $x41)))
 (let (($x6 (and (and $x46 $x59) $x17)))
 (let (($x96 (and $x6 $x92)))
 (let (($x83 (=> $x96 $x82)))
 (let (($x19 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x12 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x40 $x12) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x19 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x93 (= false true)))
 (let (($x54 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x58 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x67 (and $x58 $x54)))
 (let (($x62 (not $x67)))
 (let (($x65 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x36 (= $x54 $x65)))
 (let (($x79 (=> $x58 $x36)))
 (let (($x63 (= false false)))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x21 (and $x58 $x150)))
 (let (($x22 (=> $x21 $x63)))
 (let (($x50 (= (_ bv0 32) (_ bv0 32))))
 (let (($x151 (= $x150 $x50)))
 (let (($x94 (=> $x58 $x151)))
 (let (($x26 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x99 (=> $x58 $x26)))
 (let (($x78 (= $x58 $x65)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x90 (=> $x152 $x63)))
 (let (($x55 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x152 $x50)) $x90)))
 (let (($x92 (and (and (and (and (and (and $x55 $x78) $x99) $x94) $x22) $x79) $x62)))
 (let (($x48 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x96 (=> $x48 $x92)))
 (let (($x82 (= $x96 true)))
 (let ((?x148 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x148)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x142 $x147)))
 (let (($x9 (and $x77 $x10)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x15 $x9)))
 (let (($x28 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x139 (and $x49 $x135)))
 (let (($x146 (= $x139 true)))
 (let ((?x8 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x8)))
 (let (($x52 (= ?x20 input.dst.llvm-%val)))
 (let (($x51 (= $x52 true)))
 (let (($x70 (and $x51 $x146)))
 (let (($x83 (and $x70 $x82)))
 (let (($x112 (= $x48 $x65)))
 (let (($x117 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x68 (=> $x117 $x63)))
 (let (($x25 (= $x117 $x50)))
 (let (($x6 (and (and $x25 $x68) $x112)))
 (let (($x84 (and $x6 $x83)))
 (let (($x97 (=> $x84 $x93)))
 (let (($x59 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x41 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x59 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x93 (= false true)))
 (let (($x54 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x58 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x67 (and $x58 $x54)))
 (let (($x62 (not $x67)))
 (let (($x65 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x36 (= $x54 $x65)))
 (let (($x79 (=> $x58 $x36)))
 (let (($x63 (= false false)))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x21 (and $x58 $x150)))
 (let (($x22 (=> $x21 $x63)))
 (let (($x50 (= (_ bv0 32) (_ bv0 32))))
 (let (($x151 (= $x150 $x50)))
 (let (($x94 (=> $x58 $x151)))
 (let (($x26 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x99 (=> $x58 $x26)))
 (let (($x78 (= $x58 $x65)))
 (let (($x152 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x90 (=> $x152 $x63)))
 (let (($x55 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x152 $x50)) $x90)))
 (let (($x92 (and (and (and (and (and (and $x55 $x78) $x99) $x94) $x22) $x79) $x62)))
 (let (($x48 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x96 (=> $x48 $x92)))
 (let (($x82 (= $x96 true)))
 (let ((?x148 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x148)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x142 $x147)))
 (let (($x9 (and $x77 $x10)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x15 $x9)))
 (let (($x28 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x139 (and $x49 $x135)))
 (let (($x146 (= $x139 true)))
 (let ((?x8 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x8)))
 (let (($x52 (= ?x20 input.dst.llvm-%val)))
 (let (($x51 (= $x52 true)))
 (let (($x70 (and $x51 $x146)))
 (let (($x83 (and $x70 $x82)))
 (let (($x112 (= $x48 $x65)))
 (let (($x117 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x68 (=> $x117 $x63)))
 (let (($x25 (= $x117 $x50)))
 (let (($x6 (and (and $x25 $x68) $x112)))
 (let (($x84 (and $x6 $x83)))
 (let (($x97 (=> $x84 $x93)))
 (let (($x59 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x41 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x59 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x178 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let ((?x187 ((_ extract 0 0) ?x178)))
 (let (($x24 (= (_ bv1 1) ?x187)))
 (let (($x30 (= $x24 true)))
 (let (($x18 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x159 (= $x182 $x18)))
 (let (($x156 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x181 (=> $x156 $x159)))
 (let (($x59 (= false false)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x162 (and $x156 $x179)))
 (let (($x165 (=> $x162 $x59)))
 (let (($x50 (= (_ bv0 32) (_ bv0 32))))
 (let (($x169 (= $x179 $x50)))
 (let (($x157 (=> $x156 $x169)))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x175 (=> $x156 $x166)))
 (let (($x172 (= $x156 $x18)))
 (let (($x141 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x141 $x59)))
 (let (($x176 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x141 $x50)) $x133)))
 (let (($x163 (and (and (and (and (and $x176 $x172) $x175) $x157) $x165) $x181)))
 (let (($x29 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (=> $x29 $x163)))
 (let (($x173 (= $x184 true)))
 (let ((?x123 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x123)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x124)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x138 $x120)))
 (let (($x127 (and $x128 $x125)))
 (let (($x119 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x119 $x127)))
 (let (($x110 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x110)))))
 (let (($x121 (and $x107 $x126)))
 (let (($x143 (= $x121 true)))
 (let ((?x111 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x111)))
 (let (($x115 (= ?x113 input.dst.llvm-%val)))
 (let (($x116 (= $x115 true)))
 (let ((?x20 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x151 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x36 (and (and (and (and true (= ?x58 (_ bv1 8))) (= ?x26 (_ bv1 8))) (= ?x151 (_ bv1 8))) (= ?x80 (_ bv1 8)))))
 (let (($x98 (and (and (and (and $x36 (= ?x81 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x20) (_ bv1 8)))))
 (let (($x103 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x104 (=> $x103 (or false (or false $x98)))))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x152 (or $x76 $x104)))
 (let (($x155 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x72 (and $x155 $x152)))
 (let ((?x15 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x139 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x77 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x15 (bvsub ?x15 (_ bv4 32))) (bvult ?x15 (bvsub ?x15 (_ bv4 32))))))
 (let (($x49 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x109 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x32 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x109) (bvult input.dst.llvm-%call.Lentry%2%d ?x109))))
 (let (($x13 (and true $x32)))
 (let (($x28 (and $x32 $x13)))
 (let (($x9 (and (and (and $x13 $x28) $x49) $x77)))
 (let (($x7 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x20)))
 (let (($x52 (or false $x7)))
 (let (($x51 (or $x76 $x52)))
 (let (($x106 (and (and (and $x51 $x9) $x139) $x72)))
 (let (($x73 (= $x106 true)))
 (let (($x37 (and $x73 $x116)))
 (let (($x130 (and $x37 $x143)))
 (let (($x180 (and $x130 $x173)))
 (let (($x46 (= $x29 $x18)))
 (let (($x117 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x47 (=> $x117 $x59)))
 (let (($x56 (= $x117 $x50)))
 (let (($x68 (and (and $x56 $x47) $x46)))
 (let (($x185 (and $x68 $x180)))
 (let (($x188 (=> $x185 $x30)))
 (let (($x112 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x12 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x12) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x112 (not $x188)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x178 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let ((?x187 ((_ extract 0 0) ?x178)))
 (let (($x24 (= (_ bv1 1) ?x187)))
 (let (($x30 (= $x24 true)))
 (let (($x18 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x159 (= $x182 $x18)))
 (let (($x156 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x181 (=> $x156 $x159)))
 (let (($x59 (= false false)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x162 (and $x156 $x179)))
 (let (($x165 (=> $x162 $x59)))
 (let (($x50 (= (_ bv0 32) (_ bv0 32))))
 (let (($x169 (= $x179 $x50)))
 (let (($x157 (=> $x156 $x169)))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x175 (=> $x156 $x166)))
 (let (($x172 (= $x156 $x18)))
 (let (($x141 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x141 $x59)))
 (let (($x176 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x141 $x50)) $x133)))
 (let (($x163 (and (and (and (and (and $x176 $x172) $x175) $x157) $x165) $x181)))
 (let (($x29 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (=> $x29 $x163)))
 (let (($x173 (= $x184 true)))
 (let ((?x123 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x123)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x124)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x138 $x120)))
 (let (($x127 (and $x128 $x125)))
 (let (($x119 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x119 $x127)))
 (let (($x110 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x110)))))
 (let (($x121 (and $x107 $x126)))
 (let (($x143 (= $x121 true)))
 (let ((?x111 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x111)))
 (let (($x115 (= ?x113 input.dst.llvm-%val)))
 (let (($x116 (= $x115 true)))
 (let ((?x20 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x151 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x36 (and (and (and (and true (= ?x58 (_ bv1 8))) (= ?x26 (_ bv1 8))) (= ?x151 (_ bv1 8))) (= ?x80 (_ bv1 8)))))
 (let (($x98 (and (and (and (and $x36 (= ?x81 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x20) (_ bv1 8)))))
 (let (($x103 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x104 (=> $x103 (or false (or false $x98)))))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x152 (or $x76 $x104)))
 (let (($x155 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x72 (and $x155 $x152)))
 (let ((?x15 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x139 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x77 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x15 (bvsub ?x15 (_ bv4 32))) (bvult ?x15 (bvsub ?x15 (_ bv4 32))))))
 (let (($x49 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x109 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x32 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x109) (bvult input.dst.llvm-%call.Lentry%2%d ?x109))))
 (let (($x13 (and true $x32)))
 (let (($x28 (and $x32 $x13)))
 (let (($x9 (and (and (and $x13 $x28) $x49) $x77)))
 (let (($x7 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x20)))
 (let (($x52 (or false $x7)))
 (let (($x51 (or $x76 $x52)))
 (let (($x106 (and (and (and $x51 $x9) $x139) $x72)))
 (let (($x73 (= $x106 true)))
 (let (($x37 (and $x73 $x116)))
 (let (($x130 (and $x37 $x143)))
 (let (($x180 (and $x130 $x173)))
 (let (($x46 (= $x29 $x18)))
 (let (($x117 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x47 (=> $x117 $x59)))
 (let (($x56 (= $x117 $x50)))
 (let (($x68 (and (and $x56 $x47) $x46)))
 (let (($x185 (and $x68 $x180)))
 (let (($x188 (=> $x185 $x30)))
 (let (($x112 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x12 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x12) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x112 (not $x188)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3ffefff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x03026800)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x3ffefffe x!0)
                    (ite (bvule #x3ffeffff x!0)
                         (ite (bvule #x3fff0000 x!0) #x3fff0000 #x3ffeffff)
                         #x3ffefffe)
                    #x3ffefffd)))
    (let ((a!2 (ite (bvule #x3ffefffb x!0)
                    (ite (bvule #x3ffefffc x!0)
                         (ite (bvule #x3ffefffd x!0) a!1 #x3ffefffc)
                         #x3ffefffb)
                    #x3ffefffa)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x3ffefff9 x!0)
                         (ite (bvule #x3ffefffa x!0) a!2 #x3ffefff9)
                         #x00000008)
                    #x00000007)))
    (let ((a!4 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000007 x!0) a!3 #x00000005)
                         #x00000004)
                    #x00000002)))
      (ite (bvule #x00000002 x!0) a!4 #x00000000))))))
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3ffefffa) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000002) #x20
    (ite (= x!0 #x3ffefffd) #x01
    (ite (= x!0 #x3ffefffe) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x3ffefffc) #x01
    (ite (= x!0 #x3ffeffff) #x01
    (ite (= x!0 #x3ffefff9) #x01
    (ite (= x!0 #x3fff0000) #x01
    (ite (= x!0 #x3ffefffb) #x01
      #x02))))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!66))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xfe000000)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x452d7668)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x452d766b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x452d7668)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x054dbb2c) #x30
      #xc7))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!66 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x052d366a) #x00
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x452d366a) #x00
    (ite (= x!0 #xc52d766a) #x00
    (ite (= x!0 #xc52d366a) #x00
    (ite (= x!0 #x052d766a) #x00
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x452d3a6a) #x00
    (ite (= x!0 #x852d766a) #x00
    (ite (= x!0 #x452d7669) #x03
    (ite (= x!0 #x452d766b) #x03
    (ite (= x!0 #x452d766a) #x03
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x452d7668) #x03
    (ite (= x!0 #x7ffffffe) #x01
      #xc7)))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x188 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let ((?x189 ((_ extract 0 0) ?x188)))
 (let (($x43 (= (_ bv1 1) ?x189)))
 (let (($x31 (= $x43 true)))
 (let (($x157 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x176 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x165 (and $x176 $x157)))
 (let (($x164 (not $x165)))
 (let (($x29 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x177 (= $x157 $x29)))
 (let (($x162 (=> $x176 $x177)))
 (let (($x40 (= false false)))
 (let (($x175 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x179 (and $x176 $x175)))
 (let (($x169 (=> $x179 $x40)))
 (let (($x75 (= (_ bv0 32) (_ bv0 32))))
 (let (($x161 (= $x175 $x75)))
 (let (($x170 (=> $x176 $x161)))
 (let (($x183 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x168 (=> $x176 $x183)))
 (let (($x156 (= $x176 $x29)))
 (let (($x144 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x144 $x40)))
 (let (($x159 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x144 $x75)) $x133)))
 (let (($x185 (and (and (and (and (and (and $x159 $x156) $x168) $x170) $x169) $x162) $x164)))
 (let (($x6 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x167 (=> $x6 $x185)))
 (let (($x178 (= $x167 true)))
 (let ((?x125 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x125)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x124 $x128)))
 (let (($x126 (and $x123 $x127)))
 (let (($x137 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x137 $x126)))
 (let (($x108 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x108)))))
 (let (($x143 (and $x138 $x121)))
 (let (($x130 (= $x143 true)))
 (let ((?x113 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x113)))
 (let (($x116 (= ?x114 input.dst.llvm-%val)))
 (let (($x37 (= $x116 true)))
 (let ((?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x151 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x36 (and (and (and (and true (= ?x153 (_ bv1 8))) (= ?x26 (_ bv1 8))) (= ?x151 (_ bv1 8))) (= ?x80 (_ bv1 8)))))
 (let (($x98 (and (and (and (and $x36 (= ?x81 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x7) (_ bv1 8)))))
 (let (($x104 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x152 (=> $x104 (or false (or false $x98)))))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x91 (or $x76 $x152)))
 (let (($x70 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x90 (and $x70 $x91)))
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x139 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x147 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x49 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x109 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x13 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x109) (bvult input.dst.llvm-%call.Lentry%2%d ?x109))))
 (let (($x28 (and true $x13)))
 (let (($x148 (and $x13 $x28)))
 (let (($x74 (and (and (and $x28 $x148) $x49) $x147)))
 (let (($x52 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x7)))
 (let (($x51 (or false $x52)))
 (let (($x69 (or $x76 $x51)))
 (let (($x73 (and (and (and $x69 $x74) $x139) $x90)))
 (let (($x71 (= $x73 true)))
 (let (($x131 (and $x71 $x37)))
 (let (($x129 (and $x131 $x130)))
 (let (($x187 (and $x129 $x178)))
 (let (($x18 (= $x6 $x29)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x65 (=> $x48 $x40)))
 (let (($x60 (= $x48 $x75)))
 (let (($x68 (and (and $x60 $x65) $x18)))
 (let (($x24 (and $x68 $x187)))
 (let (($x190 (=> $x24 $x31)))
 (let (($x47 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x117 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x50 $x117) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x47 (not $x190)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x188 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv0 8) (_ bv0 8) memzero_memvar input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) (_ bv8 32))))
 (let ((?x189 ((_ extract 0 0) ?x188)))
 (let (($x43 (= (_ bv1 1) ?x189)))
 (let (($x31 (= $x43 true)))
 (let (($x157 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x176 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x165 (and $x176 $x157)))
 (let (($x164 (not $x165)))
 (let (($x29 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x177 (= $x157 $x29)))
 (let (($x162 (=> $x176 $x177)))
 (let (($x40 (= false false)))
 (let (($x175 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x179 (and $x176 $x175)))
 (let (($x169 (=> $x179 $x40)))
 (let (($x75 (= (_ bv0 32) (_ bv0 32))))
 (let (($x161 (= $x175 $x75)))
 (let (($x170 (=> $x176 $x161)))
 (let (($x183 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x168 (=> $x176 $x183)))
 (let (($x156 (= $x176 $x29)))
 (let (($x144 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x144 $x40)))
 (let (($x159 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x144 $x75)) $x133)))
 (let (($x185 (and (and (and (and (and (and $x159 $x156) $x168) $x170) $x169) $x162) $x164)))
 (let (($x6 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x167 (=> $x6 $x185)))
 (let (($x178 (= $x167 true)))
 (let ((?x125 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x125)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x124 $x128)))
 (let (($x126 (and $x123 $x127)))
 (let (($x137 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x137 $x126)))
 (let (($x108 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x108)))))
 (let (($x143 (and $x138 $x121)))
 (let (($x130 (= $x143 true)))
 (let ((?x113 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x113)))
 (let (($x116 (= ?x114 input.dst.llvm-%val)))
 (let (($x37 (= $x116 true)))
 (let ((?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x151 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x36 (and (and (and (and true (= ?x153 (_ bv1 8))) (= ?x26 (_ bv1 8))) (= ?x151 (_ bv1 8))) (= ?x80 (_ bv1 8)))))
 (let (($x98 (and (and (and (and $x36 (= ?x81 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x7) (_ bv1 8)))))
 (let (($x104 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x152 (=> $x104 (or false (or false $x98)))))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x91 (or $x76 $x152)))
 (let (($x70 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x90 (and $x70 $x91)))
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x139 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x147 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x49 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x109 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x13 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x109) (bvult input.dst.llvm-%call.Lentry%2%d ?x109))))
 (let (($x28 (and true $x13)))
 (let (($x148 (and $x13 $x28)))
 (let (($x74 (and (and (and $x28 $x148) $x49) $x147)))
 (let (($x52 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x7)))
 (let (($x51 (or false $x52)))
 (let (($x69 (or $x76 $x51)))
 (let (($x73 (and (and (and $x69 $x74) $x139) $x90)))
 (let (($x71 (= $x73 true)))
 (let (($x131 (and $x71 $x37)))
 (let (($x129 (and $x131 $x130)))
 (let (($x187 (and $x129 $x178)))
 (let (($x18 (= $x6 $x29)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x65 (=> $x48 $x40)))
 (let (($x60 (= $x48 $x75)))
 (let (($x68 (and (and $x60 $x65) $x18)))
 (let (($x24 (and $x68 $x187)))
 (let (($x190 (=> $x24 $x31)))
 (let (($x47 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x117 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x50 $x117) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x47 (not $x190)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3ffefff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x03026800)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x3ffefffe x!0)
                    (ite (bvule #x3ffeffff x!0)
                         (ite (bvule #x3fff0000 x!0) #x3fff0000 #x3ffeffff)
                         #x3ffefffe)
                    #x3ffefffd)))
    (let ((a!2 (ite (bvule #x3ffefffb x!0)
                    (ite (bvule #x3ffefffc x!0)
                         (ite (bvule #x3ffefffd x!0) a!1 #x3ffefffc)
                         #x3ffefffb)
                    #x3ffefffa)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x3ffefff9 x!0)
                         (ite (bvule #x3ffefffa x!0) a!2 #x3ffefff9)
                         #x00000008)
                    #x00000007)))
    (let ((a!4 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000007 x!0) a!3 #x00000005)
                         #x00000004)
                    #x00000002)))
      (ite (bvule #x00000002 x!0) a!4 #x00000000))))))
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3ffefffa) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000002) #x20
    (ite (= x!0 #x3ffefffd) #x01
    (ite (= x!0 #x3ffefffe) #x01
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x3ffefffc) #x01
    (ite (= x!0 #x3ffeffff) #x01
    (ite (= x!0 #x3ffefff9) #x01
    (ite (= x!0 #x3fff0000) #x01
    (ite (= x!0 #x3ffefffb) #x01
      #x02))))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!66))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xfe000000)
  (define-fun memzero_memvar () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x452d7668)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x452d766b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x452d7668)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x054dbb2c) #x30
      #xc7))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!66 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x052d366a) #x00
    (ite (= x!0 #x80000002) #x01
    (ite (= x!0 #x452d366a) #x00
    (ite (= x!0 #xc52d766a) #x00
    (ite (= x!0 #xc52d366a) #x00
    (ite (= x!0 #x052d766a) #x00
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x452d3a6a) #x00
    (ite (= x!0 #x852d766a) #x00
    (ite (= x!0 #x452d7669) #x03
    (ite (= x!0 #x452d766b) #x03
    (ite (= x!0 #x452d766a) #x03
    (ite (= x!0 #x7ffffffc) #x01
    (ite (= x!0 #x452d7668) #x03
    (ite (= x!0 #x7ffffffe) #x01
      #xc7)))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x187 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x24 (= $x187 true)))
 (let (($x6 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x184 (= $x170 $x6)))
 (let (($x159 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x179 (=> $x159 $x184)))
 (let (($x41 (= false false)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x175 (and $x159 $x168)))
 (let (($x161 (=> $x175 $x41)))
 (let (($x25 (= (_ bv0 32) (_ bv0 32))))
 (let (($x163 (= $x168 $x25)))
 (let (($x166 (=> $x159 $x163)))
 (let (($x181 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x172 (=> $x159 $x181)))
 (let (($x176 (= $x159 $x6)))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x174 $x41)))
 (let (($x173 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x174 $x25)) $x133)))
 (let (($x165 (and (and (and (and (and $x173 $x176) $x172) $x166) $x161) $x179)))
 (let (($x86 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x164 (=> $x86 $x165)))
 (let (($x185 (= $x164 true)))
 (let ((?x126 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x126)))
 (let (($x130 (= ?x121 input.dst.llvm-%val)))
 (let (($x129 (= $x130 true)))
 (let ((?x118 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x118)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x108 $x35)))
 (let (($x124 (and $x138 $x137)))
 (let (($x114 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x114 $x124)))
 (let (($x105 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x105)))))
 (let (($x128 (and $x136 $x120)))
 (let (($x123 (= $x128 true)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x151 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x36 (and (and (and (and true (= ?x155 (_ bv1 8))) (= ?x26 (_ bv1 8))) (= ?x151 (_ bv1 8))) (= ?x80 (_ bv1 8)))))
 (let (($x98 (and (and (and (and $x36 (= ?x81 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv1 8)))))
 (let (($x152 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x91 (=> $x152 (or false (or false $x98)))))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x103 (or $x76 $x91)))
 (let (($x146 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x55 (and $x146 $x103)))
 (let ((?x10 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x139 (= (bvand ?x10 (_ bv4294967292 32)) ?x10)))
 (let (($x23 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x10 (bvsub ?x10 (_ bv4 32))) (bvult ?x10 (bvsub ?x10 (_ bv4 32))))))
 (let (($x49 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x109 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x28 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x109) (bvult input.dst.llvm-%call.Lentry%2%d ?x109))))
 (let (($x148 (and true $x28)))
 (let (($x77 (and $x28 $x148)))
 (let (($x72 (and (and (and $x148 $x77) $x49) $x23)))
 (let (($x51 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let (($x69 (or false $x51)))
 (let (($x42 (or $x76 $x69)))
 (let (($x71 (and (and (and $x42 $x72) $x139) $x55)))
 (let (($x111 (= $x71 true)))
 (let (($x125 (and $x111 $x123)))
 (let (($x122 (and $x125 $x129)))
 (let (($x167 (and $x122 $x185)))
 (let (($x29 (= $x86 $x6)))
 (let (($x56 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x59 (=> $x56 $x41)))
 (let (($x39 (= $x56 $x25)))
 (let (($x68 (and (and $x39 $x59) $x29)))
 (let (($x178 (and $x68 $x167)))
 (let (($x30 (=> $x178 $x24)))
 (let (($x65 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x48 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x75 $x48) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x65 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x187 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x24 (= $x187 true)))
 (let (($x6 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x184 (= $x170 $x6)))
 (let (($x159 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x179 (=> $x159 $x184)))
 (let (($x41 (= false false)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x175 (and $x159 $x168)))
 (let (($x161 (=> $x175 $x41)))
 (let (($x25 (= (_ bv0 32) (_ bv0 32))))
 (let (($x163 (= $x168 $x25)))
 (let (($x166 (=> $x159 $x163)))
 (let (($x181 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x172 (=> $x159 $x181)))
 (let (($x176 (= $x159 $x6)))
 (let (($x174 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x174 $x41)))
 (let (($x173 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x174 $x25)) $x133)))
 (let (($x165 (and (and (and (and (and $x173 $x176) $x172) $x166) $x161) $x179)))
 (let (($x86 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x164 (=> $x86 $x165)))
 (let (($x185 (= $x164 true)))
 (let ((?x126 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x126)))
 (let (($x130 (= ?x121 input.dst.llvm-%val)))
 (let (($x129 (= $x130 true)))
 (let ((?x118 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x118)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x108 $x35)))
 (let (($x124 (and $x138 $x137)))
 (let (($x114 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x114 $x124)))
 (let (($x105 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x105)))))
 (let (($x128 (and $x136 $x120)))
 (let (($x123 (= $x128 true)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x151 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x36 (and (and (and (and true (= ?x155 (_ bv1 8))) (= ?x26 (_ bv1 8))) (= ?x151 (_ bv1 8))) (= ?x80 (_ bv1 8)))))
 (let (($x98 (and (and (and (and $x36 (= ?x81 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv1 8)))))
 (let (($x152 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x91 (=> $x152 (or false (or false $x98)))))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x103 (or $x76 $x91)))
 (let (($x146 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x55 (and $x146 $x103)))
 (let ((?x10 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x139 (= (bvand ?x10 (_ bv4294967292 32)) ?x10)))
 (let (($x23 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x10 (bvsub ?x10 (_ bv4 32))) (bvult ?x10 (bvsub ?x10 (_ bv4 32))))))
 (let (($x49 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x109 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x28 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x109) (bvult input.dst.llvm-%call.Lentry%2%d ?x109))))
 (let (($x148 (and true $x28)))
 (let (($x77 (and $x28 $x148)))
 (let (($x72 (and (and (and $x148 $x77) $x49) $x23)))
 (let (($x51 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let (($x69 (or false $x51)))
 (let (($x42 (or $x76 $x69)))
 (let (($x71 (and (and (and $x42 $x72) $x139) $x55)))
 (let (($x111 (= $x71 true)))
 (let (($x125 (and $x111 $x123)))
 (let (($x122 (and $x125 $x129)))
 (let (($x167 (and $x122 $x185)))
 (let (($x29 (= $x86 $x6)))
 (let (($x56 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x59 (=> $x56 $x41)))
 (let (($x39 (= $x56 $x25)))
 (let (($x68 (and (and $x39 $x59) $x29)))
 (let (($x178 (and $x68 $x167)))
 (let (($x30 (=> $x178 $x24)))
 (let (($x65 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x48 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x75 $x48) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x65 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00900400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00400003) #x03
    (ite (= x!0 #x00400001) #x03
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000003) #x01
    (ite (= x!0 #x00400000) #x03
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400001 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) #x00400004 #x00400003)
                         #x00400001)
                    #x00400000)))
    (let ((a!2 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x00000008 x!0)
                         (ite (bvule #x00400000 x!0) a!1 #x00000008)
                         #x00000007)
                    #x00000006)))
    (let ((a!3 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!2 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!3 #x00000002)
                #x00000001)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x2decfff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08b34583)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2decfffe x!0)
                    (ite (bvule #x2decffff x!0)
                         (ite (bvule #x2ded0000 x!0) #x2ded0000 #x2decffff)
                         #x2decfffe)
                    #x2decfffd)))
    (let ((a!2 (ite (bvule #x2decfffb x!0)
                    (ite (bvule #x2decfffc x!0)
                         (ite (bvule #x2decfffd x!0) a!1 #x2decfffc)
                         #x2decfffb)
                    #x2decfffa)))
    (let ((a!3 (ite (bvule #x08b34584 x!0)
                    (ite (bvule #x2decfff9 x!0)
                         (ite (bvule #x2decfffa x!0) a!2 #x2decfff9)
                         #x08b34584)
                    #x08b34583)))
      (ite (bvule #x08b34580 x!0)
           (ite (bvule #x08b34581 x!0)
                (ite (bvule #x08b34583 x!0) a!3 #x08b34581)
                #x08b34580)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2decfffb) #x01
    (ite (= x!0 #x08b34580) #x03
    (ite (= x!0 #x2decfffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x2decfffa) #x01
    (ite (= x!0 #x2decfffd) #x01
    (ite (= x!0 #x08b34581) #x03
    (ite (= x!0 #x08b34583) #x03
    (ite (= x!0 #x2decffff) #x01
    (ite (= x!0 #x2decfff9) #x01
    (ite (= x!0 #x2ded0000) #x01
    (ite (= x!0 #x2decfffc) #x01
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x189 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x20 (= $x189 true)))
 (let (($x166 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x173 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x161 (and $x173 $x166)))
 (let (($x180 (not $x161)))
 (let (($x86 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x162 (= $x166 $x86)))
 (let (($x175 (=> $x173 $x162)))
 (let (($x12 (= false false)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x168 (and $x173 $x172)))
 (let (($x163 (=> $x168 $x12)))
 (let (($x17 (= (_ bv0 32) (_ bv0 32))))
 (let (($x177 (= $x172 $x17)))
 (let (($x183 (=> $x173 $x177)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x156 (=> $x173 $x157)))
 (let (($x159 (= $x173 $x86)))
 (let (($x182 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x182 $x12)))
 (let (($x184 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x182 $x17)) $x133)))
 (let (($x178 (and (and (and (and (and (and $x184 $x159) $x156) $x183) $x163) $x175) $x180)))
 (let (($x46 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x187 (=> $x46 $x178)))
 (let (($x24 (= $x187 true)))
 (let ((?x121 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x121)))
 (let (($x129 (= ?x143 input.dst.llvm-%val)))
 (let (($x122 (= $x129 true)))
 (let ((?x137 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x137)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x107 $x138)))
 (let (($x120 (and $x118 $x124)))
 (let (($x110 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x110 $x120)))
 (let (($x140 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x140)))))
 (let (($x123 (and $x108 $x128)))
 (let (($x125 (= $x123 true)))
 (let ((?x51 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x151 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x36 (and (and (and (and true (= ?x70 (_ bv1 8))) (= ?x26 (_ bv1 8))) (= ?x151 (_ bv1 8))) (= ?x80 (_ bv1 8)))))
 (let (($x98 (and (and (and (and $x36 (= ?x81 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x51) (_ bv1 8)))))
 (let (($x91 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x103 (=> $x91 (or false (or false $x98)))))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x104 (or $x76 $x103)))
 (let (($x14 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x58 (and $x14 $x104)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x139 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x142 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x49 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x109 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x148 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x109) (bvult input.dst.llvm-%call.Lentry%2%d ?x109))))
 (let (($x77 (and true $x148)))
 (let (($x147 (and $x148 $x77)))
 (let (($x90 (and (and (and $x77 $x147) $x49) $x142)))
 (let (($x69 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x51)))
 (let (($x42 (or false $x69)))
 (let (($x27 (or $x76 $x42)))
 (let (($x111 (and (and (and $x27 $x90) $x139) $x58)))
 (let (($x115 (= $x111 true)))
 (let (($x127 (and $x115 $x125)))
 (let (($x132 (and $x127 $x122)))
 (let (($x30 (and $x132 $x24)))
 (let (($x6 (= $x46 $x86)))
 (let (($x60 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x40 (=> $x60 $x12)))
 (let (($x50 (= $x60 $x17)))
 (let (($x68 (and (and $x50 $x40) $x6)))
 (let (($x188 (and $x68 $x30)))
 (let (($x43 (=> $x188 $x20)))
 (let (($x59 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x56 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x25 $x56) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x59 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let (($x189 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x20 (= $x189 true)))
 (let (($x166 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x173 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x161 (and $x173 $x166)))
 (let (($x180 (not $x161)))
 (let (($x86 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x162 (= $x166 $x86)))
 (let (($x175 (=> $x173 $x162)))
 (let (($x12 (= false false)))
 (let (($x172 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x168 (and $x173 $x172)))
 (let (($x163 (=> $x168 $x12)))
 (let (($x17 (= (_ bv0 32) (_ bv0 32))))
 (let (($x177 (= $x172 $x17)))
 (let (($x183 (=> $x173 $x177)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x156 (=> $x173 $x157)))
 (let (($x159 (= $x173 $x86)))
 (let (($x182 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x182 $x12)))
 (let (($x184 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x182 $x17)) $x133)))
 (let (($x178 (and (and (and (and (and (and $x184 $x159) $x156) $x183) $x163) $x175) $x180)))
 (let (($x46 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x187 (=> $x46 $x178)))
 (let (($x24 (= $x187 true)))
 (let ((?x121 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x121)))
 (let (($x129 (= ?x143 input.dst.llvm-%val)))
 (let (($x122 (= $x129 true)))
 (let ((?x137 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x137)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x107 $x138)))
 (let (($x120 (and $x118 $x124)))
 (let (($x110 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x110 $x120)))
 (let (($x140 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x140)))))
 (let (($x123 (and $x108 $x128)))
 (let (($x125 (= $x123 true)))
 (let ((?x51 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x151 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x36 (and (and (and (and true (= ?x70 (_ bv1 8))) (= ?x26 (_ bv1 8))) (= ?x151 (_ bv1 8))) (= ?x80 (_ bv1 8)))))
 (let (($x98 (and (and (and (and $x36 (= ?x81 (_ bv1 8))) (= ?x82 (_ bv1 8))) (= ?x85 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x51) (_ bv1 8)))))
 (let (($x91 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x103 (=> $x91 (or false (or false $x98)))))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x104 (or $x76 $x103)))
 (let (($x14 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x58 (and $x14 $x104)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x139 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x142 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x49 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x109 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x148 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x109) (bvult input.dst.llvm-%call.Lentry%2%d ?x109))))
 (let (($x77 (and true $x148)))
 (let (($x147 (and $x148 $x77)))
 (let (($x90 (and (and (and $x77 $x147) $x49) $x142)))
 (let (($x69 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x51)))
 (let (($x42 (or false $x69)))
 (let (($x27 (or $x76 $x42)))
 (let (($x111 (and (and (and $x27 $x90) $x139) $x58)))
 (let (($x115 (= $x111 true)))
 (let (($x127 (and $x115 $x125)))
 (let (($x132 (and $x127 $x122)))
 (let (($x30 (and $x132 $x24)))
 (let (($x6 (= $x46 $x86)))
 (let (($x60 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x40 (=> $x60 $x12)))
 (let (($x50 (= $x60 $x17)))
 (let (($x68 (and (and $x50 $x40) $x6)))
 (let (($x188 (and $x68 $x30)))
 (let (($x43 (=> $x188 $x20)))
 (let (($x59 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x56 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x25 $x56) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x59 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00900400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00400003) #x03
    (ite (= x!0 #x00400001) #x03
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000003) #x01
    (ite (= x!0 #x00400000) #x03
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x01
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400001 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) #x00400004 #x00400003)
                         #x00400001)
                    #x00400000)))
    (let ((a!2 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x00000008 x!0)
                         (ite (bvule #x00400000 x!0) a!1 #x00000008)
                         #x00000007)
                    #x00000006)))
    (let ((a!3 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!2 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!3 #x00000002)
                #x00000001)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x2decfff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08b34583)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08b34580)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2decfffe x!0)
                    (ite (bvule #x2decffff x!0)
                         (ite (bvule #x2ded0000 x!0) #x2ded0000 #x2decffff)
                         #x2decfffe)
                    #x2decfffd)))
    (let ((a!2 (ite (bvule #x2decfffb x!0)
                    (ite (bvule #x2decfffc x!0)
                         (ite (bvule #x2decfffd x!0) a!1 #x2decfffc)
                         #x2decfffb)
                    #x2decfffa)))
    (let ((a!3 (ite (bvule #x08b34584 x!0)
                    (ite (bvule #x2decfff9 x!0)
                         (ite (bvule #x2decfffa x!0) a!2 #x2decfff9)
                         #x08b34584)
                    #x08b34583)))
      (ite (bvule #x08b34580 x!0)
           (ite (bvule #x08b34581 x!0)
                (ite (bvule #x08b34583 x!0) a!3 #x08b34581)
                #x08b34580)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2decfffb) #x01
    (ite (= x!0 #x08b34580) #x03
    (ite (= x!0 #x2decfffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x2decfffa) #x01
    (ite (= x!0 #x2decfffd) #x01
    (ite (= x!0 #x08b34581) #x03
    (ite (= x!0 #x08b34583) #x03
    (ite (= x!0 #x2decffff) #x01
    (ite (= x!0 #x2decfff9) #x01
    (ite (= x!0 #x2ded0000) #x01
    (ite (= x!0 #x2decfffc) #x01
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x30 (not true)))
 (let (($x188 (and true $x30)))
 (let (($x189 (= $x188 true)))
 (let (($x46 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x164 (= $x183 $x46)))
 (let (($x184 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x168 (=> $x184 $x164)))
 (let (($x75 (= false false)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x172 (and $x184 $x156)))
 (let (($x177 (=> $x172 $x75)))
 (let (($x39 (= (_ bv0 32) (_ bv0 32))))
 (let (($x165 (= $x156 $x39)))
 (let (($x181 (=> $x184 $x165)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x176 (=> $x184 $x179)))
 (let (($x173 (= $x184 $x46)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x169 $x75)))
 (let (($x185 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x169 $x39)) $x133)))
 (let (($x161 (and (and (and (and (and $x185 $x173) $x176) $x181) $x177) $x168)))
 (let (($x18 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x180 (=> $x18 $x161)))
 (let (($x178 (= $x180 true)))
 (let ((?x153 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x140 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x105 (and (and (and (and true (= ?x87 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= ?x111 (_ bv1 8))) (= ?x114 (_ bv1 8)))))
 (let (($x125 (and (and (and (and $x105 (= ?x140 (_ bv1 8))) (= ?x110 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x153) (_ bv1 8)))))
 (let (($x121 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x143 (=> $x121 (or false (or false $x125)))))
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x84 (or $x106 $x143)))
 (let (($x83 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x93 (and $x83 $x84)))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x96 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x79 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x94 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x78 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x78) (bvult input.dst.llvm-%call.Lentry%2%d ?x78))))
 (let (($x38 (and true $x99)))
 (let (($x149 (and $x99 $x38)))
 (let (($x62 (and (and (and $x38 $x149) $x94) $x79)))
 (let (($x91 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x153)))
 (let (($x155 (or false $x91)))
 (let (($x70 (or $x106 $x155)))
 (let (($x122 (and (and (and $x70 $x62) $x96) $x93)))
 (let (($x132 (= $x122 true)))
 (let ((?x145 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x145)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x74 $x16)))
 (let (($x90 (and $x15 $x142)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x109 $x90)))
 (let (($x23 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x23)))))
 (let (($x135 (and $x72 $x55)))
 (let (($x139 (= $x135 true)))
 (let ((?x52 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x52)))
 (let (($x42 (= ?x51 input.dst.llvm-%val)))
 (let (($x27 (= $x42 true)))
 (let (($x71 (and $x27 $x139)))
 (let (($x141 (and $x71 $x132)))
 (let (($x187 (and $x141 $x178)))
 (let (($x86 (= $x18 $x46)))
 (let (($x56 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x117 (=> $x56 $x75)))
 (let (($x63 (= $x56 $x39)))
 (let (($x68 (and (and $x63 $x117) $x86)))
 (let (($x24 (and $x68 $x187)))
 (let (($x20 (=> $x24 $x189)))
 (let (($x40 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x60 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x17 $x60) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x40 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x30 (not true)))
 (let (($x188 (and true $x30)))
 (let (($x189 (= $x188 true)))
 (let (($x46 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x164 (= $x183 $x46)))
 (let (($x184 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x168 (=> $x184 $x164)))
 (let (($x75 (= false false)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x172 (and $x184 $x156)))
 (let (($x177 (=> $x172 $x75)))
 (let (($x39 (= (_ bv0 32) (_ bv0 32))))
 (let (($x165 (= $x156 $x39)))
 (let (($x181 (=> $x184 $x165)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x176 (=> $x184 $x179)))
 (let (($x173 (= $x184 $x46)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x169 $x75)))
 (let (($x185 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x169 $x39)) $x133)))
 (let (($x161 (and (and (and (and (and $x185 $x173) $x176) $x181) $x177) $x168)))
 (let (($x18 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x180 (=> $x18 $x161)))
 (let (($x178 (= $x180 true)))
 (let ((?x153 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x137 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x140 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x105 (and (and (and (and true (= ?x87 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= ?x111 (_ bv1 8))) (= ?x114 (_ bv1 8)))))
 (let (($x125 (and (and (and (and $x105 (= ?x140 (_ bv1 8))) (= ?x110 (_ bv1 8))) (= ?x137 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x153) (_ bv1 8)))))
 (let (($x121 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x143 (=> $x121 (or false (or false $x125)))))
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x84 (or $x106 $x143)))
 (let (($x83 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x93 (and $x83 $x84)))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x96 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x79 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x94 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x78 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x78) (bvult input.dst.llvm-%call.Lentry%2%d ?x78))))
 (let (($x38 (and true $x99)))
 (let (($x149 (and $x99 $x38)))
 (let (($x62 (and (and (and $x38 $x149) $x94) $x79)))
 (let (($x91 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x153)))
 (let (($x155 (or false $x91)))
 (let (($x70 (or $x106 $x155)))
 (let (($x122 (and (and (and $x70 $x62) $x96) $x93)))
 (let (($x132 (= $x122 true)))
 (let ((?x145 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x145)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x74 $x16)))
 (let (($x90 (and $x15 $x142)))
 (let (($x109 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x109 $x90)))
 (let (($x23 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x23)))))
 (let (($x135 (and $x72 $x55)))
 (let (($x139 (= $x135 true)))
 (let ((?x52 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x52)))
 (let (($x42 (= ?x51 input.dst.llvm-%val)))
 (let (($x27 (= $x42 true)))
 (let (($x71 (and $x27 $x139)))
 (let (($x141 (and $x71 $x132)))
 (let (($x187 (and $x141 $x178)))
 (let (($x86 (= $x18 $x46)))
 (let (($x56 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x117 (=> $x56 $x75)))
 (let (($x63 (= $x56 $x39)))
 (let (($x68 (and (and $x63 $x117) $x86)))
 (let (($x24 (and $x68 $x187)))
 (let (($x20 (=> $x24 $x189)))
 (let (($x40 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x60 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x17 $x60) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x40 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x800042e0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x800042e1) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x800042e4) #x01
    (ite (= x!0 #x800042e5) #x01
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x800042e3) #x01
    (ite (= x!0 #x800042e0) #x01
    (ite (= x!0 #x800042e6) #x01
    (ite (= x!0 #x800042e7) #x01
    (ite (= x!0 #x800042e2) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x800042e5 x!0)
                    (ite (bvule #x800042e6 x!0)
                         (ite (bvule #x800042e7 x!0) #x800042e7 #x800042e6)
                         #x800042e5)
                    #x800042e4)))
    (let ((a!2 (ite (bvule #x800042e2 x!0)
                    (ite (bvule #x800042e3 x!0)
                         (ite (bvule #x800042e4 x!0) a!1 #x800042e3)
                         #x800042e2)
                    #x800042e1)))
    (let ((a!3 (ite (bvule #x80000004 x!0)
                    (ite (bvule #x800042e0 x!0)
                         (ite (bvule #x800042e1 x!0) a!2 #x800042e0)
                         #x80000004)
                    #x80000003)))
      (ite (bvule #x80000000 x!0)
           (ite (bvule #x80000001 x!0)
                (ite (bvule #x80000003 x!0) a!3 #x80000001)
                #x80000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00e00000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9425d9d7)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9425d9d4)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00e00002) #x01
    (ite (= x!0 #x9425d9d4) #x03
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00e00005) #x01
    (ite (= x!0 #x00e00001) #x01
    (ite (= x!0 #x00e00004) #x01
    (ite (= x!0 #x9425d9d5) #x03
    (ite (= x!0 #x9425d9d7) #x03
    (ite (= x!0 #x00e00006) #x01
    (ite (= x!0 #x00e00000) #x01
    (ite (= x!0 #x00e00007) #x01
    (ite (= x!0 #x00e00003) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x9425d9d5 x!0)
                    (ite (bvule #x9425d9d7 x!0)
                         (ite (bvule #x9425d9d8 x!0) #x9425d9d8 #x9425d9d7)
                         #x9425d9d5)
                    #x9425d9d4)))
    (let ((a!2 (ite (bvule #x00e00006 x!0)
                    (ite (bvule #x00e00007 x!0)
                         (ite (bvule #x9425d9d4 x!0) a!1 #x00e00007)
                         #x00e00006)
                    #x00e00005)))
    (let ((a!3 (ite (bvule #x00e00003 x!0)
                    (ite (bvule #x00e00004 x!0)
                         (ite (bvule #x00e00005 x!0) a!2 #x00e00004)
                         #x00e00003)
                    #x00e00002)))
      (ite (bvule #x00e00000 x!0)
           (ite (bvule #x00e00001 x!0)
                (ite (bvule #x00e00002 x!0) a!3 #x00e00001)
                #x00e00000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x188 (= false true)))
 (let (($x18 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x175 (= $x181 $x18)))
 (let (($x185 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x172 (=> $x185 $x175)))
 (let (($x112 (= false false)))
 (let (($x176 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x156 (and $x185 $x176)))
 (let (($x165 (=> $x156 $x112)))
 (let (($x59 (= (_ bv0 32) (_ bv0 32))))
 (let (($x162 (= $x176 $x59)))
 (let (($x157 (=> $x185 $x162)))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x159 (=> $x185 $x166)))
 (let (($x184 (= $x185 $x18)))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x170 $x112)))
 (let (($x167 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x170 $x59)) $x133)))
 (let (($x180 (and (and (and (and (and $x167 $x184) $x159) $x157) $x165) $x172)))
 (let (($x29 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (=> $x29 $x180)))
 (let (($x187 (= $x178 true)))
 (let ((?x143 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x143)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x123 $x127)))
 (let (($x93 (and $x126 $x84)))
 (let (($x108 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x108 $x93)))
 (let (($x118 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x118)))))
 (let (($x132 (and $x128 $x122)))
 (let (($x141 (= $x132 true)))
 (let ((?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x22 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x96 (and (and (and (and true (= ?x149 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x22 (_ bv1 8))) (= ?x130 (_ bv1 8)))))
 (let (($x111 (and (and (and (and $x96 (= ?x82 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x77) (_ bv1 8)))))
 (let (($x131 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x114 (=> $x131 (or false (or false $x111)))))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x78 (or $x28 $x114)))
 (let (($x64 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x57 (and $x64 $x78)))
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x155 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x73 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x145 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x45 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x74 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x45) (bvult input.dst.llvm-%call.Lentry%2%d ?x45))))
 (let (($x10 (and true $x74)))
 (let (($x9 (and $x74 $x10)))
 (let (($x153 (and (and (and $x10 $x9) $x145) $x73)))
 (let (($x32 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x77)))
 (let (($x147 (or false $x32)))
 (let (($x23 (or $x28 $x147)))
 (let (($x119 (and (and (and $x23 $x153) $x155) $x57)))
 (let (($x140 (= $x119 true)))
 (let ((?x52 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x52)))
 (let (($x42 (= ?x51 input.dst.llvm-%val)))
 (let (($x27 (= $x42 true)))
 (let (($x136 (and $x27 $x140)))
 (let (($x144 (and $x136 $x141)))
 (let (($x24 (and $x144 $x187)))
 (let (($x46 (= $x29 $x18)))
 (let (($x50 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x12 (=> $x50 $x112)))
 (let (($x61 (= $x50 $x59)))
 (let (($x68 (and (and $x61 $x12) $x46)))
 (let (($x30 (and $x68 $x24)))
 (let (($x189 (=> $x30 $x188)))
 (let (($x117 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x56 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x56) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x117 (not $x189))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x188 (= false true)))
 (let (($x18 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x175 (= $x181 $x18)))
 (let (($x185 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x172 (=> $x185 $x175)))
 (let (($x112 (= false false)))
 (let (($x176 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x156 (and $x185 $x176)))
 (let (($x165 (=> $x156 $x112)))
 (let (($x59 (= (_ bv0 32) (_ bv0 32))))
 (let (($x162 (= $x176 $x59)))
 (let (($x157 (=> $x185 $x162)))
 (let (($x166 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x159 (=> $x185 $x166)))
 (let (($x184 (= $x185 $x18)))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x170 $x112)))
 (let (($x167 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x170 $x59)) $x133)))
 (let (($x180 (and (and (and (and (and $x167 $x184) $x159) $x157) $x165) $x172)))
 (let (($x29 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x178 (=> $x29 $x180)))
 (let (($x187 (= $x178 true)))
 (let ((?x143 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x143)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x123 $x127)))
 (let (($x93 (and $x126 $x84)))
 (let (($x108 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x108 $x93)))
 (let (($x118 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x118)))))
 (let (($x132 (and $x128 $x122)))
 (let (($x141 (= $x132 true)))
 (let ((?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x22 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x96 (and (and (and (and true (= ?x149 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x22 (_ bv1 8))) (= ?x130 (_ bv1 8)))))
 (let (($x111 (and (and (and (and $x96 (= ?x82 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x77) (_ bv1 8)))))
 (let (($x131 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x114 (=> $x131 (or false (or false $x111)))))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x78 (or $x28 $x114)))
 (let (($x64 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x57 (and $x64 $x78)))
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x155 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x73 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x145 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x45 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x74 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x45) (bvult input.dst.llvm-%call.Lentry%2%d ?x45))))
 (let (($x10 (and true $x74)))
 (let (($x9 (and $x74 $x10)))
 (let (($x153 (and (and (and $x10 $x9) $x145) $x73)))
 (let (($x32 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x77)))
 (let (($x147 (or false $x32)))
 (let (($x23 (or $x28 $x147)))
 (let (($x119 (and (and (and $x23 $x153) $x155) $x57)))
 (let (($x140 (= $x119 true)))
 (let ((?x52 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x52)))
 (let (($x42 (= ?x51 input.dst.llvm-%val)))
 (let (($x27 (= $x42 true)))
 (let (($x136 (and $x27 $x140)))
 (let (($x144 (and $x136 $x141)))
 (let (($x24 (and $x144 $x187)))
 (let (($x46 (= $x29 $x18)))
 (let (($x50 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x12 (=> $x50 $x112)))
 (let (($x61 (= $x50 $x59)))
 (let (($x68 (and (and $x61 $x12) $x46)))
 (let (($x30 (and $x68 $x24)))
 (let (($x189 (=> $x30 $x188)))
 (let (($x117 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x56 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x56) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x117 (not $x189))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x49 (= false true)))
 (let (($x157 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x165 (and $x167 $x157)))
 (let (($x161 (not $x165)))
 (let (($x29 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x168 (= $x157 $x29)))
 (let (($x156 (=> $x167 $x168)))
 (let (($x47 (= false false)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x176 (and $x167 $x159)))
 (let (($x162 (=> $x176 $x47)))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= $x159 $x48)))
 (let (($x179 (=> $x167 $x164)))
 (let (($x183 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x173 (=> $x167 $x183)))
 (let (($x185 (= $x167 $x29)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x163 $x47)))
 (let (($x175 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x163 $x48)) $x133)))
 (let (($x30 (and (and (and (and (and (and $x175 $x185) $x173) $x179) $x162) $x156) $x161)))
 (let (($x6 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x188 (=> $x6 $x30)))
 (let (($x189 (= $x188 true)))
 (let ((?x84 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x84)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x125 $x126)))
 (let (($x122 (and $x143 $x93)))
 (let (($x120 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x120 $x122)))
 (let (($x124 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x124)))))
 (let (($x141 (and $x123 $x132)))
 (let (($x144 (= $x141 true)))
 (let ((?x32 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x22 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x96 (and (and (and (and true (= ?x146 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x22 (_ bv1 8))) (= ?x130 (_ bv1 8)))))
 (let (($x111 (and (and (and (and $x96 (= ?x82 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x32) (_ bv1 8)))))
 (let (($x114 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x78 (=> $x114 (or false (or false $x111)))))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x26 (or $x28 $x78)))
 (let (($x70 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x99 (and $x70 $x26)))
 (let ((?x142 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x155 (= (bvand ?x142 (_ bv4294967292 32)) ?x142)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x142 (bvsub ?x142 (_ bv4 32))) (bvult ?x142 (bvsub ?x142 (_ bv4 32))))))
 (let (($x145 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x45 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x10 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x45) (bvult input.dst.llvm-%call.Lentry%2%d ?x45))))
 (let (($x9 (and true $x10)))
 (let (($x106 (and $x10 $x9)))
 (let (($x134 (and (and (and $x9 $x106) $x145) $x71)))
 (let (($x147 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x32)))
 (let (($x23 (or false $x147)))
 (let (($x72 (or $x28 $x23)))
 (let (($x140 (and (and (and $x72 $x134) $x155) $x99)))
 (let (($x136 (= $x140 true)))
 (let ((?x52 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x52)))
 (let (($x42 (= ?x51 input.dst.llvm-%val)))
 (let (($x27 (= $x42 true)))
 (let (($x116 (and $x27 $x136)))
 (let (($x174 (and $x116 $x144)))
 (let (($x20 (and $x174 $x189)))
 (let (($x18 (= $x6 $x29)))
 (let (($x63 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x75 (=> $x63 $x47)))
 (let (($x17 (= $x63 $x48)))
 (let (($x68 (and (and $x17 $x75) $x18)))
 (let (($x43 (and $x68 $x20)))
 (let (($x31 (=> $x43 $x49)))
 (let (($x12 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x50 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x59 $x50) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x12 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x49 (= false true)))
 (let (($x157 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x165 (and $x167 $x157)))
 (let (($x161 (not $x165)))
 (let (($x29 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x168 (= $x157 $x29)))
 (let (($x156 (=> $x167 $x168)))
 (let (($x47 (= false false)))
 (let (($x159 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x176 (and $x167 $x159)))
 (let (($x162 (=> $x176 $x47)))
 (let (($x48 (= (_ bv0 32) (_ bv0 32))))
 (let (($x164 (= $x159 $x48)))
 (let (($x179 (=> $x167 $x164)))
 (let (($x183 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x173 (=> $x167 $x183)))
 (let (($x185 (= $x167 $x29)))
 (let (($x163 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x163 $x47)))
 (let (($x175 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x163 $x48)) $x133)))
 (let (($x30 (and (and (and (and (and (and $x175 $x185) $x173) $x179) $x162) $x156) $x161)))
 (let (($x6 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x188 (=> $x6 $x30)))
 (let (($x189 (= $x188 true)))
 (let ((?x84 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x84)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x125 $x126)))
 (let (($x122 (and $x143 $x93)))
 (let (($x120 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x120 $x122)))
 (let (($x124 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x124)))))
 (let (($x141 (and $x123 $x132)))
 (let (($x144 (= $x141 true)))
 (let ((?x32 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x22 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x96 (and (and (and (and true (= ?x146 (_ bv1 8))) (= ?x94 (_ bv1 8))) (= ?x22 (_ bv1 8))) (= ?x130 (_ bv1 8)))))
 (let (($x111 (and (and (and (and $x96 (= ?x82 (_ bv1 8))) (= ?x100 (_ bv1 8))) (= ?x89 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x32) (_ bv1 8)))))
 (let (($x114 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x78 (=> $x114 (or false (or false $x111)))))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x26 (or $x28 $x78)))
 (let (($x70 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x99 (and $x70 $x26)))
 (let ((?x142 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x155 (= (bvand ?x142 (_ bv4294967292 32)) ?x142)))
 (let (($x71 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x142 (bvsub ?x142 (_ bv4 32))) (bvult ?x142 (bvsub ?x142 (_ bv4 32))))))
 (let (($x145 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x45 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x10 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x45) (bvult input.dst.llvm-%call.Lentry%2%d ?x45))))
 (let (($x9 (and true $x10)))
 (let (($x106 (and $x10 $x9)))
 (let (($x134 (and (and (and $x9 $x106) $x145) $x71)))
 (let (($x147 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x32)))
 (let (($x23 (or false $x147)))
 (let (($x72 (or $x28 $x23)))
 (let (($x140 (and (and (and $x72 $x134) $x155) $x99)))
 (let (($x136 (= $x140 true)))
 (let ((?x52 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x52)))
 (let (($x42 (= ?x51 input.dst.llvm-%val)))
 (let (($x27 (= $x42 true)))
 (let (($x116 (and $x27 $x136)))
 (let (($x174 (and $x116 $x144)))
 (let (($x20 (and $x174 $x189)))
 (let (($x18 (= $x6 $x29)))
 (let (($x63 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x75 (=> $x63 $x47)))
 (let (($x17 (= $x63 $x48)))
 (let (($x68 (and (and $x17 $x75) $x18)))
 (let (($x43 (and $x68 $x20)))
 (let (($x31 (=> $x43 $x49)))
 (let (($x12 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x50 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x59 $x50) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x12 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00a00000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x80000005) #x01
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x80000003) #x01
    (ite (= x!0 #x80000006) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x80000007) #x01
    (ite (= x!0 #x80000002) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000005 x!0)
                    (ite (bvule #x80000006 x!0)
                         (ite (bvule #x80000007 x!0) #x80000007 #x80000006)
                         #x80000005)
                    #x80000004)))
    (let ((a!2 (ite (bvule #x80000002 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) a!1 #x80000003)
                         #x80000002)
                    #x80000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #x80000001 x!0) a!2 #x80000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3947083)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3947080)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x01
    (ite (= x!0 #xc3947080) #x03
    (ite (= x!0 #x7ffffffe) #x01
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x7ffffffa) #x01
    (ite (= x!0 #x7ffffffd) #x01
    (ite (= x!0 #xc3947081) #x03
    (ite (= x!0 #xc3947083) #x03
    (ite (= x!0 #x7fffffff) #x01
    (ite (= x!0 #x7ffffff9) #x01
    (ite (= x!0 #x80000000) #x01
    (ite (= x!0 #x7ffffffc) #x01
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3947081 x!0)
                    (ite (bvule #xc3947083 x!0)
                         (ite (bvule #xc3947084 x!0) #xc3947084 #xc3947083)
                         #xc3947081)
                    #xc3947080)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xc3947080 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x24 (= false true)))
 (let (($x86 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x173 (= $x183 $x86)))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x180 (=> $x169 $x173)))
 (let (($x39 (= false false)))
 (let (($x175 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x172 (and $x169 $x175)))
 (let (($x184 (=> $x172 $x39)))
 (let (($x61 (= (_ bv0 32) (_ bv0 32))))
 (let (($x167 (= $x175 $x61)))
 (let (($x185 (=> $x169 $x167)))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x181 (=> $x169 $x177)))
 (let (($x170 (= $x169 $x86)))
 (let (($x144 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x182 (=> $x144 $x39)))
 (let (($x159 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x144 $x61)) $x182)))
 (let (($x162 (and (and (and (and (and $x159 $x170) $x181) $x185) $x184) $x180)))
 (let (($x46 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x187 (=> $x46 $x162)))
 (let (($x157 (= $x187 true)))
 (let ((?x120 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x120)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x128 $x123)))
 (let (($x127 (and $x110 $x125)))
 (let (($x99 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x99 $x127)))
 (let (($x108 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x108)))))
 (let (($x143 (and $x124 $x126)))
 (let (($x84 (= $x143 true)))
 (let ((?x9 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x36 (ite $x13 (_ bv4 32) ?x9)))
 (let ((?x32 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x44 (store (store ?x32 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x106 (store (store ?x44 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x9 (_ bv2 8))))
 (let ((?x152 (store (store ?x106 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x135 (store ?x152 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x55 (ite $x13 input.dst.llvm-mem.alloc ?x135)))
 (let (($x100 (and (and true (= (select ?x55 (bvadd ?x36 (_ bv0 32))) (_ bv2 8))) (= (select ?x55 (bvadd ?x36 (_ bv1 32))) (_ bv2 8)))))
 (let (($x104 (and (and $x100 (= (select ?x55 (bvadd ?x36 (_ bv2 32))) (_ bv2 8))) (= (select ?x55 (bvadd ?x36 (_ bv3 32))) (_ bv2 8)))))
 (let (($x37 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x79 (= $x37 true)))
 (let ((?x94 (select ?x55 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x64 (select ?x55 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x38 (select ?x55 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x119 (select ?x55 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x119 (_ bv2 8))) (= ?x38 (_ bv2 8))) (= ?x64 (_ bv2 8))) (= ?x94 (_ bv2 8)))))
 (let ((?x91 (bvsub (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x139 (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x54 (=> (bvule ?x139 ?x91) (or false (or false $x95)))))
 (let (($x71 (= $x54 true)))
 (let ((?x76 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x76)))
 (let (($x69 (= ?x52 input.dst.llvm-%val)))
 (let (($x42 (= $x69 true)))
 (let (($x134 (and $x42 $x71)))
 (let (($x62 (and $x134 $x79)))
 (let (($x93 (and $x62 $x84)))
 (let (($x168 (and $x93 $x157)))
 (let (($x6 (= $x46 $x86)))
 (let (($x50 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x60 (=> $x50 $x39)))
 (let (($x65 (= $x50 $x61)))
 (let (($x18 (and (and $x65 $x60) $x6)))
 (let (($x156 (and $x18 $x168)))
 (let (($x165 (=> $x156 $x24)))
 (let (($x47 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x56 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x63 $x56) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x47 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x24 (= false true)))
 (let (($x86 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x173 (= $x183 $x86)))
 (let (($x169 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x180 (=> $x169 $x173)))
 (let (($x39 (= false false)))
 (let (($x175 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x172 (and $x169 $x175)))
 (let (($x184 (=> $x172 $x39)))
 (let (($x61 (= (_ bv0 32) (_ bv0 32))))
 (let (($x167 (= $x175 $x61)))
 (let (($x185 (=> $x169 $x167)))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x181 (=> $x169 $x177)))
 (let (($x170 (= $x169 $x86)))
 (let (($x144 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x182 (=> $x144 $x39)))
 (let (($x159 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x144 $x61)) $x182)))
 (let (($x162 (and (and (and (and (and $x159 $x170) $x181) $x185) $x184) $x180)))
 (let (($x46 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x187 (=> $x46 $x162)))
 (let (($x157 (= $x187 true)))
 (let ((?x120 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x120)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x128 $x123)))
 (let (($x127 (and $x110 $x125)))
 (let (($x99 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x99 $x127)))
 (let (($x108 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x108)))))
 (let (($x143 (and $x124 $x126)))
 (let (($x84 (= $x143 true)))
 (let ((?x9 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x36 (ite $x13 (_ bv4 32) ?x9)))
 (let ((?x32 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x44 (store (store ?x32 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x106 (store (store ?x44 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x9 (_ bv2 8))))
 (let ((?x152 (store (store ?x106 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x135 (store ?x152 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x55 (ite $x13 input.dst.llvm-mem.alloc ?x135)))
 (let (($x100 (and (and true (= (select ?x55 (bvadd ?x36 (_ bv0 32))) (_ bv2 8))) (= (select ?x55 (bvadd ?x36 (_ bv1 32))) (_ bv2 8)))))
 (let (($x104 (and (and $x100 (= (select ?x55 (bvadd ?x36 (_ bv2 32))) (_ bv2 8))) (= (select ?x55 (bvadd ?x36 (_ bv3 32))) (_ bv2 8)))))
 (let (($x37 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x79 (= $x37 true)))
 (let ((?x94 (select ?x55 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x64 (select ?x55 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x38 (select ?x55 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x119 (select ?x55 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x95 (and (and (and (and true (= ?x119 (_ bv2 8))) (= ?x38 (_ bv2 8))) (= ?x64 (_ bv2 8))) (= ?x94 (_ bv2 8)))))
 (let ((?x91 (bvsub (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x139 (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x54 (=> (bvule ?x139 ?x91) (or false (or false $x95)))))
 (let (($x71 (= $x54 true)))
 (let ((?x76 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x76)))
 (let (($x69 (= ?x52 input.dst.llvm-%val)))
 (let (($x42 (= $x69 true)))
 (let (($x134 (and $x42 $x71)))
 (let (($x62 (and $x134 $x79)))
 (let (($x93 (and $x62 $x84)))
 (let (($x168 (and $x93 $x157)))
 (let (($x6 (= $x46 $x86)))
 (let (($x50 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x60 (=> $x50 $x39)))
 (let (($x65 (= $x50 $x61)))
 (let (($x18 (and (and $x65 $x60) $x6)))
 (let (($x156 (and $x18 $x168)))
 (let (($x165 (=> $x156 $x24)))
 (let (($x47 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x56 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x63 $x56) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x47 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000002)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!34))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00020003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000007) #x02
    (ite (= x!0 #x80000006) #x02
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x00020002) #x03
    (ite (= x!0 #x80000005) #x02
      #x00))))))))))))
  (define-fun k!37 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x00020002) #x03
      #x00)))))))))
  (define-fun k!34 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x00020002) #x03
      #x00))))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000006) #x02
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x00020002) #x03
    (ite (= x!0 #x80000005) #x02
      #x00)))))))))))
  (define-fun k!36 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x00020002) #x03
      #x00))))))))
  (define-fun k!33 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000007) #x02
    (ite (= x!0 #x80000006) #x02
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x80000008) #x02
    (ite (= x!0 #x80000009) #x02
    (ite (= x!0 #x80000005) #x02
    (ite (= x!0 #x00020002) #x03
      #x00))))))))))))))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000007) #x02
    (ite (= x!0 #x80000006) #x02
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x80000008) #x02
    (ite (= x!0 #x00020002) #x03
    (ite (= x!0 #x80000005) #x02
      #x00)))))))))))))
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x00020002) #x03
    (ite (= x!0 #x80000005) #x02
      #x00))))))))))
  (define-fun k!35 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x00020002) #x03
      #x00)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!88))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xfffbf800)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb2ff900)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb2ff903)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb2ff900)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!87 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf802) #x02
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #xfffbf807) #x02
    (ite (= x!0 #xfffbf806) #x02
    (ite (= x!0 #xfffbf804) #x02
    (ite (= x!0 #xfffbf805) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
    (ite (= x!0 #xfffbf803) #x02
      #x00))))))))))))))
  (define-fun k!95 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf802) #x02
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #xfffbf806) #x02
    (ite (= x!0 #xfffbf804) #x02
    (ite (= x!0 #xfffbf805) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
    (ite (= x!0 #xfffbf803) #x02
      #x00)))))))))))))
  (define-fun k!88 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
      #x00))))))
  (define-fun k!89 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
      #x00)))))))
  (define-fun k!90 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
      #x00))))))))
  (define-fun k!91 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
    (ite (= x!0 #xfffbf802) #x02
      #x00)))))))))
  (define-fun k!92 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf803) #x02
    (ite (= x!0 #xfffbf802) #x02
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
      #x00))))))))))
  (define-fun k!93 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf802) #x02
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #xfffbf804) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
    (ite (= x!0 #xfffbf803) #x02
      #x00)))))))))))
  (define-fun k!94 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf802) #x02
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #xfffbf804) #x02
    (ite (= x!0 #xfffbf805) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
    (ite (= x!0 #xfffbf803) #x02
      #x00))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x30 (= false true)))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x182 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x172 (and $x182 $x167)))
 (let (($x184 (not $x172)))
 (let (($x46 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x185 (= $x167 $x46)))
 (let (($x178 (=> $x182 $x185)))
 (let (($x41 (= false false)))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x133 (and $x182 $x177)))
 (let (($x175 (=> $x133 $x41)))
 (let (($x12 (= (_ bv0 32) (_ bv0 32))))
 (let (($x181 (= $x177 $x12)))
 (let (($x179 (=> $x182 $x181)))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x164 (=> $x182 $x170)))
 (let (($x159 (= $x182 $x46)))
 (let (($x144 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x166 (=> $x144 $x41)))
 (let (($x183 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x144 $x12)) $x166)))
 (let (($x168 (and (and (and (and (and (and $x183 $x159) $x164) $x179) $x175) $x178) $x184)))
 (let (($x75 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x156 (=> $x75 $x168)))
 (let (($x24 (= $x156 true)))
 (let ((?x120 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x120)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x128 $x123)))
 (let (($x127 (and $x110 $x125)))
 (let (($x137 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x137 $x127)))
 (let (($x138 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x138)))))
 (let (($x143 (and $x99 $x126)))
 (let (($x84 (= $x143 true)))
 (let ((?x44 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x36 (ite $x13 (_ bv4 32) ?x44)))
 (let ((?x57 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x32 (store (store ?x57 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x45 (store (store ?x32 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x44 (_ bv2 8))))
 (let ((?x16 (store (store ?x45 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x153 (store ?x16 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x152 (ite $x13 input.dst.llvm-mem.alloc ?x153)))
 (let (($x87 (and (and true (= (select ?x152 (bvadd ?x36 (_ bv0 32))) (_ bv2 8))) (= (select ?x152 (bvadd ?x36 (_ bv1 32))) (_ bv2 8)))))
 (let (($x58 (and (and $x87 (= (select ?x152 (bvadd ?x36 (_ bv2 32))) (_ bv2 8))) (= (select ?x152 (bvadd ?x36 (_ bv3 32))) (_ bv2 8)))))
 (let (($x62 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x130 (= $x62 true)))
 (let ((?x67 (select ?x152 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x81 (select ?x152 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x114 (select ?x152 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x105 (select ?x152 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x80 (and (and (and (and true (= ?x105 (_ bv2 8))) (= ?x114 (_ bv2 8))) (= ?x81 (_ bv2 8))) (= ?x67 (_ bv2 8)))))
 (let ((?x155 (bvsub (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x90 (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x134 (=> (bvule ?x90 ?x155) (or false (or false $x80)))))
 (let (($x142 (= $x134 true)))
 (let ((?x76 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x76)))
 (let (($x69 (= ?x52 input.dst.llvm-%val)))
 (let (($x42 (= $x69 true)))
 (let (($x135 (and $x42 $x142)))
 (let (($x92 (and $x135 $x130)))
 (let (($x93 (and $x92 $x84)))
 (let (($x165 (and $x93 $x24)))
 (let (($x86 (= $x75 $x46)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x17 (=> $x48 $x41)))
 (let (($x148 (= $x48 $x12)))
 (let (($x18 (and (and $x148 $x17) $x86)))
 (let (($x161 (and $x18 $x165)))
 (let (($x188 (=> $x161 $x30)))
 (let (($x60 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x50 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x61 $x50) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x60 (not $x188)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(assert
 (let (($x30 (= false true)))
 (let (($x167 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x182 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x172 (and $x182 $x167)))
 (let (($x184 (not $x172)))
 (let (($x46 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x185 (= $x167 $x46)))
 (let (($x178 (=> $x182 $x185)))
 (let (($x41 (= false false)))
 (let (($x177 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x133 (and $x182 $x177)))
 (let (($x175 (=> $x133 $x41)))
 (let (($x12 (= (_ bv0 32) (_ bv0 32))))
 (let (($x181 (= $x177 $x12)))
 (let (($x179 (=> $x182 $x181)))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x164 (=> $x182 $x170)))
 (let (($x159 (= $x182 $x46)))
 (let (($x144 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x166 (=> $x144 $x41)))
 (let (($x183 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x144 $x12)) $x166)))
 (let (($x168 (and (and (and (and (and (and $x183 $x159) $x164) $x179) $x175) $x178) $x184)))
 (let (($x75 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x156 (=> $x75 $x168)))
 (let (($x24 (= $x156 true)))
 (let ((?x120 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x120)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x128 $x123)))
 (let (($x127 (and $x110 $x125)))
 (let (($x137 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x137 $x127)))
 (let (($x138 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x138)))))
 (let (($x143 (and $x99 $x126)))
 (let (($x84 (= $x143 true)))
 (let ((?x44 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x36 (ite $x13 (_ bv4 32) ?x44)))
 (let ((?x57 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv2 8))))
 (let ((?x32 (store (store ?x57 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv2 8))))
 (let ((?x45 (store (store ?x32 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv2 8)) ?x44 (_ bv2 8))))
 (let ((?x16 (store (store ?x45 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv2 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv2 8))))
 (let ((?x153 (store ?x16 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv2 8))))
 (let ((?x152 (ite $x13 input.dst.llvm-mem.alloc ?x153)))
 (let (($x87 (and (and true (= (select ?x152 (bvadd ?x36 (_ bv0 32))) (_ bv2 8))) (= (select ?x152 (bvadd ?x36 (_ bv1 32))) (_ bv2 8)))))
 (let (($x58 (and (and $x87 (= (select ?x152 (bvadd ?x36 (_ bv2 32))) (_ bv2 8))) (= (select ?x152 (bvadd ?x36 (_ bv3 32))) (_ bv2 8)))))
 (let (($x62 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x130 (= $x62 true)))
 (let ((?x67 (select ?x152 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x81 (select ?x152 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x114 (select ?x152 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x105 (select ?x152 (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x80 (and (and (and (and true (= ?x105 (_ bv2 8))) (= ?x114 (_ bv2 8))) (= ?x81 (_ bv2 8))) (= ?x67 (_ bv2 8)))))
 (let ((?x155 (bvsub (bvadd (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x90 (ite $x13 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x134 (=> (bvule ?x90 ?x155) (or false (or false $x80)))))
 (let (($x142 (= $x134 true)))
 (let ((?x76 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x76)))
 (let (($x69 (= ?x52 input.dst.llvm-%val)))
 (let (($x42 (= $x69 true)))
 (let (($x135 (and $x42 $x142)))
 (let (($x92 (and $x135 $x130)))
 (let (($x93 (and $x92 $x84)))
 (let (($x165 (and $x93 $x24)))
 (let (($x86 (= $x75 $x46)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x17 (=> $x48 $x41)))
 (let (($x148 (= $x48 $x12)))
 (let (($x18 (and (and $x148 $x17) $x86)))
 (let (($x161 (and $x18 $x165)))
 (let (($x188 (=> $x161 $x30)))
 (let (($x60 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x50 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x61 $x50) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x60 (not $x188)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x80000002)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!34))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00020003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000007) #x02
    (ite (= x!0 #x80000006) #x02
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x00020002) #x03
    (ite (= x!0 #x80000005) #x02
      #x00))))))))))))
  (define-fun k!37 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x00020002) #x03
      #x00)))))))))
  (define-fun k!34 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x00020002) #x03
      #x00))))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000006) #x02
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x00020002) #x03
    (ite (= x!0 #x80000005) #x02
      #x00)))))))))))
  (define-fun k!36 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x00020002) #x03
      #x00))))))))
  (define-fun k!33 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000007) #x02
    (ite (= x!0 #x80000006) #x02
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x80000008) #x02
    (ite (= x!0 #x80000009) #x02
    (ite (= x!0 #x80000005) #x02
    (ite (= x!0 #x00020002) #x03
      #x00))))))))))))))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000007) #x02
    (ite (= x!0 #x80000006) #x02
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x80000008) #x02
    (ite (= x!0 #x00020002) #x03
    (ite (= x!0 #x80000005) #x02
      #x00)))))))))))))
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x80000004) #x02
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x00020002) #x03
    (ite (= x!0 #x80000005) #x02
      #x00))))))))))
  (define-fun k!35 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #x00020003) #x03
    (ite (= x!0 #x00020001) #x03
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x00020000) #x03
    (ite (= x!0 #x00020002) #x03
      #x00)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!88))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xfffbf800)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb2ff900)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb2ff903)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb2ff900)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!87 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf802) #x02
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #xfffbf807) #x02
    (ite (= x!0 #xfffbf806) #x02
    (ite (= x!0 #xfffbf804) #x02
    (ite (= x!0 #xfffbf805) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
    (ite (= x!0 #xfffbf803) #x02
      #x00))))))))))))))
  (define-fun k!95 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf802) #x02
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #xfffbf806) #x02
    (ite (= x!0 #xfffbf804) #x02
    (ite (= x!0 #xfffbf805) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
    (ite (= x!0 #xfffbf803) #x02
      #x00)))))))))))))
  (define-fun k!88 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
      #x00))))))
  (define-fun k!89 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
      #x00)))))))
  (define-fun k!90 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
      #x00))))))))
  (define-fun k!91 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
    (ite (= x!0 #xfffbf802) #x02
      #x00)))))))))
  (define-fun k!92 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf803) #x02
    (ite (= x!0 #xfffbf802) #x02
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
      #x00))))))))))
  (define-fun k!93 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf802) #x02
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #xfffbf804) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
    (ite (= x!0 #xfffbf803) #x02
      #x00)))))))))))
  (define-fun k!94 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbf802) #x02
    (ite (= x!0 #xfffbf801) #x02
    (ite (= x!0 #xfffbf804) #x02
    (ite (= x!0 #xfffbf805) #x02
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfb2ff902) #x03
    (ite (= x!0 #xfffbf800) #x02
    (ite (= x!0 #xfb2ff901) #x03
    (ite (= x!0 #xfb2ff903) #x03
    (ite (= x!0 #xfb2ff900) #x03
    (ite (= x!0 #xfffbf803) #x02
      #x00))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x100 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x318 (and $x267 $x100)))
 (let (($x350 (and $x318 $x100)))
 (let (($x374 (not $x350)))
 (let ((?x333 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv4 32) (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x336 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv4 32) (_ bv2 32))) ?x333)))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv4 32) (_ bv3 32))) ?x336)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x339))))
 (let ((?x357 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv2 32))) ?x354)))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv3 32))) ?x357)))
 (let (($x361 (= (_ bv0 32) ?x360)))
 (let (($x362 (=> $x350 $x361)))
 (let (($x340 (= (_ bv0 32) ?x339)))
 (let ((?x341 (ite $x340 (_ bv0 32) (_ bv1 32))))
 (let (($x347 (bvuge ?x341 (_ bv1 32))))
 (let (($x348 (= $x100 $x347)))
 (let (($x349 (=> $x318 $x348)))
 (let (($x97 (= false false)))
 (let (($x82 (= (_ bv0 32) (_ bv0 32))))
 (let (($x345 (and $x318 $x82)))
 (let (($x346 (=> $x345 $x97)))
 (let (($x342 (= ?x341 (_ bv0 32))))
 (let (($x343 (= $x82 $x342)))
 (let (($x344 (=> $x318 $x343)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd (_ bv0 32)))))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv0 32) (_ bv2 32))) ?x321)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv0 32) (_ bv3 32))) ?x324)))
 (let (($x328 (= (_ bv0 32) ?x327)))
 (let (($x329 (=> $x318 $x328)))
 (let ((?x309 (ite true (_ bv0 32) (_ bv1 32))))
 (let (($x315 (bvuge ?x309 (_ bv1 32))))
 (let (($x316 (= $x100 $x315)))
 (let (($x317 (=> $x267 $x316)))
 (let (($x313 (and $x267 $x82)))
 (let (($x314 (=> $x313 $x97)))
 (let (($x310 (= ?x309 (_ bv0 32))))
 (let (($x311 (= $x82 $x310)))
 (let (($x312 (=> $x267 $x311)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x10 (ite $x29 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x76 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x139 (ite $x29 (_ bv4 32) ?x76)))
 (let ((?x54 (bvadd ?x139 (_ bv3 32))))
 (let ((?x67 (bvadd ?x139 (_ bv2 32))))
 (let ((?x81 (bvadd ?x139 (_ bv1 32))))
 (let ((?x114 (bvadd ?x139 (_ bv0 32))))
 (let ((?x73 (bvadd ?x10 (_ bv3 32))))
 (let ((?x109 (bvadd ?x10 (_ bv2 32))))
 (let ((?x23 (bvadd ?x10 (_ bv1 32))))
 (let ((?x77 (bvadd ?x10 (_ bv0 32))))
 (let ((?x274 (ite $x29 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_0)))
 (let ((?x278 (store (store ?x274 ?x77 ((_ extract 7 0) input.dst.llvm-%val)) ?x23 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x282 (store (store ?x278 ?x109 ((_ extract 23 16) input.dst.llvm-%val)) ?x73 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x297 (store (store (store ?x282 ?x114 ((_ extract 7 0) (_ bv0 32))) ?x81 ((_ extract 15 8) (_ bv0 32))) ?x67 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x299 (store ?x297 ?x54 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x304 (concat (select ?x299 ?x109) (concat (select ?x299 ?x23) (select ?x299 ?x10)))))
 (let ((?x306 (concat (select ?x299 ?x73) ?x304)))
 (let (($x307 (= input.spec-%var-val-0 ?x306)))
 (let (($x308 (=> $x267 $x307)))
 (let (($x262 (= (_ bv0 32) ?x10)))
 (let ((?x263 (ite $x262 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x263 (_ bv1 32))))
 (let (($x269 (= $x267 $x268)))
 (let (($x364 (and (and (= (= (_ bv1 32) (_ bv0 32)) (= ?x263 (_ bv0 32))) (=> (= (_ bv1 32) (_ bv0 32)) $x97)) $x269)))
 (let (($x370 (and (and (and (and (and (and $x364 $x308) $x312) $x314) $x317) $x329) $x344)))
 (let (($x373 (and (and (and $x370 $x346) $x349) $x362)))
 (let (($x375 (and $x373 $x374)))
 (let (($x376 (= $x375 true)))
 (let (($x246 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x247 (= $x246 $x100)))
 (let (($x235 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x248 (=> $x235 $x247)))
 (let (($x241 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x244 (and $x235 $x241)))
 (let (($x245 (=> $x244 $x97)))
 (let (($x242 (= $x241 $x82)))
 (let (($x243 (=> $x235 $x242)))
 (let (($x238 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x239 (=> $x235 $x238)))
 (let (($x236 (= $x235 $x100)))
 (let (($x232 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x234 (=> $x232 $x97)))
 (let (($x250 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x232 $x82)) $x234)))
 (let (($x255 (and (and (and (and (and $x250 $x236) $x239) $x243) $x245) $x248)))
 (let (($x121 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x256 (=> $x121 $x255)))
 (let (($x257 (= $x256 true)))
 (let ((?x223 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x223)))
 (let (($x226 (= ?x224 input.dst.llvm-%val)))
 (let (($x227 (= $x226 true)))
 (let (($x215 (= (bvand ?x139 (_ bv4294967292 32)) ?x139)))
 (let (($x132 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x210 (ite $x132 (bvuge ?x139 (bvsub ?x139 (_ bv4 32))) (bvult ?x139 (bvsub ?x139 (_ bv4 32))))))
 (let (($x206 (= (bvand ?x10 (_ bv4294967292 32)) ?x10)))
 (let (($x113 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x202 (ite $x113 (bvuge ?x10 (bvsub ?x10 (_ bv0 32))) (bvult ?x10 (bvsub ?x10 (_ bv0 32))))))
 (let (($x203 (and true $x202)))
 (let (($x204 (and $x202 $x203)))
 (let (($x213 (and (and (and $x203 $x204) $x206) $x210)))
 (let (($x216 (and $x213 $x215)))
 (let ((?x55 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x13 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x69 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x65 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x47 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x56 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x17 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x165 (and (and true (= (select input.dst.llvm-mem.alloc ?x17) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x56) (_ bv1 8)))))
 (let (($x49 (and (and $x165 (= (select input.dst.llvm-mem.alloc ?x47) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x65) (_ bv1 8)))))
 (let (($x66 (and (and $x49 (= (select input.dst.llvm-mem.alloc ?x76) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x69) (_ bv1 8)))))
 (let (($x193 (and (and $x66 (= (select input.dst.llvm-mem.alloc ?x13) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x55) (_ bv1 8)))))
 (let ((?x157 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x197 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x157) (or false (or false $x193)))))
 (let (($x167 (or $x29 $x197)))
 (let (($x164 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x55)))
 (let (($x180 (or false $x164)))
 (let (($x163 (or $x29 $x180)))
 (let (($x133 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x219 (and (and (and $x133 $x163) $x167) $x216)))
 (let (($x220 (= $x219 true)))
 (let (($x185 (= $x167 true)))
 (let (($x175 (= $x133 true)))
 (let (($x177 (= $x163 true)))
 (let ((?x93 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x93 (_ bv4294967292 32)) ?x93)))
 (let (($x174 (ite $x132 (bvuge ?x93 (bvsub ?x93 (_ bv4 32))) (bvult ?x93 (bvsub ?x93 (_ bv4 32))))))
 (let (($x84 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x128 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x120 (ite $x113 (bvuge input.dst.llvm-%call.Lentry%2%d ?x128) (bvult input.dst.llvm-%call.Lentry%2%d ?x128))))
 (let (($x125 (and true $x120)))
 (let (($x127 (and $x120 $x125)))
 (let (($x183 (and (and (and $x125 $x127) $x84) $x174)))
 (let (($x173 (and $x183 $x159)))
 (let (($x169 (= $x173 true)))
 (let ((?x108 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x108)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x26 $x35)))
 (let (($x118 (and $x140 $x138)))
 (let (($x102 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x102 $x118)))
 (let (($x62 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x62)))))
 (let (($x99 (and $x107 $x124)))
 (let (($x136 (= $x99 true)))
 (let (($x170 (and $x136 $x169)))
 (let (($x181 (and $x170 $x177)))
 (let (($x187 (and $x181 $x175)))
 (let (($x198 (and $x187 $x185)))
 (let (($x221 (and $x198 $x220)))
 (let (($x228 (and $x221 $x227)))
 (let (($x258 (and $x228 $x257)))
 (let (($x87 (= $x121 $x100)))
 (let (($x129 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x85 (=> $x129 $x97)))
 (let (($x83 (= $x129 $x82)))
 (let (($x101 (and (and $x83 $x85) $x87)))
 (let (($x259 (and $x101 $x258)))
 (let ((?x25 (store (store (store input.dst.llvm-mem.alloc ?x17 (_ bv2 8)) ?x56 (_ bv2 8)) ?x47 (_ bv2 8))))
 (let ((?x90 (store (store (store (store ?x25 ?x65 (_ bv2 8)) ?x76 (_ bv2 8)) ?x69 (_ bv2 8)) ?x13 (_ bv2 8))))
 (let ((?x155 (store ?x90 ?x55 (_ bv2 8))))
 (let ((?x71 (ite $x29 input.dst.llvm-mem.alloc ?x155)))
 (let (($x94 (and (and true (= (select ?x71 ?x114) (_ bv2 8))) (= (select ?x71 ?x81) (_ bv2 8)))))
 (let (($x135 (and (and $x94 (= (select ?x71 ?x67) (_ bv2 8))) (= (select ?x71 ?x54) (_ bv2 8)))))
 (let (($x79 (=> (bvule ?x139 (bvsub (bvadd ?x139 (_ bv4 32)) (_ bv1 32))) (or false (or false $x135)))))
 (let (($x45 (and (and true (= (select ?x71 ?x77) (_ bv2 8))) (= (select ?x71 ?x23) (_ bv2 8)))))
 (let (($x145 (and (and $x45 (= (select ?x71 ?x109) (_ bv2 8))) (= (select ?x71 ?x73) (_ bv2 8)))))
 (let (($x105 (=> (bvule ?x10 (bvsub (bvadd ?x10 (_ bv4 32)) (_ bv1 32))) (or false (or false $x145)))))
 (let (($x57 (and $x105 $x79)))
 (let (($x260 (and $x57 $x259)))
 (let (($x377 (=> $x260 $x376)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x50 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x61 $x50) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x379 (and $x48 (not $x377))))
 (let (($x291 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x284 (select solver-mem_0 us-bounded-var!)))
 (let ((?x157 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x289 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x157))))
 (ite $x289 (= ?x284 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x284 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x291) $x379))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x100 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x318 (and $x267 $x100)))
 (let (($x350 (and $x318 $x100)))
 (let (($x374 (not $x350)))
 (let ((?x333 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv4 32) (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x336 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv4 32) (_ bv2 32))) ?x333)))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv4 32) (_ bv3 32))) ?x336)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x339))))
 (let ((?x357 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv2 32))) ?x354)))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv3 32))) ?x357)))
 (let (($x361 (= (_ bv0 32) ?x360)))
 (let (($x362 (=> $x350 $x361)))
 (let (($x340 (= (_ bv0 32) ?x339)))
 (let ((?x341 (ite $x340 (_ bv0 32) (_ bv1 32))))
 (let (($x347 (bvuge ?x341 (_ bv1 32))))
 (let (($x348 (= $x100 $x347)))
 (let (($x349 (=> $x318 $x348)))
 (let (($x97 (= false false)))
 (let (($x82 (= (_ bv0 32) (_ bv0 32))))
 (let (($x345 (and $x318 $x82)))
 (let (($x346 (=> $x345 $x97)))
 (let (($x342 (= ?x341 (_ bv0 32))))
 (let (($x343 (= $x82 $x342)))
 (let (($x344 (=> $x318 $x343)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd (_ bv0 32)))))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv0 32) (_ bv2 32))) ?x321)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd (_ bv0 32) (_ bv3 32))) ?x324)))
 (let (($x328 (= (_ bv0 32) ?x327)))
 (let (($x329 (=> $x318 $x328)))
 (let ((?x309 (ite true (_ bv0 32) (_ bv1 32))))
 (let (($x315 (bvuge ?x309 (_ bv1 32))))
 (let (($x316 (= $x100 $x315)))
 (let (($x317 (=> $x267 $x316)))
 (let (($x313 (and $x267 $x82)))
 (let (($x314 (=> $x313 $x97)))
 (let (($x310 (= ?x309 (_ bv0 32))))
 (let (($x311 (= $x82 $x310)))
 (let (($x312 (=> $x267 $x311)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x10 (ite $x29 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x76 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x139 (ite $x29 (_ bv4 32) ?x76)))
 (let ((?x54 (bvadd ?x139 (_ bv3 32))))
 (let ((?x67 (bvadd ?x139 (_ bv2 32))))
 (let ((?x81 (bvadd ?x139 (_ bv1 32))))
 (let ((?x114 (bvadd ?x139 (_ bv0 32))))
 (let ((?x73 (bvadd ?x10 (_ bv3 32))))
 (let ((?x109 (bvadd ?x10 (_ bv2 32))))
 (let ((?x23 (bvadd ?x10 (_ bv1 32))))
 (let ((?x77 (bvadd ?x10 (_ bv0 32))))
 (let ((?x274 (ite $x29 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_0)))
 (let ((?x278 (store (store ?x274 ?x77 ((_ extract 7 0) input.dst.llvm-%val)) ?x23 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x282 (store (store ?x278 ?x109 ((_ extract 23 16) input.dst.llvm-%val)) ?x73 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x297 (store (store (store ?x282 ?x114 ((_ extract 7 0) (_ bv0 32))) ?x81 ((_ extract 15 8) (_ bv0 32))) ?x67 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x299 (store ?x297 ?x54 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x304 (concat (select ?x299 ?x109) (concat (select ?x299 ?x23) (select ?x299 ?x10)))))
 (let ((?x306 (concat (select ?x299 ?x73) ?x304)))
 (let (($x307 (= input.spec-%var-val-0 ?x306)))
 (let (($x308 (=> $x267 $x307)))
 (let (($x262 (= (_ bv0 32) ?x10)))
 (let ((?x263 (ite $x262 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x263 (_ bv1 32))))
 (let (($x269 (= $x267 $x268)))
 (let (($x364 (and (and (= (= (_ bv1 32) (_ bv0 32)) (= ?x263 (_ bv0 32))) (=> (= (_ bv1 32) (_ bv0 32)) $x97)) $x269)))
 (let (($x370 (and (and (and (and (and (and $x364 $x308) $x312) $x314) $x317) $x329) $x344)))
 (let (($x373 (and (and (and $x370 $x346) $x349) $x362)))
 (let (($x375 (and $x373 $x374)))
 (let (($x376 (= $x375 true)))
 (let (($x246 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x247 (= $x246 $x100)))
 (let (($x235 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x248 (=> $x235 $x247)))
 (let (($x241 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x244 (and $x235 $x241)))
 (let (($x245 (=> $x244 $x97)))
 (let (($x242 (= $x241 $x82)))
 (let (($x243 (=> $x235 $x242)))
 (let (($x238 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x239 (=> $x235 $x238)))
 (let (($x236 (= $x235 $x100)))
 (let (($x232 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x234 (=> $x232 $x97)))
 (let (($x250 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x232 $x82)) $x234)))
 (let (($x255 (and (and (and (and (and $x250 $x236) $x239) $x243) $x245) $x248)))
 (let (($x121 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x256 (=> $x121 $x255)))
 (let (($x257 (= $x256 true)))
 (let ((?x223 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x223)))
 (let (($x226 (= ?x224 input.dst.llvm-%val)))
 (let (($x227 (= $x226 true)))
 (let (($x215 (= (bvand ?x139 (_ bv4294967292 32)) ?x139)))
 (let (($x132 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x210 (ite $x132 (bvuge ?x139 (bvsub ?x139 (_ bv4 32))) (bvult ?x139 (bvsub ?x139 (_ bv4 32))))))
 (let (($x206 (= (bvand ?x10 (_ bv4294967292 32)) ?x10)))
 (let (($x113 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x202 (ite $x113 (bvuge ?x10 (bvsub ?x10 (_ bv0 32))) (bvult ?x10 (bvsub ?x10 (_ bv0 32))))))
 (let (($x203 (and true $x202)))
 (let (($x204 (and $x202 $x203)))
 (let (($x213 (and (and (and $x203 $x204) $x206) $x210)))
 (let (($x216 (and $x213 $x215)))
 (let ((?x55 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x13 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x69 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x65 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x47 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x56 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x17 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x165 (and (and true (= (select input.dst.llvm-mem.alloc ?x17) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x56) (_ bv1 8)))))
 (let (($x49 (and (and $x165 (= (select input.dst.llvm-mem.alloc ?x47) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x65) (_ bv1 8)))))
 (let (($x66 (and (and $x49 (= (select input.dst.llvm-mem.alloc ?x76) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x69) (_ bv1 8)))))
 (let (($x193 (and (and $x66 (= (select input.dst.llvm-mem.alloc ?x13) (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x55) (_ bv1 8)))))
 (let ((?x157 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x197 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x157) (or false (or false $x193)))))
 (let (($x167 (or $x29 $x197)))
 (let (($x164 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x55)))
 (let (($x180 (or false $x164)))
 (let (($x163 (or $x29 $x180)))
 (let (($x133 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x219 (and (and (and $x133 $x163) $x167) $x216)))
 (let (($x220 (= $x219 true)))
 (let (($x185 (= $x167 true)))
 (let (($x175 (= $x133 true)))
 (let (($x177 (= $x163 true)))
 (let ((?x93 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x93 (_ bv4294967292 32)) ?x93)))
 (let (($x174 (ite $x132 (bvuge ?x93 (bvsub ?x93 (_ bv4 32))) (bvult ?x93 (bvsub ?x93 (_ bv4 32))))))
 (let (($x84 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x128 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x120 (ite $x113 (bvuge input.dst.llvm-%call.Lentry%2%d ?x128) (bvult input.dst.llvm-%call.Lentry%2%d ?x128))))
 (let (($x125 (and true $x120)))
 (let (($x127 (and $x120 $x125)))
 (let (($x183 (and (and (and $x125 $x127) $x84) $x174)))
 (let (($x173 (and $x183 $x159)))
 (let (($x169 (= $x173 true)))
 (let ((?x108 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x108)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x26 $x35)))
 (let (($x118 (and $x140 $x138)))
 (let (($x102 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x102 $x118)))
 (let (($x62 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x62)))))
 (let (($x99 (and $x107 $x124)))
 (let (($x136 (= $x99 true)))
 (let (($x170 (and $x136 $x169)))
 (let (($x181 (and $x170 $x177)))
 (let (($x187 (and $x181 $x175)))
 (let (($x198 (and $x187 $x185)))
 (let (($x221 (and $x198 $x220)))
 (let (($x228 (and $x221 $x227)))
 (let (($x258 (and $x228 $x257)))
 (let (($x87 (= $x121 $x100)))
 (let (($x129 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x85 (=> $x129 $x97)))
 (let (($x83 (= $x129 $x82)))
 (let (($x101 (and (and $x83 $x85) $x87)))
 (let (($x259 (and $x101 $x258)))
 (let ((?x25 (store (store (store input.dst.llvm-mem.alloc ?x17 (_ bv2 8)) ?x56 (_ bv2 8)) ?x47 (_ bv2 8))))
 (let ((?x90 (store (store (store (store ?x25 ?x65 (_ bv2 8)) ?x76 (_ bv2 8)) ?x69 (_ bv2 8)) ?x13 (_ bv2 8))))
 (let ((?x155 (store ?x90 ?x55 (_ bv2 8))))
 (let ((?x71 (ite $x29 input.dst.llvm-mem.alloc ?x155)))
 (let (($x94 (and (and true (= (select ?x71 ?x114) (_ bv2 8))) (= (select ?x71 ?x81) (_ bv2 8)))))
 (let (($x135 (and (and $x94 (= (select ?x71 ?x67) (_ bv2 8))) (= (select ?x71 ?x54) (_ bv2 8)))))
 (let (($x79 (=> (bvule ?x139 (bvsub (bvadd ?x139 (_ bv4 32)) (_ bv1 32))) (or false (or false $x135)))))
 (let (($x45 (and (and true (= (select ?x71 ?x77) (_ bv2 8))) (= (select ?x71 ?x23) (_ bv2 8)))))
 (let (($x145 (and (and $x45 (= (select ?x71 ?x109) (_ bv2 8))) (= (select ?x71 ?x73) (_ bv2 8)))))
 (let (($x105 (=> (bvule ?x10 (bvsub (bvadd ?x10 (_ bv4 32)) (_ bv1 32))) (or false (or false $x145)))))
 (let (($x57 (and $x105 $x79)))
 (let (($x260 (and $x57 $x259)))
 (let (($x377 (=> $x260 $x376)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x50 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x61 $x50) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x379 (and $x48 (not $x377))))
 (let (($x291 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x284 (select solver-mem_0 us-bounded-var!)))
 (let ((?x157 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x289 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x157))))
 (ite $x289 (= ?x284 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x284 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x291) $x379))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x35)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x89 $x26)))
 (let (($x108 (and $x78 $x140)))
 (let (($x107 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x107 $x108)))
 (let (($x58 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x5 (and $x62 $x138)))
 (let (($x66 (= $x5 true)))
 (let (($x61 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x156 (= $x168 $x61)))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x24 (=> $x163 $x156)))
 (let (($x272 (= false false)))
 (let (($x175 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x172 (and $x163 $x175)))
 (let (($x184 (=> $x172 $x272)))
 (let (($x287 (= (_ bv0 32) (_ bv0 32))))
 (let (($x187 (= $x175 $x287)))
 (let (($x196 (=> $x163 $x187)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x162 (=> $x163 $x179)))
 (let (($x177 (= $x163 $x61)))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x180 (=> $x170 $x272)))
 (let (($x161 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x170 $x287)) $x180)))
 (let (($x49 (and (and (and (and (and $x161 $x177) $x162) $x196) $x184) $x24)))
 (let (($x39 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x31 (=> $x39 $x49)))
 (let (($x14 (= $x31 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x120 (concat ?x128 (concat ?x136 ?x124)))))
 (let (($x174 (= ?x125 input.dst.llvm-%val)))
 (let (($x183 (= $x174 true)))
 (let (($x127 (= input.dst.llvm-%val ?x125)))
 (let (($x143 (and (and (and $x62 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x138) $x127)))
 (let ((?x13 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x21 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x151 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x146 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x131 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x81 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x131 (_ bv1 8))) (= ?x146 (_ bv1 8)))))
 (let (($x129 (and (and (and (and $x81 (= ?x151 (_ bv1 8))) (= ?x21 (_ bv1 8))) (= ?x36 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x13) (_ bv1 8)))))
 (let (($x97 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x85 (=> $x97 (or false (or false $x129)))))
 (let (($x69 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x44 (or $x69 $x85)))
 (let (($x84 (and $x44 $x143)))
 (let (($x32 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x166 (and $x32 $x84)))
 (let ((?x17 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x12 (= (bvand ?x17 (_ bv4294967292 32)) ?x17)))
 (let (($x18 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x17 (bvsub ?x17 (_ bv4 32))) (bvult ?x17 (bvsub ?x17 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x117 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x43 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x117) (bvult input.dst.llvm-%call.Lentry%2%d ?x117))))
 (let (($x29 (and true $x43)))
 (let (($x10 (and $x43 $x29)))
 (let (($x40 (and (and (and $x29 $x10) $x22) $x18)))
 (let (($x90 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x13)))
 (let (($x34 (or false $x90)))
 (let (($x55 (or $x69 $x34)))
 (let (($x122 (and (and (and $x55 $x40) $x12) $x166)))
 (let (($x141 (= $x122 true)))
 (let (($x45 (= $x44 true)))
 (let (($x147 (= $x32 true)))
 (let (($x155 (= $x55 true)))
 (let (($x76 (and $x40 $x12)))
 (let (($x52 (= $x76 true)))
 (let (($x71 (and $x52 $x155)))
 (let (($x23 (and $x71 $x147)))
 (let (($x88 (and $x23 $x45)))
 (let (($x144 (and $x88 $x141)))
 (let (($x182 (and $x144 $x183)))
 (let (($x190 (and $x182 $x14)))
 (let (($x59 (= $x39 $x61)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x284 (=> $x157 $x272)))
 (let (($x289 (= $x157 $x287)))
 (let (($x63 (and (and $x289 $x284) $x59)))
 (let (($x7 (and $x63 $x190)))
 (let (($x8 (=> $x7 $x66)))
 (let (($x291 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x270 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x283 $x270) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x291 (not $x8)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x35 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x35)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x89 $x26)))
 (let (($x108 (and $x78 $x140)))
 (let (($x107 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x107 $x108)))
 (let (($x58 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x5 (and $x62 $x138)))
 (let (($x66 (= $x5 true)))
 (let (($x61 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x168 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x156 (= $x168 $x61)))
 (let (($x163 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x24 (=> $x163 $x156)))
 (let (($x272 (= false false)))
 (let (($x175 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x172 (and $x163 $x175)))
 (let (($x184 (=> $x172 $x272)))
 (let (($x287 (= (_ bv0 32) (_ bv0 32))))
 (let (($x187 (= $x175 $x287)))
 (let (($x196 (=> $x163 $x187)))
 (let (($x179 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x162 (=> $x163 $x179)))
 (let (($x177 (= $x163 $x61)))
 (let (($x170 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x180 (=> $x170 $x272)))
 (let (($x161 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x170 $x287)) $x180)))
 (let (($x49 (and (and (and (and (and $x161 $x177) $x162) $x196) $x184) $x24)))
 (let (($x39 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x31 (=> $x39 $x49)))
 (let (($x14 (= $x31 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x120 (concat ?x128 (concat ?x136 ?x124)))))
 (let (($x174 (= ?x125 input.dst.llvm-%val)))
 (let (($x183 (= $x174 true)))
 (let (($x127 (= input.dst.llvm-%val ?x125)))
 (let (($x143 (and (and (and $x62 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x138) $x127)))
 (let ((?x13 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x36 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x21 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x151 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x146 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x131 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x81 (and (and (and (and true (= ?x106 (_ bv1 8))) (= ?x145 (_ bv1 8))) (= ?x131 (_ bv1 8))) (= ?x146 (_ bv1 8)))))
 (let (($x129 (and (and (and (and $x81 (= ?x151 (_ bv1 8))) (= ?x21 (_ bv1 8))) (= ?x36 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x13) (_ bv1 8)))))
 (let (($x97 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x85 (=> $x97 (or false (or false $x129)))))
 (let (($x69 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x44 (or $x69 $x85)))
 (let (($x84 (and $x44 $x143)))
 (let (($x32 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x166 (and $x32 $x84)))
 (let ((?x17 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x12 (= (bvand ?x17 (_ bv4294967292 32)) ?x17)))
 (let (($x18 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x17 (bvsub ?x17 (_ bv4 32))) (bvult ?x17 (bvsub ?x17 (_ bv4 32))))))
 (let (($x22 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x117 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x43 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x117) (bvult input.dst.llvm-%call.Lentry%2%d ?x117))))
 (let (($x29 (and true $x43)))
 (let (($x10 (and $x43 $x29)))
 (let (($x40 (and (and (and $x29 $x10) $x22) $x18)))
 (let (($x90 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x13)))
 (let (($x34 (or false $x90)))
 (let (($x55 (or $x69 $x34)))
 (let (($x122 (and (and (and $x55 $x40) $x12) $x166)))
 (let (($x141 (= $x122 true)))
 (let (($x45 (= $x44 true)))
 (let (($x147 (= $x32 true)))
 (let (($x155 (= $x55 true)))
 (let (($x76 (and $x40 $x12)))
 (let (($x52 (= $x76 true)))
 (let (($x71 (and $x52 $x155)))
 (let (($x23 (and $x71 $x147)))
 (let (($x88 (and $x23 $x45)))
 (let (($x144 (and $x88 $x141)))
 (let (($x182 (and $x144 $x183)))
 (let (($x190 (and $x182 $x14)))
 (let (($x59 (= $x39 $x61)))
 (let (($x157 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x284 (=> $x157 $x272)))
 (let (($x289 (= $x157 $x287)))
 (let (($x63 (and (and $x289 $x284) $x59)))
 (let (($x7 (and $x63 $x190)))
 (let (($x8 (=> $x7 $x66)))
 (let (($x291 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x270 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x283 $x270) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x291 (not $x8)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x66 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x66)))
 (let (($x33 (= ?x8 input.dst.llvm-%val)))
 (let (($x11 (= $x33 true)))
 (let (($x39 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x189 (= $x196 $x39)))
 (let (($x161 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x172 (=> $x161 $x189)))
 (let (($x286 (= false false)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x175 (and $x161 $x162)))
 (let (($x187 (=> $x175 $x286)))
 (let (($x273 (= (_ bv0 32) (_ bv0 32))))
 (let (($x188 (= $x162 $x273)))
 (let (($x133 (=> $x161 $x188)))
 (let (($x30 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x181 (=> $x161 $x30)))
 (let (($x163 (= $x161 $x39)))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x180 (=> $x164 $x286)))
 (let (($x20 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x164 $x273)) $x180)))
 (let (($x31 (and (and (and (and (and $x20 $x163) $x181) $x133) $x187) $x172)))
 (let (($x380 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x14 (=> $x380 $x31)))
 (let (($x190 (= $x14 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x136 (concat ?x137 (concat ?x118 ?x138)))))
 (let (($x183 (= ?x124 input.dst.llvm-%val)))
 (let (($x182 (= $x183 true)))
 (let (($x113 (= input.dst.llvm-%val ?x124)))
 (let ((?x26 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x26)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x92 $x89)))
 (let (($x35 (and $x102 $x78)))
 (let (($x176 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x176 $x35)))
 (let (($x100 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x58 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x127 (and (and (and $x121 $x100) $x140) $x113)))
 (let ((?x90 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x151 (and (and (and (and true (= ?x16 (_ bv1 8))) (= ?x152 (_ bv1 8))) (= ?x96 (_ bv1 8))) (= ?x81 (_ bv1 8)))))
 (let (($x83 (and (and (and (and $x151 (= ?x67 (_ bv1 8))) (= ?x134 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x90) (_ bv1 8)))))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x88 (=> $x45 (or false (or false $x83)))))
 (let (($x69 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x97 (or $x69 $x88)))
 (let (($x143 (and $x97 $x127)))
 (let (($x147 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x84 (and $x147 $x143)))
 (let ((?x25 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x12 (= (bvand ?x25 (_ bv4294967292 32)) ?x25)))
 (let (($x56 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x25 (bvsub ?x25 (_ bv4 32))) (bvult ?x25 (bvsub ?x25 (_ bv4 32))))))
 (let (($x91 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x60 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x43 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x60) (bvult input.dst.llvm-%call.Lentry%2%d ?x60))))
 (let (($x29 (and true $x43)))
 (let (($x10 (and $x43 $x29)))
 (let (($x40 (and (and (and $x29 $x10) $x91) $x56)))
 (let (($x34 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x90)))
 (let (($x55 (or false $x34)))
 (let (($x155 (or $x69 $x55)))
 (let (($x141 (and (and (and $x155 $x40) $x12) $x84)))
 (let (($x144 (= $x141 true)))
 (let (($x9 (= $x97 true)))
 (let (($x23 (= $x147 true)))
 (let (($x71 (= $x155 true)))
 (let (($x76 (and $x40 $x12)))
 (let (($x52 (= $x76 true)))
 (let (($x77 (and $x52 $x71)))
 (let (($x109 (and $x77 $x23)))
 (let (($x132 (and $x109 $x9)))
 (let (($x174 (and $x132 $x144)))
 (let (($x159 (and $x174 $x182)))
 (let (($x7 (and $x159 $x190)))
 (let (($x61 (= $x380 $x39)))
 (let (($x285 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x290 (=> $x285 $x286)))
 (let (($x288 (= $x285 $x273)))
 (let (($x63 (and (and $x288 $x290) $x61)))
 (let (($x5 (and $x63 $x7)))
 (let (($x42 (=> $x5 $x11)))
 (let (($x284 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x157 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x287 $x157) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x284 (not $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(assert
 (let ((?x66 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x66)))
 (let (($x33 (= ?x8 input.dst.llvm-%val)))
 (let (($x11 (= $x33 true)))
 (let (($x39 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x189 (= $x196 $x39)))
 (let (($x161 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x172 (=> $x161 $x189)))
 (let (($x286 (= false false)))
 (let (($x162 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x175 (and $x161 $x162)))
 (let (($x187 (=> $x175 $x286)))
 (let (($x273 (= (_ bv0 32) (_ bv0 32))))
 (let (($x188 (= $x162 $x273)))
 (let (($x133 (=> $x161 $x188)))
 (let (($x30 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x181 (=> $x161 $x30)))
 (let (($x163 (= $x161 $x39)))
 (let (($x164 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x180 (=> $x164 $x286)))
 (let (($x20 (and (and (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32)) (= $x164 $x273)) $x180)))
 (let (($x31 (and (and (and (and (and $x20 $x163) $x181) $x133) $x187) $x172)))
 (let (($x380 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x14 (=> $x380 $x31)))
 (let (($x190 (= $x14 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x136 (concat ?x137 (concat ?x118 ?x138)))))
 (let (($x183 (= ?x124 input.dst.llvm-%val)))
 (let (($x182 (= $x183 true)))
 (let (($x113 (= input.dst.llvm-%val ?x124)))
 (let ((?x26 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x26)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x92 $x89)))
 (let (($x35 (and $x102 $x78)))
 (let (($x176 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x176 $x35)))
 (let (($x100 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x58 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv1 8)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x127 (and (and (and $x121 $x100) $x140) $x113)))
 (let ((?x90 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x79 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x134 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x151 (and (and (and (and true (= ?x16 (_ bv1 8))) (= ?x152 (_ bv1 8))) (= ?x96 (_ bv1 8))) (= ?x81 (_ bv1 8)))))
 (let (($x83 (and (and (and (and $x151 (= ?x67 (_ bv1 8))) (= ?x134 (_ bv1 8))) (= ?x79 (_ bv1 8))) (= (select input.dst.llvm-mem.alloc ?x90) (_ bv1 8)))))
 (let (($x45 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x88 (=> $x45 (or false (or false $x83)))))
 (let (($x69 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x97 (or $x69 $x88)))
 (let (($x143 (and $x97 $x127)))
 (let (($x147 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x84 (and $x147 $x143)))
 (let ((?x25 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x12 (= (bvand ?x25 (_ bv4294967292 32)) ?x25)))
 (let (($x56 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x25 (bvsub ?x25 (_ bv4 32))) (bvult ?x25 (bvsub ?x25 (_ bv4 32))))))
 (let (($x91 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x60 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x43 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x60) (bvult input.dst.llvm-%call.Lentry%2%d ?x60))))
 (let (($x29 (and true $x43)))
 (let (($x10 (and $x43 $x29)))
 (let (($x40 (and (and (and $x29 $x10) $x91) $x56)))
 (let (($x34 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x90)))
 (let (($x55 (or false $x34)))
 (let (($x155 (or $x69 $x55)))
 (let (($x141 (and (and (and $x155 $x40) $x12) $x84)))
 (let (($x144 (= $x141 true)))
 (let (($x9 (= $x97 true)))
 (let (($x23 (= $x147 true)))
 (let (($x71 (= $x155 true)))
 (let (($x76 (and $x40 $x12)))
 (let (($x52 (= $x76 true)))
 (let (($x77 (and $x52 $x71)))
 (let (($x109 (and $x77 $x23)))
 (let (($x132 (and $x109 $x9)))
 (let (($x174 (and $x132 $x144)))
 (let (($x159 (and $x174 $x182)))
 (let (($x7 (and $x159 $x190)))
 (let (($x61 (= $x380 $x39)))
 (let (($x285 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x290 (=> $x285 $x286)))
 (let (($x288 (= $x285 $x273)))
 (let (($x63 (and (and $x288 $x290) $x61)))
 (let (($x5 (and $x63 $x7)))
 (let (($x42 (=> $x5 $x11)))
 (let (($x284 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x157 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x287 $x157) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x284 (not $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087460/query
