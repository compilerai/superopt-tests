==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x32 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x32)))))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x13)))
 (let (($x19 (and $x12 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x36))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x32 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x32)))))
 (let (($x20 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x11 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x8 $x13)))
 (let (($x19 (and $x12 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x36))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-mem.alloc @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000010))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x02))
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv0 32) (_ bv2 8)))
(define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x96 (= true false)))
 (let (($x97 (= $x96 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x89 (concat ?x86 (concat ?x82 ?x80)))))
 (let (($x91 (= ?x90 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let (($x74 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let ((?x64 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x64)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x59 $x62)))
 (let (($x66 (and $x63 $x65)))
 (let (($x6 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x6 $x66)))
 (let (($x54 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x54)))))
 (let (($x68 (and $x58 $x67)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x78 (and $x71 $x77)))
 (let (($x94 (and $x78 $x93)))
 (let (($x18 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x12 (and $x18 true)))
 (let (($x41 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x14 (=> $x41 $x12)))
 (let (($x10 (= $x41 false)))
 (let (($x46 (= false false)))
 (let (($x27 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x40 (=> $x27 $x46)))
 (let (($x17 (= $x27 true)))
 (let (($x29 (and $x17 $x40)))
 (let (($x22 (and $x29 $x10)))
 (let (($x42 (and $x22 $x14)))
 (let (($x30 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x28 (and $x30 $x42)))
 (let (($x43 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x9 (=> $x43 $x28)))
 (let (($x33 (= $x43 false)))
 (let (($x32 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x47 (=> $x32 $x46)))
 (let (($x13 (= $x32 true)))
 (let (($x35 (and $x13 $x47)))
 (let (($x7 (and $x35 $x33)))
 (let (($x31 (and $x7 $x9)))
 (let (($x95 (and $x31 $x94)))
 (let (($x98 (=> $x95 $x97)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x45 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x16 $x45) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x96 (= true false)))
 (let (($x97 (= $x96 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x89 (concat ?x86 (concat ?x82 ?x80)))))
 (let (($x91 (= ?x90 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let (($x74 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let ((?x64 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x64)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x59 $x62)))
 (let (($x66 (and $x63 $x65)))
 (let (($x6 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x6 $x66)))
 (let (($x54 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x54)))))
 (let (($x68 (and $x58 $x67)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x78 (and $x71 $x77)))
 (let (($x94 (and $x78 $x93)))
 (let (($x18 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x12 (and $x18 true)))
 (let (($x41 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x14 (=> $x41 $x12)))
 (let (($x10 (= $x41 false)))
 (let (($x46 (= false false)))
 (let (($x27 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x40 (=> $x27 $x46)))
 (let (($x17 (= $x27 true)))
 (let (($x29 (and $x17 $x40)))
 (let (($x22 (and $x29 $x10)))
 (let (($x42 (and $x22 $x14)))
 (let (($x30 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x28 (and $x30 $x42)))
 (let (($x43 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x9 (=> $x43 $x28)))
 (let (($x33 (= $x43 false)))
 (let (($x32 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x47 (=> $x32 $x46)))
 (let (($x13 (= $x32 true)))
 (let (($x35 (and $x13 $x47)))
 (let (($x7 (and $x35 $x33)))
 (let (($x31 (and $x7 $x9)))
 (let (($x95 (and $x31 $x94)))
 (let (($x98 (=> $x95 $x97)))
 (let (($x48 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x45 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x16 $x45) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x48 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x96 (= true false)))
 (let (($x97 (= $x96 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x87 (concat ?x82 (concat ?x84 ?x88)))))
 (let (($x91 (= ?x90 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let (($x74 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let ((?x64 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x64)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x59 $x62)))
 (let (($x66 (and $x63 $x65)))
 (let (($x57 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x57 $x66)))
 (let (($x55 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x55)))))
 (let (($x68 (and $x6 $x67)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x78 (and $x71 $x77)))
 (let (($x94 (and $x78 $x93)))
 (let (($x18 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x12 (and $x18 false)))
 (let (($x41 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x14 (=> $x41 $x12)))
 (let (($x10 (= $x41 false)))
 (let (($x23 (= false false)))
 (let (($x27 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x40 (=> $x27 $x23)))
 (let (($x17 (= $x27 true)))
 (let (($x29 (and $x17 $x40)))
 (let (($x22 (and $x29 $x10)))
 (let (($x42 (and $x22 $x14)))
 (let (($x30 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x28 (and $x30 $x42)))
 (let (($x43 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x9 (=> $x43 $x28)))
 (let (($x33 (= $x43 false)))
 (let (($x15 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x49 (=> $x15 $x23)))
 (let (($x34 (= $x15 true)))
 (let (($x37 (and $x34 $x49)))
 (let (($x7 (and $x37 $x33)))
 (let (($x31 (and $x7 $x9)))
 (let (($x95 (and $x31 $x94)))
 (let (($x98 (=> $x95 $x97)))
 (let (($x35 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x13 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x35 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x96 (= true false)))
 (let (($x97 (= $x96 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x87 (concat ?x82 (concat ?x84 ?x88)))))
 (let (($x91 (= ?x90 input.dst.llvm-%val)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let (($x74 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let ((?x64 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x64)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x59 $x62)))
 (let (($x66 (and $x63 $x65)))
 (let (($x57 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x57 $x66)))
 (let (($x55 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x55)))))
 (let (($x68 (and $x6 $x67)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x78 (and $x71 $x77)))
 (let (($x94 (and $x78 $x93)))
 (let (($x18 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x12 (and $x18 false)))
 (let (($x41 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x14 (=> $x41 $x12)))
 (let (($x10 (= $x41 false)))
 (let (($x23 (= false false)))
 (let (($x27 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x40 (=> $x27 $x23)))
 (let (($x17 (= $x27 true)))
 (let (($x29 (and $x17 $x40)))
 (let (($x22 (and $x29 $x10)))
 (let (($x42 (and $x22 $x14)))
 (let (($x30 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x28 (and $x30 $x42)))
 (let (($x43 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x9 (=> $x43 $x28)))
 (let (($x33 (= $x43 false)))
 (let (($x15 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x49 (=> $x15 $x23)))
 (let (($x34 (= $x15 true)))
 (let (($x37 (and $x34 $x49)))
 (let (($x7 (and $x37 $x33)))
 (let (($x31 (and $x7 $x9)))
 (let (($x95 (and $x31 $x94)))
 (let (($x98 (=> $x95 $x97)))
 (let (($x35 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x13 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x35 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x144 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x144)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x141)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x140 $x142)))
 (let (($x146 (and $x143 $x145)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x139 $x146)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x172 (and $x136 $x147)))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x158 (concat ?x157 (concat ?x154 (concat ?x151 ?x149)))))
 (let (($x159 (= input.dst.llvm-%val ?x158)))
 (let (($x162 (and (and (and $x136 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x147) $x159)))
 (let (($x124 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x163 (and $x124 $x162)))
 (let ((?x116 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x97 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x99 (and (and (and (and true (= ?x81 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x92 (_ bv2 8))) (= ?x97 (_ bv2 8)))))
 (let (($x118 (and (and (and (and $x99 (= ?x102 (_ bv2 8))) (= ?x107 (_ bv2 8))) (= ?x112 (_ bv2 8))) (= ?x116 (_ bv2 8)))))
 (let (($x121 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x122 (=> $x121 (or false (or false $x118)))))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x29 (or $x28 $x122)))
 (let ((?x70 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x75 (= (bvand ?x70 (_ bv4294967292 32)) ?x70)))
 (let (($x66 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x70 (bvsub ?x70 (_ bv4 32))) (bvult ?x70 (bvsub ?x70 (_ bv4 32))))))
 (let (($x17 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x8 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x8) (bvult input.dst.llvm-%call.Lentry%2%d ?x8))))
 (let (($x7 (and true $x16)))
 (let (($x30 (and $x16 $x7)))
 (let (($x6 (and (and (and $x7 $x30) $x17) $x66)))
 (let (($x166 (and (and (and $x6 $x75) $x29) $x163)))
 (let ((?x34 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x12 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x34)))
 (let (($x25 (or false $x12)))
 (let (($x27 (or $x28 $x25)))
 (let (($x167 (and $x27 $x166)))
 (let (($x168 (= $x167 true)))
 (let (($x169 (= $x168 true)))
 (let (($x170 (= $x169 true)))
 (let (($x43 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x71 (and $x43 true)))
 (let (($x48 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x72 (=> $x48 $x71)))
 (let (($x19 (= $x48 false)))
 (let (($x42 (= false false)))
 (let (($x41 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x41 $x42)))
 (let (($x52 (= $x41 true)))
 (let (($x83 (and $x52 $x36)))
 (let (($x55 (and $x83 $x19)))
 (let (($x45 (and $x55 $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x20 (and $x69 $x45)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x47 (=> $x10 $x20)))
 (let (($x26 (= $x10 false)))
 (let (($x18 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x73 (=> $x18 $x42)))
 (let (($x39 (= $x18 true)))
 (let (($x11 (and $x39 $x73)))
 (let (($x61 (and $x11 $x26)))
 (let (($x9 (and $x61 $x47)))
 (let (($x171 (and $x9 $x170)))
 (let (($x175 (=> $x171 $x174)))
 (let (($x64 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x77 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x37 $x77) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x64 (not $x175))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x144 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x144)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x141)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x140 $x142)))
 (let (($x146 (and $x143 $x145)))
 (let (($x139 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x139 $x146)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x172 (and $x136 $x147)))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x158 (concat ?x157 (concat ?x154 (concat ?x151 ?x149)))))
 (let (($x159 (= input.dst.llvm-%val ?x158)))
 (let (($x162 (and (and (and $x136 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x147) $x159)))
 (let (($x124 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x163 (and $x124 $x162)))
 (let ((?x116 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x97 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x99 (and (and (and (and true (= ?x81 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x92 (_ bv2 8))) (= ?x97 (_ bv2 8)))))
 (let (($x118 (and (and (and (and $x99 (= ?x102 (_ bv2 8))) (= ?x107 (_ bv2 8))) (= ?x112 (_ bv2 8))) (= ?x116 (_ bv2 8)))))
 (let (($x121 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x122 (=> $x121 (or false (or false $x118)))))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x29 (or $x28 $x122)))
 (let ((?x70 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x75 (= (bvand ?x70 (_ bv4294967292 32)) ?x70)))
 (let (($x66 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x70 (bvsub ?x70 (_ bv4 32))) (bvult ?x70 (bvsub ?x70 (_ bv4 32))))))
 (let (($x17 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x8 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x8) (bvult input.dst.llvm-%call.Lentry%2%d ?x8))))
 (let (($x7 (and true $x16)))
 (let (($x30 (and $x16 $x7)))
 (let (($x6 (and (and (and $x7 $x30) $x17) $x66)))
 (let (($x166 (and (and (and $x6 $x75) $x29) $x163)))
 (let ((?x34 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x12 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x34)))
 (let (($x25 (or false $x12)))
 (let (($x27 (or $x28 $x25)))
 (let (($x167 (and $x27 $x166)))
 (let (($x168 (= $x167 true)))
 (let (($x169 (= $x168 true)))
 (let (($x170 (= $x169 true)))
 (let (($x43 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x71 (and $x43 true)))
 (let (($x48 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x72 (=> $x48 $x71)))
 (let (($x19 (= $x48 false)))
 (let (($x42 (= false false)))
 (let (($x41 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x41 $x42)))
 (let (($x52 (= $x41 true)))
 (let (($x83 (and $x52 $x36)))
 (let (($x55 (and $x83 $x19)))
 (let (($x45 (and $x55 $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x20 (and $x69 $x45)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x47 (=> $x10 $x20)))
 (let (($x26 (= $x10 false)))
 (let (($x18 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x73 (=> $x18 $x42)))
 (let (($x39 (= $x18 true)))
 (let (($x11 (and $x39 $x73)))
 (let (($x61 (and $x11 $x26)))
 (let (($x9 (and $x61 $x47)))
 (let (($x171 (and $x9 $x170)))
 (let (($x175 (=> $x171 $x174)))
 (let (($x64 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x77 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x37 $x77) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x64 (not $x175))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x173 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x174 (= $x173 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x151 (concat ?x153 (concat ?x148 ?x147)))))
 (let (($x152 (= input.dst.llvm-%val ?x149)))
 (let ((?x142 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x142)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x139)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x140)))
 (let (($x144 (and $x141 $x143)))
 (let (($x160 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x160 $x144)))
 (let (($x126 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x159 (and (and (and $x125 $x126) $x145) $x152)))
 (let (($x123 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x162 (and $x123 $x159)))
 (let ((?x117 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x103 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x100 (and (and (and (and true (= ?x82 (_ bv2 8))) (= ?x85 (_ bv2 8))) (= ?x93 (_ bv2 8))) (= ?x98 (_ bv2 8)))))
 (let (($x119 (and (and (and (and $x100 (= ?x103 (_ bv2 8))) (= ?x108 (_ bv2 8))) (= ?x113 (_ bv2 8))) (= ?x117 (_ bv2 8)))))
 (let (($x29 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x165 (=> $x29 (or false (or false $x119)))))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x87 (or $x28 $x165)))
 (let ((?x101 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x164 (= (bvand ?x101 (_ bv4294967292 32)) ?x101)))
 (let (($x33 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x101 (bvsub ?x101 (_ bv4 32))) (bvult ?x101 (bvsub ?x101 (_ bv4 32))))))
 (let (($x17 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x8 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x7 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x8) (bvult input.dst.llvm-%call.Lentry%2%d ?x8))))
 (let (($x30 (and true $x7)))
 (let (($x68 (and $x7 $x30)))
 (let (($x58 (and (and (and $x30 $x68) $x17) $x33)))
 (let (($x167 (and (and (and $x58 $x164) $x87) $x162)))
 (let ((?x12 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x25 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x12)))
 (let (($x27 (or false $x25)))
 (let (($x38 (or $x28 $x27)))
 (let (($x168 (and $x38 $x167)))
 (let (($x169 (= $x168 true)))
 (let (($x170 (= $x169 true)))
 (let (($x171 (= $x170 true)))
 (let (($x43 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x71 (and $x43 true)))
 (let (($x48 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x72 (=> $x48 $x71)))
 (let (($x19 (= $x48 false)))
 (let (($x53 (= false false)))
 (let (($x41 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x41 $x53)))
 (let (($x52 (= $x41 true)))
 (let (($x83 (and $x52 $x36)))
 (let (($x55 (and $x83 $x19)))
 (let (($x45 (and $x55 $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x20 (and $x69 $x45)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x47 (=> $x10 $x20)))
 (let (($x26 (= $x10 false)))
 (let (($x49 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x76 (=> $x49 $x53)))
 (let (($x24 (= $x49 true)))
 (let (($x44 (and $x24 $x76)))
 (let (($x61 (and $x44 $x26)))
 (let (($x9 (and $x61 $x47)))
 (let (($x172 (and $x9 $x171)))
 (let (($x175 (=> $x172 $x174)))
 (let (($x11 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x18 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x18) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x11 (not $x175))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x173 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x174 (= $x173 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x151 (concat ?x153 (concat ?x148 ?x147)))))
 (let (($x152 (= input.dst.llvm-%val ?x149)))
 (let ((?x142 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x142)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x139)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x140)))
 (let (($x144 (and $x141 $x143)))
 (let (($x160 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x160 $x144)))
 (let (($x126 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x159 (and (and (and $x125 $x126) $x145) $x152)))
 (let (($x123 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x162 (and $x123 $x159)))
 (let ((?x117 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x103 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x100 (and (and (and (and true (= ?x82 (_ bv2 8))) (= ?x85 (_ bv2 8))) (= ?x93 (_ bv2 8))) (= ?x98 (_ bv2 8)))))
 (let (($x119 (and (and (and (and $x100 (= ?x103 (_ bv2 8))) (= ?x108 (_ bv2 8))) (= ?x113 (_ bv2 8))) (= ?x117 (_ bv2 8)))))
 (let (($x29 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x165 (=> $x29 (or false (or false $x119)))))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x87 (or $x28 $x165)))
 (let ((?x101 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x164 (= (bvand ?x101 (_ bv4294967292 32)) ?x101)))
 (let (($x33 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x101 (bvsub ?x101 (_ bv4 32))) (bvult ?x101 (bvsub ?x101 (_ bv4 32))))))
 (let (($x17 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x8 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x7 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x8) (bvult input.dst.llvm-%call.Lentry%2%d ?x8))))
 (let (($x30 (and true $x7)))
 (let (($x68 (and $x7 $x30)))
 (let (($x58 (and (and (and $x30 $x68) $x17) $x33)))
 (let (($x167 (and (and (and $x58 $x164) $x87) $x162)))
 (let ((?x12 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x25 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x12)))
 (let (($x27 (or false $x25)))
 (let (($x38 (or $x28 $x27)))
 (let (($x168 (and $x38 $x167)))
 (let (($x169 (= $x168 true)))
 (let (($x170 (= $x169 true)))
 (let (($x171 (= $x170 true)))
 (let (($x43 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x71 (and $x43 true)))
 (let (($x48 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x72 (=> $x48 $x71)))
 (let (($x19 (= $x48 false)))
 (let (($x53 (= false false)))
 (let (($x41 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x41 $x53)))
 (let (($x52 (= $x41 true)))
 (let (($x83 (and $x52 $x36)))
 (let (($x55 (and $x83 $x19)))
 (let (($x45 (and $x55 $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x20 (and $x69 $x45)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x47 (=> $x10 $x20)))
 (let (($x26 (= $x10 false)))
 (let (($x49 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x76 (=> $x49 $x53)))
 (let (($x24 (= $x49 true)))
 (let (($x44 (and $x24 $x76)))
 (let (($x61 (and $x44 $x26)))
 (let (($x9 (and $x61 $x47)))
 (let (($x172 (and $x9 $x171)))
 (let (($x175 (=> $x172 $x174)))
 (let (($x11 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x18 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x18) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x11 (not $x175))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000021)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x0000288c)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000022) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000025) #x02
    (ite (= x!0 #x00000026) #x02
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000024) #x02
    (ite (= x!0 #x00000027) #x02
    (ite (= x!0 #x00000021) #x02
    (ite (= x!0 #x00000028) #x02
    (ite (= x!0 #x00000023) #x02
      #x01)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000026 x!0)
                    (ite (bvule #x00000027 x!0)
                         (ite (bvule #x00000028 x!0) #x00000028 #x00000027)
                         #x00000026)
                    #x00000025)))
    (let ((a!2 (ite (bvule #x00000023 x!0)
                    (ite (bvule #x00000024 x!0)
                         (ite (bvule #x00000025 x!0) a!1 #x00000024)
                         #x00000023)
                    #x00000022)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000021 x!0)
                         (ite (bvule #x00000022 x!0) a!2 #x00000021)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x20)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xdf10b098)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf1a90db4)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf1a90db7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf1a90db4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x40)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdf10b09a) #x02
    (ite (= x!0 #xf1a90db4) #x03
    (ite (= x!0 #xdf10b09d) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xdf10b099) #x02
    (ite (= x!0 #xdf10b09c) #x02
    (ite (= x!0 #xf1a90db5) #x03
    (ite (= x!0 #xf1a90db7) #x03
    (ite (= x!0 #xdf10b09e) #x02
    (ite (= x!0 #xdf10b098) #x02
    (ite (= x!0 #xdf10b09f) #x02
    (ite (= x!0 #xdf10b09b) #x02
      #x01)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf1a90db5 x!0)
                    (ite (bvule #xf1a90db7 x!0)
                         (ite (bvule #xf1a90db8 x!0) #xf1a90db8 #xf1a90db7)
                         #xf1a90db5)
                    #xf1a90db4)))
    (let ((a!2 (ite (bvule #xdf10b09e x!0)
                    (ite (bvule #xdf10b09f x!0)
                         (ite (bvule #xf1a90db4 x!0) a!1 #xdf10b09f)
                         #xdf10b09e)
                    #xdf10b09d)))
    (let ((a!3 (ite (bvule #xdf10b09b x!0)
                    (ite (bvule #xdf10b09c x!0)
                         (ite (bvule #xdf10b09d x!0) a!2 #xdf10b09c)
                         #xdf10b09b)
                    #xdf10b09a)))
      (ite (bvule #xdf10b098 x!0)
           (ite (bvule #xdf10b099 x!0)
                (ite (bvule #xdf10b09a x!0) a!3 #xdf10b099)
                #xdf10b098)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x174 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x175 (= $x174 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x148 (concat ?x157 (concat ?x146 ?x145)))))
 (let (($x156 (= input.dst.llvm-%val ?x147)))
 (let ((?x140 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x140)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x160)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x137 $x138)))
 (let (($x142 (and $x139 $x141)))
 (let (($x155 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x155 $x142)))
 (let (($x127 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x152 (and (and (and $x124 $x127) $x143) $x156)))
 (let (($x56 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x159 (and $x56 $x152)))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x102 (and (and (and (and true (= ?x89 (_ bv2 8))) (= ?x80 (_ bv2 8))) (= ?x94 (_ bv2 8))) (= ?x99 (_ bv2 8)))))
 (let (($x120 (and (and (and (and $x102 (= ?x104 (_ bv2 8))) (= ?x109 (_ bv2 8))) (= ?x114 (_ bv2 8))) (= ?x118 (_ bv2 8)))))
 (let (($x87 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x166 (=> $x87 (or false (or false $x120)))))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x81 (or $x28 $x166)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x163 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x31 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x17 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x8 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x30 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x8) (bvult input.dst.llvm-%call.Lentry%2%d ?x8))))
 (let (($x68 (and true $x30)))
 (let (($x66 (and $x30 $x68)))
 (let (($x75 (and (and (and $x68 $x66) $x17) $x31)))
 (let (($x168 (and (and (and $x75 $x163) $x81) $x159)))
 (let ((?x25 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x27 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x25)))
 (let (($x38 (or false $x27)))
 (let (($x78 (or $x28 $x38)))
 (let (($x169 (and $x78 $x168)))
 (let (($x170 (= $x169 true)))
 (let (($x171 (= $x170 true)))
 (let (($x172 (= $x171 true)))
 (let (($x43 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x71 (and $x43 false)))
 (let (($x48 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x72 (=> $x48 $x71)))
 (let (($x19 (= $x48 false)))
 (let (($x40 (= false false)))
 (let (($x41 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x41 $x40)))
 (let (($x52 (= $x41 true)))
 (let (($x83 (and $x52 $x36)))
 (let (($x55 (and $x83 $x19)))
 (let (($x45 (and $x55 $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x20 (and $x69 $x45)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x47 (=> $x10 $x20)))
 (let (($x26 (= $x10 false)))
 (let (($x32 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x60 (=> $x32 $x40)))
 (let (($x14 (= $x32 true)))
 (let (($x73 (and $x14 $x60)))
 (let (($x61 (and $x73 $x26)))
 (let (($x9 (and $x61 $x47)))
 (let (($x173 (and $x9 $x172)))
 (let (($x176 (=> $x173 $x175)))
 (let (($x44 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x44 (not $x176))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x174 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x175 (= $x174 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x148 (concat ?x157 (concat ?x146 ?x145)))))
 (let (($x156 (= input.dst.llvm-%val ?x147)))
 (let ((?x140 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x140)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x160)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x137 $x138)))
 (let (($x142 (and $x139 $x141)))
 (let (($x155 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x155 $x142)))
 (let (($x127 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x132 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x152 (and (and (and $x124 $x127) $x143) $x156)))
 (let (($x56 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x159 (and $x56 $x152)))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x102 (and (and (and (and true (= ?x89 (_ bv2 8))) (= ?x80 (_ bv2 8))) (= ?x94 (_ bv2 8))) (= ?x99 (_ bv2 8)))))
 (let (($x120 (and (and (and (and $x102 (= ?x104 (_ bv2 8))) (= ?x109 (_ bv2 8))) (= ?x114 (_ bv2 8))) (= ?x118 (_ bv2 8)))))
 (let (($x87 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x166 (=> $x87 (or false (or false $x120)))))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x81 (or $x28 $x166)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x163 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x31 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x17 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x8 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x30 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x8) (bvult input.dst.llvm-%call.Lentry%2%d ?x8))))
 (let (($x68 (and true $x30)))
 (let (($x66 (and $x30 $x68)))
 (let (($x75 (and (and (and $x68 $x66) $x17) $x31)))
 (let (($x168 (and (and (and $x75 $x163) $x81) $x159)))
 (let ((?x25 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x27 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x25)))
 (let (($x38 (or false $x27)))
 (let (($x78 (or $x28 $x38)))
 (let (($x169 (and $x78 $x168)))
 (let (($x170 (= $x169 true)))
 (let (($x171 (= $x170 true)))
 (let (($x172 (= $x171 true)))
 (let (($x43 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x71 (and $x43 false)))
 (let (($x48 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x72 (=> $x48 $x71)))
 (let (($x19 (= $x48 false)))
 (let (($x40 (= false false)))
 (let (($x41 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x41 $x40)))
 (let (($x52 (= $x41 true)))
 (let (($x83 (and $x52 $x36)))
 (let (($x55 (and $x83 $x19)))
 (let (($x45 (and $x55 $x72)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x20 (and $x69 $x45)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x47 (=> $x10 $x20)))
 (let (($x26 (= $x10 false)))
 (let (($x32 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x60 (=> $x32 $x40)))
 (let (($x14 (= $x32 true)))
 (let (($x73 (and $x14 $x60)))
 (let (($x61 (and $x73 $x26)))
 (let (($x9 (and $x61 $x47)))
 (let (($x173 (and $x9 $x172)))
 (let (($x176 (=> $x173 $x175)))
 (let (($x44 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x44 (not $x176))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000021)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x0000288c)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000022) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000025) #x02
    (ite (= x!0 #x00000026) #x02
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000024) #x02
    (ite (= x!0 #x00000027) #x02
    (ite (= x!0 #x00000021) #x02
    (ite (= x!0 #x00000028) #x02
    (ite (= x!0 #x00000023) #x02
      #x01)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000026 x!0)
                    (ite (bvule #x00000027 x!0)
                         (ite (bvule #x00000028 x!0) #x00000028 #x00000027)
                         #x00000026)
                    #x00000025)))
    (let ((a!2 (ite (bvule #x00000023 x!0)
                    (ite (bvule #x00000024 x!0)
                         (ite (bvule #x00000025 x!0) a!1 #x00000024)
                         #x00000023)
                    #x00000022)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000021 x!0)
                         (ite (bvule #x00000022 x!0) a!2 #x00000021)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x20)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xdf10b098)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf1a90db4)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf1a90db7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf1a90db4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x40)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdf10b09a) #x02
    (ite (= x!0 #xf1a90db4) #x03
    (ite (= x!0 #xdf10b09d) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xdf10b099) #x02
    (ite (= x!0 #xdf10b09c) #x02
    (ite (= x!0 #xf1a90db5) #x03
    (ite (= x!0 #xf1a90db7) #x03
    (ite (= x!0 #xdf10b09e) #x02
    (ite (= x!0 #xdf10b098) #x02
    (ite (= x!0 #xdf10b09f) #x02
    (ite (= x!0 #xdf10b09b) #x02
      #x01)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xf1a90db5 x!0)
                    (ite (bvule #xf1a90db7 x!0)
                         (ite (bvule #xf1a90db8 x!0) #xf1a90db8 #xf1a90db7)
                         #xf1a90db5)
                    #xf1a90db4)))
    (let ((a!2 (ite (bvule #xdf10b09e x!0)
                    (ite (bvule #xdf10b09f x!0)
                         (ite (bvule #xf1a90db4 x!0) a!1 #xdf10b09f)
                         #xdf10b09e)
                    #xdf10b09d)))
    (let ((a!3 (ite (bvule #xdf10b09b x!0)
                    (ite (bvule #xdf10b09c x!0)
                         (ite (bvule #xdf10b09d x!0) a!2 #xdf10b09c)
                         #xdf10b09b)
                    #xdf10b09a)))
      (ite (bvule #xdf10b098 x!0)
           (ite (bvule #xdf10b099 x!0)
                (ite (bvule #xdf10b09a x!0) a!3 #xdf10b099)
                #xdf10b098)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x175 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x175)))
 (let (($x177 (= ?x176 input.dst.llvm-%val)))
 (let (($x46 (= $x177 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x145 (concat ?x146 (concat ?x151 (concat ?x144 ?x143)))))
 (let (($x150 (= input.dst.llvm-%val ?x145)))
 (let ((?x138 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x138)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x126 $x137)))
 (let (($x140 (and $x160 $x139)))
 (let (($x154 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x154 $x140)))
 (let (($x128 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x131 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x131)))))
 (let (($x156 (and (and (and $x124 $x128) $x141) $x150)))
 (let (($x29 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x152 (and $x29 $x156)))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x102 (and (and (and (and true (= ?x86 (_ bv2 8))) (= ?x80 (_ bv2 8))) (= ?x94 (_ bv2 8))) (= ?x99 (_ bv2 8)))))
 (let (($x120 (and (and (and (and $x102 (= ?x104 (_ bv2 8))) (= ?x109 (_ bv2 8))) (= ?x114 (_ bv2 8))) (= ?x118 (_ bv2 8)))))
 (let (($x166 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x81 (=> $x166 (or false (or false $x120)))))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x50 (or $x62 $x81)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x163 (= (bvand ?x58 (_ bv4294967292 32)) ?x58)))
 (let (($x57 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x58 (bvsub ?x58 (_ bv4 32))) (bvult ?x58 (bvsub ?x58 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x5 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x30 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x5) (bvult input.dst.llvm-%call.Lentry%2%d ?x5))))
 (let (($x68 (and true $x30)))
 (let (($x66 (and $x30 $x68)))
 (let (($x75 (and (and (and $x68 $x66) $x21) $x57)))
 (let (($x169 (and (and (and $x75 $x163) $x50) $x152)))
 (let ((?x25 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x27 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x25)))
 (let (($x38 (or false $x27)))
 (let (($x78 (or $x62 $x38)))
 (let (($x170 (and $x78 $x169)))
 (let (($x171 (= $x170 true)))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let (($x23 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x43 (and $x23 true)))
 (let (($x83 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x71 (=> $x83 $x43)))
 (let (($x48 (= $x83 false)))
 (let (($x77 (= false false)))
 (let (($x63 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x52 (=> $x63 $x77)))
 (let (($x41 (= $x63 true)))
 (let (($x36 (and $x41 $x52)))
 (let (($x19 (and $x36 $x48)))
 (let (($x72 (and $x19 $x71)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x45 (and $x54 $x72)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x20 (=> $x22 $x45)))
 (let (($x10 (= $x22 false)))
 (let (($x39 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x37 (=> $x39 $x77)))
 (let (($x59 (= $x39 true)))
 (let (($x13 (and $x59 $x37)))
 (let (($x26 (and $x13 $x10)))
 (let (($x47 (and $x26 $x20)))
 (let (($x174 (and $x47 $x173)))
 (let (($x34 (=> $x174 $x46)))
 (let (($x60 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x42 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x42) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x60 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x175 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x175)))
 (let (($x177 (= ?x176 input.dst.llvm-%val)))
 (let (($x46 (= $x177 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x145 (concat ?x146 (concat ?x151 (concat ?x144 ?x143)))))
 (let (($x150 (= input.dst.llvm-%val ?x145)))
 (let ((?x138 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x138)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x126 $x137)))
 (let (($x140 (and $x160 $x139)))
 (let (($x154 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x154 $x140)))
 (let (($x128 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x131 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x131)))))
 (let (($x156 (and (and (and $x124 $x128) $x141) $x150)))
 (let (($x29 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x152 (and $x29 $x156)))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x102 (and (and (and (and true (= ?x86 (_ bv2 8))) (= ?x80 (_ bv2 8))) (= ?x94 (_ bv2 8))) (= ?x99 (_ bv2 8)))))
 (let (($x120 (and (and (and (and $x102 (= ?x104 (_ bv2 8))) (= ?x109 (_ bv2 8))) (= ?x114 (_ bv2 8))) (= ?x118 (_ bv2 8)))))
 (let (($x166 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x81 (=> $x166 (or false (or false $x120)))))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x50 (or $x62 $x81)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x163 (= (bvand ?x58 (_ bv4294967292 32)) ?x58)))
 (let (($x57 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x58 (bvsub ?x58 (_ bv4 32))) (bvult ?x58 (bvsub ?x58 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x5 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x30 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x5) (bvult input.dst.llvm-%call.Lentry%2%d ?x5))))
 (let (($x68 (and true $x30)))
 (let (($x66 (and $x30 $x68)))
 (let (($x75 (and (and (and $x68 $x66) $x21) $x57)))
 (let (($x169 (and (and (and $x75 $x163) $x50) $x152)))
 (let ((?x25 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x27 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x25)))
 (let (($x38 (or false $x27)))
 (let (($x78 (or $x62 $x38)))
 (let (($x170 (and $x78 $x169)))
 (let (($x171 (= $x170 true)))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let (($x23 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x43 (and $x23 true)))
 (let (($x83 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x71 (=> $x83 $x43)))
 (let (($x48 (= $x83 false)))
 (let (($x77 (= false false)))
 (let (($x63 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x52 (=> $x63 $x77)))
 (let (($x41 (= $x63 true)))
 (let (($x36 (and $x41 $x52)))
 (let (($x19 (and $x36 $x48)))
 (let (($x72 (and $x19 $x71)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x45 (and $x54 $x72)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x20 (=> $x22 $x45)))
 (let (($x10 (= $x22 false)))
 (let (($x39 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x37 (=> $x39 $x77)))
 (let (($x59 (= $x39 true)))
 (let (($x13 (and $x59 $x37)))
 (let (($x26 (and $x13 $x10)))
 (let (($x47 (and $x26 $x20)))
 (let (($x174 (and $x47 $x173)))
 (let (($x34 (=> $x174 $x46)))
 (let (($x60 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x42 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x32 $x42) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x60 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x177 ((_ extract 4 0) input.spec-%var-val-0)))
 (let (($x46 (= (_ bv0 5) ?x177)))
 (let (($x34 (= $x46 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x144 (concat ?x148 (concat ?x142 ?x141)))))
 (let (($x161 (= input.dst.llvm-%val ?x143)))
 (let ((?x137 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x137)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x127 $x126)))
 (let (($x138 (and $x155 $x160)))
 (let (($x153 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x153 $x138)))
 (let (($x56 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x131 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x131)))))
 (let (($x150 (and (and (and $x121 $x56) $x139) $x161)))
 (let (($x167 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x156 (and $x167 $x150)))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x103 (and (and (and (and true (= ?x84 (_ bv2 8))) (= ?x90 (_ bv2 8))) (= ?x95 (_ bv2 8))) (= ?x100 (_ bv2 8)))))
 (let (($x122 (and (and (and (and $x103 (= ?x105 (_ bv2 8))) (= ?x110 (_ bv2 8))) (= ?x115 (_ bv2 8))) (= ?x119 (_ bv2 8)))))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x168 (=> $x50 (or false (or false $x122)))))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x35 (or $x62 $x168)))
 (let ((?x17 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x17 (_ bv4294967292 32)) ?x17)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x17 (bvsub ?x17 (_ bv4 32))) (bvult ?x17 (bvsub ?x17 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x5 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x68 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x5) (bvult input.dst.llvm-%call.Lentry%2%d ?x5))))
 (let (($x66 (and true $x68)))
 (let (($x65 (and $x68 $x66)))
 (let (($x164 (and (and (and $x66 $x65) $x21) $x70)))
 (let (($x170 (and (and (and $x164 $x159) $x35) $x156)))
 (let ((?x27 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x38 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x27)))
 (let (($x78 (or false $x38)))
 (let (($x8 (or $x62 $x78)))
 (let (($x171 (and $x8 $x170)))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x23 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x43 (and $x23 true)))
 (let (($x83 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x71 (=> $x83 $x43)))
 (let (($x48 (= $x83 false)))
 (let (($x49 (= false false)))
 (let (($x63 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x52 (=> $x63 $x49)))
 (let (($x41 (= $x63 true)))
 (let (($x36 (and $x41 $x52)))
 (let (($x19 (and $x36 $x48)))
 (let (($x72 (and $x19 $x71)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x45 (and $x54 $x72)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x20 (=> $x22 $x45)))
 (let (($x10 (= $x22 false)))
 (let (($x64 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x18 (=> $x64 $x49)))
 (let (($x44 (= $x64 true)))
 (let (($x40 (and $x44 $x18)))
 (let (($x26 (and $x40 $x10)))
 (let (($x47 (and $x26 $x20)))
 (let (($x175 (and $x47 $x174)))
 (let (($x79 (=> $x175 $x34)))
 (let (($x13 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x59 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x13 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x177 ((_ extract 4 0) input.spec-%var-val-0)))
 (let (($x46 (= (_ bv0 5) ?x177)))
 (let (($x34 (= $x46 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x144 (concat ?x148 (concat ?x142 ?x141)))))
 (let (($x161 (= input.dst.llvm-%val ?x143)))
 (let ((?x137 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x137)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x127 $x126)))
 (let (($x138 (and $x155 $x160)))
 (let (($x153 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x153 $x138)))
 (let (($x56 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x131 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x131)))))
 (let (($x150 (and (and (and $x121 $x56) $x139) $x161)))
 (let (($x167 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x156 (and $x167 $x150)))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x103 (and (and (and (and true (= ?x84 (_ bv2 8))) (= ?x90 (_ bv2 8))) (= ?x95 (_ bv2 8))) (= ?x100 (_ bv2 8)))))
 (let (($x122 (and (and (and (and $x103 (= ?x105 (_ bv2 8))) (= ?x110 (_ bv2 8))) (= ?x115 (_ bv2 8))) (= ?x119 (_ bv2 8)))))
 (let (($x50 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x168 (=> $x50 (or false (or false $x122)))))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x35 (or $x62 $x168)))
 (let ((?x17 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x159 (= (bvand ?x17 (_ bv4294967292 32)) ?x17)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x17 (bvsub ?x17 (_ bv4 32))) (bvult ?x17 (bvsub ?x17 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x5 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x68 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x5) (bvult input.dst.llvm-%call.Lentry%2%d ?x5))))
 (let (($x66 (and true $x68)))
 (let (($x65 (and $x68 $x66)))
 (let (($x164 (and (and (and $x66 $x65) $x21) $x70)))
 (let (($x170 (and (and (and $x164 $x159) $x35) $x156)))
 (let ((?x27 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x38 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x27)))
 (let (($x78 (or false $x38)))
 (let (($x8 (or $x62 $x78)))
 (let (($x171 (and $x8 $x170)))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x23 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x43 (and $x23 true)))
 (let (($x83 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x71 (=> $x83 $x43)))
 (let (($x48 (= $x83 false)))
 (let (($x49 (= false false)))
 (let (($x63 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x52 (=> $x63 $x49)))
 (let (($x41 (= $x63 true)))
 (let (($x36 (and $x41 $x52)))
 (let (($x19 (and $x36 $x48)))
 (let (($x72 (and $x19 $x71)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x45 (and $x54 $x72)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x20 (=> $x22 $x45)))
 (let (($x10 (= $x22 false)))
 (let (($x64 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x18 (=> $x64 $x49)))
 (let (($x44 (= $x64 true)))
 (let (($x40 (and $x44 $x18)))
 (let (($x26 (and $x40 $x10)))
 (let (($x47 (and $x26 $x20)))
 (let (($x175 (and $x47 $x174)))
 (let (($x79 (=> $x175 $x34)))
 (let (($x13 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x59 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x13 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x1f))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xcc180000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00e12fd4)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00e12fd7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x1f1f1f1f)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x1f1f1f1f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00e12fd4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xcc180002) #x02
    (ite (= x!0 #x00e12fd4) #x03
    (ite (= x!0 #xcc180005) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xcc180001) #x02
    (ite (= x!0 #xcc180004) #x02
    (ite (= x!0 #x00e12fd5) #x03
    (ite (= x!0 #x00e12fd7) #x03
    (ite (= x!0 #xcc180006) #x02
    (ite (= x!0 #xcc180000) #x02
    (ite (= x!0 #xcc180007) #x02
    (ite (= x!0 #xcc180003) #x02
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xcc180005 x!0)
                    (ite (bvule #xcc180006 x!0)
                         (ite (bvule #xcc180007 x!0) #xcc180007 #xcc180006)
                         #xcc180005)
                    #xcc180004)))
    (let ((a!2 (ite (bvule #xcc180002 x!0)
                    (ite (bvule #xcc180003 x!0)
                         (ite (bvule #xcc180004 x!0) a!1 #xcc180003)
                         #xcc180002)
                    #xcc180001)))
    (let ((a!3 (ite (bvule #x00e12fd8 x!0)
                    (ite (bvule #xcc180000 x!0)
                         (ite (bvule #xcc180001 x!0) a!2 #xcc180000)
                         #x00e12fd8)
                    #x00e12fd7)))
      (ite (bvule #x00e12fd4 x!0)
           (ite (bvule #x00e12fd5 x!0)
                (ite (bvule #x00e12fd7 x!0) a!3 #x00e12fd5)
                #x00e12fd4)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xb0220000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x1f))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x1f1f1f1f)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x1f1f1f1f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000201) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000204) #x02
    (ite (= x!0 #x00000205) #x02
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000203) #x02
    (ite (= x!0 #x00000206) #x02
    (ite (= x!0 #x00000200) #x02
    (ite (= x!0 #x00000207) #x02
    (ite (= x!0 #x00000202) #x02
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000205 x!0)
                    (ite (bvule #x00000206 x!0)
                         (ite (bvule #x00000207 x!0) #x00000207 #x00000206)
                         #x00000205)
                    #x00000204)))
    (let ((a!2 (ite (bvule #x00000202 x!0)
                    (ite (bvule #x00000203 x!0)
                         (ite (bvule #x00000204 x!0) a!1 #x00000203)
                         #x00000202)
                    #x00000201)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000200 x!0)
                         (ite (bvule #x00000201 x!0) a!2 #x00000200)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x46 ((_ extract 4 0) input.spec-%var-val-0)))
 (let (($x34 (= (_ bv0 5) ?x46)))
 (let (($x79 (= $x34 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x142 (concat ?x146 (concat ?x140 ?x139)))))
 (let (($x158 (= input.dst.llvm-%val ?x141)))
 (let ((?x126 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x126)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x153)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x128 $x127)))
 (let (($x137 (and $x154 $x155)))
 (let (($x157 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x157 $x137)))
 (let (($x135 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x131 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x131)))))
 (let (($x161 (and (and (and $x29 $x135) $x160) $x158)))
 (let (($x82 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x150 (and $x82 $x161)))
 (let ((?x120 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x116 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x104 (and (and (and (and true (= ?x88 (_ bv2 8))) (= ?x91 (_ bv2 8))) (= ?x96 (_ bv2 8))) (= ?x102 (_ bv2 8)))))
 (let (($x165 (and (and (and (and $x104 (= ?x106 (_ bv2 8))) (= ?x111 (_ bv2 8))) (= ?x116 (_ bv2 8))) (= ?x120 (_ bv2 8)))))
 (let (($x35 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x169 (=> $x35 (or false (or false $x165)))))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x86 (or $x62 $x169)))
 (let ((?x31 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x152 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv4 32))) (bvult ?x31 (bvsub ?x31 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x5 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x5) (bvult input.dst.llvm-%call.Lentry%2%d ?x5))))
 (let (($x65 (and true $x66)))
 (let (($x57 (and $x66 $x65)))
 (let (($x163 (and (and (and $x65 $x57) $x21) $x67)))
 (let (($x171 (and (and (and $x163 $x152) $x86) $x150)))
 (let ((?x38 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x78 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x38)))
 (let (($x8 (or false $x78)))
 (let (($x16 (or $x62 $x8)))
 (let (($x172 (and $x16 $x171)))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x23 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x43 (and $x23 false)))
 (let (($x83 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x71 (=> $x83 $x43)))
 (let (($x48 (= $x83 false)))
 (let (($x123 (= false false)))
 (let (($x63 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x52 (=> $x63 $x123)))
 (let (($x41 (= $x63 true)))
 (let (($x36 (and $x41 $x52)))
 (let (($x19 (and $x36 $x48)))
 (let (($x72 (and $x19 $x71)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x45 (and $x54 $x72)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x20 (=> $x22 $x45)))
 (let (($x10 (= $x22 false)))
 (let (($x11 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x24 (=> $x11 $x123)))
 (let (($x53 (= $x11 true)))
 (let (($x37 (and $x53 $x24)))
 (let (($x26 (and $x37 $x10)))
 (let (($x47 (and $x26 $x20)))
 (let (($x176 (and $x47 $x175)))
 (let (($x178 (=> $x176 $x79)))
 (let (($x40 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x64 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x44 $x64) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x40 (not $x178)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x46 ((_ extract 4 0) input.spec-%var-val-0)))
 (let (($x34 (= (_ bv0 5) ?x46)))
 (let (($x79 (= $x34 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x142 (concat ?x146 (concat ?x140 ?x139)))))
 (let (($x158 (= input.dst.llvm-%val ?x141)))
 (let ((?x126 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x126)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x153)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x128 $x127)))
 (let (($x137 (and $x154 $x155)))
 (let (($x157 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x157 $x137)))
 (let (($x135 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x131 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x131)))))
 (let (($x161 (and (and (and $x29 $x135) $x160) $x158)))
 (let (($x82 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x150 (and $x82 $x161)))
 (let ((?x120 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x116 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x104 (and (and (and (and true (= ?x88 (_ bv2 8))) (= ?x91 (_ bv2 8))) (= ?x96 (_ bv2 8))) (= ?x102 (_ bv2 8)))))
 (let (($x165 (and (and (and (and $x104 (= ?x106 (_ bv2 8))) (= ?x111 (_ bv2 8))) (= ?x116 (_ bv2 8))) (= ?x120 (_ bv2 8)))))
 (let (($x35 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x169 (=> $x35 (or false (or false $x165)))))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x86 (or $x62 $x169)))
 (let ((?x31 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x152 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv4 32))) (bvult ?x31 (bvsub ?x31 (_ bv4 32))))))
 (let (($x21 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x5 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x5) (bvult input.dst.llvm-%call.Lentry%2%d ?x5))))
 (let (($x65 (and true $x66)))
 (let (($x57 (and $x66 $x65)))
 (let (($x163 (and (and (and $x65 $x57) $x21) $x67)))
 (let (($x171 (and (and (and $x163 $x152) $x86) $x150)))
 (let ((?x38 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x78 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x38)))
 (let (($x8 (or false $x78)))
 (let (($x16 (or $x62 $x8)))
 (let (($x172 (and $x16 $x171)))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x23 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x43 (and $x23 false)))
 (let (($x83 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x71 (=> $x83 $x43)))
 (let (($x48 (= $x83 false)))
 (let (($x123 (= false false)))
 (let (($x63 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x52 (=> $x63 $x123)))
 (let (($x41 (= $x63 true)))
 (let (($x36 (and $x41 $x52)))
 (let (($x19 (and $x36 $x48)))
 (let (($x72 (and $x19 $x71)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x45 (and $x54 $x72)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x20 (=> $x22 $x45)))
 (let (($x10 (= $x22 false)))
 (let (($x11 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x24 (=> $x11 $x123)))
 (let (($x53 (= $x11 true)))
 (let (($x37 (and $x53 $x24)))
 (let (($x26 (and $x37 $x10)))
 (let (($x47 (and $x26 $x20)))
 (let (($x176 (and $x47 $x175)))
 (let (($x178 (=> $x176 $x79)))
 (let (($x40 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x64 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x44 $x64) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x40 (not $x178)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x1f))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xcc180000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00e12fd4)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00e12fd7)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x1f1f1f1f)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x1f1f1f1f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00e12fd4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xcc180002) #x02
    (ite (= x!0 #x00e12fd4) #x03
    (ite (= x!0 #xcc180005) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xcc180001) #x02
    (ite (= x!0 #xcc180004) #x02
    (ite (= x!0 #x00e12fd5) #x03
    (ite (= x!0 #x00e12fd7) #x03
    (ite (= x!0 #xcc180006) #x02
    (ite (= x!0 #xcc180000) #x02
    (ite (= x!0 #xcc180007) #x02
    (ite (= x!0 #xcc180003) #x02
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xcc180005 x!0)
                    (ite (bvule #xcc180006 x!0)
                         (ite (bvule #xcc180007 x!0) #xcc180007 #xcc180006)
                         #xcc180005)
                    #xcc180004)))
    (let ((a!2 (ite (bvule #xcc180002 x!0)
                    (ite (bvule #xcc180003 x!0)
                         (ite (bvule #xcc180004 x!0) a!1 #xcc180003)
                         #xcc180002)
                    #xcc180001)))
    (let ((a!3 (ite (bvule #x00e12fd8 x!0)
                    (ite (bvule #xcc180000 x!0)
                         (ite (bvule #xcc180001 x!0) a!2 #xcc180000)
                         #x00e12fd8)
                    #x00e12fd7)))
      (ite (bvule #x00e12fd4 x!0)
           (ite (bvule #x00e12fd5 x!0)
                (ite (bvule #x00e12fd7 x!0) a!3 #x00e12fd5)
                #x00e12fd4)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xb0220000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x1f))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x1f1f1f1f)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x1f1f1f1f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000201) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000204) #x02
    (ite (= x!0 #x00000205) #x02
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000203) #x02
    (ite (= x!0 #x00000206) #x02
    (ite (= x!0 #x00000200) #x02
    (ite (= x!0 #x00000207) #x02
    (ite (= x!0 #x00000202) #x02
      #x00)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000205 x!0)
                    (ite (bvule #x00000206 x!0)
                         (ite (bvule #x00000207 x!0) #x00000207 #x00000206)
                         #x00000205)
                    #x00000204)))
    (let ((a!2 (ite (bvule #x00000202 x!0)
                    (ite (bvule #x00000203 x!0)
                         (ite (bvule #x00000204 x!0) a!1 #x00000203)
                         #x00000202)
                    #x00000201)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000200 x!0)
                         (ite (bvule #x00000201 x!0) a!2 #x00000200)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x177 (= false true)))
 (let (($x46 (= $x177 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x145 (concat ?x142 (concat ?x143 ?x137)))))
 (let (($x139 (= input.dst.llvm-%val ?x140)))
 (let ((?x153 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x153)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x151 $x157)))
 (let (($x154 (and $x128 $x127)))
 (let (($x135 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x135 $x154)))
 (let (($x167 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x141 (and (and (and $x29 $x167) $x126) $x139)))
 (let (($x50 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (and $x50 $x141)))
 (let ((?x120 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x116 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x104 (and (and (and (and true (= ?x89 (_ bv2 8))) (= ?x91 (_ bv2 8))) (= ?x96 (_ bv2 8))) (= ?x102 (_ bv2 8)))))
 (let (($x165 (and (and (and (and $x104 (= ?x106 (_ bv2 8))) (= ?x111 (_ bv2 8))) (= ?x116 (_ bv2 8))) (= ?x120 (_ bv2 8)))))
 (let (($x169 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x86 (=> $x169 (or false (or false $x165)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (or $x9 $x86)))
 (let ((?x164 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x152 (= (bvand ?x164 (_ bv4294967292 32)) ?x164)))
 (let (($x101 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x164 (bvsub ?x164 (_ bv4 32))) (bvult ?x164 (bvsub ?x164 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x65 (and true $x66)))
 (let (($x57 (and $x66 $x65)))
 (let (($x163 (and (and (and $x65 $x57) $x51) $x101)))
 (let (($x171 (and (and (and $x163 $x152) $x74) $x158)))
 (let ((?x38 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x78 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x38)))
 (let (($x8 (or false $x78)))
 (let (($x16 (or $x9 $x8)))
 (let (($x172 (and $x16 $x171)))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x42 (= false false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x42)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x49 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x32 (=> $x49 $x42)))
 (let (($x76 (= $x49 true)))
 (let (($x14 (and $x76 $x32)))
 (let (($x10 (and $x14 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x176 (and $x20 $x175)))
 (let (($x34 (=> $x176 $x46)))
 (let (($x24 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x77 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x11 $x77) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x24 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x177 (= false true)))
 (let (($x46 (= $x177 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x145 (concat ?x142 (concat ?x143 ?x137)))))
 (let (($x139 (= input.dst.llvm-%val ?x140)))
 (let ((?x153 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x153)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x151 $x157)))
 (let (($x154 (and $x128 $x127)))
 (let (($x135 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x135 $x154)))
 (let (($x167 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x141 (and (and (and $x29 $x167) $x126) $x139)))
 (let (($x50 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (and $x50 $x141)))
 (let ((?x120 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x116 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x104 (and (and (and (and true (= ?x89 (_ bv2 8))) (= ?x91 (_ bv2 8))) (= ?x96 (_ bv2 8))) (= ?x102 (_ bv2 8)))))
 (let (($x165 (and (and (and (and $x104 (= ?x106 (_ bv2 8))) (= ?x111 (_ bv2 8))) (= ?x116 (_ bv2 8))) (= ?x120 (_ bv2 8)))))
 (let (($x169 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x86 (=> $x169 (or false (or false $x165)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (or $x9 $x86)))
 (let ((?x164 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x152 (= (bvand ?x164 (_ bv4294967292 32)) ?x164)))
 (let (($x101 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x164 (bvsub ?x164 (_ bv4 32))) (bvult ?x164 (bvsub ?x164 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x65 (and true $x66)))
 (let (($x57 (and $x66 $x65)))
 (let (($x163 (and (and (and $x65 $x57) $x51) $x101)))
 (let (($x171 (and (and (and $x163 $x152) $x74) $x158)))
 (let ((?x38 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x78 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x38)))
 (let (($x8 (or false $x78)))
 (let (($x16 (or $x9 $x8)))
 (let (($x172 (and $x16 $x171)))
 (let (($x173 (= $x172 true)))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x42 (= false false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x42)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x49 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x32 (=> $x49 $x42)))
 (let (($x76 (= $x49 true)))
 (let (($x14 (and $x76 $x32)))
 (let (($x10 (and $x14 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x176 (and $x20 $x175)))
 (let (($x34 (=> $x176 $x46)))
 (let (($x24 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x77 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x11 $x77) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x24 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x380a4000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000001) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x04000004) #x02
    (ite (= x!0 #x04000005) #x02
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x04000003) #x02
    (ite (= x!0 #x04000006) #x02
    (ite (= x!0 #x04000000) #x02
    (ite (= x!0 #x04000007) #x02
    (ite (= x!0 #x04000002) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x04000005 x!0)
                    (ite (bvule #x04000006 x!0)
                         (ite (bvule #x04000007 x!0) #x04000007 #x04000006)
                         #x04000005)
                    #x04000004)))
    (let ((a!2 (ite (bvule #x04000002 x!0)
                    (ite (bvule #x04000003 x!0)
                         (ite (bvule #x04000004 x!0) a!1 #x04000003)
                         #x04000002)
                    #x04000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x04000000 x!0)
                         (ite (bvule #x04000001 x!0) a!2 #x04000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3a4007fa)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa2c7699c)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa2c7699f)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa2c7699c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3a4007fc) #x02
    (ite (= x!0 #xa2c7699c) #x03
    (ite (= x!0 #x3a4007ff) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x3a4007fb) #x02
    (ite (= x!0 #x3a4007fe) #x02
    (ite (= x!0 #xa2c7699d) #x03
    (ite (= x!0 #xa2c7699f) #x03
    (ite (= x!0 #x3a400800) #x02
    (ite (= x!0 #x3a4007fa) #x02
    (ite (= x!0 #x3a400801) #x02
    (ite (= x!0 #x3a4007fd) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xa2c7699d x!0)
                    (ite (bvule #xa2c7699f x!0)
                         (ite (bvule #xa2c769a0 x!0) #xa2c769a0 #xa2c7699f)
                         #xa2c7699d)
                    #xa2c7699c)))
    (let ((a!2 (ite (bvule #x3a400800 x!0)
                    (ite (bvule #x3a400801 x!0)
                         (ite (bvule #xa2c7699c x!0) a!1 #x3a400801)
                         #x3a400800)
                    #x3a4007ff)))
    (let ((a!3 (ite (bvule #x3a4007fd x!0)
                    (ite (bvule #x3a4007fe x!0)
                         (ite (bvule #x3a4007ff x!0) a!2 #x3a4007fe)
                         #x3a4007fd)
                    #x3a4007fc)))
      (ite (bvule #x3a4007fa x!0)
           (ite (bvule #x3a4007fb x!0)
                (ite (bvule #x3a4007fc x!0) a!3 #x3a4007fb)
                #x3a4007fa)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x180 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (=> $x180 false)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x178 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x178 (_ bv1 32))))
 (let (($x182 (= $x180 $x181)))
 (let (($x44 (= false false)))
 (let (($x34 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x12 (=> $x34 $x44)))
 (let (($x62 (= ?x178 (_ bv0 32))))
 (let (($x28 (= $x34 $x62)))
 (let (($x179 (and $x28 $x12)))
 (let (($x183 (and $x179 $x182)))
 (let (($x185 (and $x183 $x184)))
 (let (($x186 (= $x185 true)))
 (let (($x187 (= $x186 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x143 (concat ?x147 (concat ?x155 ?x126)))))
 (let (($x138 (= input.dst.llvm-%val ?x137)))
 (let ((?x157 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x157)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x136 $x151)))
 (let (($x153 (and $x56 $x128)))
 (let (($x149 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x149 $x153)))
 (let (($x82 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x139 (and (and (and $x166 $x82) $x127) $x138)))
 (let (($x170 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x141 (and $x170 $x139)))
 (let ((?x122 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x117 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x103 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x97 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x105 (and (and (and (and true (= ?x85 (_ bv2 8))) (= ?x92 (_ bv2 8))) (= ?x97 (_ bv2 8))) (= ?x103 (_ bv2 8)))))
 (let (($x81 (and (and (and (and $x105 (= ?x107 (_ bv2 8))) (= ?x112 (_ bv2 8))) (= ?x117 (_ bv2 8))) (= ?x122 (_ bv2 8)))))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x150 (=> $x74 (or false (or false $x81)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x87 (or $x9 $x150)))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x161 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x58 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x57 (and true $x65)))
 (let (($x6 (and $x65 $x57)))
 (let (($x159 (and (and (and $x57 $x6) $x51) $x58)))
 (let (($x172 (and (and (and $x159 $x161) $x87) $x141)))
 (let ((?x78 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x8 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x78)))
 (let (($x16 (or false $x8)))
 (let (($x5 (or $x9 $x16)))
 (let (($x173 (and $x5 $x172)))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x176 (= $x175 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x44)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x60 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x39 (=> $x60 $x44)))
 (let (($x40 (= $x60 true)))
 (let (($x123 (and $x40 $x39)))
 (let (($x10 (and $x123 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x177 (and $x20 $x176)))
 (let (($x188 (=> $x177 $x187)))
 (let (($x14 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x76 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x14 (not $x188)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x180 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x184 (=> $x180 false)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x178 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x178 (_ bv1 32))))
 (let (($x182 (= $x180 $x181)))
 (let (($x44 (= false false)))
 (let (($x34 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x12 (=> $x34 $x44)))
 (let (($x62 (= ?x178 (_ bv0 32))))
 (let (($x28 (= $x34 $x62)))
 (let (($x179 (and $x28 $x12)))
 (let (($x183 (and $x179 $x182)))
 (let (($x185 (and $x183 $x184)))
 (let (($x186 (= $x185 true)))
 (let (($x187 (= $x186 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x143 (concat ?x147 (concat ?x155 ?x126)))))
 (let (($x138 (= input.dst.llvm-%val ?x137)))
 (let ((?x157 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x157)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x136 $x151)))
 (let (($x153 (and $x56 $x128)))
 (let (($x149 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x149 $x153)))
 (let (($x82 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x139 (and (and (and $x166 $x82) $x127) $x138)))
 (let (($x170 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x141 (and $x170 $x139)))
 (let ((?x122 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x117 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x103 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x97 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x105 (and (and (and (and true (= ?x85 (_ bv2 8))) (= ?x92 (_ bv2 8))) (= ?x97 (_ bv2 8))) (= ?x103 (_ bv2 8)))))
 (let (($x81 (and (and (and (and $x105 (= ?x107 (_ bv2 8))) (= ?x112 (_ bv2 8))) (= ?x117 (_ bv2 8))) (= ?x122 (_ bv2 8)))))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x150 (=> $x74 (or false (or false $x81)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x87 (or $x9 $x150)))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x161 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x58 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x57 (and true $x65)))
 (let (($x6 (and $x65 $x57)))
 (let (($x159 (and (and (and $x57 $x6) $x51) $x58)))
 (let (($x172 (and (and (and $x159 $x161) $x87) $x141)))
 (let ((?x78 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x8 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x78)))
 (let (($x16 (or false $x8)))
 (let (($x5 (or $x9 $x16)))
 (let (($x173 (and $x5 $x172)))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x176 (= $x175 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x44)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x60 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x39 (=> $x60 $x44)))
 (let (($x40 (= $x60 true)))
 (let (($x123 (and $x40 $x39)))
 (let (($x10 (and $x123 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x177 (and $x20 $x176)))
 (let (($x188 (=> $x177 $x187)))
 (let (($x14 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x76 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x14 (not $x188)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x8bfffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xbf9fc000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x355543e0)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x355543e3)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x355543e0)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xbf9fc002) #x02
    (ite (= x!0 #x355543e0) #x03
    (ite (= x!0 #xbf9fc005) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xbf9fc001) #x02
    (ite (= x!0 #xbf9fc004) #x02
    (ite (= x!0 #x355543e1) #x03
    (ite (= x!0 #x355543e3) #x03
    (ite (= x!0 #xbf9fc006) #x02
    (ite (= x!0 #xbf9fc000) #x02
    (ite (= x!0 #xbf9fc007) #x02
    (ite (= x!0 #xbf9fc003) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xbf9fc005 x!0)
                    (ite (bvule #xbf9fc006 x!0)
                         (ite (bvule #xbf9fc007 x!0) #xbf9fc007 #xbf9fc006)
                         #xbf9fc005)
                    #xbf9fc004)))
    (let ((a!2 (ite (bvule #xbf9fc002 x!0)
                    (ite (bvule #xbf9fc003 x!0)
                         (ite (bvule #xbf9fc004 x!0) a!1 #xbf9fc003)
                         #xbf9fc002)
                    #xbf9fc001)))
    (let ((a!3 (ite (bvule #x355543e4 x!0)
                    (ite (bvule #xbf9fc000 x!0)
                         (ite (bvule #xbf9fc001 x!0) a!2 #xbf9fc000)
                         #x355543e4)
                    #x355543e3)))
      (ite (bvule #x355543e0 x!0)
           (ite (bvule #x355543e1 x!0)
                (ite (bvule #x355543e3 x!0) a!3 #x355543e1)
                #x355543e0)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x01800000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000009) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x00000007) #x02
    (ite (= x!0 #x00000005) #x02
    (ite (= x!0 #x00000003) #x02
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00000008) #x02
    (ite (= x!0 #x00000004) #x02
    (ite (= x!0 #x00000006) #x02
    (ite (= x!0 #x00000002) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000001 x!0)
                    (ite (bvule #x80000003 x!0)
                         (ite (bvule #x80000004 x!0) #x80000004 #x80000003)
                         #x80000001)
                    #x80000000)))
    (let ((a!2 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000009 x!0)
                         (ite (bvule #x80000000 x!0) a!1 #x00000009)
                         #x00000008)
                    #x00000007)))
    (let ((a!3 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000006 x!0)
                         (ite (bvule #x00000007 x!0) a!2 #x00000006)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000002 x!0)
           (ite (bvule #x00000003 x!0)
                (ite (bvule #x00000004 x!0) a!3 #x00000003)
                #x00000002)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x190 (concat ?x189 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x195 (concat ?x194 (concat ?x191 ?x190))))
 (let (($x196 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x195)))
 (let (($x197 (and $x196 false)))
 (let (($x181 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x198 (=> $x181 $x197)))
 (let (($x178 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x62 (ite $x178 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x62 (_ bv1 32))))
 (let (($x183 (= $x181 $x182)))
 (let (($x13 (= false false)))
 (let (($x79 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x179 (=> $x79 $x13)))
 (let (($x28 (= ?x62 (_ bv0 32))))
 (let (($x12 (= $x79 $x28)))
 (let (($x180 (and $x12 $x179)))
 (let (($x184 (and $x180 $x183)))
 (let (($x199 (and $x184 $x198)))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x155 (concat ?x145 (concat ?x154 ?x127)))))
 (let (($x146 (= input.dst.llvm-%val ?x126)))
 (let ((?x151 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x151)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x149)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x167 $x136)))
 (let (($x157 (and $x135 $x56)))
 (let (($x144 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x144 $x157)))
 (let (($x134 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x138 (and (and (and $x50 $x134) $x128) $x146)))
 (let (($x84 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x139 (and $x84 $x138)))
 (let ((?x165 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x106 (and (and (and (and true (= ?x80 (_ bv2 8))) (= ?x93 (_ bv2 8))) (= ?x98 (_ bv2 8))) (= ?x104 (_ bv2 8)))))
 (let (($x168 (and (and (and (and $x106 (= ?x108 (_ bv2 8))) (= ?x113 (_ bv2 8))) (= ?x118 (_ bv2 8))) (= ?x165 (_ bv2 8)))))
 (let (($x87 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x171 (=> $x87 (or false (or false $x168)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x89 (or $x9 $x171)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x158 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x31 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x57 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x6 (and true $x57)))
 (let (($x101 (and $x57 $x6)))
 (let (($x152 (and (and (and $x6 $x101) $x51) $x31)))
 (let (($x173 (and (and (and $x152 $x158) $x89) $x139)))
 (let ((?x8 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x16 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x8)))
 (let (($x5 (or false $x16)))
 (let (($x30 (or $x9 $x5)))
 (let (($x174 (and $x30 $x173)))
 (let (($x175 (= $x174 true)))
 (let (($x176 (= $x175 true)))
 (let (($x177 (= $x176 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x13)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x25 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x64 (=> $x25 $x13)))
 (let (($x59 (= $x25 true)))
 (let (($x32 (and $x59 $x64)))
 (let (($x10 (and $x32 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x46 (and $x20 $x177)))
 (let (($x202 (=> $x46 $x201)))
 (let (($x123 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x60 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x40 $x60) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x123 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x190 (concat ?x189 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x195 (concat ?x194 (concat ?x191 ?x190))))
 (let (($x196 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x195)))
 (let (($x197 (and $x196 false)))
 (let (($x181 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x198 (=> $x181 $x197)))
 (let (($x178 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x62 (ite $x178 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x62 (_ bv1 32))))
 (let (($x183 (= $x181 $x182)))
 (let (($x13 (= false false)))
 (let (($x79 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x179 (=> $x79 $x13)))
 (let (($x28 (= ?x62 (_ bv0 32))))
 (let (($x12 (= $x79 $x28)))
 (let (($x180 (and $x12 $x179)))
 (let (($x184 (and $x180 $x183)))
 (let (($x199 (and $x184 $x198)))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x155 (concat ?x145 (concat ?x154 ?x127)))))
 (let (($x146 (= input.dst.llvm-%val ?x126)))
 (let ((?x151 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x151)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x149)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x167 $x136)))
 (let (($x157 (and $x135 $x56)))
 (let (($x144 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x144 $x157)))
 (let (($x134 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x138 (and (and (and $x50 $x134) $x128) $x146)))
 (let (($x84 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x139 (and $x84 $x138)))
 (let ((?x165 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x106 (and (and (and (and true (= ?x80 (_ bv2 8))) (= ?x93 (_ bv2 8))) (= ?x98 (_ bv2 8))) (= ?x104 (_ bv2 8)))))
 (let (($x168 (and (and (and (and $x106 (= ?x108 (_ bv2 8))) (= ?x113 (_ bv2 8))) (= ?x118 (_ bv2 8))) (= ?x165 (_ bv2 8)))))
 (let (($x87 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x171 (=> $x87 (or false (or false $x168)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x89 (or $x9 $x171)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x158 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x31 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x57 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x6 (and true $x57)))
 (let (($x101 (and $x57 $x6)))
 (let (($x152 (and (and (and $x6 $x101) $x51) $x31)))
 (let (($x173 (and (and (and $x152 $x158) $x89) $x139)))
 (let ((?x8 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x16 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x8)))
 (let (($x5 (or false $x16)))
 (let (($x30 (or $x9 $x5)))
 (let (($x174 (and $x30 $x173)))
 (let (($x175 (= $x174 true)))
 (let (($x176 (= $x175 true)))
 (let (($x177 (= $x176 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x13)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x25 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x64 (=> $x25 $x13)))
 (let (($x59 (= $x25 true)))
 (let (($x32 (and $x59 $x64)))
 (let (($x10 (and $x32 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x46 (and $x20 $x177)))
 (let (($x202 (=> $x46 $x201)))
 (let (($x123 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x60 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x40 $x60) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x123 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xc8dffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3ffd4000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfa1adcf4)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfa1adcf7)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfa1adcf4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3ffd4002) #x02
    (ite (= x!0 #xfa1adcf4) #x03
    (ite (= x!0 #x3ffd4005) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x3ffd4001) #x02
    (ite (= x!0 #x3ffd4004) #x02
    (ite (= x!0 #xfa1adcf5) #x03
    (ite (= x!0 #xfa1adcf7) #x03
    (ite (= x!0 #x3ffd4006) #x02
    (ite (= x!0 #x3ffd4000) #x02
    (ite (= x!0 #x3ffd4007) #x02
    (ite (= x!0 #x3ffd4003) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xfa1adcf5 x!0)
                    (ite (bvule #xfa1adcf7 x!0)
                         (ite (bvule #xfa1adcf8 x!0) #xfa1adcf8 #xfa1adcf7)
                         #xfa1adcf5)
                    #xfa1adcf4)))
    (let ((a!2 (ite (bvule #x3ffd4006 x!0)
                    (ite (bvule #x3ffd4007 x!0)
                         (ite (bvule #xfa1adcf4 x!0) a!1 #x3ffd4007)
                         #x3ffd4006)
                    #x3ffd4005)))
    (let ((a!3 (ite (bvule #x3ffd4003 x!0)
                    (ite (bvule #x3ffd4004 x!0)
                         (ite (bvule #x3ffd4005 x!0) a!2 #x3ffd4004)
                         #x3ffd4003)
                    #x3ffd4002)))
      (ite (bvule #x3ffd4000 x!0)
           (ite (bvule #x3ffd4001 x!0)
                (ite (bvule #x3ffd4002 x!0) a!3 #x3ffd4001)
                #x3ffd4000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x201a0400)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffd) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x80000000) #x02
    (ite (= x!0 #x80000001) #x02
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x7fffffff) #x02
    (ite (= x!0 #x80000002) #x02
    (ite (= x!0 #x7ffffffc) #x02
    (ite (= x!0 #x80000003) #x02
    (ite (= x!0 #x7ffffffe) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x80000001 x!0)
                    (ite (bvule #x80000002 x!0)
                         (ite (bvule #x80000003 x!0) #x80000003 #x80000002)
                         #x80000001)
                    #x80000000)))
    (let ((a!2 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) a!1 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!2 #x7ffffffc)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x216 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x220 (=> $x216 false)))
 (let ((?x201 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x38))))
 (let (($x210 (= (_ bv0 32) ?x209)))
 (let ((?x211 (ite $x210 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x211 (_ bv1 32))))
 (let (($x218 (= $x216 $x217)))
 (let (($x11 (= false false)))
 (let (($x200 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x214 (=> $x200 $x11)))
 (let (($x212 (= ?x211 (_ bv0 32))))
 (let (($x213 (= $x200 $x212)))
 (let (($x215 (and $x213 $x214)))
 (let (($x219 (and $x215 $x218)))
 (let (($x221 (and $x219 $x220)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x189 (concat ?x188 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x197 (concat ?x196 (concat ?x190 ?x189))))
 (let (($x198 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x197)))
 (let (($x222 (and $x198 $x221)))
 (let (($x182 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x223 (=> $x182 $x222)))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x28 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x28 (_ bv1 32))))
 (let (($x184 (= $x182 $x183)))
 (let (($x178 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x180 (=> $x178 $x11)))
 (let (($x12 (= ?x28 (_ bv0 32))))
 (let (($x179 (= $x178 $x12)))
 (let (($x181 (and $x179 $x180)))
 (let (($x185 (and $x181 $x184)))
 (let (($x224 (and $x185 $x223)))
 (let (($x225 (= $x224 true)))
 (let (($x226 (= $x225 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x154 (concat ?x143 (concat ?x153 ?x128)))))
 (let (($x160 (= input.dst.llvm-%val ?x127)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x136)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x82 $x167)))
 (let (($x151 (and $x149 $x135)))
 (let (($x142 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x142 $x151)))
 (let (($x124 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x146 (and (and (and $x170 $x124) $x56) $x160)))
 (let (($x169 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x138 (and $x169 $x146)))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x107 (and (and (and (and true (= ?x90 (_ bv2 8))) (= ?x94 (_ bv2 8))) (= ?x99 (_ bv2 8))) (= ?x105 (_ bv2 8)))))
 (let (($x86 (and (and (and (and $x107 (= ?x109 (_ bv2 8))) (= ?x114 (_ bv2 8))) (= ?x119 (_ bv2 8))) (= ?x81 (_ bv2 8)))))
 (let (($x89 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x172 (=> $x89 (or false (or false $x86)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x85 (or $x9 $x172)))
 (let ((?x163 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x141 (= (bvand ?x163 (_ bv4294967292 32)) ?x163)))
 (let (($x75 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x163 (bvsub ?x163 (_ bv4 32))) (bvult ?x163 (bvsub ?x163 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x101 (and true $x6)))
 (let (($x58 (and $x6 $x101)))
 (let (($x161 (and (and (and $x101 $x58) $x51) $x75)))
 (let (($x174 (and (and (and $x161 $x141) $x85) $x138)))
 (let ((?x16 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x16)))
 (let (($x30 (or false $x5)))
 (let (($x68 (or $x9 $x30)))
 (let (($x175 (and $x68 $x174)))
 (let (($x176 (= $x175 true)))
 (let (($x177 (= $x176 true)))
 (let (($x46 (= $x177 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x11)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x18 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x53 (=> $x18 $x11)))
 (let (($x77 (= $x18 true)))
 (let (($x39 (and $x77 $x53)))
 (let (($x10 (and $x39 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x34 (and $x20 $x46)))
 (let (($x227 (=> $x34 $x226)))
 (let (($x32 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x25 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x59 $x25) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x32 (not $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x216 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x220 (=> $x216 false)))
 (let ((?x201 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x38))))
 (let (($x210 (= (_ bv0 32) ?x209)))
 (let ((?x211 (ite $x210 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x211 (_ bv1 32))))
 (let (($x218 (= $x216 $x217)))
 (let (($x11 (= false false)))
 (let (($x200 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x214 (=> $x200 $x11)))
 (let (($x212 (= ?x211 (_ bv0 32))))
 (let (($x213 (= $x200 $x212)))
 (let (($x215 (and $x213 $x214)))
 (let (($x219 (and $x215 $x218)))
 (let (($x221 (and $x219 $x220)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x189 (concat ?x188 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x197 (concat ?x196 (concat ?x190 ?x189))))
 (let (($x198 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x197)))
 (let (($x222 (and $x198 $x221)))
 (let (($x182 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x223 (=> $x182 $x222)))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x28 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x28 (_ bv1 32))))
 (let (($x184 (= $x182 $x183)))
 (let (($x178 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x180 (=> $x178 $x11)))
 (let (($x12 (= ?x28 (_ bv0 32))))
 (let (($x179 (= $x178 $x12)))
 (let (($x181 (and $x179 $x180)))
 (let (($x185 (and $x181 $x184)))
 (let (($x224 (and $x185 $x223)))
 (let (($x225 (= $x224 true)))
 (let (($x226 (= $x225 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x154 (concat ?x143 (concat ?x153 ?x128)))))
 (let (($x160 (= input.dst.llvm-%val ?x127)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x136)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x82 $x167)))
 (let (($x151 (and $x149 $x135)))
 (let (($x142 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x142 $x151)))
 (let (($x124 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x146 (and (and (and $x170 $x124) $x56) $x160)))
 (let (($x169 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x138 (and $x169 $x146)))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x107 (and (and (and (and true (= ?x90 (_ bv2 8))) (= ?x94 (_ bv2 8))) (= ?x99 (_ bv2 8))) (= ?x105 (_ bv2 8)))))
 (let (($x86 (and (and (and (and $x107 (= ?x109 (_ bv2 8))) (= ?x114 (_ bv2 8))) (= ?x119 (_ bv2 8))) (= ?x81 (_ bv2 8)))))
 (let (($x89 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x172 (=> $x89 (or false (or false $x86)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x85 (or $x9 $x172)))
 (let ((?x163 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x141 (= (bvand ?x163 (_ bv4294967292 32)) ?x163)))
 (let (($x75 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x163 (bvsub ?x163 (_ bv4 32))) (bvult ?x163 (bvsub ?x163 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x101 (and true $x6)))
 (let (($x58 (and $x6 $x101)))
 (let (($x161 (and (and (and $x101 $x58) $x51) $x75)))
 (let (($x174 (and (and (and $x161 $x141) $x85) $x138)))
 (let ((?x16 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x16)))
 (let (($x30 (or false $x5)))
 (let (($x68 (or $x9 $x30)))
 (let (($x175 (and $x68 $x174)))
 (let (($x176 (= $x175 true)))
 (let (($x177 (= $x176 true)))
 (let (($x46 (= $x177 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x11)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x18 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x53 (=> $x18 $x11)))
 (let (($x77 (= $x18 true)))
 (let (($x39 (and $x77 $x53)))
 (let (($x10 (and $x39 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x34 (and $x20 $x46)))
 (let (($x227 (=> $x34 $x226)))
 (let (($x32 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x25 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x59 $x25) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x32 (not $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xfcc00000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2af9d04c)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2af9d04f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2af9d04c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) #x80000000 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!2 (ite (bvule #x7ffffffb x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!1 #x7ffffffc)
                         #x7ffffffb)
                    #x7ffffffa)))
    (let ((a!3 (ite (bvule #x2af9d050 x!0)
                    (ite (bvule #x7ffffff9 x!0)
                         (ite (bvule #x7ffffffa x!0) a!2 #x7ffffff9)
                         #x2af9d050)
                    #x2af9d04f)))
      (ite (bvule #x2af9d04c x!0)
           (ite (bvule #x2af9d04d x!0)
                (ite (bvule #x2af9d04f x!0) a!3 #x2af9d04d)
                #x2af9d04c)
           #x00000000)))))
  (define-fun k!9!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x02
    (ite (= x!0 #x2af9d04c) #x03
    (ite (= x!0 #x7ffffffe) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7ffffffa) #x02
    (ite (= x!0 #x7ffffffd) #x02
    (ite (= x!0 #x2af9d04d) #x03
    (ite (= x!0 #x2af9d04f) #x03
    (ite (= x!0 #x7fffffff) #x02
    (ite (= x!0 #x7ffffff9) #x02
    (ite (= x!0 #x80000000) #x02
    (ite (= x!0 #x7ffffffc) #x02
      #x01)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!9!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00420000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0039a204)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xba000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xefefefef)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0039a207)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0039a204)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00420001) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0039a207) #x03
    (ite (= x!0 #x0039a205) #x03
    (ite (= x!0 #x00420004) #x02
    (ite (= x!0 #x00420005) #x02
    (ite (= x!0 #x00420003) #x02
    (ite (= x!0 #x0039a204) #x03
    (ite (= x!0 #x00420006) #x02
    (ite (= x!0 #x00420000) #x02
    (ite (= x!0 #x00420007) #x02
    (ite (= x!0 #x00420002) #x02
      #x01)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00420005 x!0)
                    (ite (bvule #x00420006 x!0)
                         (ite (bvule #x00420007 x!0) #x00420007 #x00420006)
                         #x00420005)
                    #x00420004)))
    (let ((a!2 (ite (bvule #x00420002 x!0)
                    (ite (bvule #x00420003 x!0)
                         (ite (bvule #x00420004 x!0) a!1 #x00420003)
                         #x00420002)
                    #x00420001)))
    (let ((a!3 (ite (bvule #x0039a208 x!0)
                    (ite (bvule #x00420000 x!0)
                         (ite (bvule #x00420001 x!0) a!2 #x00420000)
                         #x0039a208)
                    #x0039a207)))
      (ite (bvule #x0039a204 x!0)
           (ite (bvule #x0039a205 x!0)
                (ite (bvule #x0039a207 x!0) a!3 #x0039a205)
                #x0039a204)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x10)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x208 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x204))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv1 32))) (select input.dst.llvm-mem ?x211))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv2 32))) ?x226))))
 (let (($x231 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x230)))
 (let (($x232 (and $x231 false)))
 (let (($x218 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x233 (=> $x218 $x232)))
 (let (($x212 (= (_ bv0 32) ?x211)))
 (let ((?x213 (ite $x212 (_ bv0 32) (_ bv1 32))))
 (let (($x219 (bvuge ?x213 (_ bv1 32))))
 (let (($x220 (= $x218 $x219)))
 (let (($x76 (= false false)))
 (let (($x207 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x216 (=> $x207 $x76)))
 (let (($x214 (= ?x213 (_ bv0 32))))
 (let (($x215 (= $x207 $x214)))
 (let (($x217 (and $x215 $x216)))
 (let (($x221 (and $x217 $x220)))
 (let (($x234 (and $x221 $x233)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x188 (concat ?x191 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x199 (concat ?x198 (concat ?x189 ?x188))))
 (let (($x200 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x199)))
 (let (($x235 (and $x200 $x234)))
 (let (($x183 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x236 (=> $x183 $x235)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x12 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x12 (_ bv1 32))))
 (let (($x185 (= $x183 $x184)))
 (let (($x62 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x181 (=> $x62 $x76)))
 (let (($x179 (= ?x12 (_ bv0 32))))
 (let (($x180 (= $x62 $x179)))
 (let (($x182 (and $x180 $x181)))
 (let (($x193 (and $x182 $x185)))
 (let (($x237 (and $x193 $x236)))
 (let (($x238 (= $x237 true)))
 (let (($x239 (= $x238 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x153 (concat ?x155 (concat ?x157 ?x56)))))
 (let (($x148 (= input.dst.llvm-%val ?x128)))
 (let ((?x167 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x167)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x142)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x134 $x82)))
 (let (($x136 (and $x144 $x149)))
 (let (($x147 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x147 $x136)))
 (let (($x133 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x160 (and (and (and $x84 $x133) $x135) $x148)))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (and $x74 $x160)))
 (let ((?x168 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x120 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x108 (and (and (and (and true (= ?x91 (_ bv2 8))) (= ?x95 (_ bv2 8))) (= ?x100 (_ bv2 8))) (= ?x106 (_ bv2 8)))))
 (let (($x150 (and (and (and (and $x108 (= ?x110 (_ bv2 8))) (= ?x115 (_ bv2 8))) (= ?x120 (_ bv2 8))) (= ?x168 (_ bv2 8)))))
 (let (($x85 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x173 (=> $x85 (or false (or false $x150)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x80 (or $x9 $x173)))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x139 (= (bvand ?x159 (_ bv4294967292 32)) ?x159)))
 (let (($x17 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x159 (bvsub ?x159 (_ bv4 32))) (bvult ?x159 (bvsub ?x159 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x101 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x58 (and true $x101)))
 (let (($x31 (and $x101 $x58)))
 (let (($x158 (and (and (and $x58 $x31) $x51) $x17)))
 (let (($x175 (and (and (and $x158 $x139) $x80) $x146)))
 (let ((?x5 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x30 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x5)))
 (let (($x68 (or false $x30)))
 (let (($x66 (or $x9 $x68)))
 (let (($x176 (and $x66 $x175)))
 (let (($x177 (= $x176 true)))
 (let (($x46 (= $x177 true)))
 (let (($x34 (= $x46 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x76)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x24 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x42 (=> $x24 $x76)))
 (let (($x49 (= $x24 true)))
 (let (($x64 (and $x49 $x42)))
 (let (($x10 (and $x64 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x79 (and $x20 $x34)))
 (let (($x240 (=> $x79 $x239)))
 (let (($x39 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x18 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x77 $x18) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x39 (not $x240))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x208 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x204))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv1 32))) (select input.dst.llvm-mem ?x211))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv2 32))) ?x226))))
 (let (($x231 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x230)))
 (let (($x232 (and $x231 false)))
 (let (($x218 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x233 (=> $x218 $x232)))
 (let (($x212 (= (_ bv0 32) ?x211)))
 (let ((?x213 (ite $x212 (_ bv0 32) (_ bv1 32))))
 (let (($x219 (bvuge ?x213 (_ bv1 32))))
 (let (($x220 (= $x218 $x219)))
 (let (($x76 (= false false)))
 (let (($x207 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x216 (=> $x207 $x76)))
 (let (($x214 (= ?x213 (_ bv0 32))))
 (let (($x215 (= $x207 $x214)))
 (let (($x217 (and $x215 $x216)))
 (let (($x221 (and $x217 $x220)))
 (let (($x234 (and $x221 $x233)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x188 (concat ?x191 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x199 (concat ?x198 (concat ?x189 ?x188))))
 (let (($x200 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x199)))
 (let (($x235 (and $x200 $x234)))
 (let (($x183 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x236 (=> $x183 $x235)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x12 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x12 (_ bv1 32))))
 (let (($x185 (= $x183 $x184)))
 (let (($x62 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x181 (=> $x62 $x76)))
 (let (($x179 (= ?x12 (_ bv0 32))))
 (let (($x180 (= $x62 $x179)))
 (let (($x182 (and $x180 $x181)))
 (let (($x193 (and $x182 $x185)))
 (let (($x237 (and $x193 $x236)))
 (let (($x238 (= $x237 true)))
 (let (($x239 (= $x238 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x153 (concat ?x155 (concat ?x157 ?x56)))))
 (let (($x148 (= input.dst.llvm-%val ?x128)))
 (let ((?x167 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x167)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x142)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x134 $x82)))
 (let (($x136 (and $x144 $x149)))
 (let (($x147 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x147 $x136)))
 (let (($x133 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x160 (and (and (and $x84 $x133) $x135) $x148)))
 (let (($x74 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x146 (and $x74 $x160)))
 (let ((?x168 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x120 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x108 (and (and (and (and true (= ?x91 (_ bv2 8))) (= ?x95 (_ bv2 8))) (= ?x100 (_ bv2 8))) (= ?x106 (_ bv2 8)))))
 (let (($x150 (and (and (and (and $x108 (= ?x110 (_ bv2 8))) (= ?x115 (_ bv2 8))) (= ?x120 (_ bv2 8))) (= ?x168 (_ bv2 8)))))
 (let (($x85 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x173 (=> $x85 (or false (or false $x150)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x80 (or $x9 $x173)))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x139 (= (bvand ?x159 (_ bv4294967292 32)) ?x159)))
 (let (($x17 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x159 (bvsub ?x159 (_ bv4 32))) (bvult ?x159 (bvsub ?x159 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x101 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x58 (and true $x101)))
 (let (($x31 (and $x101 $x58)))
 (let (($x158 (and (and (and $x58 $x31) $x51) $x17)))
 (let (($x175 (and (and (and $x158 $x139) $x80) $x146)))
 (let ((?x5 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x30 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x5)))
 (let (($x68 (or false $x30)))
 (let (($x66 (or $x9 $x68)))
 (let (($x176 (and $x66 $x175)))
 (let (($x177 (= $x176 true)))
 (let (($x46 (= $x177 true)))
 (let (($x34 (= $x46 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x76)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x24 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x42 (=> $x24 $x76)))
 (let (($x49 (= $x24 true)))
 (let (($x64 (and $x49 $x42)))
 (let (($x10 (and $x64 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x79 (and $x20 $x34)))
 (let (($x240 (=> $x79 $x239)))
 (let (($x39 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x18 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x77 $x18) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x39 (not $x240))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xfcc00000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2af9d04c)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2af9d04f)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2af9d04c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) #x80000000 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!2 (ite (bvule #x7ffffffb x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!1 #x7ffffffc)
                         #x7ffffffb)
                    #x7ffffffa)))
    (let ((a!3 (ite (bvule #x2af9d050 x!0)
                    (ite (bvule #x7ffffff9 x!0)
                         (ite (bvule #x7ffffffa x!0) a!2 #x7ffffff9)
                         #x2af9d050)
                    #x2af9d04f)))
      (ite (bvule #x2af9d04c x!0)
           (ite (bvule #x2af9d04d x!0)
                (ite (bvule #x2af9d04f x!0) a!3 #x2af9d04d)
                #x2af9d04c)
           #x00000000)))))
  (define-fun k!9!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x02
    (ite (= x!0 #x2af9d04c) #x03
    (ite (= x!0 #x7ffffffe) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7ffffffa) #x02
    (ite (= x!0 #x7ffffffd) #x02
    (ite (= x!0 #x2af9d04d) #x03
    (ite (= x!0 #x2af9d04f) #x03
    (ite (= x!0 #x7fffffff) #x02
    (ite (= x!0 #x7ffffff9) #x02
    (ite (= x!0 #x80000000) #x02
    (ite (= x!0 #x7ffffffc) #x02
      #x01)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!9!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00420000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0039a204)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xba000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xefefefef)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0039a207)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0039a204)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00420001) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0039a207) #x03
    (ite (= x!0 #x0039a205) #x03
    (ite (= x!0 #x00420004) #x02
    (ite (= x!0 #x00420005) #x02
    (ite (= x!0 #x00420003) #x02
    (ite (= x!0 #x0039a204) #x03
    (ite (= x!0 #x00420006) #x02
    (ite (= x!0 #x00420000) #x02
    (ite (= x!0 #x00420007) #x02
    (ite (= x!0 #x00420002) #x02
      #x01)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00420005 x!0)
                    (ite (bvule #x00420006 x!0)
                         (ite (bvule #x00420007 x!0) #x00420007 #x00420006)
                         #x00420005)
                    #x00420004)))
    (let ((a!2 (ite (bvule #x00420002 x!0)
                    (ite (bvule #x00420003 x!0)
                         (ite (bvule #x00420004 x!0) a!1 #x00420003)
                         #x00420002)
                    #x00420001)))
    (let ((a!3 (ite (bvule #x0039a208 x!0)
                    (ite (bvule #x00420000 x!0)
                         (ite (bvule #x00420001 x!0) a!2 #x00420000)
                         #x0039a208)
                    #x0039a207)))
      (ite (bvule #x0039a204 x!0)
           (ite (bvule #x0039a205 x!0)
                (ite (bvule #x0039a207 x!0) a!3 #x0039a205)
                #x0039a204)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x10)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x251 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x255 (=> $x251 false)))
 (let ((?x210 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x203))))
 (let ((?x236 (bvadd ?x213 (_ bv4 32))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x240))))
 (let (($x245 (= (_ bv0 32) ?x244)))
 (let ((?x246 (ite $x245 (_ bv0 32) (_ bv1 32))))
 (let (($x252 (bvuge ?x246 (_ bv1 32))))
 (let (($x253 (= $x251 $x252)))
 (let (($x40 (= false false)))
 (let (($x235 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x249 (=> $x235 $x40)))
 (let (($x247 (= ?x246 (_ bv0 32))))
 (let (($x248 (= $x235 $x247)))
 (let (($x250 (and $x248 $x249)))
 (let (($x254 (and $x250 $x253)))
 (let (($x256 (and $x254 $x255)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem ?x213))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv2 32))) ?x225))))
 (let (($x233 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x232)))
 (let (($x257 (and $x233 $x256)))
 (let (($x220 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x258 (=> $x220 $x257)))
 (let (($x214 (= (_ bv0 32) ?x213)))
 (let ((?x215 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x215 (_ bv1 32))))
 (let (($x222 (= $x220 $x221)))
 (let (($x209 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x218 (=> $x209 $x40)))
 (let (($x216 (= ?x215 (_ bv0 32))))
 (let (($x217 (= $x209 $x216)))
 (let (($x219 (and $x217 $x218)))
 (let (($x78 (and $x219 $x222)))
 (let (($x259 (and $x78 $x258)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x191 (concat ?x190 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x201 (concat ?x200 (concat ?x188 ?x191))))
 (let (($x207 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x201)))
 (let (($x260 (and $x207 $x259)))
 (let (($x184 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x261 (=> $x184 $x260)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x179 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x179 (_ bv1 32))))
 (let (($x193 (= $x184 $x185)))
 (let (($x28 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x182 (=> $x28 $x40)))
 (let (($x180 (= ?x179 (_ bv0 32))))
 (let (($x181 (= $x28 $x180)))
 (let (($x183 (and $x181 $x182)))
 (let (($x195 (and $x183 $x193)))
 (let (($x262 (and $x195 $x261)))
 (let (($x263 (= $x262 true)))
 (let (($x264 (= $x263 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x157 (concat ?x154 (concat ?x151 ?x135)))))
 (let (($x140 (= input.dst.llvm-%val ?x56)))
 (let ((?x82 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x82)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x124 $x134)))
 (let (($x167 (and $x142 $x144)))
 (let (($x145 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x145 $x167)))
 (let (($x29 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x148 (and (and (and $x169 $x29) $x149) $x140)))
 (let (($x87 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x160 (and $x87 $x148)))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x122 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x116 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x109 (and (and (and (and true (= ?x92 (_ bv2 8))) (= ?x96 (_ bv2 8))) (= ?x102 (_ bv2 8))) (= ?x107 (_ bv2 8)))))
 (let (($x171 (and (and (and (and $x109 (= ?x111 (_ bv2 8))) (= ?x116 (_ bv2 8))) (= ?x122 (_ bv2 8))) (= ?x86 (_ bv2 8)))))
 (let (($x80 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x174 (=> $x80 (or false (or false $x171)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x90 (or $x9 $x174)))
 (let ((?x152 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x138 (= (bvand ?x152 (_ bv4294967292 32)) ?x152)))
 (let (($x164 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x152 (bvsub ?x152 (_ bv4 32))) (bvult ?x152 (bvsub ?x152 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x58 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x31 (and true $x58)))
 (let (($x75 (and $x58 $x31)))
 (let (($x141 (and (and (and $x31 $x75) $x51) $x164)))
 (let (($x176 (and (and (and $x141 $x138) $x90) $x160)))
 (let ((?x30 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x68 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x30)))
 (let (($x66 (or false $x68)))
 (let (($x65 (or $x9 $x66)))
 (let (($x177 (and $x65 $x176)))
 (let (($x46 (= $x177 true)))
 (let (($x34 (= $x46 true)))
 (let (($x79 (= $x34 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x40)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x44 (=> $x14 $x40)))
 (let (($x60 (= $x14 true)))
 (let (($x53 (and $x60 $x44)))
 (let (($x10 (and $x53 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x178 (and $x20 $x79)))
 (let (($x265 (=> $x178 $x264)))
 (let (($x64 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x64 (not $x265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x251 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x255 (=> $x251 false)))
 (let ((?x210 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x203))))
 (let ((?x236 (bvadd ?x213 (_ bv4 32))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x240))))
 (let (($x245 (= (_ bv0 32) ?x244)))
 (let ((?x246 (ite $x245 (_ bv0 32) (_ bv1 32))))
 (let (($x252 (bvuge ?x246 (_ bv1 32))))
 (let (($x253 (= $x251 $x252)))
 (let (($x40 (= false false)))
 (let (($x235 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x249 (=> $x235 $x40)))
 (let (($x247 (= ?x246 (_ bv0 32))))
 (let (($x248 (= $x235 $x247)))
 (let (($x250 (and $x248 $x249)))
 (let (($x254 (and $x250 $x253)))
 (let (($x256 (and $x254 $x255)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem ?x213))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv2 32))) ?x225))))
 (let (($x233 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x232)))
 (let (($x257 (and $x233 $x256)))
 (let (($x220 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x258 (=> $x220 $x257)))
 (let (($x214 (= (_ bv0 32) ?x213)))
 (let ((?x215 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x215 (_ bv1 32))))
 (let (($x222 (= $x220 $x221)))
 (let (($x209 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x218 (=> $x209 $x40)))
 (let (($x216 (= ?x215 (_ bv0 32))))
 (let (($x217 (= $x209 $x216)))
 (let (($x219 (and $x217 $x218)))
 (let (($x78 (and $x219 $x222)))
 (let (($x259 (and $x78 $x258)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x191 (concat ?x190 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x201 (concat ?x200 (concat ?x188 ?x191))))
 (let (($x207 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x201)))
 (let (($x260 (and $x207 $x259)))
 (let (($x184 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x261 (=> $x184 $x260)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x179 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x179 (_ bv1 32))))
 (let (($x193 (= $x184 $x185)))
 (let (($x28 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x182 (=> $x28 $x40)))
 (let (($x180 (= ?x179 (_ bv0 32))))
 (let (($x181 (= $x28 $x180)))
 (let (($x183 (and $x181 $x182)))
 (let (($x195 (and $x183 $x193)))
 (let (($x262 (and $x195 $x261)))
 (let (($x263 (= $x262 true)))
 (let (($x264 (= $x263 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x157 (concat ?x154 (concat ?x151 ?x135)))))
 (let (($x140 (= input.dst.llvm-%val ?x56)))
 (let ((?x82 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x82)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x124 $x134)))
 (let (($x167 (and $x142 $x144)))
 (let (($x145 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x145 $x167)))
 (let (($x29 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x148 (and (and (and $x169 $x29) $x149) $x140)))
 (let (($x87 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x160 (and $x87 $x148)))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x122 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x116 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x107 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x102 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x109 (and (and (and (and true (= ?x92 (_ bv2 8))) (= ?x96 (_ bv2 8))) (= ?x102 (_ bv2 8))) (= ?x107 (_ bv2 8)))))
 (let (($x171 (and (and (and (and $x109 (= ?x111 (_ bv2 8))) (= ?x116 (_ bv2 8))) (= ?x122 (_ bv2 8))) (= ?x86 (_ bv2 8)))))
 (let (($x80 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x174 (=> $x80 (or false (or false $x171)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x90 (or $x9 $x174)))
 (let ((?x152 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x138 (= (bvand ?x152 (_ bv4294967292 32)) ?x152)))
 (let (($x164 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x152 (bvsub ?x152 (_ bv4 32))) (bvult ?x152 (bvsub ?x152 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x58 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x31 (and true $x58)))
 (let (($x75 (and $x58 $x31)))
 (let (($x141 (and (and (and $x31 $x75) $x51) $x164)))
 (let (($x176 (and (and (and $x141 $x138) $x90) $x160)))
 (let ((?x30 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x68 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x30)))
 (let (($x66 (or false $x68)))
 (let (($x65 (or $x9 $x66)))
 (let (($x177 (and $x65 $x176)))
 (let (($x46 (= $x177 true)))
 (let (($x34 (= $x46 true)))
 (let (($x79 (= $x34 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x40)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x44 (=> $x14 $x40)))
 (let (($x60 (= $x14 true)))
 (let (($x53 (and $x60 $x44)))
 (let (($x10 (and $x53 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x178 (and $x20 $x79)))
 (let (($x265 (=> $x178 $x264)))
 (let (($x64 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x64 (not $x265))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xfffffff4)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xa3bc9380)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03fa4a00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03fa4a03)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03fa4a00)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xa3bc9385 x!0)
                    (ite (bvule #xa3bc9386 x!0)
                         (ite (bvule #xa3bc9387 x!0) #xa3bc9387 #xa3bc9386)
                         #xa3bc9385)
                    #xa3bc9384)))
    (let ((a!2 (ite (bvule #xa3bc9382 x!0)
                    (ite (bvule #xa3bc9383 x!0)
                         (ite (bvule #xa3bc9384 x!0) a!1 #xa3bc9383)
                         #xa3bc9382)
                    #xa3bc9381)))
    (let ((a!3 (ite (bvule #x03fa4a04 x!0)
                    (ite (bvule #xa3bc9380 x!0)
                         (ite (bvule #xa3bc9381 x!0) a!2 #xa3bc9380)
                         #x03fa4a04)
                    #x03fa4a03)))
      (ite (bvule #x03fa4a00 x!0)
           (ite (bvule #x03fa4a01 x!0)
                (ite (bvule #x03fa4a03 x!0) a!3 #x03fa4a01)
                #x03fa4a00)
           #x00000000)))))
  (define-fun k!12!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa3bc9382) #x02
    (ite (= x!0 #x03fa4a00) #x03
    (ite (= x!0 #xa3bc9385) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xa3bc9381) #x02
    (ite (= x!0 #xa3bc9384) #x02
    (ite (= x!0 #x03fa4a01) #x03
    (ite (= x!0 #x03fa4a03) #x03
    (ite (= x!0 #xa3bc9386) #x02
    (ite (= x!0 #xa3bc9380) #x02
    (ite (= x!0 #xa3bc9387) #x02
    (ite (= x!0 #xa3bc9383) #x02
      #x01)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!15 (k!14 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffb) #xfe
    (ite (= x!0 #xfffffff8) #xf8
      #xff)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x40000040)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x240e4420)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #xfbfbfbfb)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xfbfbfbfb)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x240e4423)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x240e4420)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x40000045 x!0)
                    (ite (bvule #x40000046 x!0)
                         (ite (bvule #x40000047 x!0) #x40000047 #x40000046)
                         #x40000045)
                    #x40000044)))
    (let ((a!2 (ite (bvule #x40000042 x!0)
                    (ite (bvule #x40000043 x!0)
                         (ite (bvule #x40000044 x!0) a!1 #x40000043)
                         #x40000042)
                    #x40000041)))
    (let ((a!3 (ite (bvule #x240e4424 x!0)
                    (ite (bvule #x40000040 x!0)
                         (ite (bvule #x40000041 x!0) a!2 #x40000040)
                         #x240e4424)
                    #x240e4423)))
      (ite (bvule #x240e4420 x!0)
           (ite (bvule #x240e4421 x!0)
                (ite (bvule #x240e4423 x!0) a!3 #x240e4421)
                #x240e4420)
           #x00000000)))))
  (define-fun k!11!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x40000041) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x240e4423) #x03
    (ite (= x!0 #x240e4421) #x03
    (ite (= x!0 #x40000044) #x02
    (ite (= x!0 #x40000045) #x02
    (ite (= x!0 #x40000043) #x02
    (ite (= x!0 #x240e4420) #x03
    (ite (= x!0 #x40000046) #x02
    (ite (= x!0 #x40000040) #x02
    (ite (= x!0 #x40000047) #x02
    (ite (= x!0 #x40000042) #x02
      #x01)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x212 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x205))))
 (let ((?x243 (bvadd ?x215 (_ bv4 32))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x239))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x261))))
 (let (($x16 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x267)))
 (let (($x198 (and $x16 false)))
 (let (($x253 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x268 (=> $x253 $x198)))
 (let (($x247 (= (_ bv0 32) ?x246)))
 (let ((?x248 (ite $x247 (_ bv0 32) (_ bv1 32))))
 (let (($x254 (bvuge ?x248 (_ bv1 32))))
 (let (($x255 (= $x253 $x254)))
 (let (($x59 (= false false)))
 (let (($x196 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x251 (=> $x196 $x59)))
 (let (($x249 (= ?x248 (_ bv0 32))))
 (let (($x250 (= $x196 $x249)))
 (let (($x252 (and $x250 $x251)))
 (let (($x256 (and $x252 $x255)))
 (let (($x269 (and $x256 $x268)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x224))))
 (let (($x235 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x234)))
 (let (($x270 (and $x235 $x269)))
 (let (($x222 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x271 (=> $x222 $x270)))
 (let (($x216 (= (_ bv0 32) ?x215)))
 (let ((?x217 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x217 (_ bv1 32))))
 (let (($x194 (= $x222 $x78)))
 (let (($x211 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x220 (=> $x211 $x59)))
 (let (($x218 (= ?x217 (_ bv0 32))))
 (let (($x219 (= $x211 $x218)))
 (let (($x221 (and $x219 $x220)))
 (let (($x230 (and $x221 $x194)))
 (let (($x272 (and $x230 $x271)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x190 (concat ?x189 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x208 (concat ?x207 (concat ?x191 ?x190))))
 (let (($x209 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x208)))
 (let (($x273 (and $x209 $x272)))
 (let (($x185 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x274 (=> $x185 $x273)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x180 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x180 (_ bv1 32))))
 (let (($x195 (= $x185 $x193)))
 (let (($x12 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x183 (=> $x12 $x59)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x12 $x181)))
 (let (($x184 (and $x182 $x183)))
 (let (($x197 (and $x184 $x195)))
 (let (($x275 (and $x197 $x274)))
 (let (($x276 (= $x275 true)))
 (let (($x277 (= $x276 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x151 (concat ?x153 (concat ?x136 ?x149)))))
 (let (($x137 (= input.dst.llvm-%val ?x135)))
 (let ((?x134 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x134)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x145)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x133 $x124)))
 (let (($x82 (and $x147 $x142)))
 (let (($x143 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x143 $x82)))
 (let (($x166 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x140 (and (and (and $x74 $x166) $x144) $x137)))
 (let (($x89 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x148 (and $x89 $x140)))
 (let ((?x150 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x165 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x117 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x103 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x110 (and (and (and (and true (= ?x93 (_ bv2 8))) (= ?x97 (_ bv2 8))) (= ?x103 (_ bv2 8))) (= ?x108 (_ bv2 8)))))
 (let (($x172 (and (and (and (and $x110 (= ?x112 (_ bv2 8))) (= ?x117 (_ bv2 8))) (= ?x165 (_ bv2 8))) (= ?x150 (_ bv2 8)))))
 (let (($x90 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x175 (=> $x90 (or false (or false $x172)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x91 (or $x9 $x175)))
 (let ((?x161 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x146 (= (bvand ?x161 (_ bv4294967292 32)) ?x161)))
 (let (($x21 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x161 (bvsub ?x161 (_ bv4 32))) (bvult ?x161 (bvsub ?x161 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x31 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x75 (and true $x31)))
 (let (($x17 (and $x31 $x75)))
 (let (($x139 (and (and (and $x75 $x17) $x51) $x21)))
 (let (($x177 (and (and (and $x139 $x146) $x91) $x148)))
 (let ((?x68 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x66 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x68)))
 (let (($x65 (or false $x66)))
 (let (($x57 (or $x9 $x65)))
 (let (($x46 (and $x57 $x177)))
 (let (($x34 (= $x46 true)))
 (let (($x79 (= $x34 true)))
 (let (($x178 (= $x79 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x59)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x123 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x13 (=> $x123 $x59)))
 (let (($x25 (= $x123 true)))
 (let (($x42 (and $x25 $x13)))
 (let (($x10 (and $x42 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x62 (and $x20 $x178)))
 (let (($x278 (=> $x62 $x277)))
 (let (($x53 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x14 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x60 $x14) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x53 (not $x278))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x212 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x205))))
 (let ((?x243 (bvadd ?x215 (_ bv4 32))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x239))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x261))))
 (let (($x16 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x267)))
 (let (($x198 (and $x16 false)))
 (let (($x253 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x268 (=> $x253 $x198)))
 (let (($x247 (= (_ bv0 32) ?x246)))
 (let ((?x248 (ite $x247 (_ bv0 32) (_ bv1 32))))
 (let (($x254 (bvuge ?x248 (_ bv1 32))))
 (let (($x255 (= $x253 $x254)))
 (let (($x59 (= false false)))
 (let (($x196 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x251 (=> $x196 $x59)))
 (let (($x249 (= ?x248 (_ bv0 32))))
 (let (($x250 (= $x196 $x249)))
 (let (($x252 (and $x250 $x251)))
 (let (($x256 (and $x252 $x255)))
 (let (($x269 (and $x256 $x268)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x224))))
 (let (($x235 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x234)))
 (let (($x270 (and $x235 $x269)))
 (let (($x222 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x271 (=> $x222 $x270)))
 (let (($x216 (= (_ bv0 32) ?x215)))
 (let ((?x217 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x217 (_ bv1 32))))
 (let (($x194 (= $x222 $x78)))
 (let (($x211 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x220 (=> $x211 $x59)))
 (let (($x218 (= ?x217 (_ bv0 32))))
 (let (($x219 (= $x211 $x218)))
 (let (($x221 (and $x219 $x220)))
 (let (($x230 (and $x221 $x194)))
 (let (($x272 (and $x230 $x271)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x190 (concat ?x189 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x208 (concat ?x207 (concat ?x191 ?x190))))
 (let (($x209 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x208)))
 (let (($x273 (and $x209 $x272)))
 (let (($x185 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x274 (=> $x185 $x273)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x180 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x180 (_ bv1 32))))
 (let (($x195 (= $x185 $x193)))
 (let (($x12 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x183 (=> $x12 $x59)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x12 $x181)))
 (let (($x184 (and $x182 $x183)))
 (let (($x197 (and $x184 $x195)))
 (let (($x275 (and $x197 $x274)))
 (let (($x276 (= $x275 true)))
 (let (($x277 (= $x276 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x151 (concat ?x153 (concat ?x136 ?x149)))))
 (let (($x137 (= input.dst.llvm-%val ?x135)))
 (let ((?x134 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x134)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x145)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x133 $x124)))
 (let (($x82 (and $x147 $x142)))
 (let (($x143 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x143 $x82)))
 (let (($x166 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x140 (and (and (and $x74 $x166) $x144) $x137)))
 (let (($x89 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x148 (and $x89 $x140)))
 (let ((?x150 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x165 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x117 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x112 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x108 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x103 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x110 (and (and (and (and true (= ?x93 (_ bv2 8))) (= ?x97 (_ bv2 8))) (= ?x103 (_ bv2 8))) (= ?x108 (_ bv2 8)))))
 (let (($x172 (and (and (and (and $x110 (= ?x112 (_ bv2 8))) (= ?x117 (_ bv2 8))) (= ?x165 (_ bv2 8))) (= ?x150 (_ bv2 8)))))
 (let (($x90 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x175 (=> $x90 (or false (or false $x172)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x91 (or $x9 $x175)))
 (let ((?x161 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x146 (= (bvand ?x161 (_ bv4294967292 32)) ?x161)))
 (let (($x21 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x161 (bvsub ?x161 (_ bv4 32))) (bvult ?x161 (bvsub ?x161 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x31 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x75 (and true $x31)))
 (let (($x17 (and $x31 $x75)))
 (let (($x139 (and (and (and $x75 $x17) $x51) $x21)))
 (let (($x177 (and (and (and $x139 $x146) $x91) $x148)))
 (let ((?x68 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x66 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x68)))
 (let (($x65 (or false $x66)))
 (let (($x57 (or $x9 $x65)))
 (let (($x46 (and $x57 $x177)))
 (let (($x34 (= $x46 true)))
 (let (($x79 (= $x34 true)))
 (let (($x178 (= $x79 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x59)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x123 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x13 (=> $x123 $x59)))
 (let (($x25 (= $x123 true)))
 (let (($x42 (and $x25 $x13)))
 (let (($x10 (and $x42 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x62 (and $x20 $x178)))
 (let (($x278 (=> $x62 $x277)))
 (let (($x53 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x14 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x60 $x14) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x53 (not $x278))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x40000040)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x240e4420)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #xfbfbfbfb)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xfbfbfbfb)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x240e4423)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x240e4420)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x40000045 x!0)
                    (ite (bvule #x40000046 x!0)
                         (ite (bvule #x40000047 x!0) #x40000047 #x40000046)
                         #x40000045)
                    #x40000044)))
    (let ((a!2 (ite (bvule #x40000042 x!0)
                    (ite (bvule #x40000043 x!0)
                         (ite (bvule #x40000044 x!0) a!1 #x40000043)
                         #x40000042)
                    #x40000041)))
    (let ((a!3 (ite (bvule #x240e4424 x!0)
                    (ite (bvule #x40000040 x!0)
                         (ite (bvule #x40000041 x!0) a!2 #x40000040)
                         #x240e4424)
                    #x240e4423)))
      (ite (bvule #x240e4420 x!0)
           (ite (bvule #x240e4421 x!0)
                (ite (bvule #x240e4423 x!0) a!3 #x240e4421)
                #x240e4420)
           #x00000000)))))
  (define-fun k!11!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x40000041) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x240e4423) #x03
    (ite (= x!0 #x240e4421) #x03
    (ite (= x!0 #x40000044) #x02
    (ite (= x!0 #x40000045) #x02
    (ite (= x!0 #x40000043) #x02
    (ite (= x!0 #x240e4420) #x03
    (ite (= x!0 #x40000046) #x02
    (ite (= x!0 #x40000040) #x02
    (ite (= x!0 #x40000047) #x02
    (ite (= x!0 #x40000042) #x02
      #x01)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!14 (k!13 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xfffffff4)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xa3bc9380)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03fa4a00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03fa4a03)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03fa4a00)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xa3bc9385 x!0)
                    (ite (bvule #xa3bc9386 x!0)
                         (ite (bvule #xa3bc9387 x!0) #xa3bc9387 #xa3bc9386)
                         #xa3bc9385)
                    #xa3bc9384)))
    (let ((a!2 (ite (bvule #xa3bc9382 x!0)
                    (ite (bvule #xa3bc9383 x!0)
                         (ite (bvule #xa3bc9384 x!0) a!1 #xa3bc9383)
                         #xa3bc9382)
                    #xa3bc9381)))
    (let ((a!3 (ite (bvule #x03fa4a04 x!0)
                    (ite (bvule #xa3bc9380 x!0)
                         (ite (bvule #xa3bc9381 x!0) a!2 #xa3bc9380)
                         #x03fa4a04)
                    #x03fa4a03)))
      (ite (bvule #x03fa4a00 x!0)
           (ite (bvule #x03fa4a01 x!0)
                (ite (bvule #x03fa4a03 x!0) a!3 #x03fa4a01)
                #x03fa4a00)
           #x00000000)))))
  (define-fun k!12!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa3bc9382) #x02
    (ite (= x!0 #x03fa4a00) #x03
    (ite (= x!0 #xa3bc9385) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xa3bc9381) #x02
    (ite (= x!0 #xa3bc9384) #x02
    (ite (= x!0 #x03fa4a01) #x03
    (ite (= x!0 #x03fa4a03) #x03
    (ite (= x!0 #xa3bc9386) #x02
    (ite (= x!0 #xa3bc9380) #x02
    (ite (= x!0 #xa3bc9387) #x02
    (ite (= x!0 #xa3bc9383) #x02
      #x01)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!15 (k!14 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffb) #xfe
    (ite (= x!0 #xfffffff8) #xf8
      #xff)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x286 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x290 (=> $x286 false)))
 (let ((?x214 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x38))))
 (let ((?x245 (bvadd ?x217 (_ bv4 32))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x238))))
 (let ((?x271 (bvadd ?x248 (_ bv4 32))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x275))))
 (let (($x200 (= (_ bv0 32) ?x5)))
 (let ((?x281 (ite $x200 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x281 (_ bv1 32))))
 (let (($x288 (= $x286 $x287)))
 (let (($x77 (= false false)))
 (let (($x270 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x284 (=> $x270 $x77)))
 (let (($x282 (= ?x281 (_ bv0 32))))
 (let (($x283 (= $x270 $x282)))
 (let (($x285 (and $x283 $x284)))
 (let (($x289 (and $x285 $x288)))
 (let (($x291 (and $x289 $x290)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x260))))
 (let (($x268 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x198)))
 (let (($x292 (and $x268 $x291)))
 (let (($x255 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x293 (=> $x255 $x292)))
 (let (($x249 (= (_ bv0 32) ?x248)))
 (let ((?x250 (ite $x249 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x250 (_ bv1 32))))
 (let (($x257 (= $x255 $x256)))
 (let (($x244 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x253 (=> $x244 $x77)))
 (let (($x251 (= ?x250 (_ bv0 32))))
 (let (($x252 (= $x244 $x251)))
 (let (($x254 (and $x252 $x253)))
 (let (($x265 (and $x254 $x257)))
 (let (($x294 (and $x265 $x293)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem ?x217))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv2 32))) ?x228))))
 (let (($x196 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x236)))
 (let (($x295 (and $x196 $x294)))
 (let (($x194 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x296 (=> $x194 $x295)))
 (let (($x218 (= (_ bv0 32) ?x217)))
 (let ((?x219 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x230 (bvuge ?x219 (_ bv1 32))))
 (let (($x231 (= $x194 $x230)))
 (let (($x213 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x222 (=> $x213 $x77)))
 (let (($x220 (= ?x219 (_ bv0 32))))
 (let (($x221 (= $x213 $x220)))
 (let (($x78 (and $x221 $x222)))
 (let (($x232 (and $x78 $x231)))
 (let (($x297 (and $x232 $x296)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x189 (concat ?x188 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x210 (concat ?x209 (concat ?x190 ?x189))))
 (let (($x211 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x210)))
 (let (($x298 (and $x211 $x297)))
 (let (($x193 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x299 (=> $x193 $x298)))
 (let (($x180 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x181 (ite $x180 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x181 (_ bv1 32))))
 (let (($x197 (= $x193 $x195)))
 (let (($x179 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x179 $x77)))
 (let (($x182 (= ?x181 (_ bv0 32))))
 (let (($x183 (= $x179 $x182)))
 (let (($x185 (and $x183 $x184)))
 (let (($x199 (and $x185 $x197)))
 (let (($x300 (and $x199 $x299)))
 (let (($x301 (= $x300 true)))
 (let (($x302 (= $x301 true)))
 (let ((?x144 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x136 (concat ?x157 (concat ?x167 ?x144)))))
 (let (($x126 (= input.dst.llvm-%val ?x149)))
 (let ((?x124 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x124)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x29 $x133)))
 (let (($x134 (and $x145 $x147)))
 (let (($x155 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x155 $x134)))
 (let (($x50 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x137 (and (and (and $x87 $x50) $x142) $x126)))
 (let (($x85 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x140 (and $x85 $x137)))
 (let ((?x171 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x111 (and (and (and (and true (= ?x94 (_ bv2 8))) (= ?x98 (_ bv2 8))) (= ?x104 (_ bv2 8))) (= ?x109 (_ bv2 8)))))
 (let (($x173 (and (and (and (and $x111 (= ?x113 (_ bv2 8))) (= ?x118 (_ bv2 8))) (= ?x81 (_ bv2 8))) (= ?x171 (_ bv2 8)))))
 (let (($x91 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x176 (=> $x91 (or false (or false $x173)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x92 (or $x9 $x176)))
 (let ((?x158 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x160 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x158 (bvsub ?x158 (_ bv4 32))) (bvult ?x158 (bvsub ?x158 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x75 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x17 (and true $x75)))
 (let (($x164 (and $x75 $x17)))
 (let (($x138 (and (and (and $x17 $x164) $x51) $x67)))
 (let (($x46 (and (and (and $x138 $x160) $x92) $x140)))
 (let ((?x66 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x66)))
 (let (($x57 (or false $x65)))
 (let (($x6 (or $x9 $x57)))
 (let (($x34 (and $x6 $x46)))
 (let (($x79 (= $x34 true)))
 (let (($x178 (= $x79 true)))
 (let (($x62 (= $x178 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x77)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x32 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x11 (=> $x32 $x77)))
 (let (($x18 (= $x32 true)))
 (let (($x44 (and $x18 $x11)))
 (let (($x10 (and $x44 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x28 (and $x20 $x62)))
 (let (($x303 (=> $x28 $x302)))
 (let (($x42 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x123 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x25 $x123) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x42 (not $x303))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x286 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x290 (=> $x286 false)))
 (let ((?x214 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x38))))
 (let ((?x245 (bvadd ?x217 (_ bv4 32))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x238))))
 (let ((?x271 (bvadd ?x248 (_ bv4 32))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x275))))
 (let (($x200 (= (_ bv0 32) ?x5)))
 (let ((?x281 (ite $x200 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x281 (_ bv1 32))))
 (let (($x288 (= $x286 $x287)))
 (let (($x77 (= false false)))
 (let (($x270 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x284 (=> $x270 $x77)))
 (let (($x282 (= ?x281 (_ bv0 32))))
 (let (($x283 (= $x270 $x282)))
 (let (($x285 (and $x283 $x284)))
 (let (($x289 (and $x285 $x288)))
 (let (($x291 (and $x289 $x290)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x260))))
 (let (($x268 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x198)))
 (let (($x292 (and $x268 $x291)))
 (let (($x255 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x293 (=> $x255 $x292)))
 (let (($x249 (= (_ bv0 32) ?x248)))
 (let ((?x250 (ite $x249 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x250 (_ bv1 32))))
 (let (($x257 (= $x255 $x256)))
 (let (($x244 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x253 (=> $x244 $x77)))
 (let (($x251 (= ?x250 (_ bv0 32))))
 (let (($x252 (= $x244 $x251)))
 (let (($x254 (and $x252 $x253)))
 (let (($x265 (and $x254 $x257)))
 (let (($x294 (and $x265 $x293)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem ?x217))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv2 32))) ?x228))))
 (let (($x196 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x236)))
 (let (($x295 (and $x196 $x294)))
 (let (($x194 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x296 (=> $x194 $x295)))
 (let (($x218 (= (_ bv0 32) ?x217)))
 (let ((?x219 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x230 (bvuge ?x219 (_ bv1 32))))
 (let (($x231 (= $x194 $x230)))
 (let (($x213 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x222 (=> $x213 $x77)))
 (let (($x220 (= ?x219 (_ bv0 32))))
 (let (($x221 (= $x213 $x220)))
 (let (($x78 (and $x221 $x222)))
 (let (($x232 (and $x78 $x231)))
 (let (($x297 (and $x232 $x296)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x189 (concat ?x188 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x210 (concat ?x209 (concat ?x190 ?x189))))
 (let (($x211 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x210)))
 (let (($x298 (and $x211 $x297)))
 (let (($x193 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x299 (=> $x193 $x298)))
 (let (($x180 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x181 (ite $x180 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x181 (_ bv1 32))))
 (let (($x197 (= $x193 $x195)))
 (let (($x179 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x179 $x77)))
 (let (($x182 (= ?x181 (_ bv0 32))))
 (let (($x183 (= $x179 $x182)))
 (let (($x185 (and $x183 $x184)))
 (let (($x199 (and $x185 $x197)))
 (let (($x300 (and $x199 $x299)))
 (let (($x301 (= $x300 true)))
 (let (($x302 (= $x301 true)))
 (let ((?x144 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x136 (concat ?x157 (concat ?x167 ?x144)))))
 (let (($x126 (= input.dst.llvm-%val ?x149)))
 (let ((?x124 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x124)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x29 $x133)))
 (let (($x134 (and $x145 $x147)))
 (let (($x155 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x155 $x134)))
 (let (($x50 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x137 (and (and (and $x87 $x50) $x142) $x126)))
 (let (($x85 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x140 (and $x85 $x137)))
 (let ((?x171 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x113 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x111 (and (and (and (and true (= ?x94 (_ bv2 8))) (= ?x98 (_ bv2 8))) (= ?x104 (_ bv2 8))) (= ?x109 (_ bv2 8)))))
 (let (($x173 (and (and (and (and $x111 (= ?x113 (_ bv2 8))) (= ?x118 (_ bv2 8))) (= ?x81 (_ bv2 8))) (= ?x171 (_ bv2 8)))))
 (let (($x91 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x176 (=> $x91 (or false (or false $x173)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x92 (or $x9 $x176)))
 (let ((?x158 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x160 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x158 (bvsub ?x158 (_ bv4 32))) (bvult ?x158 (bvsub ?x158 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x75 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x17 (and true $x75)))
 (let (($x164 (and $x75 $x17)))
 (let (($x138 (and (and (and $x17 $x164) $x51) $x67)))
 (let (($x46 (and (and (and $x138 $x160) $x92) $x140)))
 (let ((?x66 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x66)))
 (let (($x57 (or false $x65)))
 (let (($x6 (or $x9 $x57)))
 (let (($x34 (and $x6 $x46)))
 (let (($x79 (= $x34 true)))
 (let (($x178 (= $x79 true)))
 (let (($x62 (= $x178 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x77)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x32 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x11 (=> $x32 $x77)))
 (let (($x18 (= $x32 true)))
 (let (($x44 (and $x18 $x11)))
 (let (($x10 (and $x44 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x28 (and $x20 $x62)))
 (let (($x303 (=> $x28 $x302)))
 (let (($x42 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x123 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x25 $x123) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x42 (not $x303))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x01600000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfa0064c0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00080000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfa0064c3)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfa0064c0)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x01600001) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xfa0064c3) #x03
    (ite (= x!0 #xfa0064c1) #x03
    (ite (= x!0 #x01600004) #x02
    (ite (= x!0 #x01600005) #x02
    (ite (= x!0 #x01600003) #x02
    (ite (= x!0 #xfa0064c0) #x03
    (ite (= x!0 #x01600006) #x02
    (ite (= x!0 #x01600000) #x02
    (ite (= x!0 #x01600007) #x02
    (ite (= x!0 #x01600002) #x02
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xfa0064c1 x!0)
                    (ite (bvule #xfa0064c3 x!0)
                         (ite (bvule #xfa0064c4 x!0) #xfa0064c4 #xfa0064c3)
                         #xfa0064c1)
                    #xfa0064c0)))
    (let ((a!2 (ite (bvule #x01600006 x!0)
                    (ite (bvule #x01600007 x!0)
                         (ite (bvule #xfa0064c0 x!0) a!1 #x01600007)
                         #x01600006)
                    #x01600005)))
    (let ((a!3 (ite (bvule #x01600003 x!0)
                    (ite (bvule #x01600004 x!0)
                         (ite (bvule #x01600005 x!0) a!2 #x01600004)
                         #x01600003)
                    #x01600002)))
      (ite (bvule #x01600000 x!0)
           (ite (bvule #x01600001 x!0)
                (ite (bvule #x01600002 x!0) a!3 #x01600001)
                #x01600000)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xd0554e00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!14))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x190eb0a0)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x190eb0a3)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x190eb0a0)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) #x80000000 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!2 (ite (bvule #x7ffffffb x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!1 #x7ffffffc)
                         #x7ffffffb)
                    #x7ffffffa)))
    (let ((a!3 (ite (bvule #x190eb0a4 x!0)
                    (ite (bvule #x7ffffff9 x!0)
                         (ite (bvule #x7ffffffa x!0) a!2 #x7ffffff9)
                         #x190eb0a4)
                    #x190eb0a3)))
      (ite (bvule #x190eb0a0 x!0)
           (ite (bvule #x190eb0a1 x!0)
                (ite (bvule #x190eb0a3 x!0) a!3 #x190eb0a1)
                #x190eb0a0)
           #x00000000)))))
  (define-fun k!13!16 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x02
    (ite (= x!0 #x190eb0a0) #x03
    (ite (= x!0 #x7ffffffe) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7ffffffa) #x02
    (ite (= x!0 #x7ffffffd) #x02
    (ite (= x!0 #x190eb0a1) #x03
    (ite (= x!0 #x190eb0a3) #x03
    (ite (= x!0 #x7fffffff) #x02
    (ite (= x!0 #x7ffffff9) #x02
    (ite (= x!0 #x80000000) #x02
    (ite (= x!0 #x7ffffffc) #x02
      #x01)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!13!16 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000004) #xf2
    (ite (= x!0 #x00000007) #xff
      #x00)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x216 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x204))))
 (let ((?x247 (bvadd ?x219 (_ bv4 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x242))))
 (let ((?x280 (bvadd ?x250 (_ bv4 32))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x274))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x296))))
 (let (($x303 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 ?x302)))
 (let (($x304 (and $x303 false)))
 (let (($x288 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x305 (=> $x288 $x304)))
 (let (($x282 (= (_ bv0 32) ?x281)))
 (let ((?x283 (ite $x282 (_ bv0 32) (_ bv1 32))))
 (let (($x289 (bvuge ?x283 (_ bv1 32))))
 (let (($x290 (= $x288 $x289)))
 (let (($x49 (= false false)))
 (let (($x279 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x286 (=> $x279 $x49)))
 (let (($x284 (= ?x283 (_ bv0 32))))
 (let (($x285 (= $x279 $x284)))
 (let (($x287 (and $x285 $x286)))
 (let (($x291 (and $x287 $x290)))
 (let (($x30 (and $x291 $x305)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x259))))
 (let (($x270 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x269)))
 (let (($x207 (and $x270 $x30)))
 (let (($x257 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x306 (=> $x257 $x207)))
 (let (($x251 (= (_ bv0 32) ?x250)))
 (let ((?x252 (ite $x251 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (bvuge ?x252 (_ bv1 32))))
 (let (($x266 (= $x257 $x265)))
 (let (($x246 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x255 (=> $x246 $x49)))
 (let (($x253 (= ?x252 (_ bv0 32))))
 (let (($x254 (= $x246 $x253)))
 (let (($x256 (and $x254 $x255)))
 (let (($x267 (and $x256 $x266)))
 (let (($x307 (and $x267 $x306)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem ?x219))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv2 32))) ?x226))))
 (let (($x244 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x243)))
 (let (($x308 (and $x244 $x307)))
 (let (($x231 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x309 (=> $x231 $x308)))
 (let (($x220 (= (_ bv0 32) ?x219)))
 (let ((?x221 (ite $x220 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x221 (_ bv1 32))))
 (let (($x233 (= $x231 $x232)))
 (let (($x215 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x194 (=> $x215 $x49)))
 (let (($x222 (= ?x221 (_ bv0 32))))
 (let (($x78 (= $x215 $x222)))
 (let (($x230 (and $x78 $x194)))
 (let (($x234 (and $x230 $x233)))
 (let (($x310 (and $x234 $x309)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x188 (concat ?x191 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x212 (concat ?x211 (concat ?x189 ?x188))))
 (let (($x213 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x212)))
 (let (($x311 (and $x213 $x310)))
 (let (($x195 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x312 (=> $x195 $x311)))
 (let (($x181 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x182 (ite $x181 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (bvuge ?x182 (_ bv1 32))))
 (let (($x199 (= $x195 $x197)))
 (let (($x180 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x185 (=> $x180 $x49)))
 (let (($x183 (= ?x182 (_ bv0 32))))
 (let (($x184 (= $x180 $x183)))
 (let (($x193 (and $x184 $x185)))
 (let (($x201 (and $x193 $x199)))
 (let (($x313 (and $x201 $x312)))
 (let (($x314 (= $x313 true)))
 (let (($x315 (= $x314 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x167 (concat ?x151 (concat ?x82 ?x142)))))
 (let (($x127 (= input.dst.llvm-%val ?x144)))
 (let ((?x133 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x133)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x166 $x29)))
 (let (($x124 (and $x143 $x145)))
 (let (($x154 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x154 $x124)))
 (let (($x170 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x126 (and (and (and $x89 $x170) $x147) $x127)))
 (let (($x80 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x137 (and $x80 $x126)))
 (let ((?x172 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x168 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x112 (and (and (and (and true (= ?x95 (_ bv2 8))) (= ?x99 (_ bv2 8))) (= ?x105 (_ bv2 8))) (= ?x110 (_ bv2 8)))))
 (let (($x174 (and (and (and (and $x112 (= ?x114 (_ bv2 8))) (= ?x119 (_ bv2 8))) (= ?x168 (_ bv2 8))) (= ?x172 (_ bv2 8)))))
 (let (($x92 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x177 (=> $x92 (or false (or false $x174)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x93 (or $x9 $x177)))
 (let ((?x141 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x148 (= (bvand ?x141 (_ bv4294967292 32)) ?x141)))
 (let (($x163 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x141 (bvsub ?x141 (_ bv4 32))) (bvult ?x141 (bvsub ?x141 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x164 (and true $x17)))
 (let (($x21 (and $x17 $x164)))
 (let (($x146 (and (and (and $x164 $x21) $x51) $x163)))
 (let (($x34 (and (and (and $x146 $x148) $x93) $x137)))
 (let ((?x65 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x57 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x65)))
 (let (($x6 (or false $x57)))
 (let (($x101 (or $x9 $x6)))
 (let (($x79 (and $x101 $x34)))
 (let (($x178 (= $x79 true)))
 (let (($x62 (= $x178 true)))
 (let (($x28 (= $x62 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x49)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x39 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x76 (=> $x39 $x49)))
 (let (($x24 (= $x39 true)))
 (let (($x13 (and $x24 $x76)))
 (let (($x10 (and $x13 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x12 (and $x20 $x28)))
 (let (($x316 (=> $x12 $x315)))
 (let (($x44 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x18 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x44 (not $x316))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x216 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x204))))
 (let ((?x247 (bvadd ?x219 (_ bv4 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x242))))
 (let ((?x280 (bvadd ?x250 (_ bv4 32))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x274))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x296))))
 (let (($x303 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 ?x302)))
 (let (($x304 (and $x303 false)))
 (let (($x288 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x305 (=> $x288 $x304)))
 (let (($x282 (= (_ bv0 32) ?x281)))
 (let ((?x283 (ite $x282 (_ bv0 32) (_ bv1 32))))
 (let (($x289 (bvuge ?x283 (_ bv1 32))))
 (let (($x290 (= $x288 $x289)))
 (let (($x49 (= false false)))
 (let (($x279 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x286 (=> $x279 $x49)))
 (let (($x284 (= ?x283 (_ bv0 32))))
 (let (($x285 (= $x279 $x284)))
 (let (($x287 (and $x285 $x286)))
 (let (($x291 (and $x287 $x290)))
 (let (($x30 (and $x291 $x305)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x259))))
 (let (($x270 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x269)))
 (let (($x207 (and $x270 $x30)))
 (let (($x257 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x306 (=> $x257 $x207)))
 (let (($x251 (= (_ bv0 32) ?x250)))
 (let ((?x252 (ite $x251 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (bvuge ?x252 (_ bv1 32))))
 (let (($x266 (= $x257 $x265)))
 (let (($x246 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x255 (=> $x246 $x49)))
 (let (($x253 (= ?x252 (_ bv0 32))))
 (let (($x254 (= $x246 $x253)))
 (let (($x256 (and $x254 $x255)))
 (let (($x267 (and $x256 $x266)))
 (let (($x307 (and $x267 $x306)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem ?x219))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv2 32))) ?x226))))
 (let (($x244 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x243)))
 (let (($x308 (and $x244 $x307)))
 (let (($x231 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x309 (=> $x231 $x308)))
 (let (($x220 (= (_ bv0 32) ?x219)))
 (let ((?x221 (ite $x220 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x221 (_ bv1 32))))
 (let (($x233 (= $x231 $x232)))
 (let (($x215 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x194 (=> $x215 $x49)))
 (let (($x222 (= ?x221 (_ bv0 32))))
 (let (($x78 (= $x215 $x222)))
 (let (($x230 (and $x78 $x194)))
 (let (($x234 (and $x230 $x233)))
 (let (($x310 (and $x234 $x309)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x188 (concat ?x191 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x212 (concat ?x211 (concat ?x189 ?x188))))
 (let (($x213 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x212)))
 (let (($x311 (and $x213 $x310)))
 (let (($x195 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x312 (=> $x195 $x311)))
 (let (($x181 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x182 (ite $x181 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (bvuge ?x182 (_ bv1 32))))
 (let (($x199 (= $x195 $x197)))
 (let (($x180 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x185 (=> $x180 $x49)))
 (let (($x183 (= ?x182 (_ bv0 32))))
 (let (($x184 (= $x180 $x183)))
 (let (($x193 (and $x184 $x185)))
 (let (($x201 (and $x193 $x199)))
 (let (($x313 (and $x201 $x312)))
 (let (($x314 (= $x313 true)))
 (let (($x315 (= $x314 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x167 (concat ?x151 (concat ?x82 ?x142)))))
 (let (($x127 (= input.dst.llvm-%val ?x144)))
 (let ((?x133 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x133)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x166 $x29)))
 (let (($x124 (and $x143 $x145)))
 (let (($x154 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x154 $x124)))
 (let (($x170 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x126 (and (and (and $x89 $x170) $x147) $x127)))
 (let (($x80 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x137 (and $x80 $x126)))
 (let ((?x172 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x168 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x110 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x112 (and (and (and (and true (= ?x95 (_ bv2 8))) (= ?x99 (_ bv2 8))) (= ?x105 (_ bv2 8))) (= ?x110 (_ bv2 8)))))
 (let (($x174 (and (and (and (and $x112 (= ?x114 (_ bv2 8))) (= ?x119 (_ bv2 8))) (= ?x168 (_ bv2 8))) (= ?x172 (_ bv2 8)))))
 (let (($x92 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x177 (=> $x92 (or false (or false $x174)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x93 (or $x9 $x177)))
 (let ((?x141 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x148 (= (bvand ?x141 (_ bv4294967292 32)) ?x141)))
 (let (($x163 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x141 (bvsub ?x141 (_ bv4 32))) (bvult ?x141 (bvsub ?x141 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x164 (and true $x17)))
 (let (($x21 (and $x17 $x164)))
 (let (($x146 (and (and (and $x164 $x21) $x51) $x163)))
 (let (($x34 (and (and (and $x146 $x148) $x93) $x137)))
 (let ((?x65 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x57 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x65)))
 (let (($x6 (or false $x57)))
 (let (($x101 (or $x9 $x6)))
 (let (($x79 (and $x101 $x34)))
 (let (($x178 (= $x79 true)))
 (let (($x62 (= $x178 true)))
 (let (($x28 (= $x62 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x49)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x39 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x76 (=> $x39 $x49)))
 (let (($x24 (= $x39 true)))
 (let (($x13 (and $x24 $x76)))
 (let (($x10 (and $x13 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x12 (and $x20 $x28)))
 (let (($x316 (=> $x12 $x315)))
 (let (($x44 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x18 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x44 (not $x316))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x01600000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfa0064c0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00080000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfa0064c3)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfa0064c0)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x01600001) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xfa0064c3) #x03
    (ite (= x!0 #xfa0064c1) #x03
    (ite (= x!0 #x01600004) #x02
    (ite (= x!0 #x01600005) #x02
    (ite (= x!0 #x01600003) #x02
    (ite (= x!0 #xfa0064c0) #x03
    (ite (= x!0 #x01600006) #x02
    (ite (= x!0 #x01600000) #x02
    (ite (= x!0 #x01600007) #x02
    (ite (= x!0 #x01600002) #x02
      #x00)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xfa0064c1 x!0)
                    (ite (bvule #xfa0064c3 x!0)
                         (ite (bvule #xfa0064c4 x!0) #xfa0064c4 #xfa0064c3)
                         #xfa0064c1)
                    #xfa0064c0)))
    (let ((a!2 (ite (bvule #x01600006 x!0)
                    (ite (bvule #x01600007 x!0)
                         (ite (bvule #xfa0064c0 x!0) a!1 #x01600007)
                         #x01600006)
                    #x01600005)))
    (let ((a!3 (ite (bvule #x01600003 x!0)
                    (ite (bvule #x01600004 x!0)
                         (ite (bvule #x01600005 x!0) a!2 #x01600004)
                         #x01600003)
                    #x01600002)))
      (ite (bvule #x01600000 x!0)
           (ite (bvule #x01600001 x!0)
                (ite (bvule #x01600002 x!0) a!3 #x01600001)
                #x01600000)
           #x00000000)))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!11!13 (k!12 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xd0554e00)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!14))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x190eb0a0)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x190eb0a3)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x190eb0a0)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x7ffffffe x!0)
                    (ite (bvule #x7fffffff x!0)
                         (ite (bvule #x80000000 x!0) #x80000000 #x7fffffff)
                         #x7ffffffe)
                    #x7ffffffd)))
    (let ((a!2 (ite (bvule #x7ffffffb x!0)
                    (ite (bvule #x7ffffffc x!0)
                         (ite (bvule #x7ffffffd x!0) a!1 #x7ffffffc)
                         #x7ffffffb)
                    #x7ffffffa)))
    (let ((a!3 (ite (bvule #x190eb0a4 x!0)
                    (ite (bvule #x7ffffff9 x!0)
                         (ite (bvule #x7ffffffa x!0) a!2 #x7ffffff9)
                         #x190eb0a4)
                    #x190eb0a3)))
      (ite (bvule #x190eb0a0 x!0)
           (ite (bvule #x190eb0a1 x!0)
                (ite (bvule #x190eb0a3 x!0) a!3 #x190eb0a1)
                #x190eb0a0)
           #x00000000)))))
  (define-fun k!13!16 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x02
    (ite (= x!0 #x190eb0a0) #x03
    (ite (= x!0 #x7ffffffe) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7ffffffa) #x02
    (ite (= x!0 #x7ffffffd) #x02
    (ite (= x!0 #x190eb0a1) #x03
    (ite (= x!0 #x190eb0a3) #x03
    (ite (= x!0 #x7fffffff) #x02
    (ite (= x!0 #x7ffffff9) #x02
    (ite (= x!0 #x80000000) #x02
    (ite (= x!0 #x7ffffffc) #x02
      #x01)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!13!16 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000004) #xf2
    (ite (= x!0 #x00000007) #xff
      #x00)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x180 (= false true)))
 (let (($x181 (= $x180 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x82 (concat ?x136 (concat ?x134 ?x147)))))
 (let (($x128 (= input.dst.llvm-%val ?x142)))
 (let ((?x29 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x29)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x50 $x166)))
 (let (($x133 (and $x155 $x143)))
 (let (($x153 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x153 $x133)))
 (let (($x84 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x127 (and (and (and $x85 $x84) $x145) $x128)))
 (let (($x90 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (and $x90 $x127)))
 (let ((?x173 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x120 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x113 (and (and (and (and true (= ?x96 (_ bv2 8))) (= ?x100 (_ bv2 8))) (= ?x106 (_ bv2 8))) (= ?x111 (_ bv2 8)))))
 (let (($x175 (and (and (and (and $x113 (= ?x115 (_ bv2 8))) (= ?x120 (_ bv2 8))) (= ?x86 (_ bv2 8))) (= ?x173 (_ bv2 8)))))
 (let (($x93 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x46 (=> $x93 (or false (or false $x175)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x94 (or $x9 $x46)))
 (let ((?x139 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x140 (= (bvand ?x139 (_ bv4294967292 32)) ?x139)))
 (let (($x159 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x139 (bvsub ?x139 (_ bv4 32))) (bvult ?x139 (bvsub ?x139 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x164 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x21 (and true $x164)))
 (let (($x67 (and $x164 $x21)))
 (let (($x160 (and (and (and $x21 $x67) $x51) $x159)))
 (let (($x79 (and (and (and $x160 $x140) $x94) $x126)))
 (let ((?x57 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x6 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x57)))
 (let (($x101 (or false $x6)))
 (let (($x58 (or $x9 $x101)))
 (let (($x178 (and $x58 $x79)))
 (let (($x62 (= $x178 true)))
 (let (($x28 (= $x62 true)))
 (let (($x12 (= $x28 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 false)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x60 (= false false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x60)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x64 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x40 (=> $x64 $x60)))
 (let (($x14 (= $x64 true)))
 (let (($x11 (and $x14 $x40)))
 (let (($x10 (and $x11 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x179 (and $x20 $x12)))
 (let (($x182 (=> $x179 $x181)))
 (let (($x13 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x13 (not $x182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x180 (= false true)))
 (let (($x181 (= $x180 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x82 (concat ?x136 (concat ?x134 ?x147)))))
 (let (($x128 (= input.dst.llvm-%val ?x142)))
 (let ((?x29 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x29)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x50 $x166)))
 (let (($x133 (and $x155 $x143)))
 (let (($x153 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x153 $x133)))
 (let (($x84 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x130 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x130)))))
 (let (($x127 (and (and (and $x85 $x84) $x145) $x128)))
 (let (($x90 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (and $x90 $x127)))
 (let ((?x173 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x86 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x120 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x111 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x106 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x113 (and (and (and (and true (= ?x96 (_ bv2 8))) (= ?x100 (_ bv2 8))) (= ?x106 (_ bv2 8))) (= ?x111 (_ bv2 8)))))
 (let (($x175 (and (and (and (and $x113 (= ?x115 (_ bv2 8))) (= ?x120 (_ bv2 8))) (= ?x86 (_ bv2 8))) (= ?x173 (_ bv2 8)))))
 (let (($x93 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x46 (=> $x93 (or false (or false $x175)))))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x94 (or $x9 $x46)))
 (let ((?x139 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x140 (= (bvand ?x139 (_ bv4294967292 32)) ?x139)))
 (let (($x159 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x139 (bvsub ?x139 (_ bv4 32))) (bvult ?x139 (bvsub ?x139 (_ bv4 32))))))
 (let (($x51 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x15 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x164 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x15) (bvult input.dst.llvm-%call.Lentry%2%d ?x15))))
 (let (($x21 (and true $x164)))
 (let (($x67 (and $x164 $x21)))
 (let (($x160 (and (and (and $x21 $x67) $x51) $x159)))
 (let (($x79 (and (and (and $x160 $x140) $x94) $x126)))
 (let ((?x57 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x6 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x57)))
 (let (($x101 (or false $x6)))
 (let (($x58 (or $x9 $x101)))
 (let (($x178 (and $x58 $x79)))
 (let (($x62 (= $x178 true)))
 (let (($x28 (= $x62 true)))
 (let (($x12 (= $x28 true)))
 (let (($x55 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x23 (and $x55 false)))
 (let (($x36 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x43 (=> $x36 $x23)))
 (let (($x83 (= $x36 false)))
 (let (($x60 (= false false)))
 (let (($x69 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x41 (=> $x69 $x60)))
 (let (($x63 (= $x69 true)))
 (let (($x52 (and $x63 $x41)))
 (let (($x48 (and $x52 $x83)))
 (let (($x71 (and $x48 $x43)))
 (let (($x61 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x72 (and $x61 $x71)))
 (let (($x73 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x45 (=> $x73 $x72)))
 (let (($x22 (= $x73 false)))
 (let (($x64 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x40 (=> $x64 $x60)))
 (let (($x14 (= $x64 true)))
 (let (($x11 (and $x14 $x40)))
 (let (($x10 (and $x11 $x22)))
 (let (($x20 (and $x10 $x45)))
 (let (($x179 (and $x20 $x12)))
 (let (($x182 (=> $x179 $x181)))
 (let (($x13 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x39 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x39) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x13 (not $x182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3a4007fa)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa2c7699c)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa2c7699f)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa2c7699c)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3a4007fc) #x02
    (ite (= x!0 #xa2c7699c) #x03
    (ite (= x!0 #x3a4007ff) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x3a4007fb) #x02
    (ite (= x!0 #x3a4007fe) #x02
    (ite (= x!0 #xa2c7699d) #x03
    (ite (= x!0 #xa2c7699f) #x03
    (ite (= x!0 #x3a400800) #x02
    (ite (= x!0 #x3a4007fa) #x02
    (ite (= x!0 #x3a400801) #x02
    (ite (= x!0 #x3a4007fd) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xa2c7699d x!0)
                    (ite (bvule #xa2c7699f x!0)
                         (ite (bvule #xa2c769a0 x!0) #xa2c769a0 #xa2c7699f)
                         #xa2c7699d)
                    #xa2c7699c)))
    (let ((a!2 (ite (bvule #x3a400800 x!0)
                    (ite (bvule #x3a400801 x!0)
                         (ite (bvule #xa2c7699c x!0) a!1 #x3a400801)
                         #x3a400800)
                    #x3a4007ff)))
    (let ((a!3 (ite (bvule #x3a4007fd x!0)
                    (ite (bvule #x3a4007fe x!0)
                         (ite (bvule #x3a4007ff x!0) a!2 #x3a4007fe)
                         #x3a4007fd)
                    #x3a4007fc)))
      (ite (bvule #x3a4007fa x!0)
           (ite (bvule #x3a4007fb x!0)
                (ite (bvule #x3a4007fc x!0) a!3 #x3a4007fb)
                #x3a4007fa)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x380a4000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000001) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x04000004) #x02
    (ite (= x!0 #x04000005) #x02
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x04000003) #x02
    (ite (= x!0 #x04000006) #x02
    (ite (= x!0 #x04000000) #x02
    (ite (= x!0 #x04000007) #x02
    (ite (= x!0 #x04000002) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x04000005 x!0)
                    (ite (bvule #x04000006 x!0)
                         (ite (bvule #x04000007 x!0) #x04000007 #x04000006)
                         #x04000005)
                    #x04000004)))
    (let ((a!2 (ite (bvule #x04000002 x!0)
                    (ite (bvule #x04000003 x!0)
                         (ite (bvule #x04000004 x!0) a!1 #x04000003)
                         #x04000002)
                    #x04000001)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x04000000 x!0)
                         (ite (bvule #x04000001 x!0) a!2 #x04000000)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x88 (= true false)))
 (let (($x96 (= $x88 true)))
 (let ((?x152 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x152)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x139)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x138 $x158)))
 (let (($x160 (and $x161 $x159)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x15 $x160)))
 (let (($x163 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x163)))))
 (let (($x140 (and $x146 $x148)))
 (let (($x137 (= $x140 true)))
 (let (($x156 (= $x137 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x9 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x9)))
 (let (($x6 (= ?x65 input.dst.llvm-%val)))
 (let (($x101 (= $x6 true)))
 (let (($x58 (= $x101 true)))
 (let (($x95 (and $x58 $x35)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x49 (= false false)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x54 $x49)))
 (let (($x69 (= $x54 true)))
 (let (($x41 (and $x69 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x26 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x26 $x43)))
 (let (($x37 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x37 $x71)))
 (let (($x73 (= $x37 false)))
 (let (($x18 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x53 (=> $x18 $x49)))
 (let (($x39 (= $x18 true)))
 (let (($x59 (and $x39 $x53)))
 (let (($x22 (and $x59 $x73)))
 (let (($x45 (and $x22 $x72)))
 (let (($x93 (and $x45 $x95)))
 (let (($x162 (=> $x93 $x96)))
 (let (($x40 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x77 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x64 $x77) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x40 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x88 (= true false)))
 (let (($x96 (= $x88 true)))
 (let ((?x152 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x152)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x139)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x138 $x158)))
 (let (($x160 (and $x161 $x159)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x15 $x160)))
 (let (($x163 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x163)))))
 (let (($x140 (and $x146 $x148)))
 (let (($x137 (= $x140 true)))
 (let (($x156 (= $x137 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x9 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x9)))
 (let (($x6 (= ?x65 input.dst.llvm-%val)))
 (let (($x101 (= $x6 true)))
 (let (($x58 (= $x101 true)))
 (let (($x95 (and $x58 $x35)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x49 (= false false)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x54 $x49)))
 (let (($x69 (= $x54 true)))
 (let (($x41 (and $x69 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x26 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x26 $x43)))
 (let (($x37 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x37 $x71)))
 (let (($x73 (= $x37 false)))
 (let (($x18 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x53 (=> $x18 $x49)))
 (let (($x39 (= $x18 true)))
 (let (($x59 (and $x39 $x53)))
 (let (($x22 (and $x59 $x73)))
 (let (($x45 (and $x22 $x72)))
 (let (($x93 (and $x45 $x95)))
 (let (($x162 (=> $x93 $x96)))
 (let (($x40 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x77 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x64 $x77) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x40 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x88 (= true false)))
 (let (($x96 (= $x88 true)))
 (let ((?x152 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x152)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x139)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x138 $x158)))
 (let (($x160 (and $x161 $x159)))
 (let (($x51 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x51 $x160)))
 (let (($x70 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x140 (and $x15 $x148)))
 (let (($x137 (= $x140 true)))
 (let (($x156 (= $x137 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x9 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x9)))
 (let (($x6 (= ?x65 input.dst.llvm-%val)))
 (let (($x101 (= $x6 true)))
 (let (($x58 (= $x101 true)))
 (let (($x95 (and $x58 $x35)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 false)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x123 (= false false)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x54 $x123)))
 (let (($x69 (= $x54 true)))
 (let (($x41 (and $x69 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x26 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x26 $x43)))
 (let (($x37 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x37 $x71)))
 (let (($x73 (= $x37 false)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x32 (=> $x169 $x123)))
 (let (($x13 (= $x169 true)))
 (let (($x60 (and $x13 $x32)))
 (let (($x22 (and $x60 $x73)))
 (let (($x45 (and $x22 $x72)))
 (let (($x93 (and $x45 $x95)))
 (let (($x162 (=> $x93 $x96)))
 (let (($x59 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x18 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x18) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x59 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x88 (= true false)))
 (let (($x96 (= $x88 true)))
 (let ((?x152 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x152)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x139)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x138 $x158)))
 (let (($x160 (and $x161 $x159)))
 (let (($x51 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x51 $x160)))
 (let (($x70 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x140 (and $x15 $x148)))
 (let (($x137 (= $x140 true)))
 (let (($x156 (= $x137 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x9 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x9)))
 (let (($x6 (= ?x65 input.dst.llvm-%val)))
 (let (($x101 (= $x6 true)))
 (let (($x58 (= $x101 true)))
 (let (($x95 (and $x58 $x35)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 false)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x123 (= false false)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x54 $x123)))
 (let (($x69 (= $x54 true)))
 (let (($x41 (and $x69 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x26 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x26 $x43)))
 (let (($x37 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x37 $x71)))
 (let (($x73 (= $x37 false)))
 (let (($x169 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x32 (=> $x169 $x123)))
 (let (($x13 (= $x169 true)))
 (let (($x60 (and $x13 $x32)))
 (let (($x22 (and $x60 $x73)))
 (let (($x45 (and $x22 $x72)))
 (let (($x93 (and $x45 $x95)))
 (let (($x162 (=> $x93 $x96)))
 (let (($x59 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x18 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x39 $x18) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x59 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe9985c8b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe9985c88)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe9985c8b) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xe9985c88) #x03
    (ite (= x!0 #xe9985c89) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe9985c89 x!0)
                    (ite (bvule #xe9985c8b x!0)
                         (ite (bvule #xe9985c8c x!0) #xe9985c8c #xe9985c8b)
                         #xe9985c89)
                    #xe9985c88)))
      (ite (bvule #xe9985c88 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000005) #x03
      #x00)))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000005 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00000008 x!0) #x00000008 #x00000007)
                         #x00000005)
                    #x00000004)))
      (ite (bvule #x00000004 x!0) a!1 #x00000000)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x178 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x62 (= $x178 true)))
 (let ((?x147 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x147)))
 (let (($x142 (= ?x56 input.dst.llvm-%val)))
 (let (($x128 (= $x142 true)))
 (let (($x127 (= $x128 true)))
 (let ((?x133 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x133)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x166 $x29)))
 (let (($x144 (and $x143 $x145)))
 (let (($x130 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x130 $x144)))
 (let (($x157 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x157)))))
 (let (($x135 (and $x154 $x124)))
 (let (($x82 (= $x135 true)))
 (let (($x167 (= $x82 true)))
 (let (($x136 (= $x167 true)))
 (let ((?x176 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x172 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x99 (_ bv2 8))) (= ?x104 (_ bv2 8))) (= ?x109 (_ bv2 8))) (= ?x114 (_ bv2 8)))))
 (let (($x46 (and (and (and (and $x116 (= ?x118 (_ bv2 8))) (= ?x81 (_ bv2 8))) (= ?x172 (_ bv2 8))) (= ?x176 (_ bv2 8)))))
 (let (($x92 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x91 (=> $x92 (or false (or false $x46)))))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x88 (or $x47 $x91)))
 (let ((?x139 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x35 (= (bvand ?x139 (_ bv4294967292 32)) ?x139)))
 (let (($x160 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x139 (bvsub ?x139 (_ bv4 32))) (bvult ?x139 (bvsub ?x139 (_ bv4 32))))))
 (let (($x138 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x67 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x33 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x67) (bvult input.dst.llvm-%call.Lentry%2%d ?x67))))
 (let (($x146 (and true $x33)))
 (let (($x15 (and $x33 $x146)))
 (let (($x137 (and (and (and $x146 $x15) $x138) $x160)))
 (let (($x7 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (and (and (and $x7 $x137) $x35) $x88)))
 (let ((?x57 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x6 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x57)))
 (let (($x101 (or false $x6)))
 (let (($x58 (or $x47 $x101)))
 (let (($x87 (and $x58 $x74)))
 (let (($x89 (= $x87 true)))
 (let (($x121 (= $x89 true)))
 (let (($x125 (= $x121 true)))
 (let (($x149 (and $x125 $x136)))
 (let (($x126 (and $x149 $x127)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x73 (= false false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x73)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x24 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x44 (=> $x24 $x73)))
 (let (($x77 (= $x24 true)))
 (let (($x76 (and $x77 $x44)))
 (let (($x39 (and $x76 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x79 (and $x45 $x126)))
 (let (($x28 (=> $x79 $x62)))
 (let (($x54 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x123 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x64 $x123) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x54 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x178 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x62 (= $x178 true)))
 (let ((?x147 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x147)))
 (let (($x142 (= ?x56 input.dst.llvm-%val)))
 (let (($x128 (= $x142 true)))
 (let (($x127 (= $x128 true)))
 (let ((?x133 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x133)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x166 $x29)))
 (let (($x144 (and $x143 $x145)))
 (let (($x130 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x130 $x144)))
 (let (($x157 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x157)))))
 (let (($x135 (and $x154 $x124)))
 (let (($x82 (= $x135 true)))
 (let (($x167 (= $x82 true)))
 (let (($x136 (= $x167 true)))
 (let ((?x176 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x172 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x99 (_ bv2 8))) (= ?x104 (_ bv2 8))) (= ?x109 (_ bv2 8))) (= ?x114 (_ bv2 8)))))
 (let (($x46 (and (and (and (and $x116 (= ?x118 (_ bv2 8))) (= ?x81 (_ bv2 8))) (= ?x172 (_ bv2 8))) (= ?x176 (_ bv2 8)))))
 (let (($x92 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x91 (=> $x92 (or false (or false $x46)))))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x88 (or $x47 $x91)))
 (let ((?x139 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x35 (= (bvand ?x139 (_ bv4294967292 32)) ?x139)))
 (let (($x160 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x139 (bvsub ?x139 (_ bv4 32))) (bvult ?x139 (bvsub ?x139 (_ bv4 32))))))
 (let (($x138 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x67 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x33 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x67) (bvult input.dst.llvm-%call.Lentry%2%d ?x67))))
 (let (($x146 (and true $x33)))
 (let (($x15 (and $x33 $x146)))
 (let (($x137 (and (and (and $x146 $x15) $x138) $x160)))
 (let (($x7 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (and (and (and $x7 $x137) $x35) $x88)))
 (let ((?x57 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x6 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x57)))
 (let (($x101 (or false $x6)))
 (let (($x58 (or $x47 $x101)))
 (let (($x87 (and $x58 $x74)))
 (let (($x89 (= $x87 true)))
 (let (($x121 (= $x89 true)))
 (let (($x125 (= $x121 true)))
 (let (($x149 (and $x125 $x136)))
 (let (($x126 (and $x149 $x127)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x73 (= false false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x73)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x24 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x44 (=> $x24 $x73)))
 (let (($x77 (= $x24 true)))
 (let (($x76 (and $x77 $x44)))
 (let (($x39 (and $x76 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x79 (and $x45 $x126)))
 (let (($x28 (=> $x79 $x62)))
 (let (($x54 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x123 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x64 $x123) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x54 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xcc180000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00e12fd4)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00e12fd7)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00e12fd4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xcc180005 x!0)
                    (ite (bvule #xcc180006 x!0)
                         (ite (bvule #xcc180007 x!0) #xcc180007 #xcc180006)
                         #xcc180005)
                    #xcc180004)))
    (let ((a!2 (ite (bvule #xcc180002 x!0)
                    (ite (bvule #xcc180003 x!0)
                         (ite (bvule #xcc180004 x!0) a!1 #xcc180003)
                         #xcc180002)
                    #xcc180001)))
    (let ((a!3 (ite (bvule #x00e12fd8 x!0)
                    (ite (bvule #xcc180000 x!0)
                         (ite (bvule #xcc180001 x!0) a!2 #xcc180000)
                         #x00e12fd8)
                    #x00e12fd7)))
      (ite (bvule #x00e12fd4 x!0)
           (ite (bvule #x00e12fd5 x!0)
                (ite (bvule #x00e12fd7 x!0) a!3 #x00e12fd5)
                #x00e12fd4)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xcc180002) #x02
    (ite (= x!0 #x00e12fd4) #x03
    (ite (= x!0 #xcc180005) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xcc180001) #x02
    (ite (= x!0 #xcc180004) #x02
    (ite (= x!0 #x00e12fd5) #x03
    (ite (= x!0 #x00e12fd7) #x03
    (ite (= x!0 #xcc180006) #x02
    (ite (= x!0 #xcc180000) #x02
    (ite (= x!0 #xcc180007) #x02
    (ite (= x!0 #xcc180003) #x02
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xb0220000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000201) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000204) #x02
    (ite (= x!0 #x00000205) #x02
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000203) #x02
    (ite (= x!0 #x00000206) #x02
    (ite (= x!0 #x00000200) #x02
    (ite (= x!0 #x00000207) #x02
    (ite (= x!0 #x00000202) #x02
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000205 x!0)
                    (ite (bvule #x00000206 x!0)
                         (ite (bvule #x00000207 x!0) #x00000207 #x00000206)
                         #x00000205)
                    #x00000204)))
    (let ((a!2 (ite (bvule #x00000202 x!0)
                    (ite (bvule #x00000203 x!0)
                         (ite (bvule #x00000204 x!0) a!1 #x00000203)
                         #x00000202)
                    #x00000201)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000200 x!0)
                         (ite (bvule #x00000201 x!0) a!2 #x00000200)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x28 (= $x62 true)))
 (let ((?x56 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x56)))
 (let (($x128 (= ?x151 input.dst.llvm-%val)))
 (let (($x127 (= $x128 true)))
 (let (($x126 (= $x127 true)))
 (let ((?x145 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x145)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x155 $x143)))
 (let (($x124 (and $x133 $x144)))
 (let (($x50 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x50 $x124)))
 (let (($x153 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x153)))))
 (let (($x82 (and $x166 $x135)))
 (let (($x167 (= $x82 true)))
 (let (($x136 (= $x167 true)))
 (let (($x149 (= $x136 true)))
 (let ((?x176 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x172 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x93 (_ bv2 8))) (= ?x104 (_ bv2 8))) (= ?x109 (_ bv2 8))) (= ?x114 (_ bv2 8)))))
 (let (($x46 (and (and (and (and $x116 (= ?x118 (_ bv2 8))) (= ?x81 (_ bv2 8))) (= ?x172 (_ bv2 8))) (= ?x176 (_ bv2 8)))))
 (let (($x91 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x88 (=> $x91 (or false (or false $x46)))))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x162 (or $x47 $x88)))
 (let ((?x141 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x35 (= (bvand ?x141 (_ bv4294967292 32)) ?x141)))
 (let (($x159 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x141 (bvsub ?x141 (_ bv4 32))) (bvult ?x141 (bvsub ?x141 (_ bv4 32))))))
 (let (($x138 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x67 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x146 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x67) (bvult input.dst.llvm-%call.Lentry%2%d ?x67))))
 (let (($x15 (and true $x146)))
 (let (($x148 (and $x146 $x15)))
 (let (($x96 (and (and (and $x15 $x148) $x138) $x159)))
 (let (($x75 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x87 (and (and (and $x75 $x96) $x35) $x162)))
 (let ((?x6 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x101 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x6)))
 (let (($x58 (or false $x101)))
 (let (($x164 (or $x47 $x58)))
 (let (($x89 (and $x164 $x87)))
 (let (($x121 (= $x89 true)))
 (let (($x125 (= $x121 true)))
 (let (($x131 (= $x125 true)))
 (let (($x134 (and $x131 $x149)))
 (let (($x79 (and $x134 $x126)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 false)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x53 (= false false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x53)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x49 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x13 (=> $x49 $x53)))
 (let (($x69 (= $x49 true)))
 (let (($x11 (and $x69 $x13)))
 (let (($x39 (and $x11 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x178 (and $x45 $x79)))
 (let (($x12 (=> $x178 $x28)))
 (let (($x76 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x77 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x76 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%val)))
 (let (($x28 (= $x62 true)))
 (let ((?x56 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x56)))
 (let (($x128 (= ?x151 input.dst.llvm-%val)))
 (let (($x127 (= $x128 true)))
 (let (($x126 (= $x127 true)))
 (let ((?x145 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x145)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x155 $x143)))
 (let (($x124 (and $x133 $x144)))
 (let (($x50 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x50 $x124)))
 (let (($x153 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x153)))))
 (let (($x82 (and $x166 $x135)))
 (let (($x167 (= $x82 true)))
 (let (($x136 (= $x167 true)))
 (let (($x149 (= $x136 true)))
 (let ((?x176 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x172 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x118 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x114 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x109 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x116 (and (and (and (and true (= ?x93 (_ bv2 8))) (= ?x104 (_ bv2 8))) (= ?x109 (_ bv2 8))) (= ?x114 (_ bv2 8)))))
 (let (($x46 (and (and (and (and $x116 (= ?x118 (_ bv2 8))) (= ?x81 (_ bv2 8))) (= ?x172 (_ bv2 8))) (= ?x176 (_ bv2 8)))))
 (let (($x91 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x88 (=> $x91 (or false (or false $x46)))))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x162 (or $x47 $x88)))
 (let ((?x141 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x35 (= (bvand ?x141 (_ bv4294967292 32)) ?x141)))
 (let (($x159 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x141 (bvsub ?x141 (_ bv4 32))) (bvult ?x141 (bvsub ?x141 (_ bv4 32))))))
 (let (($x138 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x67 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x146 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x67) (bvult input.dst.llvm-%call.Lentry%2%d ?x67))))
 (let (($x15 (and true $x146)))
 (let (($x148 (and $x146 $x15)))
 (let (($x96 (and (and (and $x15 $x148) $x138) $x159)))
 (let (($x75 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x87 (and (and (and $x75 $x96) $x35) $x162)))
 (let ((?x6 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x101 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x6)))
 (let (($x58 (or false $x101)))
 (let (($x164 (or $x47 $x58)))
 (let (($x89 (and $x164 $x87)))
 (let (($x121 (= $x89 true)))
 (let (($x125 (= $x121 true)))
 (let (($x131 (= $x125 true)))
 (let (($x134 (and $x131 $x149)))
 (let (($x79 (and $x134 $x126)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 false)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x53 (= false false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x53)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x49 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x13 (=> $x49 $x53)))
 (let (($x69 (= $x49 true)))
 (let (($x11 (and $x69 $x13)))
 (let (($x39 (and $x11 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x178 (and $x45 $x79)))
 (let (($x12 (=> $x178 $x28)))
 (let (($x76 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x24 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x77 $x24) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x76 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xcc180000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00e12fd4)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00e12fd7)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00e12fd4)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xcc180005 x!0)
                    (ite (bvule #xcc180006 x!0)
                         (ite (bvule #xcc180007 x!0) #xcc180007 #xcc180006)
                         #xcc180005)
                    #xcc180004)))
    (let ((a!2 (ite (bvule #xcc180002 x!0)
                    (ite (bvule #xcc180003 x!0)
                         (ite (bvule #xcc180004 x!0) a!1 #xcc180003)
                         #xcc180002)
                    #xcc180001)))
    (let ((a!3 (ite (bvule #x00e12fd8 x!0)
                    (ite (bvule #xcc180000 x!0)
                         (ite (bvule #xcc180001 x!0) a!2 #xcc180000)
                         #x00e12fd8)
                    #x00e12fd7)))
      (ite (bvule #x00e12fd4 x!0)
           (ite (bvule #x00e12fd5 x!0)
                (ite (bvule #x00e12fd7 x!0) a!3 #x00e12fd5)
                #x00e12fd4)
           #x00000000)))))
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xcc180002) #x02
    (ite (= x!0 #x00e12fd4) #x03
    (ite (= x!0 #xcc180005) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xcc180001) #x02
    (ite (= x!0 #xcc180004) #x02
    (ite (= x!0 #x00e12fd5) #x03
    (ite (= x!0 #x00e12fd7) #x03
    (ite (= x!0 #xcc180006) #x02
    (ite (= x!0 #xcc180000) #x02
    (ite (= x!0 #xcc180007) #x02
    (ite (= x!0 #xcc180003) #x02
      #x00)))))))))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xb0220000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000201) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00000004) #x03
    (ite (= x!0 #x00000204) #x02
    (ite (= x!0 #x00000205) #x02
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000005) #x03
    (ite (= x!0 #x00000203) #x02
    (ite (= x!0 #x00000206) #x02
    (ite (= x!0 #x00000200) #x02
    (ite (= x!0 #x00000207) #x02
    (ite (= x!0 #x00000202) #x02
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000205 x!0)
                    (ite (bvule #x00000206 x!0)
                         (ite (bvule #x00000207 x!0) #x00000207 #x00000206)
                         #x00000205)
                    #x00000204)))
    (let ((a!2 (ite (bvule #x00000202 x!0)
                    (ite (bvule #x00000203 x!0)
                         (ite (bvule #x00000204 x!0) a!1 #x00000203)
                         #x00000202)
                    #x00000201)))
    (let ((a!3 (ite (bvule #x00000008 x!0)
                    (ite (bvule #x00000200 x!0)
                         (ite (bvule #x00000201 x!0) a!2 #x00000200)
                         #x00000008)
                    #x00000007)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000005 x!0)
                (ite (bvule #x00000007 x!0) a!3 #x00000005)
                #x00000004)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x28 (= false true)))
 (let (($x12 (= $x28 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x147 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x56 (=> $x147 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x172 (or $x92 $x56)))
 (let ((?x116 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x116 (_ bv4294967292 32)) ?x116)))
 (let (($x122 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x116 (bvsub ?x116 (_ bv4 32))) (bvult ?x116 (bvsub ?x116 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x110 (and true $x109)))
 (let (($x111 (and $x109 $x110)))
 (let (($x168 (and (and (and $x110 $x111) $x114) $x122)))
 (let (($x103 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x142 (and (and (and $x103 $x168) $x150) $x172)))
 (let ((?x99 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x93 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x99)))
 (let (($x95 (or false $x93)))
 (let (($x100 (or $x92 $x95)))
 (let (($x128 (and $x100 $x142)))
 (let (($x127 (= $x128 true)))
 (let (($x126 (= $x127 true)))
 (let (($x79 (= $x126 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x163 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x163 $x152)))
 (let (($x15 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x15)))))
 (let (($x96 (and $x51 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x178 (and $x74 $x79)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x37 (= false false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x37)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x42 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x32 (=> $x42 $x37)))
 (let (($x18 (= $x42 true)))
 (let (($x44 (and $x18 $x32)))
 (let (($x39 (and $x44 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x62 (and $x45 $x178)))
 (let (($x179 (=> $x62 $x12)))
 (let (($x11 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x69 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x11 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x28 (= false true)))
 (let (($x12 (= $x28 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x147 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x56 (=> $x147 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x172 (or $x92 $x56)))
 (let ((?x116 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x116 (_ bv4294967292 32)) ?x116)))
 (let (($x122 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x116 (bvsub ?x116 (_ bv4 32))) (bvult ?x116 (bvsub ?x116 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x110 (and true $x109)))
 (let (($x111 (and $x109 $x110)))
 (let (($x168 (and (and (and $x110 $x111) $x114) $x122)))
 (let (($x103 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x142 (and (and (and $x103 $x168) $x150) $x172)))
 (let ((?x99 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x93 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x99)))
 (let (($x95 (or false $x93)))
 (let (($x100 (or $x92 $x95)))
 (let (($x128 (and $x100 $x142)))
 (let (($x127 (= $x128 true)))
 (let (($x126 (= $x127 true)))
 (let (($x79 (= $x126 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x163 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x163 $x152)))
 (let (($x15 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x15)))))
 (let (($x96 (and $x51 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x178 (and $x74 $x79)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x37 (= false false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x37)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x42 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x32 (=> $x42 $x37)))
 (let (($x18 (= $x42 true)))
 (let (($x44 (and $x18 $x32)))
 (let (($x39 (and $x44 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x62 (and $x45 $x178)))
 (let (($x179 (=> $x62 $x12)))
 (let (($x11 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x69 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x11 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xbca7fffc)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x01000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xbca7fffd) #x02
    (ite (= x!0 #x01000003) #x03
    (ite (= x!0 #x01000001) #x03
    (ite (= x!0 #xbca80000) #x02
    (ite (= x!0 #xbca80001) #x02
    (ite (= x!0 #xbca7ffff) #x02
    (ite (= x!0 #x01000000) #x03
    (ite (= x!0 #xbca7fffc) #x02
    (ite (= x!0 #xbca80002) #x02
    (ite (= x!0 #xbca80003) #x02
    (ite (= x!0 #xbca7fffe) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xbca80001 x!0)
                    (ite (bvule #xbca80002 x!0)
                         (ite (bvule #xbca80003 x!0) #xbca80003 #xbca80002)
                         #xbca80001)
                    #xbca80000)))
    (let ((a!2 (ite (bvule #xbca7fffe x!0)
                    (ite (bvule #xbca7ffff x!0)
                         (ite (bvule #xbca80000 x!0) a!1 #xbca7ffff)
                         #xbca7fffe)
                    #xbca7fffd)))
    (let ((a!3 (ite (bvule #x01000004 x!0)
                    (ite (bvule #xbca7fffc x!0)
                         (ite (bvule #xbca7fffd x!0) a!2 #xbca7fffc)
                         #x01000004)
                    #x01000003)))
      (ite (bvule #x01000000 x!0)
           (ite (bvule #x01000001 x!0)
                (ite (bvule #x01000003 x!0) a!3 #x01000001)
                #x01000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xbffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1bbebfc8)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3f000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1bbebfcb)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1bbebfc8)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3f000002) #x02
    (ite (= x!0 #x1bbebfc8) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x3f000005) #x02
    (ite (= x!0 #x3f000001) #x02
    (ite (= x!0 #x3f000004) #x02
    (ite (= x!0 #x1bbebfc9) #x03
    (ite (= x!0 #x1bbebfcb) #x03
    (ite (= x!0 #x3f000006) #x02
    (ite (= x!0 #x3f000000) #x02
    (ite (= x!0 #x3f000007) #x02
    (ite (= x!0 #x3f000003) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x3f000005 x!0)
                    (ite (bvule #x3f000006 x!0)
                         (ite (bvule #x3f000007 x!0) #x3f000007 #x3f000006)
                         #x3f000005)
                    #x3f000004)))
    (let ((a!2 (ite (bvule #x3f000002 x!0)
                    (ite (bvule #x3f000003 x!0)
                         (ite (bvule #x3f000004 x!0) a!1 #x3f000003)
                         #x3f000002)
                    #x3f000001)))
    (let ((a!3 (ite (bvule #x1bbebfcc x!0)
                    (ite (bvule #x3f000000 x!0)
                         (ite (bvule #x3f000001 x!0) a!2 #x3f000000)
                         #x1bbebfcc)
                    #x1bbebfcb)))
      (ite (bvule #x1bbebfc8 x!0)
           (ite (bvule #x1bbebfc9 x!0)
                (ite (bvule #x1bbebfcb x!0) a!3 #x1bbebfc9)
                #x1bbebfc8)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x183 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (=> $x183 false)))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x65 (ite $x9 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x65 (_ bv1 32))))
 (let (($x66 (= $x183 $x184)))
 (let (($x64 (= false false)))
 (let (($x179 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x181 (=> $x179 $x64)))
 (let (($x98 (= ?x65 (_ bv0 32))))
 (let (($x180 (= $x179 $x98)))
 (let (($x182 (and $x180 $x181)))
 (let (($x185 (and $x182 $x66)))
 (let (($x195 (and $x185 $x193)))
 (let (($x197 (= $x195 true)))
 (let (($x199 (= $x197 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x56 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x172 (=> $x56 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x171 (or $x92 $x172)))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x115 (_ bv4294967292 32)) ?x115)))
 (let (($x120 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x115 (bvsub ?x115 (_ bv4 32))) (bvult ?x115 (bvsub ?x115 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x110 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x111 (and true $x110)))
 (let (($x165 (and $x110 $x111)))
 (let (($x173 (and (and (and $x111 $x165) $x114) $x120)))
 (let (($x106 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x128 (and (and (and $x106 $x173) $x150) $x171)))
 (let ((?x93 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x95 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x93)))
 (let (($x100 (or false $x95)))
 (let (($x102 (or $x92 $x100)))
 (let (($x127 (and $x102 $x128)))
 (let (($x126 (= $x127 true)))
 (let (($x79 (= $x126 true)))
 (let (($x178 (= $x79 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x17 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x17 $x152)))
 (let (($x148 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x148)))))
 (let (($x96 (and $x163 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x62 (and $x74 $x178)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x64)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x25 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x26 (=> $x25 $x64)))
 (let (($x123 (= $x25 true)))
 (let (($x13 (and $x123 $x26)))
 (let (($x39 (and $x13 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x28 (and $x45 $x62)))
 (let (($x201 (=> $x28 $x199)))
 (let (($x44 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x42 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x18 $x42) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x44 (not $x201)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x183 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (=> $x183 false)))
 (let (($x9 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x65 (ite $x9 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x65 (_ bv1 32))))
 (let (($x66 (= $x183 $x184)))
 (let (($x64 (= false false)))
 (let (($x179 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x181 (=> $x179 $x64)))
 (let (($x98 (= ?x65 (_ bv0 32))))
 (let (($x180 (= $x179 $x98)))
 (let (($x182 (and $x180 $x181)))
 (let (($x185 (and $x182 $x66)))
 (let (($x195 (and $x185 $x193)))
 (let (($x197 (= $x195 true)))
 (let (($x199 (= $x197 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x56 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x172 (=> $x56 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x171 (or $x92 $x172)))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x115 (_ bv4294967292 32)) ?x115)))
 (let (($x120 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x115 (bvsub ?x115 (_ bv4 32))) (bvult ?x115 (bvsub ?x115 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x110 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x111 (and true $x110)))
 (let (($x165 (and $x110 $x111)))
 (let (($x173 (and (and (and $x111 $x165) $x114) $x120)))
 (let (($x106 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x128 (and (and (and $x106 $x173) $x150) $x171)))
 (let ((?x93 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x95 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x93)))
 (let (($x100 (or false $x95)))
 (let (($x102 (or $x92 $x100)))
 (let (($x127 (and $x102 $x128)))
 (let (($x126 (= $x127 true)))
 (let (($x79 (= $x126 true)))
 (let (($x178 (= $x79 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x17 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x17 $x152)))
 (let (($x148 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x148)))))
 (let (($x96 (and $x163 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x62 (and $x74 $x178)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x64)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x25 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x26 (=> $x25 $x64)))
 (let (($x123 (= $x25 true)))
 (let (($x13 (and $x123 $x26)))
 (let (($x39 (and $x13 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x28 (and $x45 $x62)))
 (let (($x201 (=> $x28 $x199)))
 (let (($x44 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x42 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x18 $x42) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x44 (not $x201)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xa0000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc3238f9c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x5f378000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc3238f9f)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc3238f9c)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x5f378002) #x02
    (ite (= x!0 #xc3238f9c) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x5f378005) #x02
    (ite (= x!0 #x5f378001) #x02
    (ite (= x!0 #x5f378004) #x02
    (ite (= x!0 #xc3238f9d) #x03
    (ite (= x!0 #xc3238f9f) #x03
    (ite (= x!0 #x5f378006) #x02
    (ite (= x!0 #x5f378000) #x02
    (ite (= x!0 #x5f378007) #x02
    (ite (= x!0 #x5f378003) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xc3238f9d x!0)
                    (ite (bvule #xc3238f9f x!0)
                         (ite (bvule #xc3238fa0 x!0) #xc3238fa0 #xc3238f9f)
                         #xc3238f9d)
                    #xc3238f9c)))
    (let ((a!2 (ite (bvule #x5f378006 x!0)
                    (ite (bvule #x5f378007 x!0)
                         (ite (bvule #xc3238f9c x!0) a!1 #x5f378007)
                         #x5f378006)
                    #x5f378005)))
    (let ((a!3 (ite (bvule #x5f378003 x!0)
                    (ite (bvule #x5f378004 x!0)
                         (ite (bvule #x5f378005 x!0) a!2 #x5f378004)
                         #x5f378003)
                    #x5f378002)))
      (ite (bvule #x5f378000 x!0)
           (ite (bvule #x5f378001 x!0)
                (ite (bvule #x5f378002 x!0) a!3 #x5f378001)
                #x5f378000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x29601050)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x700c0000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00001280)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x29601053)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x29601050)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x700c0001) #x02
    (ite (= x!0 #x29601053) #x03
    (ite (= x!0 #x29601051) #x03
    (ite (= x!0 #x700c0004) #x02
    (ite (= x!0 #x700c0005) #x02
    (ite (= x!0 #x700c0003) #x02
    (ite (= x!0 #x29601050) #x03
    (ite (= x!0 #x700c0000) #x02
    (ite (= x!0 #x700c0006) #x02
    (ite (= x!0 #x700c0007) #x02
    (ite (= x!0 #x700c0002) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x700c0005 x!0)
                    (ite (bvule #x700c0006 x!0)
                         (ite (bvule #x700c0007 x!0) #x700c0007 #x700c0006)
                         #x700c0005)
                    #x700c0004)))
    (let ((a!2 (ite (bvule #x700c0002 x!0)
                    (ite (bvule #x700c0003 x!0)
                         (ite (bvule #x700c0004 x!0) a!1 #x700c0003)
                         #x700c0002)
                    #x700c0001)))
    (let ((a!3 (ite (bvule #x29601054 x!0)
                    (ite (bvule #x700c0000 x!0)
                         (ite (bvule #x700c0001 x!0) a!2 #x700c0000)
                         #x29601054)
                    #x29601053)))
      (ite (bvule #x29601050 x!0)
           (ite (bvule #x29601051 x!0)
                (ite (bvule #x29601053 x!0) a!3 #x29601051)
                #x29601050)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x91 (concat ?x210 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x187 (concat ?x191 (concat ?x27 ?x91))))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x187)))
 (let (($x192 (and $x188 false)))
 (let (($x184 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x212 (=> $x184 $x192)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x98 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x98 (_ bv1 32))))
 (let (($x185 (= $x184 $x66)))
 (let (($x77 (= false false)))
 (let (($x9 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x182 (=> $x9 $x77)))
 (let (($x180 (= ?x98 (_ bv0 32))))
 (let (($x181 (= $x9 $x180)))
 (let (($x183 (and $x181 $x182)))
 (let (($x193 (and $x183 $x185)))
 (let (($x213 (and $x193 $x212)))
 (let (($x214 (= $x213 true)))
 (let (($x215 (= $x214 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x172 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x171 (=> $x172 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x151 (or $x92 $x171)))
 (let ((?x81 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x81 (_ bv4294967292 32)) ?x81)))
 (let (($x119 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x81 (bvsub ?x81 (_ bv4 32))) (bvult ?x81 (bvsub ?x81 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x165 (and true $x111)))
 (let (($x122 (and $x111 $x165)))
 (let (($x174 (and (and (and $x165 $x122) $x114) $x119)))
 (let (($x107 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (and (and (and $x107 $x174) $x150) $x151)))
 (let ((?x95 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x100 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x95)))
 (let (($x102 (or false $x100)))
 (let (($x103 (or $x92 $x102)))
 (let (($x126 (and $x103 $x127)))
 (let (($x79 (= $x126 true)))
 (let (($x178 (= $x79 true)))
 (let (($x62 (= $x178 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x75 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x75 $x152)))
 (let (($x160 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x160)))))
 (let (($x96 (and $x17 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x28 (and $x74 $x62)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x77)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x73 (=> $x54 $x77)))
 (let (($x24 (= $x54 true)))
 (let (($x32 (and $x24 $x73)))
 (let (($x39 (and $x32 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x12 (and $x45 $x28)))
 (let (($x216 (=> $x12 $x215)))
 (let (($x13 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x25 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x123 $x25) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x13 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x91 (concat ?x210 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x187 (concat ?x191 (concat ?x27 ?x91))))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x187)))
 (let (($x192 (and $x188 false)))
 (let (($x184 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x212 (=> $x184 $x192)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x98 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x98 (_ bv1 32))))
 (let (($x185 (= $x184 $x66)))
 (let (($x77 (= false false)))
 (let (($x9 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x182 (=> $x9 $x77)))
 (let (($x180 (= ?x98 (_ bv0 32))))
 (let (($x181 (= $x9 $x180)))
 (let (($x183 (and $x181 $x182)))
 (let (($x193 (and $x183 $x185)))
 (let (($x213 (and $x193 $x212)))
 (let (($x214 (= $x213 true)))
 (let (($x215 (= $x214 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x172 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x171 (=> $x172 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x151 (or $x92 $x171)))
 (let ((?x81 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x81 (_ bv4294967292 32)) ?x81)))
 (let (($x119 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x81 (bvsub ?x81 (_ bv4 32))) (bvult ?x81 (bvsub ?x81 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x165 (and true $x111)))
 (let (($x122 (and $x111 $x165)))
 (let (($x174 (and (and (and $x165 $x122) $x114) $x119)))
 (let (($x107 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (and (and (and $x107 $x174) $x150) $x151)))
 (let ((?x95 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x100 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x95)))
 (let (($x102 (or false $x100)))
 (let (($x103 (or $x92 $x102)))
 (let (($x126 (and $x103 $x127)))
 (let (($x79 (= $x126 true)))
 (let (($x178 (= $x79 true)))
 (let (($x62 (= $x178 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x75 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x75 $x152)))
 (let (($x160 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x160)))))
 (let (($x96 (and $x17 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x28 (and $x74 $x62)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x77)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x54 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x73 (=> $x54 $x77)))
 (let (($x24 (= $x54 true)))
 (let (($x32 (and $x24 $x73)))
 (let (($x39 (and $x32 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x12 (and $x45 $x28)))
 (let (($x216 (=> $x12 $x215)))
 (let (($x13 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x25 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x123 $x25) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x13 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x3ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xea5e4960)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7ffffff9)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xea5e4963)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xea5e4960)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7ffffffb) #x02
    (ite (= x!0 #xea5e4960) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7ffffffe) #x02
    (ite (= x!0 #x7ffffffa) #x02
    (ite (= x!0 #x7ffffffd) #x02
    (ite (= x!0 #xea5e4961) #x03
    (ite (= x!0 #xea5e4963) #x03
    (ite (= x!0 #x7fffffff) #x02
    (ite (= x!0 #x7ffffff9) #x02
    (ite (= x!0 #x80000000) #x02
    (ite (= x!0 #x7ffffffc) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xea5e4961 x!0)
                    (ite (bvule #xea5e4963 x!0)
                         (ite (bvule #xea5e4964 x!0) #xea5e4964 #xea5e4963)
                         #xea5e4961)
                    #xea5e4960)))
    (let ((a!2 (ite (bvule #x7fffffff x!0)
                    (ite (bvule #x80000000 x!0)
                         (ite (bvule #xea5e4960 x!0) a!1 #x80000000)
                         #x7fffffff)
                    #x7ffffffe)))
    (let ((a!3 (ite (bvule #x7ffffffc x!0)
                    (ite (bvule #x7ffffffd x!0)
                         (ite (bvule #x7ffffffe x!0) a!2 #x7ffffffd)
                         #x7ffffffc)
                    #x7ffffffb)))
      (ite (bvule #x7ffffff9 x!0)
           (ite (bvule #x7ffffffa x!0)
                (ite (bvule #x7ffffffb x!0) a!3 #x7ffffffa)
                #x7ffffff9)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00100680)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00100683)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00100680)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00400001) #x02
    (ite (= x!0 #x00100683) #x03
    (ite (= x!0 #x00100681) #x03
    (ite (= x!0 #x00400004) #x02
    (ite (= x!0 #x00400005) #x02
    (ite (= x!0 #x00400003) #x02
    (ite (= x!0 #x00100680) #x03
    (ite (= x!0 #x00400000) #x02
    (ite (= x!0 #x00400006) #x02
    (ite (= x!0 #x00400007) #x02
    (ite (= x!0 #x00400002) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00400005 x!0)
                    (ite (bvule #x00400006 x!0)
                         (ite (bvule #x00400007 x!0) #x00400007 #x00400006)
                         #x00400005)
                    #x00400004)))
    (let ((a!2 (ite (bvule #x00400002 x!0)
                    (ite (bvule #x00400003 x!0)
                         (ite (bvule #x00400004 x!0) a!1 #x00400003)
                         #x00400002)
                    #x00400001)))
    (let ((a!3 (ite (bvule #x00100684 x!0)
                    (ite (bvule #x00400000 x!0)
                         (ite (bvule #x00400001 x!0) a!2 #x00400000)
                         #x00100684)
                    #x00100683)))
      (ite (bvule #x00100680 x!0)
           (ite (bvule #x00100681 x!0)
                (ite (bvule #x00100683 x!0) a!3 #x00100681)
                #x00100680)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x78 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x232 (=> $x78 false)))
 (let ((?x215 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x99))))
 (let (($x204 (= (_ bv0 32) ?x186)))
 (let ((?x206 (ite $x204 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x206 (_ bv1 32))))
 (let (($x230 (= $x78 $x194)))
 (let (($x69 (= false false)))
 (let (($x214 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x221 (=> $x214 $x69)))
 (let (($x219 (= ?x206 (_ bv0 32))))
 (let (($x220 (= $x214 $x219)))
 (let (($x222 (and $x220 $x221)))
 (let (($x231 (and $x222 $x230)))
 (let (($x233 (and $x231 $x232)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x210 (concat ?x208 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x192 (concat ?x188 (concat ?x91 ?x210))))
 (let (($x212 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x192)))
 (let (($x234 (and $x212 $x233)))
 (let (($x66 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x235 (=> $x66 $x234)))
 (let (($x98 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x180 (ite $x98 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x180 (_ bv1 32))))
 (let (($x193 (= $x66 $x185)))
 (let (($x65 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x183 (=> $x65 $x69)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x65 $x181)))
 (let (($x184 (and $x182 $x183)))
 (let (($x195 (and $x184 $x193)))
 (let (($x236 (and $x195 $x235)))
 (let (($x196 (= $x236 true)))
 (let (($x227 (= $x196 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x171 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x151 (=> $x171 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x142 (or $x92 $x151)))
 (let ((?x168 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x168 (_ bv4294967292 32)) ?x168)))
 (let (($x117 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x168 (bvsub ?x168 (_ bv4 32))) (bvult ?x168 (bvsub ?x168 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x165 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x122 (and true $x165)))
 (let (($x120 (and $x165 $x122)))
 (let (($x175 (and (and (and $x122 $x120) $x114) $x117)))
 (let (($x108 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (and (and (and $x108 $x175) $x150) $x142)))
 (let ((?x100 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x102 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x100)))
 (let (($x103 (or false $x102)))
 (let (($x106 (or $x92 $x103)))
 (let (($x79 (and $x106 $x126)))
 (let (($x178 (= $x79 true)))
 (let (($x62 (= $x178 true)))
 (let (($x28 (= $x62 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x67 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x67 $x152)))
 (let (($x51 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x51)))))
 (let (($x96 (and $x75 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x12 (and $x74 $x28)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x69)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x76 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x53 (=> $x76 $x69)))
 (let (($x49 (= $x76 true)))
 (let (($x26 (and $x49 $x53)))
 (let (($x39 (and $x26 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x179 (and $x45 $x12)))
 (let (($x228 (=> $x179 $x227)))
 (let (($x32 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x54 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x54) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x32 (not $x228))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x78 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x232 (=> $x78 false)))
 (let ((?x215 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x99))))
 (let (($x204 (= (_ bv0 32) ?x186)))
 (let ((?x206 (ite $x204 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x206 (_ bv1 32))))
 (let (($x230 (= $x78 $x194)))
 (let (($x69 (= false false)))
 (let (($x214 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x221 (=> $x214 $x69)))
 (let (($x219 (= ?x206 (_ bv0 32))))
 (let (($x220 (= $x214 $x219)))
 (let (($x222 (and $x220 $x221)))
 (let (($x231 (and $x222 $x230)))
 (let (($x233 (and $x231 $x232)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x210 (concat ?x208 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x192 (concat ?x188 (concat ?x91 ?x210))))
 (let (($x212 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x192)))
 (let (($x234 (and $x212 $x233)))
 (let (($x66 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x235 (=> $x66 $x234)))
 (let (($x98 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x180 (ite $x98 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x180 (_ bv1 32))))
 (let (($x193 (= $x66 $x185)))
 (let (($x65 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x183 (=> $x65 $x69)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x65 $x181)))
 (let (($x184 (and $x182 $x183)))
 (let (($x195 (and $x184 $x193)))
 (let (($x236 (and $x195 $x235)))
 (let (($x196 (= $x236 true)))
 (let (($x227 (= $x196 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x171 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x151 (=> $x171 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x142 (or $x92 $x151)))
 (let ((?x168 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x168 (_ bv4294967292 32)) ?x168)))
 (let (($x117 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x168 (bvsub ?x168 (_ bv4 32))) (bvult ?x168 (bvsub ?x168 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x165 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x122 (and true $x165)))
 (let (($x120 (and $x165 $x122)))
 (let (($x175 (and (and (and $x122 $x120) $x114) $x117)))
 (let (($x108 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (and (and (and $x108 $x175) $x150) $x142)))
 (let ((?x100 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x102 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x100)))
 (let (($x103 (or false $x102)))
 (let (($x106 (or $x92 $x103)))
 (let (($x79 (and $x106 $x126)))
 (let (($x178 (= $x79 true)))
 (let (($x62 (= $x178 true)))
 (let (($x28 (= $x62 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x67 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x67 $x152)))
 (let (($x51 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x51)))))
 (let (($x96 (and $x75 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x12 (and $x74 $x28)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x69)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x76 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x53 (=> $x76 $x69)))
 (let (($x49 (= $x76 true)))
 (let (($x26 (and $x49 $x53)))
 (let (($x39 (and $x26 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x179 (and $x45 $x12)))
 (let (($x228 (=> $x179 $x227)))
 (let (($x32 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x54 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x24 $x54) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x32 (not $x228))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000f8a0)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x067ffffa)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xc00b2000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xefefefef)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000f8a3)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000f8a0)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x067ffffb) #x02
    (ite (= x!0 #x0000f8a3) #x03
    (ite (= x!0 #x0000f8a1) #x03
    (ite (= x!0 #x067ffffe) #x02
    (ite (= x!0 #x067fffff) #x02
    (ite (= x!0 #x067ffffd) #x02
    (ite (= x!0 #x0000f8a0) #x03
    (ite (= x!0 #x067ffffa) #x02
    (ite (= x!0 #x06800000) #x02
    (ite (= x!0 #x06800001) #x02
    (ite (= x!0 #x067ffffc) #x02
      #x01)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x067fffff x!0)
                    (ite (bvule #x06800000 x!0)
                         (ite (bvule #x06800001 x!0) #x06800001 #x06800000)
                         #x067fffff)
                    #x067ffffe)))
    (let ((a!2 (ite (bvule #x067ffffc x!0)
                    (ite (bvule #x067ffffd x!0)
                         (ite (bvule #x067ffffe x!0) a!1 #x067ffffd)
                         #x067ffffc)
                    #x067ffffb)))
    (let ((a!3 (ite (bvule #x0000f8a4 x!0)
                    (ite (bvule #x067ffffa x!0)
                         (ite (bvule #x067ffffb x!0) a!2 #x067ffffa)
                         #x0000f8a4)
                    #x0000f8a3)))
      (ite (bvule #x0000f8a0 x!0)
           (ite (bvule #x0000f8a1 x!0)
                (ite (bvule #x0000f8a3 x!0) a!3 #x0000f8a1)
                #x0000f8a0)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x10)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x51000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3dec7438)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x98000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3dec743b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3dec7438)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x98000005 x!0)
                    (ite (bvule #x98000006 x!0)
                         (ite (bvule #x98000007 x!0) #x98000007 #x98000006)
                         #x98000005)
                    #x98000004)))
    (let ((a!2 (ite (bvule #x98000002 x!0)
                    (ite (bvule #x98000003 x!0)
                         (ite (bvule #x98000004 x!0) a!1 #x98000003)
                         #x98000002)
                    #x98000001)))
    (let ((a!3 (ite (bvule #x3dec743c x!0)
                    (ite (bvule #x98000000 x!0)
                         (ite (bvule #x98000001 x!0) a!2 #x98000000)
                         #x3dec743c)
                    #x3dec743b)))
      (ite (bvule #x3dec7438 x!0)
           (ite (bvule #x3dec7439 x!0)
                (ite (bvule #x3dec743b x!0) a!3 #x3dec7439)
                #x3dec7438)
           #x00000000)))))
  (define-fun k!9!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x98000002) #x02
    (ite (= x!0 #x3dec7438) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x98000005) #x02
    (ite (= x!0 #x98000001) #x02
    (ite (= x!0 #x98000004) #x02
    (ite (= x!0 #x3dec7439) #x03
    (ite (= x!0 #x3dec743b) #x03
    (ite (= x!0 #x98000006) #x02
    (ite (= x!0 #x98000000) #x02
    (ite (= x!0 #x98000007) #x02
    (ite (= x!0 #x98000003) #x02
      #x01)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!9!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x203 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x218))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x227))))
 (let (($x226 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x223)))
 (let (($x229 (and $x226 false)))
 (let (($x230 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x243 (=> $x230 $x229)))
 (let (($x219 (= (_ bv0 32) ?x206)))
 (let ((?x220 (ite $x219 (_ bv0 32) (_ bv1 32))))
 (let (($x231 (bvuge ?x220 (_ bv1 32))))
 (let (($x232 (= $x230 $x231)))
 (let (($x18 (= false false)))
 (let (($x205 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x78 (=> $x205 $x18)))
 (let (($x221 (= ?x220 (_ bv0 32))))
 (let (($x222 (= $x205 $x221)))
 (let (($x194 (and $x222 $x78)))
 (let (($x233 (and $x194 $x232)))
 (let (($x244 (and $x233 $x243)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x208 (concat ?x27 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x213 (concat ?x212 (concat ?x210 ?x208))))
 (let (($x214 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x213)))
 (let (($x245 (and $x214 $x244)))
 (let (($x185 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x246 (=> $x185 $x245)))
 (let (($x180 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x181 (ite $x180 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x181 (_ bv1 32))))
 (let (($x195 (= $x185 $x193)))
 (let (($x98 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x98 $x18)))
 (let (($x182 (= ?x181 (_ bv0 32))))
 (let (($x183 (= $x98 $x182)))
 (let (($x66 (and $x183 $x184)))
 (let (($x197 (and $x66 $x195)))
 (let (($x247 (and $x197 $x246)))
 (let (($x248 (= $x247 true)))
 (let (($x249 (= $x248 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x151 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x142 (=> $x151 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x128 (or $x92 $x142)))
 (let ((?x173 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x173 (_ bv4294967292 32)) ?x173)))
 (let (($x118 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x173 (bvsub ?x173 (_ bv4 32))) (bvult ?x173 (bvsub ?x173 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x122 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x120 (and true $x122)))
 (let (($x119 (and $x122 $x120)))
 (let (($x147 (and (and (and $x120 $x119) $x114) $x118)))
 (let (($x109 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x79 (and (and (and $x109 $x147) $x150) $x128)))
 (let ((?x102 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x103 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x102)))
 (let (($x106 (or false $x103)))
 (let (($x107 (or $x92 $x106)))
 (let (($x178 (and $x107 $x79)))
 (let (($x62 (= $x178 true)))
 (let (($x28 (= $x62 true)))
 (let (($x12 (= $x28 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x33 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x33 $x152)))
 (let (($x163 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x163)))))
 (let (($x96 (and $x67 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x179 (and $x74 $x12)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x18)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x11 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x37 (=> $x11 $x18)))
 (let (($x42 (= $x11 true)))
 (let (($x73 (and $x42 $x37)))
 (let (($x39 (and $x73 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x9 (and $x45 $x179)))
 (let (($x237 (=> $x9 $x249)))
 (let (($x26 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x76 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x76) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x26 (not $x237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x203 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x218))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x227))))
 (let (($x226 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x223)))
 (let (($x229 (and $x226 false)))
 (let (($x230 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x243 (=> $x230 $x229)))
 (let (($x219 (= (_ bv0 32) ?x206)))
 (let ((?x220 (ite $x219 (_ bv0 32) (_ bv1 32))))
 (let (($x231 (bvuge ?x220 (_ bv1 32))))
 (let (($x232 (= $x230 $x231)))
 (let (($x18 (= false false)))
 (let (($x205 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x78 (=> $x205 $x18)))
 (let (($x221 (= ?x220 (_ bv0 32))))
 (let (($x222 (= $x205 $x221)))
 (let (($x194 (and $x222 $x78)))
 (let (($x233 (and $x194 $x232)))
 (let (($x244 (and $x233 $x243)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x208 (concat ?x27 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x213 (concat ?x212 (concat ?x210 ?x208))))
 (let (($x214 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x213)))
 (let (($x245 (and $x214 $x244)))
 (let (($x185 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x246 (=> $x185 $x245)))
 (let (($x180 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x181 (ite $x180 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x181 (_ bv1 32))))
 (let (($x195 (= $x185 $x193)))
 (let (($x98 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x184 (=> $x98 $x18)))
 (let (($x182 (= ?x181 (_ bv0 32))))
 (let (($x183 (= $x98 $x182)))
 (let (($x66 (and $x183 $x184)))
 (let (($x197 (and $x66 $x195)))
 (let (($x247 (and $x197 $x246)))
 (let (($x248 (= $x247 true)))
 (let (($x249 (= $x248 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x151 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x142 (=> $x151 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x128 (or $x92 $x142)))
 (let ((?x173 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x173 (_ bv4294967292 32)) ?x173)))
 (let (($x118 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x173 (bvsub ?x173 (_ bv4 32))) (bvult ?x173 (bvsub ?x173 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x122 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x120 (and true $x122)))
 (let (($x119 (and $x122 $x120)))
 (let (($x147 (and (and (and $x120 $x119) $x114) $x118)))
 (let (($x109 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x79 (and (and (and $x109 $x147) $x150) $x128)))
 (let ((?x102 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x103 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x102)))
 (let (($x106 (or false $x103)))
 (let (($x107 (or $x92 $x106)))
 (let (($x178 (and $x107 $x79)))
 (let (($x62 (= $x178 true)))
 (let (($x28 (= $x62 true)))
 (let (($x12 (= $x28 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x33 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x33 $x152)))
 (let (($x163 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x163)))))
 (let (($x96 (and $x67 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x179 (and $x74 $x12)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x18)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x11 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x37 (=> $x11 $x18)))
 (let (($x42 (= $x11 true)))
 (let (($x73 (and $x42 $x37)))
 (let (($x39 (and $x73 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x9 (and $x45 $x179)))
 (let (($x237 (=> $x9 $x249)))
 (let (($x26 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x76 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x49 $x76) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x26 (not $x237))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000f8a0)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x067ffffa)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xc00b2000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xefefefef)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000f8a3)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000f8a0)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x067ffffb) #x02
    (ite (= x!0 #x0000f8a3) #x03
    (ite (= x!0 #x0000f8a1) #x03
    (ite (= x!0 #x067ffffe) #x02
    (ite (= x!0 #x067fffff) #x02
    (ite (= x!0 #x067ffffd) #x02
    (ite (= x!0 #x0000f8a0) #x03
    (ite (= x!0 #x067ffffa) #x02
    (ite (= x!0 #x06800000) #x02
    (ite (= x!0 #x06800001) #x02
    (ite (= x!0 #x067ffffc) #x02
      #x01)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x067fffff x!0)
                    (ite (bvule #x06800000 x!0)
                         (ite (bvule #x06800001 x!0) #x06800001 #x06800000)
                         #x067fffff)
                    #x067ffffe)))
    (let ((a!2 (ite (bvule #x067ffffc x!0)
                    (ite (bvule #x067ffffd x!0)
                         (ite (bvule #x067ffffe x!0) a!1 #x067ffffd)
                         #x067ffffc)
                    #x067ffffb)))
    (let ((a!3 (ite (bvule #x0000f8a4 x!0)
                    (ite (bvule #x067ffffa x!0)
                         (ite (bvule #x067ffffb x!0) a!2 #x067ffffa)
                         #x0000f8a4)
                    #x0000f8a3)))
      (ite (bvule #x0000f8a0 x!0)
           (ite (bvule #x0000f8a1 x!0)
                (ite (bvule #x0000f8a3 x!0) a!3 #x0000f8a1)
                #x0000f8a0)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!13 (k!12 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x10)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x51000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3dec7438)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x98000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3dec743b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3dec7438)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x98000005 x!0)
                    (ite (bvule #x98000006 x!0)
                         (ite (bvule #x98000007 x!0) #x98000007 #x98000006)
                         #x98000005)
                    #x98000004)))
    (let ((a!2 (ite (bvule #x98000002 x!0)
                    (ite (bvule #x98000003 x!0)
                         (ite (bvule #x98000004 x!0) a!1 #x98000003)
                         #x98000002)
                    #x98000001)))
    (let ((a!3 (ite (bvule #x3dec743c x!0)
                    (ite (bvule #x98000000 x!0)
                         (ite (bvule #x98000001 x!0) a!2 #x98000000)
                         #x3dec743c)
                    #x3dec743b)))
      (ite (bvule #x3dec7438 x!0)
           (ite (bvule #x3dec7439 x!0)
                (ite (bvule #x3dec743b x!0) a!3 #x3dec7439)
                #x3dec7438)
           #x00000000)))))
  (define-fun k!9!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x98000002) #x02
    (ite (= x!0 #x3dec7438) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x98000005) #x02
    (ite (= x!0 #x98000001) #x02
    (ite (= x!0 #x98000004) #x02
    (ite (= x!0 #x3dec7439) #x03
    (ite (= x!0 #x3dec743b) #x03
    (ite (= x!0 #x98000006) #x02
    (ite (= x!0 #x98000000) #x02
    (ite (= x!0 #x98000007) #x02
    (ite (= x!0 #x98000003) #x02
      #x01)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!9!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x254 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x265 (=> $x254 false)))
 (let ((?x204 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x217))))
 (let ((?x246 (bvadd ?x220 (_ bv4 32))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x237))))
 (let (($x242 (= (_ bv0 32) ?x241)))
 (let ((?x8 (ite $x242 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x8 (_ bv1 32))))
 (let (($x256 (= $x254 $x255)))
 (let (($x123 (= false false)))
 (let (($x245 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x252 (=> $x245 $x123)))
 (let (($x250 (= ?x8 (_ bv0 32))))
 (let (($x251 (= $x245 $x250)))
 (let (($x253 (and $x251 $x252)))
 (let (($x257 (and $x253 $x256)))
 (let (($x266 (and $x257 $x265)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x196))))
 (let (($x243 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x229)))
 (let (($x267 (and $x243 $x266)))
 (let (($x232 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x16 (=> $x232 $x267)))
 (let (($x221 (= (_ bv0 32) ?x220)))
 (let ((?x222 (ite $x221 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x222 (_ bv1 32))))
 (let (($x234 (= $x232 $x233)))
 (let (($x186 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x230 (=> $x186 $x123)))
 (let (($x78 (= ?x222 (_ bv0 32))))
 (let (($x194 (= $x186 $x78)))
 (let (($x231 (and $x194 $x230)))
 (let (($x93 (and $x231 $x234)))
 (let (($x198 (and $x93 $x16)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x27 (concat ?x91 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x215 (concat ?x214 (concat ?x208 ?x27))))
 (let (($x205 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x215)))
 (let (($x268 (and $x205 $x198)))
 (let (($x193 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x262 (=> $x193 $x268)))
 (let (($x181 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x182 (ite $x181 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x182 (_ bv1 32))))
 (let (($x197 (= $x193 $x195)))
 (let (($x180 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x66 (=> $x180 $x123)))
 (let (($x183 (= ?x182 (_ bv0 32))))
 (let (($x184 (= $x180 $x183)))
 (let (($x185 (and $x184 $x66)))
 (let (($x190 (and $x185 $x197)))
 (let (($x260 (and $x190 $x262)))
 (let (($x261 (= $x260 true)))
 (let (($x263 (= $x261 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x142 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x128 (=> $x142 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (or $x92 $x128)))
 (let ((?x174 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x116 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x174 (bvsub ?x174 (_ bv4 32))) (bvult ?x174 (bvsub ?x174 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x120 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x119 (and true $x120)))
 (let (($x117 (and $x120 $x119)))
 (let (($x56 (and (and (and $x119 $x117) $x114) $x116)))
 (let (($x110 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x178 (and (and (and $x110 $x56) $x150) $x127)))
 (let ((?x103 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x106 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x103)))
 (let (($x107 (or false $x106)))
 (let (($x108 (or $x92 $x107)))
 (let (($x62 (and $x108 $x178)))
 (let (($x28 (= $x62 true)))
 (let (($x12 (= $x28 true)))
 (let (($x179 (= $x12 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x146 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x146 $x152)))
 (let (($x17 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x17)))))
 (let (($x96 (and $x33 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x9 (and $x74 $x179)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x123)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x44 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x64 (=> $x44 $x123)))
 (let (($x25 (= $x44 true)))
 (let (($x53 (and $x25 $x64)))
 (let (($x39 (and $x53 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x65 (and $x45 $x9)))
 (let (($x258 (=> $x65 $x263)))
 (let (($x73 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x11 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x42 $x11) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x73 (not $x258))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x254 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x265 (=> $x254 false)))
 (let ((?x204 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x217))))
 (let ((?x246 (bvadd ?x220 (_ bv4 32))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x237))))
 (let (($x242 (= (_ bv0 32) ?x241)))
 (let ((?x8 (ite $x242 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x8 (_ bv1 32))))
 (let (($x256 (= $x254 $x255)))
 (let (($x123 (= false false)))
 (let (($x245 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x252 (=> $x245 $x123)))
 (let (($x250 (= ?x8 (_ bv0 32))))
 (let (($x251 (= $x245 $x250)))
 (let (($x253 (and $x251 $x252)))
 (let (($x257 (and $x253 $x256)))
 (let (($x266 (and $x257 $x265)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x196))))
 (let (($x243 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x229)))
 (let (($x267 (and $x243 $x266)))
 (let (($x232 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x16 (=> $x232 $x267)))
 (let (($x221 (= (_ bv0 32) ?x220)))
 (let ((?x222 (ite $x221 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x222 (_ bv1 32))))
 (let (($x234 (= $x232 $x233)))
 (let (($x186 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x230 (=> $x186 $x123)))
 (let (($x78 (= ?x222 (_ bv0 32))))
 (let (($x194 (= $x186 $x78)))
 (let (($x231 (and $x194 $x230)))
 (let (($x93 (and $x231 $x234)))
 (let (($x198 (and $x93 $x16)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x27 (concat ?x91 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x215 (concat ?x214 (concat ?x208 ?x27))))
 (let (($x205 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x215)))
 (let (($x268 (and $x205 $x198)))
 (let (($x193 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x262 (=> $x193 $x268)))
 (let (($x181 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x182 (ite $x181 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x182 (_ bv1 32))))
 (let (($x197 (= $x193 $x195)))
 (let (($x180 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x66 (=> $x180 $x123)))
 (let (($x183 (= ?x182 (_ bv0 32))))
 (let (($x184 (= $x180 $x183)))
 (let (($x185 (and $x184 $x66)))
 (let (($x190 (and $x185 $x197)))
 (let (($x260 (and $x190 $x262)))
 (let (($x261 (= $x260 true)))
 (let (($x263 (= $x261 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x142 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x128 (=> $x142 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x127 (or $x92 $x128)))
 (let ((?x174 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x174 (_ bv4294967292 32)) ?x174)))
 (let (($x116 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x174 (bvsub ?x174 (_ bv4 32))) (bvult ?x174 (bvsub ?x174 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x120 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x119 (and true $x120)))
 (let (($x117 (and $x120 $x119)))
 (let (($x56 (and (and (and $x119 $x117) $x114) $x116)))
 (let (($x110 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x178 (and (and (and $x110 $x56) $x150) $x127)))
 (let ((?x103 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x106 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x103)))
 (let (($x107 (or false $x106)))
 (let (($x108 (or $x92 $x107)))
 (let (($x62 (and $x108 $x178)))
 (let (($x28 (= $x62 true)))
 (let (($x12 (= $x28 true)))
 (let (($x179 (= $x12 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x146 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x146 $x152)))
 (let (($x17 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x17)))))
 (let (($x96 (and $x33 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x9 (and $x74 $x179)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x123)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x44 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x64 (=> $x44 $x123)))
 (let (($x25 (= $x44 true)))
 (let (($x53 (and $x25 $x64)))
 (let (($x39 (and $x53 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x65 (and $x45 $x9)))
 (let (($x258 (=> $x65 $x263)))
 (let (($x73 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x11 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x42 $x11) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x73 (not $x258))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x16900000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6721a160)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xe0000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #xa1a1a1a1)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xa1a1a1a1)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6721a163)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6721a160)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe0000005 x!0)
                    (ite (bvule #xe0000006 x!0)
                         (ite (bvule #xe0000007 x!0) #xe0000007 #xe0000006)
                         #xe0000005)
                    #xe0000004)))
    (let ((a!2 (ite (bvule #xe0000002 x!0)
                    (ite (bvule #xe0000003 x!0)
                         (ite (bvule #xe0000004 x!0) a!1 #xe0000003)
                         #xe0000002)
                    #xe0000001)))
    (let ((a!3 (ite (bvule #x6721a164 x!0)
                    (ite (bvule #xe0000000 x!0)
                         (ite (bvule #xe0000001 x!0) a!2 #xe0000000)
                         #x6721a164)
                    #x6721a163)))
      (ite (bvule #x6721a160 x!0)
           (ite (bvule #x6721a161 x!0)
                (ite (bvule #x6721a163 x!0) a!3 #x6721a161)
                #x6721a160)
           #x00000000)))))
  (define-fun k!12!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe0000002) #x02
    (ite (= x!0 #x6721a160) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xe0000005) #x02
    (ite (= x!0 #xe0000001) #x02
    (ite (= x!0 #xe0000004) #x02
    (ite (= x!0 #x6721a161) #x03
    (ite (= x!0 #x6721a163) #x03
    (ite (= x!0 #xe0000006) #x02
    (ite (= x!0 #xe0000000) #x02
    (ite (= x!0 #xe0000007) #x02
    (ite (= x!0 #xe0000003) #x02
      #x04)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!15 (k!14 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x16900004) #x01
    (ite (= x!0 #x16900005) #xe0
    (ite (= x!0 #x16900006) #xcd
      #x5e))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa0025420)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x4000007a)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa0025423)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa0025420)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4000007b) #x02
    (ite (= x!0 #xa0025423) #x03
    (ite (= x!0 #xa0025421) #x03
    (ite (= x!0 #x4000007e) #x02
    (ite (= x!0 #x4000007f) #x02
    (ite (= x!0 #x4000007d) #x02
    (ite (= x!0 #xa0025420) #x03
    (ite (= x!0 #x4000007a) #x02
    (ite (= x!0 #x40000080) #x02
    (ite (= x!0 #x40000081) #x02
    (ite (= x!0 #x4000007c) #x02
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xa0025421 x!0)
                    (ite (bvule #xa0025423 x!0)
                         (ite (bvule #xa0025424 x!0) #xa0025424 #xa0025423)
                         #xa0025421)
                    #xa0025420)))
    (let ((a!2 (ite (bvule #x40000080 x!0)
                    (ite (bvule #x40000081 x!0)
                         (ite (bvule #xa0025420 x!0) a!1 #x40000081)
                         #x40000080)
                    #x4000007f)))
    (let ((a!3 (ite (bvule #x4000007d x!0)
                    (ite (bvule #x4000007e x!0)
                         (ite (bvule #x4000007f x!0) a!2 #x4000007e)
                         #x4000007d)
                    #x4000007c)))
      (ite (bvule #x4000007a x!0)
           (ite (bvule #x4000007b x!0)
                (ite (bvule #x4000007c x!0) a!3 #x4000007b)
                #x4000007a)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x219 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem ?x219))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv2 32))) ?x202))))
 (let ((?x240 (bvadd ?x222 (_ bv4 32))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x249))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x262))))
 (let (($x100 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x264)))
 (let (($x212 (and $x100 false)))
 (let (($x256 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x269 (=> $x256 $x212)))
 (let (($x250 (= (_ bv0 32) ?x8)))
 (let ((?x251 (ite $x250 (_ bv0 32) (_ bv1 32))))
 (let (($x257 (bvuge ?x251 (_ bv1 32))))
 (let (($x265 (= $x256 $x257)))
 (let (($x24 (= false false)))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x254 (=> $x188 $x24)))
 (let (($x252 (= ?x251 (_ bv0 32))))
 (let (($x253 (= $x188 $x252)))
 (let (($x255 (and $x253 $x254)))
 (let (($x266 (and $x255 $x265)))
 (let (($x270 (and $x266 $x269)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x236))))
 (let (($x245 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x244)))
 (let (($x271 (and $x245 $x270)))
 (let (($x234 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x279 (=> $x234 $x271)))
 (let (($x78 (= (_ bv0 32) ?x222)))
 (let ((?x194 (ite $x78 (_ bv0 32) (_ bv1 32))))
 (let (($x93 (bvuge ?x194 (_ bv1 32))))
 (let (($x191 (= $x234 $x93)))
 (let (($x206 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x232 (=> $x206 $x24)))
 (let (($x230 (= ?x194 (_ bv0 32))))
 (let (($x231 (= $x206 $x230)))
 (let (($x233 (and $x231 $x232)))
 (let (($x223 (and $x233 $x191)))
 (let (($x280 (and $x223 $x279)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x91 (concat ?x210 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x203 (concat ?x205 (concat ?x27 ?x91))))
 (let (($x186 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x203)))
 (let (($x5 (and $x186 $x280)))
 (let (($x195 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x200 (=> $x195 $x5)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x183 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (bvuge ?x183 (_ bv1 32))))
 (let (($x190 (= $x195 $x197)))
 (let (($x181 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x185 (=> $x181 $x24)))
 (let (($x184 (= ?x183 (_ bv0 32))))
 (let (($x66 (= $x181 $x184)))
 (let (($x193 (and $x66 $x185)))
 (let (($x187 (and $x193 $x190)))
 (let (($x272 (and $x187 $x200)))
 (let (($x275 (= $x272 true)))
 (let (($x277 (= $x275 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x128 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x127 (=> $x128 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (or $x92 $x127)))
 (let ((?x175 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x175 (_ bv4294967292 32)) ?x175)))
 (let (($x115 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x175 (bvsub ?x175 (_ bv4 32))) (bvult ?x175 (bvsub ?x175 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x117 (and true $x119)))
 (let (($x118 (and $x119 $x117)))
 (let (($x172 (and (and (and $x117 $x118) $x114) $x115)))
 (let (($x111 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x62 (and (and (and $x111 $x172) $x150) $x126)))
 (let ((?x106 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x107 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x106)))
 (let (($x108 (or false $x107)))
 (let (($x109 (or $x92 $x108)))
 (let (($x28 (and $x109 $x62)))
 (let (($x12 (= $x28 true)))
 (let (($x179 (= $x12 true)))
 (let (($x9 (= $x179 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x15 $x152)))
 (let (($x75 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x75)))))
 (let (($x96 (and $x146 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x65 (and $x74 $x9)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x24)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x13 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x77 (=> $x13 $x24)))
 (let (($x54 (= $x13 true)))
 (let (($x37 (and $x54 $x77)))
 (let (($x39 (and $x37 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x98 (and $x45 $x65)))
 (let (($x273 (=> $x98 $x277)))
 (let (($x53 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x44 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x25 $x44) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x53 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x219 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem ?x219))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x219 (_ bv2 32))) ?x202))))
 (let ((?x240 (bvadd ?x222 (_ bv4 32))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x249))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x262))))
 (let (($x100 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x264)))
 (let (($x212 (and $x100 false)))
 (let (($x256 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x269 (=> $x256 $x212)))
 (let (($x250 (= (_ bv0 32) ?x8)))
 (let ((?x251 (ite $x250 (_ bv0 32) (_ bv1 32))))
 (let (($x257 (bvuge ?x251 (_ bv1 32))))
 (let (($x265 (= $x256 $x257)))
 (let (($x24 (= false false)))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x254 (=> $x188 $x24)))
 (let (($x252 (= ?x251 (_ bv0 32))))
 (let (($x253 (= $x188 $x252)))
 (let (($x255 (and $x253 $x254)))
 (let (($x266 (and $x255 $x265)))
 (let (($x270 (and $x266 $x269)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x236))))
 (let (($x245 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x244)))
 (let (($x271 (and $x245 $x270)))
 (let (($x234 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x279 (=> $x234 $x271)))
 (let (($x78 (= (_ bv0 32) ?x222)))
 (let ((?x194 (ite $x78 (_ bv0 32) (_ bv1 32))))
 (let (($x93 (bvuge ?x194 (_ bv1 32))))
 (let (($x191 (= $x234 $x93)))
 (let (($x206 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x232 (=> $x206 $x24)))
 (let (($x230 (= ?x194 (_ bv0 32))))
 (let (($x231 (= $x206 $x230)))
 (let (($x233 (and $x231 $x232)))
 (let (($x223 (and $x233 $x191)))
 (let (($x280 (and $x223 $x279)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x91 (concat ?x210 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x203 (concat ?x205 (concat ?x27 ?x91))))
 (let (($x186 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x203)))
 (let (($x5 (and $x186 $x280)))
 (let (($x195 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x200 (=> $x195 $x5)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x183 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (bvuge ?x183 (_ bv1 32))))
 (let (($x190 (= $x195 $x197)))
 (let (($x181 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x185 (=> $x181 $x24)))
 (let (($x184 (= ?x183 (_ bv0 32))))
 (let (($x66 (= $x181 $x184)))
 (let (($x193 (and $x66 $x185)))
 (let (($x187 (and $x193 $x190)))
 (let (($x272 (and $x187 $x200)))
 (let (($x275 (= $x272 true)))
 (let (($x277 (= $x275 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x128 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x127 (=> $x128 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x126 (or $x92 $x127)))
 (let ((?x175 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x175 (_ bv4294967292 32)) ?x175)))
 (let (($x115 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x175 (bvsub ?x175 (_ bv4 32))) (bvult ?x175 (bvsub ?x175 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x117 (and true $x119)))
 (let (($x118 (and $x119 $x117)))
 (let (($x172 (and (and (and $x117 $x118) $x114) $x115)))
 (let (($x111 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x62 (and (and (and $x111 $x172) $x150) $x126)))
 (let ((?x106 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x107 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x106)))
 (let (($x108 (or false $x107)))
 (let (($x109 (or $x92 $x108)))
 (let (($x28 (and $x109 $x62)))
 (let (($x12 (= $x28 true)))
 (let (($x179 (= $x12 true)))
 (let (($x9 (= $x179 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x15 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x15 $x152)))
 (let (($x75 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x75)))))
 (let (($x96 (and $x146 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x65 (and $x74 $x9)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x24)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x13 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x77 (=> $x13 $x24)))
 (let (($x54 (= $x13 true)))
 (let (($x37 (and $x54 $x77)))
 (let (($x39 (and $x37 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x98 (and $x45 $x65)))
 (let (($x273 (=> $x98 $x277)))
 (let (($x53 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x44 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x25 $x44) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x53 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x16900000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6721a160)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xe0000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #xa1a1a1a1)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xa1a1a1a1)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6721a163)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6721a160)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe0000005 x!0)
                    (ite (bvule #xe0000006 x!0)
                         (ite (bvule #xe0000007 x!0) #xe0000007 #xe0000006)
                         #xe0000005)
                    #xe0000004)))
    (let ((a!2 (ite (bvule #xe0000002 x!0)
                    (ite (bvule #xe0000003 x!0)
                         (ite (bvule #xe0000004 x!0) a!1 #xe0000003)
                         #xe0000002)
                    #xe0000001)))
    (let ((a!3 (ite (bvule #x6721a164 x!0)
                    (ite (bvule #xe0000000 x!0)
                         (ite (bvule #xe0000001 x!0) a!2 #xe0000000)
                         #x6721a164)
                    #x6721a163)))
      (ite (bvule #x6721a160 x!0)
           (ite (bvule #x6721a161 x!0)
                (ite (bvule #x6721a163 x!0) a!3 #x6721a161)
                #x6721a160)
           #x00000000)))))
  (define-fun k!12!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe0000002) #x02
    (ite (= x!0 #x6721a160) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xe0000005) #x02
    (ite (= x!0 #xe0000001) #x02
    (ite (= x!0 #xe0000004) #x02
    (ite (= x!0 #x6721a161) #x03
    (ite (= x!0 #x6721a163) #x03
    (ite (= x!0 #xe0000006) #x02
    (ite (= x!0 #xe0000000) #x02
    (ite (= x!0 #xe0000007) #x02
    (ite (= x!0 #xe0000003) #x02
      #x04)))))))))))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!15 (k!14 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x16900004) #x01
    (ite (= x!0 #x16900005) #xe0
    (ite (= x!0 #x16900006) #xcd
      #x5e))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa0025420)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x4000007a)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa0025423)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa0025420)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!10!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4000007b) #x02
    (ite (= x!0 #xa0025423) #x03
    (ite (= x!0 #xa0025421) #x03
    (ite (= x!0 #x4000007e) #x02
    (ite (= x!0 #x4000007f) #x02
    (ite (= x!0 #x4000007d) #x02
    (ite (= x!0 #xa0025420) #x03
    (ite (= x!0 #x4000007a) #x02
    (ite (= x!0 #x40000080) #x02
    (ite (= x!0 #x40000081) #x02
    (ite (= x!0 #x4000007c) #x02
      #x00)))))))))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xa0025421 x!0)
                    (ite (bvule #xa0025423 x!0)
                         (ite (bvule #xa0025424 x!0) #xa0025424 #xa0025423)
                         #xa0025421)
                    #xa0025420)))
    (let ((a!2 (ite (bvule #x40000080 x!0)
                    (ite (bvule #x40000081 x!0)
                         (ite (bvule #xa0025420 x!0) a!1 #x40000081)
                         #x40000080)
                    #x4000007f)))
    (let ((a!3 (ite (bvule #x4000007d x!0)
                    (ite (bvule #x4000007e x!0)
                         (ite (bvule #x4000007f x!0) a!2 #x4000007e)
                         #x4000007d)
                    #x4000007c)))
      (ite (bvule #x4000007a x!0)
           (ite (bvule #x4000007b x!0)
                (ite (bvule #x4000007c x!0) a!3 #x4000007b)
                #x4000007a)
           #x00000000)))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!10!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x285 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x289 (=> $x285 false)))
 (let ((?x221 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x99))))
 (let ((?x242 (bvadd ?x194 (_ bv4 32))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x248))))
 (let ((?x279 (bvadd ?x251 (_ bv4 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv1 32))) (select input.dst.llvm-mem ?x279))))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv2 32))) ?x272))))
 (let (($x214 (= (_ bv0 32) ?x102)))
 (let ((?x278 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x286 (bvuge ?x278 (_ bv1 32))))
 (let (($x287 (= $x285 $x286)))
 (let (($x49 (= false false)))
 (let (($x271 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x283 (=> $x271 $x49)))
 (let (($x281 (= ?x278 (_ bv0 32))))
 (let (($x282 (= $x271 $x281)))
 (let (($x284 (and $x282 $x283)))
 (let (($x288 (and $x284 $x287)))
 (let (($x290 (and $x288 $x289)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x268))))
 (let (($x269 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x212)))
 (let (($x291 (and $x269 $x290)))
 (let (($x265 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x292 (=> $x265 $x291)))
 (let (($x252 (= (_ bv0 32) ?x251)))
 (let ((?x253 (ite $x252 (_ bv0 32) (_ bv1 32))))
 (let (($x266 (bvuge ?x253 (_ bv1 32))))
 (let (($x267 (= $x265 $x266)))
 (let (($x241 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x256 (=> $x241 $x49)))
 (let (($x254 (= ?x253 (_ bv0 32))))
 (let (($x255 (= $x241 $x254)))
 (let (($x257 (and $x255 $x256)))
 (let (($x258 (and $x257 $x267)))
 (let (($x300 (and $x258 $x292)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x224))))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x246)))
 (let (($x301 (and $x188 $x300)))
 (let (($x191 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x297 (=> $x191 $x301)))
 (let (($x230 (= (_ bv0 32) ?x194)))
 (let ((?x231 (ite $x230 (_ bv0 32) (_ bv1 32))))
 (let (($x223 (bvuge ?x231 (_ bv1 32))))
 (let (($x226 (= $x191 $x223)))
 (let (($x220 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x234 (=> $x220 $x49)))
 (let (($x232 (= ?x231 (_ bv0 32))))
 (let (($x233 (= $x220 $x232)))
 (let (($x93 (and $x233 $x234)))
 (let (($x229 (and $x93 $x226)))
 (let (($x298 (and $x229 $x297)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x210 (concat ?x208 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x204 (concat ?x186 (concat ?x91 ?x210))))
 (let (($x206 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x204)))
 (let (($x294 (and $x206 $x298)))
 (let (($x197 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x295 (=> $x197 $x294)))
 (let (($x183 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x184 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x184 (_ bv1 32))))
 (let (($x187 (= $x197 $x190)))
 (let (($x182 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x193 (=> $x182 $x49)))
 (let (($x66 (= ?x184 (_ bv0 32))))
 (let (($x185 (= $x182 $x66)))
 (let (($x195 (and $x185 $x193)))
 (let (($x192 (and $x195 $x187)))
 (let (($x293 (and $x192 $x295)))
 (let (($x296 (= $x293 true)))
 (let (($x299 (= $x296 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x127 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x126 (=> $x127 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x79 (or $x92 $x126)))
 (let ((?x147 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x147 (_ bv4294967292 32)) ?x147)))
 (let (($x81 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x147 (bvsub ?x147 (_ bv4 32))) (bvult ?x147 (bvsub ?x147 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x118 (and true $x117)))
 (let (($x116 (and $x117 $x118)))
 (let (($x171 (and (and (and $x118 $x116) $x114) $x81)))
 (let (($x165 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x28 (and (and (and $x165 $x171) $x150) $x79)))
 (let ((?x107 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x108 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x107)))
 (let (($x109 (or false $x108)))
 (let (($x110 (or $x92 $x109)))
 (let (($x12 (and $x110 $x28)))
 (let (($x179 (= $x12 true)))
 (let (($x9 (= $x179 true)))
 (let (($x65 (= $x9 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x148 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x148 $x152)))
 (let (($x67 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x67)))))
 (let (($x96 (and $x15 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x98 (and $x74 $x65)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x49)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x32 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x69 (=> $x32 $x49)))
 (let (($x76 (= $x32 true)))
 (let (($x64 (and $x76 $x69)))
 (let (($x39 (and $x64 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x180 (and $x45 $x98)))
 (let (($x302 (=> $x180 $x299)))
 (let (($x37 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x13 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x54 $x13) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x37 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x285 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x289 (=> $x285 false)))
 (let ((?x221 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x99))))
 (let ((?x242 (bvadd ?x194 (_ bv4 32))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x248))))
 (let ((?x279 (bvadd ?x251 (_ bv4 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv1 32))) (select input.dst.llvm-mem ?x279))))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x279 (_ bv2 32))) ?x272))))
 (let (($x214 (= (_ bv0 32) ?x102)))
 (let ((?x278 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x286 (bvuge ?x278 (_ bv1 32))))
 (let (($x287 (= $x285 $x286)))
 (let (($x49 (= false false)))
 (let (($x271 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x283 (=> $x271 $x49)))
 (let (($x281 (= ?x278 (_ bv0 32))))
 (let (($x282 (= $x271 $x281)))
 (let (($x284 (and $x282 $x283)))
 (let (($x288 (and $x284 $x287)))
 (let (($x290 (and $x288 $x289)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x268))))
 (let (($x269 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x212)))
 (let (($x291 (and $x269 $x290)))
 (let (($x265 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x292 (=> $x265 $x291)))
 (let (($x252 (= (_ bv0 32) ?x251)))
 (let ((?x253 (ite $x252 (_ bv0 32) (_ bv1 32))))
 (let (($x266 (bvuge ?x253 (_ bv1 32))))
 (let (($x267 (= $x265 $x266)))
 (let (($x241 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x256 (=> $x241 $x49)))
 (let (($x254 (= ?x253 (_ bv0 32))))
 (let (($x255 (= $x241 $x254)))
 (let (($x257 (and $x255 $x256)))
 (let (($x258 (and $x257 $x267)))
 (let (($x300 (and $x258 $x292)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x224))))
 (let (($x188 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x246)))
 (let (($x301 (and $x188 $x300)))
 (let (($x191 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x297 (=> $x191 $x301)))
 (let (($x230 (= (_ bv0 32) ?x194)))
 (let ((?x231 (ite $x230 (_ bv0 32) (_ bv1 32))))
 (let (($x223 (bvuge ?x231 (_ bv1 32))))
 (let (($x226 (= $x191 $x223)))
 (let (($x220 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x234 (=> $x220 $x49)))
 (let (($x232 (= ?x231 (_ bv0 32))))
 (let (($x233 (= $x220 $x232)))
 (let (($x93 (and $x233 $x234)))
 (let (($x229 (and $x93 $x226)))
 (let (($x298 (and $x229 $x297)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x210 (concat ?x208 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x204 (concat ?x186 (concat ?x91 ?x210))))
 (let (($x206 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x204)))
 (let (($x294 (and $x206 $x298)))
 (let (($x197 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x295 (=> $x197 $x294)))
 (let (($x183 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x184 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x184 (_ bv1 32))))
 (let (($x187 (= $x197 $x190)))
 (let (($x182 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x193 (=> $x182 $x49)))
 (let (($x66 (= ?x184 (_ bv0 32))))
 (let (($x185 (= $x182 $x66)))
 (let (($x195 (and $x185 $x193)))
 (let (($x192 (and $x195 $x187)))
 (let (($x293 (and $x192 $x295)))
 (let (($x296 (= $x293 true)))
 (let (($x299 (= $x296 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x127 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x126 (=> $x127 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x79 (or $x92 $x126)))
 (let ((?x147 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x147 (_ bv4294967292 32)) ?x147)))
 (let (($x81 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x147 (bvsub ?x147 (_ bv4 32))) (bvult ?x147 (bvsub ?x147 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x118 (and true $x117)))
 (let (($x116 (and $x117 $x118)))
 (let (($x171 (and (and (and $x118 $x116) $x114) $x81)))
 (let (($x165 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x28 (and (and (and $x165 $x171) $x150) $x79)))
 (let ((?x107 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x108 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x107)))
 (let (($x109 (or false $x108)))
 (let (($x110 (or $x92 $x109)))
 (let (($x12 (and $x110 $x28)))
 (let (($x179 (= $x12 true)))
 (let (($x9 (= $x179 true)))
 (let (($x65 (= $x9 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x148 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x148 $x152)))
 (let (($x67 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x67)))))
 (let (($x96 (and $x15 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x98 (and $x74 $x65)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x49)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x32 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x69 (=> $x32 $x49)))
 (let (($x76 (= $x32 true)))
 (let (($x64 (and $x76 $x69)))
 (let (($x39 (and $x64 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x180 (and $x45 $x98)))
 (let (($x302 (=> $x180 $x299)))
 (let (($x37 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x13 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x54 $x13) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x37 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xae815980)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xeb000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x0008fffc)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xae815983)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xae815980)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xeb000001) #x02
    (ite (= x!0 #xae815983) #x03
    (ite (= x!0 #xae815981) #x03
    (ite (= x!0 #xeb000004) #x02
    (ite (= x!0 #xeb000005) #x02
    (ite (= x!0 #xeb000003) #x02
    (ite (= x!0 #xae815980) #x03
    (ite (= x!0 #xeb000000) #x02
    (ite (= x!0 #xeb000006) #x02
    (ite (= x!0 #xeb000007) #x02
    (ite (= x!0 #xeb000002) #x02
      #x04)))))))))))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xeb000005 x!0)
                    (ite (bvule #xeb000006 x!0)
                         (ite (bvule #xeb000007 x!0) #xeb000007 #xeb000006)
                         #xeb000005)
                    #xeb000004)))
    (let ((a!2 (ite (bvule #xeb000002 x!0)
                    (ite (bvule #xeb000003 x!0)
                         (ite (bvule #xeb000004 x!0) a!1 #xeb000003)
                         #xeb000002)
                    #xeb000001)))
    (let ((a!3 (ite (bvule #xae815984 x!0)
                    (ite (bvule #xeb000000 x!0)
                         (ite (bvule #xeb000001 x!0) a!2 #xeb000000)
                         #xae815984)
                    #xae815983)))
      (ite (bvule #xae815980 x!0)
           (ite (bvule #xae815981 x!0)
                (ite (bvule #xae815983 x!0) a!3 #xae815981)
                #xae815980)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!15 (k!14 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00090001) #x02
    (ite (= x!0 #x00090002) #x10
    (ite (= x!0 #x00090000) #x03
    (ite (= x!0 #x00090003) #x01
      #x80)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xb4601000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!14))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6184dd8)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x25b00000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6184ddb)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6184dd8)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe6184dd9 x!0)
                    (ite (bvule #xe6184ddb x!0)
                         (ite (bvule #xe6184ddc x!0) #xe6184ddc #xe6184ddb)
                         #xe6184dd9)
                    #xe6184dd8)))
    (let ((a!2 (ite (bvule #x25b00006 x!0)
                    (ite (bvule #x25b00007 x!0)
                         (ite (bvule #xe6184dd8 x!0) a!1 #x25b00007)
                         #x25b00006)
                    #x25b00005)))
    (let ((a!3 (ite (bvule #x25b00003 x!0)
                    (ite (bvule #x25b00004 x!0)
                         (ite (bvule #x25b00005 x!0) a!2 #x25b00004)
                         #x25b00003)
                    #x25b00002)))
      (ite (bvule #x25b00000 x!0)
           (ite (bvule #x25b00001 x!0)
                (ite (bvule #x25b00002 x!0) a!3 #x25b00001)
                #x25b00000)
           #x00000000)))))
  (define-fun k!13!16 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x25b00002) #x02
    (ite (= x!0 #xe6184dd8) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x25b00005) #x02
    (ite (= x!0 #x25b00001) #x02
    (ite (= x!0 #x25b00004) #x02
    (ite (= x!0 #xe6184dd9) #x03
    (ite (= x!0 #xe6184ddb) #x03
    (ite (= x!0 #x25b00006) #x02
    (ite (= x!0 #x25b00000) #x02
    (ite (= x!0 #x25b00007) #x02
    (ite (= x!0 #x25b00003) #x02
      #x01)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!13!16 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb4601004) #xf2
    (ite (= x!0 #xff03fff9) #xfe
    (ite (= x!0 #xff03fff6) #xf0
    (ite (= x!0 #xb4601006) #x03
      #xff)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x78 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x218))))
 (let ((?x250 (bvadd ?x231 (_ bv4 32))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x239))))
 (let ((?x274 (bvadd ?x253 (_ bv4 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem ?x274))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv2 32))) ?x200))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x297))))
 (let (($x302 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 ?x299)))
 (let (($x303 (and $x302 false)))
 (let (($x287 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x304 (=> $x287 $x303)))
 (let (($x281 (= (_ bv0 32) ?x278)))
 (let ((?x282 (ite $x281 (_ bv0 32) (_ bv1 32))))
 (let (($x288 (bvuge ?x282 (_ bv1 32))))
 (let (($x289 (= $x287 $x288)))
 (let (($x42 (= false false)))
 (let (($x276 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x285 (=> $x276 $x42)))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let (($x284 (= $x276 $x283)))
 (let (($x286 (and $x284 $x285)))
 (let (($x290 (and $x286 $x289)))
 (let (($x103 (and $x290 $x304)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x198))))
 (let (($x271 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x270)))
 (let (($x205 (and $x271 $x103)))
 (let (($x267 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x305 (=> $x267 $x205)))
 (let (($x254 (= (_ bv0 32) ?x253)))
 (let ((?x255 (ite $x254 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x255 (_ bv1 32))))
 (let (($x259 (= $x267 $x258)))
 (let (($x8 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x265 (=> $x8 $x42)))
 (let (($x256 (= ?x255 (_ bv0 32))))
 (let (($x257 (= $x8 $x256)))
 (let (($x266 (and $x257 $x265)))
 (let (($x264 (and $x266 $x259)))
 (let (($x30 (and $x264 $x305)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x227))))
 (let (($x241 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x240)))
 (let (($x207 (and $x241 $x30)))
 (let (($x226 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x306 (=> $x226 $x207)))
 (let (($x232 (= (_ bv0 32) ?x231)))
 (let ((?x233 (ite $x232 (_ bv0 32) (_ bv1 32))))
 (let (($x229 (bvuge ?x233 (_ bv1 32))))
 (let (($x243 (= $x226 $x229)))
 (let (($x222 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x191 (=> $x222 $x42)))
 (let (($x234 (= ?x233 (_ bv0 32))))
 (let (($x93 (= $x222 $x234)))
 (let (($x223 (and $x93 $x191)))
 (let (($x244 (and $x223 $x243)))
 (let (($x307 (and $x244 $x306)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x208 (concat ?x27 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x219 (concat ?x206 (concat ?x210 ?x208))))
 (let (($x220 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x219)))
 (let (($x308 (and $x220 $x307)))
 (let (($x190 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x309 (=> $x190 $x308)))
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x66 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x66 (_ bv1 32))))
 (let (($x192 (= $x190 $x187)))
 (let (($x183 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x195 (=> $x183 $x42)))
 (let (($x185 (= ?x66 (_ bv0 32))))
 (let (($x193 (= $x183 $x185)))
 (let (($x197 (and $x193 $x195)))
 (let (($x213 (and $x197 $x192)))
 (let (($x310 (and $x213 $x309)))
 (let (($x311 (= $x310 true)))
 (let (($x312 (= $x311 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x126 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x79 (=> $x126 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x178 (or $x92 $x79)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x168 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x116 (and true $x118)))
 (let (($x115 (and $x118 $x116)))
 (let (($x151 (and (and (and $x116 $x115) $x114) $x168)))
 (let (($x122 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x12 (and (and (and $x122 $x151) $x150) $x178)))
 (let ((?x108 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x109 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x108)))
 (let (($x110 (or false $x109)))
 (let (($x111 (or $x92 $x110)))
 (let (($x179 (and $x111 $x12)))
 (let (($x9 (= $x179 true)))
 (let (($x65 (= $x9 true)))
 (let (($x98 (= $x65 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x160 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x160 $x152)))
 (let (($x33 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x33)))))
 (let (($x96 (and $x148 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x180 (and $x74 $x98)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x42)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x26 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x18 (=> $x26 $x42)))
 (let (($x11 (= $x26 true)))
 (let (($x77 (and $x11 $x18)))
 (let (($x39 (and $x77 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x181 (and $x45 $x180)))
 (let (($x313 (=> $x181 $x312)))
 (let (($x64 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x76 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x64 (not $x313))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x78 (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv4 32))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x218))))
 (let ((?x250 (bvadd ?x231 (_ bv4 32))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x239))))
 (let ((?x274 (bvadd ?x253 (_ bv4 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem ?x274))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv2 32))) ?x200))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x297))))
 (let (($x302 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 ?x299)))
 (let (($x303 (and $x302 false)))
 (let (($x287 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x304 (=> $x287 $x303)))
 (let (($x281 (= (_ bv0 32) ?x278)))
 (let ((?x282 (ite $x281 (_ bv0 32) (_ bv1 32))))
 (let (($x288 (bvuge ?x282 (_ bv1 32))))
 (let (($x289 (= $x287 $x288)))
 (let (($x42 (= false false)))
 (let (($x276 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x285 (=> $x276 $x42)))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let (($x284 (= $x276 $x283)))
 (let (($x286 (and $x284 $x285)))
 (let (($x290 (and $x286 $x289)))
 (let (($x103 (and $x290 $x304)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x198))))
 (let (($x271 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 ?x270)))
 (let (($x205 (and $x271 $x103)))
 (let (($x267 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x305 (=> $x267 $x205)))
 (let (($x254 (= (_ bv0 32) ?x253)))
 (let ((?x255 (ite $x254 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x255 (_ bv1 32))))
 (let (($x259 (= $x267 $x258)))
 (let (($x8 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x265 (=> $x8 $x42)))
 (let (($x256 (= ?x255 (_ bv0 32))))
 (let (($x257 (= $x8 $x256)))
 (let (($x266 (and $x257 $x265)))
 (let (($x264 (and $x266 $x259)))
 (let (($x30 (and $x264 $x305)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x227))))
 (let (($x241 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 ?x240)))
 (let (($x207 (and $x241 $x30)))
 (let (($x226 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x306 (=> $x226 $x207)))
 (let (($x232 (= (_ bv0 32) ?x231)))
 (let ((?x233 (ite $x232 (_ bv0 32) (_ bv1 32))))
 (let (($x229 (bvuge ?x233 (_ bv1 32))))
 (let (($x243 (= $x226 $x229)))
 (let (($x222 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x191 (=> $x222 $x42)))
 (let (($x234 (= ?x233 (_ bv0 32))))
 (let (($x93 (= $x222 $x234)))
 (let (($x223 (and $x93 $x191)))
 (let (($x244 (and $x223 $x243)))
 (let (($x307 (and $x244 $x306)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv1 32)))))
 (let ((?x208 (concat ?x27 (select input.dst.llvm-mem input.dst.llvm-%call.Lentry%2%d))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.llvm-%call.Lentry%2%d (_ bv3 32)))))
 (let ((?x219 (concat ?x206 (concat ?x210 ?x208))))
 (let (($x220 (= input.spec-%tmpvar-3.E0%0%d.2.0 ?x219)))
 (let (($x308 (and $x220 $x307)))
 (let (($x190 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x309 (=> $x190 $x308)))
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x66 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x66 (_ bv1 32))))
 (let (($x192 (= $x190 $x187)))
 (let (($x183 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x195 (=> $x183 $x42)))
 (let (($x185 (= ?x66 (_ bv0 32))))
 (let (($x193 (= $x183 $x185)))
 (let (($x197 (and $x193 $x195)))
 (let (($x213 (and $x197 $x192)))
 (let (($x310 (and $x213 $x309)))
 (let (($x311 (= $x310 true)))
 (let (($x312 (= $x311 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x126 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x79 (=> $x126 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x178 (or $x92 $x79)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x168 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x116 (and true $x118)))
 (let (($x115 (and $x118 $x116)))
 (let (($x151 (and (and (and $x116 $x115) $x114) $x168)))
 (let (($x122 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x12 (and (and (and $x122 $x151) $x150) $x178)))
 (let ((?x108 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x109 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x108)))
 (let (($x110 (or false $x109)))
 (let (($x111 (or $x92 $x110)))
 (let (($x179 (and $x111 $x12)))
 (let (($x9 (= $x179 true)))
 (let (($x65 (= $x9 true)))
 (let (($x98 (= $x65 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x160 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x160 $x152)))
 (let (($x33 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x33)))))
 (let (($x96 (and $x148 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x180 (and $x74 $x98)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 true)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x42)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x26 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x18 (=> $x26 $x42)))
 (let (($x11 (= $x26 true)))
 (let (($x77 (and $x11 $x18)))
 (let (($x39 (and $x77 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x181 (and $x45 $x180)))
 (let (($x313 (=> $x181 $x312)))
 (let (($x64 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x32 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x76 $x32) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x64 (not $x313))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xae815980)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xeb000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x0008fffc)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x7f7f7f7f)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xae815983)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xae815980)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!12!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xeb000001) #x02
    (ite (= x!0 #xae815983) #x03
    (ite (= x!0 #xae815981) #x03
    (ite (= x!0 #xeb000004) #x02
    (ite (= x!0 #xeb000005) #x02
    (ite (= x!0 #xeb000003) #x02
    (ite (= x!0 #xae815980) #x03
    (ite (= x!0 #xeb000000) #x02
    (ite (= x!0 #xeb000006) #x02
    (ite (= x!0 #xeb000007) #x02
    (ite (= x!0 #xeb000002) #x02
      #x04)))))))))))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xeb000005 x!0)
                    (ite (bvule #xeb000006 x!0)
                         (ite (bvule #xeb000007 x!0) #xeb000007 #xeb000006)
                         #xeb000005)
                    #xeb000004)))
    (let ((a!2 (ite (bvule #xeb000002 x!0)
                    (ite (bvule #xeb000003 x!0)
                         (ite (bvule #xeb000004 x!0) a!1 #xeb000003)
                         #xeb000002)
                    #xeb000001)))
    (let ((a!3 (ite (bvule #xae815984 x!0)
                    (ite (bvule #xeb000000 x!0)
                         (ite (bvule #xeb000001 x!0) a!2 #xeb000000)
                         #xae815984)
                    #xae815983)))
      (ite (bvule #xae815980 x!0)
           (ite (bvule #xae815981 x!0)
                (ite (bvule #xae815983 x!0) a!3 #xae815981)
                #xae815980)
           #x00000000)))))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!12!15 (k!14 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00090001) #x02
    (ite (= x!0 #x00090002) #x10
    (ite (= x!0 #x00090000) #x03
    (ite (= x!0 #x00090003) #x01
      #x80)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xb4601000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!14))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6184dd8)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x25b00000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6184ddb)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6184dd8)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe6184dd9 x!0)
                    (ite (bvule #xe6184ddb x!0)
                         (ite (bvule #xe6184ddc x!0) #xe6184ddc #xe6184ddb)
                         #xe6184dd9)
                    #xe6184dd8)))
    (let ((a!2 (ite (bvule #x25b00006 x!0)
                    (ite (bvule #x25b00007 x!0)
                         (ite (bvule #xe6184dd8 x!0) a!1 #x25b00007)
                         #x25b00006)
                    #x25b00005)))
    (let ((a!3 (ite (bvule #x25b00003 x!0)
                    (ite (bvule #x25b00004 x!0)
                         (ite (bvule #x25b00005 x!0) a!2 #x25b00004)
                         #x25b00003)
                    #x25b00002)))
      (ite (bvule #x25b00000 x!0)
           (ite (bvule #x25b00001 x!0)
                (ite (bvule #x25b00002 x!0) a!3 #x25b00001)
                #x25b00000)
           #x00000000)))))
  (define-fun k!13!16 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x25b00002) #x02
    (ite (= x!0 #xe6184dd8) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x25b00005) #x02
    (ite (= x!0 #x25b00001) #x02
    (ite (= x!0 #x25b00004) #x02
    (ite (= x!0 #xe6184dd9) #x03
    (ite (= x!0 #xe6184ddb) #x03
    (ite (= x!0 #x25b00006) #x02
    (ite (= x!0 #x25b00000) #x02
    (ite (= x!0 #x25b00007) #x02
    (ite (= x!0 #x25b00003) #x02
      #x01)))))))))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!13!16 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb4601004) #xf2
    (ite (= x!0 #xff03fff9) #xfe
    (ite (= x!0 #xff03fff6) #xf0
    (ite (= x!0 #xb4601006) #x03
      #xff)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x183 (= false true)))
 (let (($x184 (= $x183 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x79 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x178 (=> $x79 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x62 (or $x92 $x178)))
 (let ((?x172 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x172 (_ bv4294967292 32)) ?x172)))
 (let (($x173 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x172 (bvsub ?x172 (_ bv4 32))) (bvult ?x172 (bvsub ?x172 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x116 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x115 (and true $x116)))
 (let (($x81 (and $x116 $x115)))
 (let (($x142 (and (and (and $x115 $x81) $x114) $x173)))
 (let (($x120 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x179 (and (and (and $x120 $x142) $x150) $x62)))
 (let ((?x109 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x110 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x109)))
 (let (($x111 (or false $x110)))
 (let (($x165 (or $x92 $x111)))
 (let (($x9 (and $x165 $x179)))
 (let (($x65 (= $x9 true)))
 (let (($x98 (= $x65 true)))
 (let (($x180 (= $x98 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x51 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x51 $x152)))
 (let (($x146 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x146)))))
 (let (($x96 (and $x160 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x181 (and $x74 $x180)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 false)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x25 (= false false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x25)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x73 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x123 (=> $x73 $x25)))
 (let (($x44 (= $x73 true)))
 (let (($x69 (and $x44 $x123)))
 (let (($x39 (and $x69 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x182 (and $x45 $x181)))
 (let (($x66 (=> $x182 $x184)))
 (let (($x77 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x26 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x11 $x26) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x77 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x183 (= false true)))
 (let (($x184 (= $x183 true)))
 (let ((?x82 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x145 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x50 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x153 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x130 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x125 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x157 (and (and (and (and true (= ?x177 (_ bv2 8))) (= ?x88 (_ bv2 8))) (= ?x125 (_ bv2 8))) (= ?x130 (_ bv2 8)))))
 (let (($x136 (and (and (and (and $x157 (= ?x153 (_ bv2 8))) (= ?x50 (_ bv2 8))) (= ?x145 (_ bv2 8))) (= ?x82 (_ bv2 8)))))
 (let (($x79 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x178 (=> $x79 (or false (or false $x136)))))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x62 (or $x92 $x178)))
 (let ((?x172 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x150 (= (bvand ?x172 (_ bv4294967292 32)) ?x172)))
 (let (($x173 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x172 (bvsub ?x172 (_ bv4 32))) (bvult ?x172 (bvsub ?x172 (_ bv4 32))))))
 (let (($x114 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x105 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x116 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x105) (bvult input.dst.llvm-%call.Lentry%2%d ?x105))))
 (let (($x115 (and true $x116)))
 (let (($x81 (and $x116 $x115)))
 (let (($x142 (and (and (and $x115 $x81) $x114) $x173)))
 (let (($x120 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x179 (and (and (and $x120 $x142) $x150) $x62)))
 (let ((?x109 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x110 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x109)))
 (let (($x111 (or false $x110)))
 (let (($x165 (or $x92 $x111)))
 (let (($x9 (and $x165 $x179)))
 (let (($x65 (= $x9 true)))
 (let (($x98 (= $x65 true)))
 (let (($x180 (= $x98 true)))
 (let ((?x161 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x161)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x138 $x139)))
 (let (($x152 (and $x141 $x158)))
 (let (($x51 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x51 $x152)))
 (let (($x146 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x146)))))
 (let (($x96 (and $x160 $x159)))
 (let (($x97 (= $x96 true)))
 (let (($x156 (= $x97 true)))
 (let (($x35 (= $x156 true)))
 (let ((?x57 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x57)))
 (let (($x58 (= ?x6 input.dst.llvm-%val)))
 (let (($x164 (= $x58 true)))
 (let (($x21 (= $x164 true)))
 (let (($x74 (and $x21 $x35)))
 (let (($x181 (and $x74 $x180)))
 (let (($x19 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x19 false)))
 (let (($x52 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x23 (=> $x52 $x55)))
 (let (($x36 (= $x52 false)))
 (let (($x25 (= false false)))
 (let (($x59 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x59 $x25)))
 (let (($x169 (= $x59 true)))
 (let (($x41 (and $x169 $x63)))
 (let (($x83 (and $x41 $x36)))
 (let (($x43 (and $x83 $x23)))
 (let (($x14 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x71 (and $x14 $x43)))
 (let (($x10 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x72 (=> $x10 $x71)))
 (let (($x61 (= $x10 false)))
 (let (($x73 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x123 (=> $x73 $x25)))
 (let (($x44 (= $x73 true)))
 (let (($x69 (and $x44 $x123)))
 (let (($x39 (and $x69 $x61)))
 (let (($x45 (and $x39 $x72)))
 (let (($x182 (and $x45 $x181)))
 (let (($x66 (=> $x182 $x184)))
 (let (($x77 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x26 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x11 $x26) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x77 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xbca7fffc)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x01000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xbca7fffd) #x02
    (ite (= x!0 #x01000003) #x03
    (ite (= x!0 #x01000001) #x03
    (ite (= x!0 #xbca80000) #x02
    (ite (= x!0 #xbca80001) #x02
    (ite (= x!0 #xbca7ffff) #x02
    (ite (= x!0 #x01000000) #x03
    (ite (= x!0 #xbca7fffc) #x02
    (ite (= x!0 #xbca80002) #x02
    (ite (= x!0 #xbca80003) #x02
    (ite (= x!0 #xbca7fffe) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xbca80001 x!0)
                    (ite (bvule #xbca80002 x!0)
                         (ite (bvule #xbca80003 x!0) #xbca80003 #xbca80002)
                         #xbca80001)
                    #xbca80000)))
    (let ((a!2 (ite (bvule #xbca7fffe x!0)
                    (ite (bvule #xbca7ffff x!0)
                         (ite (bvule #xbca80000 x!0) a!1 #xbca7ffff)
                         #xbca7fffe)
                    #xbca7fffd)))
    (let ((a!3 (ite (bvule #x01000004 x!0)
                    (ite (bvule #xbca7fffc x!0)
                         (ite (bvule #xbca7fffd x!0) a!2 #xbca7fffc)
                         #x01000004)
                    #x01000003)))
      (ite (bvule #x01000000 x!0)
           (ite (bvule #x01000001 x!0)
                (ite (bvule #x01000003 x!0) a!3 #x01000001)
                #x01000000)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xbffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1bbebfc8)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x3f000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1bbebfcb)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1bbebfc8)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!8!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3f000002) #x02
    (ite (= x!0 #x1bbebfc8) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x3f000005) #x02
    (ite (= x!0 #x3f000001) #x02
    (ite (= x!0 #x3f000004) #x02
    (ite (= x!0 #x1bbebfc9) #x03
    (ite (= x!0 #x1bbebfcb) #x03
    (ite (= x!0 #x3f000006) #x02
    (ite (= x!0 #x3f000000) #x02
    (ite (= x!0 #x3f000007) #x02
    (ite (= x!0 #x3f000003) #x02
      #x00)))))))))))))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x3f000005 x!0)
                    (ite (bvule #x3f000006 x!0)
                         (ite (bvule #x3f000007 x!0) #x3f000007 #x3f000006)
                         #x3f000005)
                    #x3f000004)))
    (let ((a!2 (ite (bvule #x3f000002 x!0)
                    (ite (bvule #x3f000003 x!0)
                         (ite (bvule #x3f000004 x!0) a!1 #x3f000003)
                         #x3f000002)
                    #x3f000001)))
    (let ((a!3 (ite (bvule #x1bbebfcc x!0)
                    (ite (bvule #x3f000000 x!0)
                         (ite (bvule #x3f000001 x!0) a!2 #x3f000000)
                         #x1bbebfcc)
                    #x1bbebfcb)))
      (ite (bvule #x1bbebfc8 x!0)
           (ite (bvule #x1bbebfc9 x!0)
                (ite (bvule #x1bbebfcb x!0) a!3 #x1bbebfc9)
                #x1bbebfc8)
           #x00000000)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!8!10 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x180 (= true false)))
 (let (($x181 (= $x180 true)))
 (let ((?x130 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x84 (ite $x31 (_ bv4 32) ?x130)))
 (let ((?x67 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv1 8))))
 (let ((?x148 (store (store ?x67 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv1 8))))
 (let ((?x140 (store (store ?x148 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)) (_ bv1 8))))
 (let ((?x159 (store (store ?x140 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv1 8))))
 (let ((?x156 (store ?x159 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv1 8))))
 (let ((?x35 (ite $x31 input.dst.llvm-mem.alloc ?x156)))
 (let (($x133 (and (and true (= (select ?x35 (bvadd ?x84 (_ bv0 32))) (_ bv1 8))) (= (select ?x35 (bvadd ?x84 (_ bv1 32))) (_ bv1 8)))))
 (let (($x149 (and (and $x133 (= (select ?x35 (bvadd ?x84 (_ bv2 32))) (_ bv1 8))) (= (select ?x35 (bvadd ?x84 (_ bv3 32))) (_ bv1 8)))))
 (let (($x179 (=> (bvule ?x84 (bvsub (bvadd ?x84 (_ bv4 32)) (_ bv1 32))) (or false (or false $x149)))))
 (let (($x157 (= $x179 true)))
 (let (($x170 (= $x157 true)))
 (let (($x9 (= $x170 true)))
 (let ((?x88 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x88)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x177 $x94)))
 (let (($x87 (and $x34 $x162)))
 (let (($x173 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x173 $x87)))
 (let (($x28 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x121 (and $x176 $x89)))
 (let (($x125 (= $x121 true)))
 (let (($x131 (= $x125 true)))
 (let (($x85 (= $x131 true)))
 (let ((?x168 (select ?x35 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x118 (select ?x35 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x119 (select ?x35 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x111 (select ?x35 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x113 (and (and (and (and true (= ?x111 (_ bv1 8))) (= ?x119 (_ bv1 8))) (= ?x118 (_ bv1 8))) (= ?x168 (_ bv1 8)))))
 (let ((?x109 (bvsub (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x74 (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x56 (=> (bvule ?x74 ?x109) (or false (or false $x113)))))
 (let (($x90 (= $x56 true)))
 (let (($x92 (= $x90 true)))
 (let (($x172 (= $x92 true)))
 (let ((?x47 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x47)))
 (let (($x101 (= ?x57 input.dst.llvm-%val)))
 (let (($x58 (= $x101 true)))
 (let (($x164 (= $x58 true)))
 (let (($x147 (and $x164 $x172)))
 (let (($x80 (and $x147 $x85)))
 (let (($x65 (and $x80 $x9)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x19 (and $x48 true)))
 (let (($x41 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x55 (=> $x41 $x19)))
 (let (($x52 (= $x41 false)))
 (let (($x13 (= false false)))
 (let (($x40 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x169 (=> $x40 $x13)))
 (let (($x59 (= $x40 true)))
 (let (($x63 (and $x59 $x169)))
 (let (($x36 (and $x63 $x52)))
 (let (($x23 (and $x36 $x55)))
 (let (($x60 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x43 (and $x60 $x23)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x71 (=> $x22 $x43)))
 (let (($x10 (= $x22 false)))
 (let (($x42 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x54 (=> $x42 $x13)))
 (let (($x53 (= $x42 true)))
 (let (($x24 (and $x53 $x54)))
 (let (($x61 (and $x24 $x10)))
 (let (($x72 (and $x61 $x71)))
 (let (($x98 (and $x72 $x65)))
 (let (($x182 (=> $x98 $x181)))
 (let (($x123 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x73 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x123 (not $x182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x180 (= true false)))
 (let (($x181 (= $x180 true)))
 (let ((?x130 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x84 (ite $x31 (_ bv4 32) ?x130)))
 (let ((?x67 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv1 8))))
 (let ((?x148 (store (store ?x67 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv1 8))))
 (let ((?x140 (store (store ?x148 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)) (_ bv1 8))))
 (let ((?x159 (store (store ?x140 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv1 8))))
 (let ((?x156 (store ?x159 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv1 8))))
 (let ((?x35 (ite $x31 input.dst.llvm-mem.alloc ?x156)))
 (let (($x133 (and (and true (= (select ?x35 (bvadd ?x84 (_ bv0 32))) (_ bv1 8))) (= (select ?x35 (bvadd ?x84 (_ bv1 32))) (_ bv1 8)))))
 (let (($x149 (and (and $x133 (= (select ?x35 (bvadd ?x84 (_ bv2 32))) (_ bv1 8))) (= (select ?x35 (bvadd ?x84 (_ bv3 32))) (_ bv1 8)))))
 (let (($x179 (=> (bvule ?x84 (bvsub (bvadd ?x84 (_ bv4 32)) (_ bv1 32))) (or false (or false $x149)))))
 (let (($x157 (= $x179 true)))
 (let (($x170 (= $x157 true)))
 (let (($x9 (= $x170 true)))
 (let ((?x88 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x88)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x177 $x94)))
 (let (($x87 (and $x34 $x162)))
 (let (($x173 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x173 $x87)))
 (let (($x28 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x121 (and $x176 $x89)))
 (let (($x125 (= $x121 true)))
 (let (($x131 (= $x125 true)))
 (let (($x85 (= $x131 true)))
 (let ((?x168 (select ?x35 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x118 (select ?x35 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x119 (select ?x35 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x111 (select ?x35 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x113 (and (and (and (and true (= ?x111 (_ bv1 8))) (= ?x119 (_ bv1 8))) (= ?x118 (_ bv1 8))) (= ?x168 (_ bv1 8)))))
 (let ((?x109 (bvsub (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x74 (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x56 (=> (bvule ?x74 ?x109) (or false (or false $x113)))))
 (let (($x90 (= $x56 true)))
 (let (($x92 (= $x90 true)))
 (let (($x172 (= $x92 true)))
 (let ((?x47 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x47)))
 (let (($x101 (= ?x57 input.dst.llvm-%val)))
 (let (($x58 (= $x101 true)))
 (let (($x164 (= $x58 true)))
 (let (($x147 (and $x164 $x172)))
 (let (($x80 (and $x147 $x85)))
 (let (($x65 (and $x80 $x9)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x19 (and $x48 true)))
 (let (($x41 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x55 (=> $x41 $x19)))
 (let (($x52 (= $x41 false)))
 (let (($x13 (= false false)))
 (let (($x40 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x169 (=> $x40 $x13)))
 (let (($x59 (= $x40 true)))
 (let (($x63 (and $x59 $x169)))
 (let (($x36 (and $x63 $x52)))
 (let (($x23 (and $x36 $x55)))
 (let (($x60 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x43 (and $x60 $x23)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x71 (=> $x22 $x43)))
 (let (($x10 (= $x22 false)))
 (let (($x42 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x54 (=> $x42 $x13)))
 (let (($x53 (= $x42 true)))
 (let (($x24 (and $x53 $x54)))
 (let (($x61 (and $x24 $x10)))
 (let (($x72 (and $x61 $x71)))
 (let (($x98 (and $x72 $x65)))
 (let (($x182 (=> $x98 $x181)))
 (let (($x123 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x49 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x73 $x49) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x123 (not $x182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!56))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!56 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000002) #x03
      #x00))))))
  (define-fun k!61 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008004) #x01
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x00008003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00008002) #x01
      #x00)))))))))))
  (define-fun k!58 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x80000000) #x03
      #x00))))))))
  (define-fun k!55 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x00008003) #x01
    (ite (= x!0 #x00008006) #x01
    (ite (= x!0 #x00008007) #x01
    (ite (= x!0 #x00008002) #x01
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x00008005) #x01
    (ite (= x!0 #x00008004) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))))))
  (define-fun k!63 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008005) #x01
    (ite (= x!0 #x00008004) #x01
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x00008003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00008006) #x01
    (ite (= x!0 #x00008002) #x01
      #x00)))))))))))))
  (define-fun k!60 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x00008003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00008002) #x01
      #x00))))))))))
  (define-fun k!57 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x80000000) #x03
      #x00)))))))
  (define-fun k!62 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008005) #x01
    (ite (= x!0 #x00008004) #x01
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x00008003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00008002) #x01
      #x00))))))))))))
  (define-fun k!59 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00008002) #x01
      #x00)))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!210))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7fffff84)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x78bfff80)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x78bfff83)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x78bfff80)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!215 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff87) #x01
    (ite (= x!0 #x7fffff88) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x78bfff80) #x03
      #x00)))))))))))
  (define-fun k!216 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff87) #x01
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x7fffff88) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x7fffff89) #x01
      #x00))))))))))))
  (define-fun k!209 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff87) #x01
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x7fffff88) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff8a) #x01
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x7fffff8b) #x01
    (ite (= x!0 #x7fffff89) #x01
      #x00))))))))))))))
  (define-fun k!217 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff88) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff8a) #x01
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x7fffff89) #x01
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x7fffff87) #x01
      #x00)))))))))))))
  (define-fun k!210 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x78bfff80) #x03
      #x00))))))
  (define-fun k!211 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
      #x00)))))))
  (define-fun k!212 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x78bfff80) #x03
      #x00))))))))
  (define-fun k!213 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
      #x00)))))))))
  (define-fun k!214 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x7fffff87) #x01
      #x00))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x181 (= true false)))
 (let (($x182 (= $x181 true)))
 (let ((?x84 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x153 (ite $x31 (_ bv4 32) ?x84)))
 (let ((?x109 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv1 8))))
 (let ((?x7 (store (store ?x109 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv1 8))))
 (let ((?x17 (store (store ?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)) (_ bv1 8))))
 (let ((?x161 (store (store ?x17 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv1 8))))
 (let ((?x159 (store ?x161 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv1 8))))
 (let ((?x96 (ite $x31 input.dst.llvm-mem.alloc ?x159)))
 (let (($x144 (and (and true (= (select ?x96 (bvadd ?x153 (_ bv0 32))) (_ bv1 8))) (= (select ?x96 (bvadd ?x153 (_ bv1 32))) (_ bv1 8)))))
 (let (($x178 (and (and $x144 (= (select ?x96 (bvadd ?x153 (_ bv2 32))) (_ bv1 8))) (= (select ?x96 (bvadd ?x153 (_ bv3 32))) (_ bv1 8)))))
 (let (($x9 (=> (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32))) (or false (or false $x178)))))
 (let (($x154 (= $x9 true)))
 (let (($x62 (= $x154 true)))
 (let (($x65 (= $x62 true)))
 (let ((?x162 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x162)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x46 $x34)))
 (let (($x89 (and $x88 $x87)))
 (let (($x86 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x86 $x89)))
 (let (($x126 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x126)))))
 (let (($x125 (and $x177 $x121)))
 (let (($x131 (= $x125 true)))
 (let (($x85 (= $x131 true)))
 (let (($x80 (= $x85 true)))
 (let ((?x113 (select ?x96 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x115 (select ?x96 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x105 (select ?x96 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x122 (select ?x96 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x151 (and (and (and (and true (= ?x122 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x113 (_ bv1 8)))))
 (let ((?x111 (bvsub (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x97 (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x172 (=> (bvule ?x97 ?x111) (or false (or false $x151)))))
 (let (($x156 (= $x172 true)))
 (let (($x35 (= $x156 true)))
 (let (($x147 (= $x35 true)))
 (let ((?x47 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x47)))
 (let (($x101 (= ?x57 input.dst.llvm-%val)))
 (let (($x58 (= $x101 true)))
 (let (($x164 (= $x58 true)))
 (let (($x142 (and $x164 $x147)))
 (let (($x130 (and $x142 $x80)))
 (let (($x98 (and $x130 $x65)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x19 (and $x48 false)))
 (let (($x41 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x55 (=> $x41 $x19)))
 (let (($x52 (= $x41 false)))
 (let (($x64 (= false false)))
 (let (($x40 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x169 (=> $x40 $x64)))
 (let (($x59 (= $x40 true)))
 (let (($x63 (and $x59 $x169)))
 (let (($x36 (and $x63 $x52)))
 (let (($x23 (and $x36 $x55)))
 (let (($x60 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x43 (and $x60 $x23)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x71 (=> $x22 $x43)))
 (let (($x10 (= $x22 false)))
 (let (($x11 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x32 (=> $x11 $x64)))
 (let (($x77 (= $x11 true)))
 (let (($x25 (and $x77 $x32)))
 (let (($x61 (and $x25 $x10)))
 (let (($x72 (and $x61 $x71)))
 (let (($x180 (and $x72 $x98)))
 (let (($x183 (=> $x180 $x182)))
 (let (($x24 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x42 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x53 $x42) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x24 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x181 (= true false)))
 (let (($x182 (= $x181 true)))
 (let ((?x84 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x153 (ite $x31 (_ bv4 32) ?x84)))
 (let ((?x109 (store input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)) (_ bv1 8))))
 (let ((?x7 (store (store ?x109 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)) (_ bv1 8))))
 (let ((?x17 (store (store ?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)) (_ bv1 8))))
 (let ((?x161 (store (store ?x17 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)) (_ bv1 8)) (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)) (_ bv1 8))))
 (let ((?x159 (store ?x161 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)) (_ bv1 8))))
 (let ((?x96 (ite $x31 input.dst.llvm-mem.alloc ?x159)))
 (let (($x144 (and (and true (= (select ?x96 (bvadd ?x153 (_ bv0 32))) (_ bv1 8))) (= (select ?x96 (bvadd ?x153 (_ bv1 32))) (_ bv1 8)))))
 (let (($x178 (and (and $x144 (= (select ?x96 (bvadd ?x153 (_ bv2 32))) (_ bv1 8))) (= (select ?x96 (bvadd ?x153 (_ bv3 32))) (_ bv1 8)))))
 (let (($x9 (=> (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32))) (or false (or false $x178)))))
 (let (($x154 (= $x9 true)))
 (let (($x62 (= $x154 true)))
 (let (($x65 (= $x62 true)))
 (let ((?x162 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x162)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x46 $x34)))
 (let (($x89 (and $x88 $x87)))
 (let (($x86 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x86 $x89)))
 (let (($x126 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x126)))))
 (let (($x125 (and $x177 $x121)))
 (let (($x131 (= $x125 true)))
 (let (($x85 (= $x131 true)))
 (let (($x80 (= $x85 true)))
 (let ((?x113 (select ?x96 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv3 32)))))
 (let ((?x115 (select ?x96 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv2 32)))))
 (let ((?x105 (select ?x96 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv1 32)))))
 (let ((?x122 (select ?x96 (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv0 32)))))
 (let (($x151 (and (and (and (and true (= ?x122 (_ bv1 8))) (= ?x105 (_ bv1 8))) (= ?x115 (_ bv1 8))) (= ?x113 (_ bv1 8)))))
 (let ((?x111 (bvsub (bvadd (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd) (_ bv4 32)) (_ bv1 32))))
 (let ((?x97 (ite $x31 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x172 (=> (bvule ?x97 ?x111) (or false (or false $x151)))))
 (let (($x156 (= $x172 true)))
 (let (($x35 (= $x156 true)))
 (let (($x147 (= $x35 true)))
 (let ((?x47 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x47)))
 (let (($x101 (= ?x57 input.dst.llvm-%val)))
 (let (($x58 (= $x101 true)))
 (let (($x164 (= $x58 true)))
 (let (($x142 (and $x164 $x147)))
 (let (($x130 (and $x142 $x80)))
 (let (($x98 (and $x130 $x65)))
 (let (($x48 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x19 (and $x48 false)))
 (let (($x41 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x55 (=> $x41 $x19)))
 (let (($x52 (= $x41 false)))
 (let (($x64 (= false false)))
 (let (($x40 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x169 (=> $x40 $x64)))
 (let (($x59 (= $x40 true)))
 (let (($x63 (and $x59 $x169)))
 (let (($x36 (and $x63 $x52)))
 (let (($x23 (and $x36 $x55)))
 (let (($x60 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x43 (and $x60 $x23)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x71 (=> $x22 $x43)))
 (let (($x10 (= $x22 false)))
 (let (($x11 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x32 (=> $x11 $x64)))
 (let (($x77 (= $x11 true)))
 (let (($x25 (and $x77 $x32)))
 (let (($x61 (and $x25 $x10)))
 (let (($x72 (and $x61 $x71)))
 (let (($x180 (and $x72 $x98)))
 (let (($x183 (=> $x180 $x182)))
 (let (($x24 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x42 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x53 $x42) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x24 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!56))
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!56 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000002) #x03
      #x00))))))
  (define-fun k!61 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008004) #x01
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x00008003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00008002) #x01
      #x00)))))))))))
  (define-fun k!58 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x80000000) #x03
      #x00))))))))
  (define-fun k!55 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x00008003) #x01
    (ite (= x!0 #x00008006) #x01
    (ite (= x!0 #x00008007) #x01
    (ite (= x!0 #x00008002) #x01
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x00008005) #x01
    (ite (= x!0 #x00008004) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x80000002) #x03
      #x00))))))))))))))
  (define-fun k!63 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008005) #x01
    (ite (= x!0 #x00008004) #x01
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x00008003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00008006) #x01
    (ite (= x!0 #x00008002) #x01
      #x00)))))))))))))
  (define-fun k!60 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x00008003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00008002) #x01
      #x00))))))))))
  (define-fun k!57 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x80000000) #x03
      #x00)))))))
  (define-fun k!62 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008005) #x01
    (ite (= x!0 #x00008004) #x01
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x00008003) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00008002) #x01
      #x00))))))))))))
  (define-fun k!59 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008001) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x80000003) #x03
    (ite (= x!0 #x80000001) #x03
    (ite (= x!0 #x80000002) #x03
    (ite (= x!0 #x00008000) #x01
    (ite (= x!0 #x80000000) #x03
    (ite (= x!0 #x00008002) #x01
      #x00)))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!210))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7fffff84)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x78bfff80)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x78bfff83)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x78bfff80)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!215 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff87) #x01
    (ite (= x!0 #x7fffff88) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x78bfff80) #x03
      #x00)))))))))))
  (define-fun k!216 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff87) #x01
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x7fffff88) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x7fffff89) #x01
      #x00))))))))))))
  (define-fun k!209 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff87) #x01
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x7fffff88) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff8a) #x01
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x7fffff8b) #x01
    (ite (= x!0 #x7fffff89) #x01
      #x00))))))))))))))
  (define-fun k!217 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff88) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff8a) #x01
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x7fffff89) #x01
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x7fffff87) #x01
      #x00)))))))))))))
  (define-fun k!210 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x78bfff80) #x03
      #x00))))))
  (define-fun k!211 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
      #x00)))))))
  (define-fun k!212 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x78bfff80) #x03
      #x00))))))))
  (define-fun k!213 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
      #x00)))))))))
  (define-fun k!214 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fffff86) #x01
    (ite (= x!0 #x7fffff85) #x01
    (ite (= x!0 #x78bfff82) #x03
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x7fffff84) #x01
    (ite (= x!0 #x78bfff81) #x03
    (ite (= x!0 #x78bfff83) #x03
    (ite (= x!0 #x78bfff80) #x03
    (ite (= x!0 #x7fffff87) #x01
      #x00))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x270 (= false true)))
 (let (($x271 (= $x270 true)))
 (let ((?x212 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x212)))
 (let (($x268 (= ?x269 input.dst.llvm-%val)))
 (let (($x262 (= $x268 true)))
 (let (($x261 (= $x262 true)))
 (let ((?x45 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x20 (ite $x11 (_ bv4 32) ?x45)))
 (let (($x255 (= (bvand ?x20 (_ bv4294967292 32)) ?x20)))
 (let (($x84 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x238 (ite $x84 (bvuge ?x20 (bvsub ?x20 (_ bv4 32))) (bvult ?x20 (bvsub ?x20 (_ bv4 32))))))
 (let ((?x72 (ite $x11 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x247 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x34 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x8 (ite $x34 (bvuge ?x72 (bvsub ?x72 (_ bv0 32))) (bvult ?x72 (bvsub ?x72 (_ bv0 32))))))
 (let (($x250 (and true $x8)))
 (let (($x251 (and $x8 $x250)))
 (let (($x253 (and (and (and $x250 $x251) $x247) $x238)))
 (let (($x256 (and $x253 $x255)))
 (let ((?x23 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x48 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x169 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x76 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x64 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x44 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x14 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x221 (and (and true (= (select input.dst.llvm-mem.alloc ?x14) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x44) (_ bv2 8)))))
 (let (($x99 (and (and $x221 (= (select input.dst.llvm-mem.alloc ?x64) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x76) (_ bv2 8)))))
 (let (($x231 (and (and $x99 (= (select input.dst.llvm-mem.alloc ?x169) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv2 8)))))
 (let (($x223 (and (and $x231 (= (select input.dst.llvm-mem.alloc ?x48) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x23) (_ bv2 8)))))
 (let (($x243 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x244 (=> $x243 (or false (or false $x223)))))
 (let (($x211 (or $x11 $x244)))
 (let ((?x190 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x187 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x190)))
 (let (($x192 (or false $x187)))
 (let (($x213 (or $x11 $x192)))
 (let (($x236 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (and (and (and $x236 $x213) $x211) $x256)))
 (let (($x267 (= $x266 true)))
 (let (($x258 (= $x267 true)))
 (let (($x259 (= $x258 true)))
 (let (($x196 (= $x236 true)))
 (let (($x235 (= $x196 true)))
 (let (($x227 (= $x235 true)))
 (let (($x210 (= $x211 true)))
 (let (($x245 (= $x210 true)))
 (let (($x246 (= $x245 true)))
 (let (($x215 (= $x213 true)))
 (let (($x203 (= $x215 true)))
 (let (($x204 (= $x203 true)))
 (let ((?x182 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x182)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x65 $x180)))
 (let (($x184 (and $x181 $x183)))
 (let (($x82 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x82 $x184)))
 (let (($x179 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x179)))))
 (let (($x66 (and $x62 $x163)))
 (let (($x185 (= $x66 true)))
 (let (($x193 (= $x185 true)))
 (let (($x195 (= $x193 true)))
 (let ((?x80 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x29 (= (bvand ?x80 (_ bv4294967292 32)) ?x80)))
 (let (($x166 (ite $x84 (bvuge ?x80 (bvsub ?x80 (_ bv4 32))) (bvult ?x80 (bvsub ?x80 (_ bv4 32))))))
 (let (($x85 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x94 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x87 (ite $x34 (bvuge input.dst.llvm-%call.Lentry%2%d ?x94) (bvult input.dst.llvm-%call.Lentry%2%d ?x94))))
 (let (($x89 (and true $x87)))
 (let (($x121 (and $x87 $x89)))
 (let (($x50 (and (and (and $x89 $x121) $x85) $x166)))
 (let (($x143 (and $x50 $x29)))
 (let (($x133 (= $x143 true)))
 (let (($x145 (= $x133 true)))
 (let (($x144 (= $x145 true)))
 (let (($x197 (and $x144 $x195)))
 (let (($x206 (and $x197 $x204)))
 (let (($x188 (and $x206 $x246)))
 (let (($x225 (and $x188 $x227)))
 (let (($x264 (and $x225 $x259)))
 (let (($x16 (and $x264 $x261)))
 (let (($x127 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x126 (and $x127 true)))
 (let (($x173 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x176 (=> $x173 $x126)))
 (let (($x12 (= $x173 false)))
 (let (($x112 (= false false)))
 (let (($x147 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x150 (=> $x147 $x112)))
 (let (($x142 (= $x147 true)))
 (let (($x175 (and $x142 $x150)))
 (let (($x28 (and $x175 $x12)))
 (let (($x174 (and $x28 $x176)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x177 (and $x156 $x174)))
 (let (($x151 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x79 (=> $x151 $x177)))
 (let (($x56 (= $x151 false)))
 (let (($x81 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x113 (=> $x81 $x112)))
 (let (($x168 (= $x81 true)))
 (let (($x114 (and $x168 $x113)))
 (let (($x90 (and $x114 $x56)))
 (let (($x86 (and $x90 $x79)))
 (let (($x198 (and $x86 $x16)))
 (let ((?x39 (store (store (store input.dst.llvm-mem.alloc ?x14 (_ bv1 8)) ?x44 (_ bv1 8)) ?x64 (_ bv1 8))))
 (let ((?x19 (store (store (store (store ?x39 ?x76 (_ bv1 8)) ?x169 (_ bv1 8)) ?x52 (_ bv1 8)) ?x48 (_ bv1 8))))
 (let ((?x43 (store ?x19 ?x23 (_ bv1 8))))
 (let ((?x71 (ite $x11 input.dst.llvm-mem.alloc ?x43)))
 (let (($x152 (and (and true (= (select ?x71 (bvadd ?x20 (_ bv0 32))) (_ bv1 8))) (= (select ?x71 (bvadd ?x20 (_ bv1 32))) (_ bv1 8)))))
 (let (($x105 (and (and $x152 (= (select ?x71 (bvadd ?x20 (_ bv2 32))) (_ bv1 8))) (= (select ?x71 (bvadd ?x20 (_ bv3 32))) (_ bv1 8)))))
 (let (($x115 (=> (bvule ?x20 (bvsub (bvadd ?x20 (_ bv4 32)) (_ bv1 32))) (or false (or false $x105)))))
 (let (($x148 (and (and true (= (select ?x71 (bvadd ?x72 (_ bv0 32))) (_ bv1 8))) (= (select ?x71 (bvadd ?x72 (_ bv1 32))) (_ bv1 8)))))
 (let (($x70 (and (and $x148 (= (select ?x71 (bvadd ?x72 (_ bv2 32))) (_ bv1 8))) (= (select ?x71 (bvadd ?x72 (_ bv3 32))) (_ bv1 8)))))
 (let (($x33 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x146 (and $x33 $x115)))
 (let (($x263 (and $x146 $x198)))
 (let (($x279 (=> $x263 $x271)))
 (let (($x61 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x13 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x107 $x13) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x61 (not $x279)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x270 (= false true)))
 (let (($x271 (= $x270 true)))
 (let ((?x212 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x212)))
 (let (($x268 (= ?x269 input.dst.llvm-%val)))
 (let (($x262 (= $x268 true)))
 (let (($x261 (= $x262 true)))
 (let ((?x45 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x20 (ite $x11 (_ bv4 32) ?x45)))
 (let (($x255 (= (bvand ?x20 (_ bv4294967292 32)) ?x20)))
 (let (($x84 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x238 (ite $x84 (bvuge ?x20 (bvsub ?x20 (_ bv4 32))) (bvult ?x20 (bvsub ?x20 (_ bv4 32))))))
 (let ((?x72 (ite $x11 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x247 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x34 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x8 (ite $x34 (bvuge ?x72 (bvsub ?x72 (_ bv0 32))) (bvult ?x72 (bvsub ?x72 (_ bv0 32))))))
 (let (($x250 (and true $x8)))
 (let (($x251 (and $x8 $x250)))
 (let (($x253 (and (and (and $x250 $x251) $x247) $x238)))
 (let (($x256 (and $x253 $x255)))
 (let ((?x23 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x48 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x169 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x76 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x64 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x44 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x14 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x221 (and (and true (= (select input.dst.llvm-mem.alloc ?x14) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x44) (_ bv2 8)))))
 (let (($x99 (and (and $x221 (= (select input.dst.llvm-mem.alloc ?x64) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x76) (_ bv2 8)))))
 (let (($x231 (and (and $x99 (= (select input.dst.llvm-mem.alloc ?x169) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv2 8)))))
 (let (($x223 (and (and $x231 (= (select input.dst.llvm-mem.alloc ?x48) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x23) (_ bv2 8)))))
 (let (($x243 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x244 (=> $x243 (or false (or false $x223)))))
 (let (($x211 (or $x11 $x244)))
 (let ((?x190 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x187 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x190)))
 (let (($x192 (or false $x187)))
 (let (($x213 (or $x11 $x192)))
 (let (($x236 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (and (and (and $x236 $x213) $x211) $x256)))
 (let (($x267 (= $x266 true)))
 (let (($x258 (= $x267 true)))
 (let (($x259 (= $x258 true)))
 (let (($x196 (= $x236 true)))
 (let (($x235 (= $x196 true)))
 (let (($x227 (= $x235 true)))
 (let (($x210 (= $x211 true)))
 (let (($x245 (= $x210 true)))
 (let (($x246 (= $x245 true)))
 (let (($x215 (= $x213 true)))
 (let (($x203 (= $x215 true)))
 (let (($x204 (= $x203 true)))
 (let ((?x182 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x182)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x65 $x180)))
 (let (($x184 (and $x181 $x183)))
 (let (($x82 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x82 $x184)))
 (let (($x179 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x179)))))
 (let (($x66 (and $x62 $x163)))
 (let (($x185 (= $x66 true)))
 (let (($x193 (= $x185 true)))
 (let (($x195 (= $x193 true)))
 (let ((?x80 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x29 (= (bvand ?x80 (_ bv4294967292 32)) ?x80)))
 (let (($x166 (ite $x84 (bvuge ?x80 (bvsub ?x80 (_ bv4 32))) (bvult ?x80 (bvsub ?x80 (_ bv4 32))))))
 (let (($x85 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x94 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x87 (ite $x34 (bvuge input.dst.llvm-%call.Lentry%2%d ?x94) (bvult input.dst.llvm-%call.Lentry%2%d ?x94))))
 (let (($x89 (and true $x87)))
 (let (($x121 (and $x87 $x89)))
 (let (($x50 (and (and (and $x89 $x121) $x85) $x166)))
 (let (($x143 (and $x50 $x29)))
 (let (($x133 (= $x143 true)))
 (let (($x145 (= $x133 true)))
 (let (($x144 (= $x145 true)))
 (let (($x197 (and $x144 $x195)))
 (let (($x206 (and $x197 $x204)))
 (let (($x188 (and $x206 $x246)))
 (let (($x225 (and $x188 $x227)))
 (let (($x264 (and $x225 $x259)))
 (let (($x16 (and $x264 $x261)))
 (let (($x127 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x126 (and $x127 true)))
 (let (($x173 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x176 (=> $x173 $x126)))
 (let (($x12 (= $x173 false)))
 (let (($x112 (= false false)))
 (let (($x147 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x150 (=> $x147 $x112)))
 (let (($x142 (= $x147 true)))
 (let (($x175 (and $x142 $x150)))
 (let (($x28 (and $x175 $x12)))
 (let (($x174 (and $x28 $x176)))
 (let (($x156 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x177 (and $x156 $x174)))
 (let (($x151 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x79 (=> $x151 $x177)))
 (let (($x56 (= $x151 false)))
 (let (($x81 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x113 (=> $x81 $x112)))
 (let (($x168 (= $x81 true)))
 (let (($x114 (and $x168 $x113)))
 (let (($x90 (and $x114 $x56)))
 (let (($x86 (and $x90 $x79)))
 (let (($x198 (and $x86 $x16)))
 (let ((?x39 (store (store (store input.dst.llvm-mem.alloc ?x14 (_ bv1 8)) ?x44 (_ bv1 8)) ?x64 (_ bv1 8))))
 (let ((?x19 (store (store (store (store ?x39 ?x76 (_ bv1 8)) ?x169 (_ bv1 8)) ?x52 (_ bv1 8)) ?x48 (_ bv1 8))))
 (let ((?x43 (store ?x19 ?x23 (_ bv1 8))))
 (let ((?x71 (ite $x11 input.dst.llvm-mem.alloc ?x43)))
 (let (($x152 (and (and true (= (select ?x71 (bvadd ?x20 (_ bv0 32))) (_ bv1 8))) (= (select ?x71 (bvadd ?x20 (_ bv1 32))) (_ bv1 8)))))
 (let (($x105 (and (and $x152 (= (select ?x71 (bvadd ?x20 (_ bv2 32))) (_ bv1 8))) (= (select ?x71 (bvadd ?x20 (_ bv3 32))) (_ bv1 8)))))
 (let (($x115 (=> (bvule ?x20 (bvsub (bvadd ?x20 (_ bv4 32)) (_ bv1 32))) (or false (or false $x105)))))
 (let (($x148 (and (and true (= (select ?x71 (bvadd ?x72 (_ bv0 32))) (_ bv1 8))) (= (select ?x71 (bvadd ?x72 (_ bv1 32))) (_ bv1 8)))))
 (let (($x70 (and (and $x148 (= (select ?x71 (bvadd ?x72 (_ bv2 32))) (_ bv1 8))) (= (select ?x71 (bvadd ?x72 (_ bv3 32))) (_ bv1 8)))))
 (let (($x33 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x146 (and $x33 $x115)))
 (let (($x263 (and $x146 $x198)))
 (let (($x279 (=> $x263 $x271)))
 (let (($x61 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x13 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x107 $x13) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x61 (not $x279)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!78))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x60000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffff40)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6ca77da0)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6ca77da3)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6ca77da0)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!79 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff43) #x02
    (ite (= x!0 #xffffff45) #x02
    (ite (= x!0 #xffffff41) #x02
    (ite (= x!0 #x6ca77da2) #x03
    (ite (= x!0 #xffffff44) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffff46) #x02
    (ite (= x!0 #xffffff40) #x01
    (ite (= x!0 #x6ca77da3) #x03
    (ite (= x!0 #x6ca77da1) #x03
    (ite (= x!0 #xffffff47) #x02
    (ite (= x!0 #x6ca77da0) #x03
    (ite (= x!0 #xffffff42) #x02
      #x00))))))))))))))
  (define-fun k!80 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff43) #x02
    (ite (= x!0 #xffffff42) #x02
    (ite (= x!0 #xffffff45) #x02
    (ite (= x!0 #xffffff41) #x01
    (ite (= x!0 #x6ca77da2) #x03
    (ite (= x!0 #xffffff44) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffff46) #x02
    (ite (= x!0 #xffffff40) #x01
    (ite (= x!0 #x6ca77da3) #x03
    (ite (= x!0 #x6ca77da1) #x03
    (ite (= x!0 #xffffff47) #x02
    (ite (= x!0 #x6ca77da0) #x03
      #x00))))))))))))))
  (define-fun k!81 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff42) #x01
    (ite (= x!0 #xffffff43) #x02
    (ite (= x!0 #xffffff45) #x02
    (ite (= x!0 #xffffff41) #x01
    (ite (= x!0 #x6ca77da2) #x03
    (ite (= x!0 #xffffff44) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffff46) #x02
    (ite (= x!0 #xffffff40) #x01
    (ite (= x!0 #x6ca77da3) #x03
    (ite (= x!0 #x6ca77da1) #x03
    (ite (= x!0 #xffffff47) #x02
    (ite (= x!0 #x6ca77da0) #x03
      #x00))))))))))))))
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff43) #x01
    (ite (= x!0 #xffffff42) #x01
    (ite (= x!0 #xffffff45) #x02
    (ite (= x!0 #xffffff41) #x01
    (ite (= x!0 #x6ca77da2) #x03
    (ite (= x!0 #xffffff44) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffff46) #x02
    (ite (= x!0 #xffffff40) #x01
    (ite (= x!0 #x6ca77da3) #x03
    (ite (= x!0 #x6ca77da1) #x03
    (ite (= x!0 #xffffff47) #x02
    (ite (= x!0 #x6ca77da0) #x03
      #x00))))))))))))))
  (define-fun k!83 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff43) #x01
    (ite (= x!0 #xffffff45) #x02
    (ite (= x!0 #xffffff41) #x01
    (ite (= x!0 #x6ca77da2) #x03
    (ite (= x!0 #xffffff44) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffff46) #x02
    (ite (= x!0 #xffffff40) #x01
    (ite (= x!0 #x6ca77da3) #x03
    (ite (= x!0 #x6ca77da1) #x03
    (ite (= x!0 #xffffff47) #x02
    (ite (= x!0 #x6ca77da0) #x03
    (ite (= x!0 #xffffff42) #x01
      #x00))))))))))))))
  (define-fun k!84 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff43) #x01
    (ite (= x!0 #xffffff45) #x01
    (ite (= x!0 #xffffff41) #x01
    (ite (= x!0 #x6ca77da2) #x03
    (ite (= x!0 #xffffff44) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffff46) #x02
    (ite (= x!0 #xffffff40) #x01
    (ite (= x!0 #x6ca77da3) #x03
    (ite (= x!0 #x6ca77da1) #x03
    (ite (= x!0 #xffffff47) #x02
    (ite (= x!0 #x6ca77da0) #x03
    (ite (= x!0 #xffffff42) #x01
      #x00))))))))))))))
  (define-fun k!77 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff42) #x01
    (ite (= x!0 #xffffff45) #x01
    (ite (= x!0 #xffffff41) #x01
    (ite (= x!0 #x6ca77da2) #x03
    (ite (= x!0 #xffffff44) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffff46) #x01
    (ite (= x!0 #xffffff40) #x01
    (ite (= x!0 #x6ca77da3) #x03
    (ite (= x!0 #x6ca77da1) #x03
    (ite (= x!0 #xffffff47) #x01
    (ite (= x!0 #x6ca77da0) #x03
    (ite (= x!0 #xffffff43) #x01
      #x00))))))))))))))
  (define-fun k!85 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff42) #x01
    (ite (= x!0 #xffffff45) #x01
    (ite (= x!0 #xffffff41) #x01
    (ite (= x!0 #x6ca77da2) #x03
    (ite (= x!0 #xffffff44) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffff46) #x01
    (ite (= x!0 #xffffff40) #x01
    (ite (= x!0 #x6ca77da3) #x03
    (ite (= x!0 #x6ca77da1) #x03
    (ite (= x!0 #xffffff47) #x02
    (ite (= x!0 #x6ca77da0) #x03
    (ite (= x!0 #xffffff43) #x01
      #x00))))))))))))))
  (define-fun k!78 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff42) #x02
    (ite (= x!0 #xffffff45) #x02
    (ite (= x!0 #xffffff41) #x02
    (ite (= x!0 #x6ca77da2) #x03
    (ite (= x!0 #xffffff44) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #xffffff46) #x02
    (ite (= x!0 #xffffff40) #x02
    (ite (= x!0 #x6ca77da3) #x03
    (ite (= x!0 #x6ca77da1) #x03
    (ite (= x!0 #xffffff47) #x02
    (ite (= x!0 #x6ca77da0) #x03
    (ite (= x!0 #xffffff43) #x02
      #x00))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x82bbbc40)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00009108)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #xa3400000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!100))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000910b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00009108)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!107 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x82bbbc42) #x01
    (ite (= x!0 #x82bbbc47) #x02
    (ite (= x!0 #x00009109) #x03
    (ite (= x!0 #x82bbbc40) #x01
    (ite (= x!0 #x0000910a) #x03
    (ite (= x!0 #x82bbbc41) #x01
    (ite (= x!0 #x82bbbc46) #x01
    (ite (= x!0 #x82bbbc43) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0000910b) #x03
    (ite (= x!0 #x82bbbc45) #x01
    (ite (= x!0 #x82bbbc44) #x01
    (ite (= x!0 #x00009108) #x03
      #x00))))))))))))))
  (define-fun k!104 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x82bbbc42) #x01
    (ite (= x!0 #x82bbbc47) #x02
    (ite (= x!0 #x00009109) #x03
    (ite (= x!0 #x82bbbc40) #x01
    (ite (= x!0 #x0000910a) #x03
    (ite (= x!0 #x82bbbc41) #x01
    (ite (= x!0 #x82bbbc46) #x02
    (ite (= x!0 #x82bbbc43) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0000910b) #x03
    (ite (= x!0 #x82bbbc45) #x02
    (ite (= x!0 #x82bbbc44) #x02
    (ite (= x!0 #x00009108) #x03
      #x00))))))))))))))
  (define-fun k!101 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x82bbbc42) #x02
    (ite (= x!0 #x82bbbc47) #x02
    (ite (= x!0 #x00009109) #x03
    (ite (= x!0 #x82bbbc40) #x01
    (ite (= x!0 #x0000910a) #x03
    (ite (= x!0 #x82bbbc41) #x02
    (ite (= x!0 #x82bbbc46) #x02
    (ite (= x!0 #x82bbbc43) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0000910b) #x03
    (ite (= x!0 #x82bbbc45) #x02
    (ite (= x!0 #x82bbbc44) #x02
    (ite (= x!0 #x00009108) #x03
      #x00))))))))))))))
  (define-fun k!106 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x82bbbc42) #x01
    (ite (= x!0 #x82bbbc47) #x02
    (ite (= x!0 #x00009109) #x03
    (ite (= x!0 #x82bbbc40) #x01
    (ite (= x!0 #x0000910a) #x03
    (ite (= x!0 #x82bbbc41) #x01
    (ite (= x!0 #x82bbbc46) #x02
    (ite (= x!0 #x82bbbc43) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0000910b) #x03
    (ite (= x!0 #x82bbbc45) #x01
    (ite (= x!0 #x82bbbc44) #x01
    (ite (= x!0 #x00009108) #x03
      #x00))))))))))))))
  (define-fun k!103 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x82bbbc42) #x01
    (ite (= x!0 #x82bbbc47) #x02
    (ite (= x!0 #x00009109) #x03
    (ite (= x!0 #x82bbbc40) #x01
    (ite (= x!0 #x0000910a) #x03
    (ite (= x!0 #x82bbbc41) #x01
    (ite (= x!0 #x82bbbc46) #x02
    (ite (= x!0 #x82bbbc43) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0000910b) #x03
    (ite (= x!0 #x82bbbc45) #x02
    (ite (= x!0 #x82bbbc44) #x02
    (ite (= x!0 #x00009108) #x03
      #x00))))))))))))))
  (define-fun k!100 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x82bbbc42) #x02
    (ite (= x!0 #x82bbbc47) #x02
    (ite (= x!0 #x00009109) #x03
    (ite (= x!0 #x82bbbc40) #x02
    (ite (= x!0 #x0000910a) #x03
    (ite (= x!0 #x82bbbc41) #x02
    (ite (= x!0 #x82bbbc46) #x02
    (ite (= x!0 #x82bbbc43) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0000910b) #x03
    (ite (= x!0 #x82bbbc45) #x02
    (ite (= x!0 #x82bbbc44) #x02
    (ite (= x!0 #x00009108) #x03
      #x00))))))))))))))
  (define-fun k!105 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x82bbbc42) #x01
    (ite (= x!0 #x82bbbc47) #x02
    (ite (= x!0 #x00009109) #x03
    (ite (= x!0 #x82bbbc40) #x01
    (ite (= x!0 #x0000910a) #x03
    (ite (= x!0 #x82bbbc41) #x01
    (ite (= x!0 #x82bbbc46) #x02
    (ite (= x!0 #x82bbbc43) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0000910b) #x03
    (ite (= x!0 #x82bbbc45) #x02
    (ite (= x!0 #x82bbbc44) #x01
    (ite (= x!0 #x00009108) #x03
      #x00))))))))))))))
  (define-fun k!102 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x82bbbc42) #x02
    (ite (= x!0 #x82bbbc47) #x02
    (ite (= x!0 #x00009109) #x03
    (ite (= x!0 #x82bbbc40) #x01
    (ite (= x!0 #x0000910a) #x03
    (ite (= x!0 #x82bbbc41) #x01
    (ite (= x!0 #x82bbbc46) #x02
    (ite (= x!0 #x82bbbc43) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0000910b) #x03
    (ite (= x!0 #x82bbbc45) #x02
    (ite (= x!0 #x82bbbc44) #x02
    (ite (= x!0 #x00009108) #x03
      #x00))))))))))))))
  (define-fun k!99 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x82bbbc42) #x01
    (ite (= x!0 #x82bbbc47) #x01
    (ite (= x!0 #x00009109) #x03
    (ite (= x!0 #x82bbbc40) #x01
    (ite (= x!0 #x0000910a) #x03
    (ite (= x!0 #x82bbbc41) #x01
    (ite (= x!0 #x82bbbc46) #x01
    (ite (= x!0 #x82bbbc43) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x0000910b) #x03
    (ite (= x!0 #x82bbbc45) #x01
    (ite (= x!0 #x82bbbc44) #x01
    (ite (= x!0 #x00009108) #x03
      #x00))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x272 (=> true false)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x23 (ite $x26 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x270 (= (_ bv0 32) ?x23)))
 (let ((?x271 (ite $x270 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (bvuge ?x271 (_ bv1 32))))
 (let (($x214 (= true $x102)))
 (let (($x279 (= ?x271 (_ bv0 32))))
 (let (($x276 (= false $x279)))
 (let (($x274 (and $x276 true)))
 (let (($x280 (and $x274 $x214)))
 (let (($x277 (and $x280 $x272)))
 (let (($x5 (= $x277 true)))
 (let (($x275 (= $x5 true)))
 (let ((?x212 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x212)))
 (let (($x268 (= ?x269 input.dst.llvm-%val)))
 (let (($x262 (= $x268 true)))
 (let (($x261 (= $x262 true)))
 (let ((?x43 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x71 (ite $x26 (_ bv4 32) ?x43)))
 (let (($x253 (= (bvand ?x71 (_ bv4294967292 32)) ?x71)))
 (let (($x80 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x95 (ite $x80 (bvuge ?x71 (bvsub ?x71 (_ bv4 32))) (bvult ?x71 (bvsub ?x71 (_ bv4 32))))))
 (let (($x251 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x88 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x241 (ite $x88 (bvuge ?x23 (bvsub ?x23 (_ bv0 32))) (bvult ?x23 (bvsub ?x23 (_ bv0 32))))))
 (let (($x242 (and true $x241)))
 (let (($x8 (and $x241 $x242)))
 (let (($x237 (and (and (and $x242 $x8) $x251) $x95)))
 (let (($x254 (and $x237 $x253)))
 (let ((?x48 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x169 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x53 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x32 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x37 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x222 (and (and true (= (select input.dst.llvm-mem.alloc ?x37) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x7) (_ bv2 8)))))
 (let (($x202 (and (and $x222 (= (select input.dst.llvm-mem.alloc ?x18) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x32) (_ bv2 8)))))
 (let (($x232 (and (and $x202 (= (select input.dst.llvm-mem.alloc ?x53) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x169) (_ bv2 8)))))
 (let (($x226 (and (and $x232 (= (select input.dst.llvm-mem.alloc ?x52) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x48) (_ bv2 8)))))
 (let (($x211 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x210 (=> $x211 (or false (or false $x226)))))
 (let (($x91 (or $x26 $x210)))
 (let ((?x187 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x192 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x187)))
 (let (($x213 (or false $x192)))
 (let (($x215 (or $x26 $x213)))
 (let (($x236 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (and (and (and $x236 $x215) $x91) $x254)))
 (let (($x267 (= $x266 true)))
 (let (($x258 (= $x267 true)))
 (let (($x259 (= $x258 true)))
 (let (($x196 (= $x236 true)))
 (let (($x235 (= $x196 true)))
 (let (($x227 (= $x235 true)))
 (let (($x27 (= $x91 true)))
 (let (($x245 (= $x27 true)))
 (let (($x246 (= $x245 true)))
 (let (($x203 (= $x215 true)))
 (let (($x204 (= $x203 true)))
 (let (($x206 (= $x204 true)))
 (let ((?x183 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x184 (= (_ bv0 32) ?x183)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x180)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x98 $x181)))
 (let (($x163 (and $x182 $x184)))
 (let (($x149 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x149 $x163)))
 (let (($x9 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x9)))))
 (let (($x185 (and $x65 $x66)))
 (let (($x193 (= $x185 true)))
 (let (($x195 (= $x193 true)))
 (let (($x197 (= $x195 true)))
 (let ((?x132 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x143 (= (bvand ?x132 (_ bv4294967292 32)) ?x132)))
 (let (($x129 (ite $x80 (bvuge ?x132 (bvsub ?x132 (_ bv4 32))) (bvult ?x132 (bvsub ?x132 (_ bv4 32))))))
 (let (($x85 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x94 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x89 (ite $x88 (bvuge input.dst.llvm-%call.Lentry%2%d ?x94) (bvult input.dst.llvm-%call.Lentry%2%d ?x94))))
 (let (($x121 (and true $x89)))
 (let (($x170 (and $x89 $x121)))
 (let (($x155 (and (and (and $x121 $x170) $x85) $x129)))
 (let (($x133 (and $x155 $x143)))
 (let (($x145 (= $x133 true)))
 (let (($x144 (= $x145 true)))
 (let (($x167 (= $x144 true)))
 (let (($x190 (and $x167 $x197)))
 (let (($x60 (and $x190 $x206)))
 (let (($x188 (and $x60 $x246)))
 (let (($x225 (and $x188 $x227)))
 (let (($x264 (and $x225 $x259)))
 (let (($x16 (and $x264 $x261)))
 (let (($x126 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x176 (and $x126 true)))
 (let (($x12 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x174 (=> $x12 $x176)))
 (let (($x28 (= $x12 false)))
 (let (($x113 (= false false)))
 (let (($x142 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x175 (=> $x142 $x113)))
 (let (($x150 (= $x142 true)))
 (let (($x173 (and $x150 $x175)))
 (let (($x128 (and $x173 $x28)))
 (let (($x177 (and $x128 $x174)))
 (let (($x35 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x79 (and $x35 $x177)))
 (let (($x56 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x86 (=> $x56 $x79)))
 (let (($x90 (= $x56 false)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x114 (=> $x168 $x113)))
 (let (($x112 (= $x168 true)))
 (let (($x151 (and $x112 $x114)))
 (let (($x172 (and $x151 $x90)))
 (let (($x34 (and $x172 $x86)))
 (let (($x198 (and $x34 $x16)))
 (let ((?x44 (store (store (store input.dst.llvm-mem.alloc ?x37 (_ bv1 8)) ?x7 (_ bv1 8)) ?x18 (_ bv1 8))))
 (let ((?x36 (store (store (store (store ?x44 ?x32 (_ bv1 8)) ?x53 (_ bv1 8)) ?x169 (_ bv1 8)) ?x52 (_ bv1 8))))
 (let ((?x19 (store ?x36 ?x48 (_ bv1 8))))
 (let ((?x55 (ite $x26 input.dst.llvm-mem.alloc ?x19)))
 (let (($x96 (and (and true (= (select ?x55 (bvadd ?x71 (_ bv0 32))) (_ bv1 8))) (= (select ?x55 (bvadd ?x71 (_ bv1 32))) (_ bv1 8)))))
 (let (($x118 (and (and $x96 (= (select ?x55 (bvadd ?x71 (_ bv2 32))) (_ bv1 8))) (= (select ?x55 (bvadd ?x71 (_ bv3 32))) (_ bv1 8)))))
 (let (($x81 (=> (bvule ?x71 (bvsub (bvadd ?x71 (_ bv4 32)) (_ bv1 32))) (or false (or false $x118)))))
 (let (($x111 (and (and true (= (select ?x55 (bvadd ?x23 (_ bv0 32))) (_ bv1 8))) (= (select ?x55 (bvadd ?x23 (_ bv1 32))) (_ bv1 8)))))
 (let (($x67 (and (and $x111 (= (select ?x55 (bvadd ?x23 (_ bv2 32))) (_ bv1 8))) (= (select ?x55 (bvadd ?x23 (_ bv3 32))) (_ bv1 8)))))
 (let (($x160 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false $x67)))))
 (let (($x17 (and $x160 $x81)))
 (let (($x263 (and $x17 $x198)))
 (let (($x200 (=> $x263 $x275)))
 (let (($x22 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x11 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x11) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x22 (not $x200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x272 (=> true false)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x23 (ite $x26 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x270 (= (_ bv0 32) ?x23)))
 (let ((?x271 (ite $x270 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (bvuge ?x271 (_ bv1 32))))
 (let (($x214 (= true $x102)))
 (let (($x279 (= ?x271 (_ bv0 32))))
 (let (($x276 (= false $x279)))
 (let (($x274 (and $x276 true)))
 (let (($x280 (and $x274 $x214)))
 (let (($x277 (and $x280 $x272)))
 (let (($x5 (= $x277 true)))
 (let (($x275 (= $x5 true)))
 (let ((?x212 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x212)))
 (let (($x268 (= ?x269 input.dst.llvm-%val)))
 (let (($x262 (= $x268 true)))
 (let (($x261 (= $x262 true)))
 (let ((?x43 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x71 (ite $x26 (_ bv4 32) ?x43)))
 (let (($x253 (= (bvand ?x71 (_ bv4294967292 32)) ?x71)))
 (let (($x80 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x95 (ite $x80 (bvuge ?x71 (bvsub ?x71 (_ bv4 32))) (bvult ?x71 (bvsub ?x71 (_ bv4 32))))))
 (let (($x251 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x88 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x241 (ite $x88 (bvuge ?x23 (bvsub ?x23 (_ bv0 32))) (bvult ?x23 (bvsub ?x23 (_ bv0 32))))))
 (let (($x242 (and true $x241)))
 (let (($x8 (and $x241 $x242)))
 (let (($x237 (and (and (and $x242 $x8) $x251) $x95)))
 (let (($x254 (and $x237 $x253)))
 (let ((?x48 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x169 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x53 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x32 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x18 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x7 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x37 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x222 (and (and true (= (select input.dst.llvm-mem.alloc ?x37) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x7) (_ bv2 8)))))
 (let (($x202 (and (and $x222 (= (select input.dst.llvm-mem.alloc ?x18) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x32) (_ bv2 8)))))
 (let (($x232 (and (and $x202 (= (select input.dst.llvm-mem.alloc ?x53) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x169) (_ bv2 8)))))
 (let (($x226 (and (and $x232 (= (select input.dst.llvm-mem.alloc ?x52) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x48) (_ bv2 8)))))
 (let (($x211 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x210 (=> $x211 (or false (or false $x226)))))
 (let (($x91 (or $x26 $x210)))
 (let ((?x187 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x192 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x187)))
 (let (($x213 (or false $x192)))
 (let (($x215 (or $x26 $x213)))
 (let (($x236 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (and (and (and $x236 $x215) $x91) $x254)))
 (let (($x267 (= $x266 true)))
 (let (($x258 (= $x267 true)))
 (let (($x259 (= $x258 true)))
 (let (($x196 (= $x236 true)))
 (let (($x235 (= $x196 true)))
 (let (($x227 (= $x235 true)))
 (let (($x27 (= $x91 true)))
 (let (($x245 (= $x27 true)))
 (let (($x246 (= $x245 true)))
 (let (($x203 (= $x215 true)))
 (let (($x204 (= $x203 true)))
 (let (($x206 (= $x204 true)))
 (let ((?x183 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x184 (= (_ bv0 32) ?x183)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x180)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x98 $x181)))
 (let (($x163 (and $x182 $x184)))
 (let (($x149 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x149 $x163)))
 (let (($x9 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x9)))))
 (let (($x185 (and $x65 $x66)))
 (let (($x193 (= $x185 true)))
 (let (($x195 (= $x193 true)))
 (let (($x197 (= $x195 true)))
 (let ((?x132 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x143 (= (bvand ?x132 (_ bv4294967292 32)) ?x132)))
 (let (($x129 (ite $x80 (bvuge ?x132 (bvsub ?x132 (_ bv4 32))) (bvult ?x132 (bvsub ?x132 (_ bv4 32))))))
 (let (($x85 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x94 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x89 (ite $x88 (bvuge input.dst.llvm-%call.Lentry%2%d ?x94) (bvult input.dst.llvm-%call.Lentry%2%d ?x94))))
 (let (($x121 (and true $x89)))
 (let (($x170 (and $x89 $x121)))
 (let (($x155 (and (and (and $x121 $x170) $x85) $x129)))
 (let (($x133 (and $x155 $x143)))
 (let (($x145 (= $x133 true)))
 (let (($x144 (= $x145 true)))
 (let (($x167 (= $x144 true)))
 (let (($x190 (and $x167 $x197)))
 (let (($x60 (and $x190 $x206)))
 (let (($x188 (and $x60 $x246)))
 (let (($x225 (and $x188 $x227)))
 (let (($x264 (and $x225 $x259)))
 (let (($x16 (and $x264 $x261)))
 (let (($x126 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x176 (and $x126 true)))
 (let (($x12 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x174 (=> $x12 $x176)))
 (let (($x28 (= $x12 false)))
 (let (($x113 (= false false)))
 (let (($x142 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x175 (=> $x142 $x113)))
 (let (($x150 (= $x142 true)))
 (let (($x173 (and $x150 $x175)))
 (let (($x128 (and $x173 $x28)))
 (let (($x177 (and $x128 $x174)))
 (let (($x35 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x79 (and $x35 $x177)))
 (let (($x56 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x86 (=> $x56 $x79)))
 (let (($x90 (= $x56 false)))
 (let (($x168 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x114 (=> $x168 $x113)))
 (let (($x112 (= $x168 true)))
 (let (($x151 (and $x112 $x114)))
 (let (($x172 (and $x151 $x90)))
 (let (($x34 (and $x172 $x86)))
 (let (($x198 (and $x34 $x16)))
 (let ((?x44 (store (store (store input.dst.llvm-mem.alloc ?x37 (_ bv1 8)) ?x7 (_ bv1 8)) ?x18 (_ bv1 8))))
 (let ((?x36 (store (store (store (store ?x44 ?x32 (_ bv1 8)) ?x53 (_ bv1 8)) ?x169 (_ bv1 8)) ?x52 (_ bv1 8))))
 (let ((?x19 (store ?x36 ?x48 (_ bv1 8))))
 (let ((?x55 (ite $x26 input.dst.llvm-mem.alloc ?x19)))
 (let (($x96 (and (and true (= (select ?x55 (bvadd ?x71 (_ bv0 32))) (_ bv1 8))) (= (select ?x55 (bvadd ?x71 (_ bv1 32))) (_ bv1 8)))))
 (let (($x118 (and (and $x96 (= (select ?x55 (bvadd ?x71 (_ bv2 32))) (_ bv1 8))) (= (select ?x55 (bvadd ?x71 (_ bv3 32))) (_ bv1 8)))))
 (let (($x81 (=> (bvule ?x71 (bvsub (bvadd ?x71 (_ bv4 32)) (_ bv1 32))) (or false (or false $x118)))))
 (let (($x111 (and (and true (= (select ?x55 (bvadd ?x23 (_ bv0 32))) (_ bv1 8))) (= (select ?x55 (bvadd ?x23 (_ bv1 32))) (_ bv1 8)))))
 (let (($x67 (and (and $x111 (= (select ?x55 (bvadd ?x23 (_ bv2 32))) (_ bv1 8))) (= (select ?x55 (bvadd ?x23 (_ bv3 32))) (_ bv1 8)))))
 (let (($x160 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false $x67)))))
 (let (($x17 (and $x160 $x81)))
 (let (($x263 (and $x17 $x198)))
 (let (($x200 (=> $x263 $x275)))
 (let (($x22 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x11 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x72 $x11) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x22 (not $x200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x010000c0)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x98003000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!309))
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x010000c3)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x010000c0)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!312 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000002) #x01
    (ite (= x!0 #x010000c1) #x03
    (ite (= x!0 #x04000001) #x01
    (ite (= x!0 #x04000007) #x02
    (ite (= x!0 #x04000005) #x02
    (ite (= x!0 #x04000000) #x01
    (ite (= x!0 #x010000c2) #x03
    (ite (= x!0 #x04000006) #x02
    (ite (= x!0 #x04000003) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x010000c3) #x03
    (ite (= x!0 #x04000004) #x02
    (ite (= x!0 #x010000c0) #x03
      #x00))))))))))))))
  (define-fun k!309 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000002) #x02
    (ite (= x!0 #x010000c1) #x03
    (ite (= x!0 #x04000001) #x02
    (ite (= x!0 #x04000007) #x02
    (ite (= x!0 #x04000005) #x02
    (ite (= x!0 #x04000000) #x02
    (ite (= x!0 #x010000c2) #x03
    (ite (= x!0 #x04000006) #x02
    (ite (= x!0 #x04000003) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x010000c3) #x03
    (ite (= x!0 #x04000004) #x02
    (ite (= x!0 #x010000c0) #x03
      #x00))))))))))))))
  (define-fun k!314 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000002) #x01
    (ite (= x!0 #x010000c1) #x03
    (ite (= x!0 #x04000001) #x01
    (ite (= x!0 #x04000007) #x02
    (ite (= x!0 #x04000005) #x02
    (ite (= x!0 #x04000000) #x01
    (ite (= x!0 #x010000c2) #x03
    (ite (= x!0 #x04000006) #x02
    (ite (= x!0 #x04000003) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x010000c3) #x03
    (ite (= x!0 #x04000004) #x01
    (ite (= x!0 #x010000c0) #x03
      #x00))))))))))))))
  (define-fun k!311 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000002) #x02
    (ite (= x!0 #x010000c1) #x03
    (ite (= x!0 #x04000001) #x01
    (ite (= x!0 #x04000007) #x02
    (ite (= x!0 #x04000005) #x02
    (ite (= x!0 #x04000000) #x01
    (ite (= x!0 #x010000c2) #x03
    (ite (= x!0 #x04000006) #x02
    (ite (= x!0 #x04000003) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x010000c3) #x03
    (ite (= x!0 #x04000004) #x02
    (ite (= x!0 #x010000c0) #x03
      #x00))))))))))))))
  (define-fun k!308 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000002) #x01
    (ite (= x!0 #x010000c1) #x03
    (ite (= x!0 #x04000001) #x01
    (ite (= x!0 #x04000007) #x01
    (ite (= x!0 #x04000005) #x01
    (ite (= x!0 #x04000000) #x01
    (ite (= x!0 #x010000c2) #x03
    (ite (= x!0 #x04000006) #x01
    (ite (= x!0 #x04000003) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x010000c3) #x03
    (ite (= x!0 #x04000004) #x01
    (ite (= x!0 #x010000c0) #x03
      #x00))))))))))))))
  (define-fun k!316 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000002) #x01
    (ite (= x!0 #x010000c1) #x03
    (ite (= x!0 #x04000001) #x01
    (ite (= x!0 #x04000007) #x02
    (ite (= x!0 #x04000005) #x01
    (ite (= x!0 #x04000000) #x01
    (ite (= x!0 #x010000c2) #x03
    (ite (= x!0 #x04000006) #x01
    (ite (= x!0 #x04000003) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x010000c3) #x03
    (ite (= x!0 #x04000004) #x01
    (ite (= x!0 #x010000c0) #x03
      #x00))))))))))))))
  (define-fun k!313 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000002) #x01
    (ite (= x!0 #x010000c1) #x03
    (ite (= x!0 #x04000001) #x01
    (ite (= x!0 #x04000007) #x02
    (ite (= x!0 #x04000005) #x02
    (ite (= x!0 #x04000000) #x01
    (ite (= x!0 #x010000c2) #x03
    (ite (= x!0 #x04000006) #x02
    (ite (= x!0 #x04000003) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x010000c3) #x03
    (ite (= x!0 #x04000004) #x02
    (ite (= x!0 #x010000c0) #x03
      #x00))))))))))))))
  (define-fun k!310 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000002) #x02
    (ite (= x!0 #x010000c1) #x03
    (ite (= x!0 #x04000001) #x02
    (ite (= x!0 #x04000007) #x02
    (ite (= x!0 #x04000005) #x02
    (ite (= x!0 #x04000000) #x01
    (ite (= x!0 #x010000c2) #x03
    (ite (= x!0 #x04000006) #x02
    (ite (= x!0 #x04000003) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x010000c3) #x03
    (ite (= x!0 #x04000004) #x02
    (ite (= x!0 #x010000c0) #x03
      #x00))))))))))))))
  (define-fun k!315 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000002) #x01
    (ite (= x!0 #x010000c1) #x03
    (ite (= x!0 #x04000001) #x01
    (ite (= x!0 #x04000007) #x02
    (ite (= x!0 #x04000005) #x01
    (ite (= x!0 #x04000000) #x01
    (ite (= x!0 #x010000c2) #x03
    (ite (= x!0 #x04000006) #x02
    (ite (= x!0 #x04000003) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x010000c3) #x03
    (ite (= x!0 #x04000004) #x01
    (ite (= x!0 #x010000c0) #x03
      #x00))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1211))
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4f89c508)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4f89c50b)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4f89c508)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!1215 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4f89c50a) #x03
    (ite (= x!0 #x4f89c509) #x03
    (ite (= x!0 #x00000009) #x02
    (ite (= x!0 #x4f89c508) #x03
    (ite (= x!0 #x00000008) #x02
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x0000000a) #x02
    (ite (= x!0 #x4f89c50b) #x03
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x0000000b) #x02
      #x00))))))))))))))
  (define-fun k!1216 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4f89c50a) #x03
    (ite (= x!0 #x4f89c509) #x03
    (ite (= x!0 #x00000009) #x02
    (ite (= x!0 #x4f89c508) #x03
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x0000000a) #x02
    (ite (= x!0 #x4f89c50b) #x03
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x0000000b) #x02
      #x00))))))))))))))
  (define-fun k!1217 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4f89c50a) #x03
    (ite (= x!0 #x4f89c509) #x03
    (ite (= x!0 #x00000009) #x01
    (ite (= x!0 #x4f89c508) #x03
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x0000000a) #x02
    (ite (= x!0 #x4f89c50b) #x03
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x0000000b) #x02
      #x00))))))))))))))
  (define-fun k!1218 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4f89c50a) #x03
    (ite (= x!0 #x4f89c509) #x03
    (ite (= x!0 #x00000009) #x01
    (ite (= x!0 #x4f89c508) #x03
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x0000000a) #x01
    (ite (= x!0 #x4f89c50b) #x03
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x0000000b) #x02
      #x00))))))))))))))
  (define-fun k!1210 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4f89c50a) #x03
    (ite (= x!0 #x4f89c509) #x03
    (ite (= x!0 #x00000009) #x01
    (ite (= x!0 #x4f89c508) #x03
    (ite (= x!0 #x00000008) #x01
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x0000000a) #x01
    (ite (= x!0 #x4f89c50b) #x03
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x0000000b) #x01
      #x00))))))))))))))
  (define-fun k!1211 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4f89c50a) #x03
    (ite (= x!0 #x4f89c509) #x03
    (ite (= x!0 #x00000009) #x02
    (ite (= x!0 #x4f89c508) #x03
    (ite (= x!0 #x00000008) #x02
    (ite (= x!0 #x00000005) #x02
    (ite (= x!0 #x0000000a) #x02
    (ite (= x!0 #x4f89c50b) #x03
    (ite (= x!0 #x00000006) #x02
    (ite (= x!0 #x00000004) #x02
    (ite (= x!0 #x00000007) #x02
    (ite (= x!0 #x0000000b) #x02
      #x00))))))))))))))
  (define-fun k!1212 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4f89c50a) #x03
    (ite (= x!0 #x4f89c509) #x03
    (ite (= x!0 #x00000009) #x02
    (ite (= x!0 #x4f89c508) #x03
    (ite (= x!0 #x00000008) #x02
    (ite (= x!0 #x00000005) #x02
    (ite (= x!0 #x0000000a) #x02
    (ite (= x!0 #x4f89c50b) #x03
    (ite (= x!0 #x00000006) #x02
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000007) #x02
    (ite (= x!0 #x0000000b) #x02
      #x00))))))))))))))
  (define-fun k!1213 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4f89c50a) #x03
    (ite (= x!0 #x4f89c509) #x03
    (ite (= x!0 #x00000009) #x02
    (ite (= x!0 #x4f89c508) #x03
    (ite (= x!0 #x00000008) #x02
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x0000000a) #x02
    (ite (= x!0 #x4f89c50b) #x03
    (ite (= x!0 #x00000006) #x02
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000007) #x02
    (ite (= x!0 #x0000000b) #x02
      #x00))))))))))))))
  (define-fun k!1214 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x4f89c50a) #x03
    (ite (= x!0 #x4f89c509) #x03
    (ite (= x!0 #x00000009) #x02
    (ite (= x!0 #x4f89c508) #x03
    (ite (= x!0 #x00000008) #x02
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x0000000a) #x02
    (ite (= x!0 #x4f89c50b) #x03
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000007) #x02
    (ite (= x!0 #x0000000b) #x02
      #x00))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x48 (ite $x42 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x19 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x55 (ite $x42 (_ bv4 32) ?x19)))
 (let ((?x117 (bvadd ?x55 (_ bv3 32))))
 (let ((?x120 (bvadd ?x55 (_ bv2 32))))
 (let ((?x159 (bvadd ?x55 (_ bv1 32))))
 (let ((?x141 (bvadd ?x55 (_ bv0 32))))
 (let ((?x75 (bvadd ?x48 (_ bv3 32))))
 (let ((?x74 (bvadd ?x48 (_ bv2 32))))
 (let ((?x110 (bvadd ?x48 (_ bv1 32))))
 (let ((?x21 (bvadd ?x48 (_ bv0 32))))
 (let ((?x200 (ite $x42 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_0)))
 (let ((?x282 (store (store ?x200 ?x21 ((_ extract 7 0) input.dst.llvm-%val)) ?x110 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x286 (store (store ?x282 ?x74 ((_ extract 23 16) input.dst.llvm-%val)) ?x75 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x299 (store (store (store ?x286 ?x141 ((_ extract 7 0) (_ bv0 32))) ?x159 ((_ extract 15 8) (_ bv0 32))) ?x120 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x303 (store ?x299 ?x117 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x207 (concat (select ?x303 ?x74) (concat (select ?x303 ?x110) (select ?x303 ?x48)))))
 (let ((?x307 (concat (select ?x303 ?x75) ?x207)))
 (let (($x308 (= input.spec-%var-val-0 ?x307)))
 (let (($x309 (and $x308 false)))
 (let (($x310 (=> true $x309)))
 (let (($x270 (= (_ bv0 32) ?x48)))
 (let ((?x271 (ite $x270 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (bvuge ?x271 (_ bv1 32))))
 (let (($x214 (= true $x102)))
 (let (($x279 (= ?x271 (_ bv0 32))))
 (let (($x276 (= false $x279)))
 (let (($x274 (and $x276 true)))
 (let (($x280 (and $x274 $x214)))
 (let (($x311 (and $x280 $x310)))
 (let (($x312 (= $x311 true)))
 (let (($x313 (= $x312 true)))
 (let ((?x212 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x212)))
 (let (($x268 (= ?x269 input.dst.llvm-%val)))
 (let (($x262 (= $x268 true)))
 (let (($x261 (= $x262 true)))
 (let (($x237 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x132 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x249 (ite $x132 (bvuge ?x55 (bvsub ?x55 (_ bv4 32))) (bvult ?x55 (bvsub ?x55 (_ bv4 32))))))
 (let (($x8 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x162 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x265 (ite $x162 (bvuge ?x48 (bvsub ?x48 (_ bv0 32))) (bvult ?x48 (bvsub ?x48 (_ bv0 32))))))
 (let (($x240 (and true $x265)))
 (let (($x241 (and $x265 $x240)))
 (let (($x247 (and (and (and $x240 $x241) $x8) $x249)))
 (let (($x238 (and $x247 $x237)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x169 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x53 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x69 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x24 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x54 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x20 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x73 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x78 (and (and true (= (select input.dst.llvm-mem.alloc ?x73) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x20) (_ bv2 8)))))
 (let (($x217 (and (and $x78 (= (select input.dst.llvm-mem.alloc ?x54) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x24) (_ bv2 8)))))
 (let (($x233 (and (and $x217 (= (select input.dst.llvm-mem.alloc ?x69) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x53) (_ bv2 8)))))
 (let (($x229 (and (and $x233 (= (select input.dst.llvm-mem.alloc ?x169) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv2 8)))))
 (let ((?x208 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x27 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x208) (or false (or false $x229)))))
 (let (($x243 (or $x42 $x27)))
 (let ((?x192 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x213 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x192)))
 (let (($x215 (or false $x213)))
 (let (($x203 (or $x42 $x215)))
 (let (($x236 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (and (and (and $x236 $x203) $x243) $x238)))
 (let (($x267 (= $x266 true)))
 (let (($x258 (= $x267 true)))
 (let (($x259 (= $x258 true)))
 (let (($x196 (= $x236 true)))
 (let (($x235 (= $x196 true)))
 (let (($x227 (= $x235 true)))
 (let (($x201 (= $x243 true)))
 (let (($x245 (= $x201 true)))
 (let (($x246 (= $x245 true)))
 (let (($x204 (= $x203 true)))
 (let (($x206 (= $x204 true)))
 (let (($x60 (= $x206 true)))
 (let ((?x184 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x184)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x181)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x180 $x182)))
 (let (($x66 (and $x183 $x163)))
 (let (($x178 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x178 $x66)))
 (let (($x135 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x135)))))
 (let (($x193 (and $x98 $x185)))
 (let (($x195 (= $x193 true)))
 (let (($x197 (= $x195 true)))
 (let (($x190 (= $x197 true)))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x133 (= (bvand ?x50 (_ bv4294967292 32)) ?x50)))
 (let (($x153 (ite $x132 (bvuge ?x50 (bvsub ?x50 (_ bv4 32))) (bvult ?x50 (bvsub ?x50 (_ bv4 32))))))
 (let (($x85 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x94 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x121 (ite $x162 (bvuge input.dst.llvm-%call.Lentry%2%d ?x94) (bvult input.dst.llvm-%call.Lentry%2%d ?x94))))
 (let (($x170 (and true $x121)))
 (let (($x166 (and $x121 $x170)))
 (let (($x29 (and (and (and $x170 $x166) $x85) $x153)))
 (let (($x145 (and $x29 $x133)))
 (let (($x144 (= $x145 true)))
 (let (($x167 (= $x144 true)))
 (let (($x134 (= $x167 true)))
 (let (($x187 (and $x134 $x190)))
 (let (($x49 (and $x187 $x60)))
 (let (($x188 (and $x49 $x246)))
 (let (($x225 (and $x188 $x227)))
 (let (($x264 (and $x225 $x259)))
 (let (($x16 (and $x264 $x261)))
 (let (($x176 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x174 (and $x176 true)))
 (let (($x28 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x177 (=> $x28 $x174)))
 (let (($x128 (= $x28 false)))
 (let (($x114 (= false false)))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x173 (=> $x150 $x114)))
 (let (($x175 (= $x150 true)))
 (let (($x12 (and $x175 $x173)))
 (let (($x127 (and $x12 $x128)))
 (let (($x79 (and $x127 $x177)))
 (let (($x147 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x86 (and $x147 $x79)))
 (let (($x90 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x34 (=> $x90 $x86)))
 (let (($x172 (= $x90 false)))
 (let (($x112 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (=> $x112 $x114)))
 (let (($x113 (= $x112 true)))
 (let (($x56 (and $x113 $x151)))
 (let (($x156 (and $x56 $x172)))
 (let (($x88 (and $x156 $x34)))
 (let (($x198 (and $x88 $x16)))
 (let ((?x7 (store (store (store input.dst.llvm-mem.alloc ?x73 (_ bv1 8)) ?x20 (_ bv1 8)) ?x54 (_ bv1 8))))
 (let ((?x63 (store (store (store (store ?x7 ?x24 (_ bv1 8)) ?x69 (_ bv1 8)) ?x53 (_ bv1 8)) ?x169 (_ bv1 8))))
 (let ((?x36 (store ?x63 ?x52 (_ bv1 8))))
 (let ((?x83 (ite $x42 input.dst.llvm-mem.alloc ?x36)))
 (let (($x122 (and (and true (= (select ?x83 ?x141) (_ bv1 8))) (= (select ?x83 ?x159) (_ bv1 8)))))
 (let (($x146 (and (and $x122 (= (select ?x83 ?x120) (_ bv1 8))) (= (select ?x83 ?x117) (_ bv1 8)))))
 (let (($x168 (=> (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32))) (or false (or false $x146)))))
 (let (($x108 (and (and true (= (select ?x83 ?x21) (_ bv1 8))) (= (select ?x83 ?x110) (_ bv1 8)))))
 (let (($x45 (and (and $x108 (= (select ?x83 ?x74) (_ bv1 8))) (= (select ?x83 ?x75) (_ bv1 8)))))
 (let (($x51 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false $x45)))))
 (let (($x137 (and $x51 $x168)))
 (let (($x263 (and $x137 $x198)))
 (let (($x314 (=> $x263 $x313)))
 (let (($x57 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x26 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x23 $x26) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x106 (and $x57 (not $x314))))
 (let (($x294 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x288 (select solver-mem_0 us-bounded-var!)))
 (let ((?x208 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x296 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x208))))
 (ite $x296 (= ?x288 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x288 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x294) $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x48 (ite $x42 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x19 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x55 (ite $x42 (_ bv4 32) ?x19)))
 (let ((?x117 (bvadd ?x55 (_ bv3 32))))
 (let ((?x120 (bvadd ?x55 (_ bv2 32))))
 (let ((?x159 (bvadd ?x55 (_ bv1 32))))
 (let ((?x141 (bvadd ?x55 (_ bv0 32))))
 (let ((?x75 (bvadd ?x48 (_ bv3 32))))
 (let ((?x74 (bvadd ?x48 (_ bv2 32))))
 (let ((?x110 (bvadd ?x48 (_ bv1 32))))
 (let ((?x21 (bvadd ?x48 (_ bv0 32))))
 (let ((?x200 (ite $x42 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_0)))
 (let ((?x282 (store (store ?x200 ?x21 ((_ extract 7 0) input.dst.llvm-%val)) ?x110 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x286 (store (store ?x282 ?x74 ((_ extract 23 16) input.dst.llvm-%val)) ?x75 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x299 (store (store (store ?x286 ?x141 ((_ extract 7 0) (_ bv0 32))) ?x159 ((_ extract 15 8) (_ bv0 32))) ?x120 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x303 (store ?x299 ?x117 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x207 (concat (select ?x303 ?x74) (concat (select ?x303 ?x110) (select ?x303 ?x48)))))
 (let ((?x307 (concat (select ?x303 ?x75) ?x207)))
 (let (($x308 (= input.spec-%var-val-0 ?x307)))
 (let (($x309 (and $x308 false)))
 (let (($x310 (=> true $x309)))
 (let (($x270 (= (_ bv0 32) ?x48)))
 (let ((?x271 (ite $x270 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (bvuge ?x271 (_ bv1 32))))
 (let (($x214 (= true $x102)))
 (let (($x279 (= ?x271 (_ bv0 32))))
 (let (($x276 (= false $x279)))
 (let (($x274 (and $x276 true)))
 (let (($x280 (and $x274 $x214)))
 (let (($x311 (and $x280 $x310)))
 (let (($x312 (= $x311 true)))
 (let (($x313 (= $x312 true)))
 (let ((?x212 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x212)))
 (let (($x268 (= ?x269 input.dst.llvm-%val)))
 (let (($x262 (= $x268 true)))
 (let (($x261 (= $x262 true)))
 (let (($x237 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x132 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x249 (ite $x132 (bvuge ?x55 (bvsub ?x55 (_ bv4 32))) (bvult ?x55 (bvsub ?x55 (_ bv4 32))))))
 (let (($x8 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x162 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x265 (ite $x162 (bvuge ?x48 (bvsub ?x48 (_ bv0 32))) (bvult ?x48 (bvsub ?x48 (_ bv0 32))))))
 (let (($x240 (and true $x265)))
 (let (($x241 (and $x265 $x240)))
 (let (($x247 (and (and (and $x240 $x241) $x8) $x249)))
 (let (($x238 (and $x247 $x237)))
 (let ((?x52 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x169 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x53 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x69 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x24 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x54 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x20 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x73 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x78 (and (and true (= (select input.dst.llvm-mem.alloc ?x73) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x20) (_ bv2 8)))))
 (let (($x217 (and (and $x78 (= (select input.dst.llvm-mem.alloc ?x54) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x24) (_ bv2 8)))))
 (let (($x233 (and (and $x217 (= (select input.dst.llvm-mem.alloc ?x69) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x53) (_ bv2 8)))))
 (let (($x229 (and (and $x233 (= (select input.dst.llvm-mem.alloc ?x169) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x52) (_ bv2 8)))))
 (let ((?x208 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x27 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x208) (or false (or false $x229)))))
 (let (($x243 (or $x42 $x27)))
 (let ((?x192 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x213 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x192)))
 (let (($x215 (or false $x213)))
 (let (($x203 (or $x42 $x215)))
 (let (($x236 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (and (and (and $x236 $x203) $x243) $x238)))
 (let (($x267 (= $x266 true)))
 (let (($x258 (= $x267 true)))
 (let (($x259 (= $x258 true)))
 (let (($x196 (= $x236 true)))
 (let (($x235 (= $x196 true)))
 (let (($x227 (= $x235 true)))
 (let (($x201 (= $x243 true)))
 (let (($x245 (= $x201 true)))
 (let (($x246 (= $x245 true)))
 (let (($x204 (= $x203 true)))
 (let (($x206 (= $x204 true)))
 (let (($x60 (= $x206 true)))
 (let ((?x184 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x184)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x181)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x180 $x182)))
 (let (($x66 (and $x183 $x163)))
 (let (($x178 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x178 $x66)))
 (let (($x135 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x135)))))
 (let (($x193 (and $x98 $x185)))
 (let (($x195 (= $x193 true)))
 (let (($x197 (= $x195 true)))
 (let (($x190 (= $x197 true)))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x133 (= (bvand ?x50 (_ bv4294967292 32)) ?x50)))
 (let (($x153 (ite $x132 (bvuge ?x50 (bvsub ?x50 (_ bv4 32))) (bvult ?x50 (bvsub ?x50 (_ bv4 32))))))
 (let (($x85 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x94 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x121 (ite $x162 (bvuge input.dst.llvm-%call.Lentry%2%d ?x94) (bvult input.dst.llvm-%call.Lentry%2%d ?x94))))
 (let (($x170 (and true $x121)))
 (let (($x166 (and $x121 $x170)))
 (let (($x29 (and (and (and $x170 $x166) $x85) $x153)))
 (let (($x145 (and $x29 $x133)))
 (let (($x144 (= $x145 true)))
 (let (($x167 (= $x144 true)))
 (let (($x134 (= $x167 true)))
 (let (($x187 (and $x134 $x190)))
 (let (($x49 (and $x187 $x60)))
 (let (($x188 (and $x49 $x246)))
 (let (($x225 (and $x188 $x227)))
 (let (($x264 (and $x225 $x259)))
 (let (($x16 (and $x264 $x261)))
 (let (($x176 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x174 (and $x176 true)))
 (let (($x28 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x177 (=> $x28 $x174)))
 (let (($x128 (= $x28 false)))
 (let (($x114 (= false false)))
 (let (($x150 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x173 (=> $x150 $x114)))
 (let (($x175 (= $x150 true)))
 (let (($x12 (and $x175 $x173)))
 (let (($x127 (and $x12 $x128)))
 (let (($x79 (and $x127 $x177)))
 (let (($x147 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x86 (and $x147 $x79)))
 (let (($x90 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x34 (=> $x90 $x86)))
 (let (($x172 (= $x90 false)))
 (let (($x112 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x151 (=> $x112 $x114)))
 (let (($x113 (= $x112 true)))
 (let (($x56 (and $x113 $x151)))
 (let (($x156 (and $x56 $x172)))
 (let (($x88 (and $x156 $x34)))
 (let (($x198 (and $x88 $x16)))
 (let ((?x7 (store (store (store input.dst.llvm-mem.alloc ?x73 (_ bv1 8)) ?x20 (_ bv1 8)) ?x54 (_ bv1 8))))
 (let ((?x63 (store (store (store (store ?x7 ?x24 (_ bv1 8)) ?x69 (_ bv1 8)) ?x53 (_ bv1 8)) ?x169 (_ bv1 8))))
 (let ((?x36 (store ?x63 ?x52 (_ bv1 8))))
 (let ((?x83 (ite $x42 input.dst.llvm-mem.alloc ?x36)))
 (let (($x122 (and (and true (= (select ?x83 ?x141) (_ bv1 8))) (= (select ?x83 ?x159) (_ bv1 8)))))
 (let (($x146 (and (and $x122 (= (select ?x83 ?x120) (_ bv1 8))) (= (select ?x83 ?x117) (_ bv1 8)))))
 (let (($x168 (=> (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32))) (or false (or false $x146)))))
 (let (($x108 (and (and true (= (select ?x83 ?x21) (_ bv1 8))) (= (select ?x83 ?x110) (_ bv1 8)))))
 (let (($x45 (and (and $x108 (= (select ?x83 ?x74) (_ bv1 8))) (= (select ?x83 ?x75) (_ bv1 8)))))
 (let (($x51 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false $x45)))))
 (let (($x137 (and $x51 $x168)))
 (let (($x263 (and $x137 $x198)))
 (let (($x314 (=> $x263 $x313)))
 (let (($x57 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x26 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x23 $x26) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x106 (and $x57 (not $x314))))
 (let (($x294 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x288 (select solver-mem_0 us-bounded-var!)))
 (let ((?x208 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x296 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x208))))
 (ite $x296 (= ?x288 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x288 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x294) $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x022c000c)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00040004)
  (define-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32)
    #x7ffffffc)
  (define-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!83))
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!84))
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!75))
  (define-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00040007)
  (define-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00040004)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!80 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040005) #x03
    (ite (= x!0 #x022c000c) #x01
    (ite (= x!0 #x00040006) #x03
    (ite (= x!0 #x022c000f) #x01
    (ite (= x!0 #x022c0012) #x02
    (ite (= x!0 #x022c0013) #x02
    (ite (= x!0 #x02342004) #x02
    (ite (= x!0 #x022c000e) #x01
    (ite (= x!0 #x022c000d) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00040007) #x03
    (ite (= x!0 #x022c0011) #x02
    (ite (= x!0 #x022c0010) #x01
    (ite (= x!0 #x00040004) #x03
      #x00)))))))))))))))
  (define-fun k!74 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040005) #x03
    (ite (= x!0 #x022c000c) #x01
    (ite (= x!0 #x00040006) #x03
    (ite (= x!0 #x022c000f) #x01
    (ite (= x!0 #x022c0012) #x01
    (ite (= x!0 #x022c0013) #x01
    (ite (= x!0 #x02342004) #x02
    (ite (= x!0 #x022c000e) #x01
    (ite (= x!0 #x022c000d) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00040007) #x03
    (ite (= x!0 #x022c0011) #x01
    (ite (= x!0 #x022c0010) #x01
    (ite (= x!0 #x00040004) #x03
      #x00)))))))))))))))
  (define-fun k!79 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040005) #x03
    (ite (= x!0 #x022c000c) #x01
    (ite (= x!0 #x00040006) #x03
    (ite (= x!0 #x022c000f) #x01
    (ite (= x!0 #x022c0012) #x02
    (ite (= x!0 #x022c0013) #x02
    (ite (= x!0 #x02342004) #x02
    (ite (= x!0 #x022c000e) #x01
    (ite (= x!0 #x022c000d) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00040007) #x03
    (ite (= x!0 #x022c0011) #x02
    (ite (= x!0 #x022c0010) #x02
    (ite (= x!0 #x00040004) #x03
      #x00)))))))))))))))
  (define-fun k!84 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x022c0010) #x20
      #x00))
  (define-fun k!78 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040005) #x03
    (ite (= x!0 #x022c000c) #x01
    (ite (= x!0 #x00040006) #x03
    (ite (= x!0 #x022c000f) #x02
    (ite (= x!0 #x022c0012) #x02
    (ite (= x!0 #x022c0013) #x02
    (ite (= x!0 #x02342004) #x02
    (ite (= x!0 #x022c000e) #x01
    (ite (= x!0 #x022c000d) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00040007) #x03
    (ite (= x!0 #x022c0011) #x02
    (ite (= x!0 #x022c0010) #x02
    (ite (= x!0 #x00040004) #x03
      #x00)))))))))))))))
  (define-fun k!83 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!77 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040005) #x03
    (ite (= x!0 #x022c000c) #x01
    (ite (= x!0 #x00040006) #x03
    (ite (= x!0 #x022c000f) #x02
    (ite (= x!0 #x022c0012) #x02
    (ite (= x!0 #x022c0013) #x02
    (ite (= x!0 #x02342004) #x02
    (ite (= x!0 #x022c000e) #x02
    (ite (= x!0 #x022c000d) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00040007) #x03
    (ite (= x!0 #x022c0011) #x02
    (ite (= x!0 #x022c0010) #x02
    (ite (= x!0 #x00040004) #x03
      #x00)))))))))))))))
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040005) #x03
    (ite (= x!0 #x022c000c) #x01
    (ite (= x!0 #x00040006) #x03
    (ite (= x!0 #x022c000f) #x01
    (ite (= x!0 #x022c0012) #x01
    (ite (= x!0 #x022c0013) #x02
    (ite (= x!0 #x02342004) #x02
    (ite (= x!0 #x022c000e) #x01
    (ite (= x!0 #x022c000d) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00040007) #x03
    (ite (= x!0 #x022c0011) #x01
    (ite (= x!0 #x022c0010) #x01
    (ite (= x!0 #x00040004) #x03
      #x00)))))))))))))))
  (define-fun k!76 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040005) #x03
    (ite (= x!0 #x022c000c) #x01
    (ite (= x!0 #x00040006) #x03
    (ite (= x!0 #x022c000f) #x02
    (ite (= x!0 #x022c0012) #x02
    (ite (= x!0 #x022c0013) #x02
    (ite (= x!0 #x02342004) #x02
    (ite (= x!0 #x022c000e) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x022c000d) #x02
    (ite (= x!0 #x00040007) #x03
    (ite (= x!0 #x022c0011) #x02
    (ite (= x!0 #x022c0010) #x02
    (ite (= x!0 #x00040004) #x03
      #x00)))))))))))))))
  (define-fun k!81 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040005) #x03
    (ite (= x!0 #x022c000c) #x01
    (ite (= x!0 #x00040006) #x03
    (ite (= x!0 #x022c000f) #x01
    (ite (= x!0 #x022c0012) #x02
    (ite (= x!0 #x022c0013) #x02
    (ite (= x!0 #x02342004) #x02
    (ite (= x!0 #x022c000e) #x01
    (ite (= x!0 #x022c000d) #x01
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x00040007) #x03
    (ite (= x!0 #x022c0011) #x01
    (ite (= x!0 #x022c0010) #x01
    (ite (= x!0 #x00040004) #x03
      #x00)))))))))))))))
  (define-fun k!75 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040005) #x03
    (ite (= x!0 #x022c000c) #x02
    (ite (= x!0 #x00040006) #x03
    (ite (= x!0 #x022c000f) #x02
    (ite (= x!0 #x022c0012) #x02
    (ite (= x!0 #x022c0013) #x02
    (ite (= x!0 #x02342004) #x02
    (ite (= x!0 #x022c000e) #x02
    (ite (= x!0 #x00000000) #x02
    (ite (= x!0 #x022c000d) #x02
    (ite (= x!0 #x00040007) #x03
    (ite (= x!0 #x022c0011) #x02
    (ite (= x!0 #x022c0010) #x02
    (ite (= x!0 #x00040004) #x03
      #x00)))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x208 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x20 (ite $x208 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x54 (bvadd ?x20 (_ bv4 32))))
 (let ((?x37 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x40 (ite $x208 (_ bv4 32) ?x37)))
 (let ((?x140 (bvadd ?x40 (_ bv3 32))))
 (let ((?x43 (bvadd ?x40 (_ bv2 32))))
 (let ((?x67 (bvadd ?x40 (_ bv1 32))))
 (let ((?x109 (bvadd ?x40 (_ bv0 32))))
 (let ((?x52 (bvadd ?x20 (_ bv3 32))))
 (let ((?x25 (bvadd ?x20 (_ bv2 32))))
 (let ((?x32 (bvadd ?x20 (_ bv1 32))))
 (let ((?x14 (bvadd ?x20 (_ bv0 32))))
 (let ((?x198 (ite $x208 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_1)))
 (let ((?x279 (store (store ?x198 ?x14 ((_ extract 7 0) input.dst.llvm-%val)) ?x32 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x214 (store (store ?x279 ?x25 ((_ extract 23 16) input.dst.llvm-%val)) ?x52 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x295 (store (store (store ?x214 ?x109 ((_ extract 7 0) (_ bv0 32))) ?x67 ((_ extract 15 8) (_ bv0 32))) ?x43 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x302 (store ?x295 ?x140 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x315 (concat (select ?x302 (bvadd ?x54 (_ bv2 32))) (concat (select ?x302 (bvadd ?x54 (_ bv1 32))) (select ?x302 ?x54)))))
 (let ((?x304 (concat (select ?x302 (bvadd ?x54 (_ bv3 32))) ?x315)))
 (let (($x317 (= (_ bv0 32) ?x304)))
 (let ((?x318 (ite $x317 (_ bv0 32) (_ bv1 32))))
 (let (($x320 (bvuge ?x318 (_ bv1 32))))
 (let (($x321 (= false $x320)))
 (let (($x68 (= ?x318 (_ bv0 32))))
 (let (($x209 (= true $x68)))
 (let (($x319 (and $x209 true)))
 (let (($x322 (and $x319 $x321)))
 (let (($x323 (and $x322 true)))
 (let ((?x305 (concat (select ?x302 ?x25) (concat (select ?x302 ?x32) (select ?x302 ?x20)))))
 (let ((?x307 (concat (select ?x302 ?x52) ?x305)))
 (let (($x308 (= input.spec-%var-val-0 ?x307)))
 (let (($x324 (and $x308 $x323)))
 (let (($x325 (=> true $x324)))
 (let (($x267 (= (_ bv0 32) ?x20)))
 (let ((?x258 (ite $x267 (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x258 (_ bv1 32))))
 (let (($x269 (= true $x212)))
 (let (($x259 (= ?x258 (_ bv0 32))))
 (let (($x264 (= false $x259)))
 (let (($x100 (and $x264 true)))
 (let (($x260 (and $x100 $x269)))
 (let (($x326 (and $x260 $x325)))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let ((?x248 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x248)))
 (let (($x249 (= ?x250 input.dst.llvm-%val)))
 (let (($x247 (= $x249 true)))
 (let (($x95 (= $x247 true)))
 (let (($x255 (= (bvand ?x40 (_ bv4294967292 32)) ?x40)))
 (let (($x86 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x235 (ite $x86 (bvuge ?x40 (bvsub ?x40 (_ bv4 32))) (bvult ?x40 (bvsub ?x40 (_ bv4 32))))))
 (let (($x228 (= (bvand ?x20 (_ bv4294967292 32)) ?x20)))
 (let (($x175 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x201 (ite $x175 (bvuge ?x20 (bvsub ?x20 (_ bv0 32))) (bvult ?x20 (bvsub ?x20 (_ bv0 32))))))
 (let (($x245 (and true $x201)))
 (let (($x246 (and $x201 $x245)))
 (let (($x253 (and (and (and $x245 $x246) $x228) $x235)))
 (let (($x256 (and $x253 $x255)))
 (let ((?x73 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x58 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x42 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x6 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x13 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x26 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x61 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x5 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x213 (and (and true (= (select input.dst.llvm-mem.alloc ?x5) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x61) (_ bv2 8)))))
 (let (($x49 (and (and $x213 (= (select input.dst.llvm-mem.alloc ?x26) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x13) (_ bv2 8)))))
 (let (($x222 (and (and $x49 (= (select input.dst.llvm-mem.alloc ?x6) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x42) (_ bv2 8)))))
 (let (($x202 (and (and $x222 (= (select input.dst.llvm-mem.alloc ?x58) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x73) (_ bv2 8)))))
 (let ((?x193 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x38 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x193) (or false (or false $x202)))))
 (let (($x163 (or $x208 $x38)))
 (let ((?x98 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x82 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x98)))
 (let (($x178 (or false $x82)))
 (let (($x180 (or $x208 $x178)))
 (let (($x191 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x240 (and (and (and $x191 $x180) $x163) $x256)))
 (let (($x241 (= $x240 true)))
 (let (($x239 (= $x241 true)))
 (let (($x242 (= $x239 true)))
 (let (($x223 (= $x191 true)))
 (let (($x226 (= $x223 true)))
 (let (($x229 (= $x226 true)))
 (let (($x66 (= $x163 true)))
 (let (($x231 (= $x66 true)))
 (let (($x232 (= $x231 true)))
 (let (($x181 (= $x180 true)))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x136)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x144 $x134)))
 (let (($x157 (and $x179 $x149)))
 (let (($x155 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x155 $x157)))
 (let (($x153 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x153)))))
 (let (($x124 (and $x145 $x9)))
 (let (($x62 (= $x124 true)))
 (let (($x135 (= $x62 true)))
 (let (($x65 (= $x135 true)))
 (let ((?x177 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x121 (= (bvand ?x177 (_ bv4294967292 32)) ?x177)))
 (let (($x162 (ite $x86 (bvuge ?x177 (bvsub ?x177 (_ bv4 32))) (bvult ?x177 (bvsub ?x177 (_ bv4 32))))))
 (let (($x174 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x150 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x28 (ite $x175 (bvuge input.dst.llvm-%call.Lentry%2%d ?x150) (bvult input.dst.llvm-%call.Lentry%2%d ?x150))))
 (let (($x128 (and true $x28)))
 (let (($x127 (and $x28 $x128)))
 (let (($x87 (and (and (and $x128 $x127) $x174) $x162)))
 (let (($x170 (and $x87 $x121)))
 (let (($x166 (= $x170 true)))
 (let (($x129 (= $x166 true)))
 (let (($x125 (= $x129 true)))
 (let (($x154 (and $x125 $x65)))
 (let (($x184 (and $x154 $x183)))
 (let (($x233 (and $x184 $x232)))
 (let (($x244 (and $x233 $x229)))
 (let (($x8 (and $x244 $x242)))
 (let (($x237 (and $x8 $x95)))
 (let (($x151 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x56 (and $x151 true)))
 (let (($x15 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x90 (=> $x15 $x56)))
 (let (($x112 (= $x15 false)))
 (let (($x122 (= false false)))
 (let (($x81 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x168 (=> $x81 $x122)))
 (let (($x17 (= $x81 true)))
 (let (($x137 (and $x17 $x168)))
 (let (($x113 (and $x137 $x112)))
 (let (($x172 (and $x113 $x90)))
 (let (($x115 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x156 (and $x115 $x172)))
 (let (($x104 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x35 (=> $x104 $x156)))
 (let (($x105 (= $x104 false)))
 (let (($x96 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x120 (=> $x96 $x122)))
 (let (($x165 (= $x96 true)))
 (let (($x119 (and $x165 $x120)))
 (let (($x117 (and $x119 $x105)))
 (let (($x147 (and $x117 $x35)))
 (let (($x238 (and $x147 $x237)))
 (let ((?x39 (store (store (store input.dst.llvm-mem.alloc ?x5 (_ bv1 8)) ?x61 (_ bv1 8)) ?x26 (_ bv1 8))))
 (let ((?x164 (store (store (store (store ?x39 ?x13 (_ bv1 8)) ?x6 (_ bv1 8)) ?x42 (_ bv1 8)) ?x58 (_ bv1 8))))
 (let ((?x138 (store ?x164 ?x73 (_ bv1 8))))
 (let ((?x47 (ite $x208 input.dst.llvm-mem.alloc ?x138)))
 (let (($x160 (and (and true (= (select ?x47 ?x109) (_ bv1 8))) (= (select ?x47 ?x67) (_ bv1 8)))))
 (let (($x141 (and (and $x160 (= (select ?x47 ?x43) (_ bv1 8))) (= (select ?x47 ?x140) (_ bv1 8)))))
 (let (($x159 (=> (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x76 (and (and true (= (select ?x47 ?x14) (_ bv1 8))) (= (select ?x47 ?x32) (_ bv1 8)))))
 (let (($x21 (and (and $x76 (= (select ?x47 ?x25) (_ bv1 8))) (= (select ?x47 ?x52) (_ bv1 8)))))
 (let (($x110 (=> (bvule ?x20 (bvsub ?x54 (_ bv1 32))) (or false (or false $x21)))))
 (let (($x111 (and $x110 $x159)))
 (let (($x266 (and $x111 $x238)))
 (let (($x329 (=> $x266 $x328)))
 (let (($x294 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x272 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x287 $x272) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x331 (and $x294 (not $x329))))
 (let (($x285 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x200 (select solver-mem_1 us-bounded-var!)))
 (let ((?x193 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x283 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x193))))
 (ite $x283 (= ?x200 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x200 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x285) $x331)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local_alloc_count.=L0%0%d= () (_ BitVec 32))
(assert
 (let (($x208 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x20 (ite $x208 (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x54 (bvadd ?x20 (_ bv4 32))))
 (let ((?x37 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x40 (ite $x208 (_ bv4 32) ?x37)))
 (let ((?x140 (bvadd ?x40 (_ bv3 32))))
 (let ((?x43 (bvadd ?x40 (_ bv2 32))))
 (let ((?x67 (bvadd ?x40 (_ bv1 32))))
 (let ((?x109 (bvadd ?x40 (_ bv0 32))))
 (let ((?x52 (bvadd ?x20 (_ bv3 32))))
 (let ((?x25 (bvadd ?x20 (_ bv2 32))))
 (let ((?x32 (bvadd ?x20 (_ bv1 32))))
 (let ((?x14 (bvadd ?x20 (_ bv0 32))))
 (let ((?x198 (ite $x208 input.dst.llvm-mem.Lentry%1%fcallEnd solver-mem_1)))
 (let ((?x279 (store (store ?x198 ?x14 ((_ extract 7 0) input.dst.llvm-%val)) ?x32 ((_ extract 15 8) input.dst.llvm-%val))))
 (let ((?x214 (store (store ?x279 ?x25 ((_ extract 23 16) input.dst.llvm-%val)) ?x52 ((_ extract 31 24) input.dst.llvm-%val))))
 (let ((?x295 (store (store (store ?x214 ?x109 ((_ extract 7 0) (_ bv0 32))) ?x67 ((_ extract 15 8) (_ bv0 32))) ?x43 ((_ extract 23 16) (_ bv0 32)))))
 (let ((?x302 (store ?x295 ?x140 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x315 (concat (select ?x302 (bvadd ?x54 (_ bv2 32))) (concat (select ?x302 (bvadd ?x54 (_ bv1 32))) (select ?x302 ?x54)))))
 (let ((?x304 (concat (select ?x302 (bvadd ?x54 (_ bv3 32))) ?x315)))
 (let (($x317 (= (_ bv0 32) ?x304)))
 (let ((?x318 (ite $x317 (_ bv0 32) (_ bv1 32))))
 (let (($x320 (bvuge ?x318 (_ bv1 32))))
 (let (($x321 (= false $x320)))
 (let (($x68 (= ?x318 (_ bv0 32))))
 (let (($x209 (= true $x68)))
 (let (($x319 (and $x209 true)))
 (let (($x322 (and $x319 $x321)))
 (let (($x323 (and $x322 true)))
 (let ((?x305 (concat (select ?x302 ?x25) (concat (select ?x302 ?x32) (select ?x302 ?x20)))))
 (let ((?x307 (concat (select ?x302 ?x52) ?x305)))
 (let (($x308 (= input.spec-%var-val-0 ?x307)))
 (let (($x324 (and $x308 $x323)))
 (let (($x325 (=> true $x324)))
 (let (($x267 (= (_ bv0 32) ?x20)))
 (let ((?x258 (ite $x267 (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x258 (_ bv1 32))))
 (let (($x269 (= true $x212)))
 (let (($x259 (= ?x258 (_ bv0 32))))
 (let (($x264 (= false $x259)))
 (let (($x100 (and $x264 true)))
 (let (($x260 (and $x100 $x269)))
 (let (($x326 (and $x260 $x325)))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let ((?x248 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x248)))
 (let (($x249 (= ?x250 input.dst.llvm-%val)))
 (let (($x247 (= $x249 true)))
 (let (($x95 (= $x247 true)))
 (let (($x255 (= (bvand ?x40 (_ bv4294967292 32)) ?x40)))
 (let (($x86 (bvsge (_ bv4 32) (_ bv0 32))))
 (let (($x235 (ite $x86 (bvuge ?x40 (bvsub ?x40 (_ bv4 32))) (bvult ?x40 (bvsub ?x40 (_ bv4 32))))))
 (let (($x228 (= (bvand ?x20 (_ bv4294967292 32)) ?x20)))
 (let (($x175 (bvsge (_ bv0 32) (_ bv0 32))))
 (let (($x201 (ite $x175 (bvuge ?x20 (bvsub ?x20 (_ bv0 32))) (bvult ?x20 (bvsub ?x20 (_ bv0 32))))))
 (let (($x245 (and true $x201)))
 (let (($x246 (and $x201 $x245)))
 (let (($x253 (and (and (and $x245 $x246) $x228) $x235)))
 (let (($x256 (and $x253 $x255)))
 (let ((?x73 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32))))
 (let ((?x58 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32))))
 (let ((?x42 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32))))
 (let ((?x6 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32))))
 (let ((?x13 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32))))
 (let ((?x26 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32))))
 (let ((?x61 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32))))
 (let ((?x5 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32))))
 (let (($x213 (and (and true (= (select input.dst.llvm-mem.alloc ?x5) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x61) (_ bv2 8)))))
 (let (($x49 (and (and $x213 (= (select input.dst.llvm-mem.alloc ?x26) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x13) (_ bv2 8)))))
 (let (($x222 (and (and $x49 (= (select input.dst.llvm-mem.alloc ?x6) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x42) (_ bv2 8)))))
 (let (($x202 (and (and $x222 (= (select input.dst.llvm-mem.alloc ?x58) (_ bv2 8))) (= (select input.dst.llvm-mem.alloc ?x73) (_ bv2 8)))))
 (let ((?x193 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x38 (=> (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x193) (or false (or false $x202)))))
 (let (($x163 (or $x208 $x38)))
 (let ((?x98 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x82 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x98)))
 (let (($x178 (or false $x82)))
 (let (($x180 (or $x208 $x178)))
 (let (($x191 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x240 (and (and (and $x191 $x180) $x163) $x256)))
 (let (($x241 (= $x240 true)))
 (let (($x239 (= $x241 true)))
 (let (($x242 (= $x239 true)))
 (let (($x223 (= $x191 true)))
 (let (($x226 (= $x223 true)))
 (let (($x229 (= $x226 true)))
 (let (($x66 (= $x163 true)))
 (let (($x231 (= $x66 true)))
 (let (($x232 (= $x231 true)))
 (let (($x181 (= $x180 true)))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let ((?x136 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x136)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x144 $x134)))
 (let (($x157 (and $x179 $x149)))
 (let (($x155 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x155 $x157)))
 (let (($x153 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x153)))))
 (let (($x124 (and $x145 $x9)))
 (let (($x62 (= $x124 true)))
 (let (($x135 (= $x62 true)))
 (let (($x65 (= $x135 true)))
 (let ((?x177 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x121 (= (bvand ?x177 (_ bv4294967292 32)) ?x177)))
 (let (($x162 (ite $x86 (bvuge ?x177 (bvsub ?x177 (_ bv4 32))) (bvult ?x177 (bvsub ?x177 (_ bv4 32))))))
 (let (($x174 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x150 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x28 (ite $x175 (bvuge input.dst.llvm-%call.Lentry%2%d ?x150) (bvult input.dst.llvm-%call.Lentry%2%d ?x150))))
 (let (($x128 (and true $x28)))
 (let (($x127 (and $x28 $x128)))
 (let (($x87 (and (and (and $x128 $x127) $x174) $x162)))
 (let (($x170 (and $x87 $x121)))
 (let (($x166 (= $x170 true)))
 (let (($x129 (= $x166 true)))
 (let (($x125 (= $x129 true)))
 (let (($x154 (and $x125 $x65)))
 (let (($x184 (and $x154 $x183)))
 (let (($x233 (and $x184 $x232)))
 (let (($x244 (and $x233 $x229)))
 (let (($x8 (and $x244 $x242)))
 (let (($x237 (and $x8 $x95)))
 (let (($x151 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x56 (and $x151 true)))
 (let (($x15 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x90 (=> $x15 $x56)))
 (let (($x112 (= $x15 false)))
 (let (($x122 (= false false)))
 (let (($x81 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x168 (=> $x81 $x122)))
 (let (($x17 (= $x81 true)))
 (let (($x137 (and $x17 $x168)))
 (let (($x113 (and $x137 $x112)))
 (let (($x172 (and $x113 $x90)))
 (let (($x115 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x156 (and $x115 $x172)))
 (let (($x104 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x35 (=> $x104 $x156)))
 (let (($x105 (= $x104 false)))
 (let (($x96 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x120 (=> $x96 $x122)))
 (let (($x165 (= $x96 true)))
 (let (($x119 (and $x165 $x120)))
 (let (($x117 (and $x119 $x105)))
 (let (($x147 (and $x117 $x35)))
 (let (($x238 (and $x147 $x237)))
 (let ((?x39 (store (store (store input.dst.llvm-mem.alloc ?x5 (_ bv1 8)) ?x61 (_ bv1 8)) ?x26 (_ bv1 8))))
 (let ((?x164 (store (store (store (store ?x39 ?x13 (_ bv1 8)) ?x6 (_ bv1 8)) ?x42 (_ bv1 8)) ?x58 (_ bv1 8))))
 (let ((?x138 (store ?x164 ?x73 (_ bv1 8))))
 (let ((?x47 (ite $x208 input.dst.llvm-mem.alloc ?x138)))
 (let (($x160 (and (and true (= (select ?x47 ?x109) (_ bv1 8))) (= (select ?x47 ?x67) (_ bv1 8)))))
 (let (($x141 (and (and $x160 (= (select ?x47 ?x43) (_ bv1 8))) (= (select ?x47 ?x140) (_ bv1 8)))))
 (let (($x159 (=> (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x76 (and (and true (= (select ?x47 ?x14) (_ bv1 8))) (= (select ?x47 ?x32) (_ bv1 8)))))
 (let (($x21 (and (and $x76 (= (select ?x47 ?x25) (_ bv1 8))) (= (select ?x47 ?x52) (_ bv1 8)))))
 (let (($x110 (=> (bvule ?x20 (bvsub ?x54 (_ bv1 32))) (or false (or false $x21)))))
 (let (($x111 (and $x110 $x159)))
 (let (($x266 (and $x111 $x238)))
 (let (($x329 (=> $x266 $x328)))
 (let (($x294 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x272 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x287 $x272) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (let (($x331 (and $x294 (not $x329))))
 (let (($x285 (forall ((us-bounded-var! (_ BitVec 32)) )(let ((?x200 (select solver-mem_1 us-bounded-var!)))
 (let ((?x193 (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32))))
 (let (($x283 (and (bvule input.dst.llvm-%call.Lentry%1%fcallEnd us-bounded-var!) (bvule us-bounded-var! ?x193))))
 (ite $x283 (= ?x200 ((_ extract 7 0) input.dst.local_alloc_count.=L0%0%d=)) (= ?x200 (select input.dst.llvm-mem.Lentry%1%fcallEnd us-bounded-var!)))))))
 ))
 (and (and true $x285) $x331)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x166 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x166)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x87 $x121)))
 (let (($x125 (and $x170 $x129)))
 (let (($x162 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x162 $x125)))
 (let (($x174 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x174)))))
 (let (($x180 (and $x79 $x132)))
 (let (($x181 (= $x180 true)))
 (let (($x182 (= $x181 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x145 (concat ?x153 (concat ?x84 ?x133)))))
 (let (($x65 (= ?x85 input.dst.llvm-%val)))
 (let (($x154 (= $x65 true)))
 (let (($x98 (= $x154 true)))
 (let (($x155 (= input.dst.llvm-%val ?x85)))
 (let (($x134 (and (and (and $x79 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x132) $x155)))
 (let (($x147 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x179 (and $x147 $x134)))
 (let ((?x168 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x161 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x55 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x159 (and (and (and (and true (= ?x70 (_ bv2 8))) (= ?x45 (_ bv2 8))) (= ?x55 (_ bv2 8))) (= ?x161 (_ bv2 8)))))
 (let (($x15 (and (and (and (and $x159 (= ?x92 (_ bv2 8))) (= ?x119 (_ bv2 8))) (= ?x115 (_ bv2 8))) (= ?x168 (_ bv2 8)))))
 (let (($x114 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x151 (=> $x114 (or false (or false $x15)))))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x108 (or $x23 $x151)))
 (let ((?x69 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x36 (= (bvand ?x69 (_ bv4294967292 32)) ?x69)))
 (let (($x25 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x69 (bvsub ?x69 (_ bv4 32))) (bvult ?x69 (bvsub ?x69 (_ bv4 32))))))
 (let (($x24 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x48 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x48) (bvult input.dst.llvm-%call.Lentry%2%d ?x48))))
 (let (($x73 (and true $x71)))
 (let (($x138 (and $x71 $x73)))
 (let (($x41 (and (and (and $x73 $x138) $x24) $x25)))
 (let (($x83 (and $x41 $x36)))
 (let (($x149 (and (and $x83 $x108) $x179)))
 (let ((?x39 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x77 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x39)))
 (let (($x13 (or false $x77)))
 (let (($x107 (or $x23 $x13)))
 (let (($x157 (and $x107 $x149)))
 (let (($x9 (= $x157 true)))
 (let (($x124 (= $x9 true)))
 (let (($x62 (= $x124 true)))
 (let (($x175 (= $x147 true)))
 (let (($x142 (= $x175 true)))
 (let (($x150 (= $x142 true)))
 (let (($x74 (= $x108 true)))
 (let (($x56 (= $x74 true)))
 (let (($x90 (= $x56 true)))
 (let (($x21 (= $x83 true)))
 (let (($x31 (= $x21 true)))
 (let (($x97 (= $x31 true)))
 (let (($x6 (= $x107 true)))
 (let (($x57 (= $x6 true)))
 (let (($x11 (= $x57 true)))
 (let (($x110 (and $x11 $x97)))
 (let (($x172 (and $x110 $x90)))
 (let (($x173 (and $x172 $x150)))
 (let (($x135 (and $x173 $x62)))
 (let (($x82 (and $x135 $x98)))
 (let (($x10 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x54 (and $x10 true)))
 (let (($x294 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x7 (=> $x294 $x54)))
 (let (($x211 (= $x294 false)))
 (let (($x283 (= false false)))
 (let (($x275 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x290 (=> $x275 $x283)))
 (let (($x123 (= $x275 true)))
 (let (($x298 (and $x123 $x290)))
 (let (($x208 (and $x298 $x211)))
 (let (($x148 (and $x208 $x7)))
 (let (($x289 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x5 (and $x289 $x148)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x291 (=> $x22 $x5)))
 (let (($x287 (= $x22 false)))
 (let (($x193 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x261 (=> $x193 $x283)))
 (let (($x281 (= $x193 true)))
 (let (($x200 (and $x281 $x261)))
 (let (($x293 (and $x200 $x287)))
 (let (($x288 (and $x293 $x291)))
 (let (($x178 (and $x288 $x82)))
 (let (($x183 (=> $x178 $x182)))
 (let (($x285 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x268 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x280 $x268) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x285 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x166 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x166)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x87 $x121)))
 (let (($x125 (and $x170 $x129)))
 (let (($x162 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x162 $x125)))
 (let (($x174 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x174)))))
 (let (($x180 (and $x79 $x132)))
 (let (($x181 (= $x180 true)))
 (let (($x182 (= $x181 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x145 (concat ?x153 (concat ?x84 ?x133)))))
 (let (($x65 (= ?x85 input.dst.llvm-%val)))
 (let (($x154 (= $x65 true)))
 (let (($x98 (= $x154 true)))
 (let (($x155 (= input.dst.llvm-%val ?x85)))
 (let (($x134 (and (and (and $x79 (= input.spec-%var-val-0 input.dst.llvm-%val)) $x132) $x155)))
 (let (($x147 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x179 (and $x147 $x134)))
 (let ((?x168 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x115 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x119 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x92 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x161 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x55 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x159 (and (and (and (and true (= ?x70 (_ bv2 8))) (= ?x45 (_ bv2 8))) (= ?x55 (_ bv2 8))) (= ?x161 (_ bv2 8)))))
 (let (($x15 (and (and (and (and $x159 (= ?x92 (_ bv2 8))) (= ?x119 (_ bv2 8))) (= ?x115 (_ bv2 8))) (= ?x168 (_ bv2 8)))))
 (let (($x114 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x151 (=> $x114 (or false (or false $x15)))))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x108 (or $x23 $x151)))
 (let ((?x69 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x36 (= (bvand ?x69 (_ bv4294967292 32)) ?x69)))
 (let (($x25 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x69 (bvsub ?x69 (_ bv4 32))) (bvult ?x69 (bvsub ?x69 (_ bv4 32))))))
 (let (($x24 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x48 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x48) (bvult input.dst.llvm-%call.Lentry%2%d ?x48))))
 (let (($x73 (and true $x71)))
 (let (($x138 (and $x71 $x73)))
 (let (($x41 (and (and (and $x73 $x138) $x24) $x25)))
 (let (($x83 (and $x41 $x36)))
 (let (($x149 (and (and $x83 $x108) $x179)))
 (let ((?x39 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x77 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x39)))
 (let (($x13 (or false $x77)))
 (let (($x107 (or $x23 $x13)))
 (let (($x157 (and $x107 $x149)))
 (let (($x9 (= $x157 true)))
 (let (($x124 (= $x9 true)))
 (let (($x62 (= $x124 true)))
 (let (($x175 (= $x147 true)))
 (let (($x142 (= $x175 true)))
 (let (($x150 (= $x142 true)))
 (let (($x74 (= $x108 true)))
 (let (($x56 (= $x74 true)))
 (let (($x90 (= $x56 true)))
 (let (($x21 (= $x83 true)))
 (let (($x31 (= $x21 true)))
 (let (($x97 (= $x31 true)))
 (let (($x6 (= $x107 true)))
 (let (($x57 (= $x6 true)))
 (let (($x11 (= $x57 true)))
 (let (($x110 (and $x11 $x97)))
 (let (($x172 (and $x110 $x90)))
 (let (($x173 (and $x172 $x150)))
 (let (($x135 (and $x173 $x62)))
 (let (($x82 (and $x135 $x98)))
 (let (($x10 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x54 (and $x10 true)))
 (let (($x294 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x7 (=> $x294 $x54)))
 (let (($x211 (= $x294 false)))
 (let (($x283 (= false false)))
 (let (($x275 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x290 (=> $x275 $x283)))
 (let (($x123 (= $x275 true)))
 (let (($x298 (and $x123 $x290)))
 (let (($x208 (and $x298 $x211)))
 (let (($x148 (and $x208 $x7)))
 (let (($x289 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x5 (and $x289 $x148)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x291 (=> $x22 $x5)))
 (let (($x287 (= $x22 false)))
 (let (($x193 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x261 (=> $x193 $x283)))
 (let (($x281 (= $x193 true)))
 (let (($x200 (and $x281 $x261)))
 (let (($x293 (and $x200 $x287)))
 (let (($x288 (and $x293 $x291)))
 (let (($x178 (and $x288 $x82)))
 (let (($x183 (=> $x178 $x182)))
 (let (($x285 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x268 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x280 $x268) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x285 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x181 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x181)))
 (let (($x183 (= ?x182 input.dst.llvm-%val)))
 (let (($x184 (= $x183 true)))
 (let ((?x167 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x133 (concat ?x153 (concat ?x143 ?x167)))))
 (let (($x154 (= ?x131 input.dst.llvm-%val)))
 (let (($x98 (= $x154 true)))
 (let (($x82 (= $x98 true)))
 (let (($x29 (= input.dst.llvm-%val ?x131)))
 (let ((?x170 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x170)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x162 $x89)))
 (let (($x129 (and $x121 $x166)))
 (let (($x88 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x88 $x129)))
 (let (($x34 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x94 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x94)))))
 (let (($x134 (and (and (and $x28 $x34) $x125) $x29)))
 (let (($x175 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x179 (and $x175 $x134)))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x165 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x159 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x139 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x92 (and (and (and (and true (= ?x67 (_ bv2 8))) (= ?x43 (_ bv2 8))) (= ?x139 (_ bv2 8))) (= ?x159 (_ bv2 8)))))
 (let (($x113 (and (and (and (and $x92 (= ?x165 (_ bv2 8))) (= ?x105 (_ bv2 8))) (= ?x81 (_ bv2 8))) (= ?x15 (_ bv2 8)))))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x56 (=> $x74 (or false (or false $x113)))))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x114 (or $x23 $x56)))
 (let ((?x18 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x83 (= (bvand ?x18 (_ bv4294967292 32)) ?x18)))
 (let (($x76 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x18 (bvsub ?x18 (_ bv4 32))) (bvult ?x18 (bvsub ?x18 (_ bv4 32))))))
 (let (($x24 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x48 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x73 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x48) (bvult input.dst.llvm-%call.Lentry%2%d ?x48))))
 (let (($x138 (and true $x73)))
 (let (($x169 (and $x73 $x138)))
 (let (($x52 (and (and (and $x138 $x169) $x24) $x76)))
 (let (($x21 (and $x52 $x83)))
 (let (($x157 (and (and $x21 $x114) $x179)))
 (let ((?x77 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x77)))
 (let (($x107 (or false $x13)))
 (let (($x6 (or $x23 $x107)))
 (let (($x9 (and $x6 $x157)))
 (let (($x124 (= $x9 true)))
 (let (($x62 (= $x124 true)))
 (let (($x135 (= $x62 true)))
 (let (($x142 (= $x175 true)))
 (let (($x150 (= $x142 true)))
 (let (($x173 (= $x150 true)))
 (let (($x171 (= $x114 true)))
 (let (($x90 (= $x171 true)))
 (let (($x172 (= $x90 true)))
 (let (($x31 (= $x21 true)))
 (let (($x97 (= $x31 true)))
 (let (($x110 (= $x97 true)))
 (let (($x57 (= $x6 true)))
 (let (($x11 (= $x57 true)))
 (let (($x44 (= $x11 true)))
 (let (($x37 (and $x44 $x110)))
 (let (($x156 (and $x37 $x172)))
 (let (($x136 (and $x156 $x173)))
 (let (($x65 (and $x136 $x135)))
 (let (($x178 (and $x65 $x82)))
 (let (($x10 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x54 (and $x10 true)))
 (let (($x294 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x7 (=> $x294 $x54)))
 (let (($x211 (= $x294 false)))
 (let (($x296 (= false false)))
 (let (($x275 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x290 (=> $x275 $x296)))
 (let (($x123 (= $x275 true)))
 (let (($x298 (and $x123 $x290)))
 (let (($x208 (and $x298 $x211)))
 (let (($x148 (and $x208 $x7)))
 (let (($x289 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x5 (and $x289 $x148)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x291 (=> $x22 $x5)))
 (let (($x287 (= $x22 false)))
 (let (($x101 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x278 (=> $x101 $x296)))
 (let (($x16 (= $x101 true)))
 (let (($x284 (and $x16 $x278)))
 (let (($x293 (and $x284 $x287)))
 (let (($x288 (and $x293 $x291)))
 (let (($x180 (and $x288 $x178)))
 (let (($x218 (=> $x180 $x184)))
 (let (($x200 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x193 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x281 $x193) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x200 (not $x218)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%2%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x181 (bvmul input.spec-%var-val-0 (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x181)))
 (let (($x183 (= ?x182 input.dst.llvm-%val)))
 (let (($x184 (= $x183 true)))
 (let ((?x167 (select input.dst.llvm-mem input.dst.local./*___y___make_node__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x133 (concat ?x153 (concat ?x143 ?x167)))))
 (let (($x154 (= ?x131 input.dst.llvm-%val)))
 (let (($x98 (= $x154 true)))
 (let (($x82 (= $x98 true)))
 (let (($x29 (= input.dst.llvm-%val ?x131)))
 (let ((?x170 (bvand input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x170)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x162 $x89)))
 (let (($x129 (and $x121 $x166)))
 (let (($x88 (= input.dst.local./*___y___make_node__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x88 $x129)))
 (let (($x34 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x94 (and true (= (select input.dst.llvm-mem.alloc (bvadd (_ bv0 32) (_ bv0 32))) (_ bv2 8)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x94)))))
 (let (($x134 (and (and (and $x28 $x34) $x125) $x29)))
 (let (($x175 (= (bvand input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4294967295 32)) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x179 (and $x175 $x134)))
 (let ((?x15 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv7 32)))))
 (let ((?x81 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv6 32)))))
 (let ((?x105 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv5 32)))))
 (let ((?x165 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv4 32)))))
 (let ((?x159 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv3 32)))))
 (let ((?x139 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem.alloc (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv0 32)))))
 (let (($x92 (and (and (and (and true (= ?x67 (_ bv2 8))) (= ?x43 (_ bv2 8))) (= ?x139 (_ bv2 8))) (= ?x159 (_ bv2 8)))))
 (let (($x113 (and (and (and (and $x92 (= ?x165 (_ bv2 8))) (= ?x105 (_ bv2 8))) (= ?x81 (_ bv2 8))) (= ?x15 (_ bv2 8)))))
 (let (($x74 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd (bvsub (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd (_ bv8 32)) (_ bv1 32)))))
 (let (($x56 (=> $x74 (or false (or false $x113)))))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x114 (or $x23 $x56)))
 (let ((?x18 (bvadd (_ bv4 32) input.dst.llvm-%call.Lentry%2%d)))
 (let (($x83 (= (bvand ?x18 (_ bv4294967292 32)) ?x18)))
 (let (($x76 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x18 (bvsub ?x18 (_ bv4 32))) (bvult ?x18 (bvsub ?x18 (_ bv4 32))))))
 (let (($x24 (= (bvand input.dst.llvm-%call.Lentry%2%d (_ bv4294967292 32)) input.dst.llvm-%call.Lentry%2%d)))
 (let ((?x48 (bvsub input.dst.llvm-%call.Lentry%2%d (_ bv0 32))))
 (let (($x73 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%call.Lentry%2%d ?x48) (bvult input.dst.llvm-%call.Lentry%2%d ?x48))))
 (let (($x138 (and true $x73)))
 (let (($x169 (and $x73 $x138)))
 (let (($x52 (and (and (and $x138 $x169) $x24) $x76)))
 (let (($x21 (and $x52 $x83)))
 (let (($x157 (and (and $x21 $x114) $x179)))
 (let ((?x77 (bvadd (_ bv7 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (bvule input.dst.llvm-%call.Lentry%1%fcallEnd ?x77)))
 (let (($x107 (or false $x13)))
 (let (($x6 (or $x23 $x107)))
 (let (($x9 (and $x6 $x157)))
 (let (($x124 (= $x9 true)))
 (let (($x62 (= $x124 true)))
 (let (($x135 (= $x62 true)))
 (let (($x142 (= $x175 true)))
 (let (($x150 (= $x142 true)))
 (let (($x173 (= $x150 true)))
 (let (($x171 (= $x114 true)))
 (let (($x90 (= $x171 true)))
 (let (($x172 (= $x90 true)))
 (let (($x31 (= $x21 true)))
 (let (($x97 (= $x31 true)))
 (let (($x110 (= $x97 true)))
 (let (($x57 (= $x6 true)))
 (let (($x11 (= $x57 true)))
 (let (($x44 (= $x11 true)))
 (let (($x37 (and $x44 $x110)))
 (let (($x156 (and $x37 $x172)))
 (let (($x136 (and $x156 $x173)))
 (let (($x65 (and $x136 $x135)))
 (let (($x178 (and $x65 $x82)))
 (let (($x10 (= input.spec-%tmpvar-0.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x54 (and $x10 true)))
 (let (($x294 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x7 (=> $x294 $x54)))
 (let (($x211 (= $x294 false)))
 (let (($x296 (= false false)))
 (let (($x275 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x290 (=> $x275 $x296)))
 (let (($x123 (= $x275 true)))
 (let (($x298 (and $x123 $x290)))
 (let (($x208 (and $x298 $x211)))
 (let (($x148 (and $x208 $x7)))
 (let (($x289 (= input.spec-%tmpvar-0.E0%0%d.2.0 (_ bv0 32))))
 (let (($x5 (and $x289 $x148)))
 (let (($x22 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x291 (=> $x22 $x5)))
 (let (($x287 (= $x22 false)))
 (let (($x101 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x278 (=> $x101 $x296)))
 (let (($x16 (= $x101 true)))
 (let (($x284 (and $x16 $x278)))
 (let (($x293 (and $x284 $x287)))
 (let (($x288 (and $x293 $x291)))
 (let (($x180 (and $x288 $x178)))
 (let (($x218 (=> $x180 $x184)))
 (let (($x200 (forall ((icm-bounded-var! (_ BitVec 32)) )(let (($x193 (bvule icm-bounded-var! input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___make_node__x__=L0%0%argnum0=/_begin icm-bounded-var!)))
 (= (and $x281 $x193) (= (select input.dst.llvm-mem.alloc icm-bounded-var!) (_ bv3 8))))))
 ))
 (and $x200 (not $x218)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.461363/query
