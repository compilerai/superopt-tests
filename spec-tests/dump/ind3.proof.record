==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x14 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x5 $x12)))
 (let (($x19 (and $x10 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x14 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x5 $x12)))
 (let (($x19 (and $x10 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676128/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x132 (= true false)))
 (let (($x133 (= $x132 true)))
 (let (($x122 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x99 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x123 (= $x99 $x122)))
 (let (($x63 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x124 (=> $x63 $x123)))
 (let (($x119 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x81 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x120 (= $x81 $x119)))
 (let (($x121 (=> $x63 $x120)))
 (let (($x116 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.E0%0%d.2.0)))
 (let (($x117 (=> $x63 $x116)))
 (let (($x113 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x114 (= $x63 $x113)))
 (let (($x61 (= false false)))
 (let (($x56 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x62 (=> $x56 $x61)))
 (let (($x111 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x112 (= $x56 $x111)))
 (let (($x129 (and (and (and (and (and $x112 $x62) $x114) $x117) $x121) $x124)))
 (let (($x130 (= $x129 true)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x87 (concat ?x86 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x93 (concat ?x92 (concat ?x89 ?x87))))
 (let (($x94 (= (_ bv0 32) ?x93)))
 (let ((?x95 (ite $x94 (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x95 (_ bv1 32))))
 (let (($x101 (= $x99 $x100)))
 (let (($x102 (=> $x63 $x101)))
 (let (($x96 (= ?x95 (_ bv0 32))))
 (let (($x97 (= $x81 $x96)))
 (let (($x98 (=> $x63 $x97)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x74)))
 (let (($x78 (= input.spec-%var-l-0.2.0 ?x77)))
 (let (($x79 (=> $x63 $x78)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x58 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x58 (_ bv1 32))))
 (let (($x65 (= $x63 $x64)))
 (let (($x107 (and (and (and (and (and (= $x56 (= ?x58 (_ bv0 32))) $x62) $x65) $x79) $x98) $x102)))
 (let (($x108 (= $x107 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x31 (concat ?x43 (concat ?x41 ?x6)))))
 (let (($x51 (= ?x5 input.dst.llvm-%l)))
 (let (($x52 (= $x51 true)))
 (let (($x53 (= $x52 true)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x38)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x21 $x15)))
 (let (($x37 (and $x16 $x14)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x8 $x37)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x32)))))))
 (let (($x44 (and $x20 $x18)))
 (let (($x9 (= $x44 true)))
 (let (($x11 (= $x9 true)))
 (let (($x7 (= $x11 true)))
 (let (($x54 (and $x7 $x53)))
 (let (($x109 (and $x54 $x108)))
 (let (($x131 (and $x109 $x130)))
 (let (($x134 (=> $x131 $x133)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x132 (= true false)))
 (let (($x133 (= $x132 true)))
 (let (($x122 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x99 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x123 (= $x99 $x122)))
 (let (($x63 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x124 (=> $x63 $x123)))
 (let (($x119 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x81 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x120 (= $x81 $x119)))
 (let (($x121 (=> $x63 $x120)))
 (let (($x116 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.E0%0%d.2.0)))
 (let (($x117 (=> $x63 $x116)))
 (let (($x113 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x114 (= $x63 $x113)))
 (let (($x61 (= false false)))
 (let (($x56 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x62 (=> $x56 $x61)))
 (let (($x111 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x112 (= $x56 $x111)))
 (let (($x129 (and (and (and (and (and $x112 $x62) $x114) $x117) $x121) $x124)))
 (let (($x130 (= $x129 true)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x87 (concat ?x86 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x93 (concat ?x92 (concat ?x89 ?x87))))
 (let (($x94 (= (_ bv0 32) ?x93)))
 (let ((?x95 (ite $x94 (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x95 (_ bv1 32))))
 (let (($x101 (= $x99 $x100)))
 (let (($x102 (=> $x63 $x101)))
 (let (($x96 (= ?x95 (_ bv0 32))))
 (let (($x97 (= $x81 $x96)))
 (let (($x98 (=> $x63 $x97)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x74)))
 (let (($x78 (= input.spec-%var-l-0.2.0 ?x77)))
 (let (($x79 (=> $x63 $x78)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x58 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x58 (_ bv1 32))))
 (let (($x65 (= $x63 $x64)))
 (let (($x107 (and (and (and (and (and (= $x56 (= ?x58 (_ bv0 32))) $x62) $x65) $x79) $x98) $x102)))
 (let (($x108 (= $x107 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x31 (concat ?x43 (concat ?x41 ?x6)))))
 (let (($x51 (= ?x5 input.dst.llvm-%l)))
 (let (($x52 (= $x51 true)))
 (let (($x53 (= $x52 true)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x38)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x21 $x15)))
 (let (($x37 (and $x16 $x14)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x8 $x37)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x32)))))))
 (let (($x44 (and $x20 $x18)))
 (let (($x9 (= $x44 true)))
 (let (($x11 (= $x9 true)))
 (let (($x7 (= $x11 true)))
 (let (($x54 (and $x7 $x53)))
 (let (($x109 (and $x54 $x108)))
 (let (($x131 (and $x109 $x130)))
 (let (($x134 (=> $x131 $x133)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-0.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x07fc0000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xff) #x07fc0003 #x07))
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x07ffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x07fc0000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x07fc0003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676128/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x140 (= true false)))
 (let (($x141 (= $x140 true)))
 (let (($x106 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x64 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x108 (and $x64 $x106)))
 (let (($x109 (not $x108)))
 (let (($x81 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x102 (and $x64 $x81)))
 (let (($x107 (not $x102)))
 (let (($x131 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x132 (= $x106 $x131)))
 (let (($x133 (=> $x64 $x132)))
 (let (($x124 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x129 (= $x81 $x124)))
 (let (($x130 (=> $x64 $x129)))
 (let (($x128 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.E0%0%d.2.0)))
 (let (($x122 (=> $x64 $x128)))
 (let (($x119 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x120 (= $x64 $x119)))
 (let (($x103 (= false false)))
 (let (($x58 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x63 (=> $x58 $x103)))
 (let (($x127 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x118 (= $x58 $x127)))
 (let (($x136 (and (and (and (and (and (and $x118 $x63) $x120) $x122) $x130) $x133) $x107)))
 (let (($x137 (and $x136 $x109)))
 (let (($x138 (= $x137 true)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x88 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x93 (concat ?x90 (concat ?x86 ?x89))))
 (let (($x94 (= (_ bv0 32) ?x93)))
 (let ((?x95 (ite $x94 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x95 (_ bv1 32))))
 (let (($x100 (= $x106 $x99)))
 (let (($x101 (=> $x64 $x100)))
 (let (($x96 (= ?x95 (_ bv0 32))))
 (let (($x97 (= $x81 $x96)))
 (let (($x98 (=> $x64 $x97)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x69)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x71)))
 (let (($x79 (= input.spec-%var-l-0.2.0 ?x78)))
 (let (($x105 (=> $x64 $x79)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x60 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x60 (_ bv1 32))))
 (let (($x104 (= $x64 $x65)))
 (let (($x113 (and (and (and (and (and (= $x58 (= ?x60 (_ bv0 32))) $x63) $x104) $x105) $x98) $x101)))
 (let (($x126 (and (and $x113 $x107) $x109)))
 (let (($x115 (= $x126 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x50 (concat ?x45 (concat ?x43 ?x17)))))
 (let (($x53 (= ?x51 input.dst.llvm-%l)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x9)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x19 $x31)))
 (let (($x25 (and $x44 $x11)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x23 $x25)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x42)))))))
 (let (($x29 (and $x21 $x12)))
 (let (($x15 (= $x29 true)))
 (let (($x35 (= $x15 true)))
 (let (($x7 (= $x35 true)))
 (let (($x56 (and $x7 $x55)))
 (let (($x116 (and $x56 $x115)))
 (let (($x139 (and $x116 $x138)))
 (let (($x142 (=> $x139 $x141)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x140 (= true false)))
 (let (($x141 (= $x140 true)))
 (let (($x106 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x64 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x108 (and $x64 $x106)))
 (let (($x109 (not $x108)))
 (let (($x81 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x102 (and $x64 $x81)))
 (let (($x107 (not $x102)))
 (let (($x131 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x132 (= $x106 $x131)))
 (let (($x133 (=> $x64 $x132)))
 (let (($x124 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x129 (= $x81 $x124)))
 (let (($x130 (=> $x64 $x129)))
 (let (($x128 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.E0%0%d.2.0)))
 (let (($x122 (=> $x64 $x128)))
 (let (($x119 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x120 (= $x64 $x119)))
 (let (($x103 (= false false)))
 (let (($x58 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x63 (=> $x58 $x103)))
 (let (($x127 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x118 (= $x58 $x127)))
 (let (($x136 (and (and (and (and (and (and $x118 $x63) $x120) $x122) $x130) $x133) $x107)))
 (let (($x137 (and $x136 $x109)))
 (let (($x138 (= $x137 true)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x88 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x93 (concat ?x90 (concat ?x86 ?x89))))
 (let (($x94 (= (_ bv0 32) ?x93)))
 (let ((?x95 (ite $x94 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x95 (_ bv1 32))))
 (let (($x100 (= $x106 $x99)))
 (let (($x101 (=> $x64 $x100)))
 (let (($x96 (= ?x95 (_ bv0 32))))
 (let (($x97 (= $x81 $x96)))
 (let (($x98 (=> $x64 $x97)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x69)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x71)))
 (let (($x79 (= input.spec-%var-l-0.2.0 ?x78)))
 (let (($x105 (=> $x64 $x79)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x60 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x60 (_ bv1 32))))
 (let (($x104 (= $x64 $x65)))
 (let (($x113 (and (and (and (and (and (= $x58 (= ?x60 (_ bv0 32))) $x63) $x104) $x105) $x98) $x101)))
 (let (($x126 (and (and $x113 $x107) $x109)))
 (let (($x115 (= $x126 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x50 (concat ?x45 (concat ?x43 ?x17)))))
 (let (($x53 (= ?x51 input.dst.llvm-%l)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x9)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x19 $x31)))
 (let (($x25 (and $x44 $x11)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x23 $x25)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x42)))))))
 (let (($x29 (and $x21 $x12)))
 (let (($x15 (= $x29 true)))
 (let (($x35 (= $x15 true)))
 (let (($x7 (= $x35 true)))
 (let (($x56 (and $x7 $x55)))
 (let (($x116 (and $x56 $x115)))
 (let (($x139 (and $x116 $x138)))
 (let (($x142 (=> $x139 $x141)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676128/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var137X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var137X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x165 (concat ?x164 (select input.dst.llvm-mem (bvadd input.ind-%var137X (_ bv4 32))))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var137X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var137X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x171 (concat ?x170 (concat ?x167 ?x165))))
 (let (($x172 (= ?x171 ?x171)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x70 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x70 (_ bv1 32))))
 (let (($x173 (=> $x71 $x172)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.ind-%var137X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var137X))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.ind-%var137X (_ bv2 32))) ?x152)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd input.ind-%var137X (_ bv3 32))) ?x155)))
 (let (($x159 (= ?x158 ?x158)))
 (let (($x160 (=> $x71 $x159)))
 (let (($x147 (= $x71 $x71)))
 (let (($x73 (= false false)))
 (let (($x68 (= ?x70 (_ bv0 32))))
 (let (($x146 (=> $x68 $x73)))
 (let (($x175 (and (and (= input.dst.llvm-%l input.dst.llvm-%l) (= $x68 $x68)) $x146)))
 (let (($x178 (and (and (and $x175 $x147) $x160) $x173)))
 (let (($x16 (= true true)))
 (let (($x179 (and $x16 $x178)))
 (let (($x180 (= $x179 true)))
 (let (($x136 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x137 (= $x126 $x136)))
 (let (($x69 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x138 (=> $x69 $x137)))
 (let (($x132 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x84 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x133 (= $x84 $x132)))
 (let (($x34 (=> $x69 $x133)))
 (let (($x130 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.E0%0%d.2.0)))
 (let (($x48 (=> $x69 $x130)))
 (let (($x123 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x124 (= $x69 $x123)))
 (let (($x74 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x76 (=> $x74 $x73)))
 (let (($x122 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x24 (= $x74 $x122)))
 (let (($x143 (and (and (and (and (and $x24 $x76) $x124) $x48) $x34) $x138)))
 (let (($x47 (= $x143 true)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x98 (concat ?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x113 (concat ?x101 (concat ?x106 ?x98))))
 (let (($x102 (= (_ bv0 32) ?x113)))
 (let ((?x107 (ite $x102 (_ bv0 32) (_ bv1 32))))
 (let (($x115 (bvuge ?x107 (_ bv1 32))))
 (let (($x116 (= $x126 $x115)))
 (let (($x117 (=> $x69 $x116)))
 (let (($x114 (= ?x107 (_ bv0 32))))
 (let (($x108 (= $x84 $x114)))
 (let (($x109 (=> $x69 $x108)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x82)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x90)))
 (let (($x88 (= input.spec-%var-l-0.2.0 ?x92)))
 (let (($x91 (=> $x69 $x88)))
 (let (($x120 (and (and (and (and (and (= $x74 $x68) $x76) (= $x69 $x71)) $x91) $x109) $x117)))
 (let (($x135 (= $x120 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x32 (concat ?x50 (concat ?x5 ?x41)))))
 (let (($x64 (= ?x6 input.dst.llvm-%l)))
 (let (($x65 (= $x64 true)))
 (let (($x104 (= $x65 true)))
 (let (($x45 (= input.dst.llvm-%l ?x6)))
 (let (($x67 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x36 (and $x67 $x45)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x7)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x56 $x21)))
 (let (($x10 (and $x27 $x25)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x43 $x10)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x20)))))))
 (let (($x61 (and (and (and $x33 true) $x55) $x36)))
 (let (($x62 (= $x61 true)))
 (let (($x103 (= $x62 true)))
 (let (($x63 (= $x103 true)))
 (let (($x40 (= $x67 true)))
 (let (($x38 (= $x40 true)))
 (let (($x8 (= $x38 true)))
 (let (($x110 (and $x8 $x63)))
 (let (($x111 (and $x110 $x104)))
 (let (($x121 (and $x111 $x135)))
 (let (($x13 (and $x121 $x47)))
 (let (($x181 (=> $x13 $x180)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var137X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var137X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x165 (concat ?x164 (select input.dst.llvm-mem (bvadd input.ind-%var137X (_ bv4 32))))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var137X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var137X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x171 (concat ?x170 (concat ?x167 ?x165))))
 (let (($x172 (= ?x171 ?x171)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x70 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x70 (_ bv1 32))))
 (let (($x173 (=> $x71 $x172)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.ind-%var137X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var137X))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.ind-%var137X (_ bv2 32))) ?x152)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd input.ind-%var137X (_ bv3 32))) ?x155)))
 (let (($x159 (= ?x158 ?x158)))
 (let (($x160 (=> $x71 $x159)))
 (let (($x147 (= $x71 $x71)))
 (let (($x73 (= false false)))
 (let (($x68 (= ?x70 (_ bv0 32))))
 (let (($x146 (=> $x68 $x73)))
 (let (($x175 (and (and (= input.dst.llvm-%l input.dst.llvm-%l) (= $x68 $x68)) $x146)))
 (let (($x178 (and (and (and $x175 $x147) $x160) $x173)))
 (let (($x16 (= true true)))
 (let (($x179 (and $x16 $x178)))
 (let (($x180 (= $x179 true)))
 (let (($x136 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x137 (= $x126 $x136)))
 (let (($x69 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x138 (=> $x69 $x137)))
 (let (($x132 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x84 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x133 (= $x84 $x132)))
 (let (($x34 (=> $x69 $x133)))
 (let (($x130 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.E0%0%d.2.0)))
 (let (($x48 (=> $x69 $x130)))
 (let (($x123 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x124 (= $x69 $x123)))
 (let (($x74 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x76 (=> $x74 $x73)))
 (let (($x122 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x24 (= $x74 $x122)))
 (let (($x143 (and (and (and (and (and $x24 $x76) $x124) $x48) $x34) $x138)))
 (let (($x47 (= $x143 true)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x98 (concat ?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x113 (concat ?x101 (concat ?x106 ?x98))))
 (let (($x102 (= (_ bv0 32) ?x113)))
 (let ((?x107 (ite $x102 (_ bv0 32) (_ bv1 32))))
 (let (($x115 (bvuge ?x107 (_ bv1 32))))
 (let (($x116 (= $x126 $x115)))
 (let (($x117 (=> $x69 $x116)))
 (let (($x114 (= ?x107 (_ bv0 32))))
 (let (($x108 (= $x84 $x114)))
 (let (($x109 (=> $x69 $x108)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x82)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x90)))
 (let (($x88 (= input.spec-%var-l-0.2.0 ?x92)))
 (let (($x91 (=> $x69 $x88)))
 (let (($x120 (and (and (and (and (and (= $x74 $x68) $x76) (= $x69 $x71)) $x91) $x109) $x117)))
 (let (($x135 (= $x120 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x32 (concat ?x50 (concat ?x5 ?x41)))))
 (let (($x64 (= ?x6 input.dst.llvm-%l)))
 (let (($x65 (= $x64 true)))
 (let (($x104 (= $x65 true)))
 (let (($x45 (= input.dst.llvm-%l ?x6)))
 (let (($x67 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x36 (and $x67 $x45)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x7)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x56 $x21)))
 (let (($x10 (and $x27 $x25)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x43 $x10)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x20)))))))
 (let (($x61 (and (and (and $x33 true) $x55) $x36)))
 (let (($x62 (= $x61 true)))
 (let (($x103 (= $x62 true)))
 (let (($x63 (= $x103 true)))
 (let (($x40 (= $x67 true)))
 (let (($x38 (= $x40 true)))
 (let (($x8 (= $x38 true)))
 (let (($x110 (and $x8 $x63)))
 (let (($x111 (and $x110 $x104)))
 (let (($x121 (and $x111 $x135)))
 (let (($x13 (and $x121 $x47)))
 (let (($x181 (=> $x13 $x180)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676128/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var158X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var158X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x167 (concat ?x166 (select input.dst.llvm-mem (bvadd input.ind-%var158X (_ bv4 32))))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var158X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var158X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x171 (concat ?x168 (concat ?x164 ?x167))))
 (let (($x172 (= ?x171 ?x171)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x73 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x73 (_ bv1 32))))
 (let (($x173 (=> $x118 $x172)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.ind-%var158X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var158X))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.ind-%var158X (_ bv2 32))) ?x150)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.ind-%var158X (_ bv3 32))) ?x152)))
 (let (($x160 (= ?x159 ?x159)))
 (let (($x177 (=> $x118 $x160)))
 (let (($x148 (= $x118 $x118)))
 (let (($x69 (= false false)))
 (let (($x76 (= ?x73 (_ bv0 32))))
 (let (($x176 (=> $x76 $x69)))
 (let (($x179 (and (and (= input.dst.llvm-%l input.dst.llvm-%l) (= $x76 $x76)) $x176)))
 (let (($x182 (and (and (and $x179 $x148) $x177) $x173)))
 (let (($x146 (= true true)))
 (let (($x105 (and $x146 $x182)))
 (let (($x22 (= $x105 true)))
 (let (($x136 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x137 (= $x126 $x136)))
 (let (($x78 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x138 (=> $x78 $x137)))
 (let (($x133 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x93 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x34 (= $x93 $x133)))
 (let (($x142 (=> $x78 $x34)))
 (let (($x141 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.E0%0%d.2.0)))
 (let (($x131 (=> $x78 $x141)))
 (let (($x129 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (= $x78 $x129)))
 (let (($x68 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x71 (=> $x68 $x69)))
 (let (($x124 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x140 (= $x68 $x124)))
 (let (($x144 (and (and (and (and (and $x140 $x71) $x130) $x131) $x142) $x138)))
 (let (($x145 (= $x144 true)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x96 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x113 (concat ?x95 ?x96))))
 (let (($x107 (= (_ bv0 32) ?x102)))
 (let ((?x114 (ite $x107 (_ bv0 32) (_ bv1 32))))
 (let (($x115 (bvuge ?x114 (_ bv1 32))))
 (let (($x116 (= $x126 $x115)))
 (let (($x117 (=> $x78 $x116)))
 (let (($x108 (= ?x114 (_ bv0 32))))
 (let (($x109 (= $x93 $x108)))
 (let (($x119 (=> $x78 $x109)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x81)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x90)))
 (let (($x134 (= input.spec-%var-l-0.2.0 ?x91)))
 (let (($x89 (=> $x78 $x134)))
 (let (($x122 (and (and (and (and (and (= $x68 $x76) $x71) (= $x78 $x118)) $x89) $x119) $x117)))
 (let (($x24 (= $x122 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x6 (concat ?x41 (concat ?x31 ?x32)))))
 (let (($x111 (= ?x45 input.dst.llvm-%l)))
 (let (($x66 (= $x111 true)))
 (let (($x74 (= $x66 true)))
 (let (($x36 (= input.dst.llvm-%l ?x45)))
 (let (($x67 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x61 (and $x67 $x36)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x25)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x27)))
 (let (($x55 (and $x7 $x10)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x9 $x55)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x15)))))))
 (let (($x63 (and (and (and $x56 true) $x53) $x61)))
 (let (($x110 (= $x63 true)))
 (let (($x64 (= $x110 true)))
 (let (($x65 (= $x64 true)))
 (let (($x40 (= $x67 true)))
 (let (($x38 (= $x40 true)))
 (let (($x8 (= $x38 true)))
 (let (($x104 (and $x8 $x65)))
 (let (($x77 (and $x104 $x74)))
 (let (($x139 (and $x77 $x24)))
 (let (($x174 (and $x139 $x145)))
 (let (($x52 (=> $x174 $x22)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var158X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var158X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x167 (concat ?x166 (select input.dst.llvm-mem (bvadd input.ind-%var158X (_ bv4 32))))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var158X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var158X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x171 (concat ?x168 (concat ?x164 ?x167))))
 (let (($x172 (= ?x171 ?x171)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x73 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x73 (_ bv1 32))))
 (let (($x173 (=> $x118 $x172)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.ind-%var158X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var158X))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.ind-%var158X (_ bv2 32))) ?x150)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.ind-%var158X (_ bv3 32))) ?x152)))
 (let (($x160 (= ?x159 ?x159)))
 (let (($x177 (=> $x118 $x160)))
 (let (($x148 (= $x118 $x118)))
 (let (($x69 (= false false)))
 (let (($x76 (= ?x73 (_ bv0 32))))
 (let (($x176 (=> $x76 $x69)))
 (let (($x179 (and (and (= input.dst.llvm-%l input.dst.llvm-%l) (= $x76 $x76)) $x176)))
 (let (($x182 (and (and (and $x179 $x148) $x177) $x173)))
 (let (($x146 (= true true)))
 (let (($x105 (and $x146 $x182)))
 (let (($x22 (= $x105 true)))
 (let (($x136 (bvuge input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x126 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x137 (= $x126 $x136)))
 (let (($x78 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x138 (=> $x78 $x137)))
 (let (($x133 (= input.spec-%tmpvar-0.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x93 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x34 (= $x93 $x133)))
 (let (($x142 (=> $x78 $x34)))
 (let (($x141 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.E0%0%d.2.0)))
 (let (($x131 (=> $x78 $x141)))
 (let (($x129 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (= $x78 $x129)))
 (let (($x68 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x71 (=> $x68 $x69)))
 (let (($x124 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32))))
 (let (($x140 (= $x68 $x124)))
 (let (($x144 (and (and (and (and (and $x140 $x71) $x130) $x131) $x142) $x138)))
 (let (($x145 (= $x144 true)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x96 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x113 (concat ?x95 ?x96))))
 (let (($x107 (= (_ bv0 32) ?x102)))
 (let ((?x114 (ite $x107 (_ bv0 32) (_ bv1 32))))
 (let (($x115 (bvuge ?x114 (_ bv1 32))))
 (let (($x116 (= $x126 $x115)))
 (let (($x117 (=> $x78 $x116)))
 (let (($x108 (= ?x114 (_ bv0 32))))
 (let (($x109 (= $x93 $x108)))
 (let (($x119 (=> $x78 $x109)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x81)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x90)))
 (let (($x134 (= input.spec-%var-l-0.2.0 ?x91)))
 (let (($x89 (=> $x78 $x134)))
 (let (($x122 (and (and (and (and (and (= $x68 $x76) $x71) (= $x78 $x118)) $x89) $x119) $x117)))
 (let (($x24 (= $x122 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x6 (concat ?x41 (concat ?x31 ?x32)))))
 (let (($x111 (= ?x45 input.dst.llvm-%l)))
 (let (($x66 (= $x111 true)))
 (let (($x74 (= $x66 true)))
 (let (($x36 (= input.dst.llvm-%l ?x45)))
 (let (($x67 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x61 (and $x67 $x36)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x25)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x27)))
 (let (($x55 (and $x7 $x10)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x9 $x55)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x15)))))))
 (let (($x63 (and (and (and $x56 true) $x53) $x61)))
 (let (($x110 (= $x63 true)))
 (let (($x64 (= $x110 true)))
 (let (($x65 (= $x64 true)))
 (let (($x40 (= $x67 true)))
 (let (($x38 (= $x40 true)))
 (let (($x8 (= $x38 true)))
 (let (($x104 (and $x8 $x65)))
 (let (($x77 (and $x104 $x74)))
 (let (($x139 (and $x77 $x24)))
 (let (($x174 (and $x139 $x145)))
 (let (($x52 (=> $x174 $x22)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676128/query
