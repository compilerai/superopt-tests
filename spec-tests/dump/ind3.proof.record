==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x11 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888544/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x142 (= true false)))
 (let (($x143 (= $x142 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x135 (concat ?x132 (concat ?x129 ?x127)))))
 (let (($x137 (= ?x136 input.dst.llvm-%l)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x118)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x114 $x116)))
 (let (($x120 (and $x117 $x119)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x112 $x120)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x20 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x40 (=> $x20 true)))
 (let (($x104 (= $x20 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x39 (= false false)))
 (let (($x37 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x18 (=> $x37 $x39)))
 (let (($x97 (= $x37 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x98 (and $x97 $x18)))
 (let (($x105 (and $x98 $x104)))
 (let (($x106 (and $x105 $x40)))
 (let (($x107 (= $x106 true)))
 (let (($x108 (= $x107 true)))
 (let (($x109 (= $x108 true)))
 (let (($x125 (and $x109 $x124)))
 (let (($x140 (and $x125 $x139)))
 (let (($x13 (= $x20 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32)))))
 (let (($x43 (= $x37 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32)))))
 (let (($x16 (and $x43 $x18)))
 (let (($x25 (and $x16 $x13)))
 (let (($x26 (and $x25 $x40)))
 (let (($x141 (and $x26 $x140)))
 (let (($x144 (=> $x141 $x143)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x142 (= true false)))
 (let (($x143 (= $x142 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x135 (concat ?x132 (concat ?x129 ?x127)))))
 (let (($x137 (= ?x136 input.dst.llvm-%l)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x118)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x114 $x116)))
 (let (($x120 (and $x117 $x119)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x112 $x120)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x20 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x40 (=> $x20 true)))
 (let (($x104 (= $x20 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x39 (= false false)))
 (let (($x37 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x18 (=> $x37 $x39)))
 (let (($x97 (= $x37 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x98 (and $x97 $x18)))
 (let (($x105 (and $x98 $x104)))
 (let (($x106 (and $x105 $x40)))
 (let (($x107 (= $x106 true)))
 (let (($x108 (= $x107 true)))
 (let (($x109 (= $x108 true)))
 (let (($x125 (and $x109 $x124)))
 (let (($x140 (and $x125 $x139)))
 (let (($x13 (= $x20 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32)))))
 (let (($x43 (= $x37 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32)))))
 (let (($x16 (and $x43 $x18)))
 (let (($x25 (and $x16 $x13)))
 (let (($x26 (and $x25 $x40)))
 (let (($x141 (and $x26 $x140)))
 (let (($x144 (=> $x141 $x143)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888544/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x45 (= true false)))
 (let (($x28 (= $x45 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x93 (concat ?x90 (concat ?x78 ?x72)))))
 (let (($x22 (= ?x46 input.dst.llvm-%l)))
 (let (($x99 (= $x22 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x86)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x81 $x80)))
 (let (($x76 (and $x83 $x89)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x84 $x76)))
 (let (($x73 (= $x77 true)))
 (let (($x74 (= $x73 true)))
 (let (($x70 (= $x74 true)))
 (let (($x103 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x107 (=> $x103 false)))
 (let (($x62 (= $x103 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x40 (= false false)))
 (let (($x20 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x26 (=> $x20 $x40)))
 (let (($x64 (= $x20 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x60 (and $x64 $x26)))
 (let (($x65 (and $x60 $x62)))
 (let (($x66 (and $x65 $x107)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x79 (= $x68 true)))
 (let (($x71 (and $x79 $x70)))
 (let (($x101 (and $x71 $x100)))
 (let (($x105 (= $x103 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32)))))
 (let (($x25 (= $x20 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32)))))
 (let (($x35 (and $x25 $x26)))
 (let (($x106 (and $x35 $x105)))
 (let (($x108 (and $x106 $x107)))
 (let (($x102 (and $x108 $x101)))
 (let (($x29 (=> $x102 $x28)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x45 (= true false)))
 (let (($x28 (= $x45 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x93 (concat ?x90 (concat ?x78 ?x72)))))
 (let (($x22 (= ?x46 input.dst.llvm-%l)))
 (let (($x99 (= $x22 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x86)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x81 $x80)))
 (let (($x76 (and $x83 $x89)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x84 $x76)))
 (let (($x73 (= $x77 true)))
 (let (($x74 (= $x73 true)))
 (let (($x70 (= $x74 true)))
 (let (($x103 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x107 (=> $x103 false)))
 (let (($x62 (= $x103 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x40 (= false false)))
 (let (($x20 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x26 (=> $x20 $x40)))
 (let (($x64 (= $x20 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x60 (and $x64 $x26)))
 (let (($x65 (and $x60 $x62)))
 (let (($x66 (and $x65 $x107)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x79 (= $x68 true)))
 (let (($x71 (and $x79 $x70)))
 (let (($x101 (and $x71 $x100)))
 (let (($x105 (= $x103 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32)))))
 (let (($x25 (= $x20 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32)))))
 (let (($x35 (and $x25 $x26)))
 (let (($x106 (and $x35 $x105)))
 (let (($x108 (and $x106 $x107)))
 (let (($x102 (and $x108 $x101)))
 (let (($x29 (=> $x102 $x28)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888544/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x193 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x197))))
 (let ((?x183 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x182 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x204 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x182 false (concat ?x191 (concat ?x188 (concat ?x185 ?x183))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x203)))
 (let (($x149 (= $x204 true)))
 (let (($x150 (= $x149 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x34 (concat ?x37 (concat ?x21 ?x145)))))
 (let (($x97 (= ?x7 input.dst.llvm-%l)))
 (let (($x98 (= $x97 true)))
 (let (($x146 (= $x98 true)))
 (let (($x36 (= input.dst.llvm-%l ?x7)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x10)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x11 $x31)))
 (let (($x53 (and $x8 $x19)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x61 (and (and (and $x68 $x23) $x53) $x36)))
 (let (($x106 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x89 (=> $x106 true)))
 (let (($x51 (= $x106 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x22 (= false false)))
 (let (($x70 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x13 (=> $x70 $x22)))
 (let (($x127 (= $x70 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x136 (and $x127 $x13)))
 (let (($x41 (and $x136 $x51)))
 (let (($x54 (and $x41 $x89)))
 (let (($x57 (and $x54 $x61)))
 (let (($x58 (= $x57 true)))
 (let (($x56 (= $x58 true)))
 (let (($x18 (= $x56 true)))
 (let (($x74 (= $x68 true)))
 (let (($x104 (= $x74 true)))
 (let (($x62 (= $x104 true)))
 (let (($x16 (and $x62 $x18)))
 (let (($x147 (and $x16 $x146)))
 (let (($x92 (= $x106 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32)))))
 (let (($x35 (= $x70 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32)))))
 (let (($x84 (and $x35 $x13)))
 (let (($x91 (and $x84 $x92)))
 (let (($x78 (and $x91 $x89)))
 (let (($x148 (and $x78 $x147)))
 (let (($x151 (=> $x148 $x150)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x193 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x197))))
 (let ((?x183 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x182 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x204 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x182 false (concat ?x191 (concat ?x188 (concat ?x185 ?x183))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x203)))
 (let (($x149 (= $x204 true)))
 (let (($x150 (= $x149 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x34 (concat ?x37 (concat ?x21 ?x145)))))
 (let (($x97 (= ?x7 input.dst.llvm-%l)))
 (let (($x98 (= $x97 true)))
 (let (($x146 (= $x98 true)))
 (let (($x36 (= input.dst.llvm-%l ?x7)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x10)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x11 $x31)))
 (let (($x53 (and $x8 $x19)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x61 (and (and (and $x68 $x23) $x53) $x36)))
 (let (($x106 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x89 (=> $x106 true)))
 (let (($x51 (= $x106 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x22 (= false false)))
 (let (($x70 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x13 (=> $x70 $x22)))
 (let (($x127 (= $x70 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x136 (and $x127 $x13)))
 (let (($x41 (and $x136 $x51)))
 (let (($x54 (and $x41 $x89)))
 (let (($x57 (and $x54 $x61)))
 (let (($x58 (= $x57 true)))
 (let (($x56 (= $x58 true)))
 (let (($x18 (= $x56 true)))
 (let (($x74 (= $x68 true)))
 (let (($x104 (= $x74 true)))
 (let (($x62 (= $x104 true)))
 (let (($x16 (and $x62 $x18)))
 (let (($x147 (and $x16 $x146)))
 (let (($x92 (= $x106 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32)))))
 (let (($x35 (= $x70 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32)))))
 (let (($x84 (and $x35 $x13)))
 (let (($x91 (and $x84 $x92)))
 (let (($x78 (and $x91 $x89)))
 (let (($x148 (and $x78 $x147)))
 (let (($x151 (=> $x148 $x150)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d.0 #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_29)
(= input.dst.llvm-mem @fun_26)
(function @fun_29
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_29 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_6143 (_ BitVec 32)) (BOUND_VARIABLE_6144 (_ BitVec 32)) (BOUND_VARIABLE_6145 (_ BitVec 32)) (BOUND_VARIABLE_6146 Bool) (BOUND_VARIABLE_6147 (_ BitVec 32)) (BOUND_VARIABLE_6148 (_ BitVec 32)) (BOUND_VARIABLE_6149 (_ BitVec 32)) (BOUND_VARIABLE_6150 (_ BitVec 32)) (BOUND_VARIABLE_6151 (_ BitVec 32)) (BOUND_VARIABLE_6152 (_ BitVec 32)) (BOUND_VARIABLE_6153 Bool) (BOUND_VARIABLE_6154 (_ BitVec 32)) (BOUND_VARIABLE_6155 (_ BitVec 32)) (BOUND_VARIABLE_6156 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1d24fffc)
  (define-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x1d250000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1d24ffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1d24fffc)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x1d250000)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x1d250000)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888544/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq214.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x155 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x169 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x165))))
 (let ((?x142 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x156 (axpred-spec-indeq214.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x172 (concat ?x71 (concat ?x77 ?x142))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x158 ?x155 false)))
 (let (($x104 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x38 (=> $x104 $x156)))
 (let (($x108 (= $x104 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x36 (= false false)))
 (let (($x68 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x35 (=> $x68 $x36)))
 (let (($x64 (= $x68 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x103 (and $x64 $x35)))
 (let (($x48 (and $x103 $x108)))
 (let (($x121 (and $x48 $x38)))
 (let (($x213 (= $x121 true)))
 (let (($x214 (= $x213 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x69 (concat ?x134 (concat ?x114 ?x111)))))
 (let (($x208 (= ?x110 input.dst.llvm-%l)))
 (let (($x209 (= $x208 true)))
 (let (($x210 (= $x209 true)))
 (let (($x115 (= input.dst.llvm-%l ?x110)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x20)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x130 $x25)))
 (let (($x79 (and $x137 $x138)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x157 (and (and (and $x96 $x99) $x79) $x115)))
 (let (($x160 (and $x121 $x157)))
 (let (($x163 (= $x160 true)))
 (let (($x205 (= $x163 true)))
 (let (($x206 (= $x205 true)))
 (let (($x128 (= $x96 true)))
 (let (($x53 (= $x128 true)))
 (let (($x52 (= $x53 true)))
 (let (($x207 (and $x52 $x206)))
 (let (($x211 (and $x207 $x210)))
 (let (($x62 (axpred-spec-indeq214.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.spec-%tmpvar-0.E0%0%d smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 false)))
 (let (($x30 (=> $x104 $x62)))
 (let (($x5 (= $x104 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32)))))
 (let (($x129 (= $x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32)))))
 (let (($x11 (and $x129 $x35)))
 (let (($x42 (and $x11 $x5)))
 (let (($x81 (and $x42 $x30)))
 (let (($x212 (and $x81 $x211)))
 (let (($x215 (=> $x212 $x214)))
 (not $x215))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq214.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x155 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x169 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x165))))
 (let ((?x142 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x156 (axpred-spec-indeq214.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x172 (concat ?x71 (concat ?x77 ?x142))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x158 ?x155 false)))
 (let (($x104 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x38 (=> $x104 $x156)))
 (let (($x108 (= $x104 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x36 (= false false)))
 (let (($x68 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x35 (=> $x68 $x36)))
 (let (($x64 (= $x68 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x103 (and $x64 $x35)))
 (let (($x48 (and $x103 $x108)))
 (let (($x121 (and $x48 $x38)))
 (let (($x213 (= $x121 true)))
 (let (($x214 (= $x213 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x69 (concat ?x134 (concat ?x114 ?x111)))))
 (let (($x208 (= ?x110 input.dst.llvm-%l)))
 (let (($x209 (= $x208 true)))
 (let (($x210 (= $x209 true)))
 (let (($x115 (= input.dst.llvm-%l ?x110)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x20)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x130 $x25)))
 (let (($x79 (and $x137 $x138)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x157 (and (and (and $x96 $x99) $x79) $x115)))
 (let (($x160 (and $x121 $x157)))
 (let (($x163 (= $x160 true)))
 (let (($x205 (= $x163 true)))
 (let (($x206 (= $x205 true)))
 (let (($x128 (= $x96 true)))
 (let (($x53 (= $x128 true)))
 (let (($x52 (= $x53 true)))
 (let (($x207 (and $x52 $x206)))
 (let (($x211 (and $x207 $x210)))
 (let (($x62 (axpred-spec-indeq214.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.spec-%tmpvar-0.E0%0%d smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.2.1 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0.0 false)))
 (let (($x30 (=> $x104 $x62)))
 (let (($x5 (= $x104 (bvuge input.spec-%tmpvar-0.E0%0%d.0 (_ bv1 32)))))
 (let (($x129 (= $x68 (= input.spec-%tmpvar-0.E0%0%d.0 (_ bv0 32)))))
 (let (($x11 (and $x129 $x35)))
 (let (($x42 (and $x11 $x5)))
 (let (($x81 (and $x42 $x30)))
 (let (($x212 (and $x81 $x211)))
 (let (($x215 (=> $x212 $x214)))
 (not $x215))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888544/query
