=FunctionName: opt_map
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph opt_map.A1.B1.C1.D1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.opt_map:
=TFG:
=Nodes: L0%0%d L2%1%d L2%2%bbentry L2%4%bbentry L2%5%fcallStart L2%5%fcallEnd L2%8%bbentry E0%0%d
=Edges:
L0%0%d => L2%1%d
L2%1%d => L2%4%bbentry
L2%1%d => L2%2%bbentry
L2%2%bbentry => L2%8%bbentry
L2%4%bbentry => L2%5%fcallStart
L2%5%fcallStart => L2%5%fcallEnd
L2%5%fcallEnd => L2%8%bbentry
L2%8%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%1%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%2%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%4%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%5%fcallStart
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%5%fcallEnd
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%8%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: opt_map
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-6.E0%0%d : SUM[UNIT,BV:32]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;opt_map}
=Edge: L0%0%d => L2%1%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:func_head
tfg_edge_comment end

=Edge: L2%1%d => L2%4%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%1%d => L2%2%bbentry
=Edge.EdgeCond: 
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:3:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%2%bbentry => L2%8%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-5.L2%8%bbentry
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
=spec-%var-u-0.L2%8%bbentry
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_0)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%4%bbentry => L2%5%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-val-1.L2%5%fcallStart
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*(match_sum_val_1*fcall_edge_start))
tfg_edge_comment end

=Edge: L2%5%fcallStart => L2%5%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-3.L2%5%fcallEnd
1 : spec.func.call19e08a8492cfd0d4521b4a2c174dacb : FUNCTION[BV:32 -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
4 : spec_function_call(1, 2, 3) : BV:32
=spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*fn_app)
tfg_edge_comment end

=Edge: L2%5%fcallEnd => L2%8%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-5.L2%8%bbentry
1 : SORT2EXPR.VAR : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
4 : sum_init(1, 2, 3) : SUM[UNIT,BV:32]
=spec-%tmpvar-4.L2%8%bbentry
1 : SORT2EXPR.VAR : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
4 : sum_init(1, 2, 3) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((fcall_edge_end*ctor_sum)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-5.L2%8%bbentry : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*func_ret)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.opt_map
=Loc 1 in src.spec.opt_map.
REGMEM
spec-%var-opt-0
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
=Loc 9 in src.spec.opt_map.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 10 in src.spec.opt_map.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 11 in src.spec.opt_map.
REGMEM
spec-%var-val-1.L2%5%fcallStart
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
=Loc 12 in src.spec.opt_map.
REGMEM
spec-%tmpvar-3.L2%5%fcallEnd
1 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
=Loc 13 in src.spec.opt_map.
REGMEM
spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd : BV:32
=Loc 14 in src.spec.opt_map.
REGMEM
spec-%tmpvar-5.L2%8%bbentry
1 : input.spec-%tmpvar-5.L2%8%bbentry : SUM[UNIT,BV:32]
=Loc 15 in src.spec.opt_map.
REGMEM
spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-6.E0%0%d : SUM[UNIT,BV:32]
=Loc 16 in src.spec.opt_map.
REGMEM
spec-%var-u-0.L2%8%bbentry
1 : input.spec-%var-u-0.L2%8%bbentry : UNIT
=Loc 17 in src.spec.opt_map.
REGMEM
spec-%tmpvar-4.L2%8%bbentry
1 : input.spec-%tmpvar-4.L2%8%bbentry : SUM[UNIT,BV:32]
=Locs end
=Liveness in src.spec.opt_map
=live locs at L0%0%d
1, 
=live locs at L2%1%d
1, 
=live locs at L2%2%bbentry
1, 
=live locs at L2%4%bbentry
1, 
=live locs at L2%5%fcallStart
11, 
=live locs at L2%5%fcallEnd
12, 
=live locs at L2%8%bbentry
14, 
=live locs at E0%0%d
15, 

=Definedness in src.spec.opt_map
=loc definedness at L0%0%d
1, 9, 10
=loc definedness at L2%1%d
1, 9, 10
=loc definedness at L2%2%bbentry
1, 9, 10
=loc definedness at L2%4%bbentry
1, 9, 10
=loc definedness at L2%5%fcallStart
1, 9, 10, 11
=loc definedness at L2%5%fcallEnd
1, 9, 10, 11, 12, 13
=loc definedness at L2%8%bbentry
1, 9, 10, 14
=loc definedness at E0%0%d
1, 9, 10, 14, 15

=Branch affecting variable locs in src.spec.opt_map
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L2%1%d
1
=branch affecting variable locs at L2%2%bbentry

=branch affecting variable locs at L2%4%bbentry

=branch affecting variable locs at L2%5%fcallStart

=branch affecting variable locs at L2%5%fcallEnd

=branch affecting variable locs at L2%8%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.opt_map
=relevant memlabels
=function: opt_map
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%1%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%1%d done
=graph_with_edge_structures.loc_to_expr_map at L2%1%d=>L2%2%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%1%d=>L2%2%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%1%d=>L2%4%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%1%d=>L2%4%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%2%bbentry=>L2%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%2%bbentry=>L2%8%bbentry for loc_id 14 {input.spec-%tmpvar-5.L2%8%bbentry }
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%2%bbentry=>L2%8%bbentry for loc_id 16 {input.spec-%var-u-0.L2%8%bbentry }
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%2%bbentry=>L2%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%5%fcallStart
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%5%fcallStart for loc_id 11 {input.spec-%var-val-1.L2%5%fcallStart }
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%5%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at L2%5%fcallStart=>L2%5%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at L2%5%fcallStart=>L2%5%fcallEnd for loc_id 12 {input.spec-%tmpvar-3.L2%5%fcallEnd }
1 : spec.func.call19e08a8492cfd0d4521b4a2c174dacb : FUNCTION[BV:32 -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
4 : spec_function_call(1, 2, 3) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%5%fcallStart=>L2%5%fcallEnd for loc_id 13 {input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd }
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%5%fcallStart=>L2%5%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at L2%5%fcallEnd=>L2%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%5%fcallEnd=>L2%8%bbentry for loc_id 14 {input.spec-%tmpvar-5.L2%8%bbentry }
1 : SORT2EXPR.VAR : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
4 : sum_init(1, 2, 3) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%5%fcallEnd=>L2%8%bbentry for loc_id 17 {input.spec-%tmpvar-4.L2%8%bbentry }
1 : SORT2EXPR.VAR : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
4 : sum_init(1, 2, 3) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%5%fcallEnd=>L2%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%8%bbentry=>E0%0%d for loc_id 15 {input.spec-%tmpvar-6.E0%0%d }
1 : input.spec-%tmpvar-5.L2%8%bbentry : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%1%d:
vacuous mls at L2%2%bbentry:
vacuous mls at L2%4%bbentry:
vacuous mls at L2%5%fcallStart:
vacuous mls at L2%5%fcallEnd:
vacuous mls at L2%8%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%1%d:
non-vacuous mls at L2%2%bbentry:
non-vacuous mls at L2%4%bbentry:
non-vacuous mls at L2%5%fcallStart:
non-vacuous mls at L2%5%fcallEnd:
non-vacuous mls at L2%8%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.opt_map
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 11
=loc_expr
140298 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=avail_exprs_val.end
=loc 13
=loc_expr
140312 : input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=avail_exprs_val.end
=loc 16
=loc_expr
140313 : input.spec-%var-u-0.L2%8%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.opt_map
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;opt_map}
=loc_id 1 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 9 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 10 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 11 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 12 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 13 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 14 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 15 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 16 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 17 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%1%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%1%d=>L2%2%bbentry
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%1%d=>L2%4%bbentry
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%2%bbentry=>L2%8%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%4%bbentry=>L2%5%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%5%fcallStart=>L2%5%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%5%fcallEnd=>L2%8%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%1%d=>L2%2%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%1%d=>L2%4%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%2%bbentry=>L2%8%bbentry
=spec-%tmpvar-5.L2%8%bbentry
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
=spec-%var-u-0.L2%8%bbentry
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%4%bbentry=>L2%5%fcallStart
=spec-%var-val-1.L2%5%fcallStart
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%5%fcallStart=>L2%5%fcallEnd
=spec-%tmpvar-3.L2%5%fcallEnd
1 : spec.func.call19e08a8492cfd0d4521b4a2c174dacb : FUNCTION[BV:32 -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
4 : spec_function_call(1, 2, 3) : BV:32
=spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%5%fcallEnd=>L2%8%bbentry
=spec-%tmpvar-5.L2%8%bbentry
1 : SORT2EXPR.VAR : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
4 : sum_init(1, 2, 3) : SUM[UNIT,BV:32]
=spec-%tmpvar-4.L2%8%bbentry
1 : SORT2EXPR.VAR : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
4 : sum_init(1, 2, 3) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%bbentry=>E0%0%d
=spec-%tmpvar-6.E0%0%d
1 : input.spec-%tmpvar-5.L2%8%bbentry : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%1%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%1%d done
=graph_with_simplified_assets.simplified_assumes at L2%1%d=>L2%2%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%1%d=>L2%2%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%1%d=>L2%4%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%1%d=>L2%4%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%2%bbentry=>L2%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%2%bbentry=>L2%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%4%bbentry=>L2%5%fcallStart
=graph_with_simplified_assets.simplified_assumes at L2%4%bbentry=>L2%5%fcallStart done
=graph_with_simplified_assets.simplified_assumes at L2%5%fcallStart=>L2%5%fcallEnd
=graph_with_simplified_assets.simplified_assumes at L2%5%fcallStart=>L2%5%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at L2%5%fcallEnd=>L2%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%5%fcallEnd=>L2%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
C_NEXTPC1 : update_val
=Nextpc-map done
=suffixpaths for src.spec.opt_map
=suffixpath_at_L0%0%d for src.spec.opt_map
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%1%d for src.spec.opt_map
=suffixpath_at_L2%1%d.graph_edge_composition
(L0%0%d=>L2%1%d)
=suffixpath_at_L2%2%bbentry for src.spec.opt_map
=suffixpath_at_L2%2%bbentry.graph_edge_composition
((L0%0%d=>L2%1%d)*(L2%1%d=>L2%2%bbentry))
=suffixpath_at_L2%4%bbentry for src.spec.opt_map
=suffixpath_at_L2%4%bbentry.graph_edge_composition
((L0%0%d=>L2%1%d)*(L2%1%d=>L2%4%bbentry))
=suffixpath_at_L2%5%fcallStart for src.spec.opt_map
=suffixpath_at_L2%5%fcallStart.graph_edge_composition
((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%5%fcallStart)))
=suffixpath_at_L2%5%fcallEnd for src.spec.opt_map
=suffixpath_at_L2%5%fcallEnd.graph_edge_composition
((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%5%fcallStart)*(L2%5%fcallStart=>L2%5%fcallEnd))))
=suffixpath_at_L2%8%bbentry for src.spec.opt_map
=suffixpath_at_L2%8%bbentry.graph_edge_composition
(((L0%0%d=>L2%1%d)*((L2%1%d=>L2%2%bbentry)*(L2%2%bbentry=>L2%8%bbentry)))+((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%5%fcallStart)*((L2%5%fcallStart=>L2%5%fcallEnd)*(L2%5%fcallEnd=>L2%8%bbentry))))))
=suffixpath_at_E0%0%d for src.spec.opt_map
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>L2%1%d)*((L2%1%d=>L2%2%bbentry)*(L2%2%bbentry=>L2%8%bbentry)))+((L0%0%d=>L2%1%d)*((L2%1%d=>L2%4%bbentry)*((L2%4%bbentry=>L2%5%fcallStart)*((L2%5%fcallStart=>L2%5%fcallEnd)*(L2%5%fcallEnd=>L2%8%bbentry))))))*(L2%8%bbentry=>E0%0%d))
=suffixpaths for src.spec.opt_map done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%1%d
tfg.assumes_around_edge at L0%0%d=>L2%1%d done
tfg.assumes_around_edge at L2%1%d=>L2%2%bbentry
tfg.assumes_around_edge at L2%1%d=>L2%2%bbentry done
tfg.assumes_around_edge at L2%1%d=>L2%4%bbentry
tfg.assumes_around_edge at L2%1%d=>L2%4%bbentry done
tfg.assumes_around_edge at L2%2%bbentry=>L2%8%bbentry
tfg.assumes_around_edge at L2%2%bbentry=>L2%8%bbentry done
tfg.assumes_around_edge at L2%4%bbentry=>L2%5%fcallStart
tfg.assumes_around_edge at L2%4%bbentry=>L2%5%fcallStart done
tfg.assumes_around_edge at L2%5%fcallStart=>L2%5%fcallEnd
tfg.assumes_around_edge at L2%5%fcallStart=>L2%5%fcallEnd done
tfg.assumes_around_edge at L2%5%fcallEnd=>L2%8%bbentry
tfg.assumes_around_edge at L2%5%fcallEnd=>L2%8%bbentry done
tfg.assumes_around_edge at L2%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%8%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.opt_map:
=TFG:
=Nodes: L0%0%d Lentry%2%d Lif.end%1%bbentry Lif.then%1%d Lif.then%2%fcallStart Lif.then%2%fcallEnd E0%0%d
=Edges:
L0%0%d => Lentry%2%d
Lentry%2%d => Lif.then%1%d
Lentry%2%d => Lif.end%1%bbentry
Lif.then%1%d => Lif.then%2%fcallStart
Lif.then%2%fcallStart => Lif.then%2%fcallEnd
Lif.then%2%fcallEnd => Lif.end%1%bbentry
Lif.end%1%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.end%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%2%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%2%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: opt_map
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%opt : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%opt : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : update_val : 3 : 1 : 0
C_SYMBOL2 : opt_map : 8 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%opt : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;opt_map}
=memlabel_map.0 for call-context {*;opt_map}
mlcall.dst.llvm.opt_map.2 : memlabel-mem-
=memlabel_map.1 for call-context {*;opt_map}
mlcall.dst.llvm.opt_map.3 : memlabel-mem-
=memlabel_map.2 for call-context {*;opt_map}
mlvar.dst.llvm.opt_map.0 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0
=memlabel_map.3 for call-context {*;opt_map}
mlvar.dst.llvm.opt_map.1 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0
=Edge: L0%0%d => Lentry%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%tobool.Lentry%2%d
1 : input.dst.llvm-%opt : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*  %tobool = icmp ne i32* %opt, null, !dbg !16)
tfg_edge_comment end

=Edge: Lentry%2%d => Lif.then%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %if.then, label %if.end, !dbg !18*  br i1 %tobool, label %if.then, label %if.end, !dbg !18)*  br i1 %tobool, label %if.then, label %if.end, !dbg !18)
tfg_edge_comment end

=Edge: Lentry%2%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=dst.llvm-mem.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %if.then, label %if.end, !dbg !18*  br i1 %tobool, label %if.then, label %if.end, !dbg !18)*  br i1 %tobool, label %if.then, label %if.end, !dbg !18)
tfg_edge_comment end

=Edge: Lif.then%1%d => Lif.then%2%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%0.Lif.then%2%fcallStart
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.opt_map.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((  %0 = load i32, i32* %opt, align 4, !dbg !19*  %0 = load i32, i32* %opt, align 4, !dbg !19)*fcall_edge_start)
tfg_edge_comment end

=Edge: Lif.then%2%fcallStart => Lif.then%2%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call.Lif.then%2%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.opt_map.2 : MEMLABEL
3 : mlcall.dst.llvm.opt_map.3 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-mem.Lif.then%2%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.opt_map.2 : MEMLABEL
3 : mlcall.dst.llvm.opt_map.3 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call = call i32 @update_val(i32 %0), !dbg !21)
tfg_edge_comment end

=Edge: Lif.then%2%fcallEnd => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-mem.Lif.end%1%bbentry
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.opt_map.1 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*(((  store i32 %call, i32* %opt, align 4, !dbg !22*  br label %if.end, !dbg !23)*  br label %if.end, !dbg !23)*  br label %if.end, !dbg !23))
tfg_edge_comment end

=Edge: Lif.end%1%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%opt : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  ret i32* %opt, !dbg !24)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%opt : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.opt_map
=Loc 100001 in dst.llvm.opt_map.
REGMEM
dst.llvm-%opt
1 : input.dst.llvm-%opt : BV:32
=Loc 100005 in dst.llvm.opt_map.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100007 in dst.llvm.opt_map.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100008 in dst.llvm.opt_map.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100009 in dst.llvm.opt_map.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100010 in dst.llvm.opt_map.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100014 in dst.llvm.opt_map.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100015 in dst.llvm.opt_map.
REGMEM
dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
=Loc 100017 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100018 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap
=Loc 100019 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/
=Loc 100020 in dst.llvm.opt_map.
REGMEM
dst.llvm-%tobool.Lentry%2%d
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=Loc 100021 in dst.llvm.opt_map.
REGMEM
dst.llvm-%0.Lif.then%2%fcallStart
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=Loc 100022 in dst.llvm.opt_map.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100023 in dst.llvm.opt_map.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100024 in dst.llvm.opt_map.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100025 in dst.llvm.opt_map.
REGMEM
dst.llvm-%call.Lif.then%2%fcallEnd
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=Loc 100026 in dst.llvm.opt_map.
REGMEM
llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : BV:32
=Loc 100027 in dst.llvm.opt_map.
REGMEM
dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=Loc 100028 in dst.llvm.opt_map.
REGMEM
dst.cur_rounding_mode.Lentry%2%d
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=Loc 100029 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100030 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap
=Loc 100031 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/
=Loc 100032 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100033 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap
=Loc 100034 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/
=Locs end
=Liveness in dst.llvm.opt_map
=live locs at L0%0%d
100001[f], 100018, 100019, 
=live locs at Lentry%2%d
100001[f], 100018, 100019, 100020, 
=live locs at Lif.end%1%bbentry
100001[f], 100030, 
=live locs at Lif.then%1%d
100001[f], 100018, 100019, 
=live locs at Lif.then%2%fcallStart
100001[f], 100018, 100019, 100021, 
=live locs at Lif.then%2%fcallEnd
100001[f], 100025, 100033, 
=live locs at E0%0%d
100001[f], 100030, 

=Definedness in dst.llvm.opt_map
=loc definedness at L0%0%d
100001, 100015, 100017, 100018, 100019
=loc definedness at Lentry%2%d
100001, 100015, 100017, 100018, 100019, 100020, 100027, 100028
=loc definedness at Lif.end%1%bbentry
100001, 100015, 100017, 100018, 100019, 100020, 100027, 100028, 100029, 100030, 100031
=loc definedness at Lif.then%1%d
100001, 100015, 100017, 100018, 100019, 100020, 100027, 100028
=loc definedness at Lif.then%2%fcallStart
100001, 100015, 100017, 100018, 100019, 100020, 100021, 100027, 100028
=loc definedness at Lif.then%2%fcallEnd
100001, 100015, 100017, 100018, 100019, 100020, 100021, 100025, 100026, 100027, 100028, 100032, 100033, 100034
=loc definedness at E0%0%d
100001, 100015, 100017, 100018, 100019, 100020, 100022, 100023, 100024, 100027, 100028, 100029, 100030, 100031

=Branch affecting variable locs in dst.llvm.opt_map
=branch affecting variable locs at L0%0%d
100001
=branch affecting variable locs at Lentry%2%d
100020
=branch affecting variable locs at Lif.end%1%bbentry

=branch affecting variable locs at Lif.then%1%d

=branch affecting variable locs at Lif.then%2%fcallStart

=branch affecting variable locs at Lif.then%2%fcallEnd

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.opt_map
=relevant memlabels
=function: opt_map
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap
memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100020 {input.dst.llvm-%tobool.Lentry%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%opt : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100027 {input.dst.local_alloc_count.Lentry%2%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100028 {input.dst.cur_rounding_mode.Lentry%2%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.end%1%bbentry for loc_id 100029 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.end%1%bbentry for loc_id 100030 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.end%1%bbentry for loc_id 100031 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.then%1%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.then%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>E0%0%d for loc_id 100022 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>E0%0%d for loc_id 100023 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%opt : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>E0%0%d for loc_id 100024 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.then%2%fcallStart
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.then%2%fcallStart for loc_id 100021 {input.dst.llvm-%0.Lif.then%2%fcallStart }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.then%2%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd for loc_id 100025 {input.dst.llvm-%call.Lif.then%2%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd for loc_id 100026 {input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd }
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd for loc_id 100032 {memmask(input.dst.llvm-mem.Lif.then%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd for loc_id 100033 {memmask(input.dst.llvm-mem.Lif.then%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd for loc_id 100034 {memmask(input.dst.llvm-mem.Lif.then%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallEnd=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallEnd=>Lif.end%1%bbentry for loc_id 100029 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : memlabel-mem--arg.0 : MEMLABEL
10 : memmask(8, 2, 9) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallEnd=>Lif.end%1%bbentry for loc_id 100030 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap) }
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
10 : memmask(8, 2, 9) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallEnd=>Lif.end%1%bbentry for loc_id 100031 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallEnd=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lentry%2%d:
vacuous mls at Lif.end%1%bbentry:
vacuous mls at Lif.then%1%d:
vacuous mls at Lif.then%2%fcallStart:
vacuous mls at Lif.then%2%fcallEnd:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lentry%2%d:
non-vacuous mls at Lif.end%1%bbentry:
non-vacuous mls at Lif.then%1%d:
non-vacuous mls at Lif.then%2%fcallStart:
non-vacuous mls at Lif.then%2%fcallEnd:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.opt_map
=avail_exprs begin
=loc 100001
=loc_expr
140348 : input.dst.llvm-%opt : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100005
=loc_expr
140372 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100007
=loc_expr
140373 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140375 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140377 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100010
=loc_expr
140379 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140352 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140347 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140408 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%opt : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=avail_exprs_val.end
=loc 100021
=loc_expr
140409 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=avail_exprs_val.end
=loc 100022
=loc_expr
140418 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100023
=loc_expr
140420 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%opt : BV:32
=avail_exprs_val.end
=loc 100024
=loc_expr
140421 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100026
=loc_expr
140422 : input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=avail_exprs_val.end
=loc 100027
=loc_expr
140423 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100028
=loc_expr
140424 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.opt_map
=loc 100024 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100024 spreled-expr
140267 : retaddr_const : BV:32
=loc 100027 expr
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=loc 100027 spreled-expr
140352 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100028 expr
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=loc 100028 spreled-expr
140351 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;opt_map}
=loc_id 100001 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100005 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100007 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100008 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100009 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100010 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100014 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100015 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100017 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100018 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100019 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100020 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100021 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100022 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_linearly_related(; )
=loc_id 100023 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_linearly_related(; )
=loc_id 100025 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100027 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_linearly_related(; )
=loc_id 100028 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_linearly_related(; )
=loc_id 100029 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100030 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100034 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100024 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100027 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100028 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lif.end%1%bbentry
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lif.then%1%d
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.end%1%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%1%d=>Lif.then%2%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%2%fcallEnd=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%2%d
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%tobool.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%opt : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lif.end%1%bbentry
=dst.llvm-mem.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lif.then%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.end%1%bbentry=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%opt : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%1%d=>Lif.then%2%fcallStart
=dst.llvm-%0.Lif.then%2%fcallStart
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=dst.llvm-%call.Lif.then%2%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=dst.llvm-mem.Lif.then%2%fcallEnd
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%2%fcallEnd=>Lif.end%1%bbentry
=dst.llvm-mem.Lif.end%1%bbentry
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d assume# 0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.then%1%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.then%1%d done
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.then%2%fcallStart
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.then%2%fcallStart assume# 0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.then%2%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lif.then%2%fcallEnd=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.then%2%fcallEnd=>Lif.end%1%bbentry assume# 0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%2%fcallEnd=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
C_NEXTPC1 : update_val
=Nextpc-map done
=suffixpaths for dst.llvm.opt_map
=suffixpath_at_L0%0%d for dst.llvm.opt_map
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lentry%2%d for dst.llvm.opt_map
=suffixpath_at_Lentry%2%d.graph_edge_composition
(L0%0%d=>Lentry%2%d)
=suffixpath_at_Lif.end%1%bbentry for dst.llvm.opt_map
=suffixpath_at_Lif.end%1%bbentry.graph_edge_composition
(((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.end%1%bbentry))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*((Lif.then%1%d=>Lif.then%2%fcallStart)*((Lif.then%2%fcallStart=>Lif.then%2%fcallEnd)*(Lif.then%2%fcallEnd=>Lif.end%1%bbentry))))))
=suffixpath_at_Lif.then%1%d for dst.llvm.opt_map
=suffixpath_at_Lif.then%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.then%1%d))
=suffixpath_at_Lif.then%2%fcallStart for dst.llvm.opt_map
=suffixpath_at_Lif.then%2%fcallStart.graph_edge_composition
((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lif.then%2%fcallStart)))
=suffixpath_at_Lif.then%2%fcallEnd for dst.llvm.opt_map
=suffixpath_at_Lif.then%2%fcallEnd.graph_edge_composition
((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*((Lif.then%1%d=>Lif.then%2%fcallStart)*(Lif.then%2%fcallStart=>Lif.then%2%fcallEnd))))
=suffixpath_at_E0%0%d for dst.llvm.opt_map
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.end%1%bbentry))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*((Lif.then%1%d=>Lif.then%2%fcallStart)*((Lif.then%2%fcallStart=>Lif.then%2%fcallEnd)*(Lif.then%2%fcallEnd=>Lif.end%1%bbentry))))))*(Lif.end%1%bbentry=>E0%0%d))
=suffixpaths for dst.llvm.opt_map done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lentry%2%d
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lentry%2%d done
tfg.assumes_around_edge at Lentry%2%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lentry%2%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge at Lentry%2%d=>Lif.then%1%d
tfg.assumes_around_edge at Lentry%2%d=>Lif.then%1%d done
tfg.assumes_around_edge at Lif.end%1%bbentry=>E0%0%d
tfg.assumes_around_edge at Lif.end%1%bbentry=>E0%0%d done
tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart
tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart assume #0
tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart assume #0.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%1%d=>Lif.then%2%fcallStart
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart done
tfg.assumes_around_edge at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
tfg.assumes_around_edge at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd done
tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%2%fcallEnd=>Lif.end%1%bbentry
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 6
=pc
Lentry%2%d
=linename
line 6
=pc
Lif.end%1%d
=linename
line 9
=pc
Lif.then%1%d
=linename
line 7
=pc
Lif.then%2%d
=linename
line 7
=pc
Lif.then%3%d
=linename
line 7
=pc
Lif.then%4%d
=linename
line 8
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 7
=pc
Lentry%2%d
=column_name
 at column 7
=pc
Lif.end%1%d
=column_name
 at column 3
=pc
Lif.then%1%d
=column_name
 at column 23
=pc
Lif.then%2%d
=column_name
 at column 12
=pc
Lif.then%3%d
=column_name
 at column 10
=pc
Lif.then%4%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
line 6
=pc
Lentry%2%d
=line_and_column
line 6
=pc
Lif.end%1%d
=line_and_column
line 9
=pc
Lif.then%1%d
=line_and_column
(line 7 at column 23)
=pc
Lif.then%2%d
=line_and_column
(line 7 at column 12)
=pc
Lif.then%3%d
=line_and_column
(line 7 at column 10)
=pc
Lif.then%4%d
=line_and_column
line 8
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
input.dst.llvm-%opt : L0%0%d : opt'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%tobool : L0%0%d : not(opt' = 0)
input.dst.llvm-%0 : L0%0%d : DSTMEM[opt']_4
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : opt'
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.llvm-fcall_arg_copy.0.dst.llvm-%0 : L0%0%d : input.dst.llvm-%0
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%tobool.Lentry%2%d : L0%0%d : not(opt' = 0)
input.dst.llvm-%0.Lif.then%2%fcallStart : L0%0%d : DSTMEM[opt']_4
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : opt'
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : L0%0%d : input.dst.llvm-%0.Lif.then%2%fcallStart
input.dst.local_alloc_count.Lentry%2%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lentry%2%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%0
=dst.llvm-%0 loop pc: L0%0%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
1 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
1 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev nullptr
=dst.llvm-%call
=dst.llvm-%call loop pc: L0%0%d
=dst.llvm-%call val_scevb
=dst.llvm-%call val_scevb scev
=dst.llvm-%call val_scevb scev loop: L0%0%d
=dst.llvm-%call val_scevb scev scev_overflow_flag: 
=dst.llvm-%call val_scevb scev scev_expr
2 : input.dst.llvm-%call : BV32
=dst.llvm-%call val_scevb scev scev_expr done
=dst.llvm-%call val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb
=dst.llvm-%call atuse_scevb scev
=dst.llvm-%call atuse_scevb scev loop: L0%0%d
=dst.llvm-%call atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call atuse_scevb scev scev_expr
2 : input.dst.llvm-%call : BV32
=dst.llvm-%call atuse_scevb scev scev_expr done
=dst.llvm-%call atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lif.end%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=reaching defns for expr 1 edges
  Lif.then%1%d=>Lif.then%2%fcallStart
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 6 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 7 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at Lif.then%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lif.then%2%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=reaching defns for expr 1 edges
  Lif.then%1%d=>Lif.then%2%fcallStart
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns done
=Reaching Definitions at Lif.then%2%fcallEnd
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=reaching defns for expr 1 edges
  Lif.then%1%d=>Lif.then%2%fcallStart
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 6 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 7 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=reaching defns for expr 1 edges
  Lif.then%1%d=>Lif.then%2%fcallStart
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 6 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 7 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lif.end%1%bbentry=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lif.end%1%bbentry=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lif.end%1%bbentry=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%opt
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%tobool.Lentry%2%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%0.Lif.then%2%fcallStart
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%call.Lif.then%2%fcallEnd
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.local_alloc_count.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%2%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename fcall2.proof
=function_name opt_map
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: opt_map
=EntryPreconds
=pred 0
=Comment
pointer-implements-opt-arg0
=LhsExpr
1 : $spec-arg-0 : SUM[UNIT,BV:32]
2 : $llvm-arg-0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 3, 5) : BV:32
7 : unit : UNIT
8 : $llvm-md : ARRAY[BV:32 -> BV:8]
9 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-top : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 2, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
pointer-implements-opt-ret
=LhsExpr
1 : $spec-ret : SUM[UNIT,BV:32]
2 : $llvm-ret : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 3, 5) : BV:32
7 : unit : UNIT
8 : $llvm-md : ARRAY[BV:32 -> BV:8]
9 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-top : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 2, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=FunctionName: update_val
=EntryPreconds
=pred 0
=Comment
equal-arg0
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L2%5%fcallStart_Lif.then%2%fcallStart L2%5%fcallEnd_Lif.then%2%fcallEnd E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L2%5%fcallStart_Lif.then%2%fcallStart
L2%5%fcallStart_Lif.then%2%fcallStart => L2%5%fcallEnd_Lif.then%2%fcallEnd
L2%5%fcallEnd_Lif.then%2%fcallEnd => E0%0%d_E0%0%d
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: opt_map
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%opt : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : update_val : 3 : 1 : 0
C_SYMBOL2 : opt_map : 8 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%opt : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L2%5%fcallStart_Lif.then%2%fcallStart
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L2%5%fcallStart at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>L2%1%d#{0,0})*((L2%1%d#{0,0}=>L2%4%bbentry#{0,0})*(L2%4%bbentry#{0,0}=>L2%5%fcallStart#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lif.then%2%fcallStart at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>Lentry%2%d#{0,0})*((Lentry%2%d#{0,0}=>Lif.then%1%d#{0,0})*(Lif.then%1%d#{0,0}=>Lif.then%2%fcallStart#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%5%fcallStart_Lif.then%2%fcallStart => L2%5%fcallEnd_Lif.then%2%fcallEnd
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%5%fcallStart to L2%5%fcallEnd at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L2%5%fcallStart#{0,0}=>L2%5%fcallEnd#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lif.then%2%fcallStart to Lif.then%2%fcallEnd at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lif.then%2%fcallStart#{0,0}=>Lif.then%2%fcallEnd#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%5%fcallEnd_Lif.then%2%fcallEnd => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%5%fcallEnd to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L2%5%fcallEnd#{0,0}=>L2%8%bbentry#{0,0})*(L2%8%bbentry#{0,0}=>E0%0%d#{0,0}))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lif.then%2%fcallEnd to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lif.then%2%fcallEnd#{0,0}=>Lif.end%1%bbentry#{0,0})*(Lif.end%1%bbentry#{0,0}=>E0%0%d#{0,0}))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumesAssume.0
1 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
=Edge.cg_edge_assumes.Assumes.end

=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>L2%1%d#{0,0})*((L2%1%d#{0,0}=>L2%2%bbentry#{0,0})*((L2%2%bbentry#{0,0}=>L2%8%bbentry#{0,0})*(L2%8%bbentry#{0,0}=>E0%0%d#{0,0}))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>Lentry%2%d#{0,0})*((Lentry%2%d#{0,0}=>Lif.end%1%bbentry#{0,0})*(Lif.end%1%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-opt-arg0
=LhsExpr
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%opt : BV:32
=predicate done
=graph_with_precondition_done

=Locs in opt_map.A1.B1.C1.D1
=Locs end
=Liveness in opt_map.A1.B1.C1.D1
=live locs at L0%0%d_L0%0%d

=live locs at L2%5%fcallStart_Lif.then%2%fcallStart

=live locs at L2%5%fcallEnd_Lif.then%2%fcallEnd

=live locs at E0%0%d_E0%0%d


=Definedness in opt_map.A1.B1.C1.D1

=Branch affecting variable locs in opt_map.A1.B1.C1.D1

=Relevant Memlabels in opt_map.A1.B1.C1.D1
=relevant memlabels
=function: opt_map
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap
memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in opt_map.A1.B1.C1.D1
=avail_exprs begin
=avail_exprs end
=sprel_map in opt_map.A1.B1.C1.D1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece cvc4.ce3.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin cvc4.ce3 872e672463e8b14fe984c4ff748f
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3205076479 ] -> 0, [ 3205076480; 3205076480 ] -> 253, [ 3205076481; 3205076481 ] -> 255, [ 3205076482; 3205076482 ] -> 255, [ 3205076483; 3205076483 ] -> 255, [ 3205076484; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3205076479 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 3205076480; 3205076483 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 3205076484; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 3205076480 { 0xbf099600 -1089890816 -1.7489013e255 } : BV:32
=input.dst.llvm-%opt
1 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 3205076480 { 0xbf099600 -1089890816 -1.7489013e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 3205076483 { 0xbf099603 -1089890813 -1.7489049e255 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=counter_example.random_seed
1655087171
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 21e5254411afcbe18123dce41c6db1
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 4278124286 { 0xfefefefe -16843010 -1.99215674e126 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 4278124286 { 0xfefefefe -16843010 -1.99215674e126 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1610678268 ] -> 254, [ 1610678269; 1610678269 ] -> 255, [ 1610678270; 1610678270 ] -> 255, [ 1610678271; 1610678271 ] -> 95, [ 1610678272; 4294967295 ] -> 254, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1610678267 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 1610678268; 1610678271 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 1610678272; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 1610678268 { 0x6000fffc +1.781202e65 } : BV:32
=input.dst.llvm-%opt
1 : 1610612734 { 0x5ffffffe +1.99999976e64 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 4278124286 { 0xfefefefe -16843010 -1.99215674e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 1610678268 { 0x6000fffc +1.781202e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 1610678271 { 0x6000ffff +1.781238e65 } : BV:32
=input.spec-%var-opt-0.2
1 : 4278124286 { 0xfefefefe -16843010 -1.99215674e126 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=counter_example.random_seed
928181921
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece yices.ce5.num_edges_traversed2
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart)*(L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd))
=global nodece 2 nodece_cached_counterexample
=counter_example_begin yices.ce5 1eb1612d94ae627373db954afb105b
=nextpc_const.1
1 : 170768492 { 0xa2db86c +1.35719060e149 } : BV:32
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L2%5%fcallEnd
1 : 1576845192 { 0x5dfcbf88 +1.97459506e60 } : BV:32
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec.func.call19e08a8492cfd0d4521b4a2c174dacb
1 : ([ 0; 4294967295 ] -> 1576845192, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2 ] -> 0, [ 3; 3 ] -> 128, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%opt
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1073835107 { 0x40016c63 +1.1112020e1 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 137 , m_adder -> 137), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 170768492 , 1000 , 0 ) -> 1756954086, () -> 1885047482, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%tobool.Lentry%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lif.then%2%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lif.then%2%fcallEnd
1 : ([ 0; 2 ] -> 0, [ 3; 3 ] -> 128, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lif.then%2%fcallEnd
1 : 1756954086 { 0x68b8fde6 +1.44524836e82 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lentry%2%d
1 : 1073835107 { 0x40016c63 +1.1112020e1 } : COUNT
=input.dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 137 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
725103186
=counter_example_end
=global nodece 2 num_edges_traversed 2
=global nodece 2 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L2%5%fcallStart_Lif.then%2%fcallStart -> L2%5%fcallEnd_Lif.then%2%fcallEnd
=global nodece 3
=global nodece 3 nodece cvc4.ce25.num_edges_traversed2
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart)*(L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd))
=global nodece 3 nodece_cached_counterexample
=counter_example_begin cvc4.ce25 e32543e4751543c13a761a9d42293dc3
=nextpc_const.1
1 : 552785511 { 0x20f2d667 +1.89716804e194 } : BV:32
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L2%5%fcallEnd
1 : 348252300 { 0x14c1e88c +1.51490926e170 } : BV:32
=input.spec-%var-val-1.L2%5%fcallStart
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec.func.call19e08a8492cfd0d4521b4a2c174dacb
1 : ([ 0; 4294967295 ] -> 348252300, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3221224955 ] -> 0, [ 3221224956; 3221224956 ] -> 1, [ 3221224957; 4156689527 ] -> 0, [ 4156689528; 4156689528 ] -> 252, [ 4156689529; 4156689529 ] -> 253, [ 4156689530; 4156689530 ] -> 255, [ 4156689531; 4156689531 ] -> 191, [ 4156689532; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4156689527 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 4156689528; 4156689531 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 4156689532; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 4156689528 { 0xf7c20c78 -138277768 -1.51600551e112 } : BV:32
=input.dst.llvm-%opt
1 : 3221224956 { 0xbffffdfc -1073742340 -1.99993848e0 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1638728477 { 0x61ad031d +1.35165750e68 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 188 , m_adder -> 197), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 552785511 , 1000 , 1 ) -> 541407871, () -> 1281840322, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%tobool.Lentry%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lif.then%2%fcallStart
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lif.then%2%fcallEnd
1 : ([ 0; 3221224955 ] -> 0, [ 3221224956; 3221224956 ] -> 1, [ 3221224957; 4156689527 ] -> 0, [ 4156689528; 4156689528 ] -> 252, [ 4156689529; 4156689529 ] -> 253, [ 4156689530; 4156689530 ] -> 255, [ 4156689531; 4156689531 ] -> 191, [ 4156689532; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lif.then%2%fcallEnd
1 : 541407871 { 0x20453a7f +1.54084765e193 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lentry%2%d
1 : 1638728477 { 0x61ad031d +1.35165750e68 } : COUNT
=input.dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 4156689528 { 0xf7c20c78 -138277768 -1.51600551e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 4156689531 { 0xf7c20c7b -138277765 -1.51600587e112 } : BV:32
=input.spec-%var-opt-0.2
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 188 , m_adder -> 197), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3567850697
=counter_example_end
=global nodece 3 num_edges_traversed 2
=global nodece 3 nodece_visted_pcs: 
L2%5%fcallStart_Lif.then%2%fcallStart -> L2%5%fcallEnd_Lif.then%2%fcallEnd
=global nodece 4
=global nodece 4 nodece z3v487.ce26.num_edges_traversed2
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart)*(L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd))
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce26 55cc974e966fdb2d52f3d479248
=nextpc_const.1
1 : 385065599 { 0x16f3a27f +1.90339648e174 } : BV:32
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 65536 { 0x10000 +1.781250e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L2%5%fcallEnd
1 : 1710381745 { 0x65f25ab1 +1.89339268e76 } : BV:32
=input.spec-%var-val-1.L2%5%fcallStart
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=spec.func.call19e08a8492cfd0d4521b4a2c174dacb
1 : ([ 0; 4294967295 ] -> 1710381745, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3736577 ] -> 0, [ 3736578; 3736578 ] -> 1, [ 3736579; 8337404 ] -> 0, [ 8337405; 8337405 ] -> 4, [ 8337406; 8337406 ] -> 57, [ 8337407; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8337403 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 8337404; 8337407 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 8337408; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 8337404 { 0x7f37fc +1.99389600e129 } : BV:32
=input.dst.llvm-%opt
1 : 3736576 { 0x390400 +1.44543457e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1584375051 { 0x5e6fa50b +1.87222421e61 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 217 , m_adder -> 129), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 385065599 , 1000 , 65536 ) -> 1407884651, () -> 2033339222, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-%tobool.Lentry%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lif.then%2%fcallStart
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem.Lif.then%2%fcallEnd
1 : ([ 0; 3736577 ] -> 0, [ 3736578; 3736578 ] -> 1, [ 3736579; 8337404 ] -> 0, [ 8337405; 8337405 ] -> 4, [ 8337406; 8337406 ] -> 57, [ 8337407; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lif.then%2%fcallEnd
1 : 1407884651 { 0x53ea9d6b +1.83292901e40 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.local_alloc_count.Lentry%2%d
1 : 1584375051 { 0x5e6fa50b +1.87222421e61 } : COUNT
=input.dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 8337404 { 0x7f37fc +1.99389600e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 8337407 { 0x7f37ff +1.99389636e129 } : BV:32
=input.spec-%var-opt-0.2
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 217 , m_adder -> 129), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1614407981
=counter_example_end
=global nodece 4 num_edges_traversed 2
=global nodece 4 nodece_visted_pcs: 
L2%5%fcallStart_Lif.then%2%fcallStart -> L2%5%fcallEnd_Lif.then%2%fcallEnd
=global nodece 5
=global nodece 5 nodece z3v487.ce67.num_edges_traversed2
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart)*(L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd))
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce67 6fabfa9aff65540469077b9f634637
=nextpc_const.1
1 : 676906058 { 0x2858c44a +1.69349026e209 } : BV:32
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 2155872384 { 0x80800080 -2139094912 -1.1525e130 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L2%5%fcallEnd
1 : 569632007 { 0x21f3e507 +1.90542685e196 } : BV:32
=input.spec-%var-val-1.L2%5%fcallStart
1 : 2155872384 { 0x80800080 -2139094912 -1.1525e130 } : BV:32
=spec.func.call19e08a8492cfd0d4521b4a2c174dacb
1 : ([ 0; 4294967295 ] -> 569632007, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 34537472 ] -> 128, [ 34537473; 34537473 ] -> 0, [ 34537474; 57671227 ] -> 128, [ 57671228; 57671228 ] -> 0, [ 57671229; 57671229 ] -> 0, [ 57671230; 57671230 ] -> 15, [ 57671231; 57671231 ] -> 2, [ 57671232; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 57671227 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 57671228; 57671231 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 57671232; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 57671228 { 0x36ffe3c +1.87494611e135 } : BV:32
=input.dst.llvm-%opt
1 : 34537472 { 0x20f0000 +1.11718750e133 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1976665301 { 0x75d184d5 +1.63686621e108 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 48 , m_adder -> 104), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 676906058 , 1000 , 2155872384 ) -> 1951132708, () -> 562938097, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 2155872384 { 0x80800080 -2139094912 -1.1525e130 } : BV:32
=input.dst.llvm-%tobool.Lentry%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lif.then%2%fcallStart
1 : 2155872384 { 0x80800080 -2139094912 -1.1525e130 } : BV:32
=input.dst.llvm-mem.Lif.then%2%fcallEnd
1 : ([ 0; 34537472 ] -> 128, [ 34537473; 34537473 ] -> 0, [ 34537474; 57671227 ] -> 128, [ 57671228; 57671228 ] -> 0, [ 57671229; 57671229 ] -> 0, [ 57671230; 57671230 ] -> 15, [ 57671231; 57671231 ] -> 2, [ 57671232; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lif.then%2%fcallEnd
1 : 1951132708 { 0x744bec24 +1.59314393e105 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : 2155872384 { 0x80800080 -2139094912 -1.1525e130 } : BV:32
=input.dst.local_alloc_count.Lentry%2%d
1 : 1976665301 { 0x75d184d5 +1.63686621e108 } : COUNT
=input.dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 57671228 { 0x36ffe3c +1.87494611e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 57671231 { 0x36ffe3f +1.87494647e135 } : BV:32
=input.spec-%var-opt-0.2
1 : 2155872384 { 0x80800080 -2139094912 -1.1525e130 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 48 , m_adder -> 104), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
748958876
=counter_example_end
=global nodece 5 num_edges_traversed 2
=global nodece 5 nodece_visted_pcs: 
L2%5%fcallStart_Lif.then%2%fcallStart -> L2%5%fcallEnd_Lif.then%2%fcallEnd
=global nodece 6
=global nodece 6 nodece cvc4.ce68.num_edges_traversed2
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart)*(L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd))
=global nodece 6 nodece_cached_counterexample
=counter_example_begin cvc4.ce68 6ace61ef32da7a3325bb5cc30b611fb
=nextpc_const.1
1 : 112550079 { 0x6b560bf +1.41701495e142 } : BV:32
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L2%5%fcallEnd
1 : 1001561971 { 0x3bb29f73 +1.39549100e248 } : BV:32
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec.func.call19e08a8492cfd0d4521b4a2c174dacb
1 : ([ 0; 4294967295 ] -> 1001561971, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1587158011 ] -> 0, [ 1587158012; 1587158012 ] -> 252, [ 1587158013; 1587158013 ] -> 247, [ 1587158014; 1587158014 ] -> 255, [ 1587158015; 1587158015 ] -> 27, [ 1587158016; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1587158011 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 1587158012; 1587158015 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 1587158016; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 1587158012 { 0x5e9a1bfc +1.20397901e62 } : BV:32
=input.dst.llvm-%opt
1 : 469759996 { 0x1bfff7fc +1.99975538e184 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 119911573 { 0x725b495 +1.29457342e143 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 36 , m_adder -> 61), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 112550079 , 1000 , 0 ) -> 770209125, () -> 140025166, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%tobool.Lentry%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lif.then%2%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lif.then%2%fcallEnd
1 : ([ 0; 1587158011 ] -> 0, [ 1587158012; 1587158012 ] -> 252, [ 1587158013; 1587158013 ] -> 247, [ 1587158014; 1587158014 ] -> 255, [ 1587158015; 1587158015 ] -> 27, [ 1587158016; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lif.then%2%fcallEnd
1 : 770209125 { 0x2de87565 +1.81608259e220 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lentry%2%d
1 : 119911573 { 0x725b495 +1.29457342e143 } : COUNT
=input.dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 1587158012 { 0x5e9a1bfc +1.20397901e62 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 1587158015 { 0x5e9a1bff +1.20397937e62 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 36 , m_adder -> 61), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1832669884
=counter_example_end
=global nodece 6 num_edges_traversed 2
=global nodece 6 nodece_visted_pcs: 
L2%5%fcallStart_Lif.then%2%fcallStart -> L2%5%fcallEnd_Lif.then%2%fcallEnd
=global nodece 7
=global nodece 7 nodece cvc4.ce235.num_edges_traversed0
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(epsilon)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin cvc4.ce235 129f2664c0e1ed4ca071a0642b668838
=input.spec-%var-opt-0
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2740979407 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 2740979408; 2740979411 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 2740979412; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 2740979408 { 0xa36006d0 -1553987888 -1.75020790e199 } : BV:32
=input.dst.llvm-%opt
1 : 1552580672 { 0x5c8a8040 +1.8203887e58 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%tobool.Lentry%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lif.then%2%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 2740979408 { 0xa36006d0 -1553987888 -1.75020790e199 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 2740979411 { 0xa36006d3 -1553987885 -1.75020825e199 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 8 { 0x8 +1.95e129 } : BV:32
=counter_example.random_seed
2818800451
=counter_example_end
=global nodece 7 num_edges_traversed 0
=global nodece 7 nodece_visted_pcs: 
L2%5%fcallStart_Lif.then%2%fcallStart
=global nodece 8
=global nodece 8 nodece z3v487.ce236.num_edges_traversed0
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce236 938ce36de6fba6e5e3de596fd5af80bb
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 540764387 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 540764388; 540764391 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 540764392; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 540764388 { 0x203b68e4 +1.46413850e193 } : BV:32
=input.dst.llvm-%opt
1 : 540745856 { 0x203b2080 +1.46192932e193 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%tobool.Lentry%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lif.then%2%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 540764388 { 0x203b68e4 +1.46413850e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 540764391 { 0x203b68e7 +1.46413886e193 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=counter_example.random_seed
4109874443
=counter_example_end
=global nodece 8 num_edges_traversed 0
=global nodece 8 nodece_visted_pcs: 
L2%5%fcallStart_Lif.then%2%fcallStart
=global nodece 9
=global nodece 9 nodece yices.ce237.num_edges_traversed0
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin yices.ce237 3dc91866019b540f4b17b9c4cbb8b92
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%opt
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%tobool.Lentry%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%0.Lif.then%2%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=counter_example.random_seed
1901454228
=counter_example_end
=global nodece 9 num_edges_traversed 0
=global nodece 9 nodece_visted_pcs: 
L2%5%fcallStart_Lif.then%2%fcallStart
=global nodece 10
=global nodece 10 nodece cvc4.ce383.num_edges_traversed0
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin cvc4.ce383 5bbdb686113130384c27da6e1216082
=input.spec-%var-opt-0
1 : 512 { 0x200 +1.6103e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3846309583 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 3846309584; 3846309587 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 3846309588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 3846309584 { 0xe54206d0 -448657712 -1.51583290e75 } : BV:32
=input.dst.llvm-%opt
1 : 413466688 { 0x18a50040 +1.28907012e178 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lif.then%2%fcallEnd
1 : ([ 0; 413466687 ] -> 1, [ 413466688; 413466688 ] -> 0, [ 413466689; 413466689 ] -> 0, [ 413466690; 413466690 ] -> 0, [ 413466691; 413466691 ] -> 0, [ 413466692; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 3846309584 { 0xe54206d0 -448657712 -1.51583290e75 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 3846309587 { 0xe54206d3 -448657709 -1.51583325e75 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 512 { 0x200 +1.6103e129 } : BV:32
=counter_example.random_seed
2148515125
=counter_example_end
=global nodece 10 num_edges_traversed 0
=global nodece 10 nodece_visted_pcs: 
L2%5%fcallEnd_Lif.then%2%fcallEnd
=global nodece 11
=global nodece 11 nodece z3v487.ce384.num_edges_traversed0
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(epsilon)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3v487.ce384 c750305e7dd58735fceefb78f62478
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 540764387 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 540764388; 540764391 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 540764392; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 540764388 { 0x203b68e4 +1.46413850e193 } : BV:32
=input.dst.llvm-%opt
1 : 540745856 { 0x203b2080 +1.46192932e193 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lif.then%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 540764388 { 0x203b68e4 +1.46413850e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 540764391 { 0x203b68e7 +1.46413886e193 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=counter_example.random_seed
2495635317
=counter_example_end
=global nodece 11 num_edges_traversed 0
=global nodece 11 nodece_visted_pcs: 
L2%5%fcallEnd_Lif.then%2%fcallEnd
=global nodece 12
=global nodece 12 nodece yices.ce385.num_edges_traversed0
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin yices.ce385 145afb12fcef9b4a5de0b7a744505d46
=input.spec-%var-opt-0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483647 ] -> 1, [ 2147483648; 2147483651 ] -> 0, [ 2147483652; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%opt
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lif.then%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=counter_example.random_seed
2899710879
=counter_example_end
=global nodece 12 num_edges_traversed 0
=global nodece 12 nodece_visted_pcs: 
L2%5%fcallEnd_Lif.then%2%fcallEnd
=global nodece 13
=global nodece 13 nodece cvc4.ce394.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin cvc4.ce394 b3bbc9df45f1dddc577bb89dd74a22c
=input.spec-%var-opt-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%opt
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4165106658
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 14
=global nodece 14 nodece z3v487.ce395.num_edges_traversed0
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce395 d754c17a1a2b5f29c426753cc92dbf0
=input.spec-%var-opt-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%opt
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-opt-0.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1816419266
=counter_example_end
=global nodece 14 num_edges_traversed 0
=global nodece 14 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 15
=global nodece 15 nodece yices.ce396.num_edges_traversed0
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin yices.ce396 fe1029bb17bfc44fd5c82724b149c5
=input.spec-%var-opt-0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-1.L2%5%fcallStart
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%opt
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-opt-0.2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-opt-0.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4287572064
=counter_example_end
=global nodece 15 num_edges_traversed 0
=global nodece 15 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
=inductive-invariants point_set point_expr 3
1 : input.dst.llvm-%opt : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.opt_map.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
2 : input.dst.llvm-%opt : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
5 : region_agrees_with_memlabel(1, 2, 3, 4) : BOOL
=inductive-invariants point_set point_expr 8
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.spec-%tmpvar-6.E0%0%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
=inductive-invariants point_set point_expr 12
1 : input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd : BV:32
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=inductive-invariants point_set point_expr 14
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.spec-%tmpvar-6.E0%0%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point yices.ce5
=inductive-invariants point_set point yices.ce5 expr point yices.ce5
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1576845192
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
1756954086
=inductive-invariants point_set point yices.ce5 expr point yices.ce5 done
=inductive-invariants point_set point cvc4.ce25
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 val 2 for input.spec-%var-val-1.L2%5%fcallStart
1
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 val 3 for input.dst.llvm-%opt
3221224956
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
1
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
1
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
348252300
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
1
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
541407871
=inductive-invariants point_set point cvc4.ce25 expr point cvc4.ce25 done
=inductive-invariants point_set point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 2 for input.spec-%var-val-1.L2%5%fcallStart
65536
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 3 for input.dst.llvm-%opt
3736576
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
65536
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
65536
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1710381745
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
65536
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
1407884651
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 done
=inductive-invariants point_set point yices.ce27
=inductive-invariants point_set point yices.ce27 expr point yices.ce27
=inductive-invariants point_set point yices.ce27 expr point yices.ce27 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce27 expr point yices.ce27 val 2 for input.spec-%var-val-1.L2%5%fcallStart
2147483648
=inductive-invariants point_set point yices.ce27 expr point yices.ce27 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point yices.ce27 expr point yices.ce27 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
2147483648
=inductive-invariants point_set point yices.ce27 expr point yices.ce27 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point yices.ce27 expr point yices.ce27 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
2147483648
=inductive-invariants point_set point yices.ce27 expr point yices.ce27 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point yices.ce27 expr point yices.ce27 done
=inductive-invariants point_set point yices.ce69
=inductive-invariants point_set point yices.ce69 expr point yices.ce69
=inductive-invariants point_set point yices.ce69 expr point yices.ce69 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce69 expr point yices.ce69 val 2 for input.spec-%var-val-1.L2%5%fcallStart
128
=inductive-invariants point_set point yices.ce69 expr point yices.ce69 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point yices.ce69 expr point yices.ce69 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
128
=inductive-invariants point_set point yices.ce69 expr point yices.ce69 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point yices.ce69 expr point yices.ce69 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
128
=inductive-invariants point_set point yices.ce69 expr point yices.ce69 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point yices.ce69 expr point yices.ce69 done
=inductive-invariants point_set point z3v487.ce109
=inductive-invariants point_set point z3v487.ce109 expr point z3v487.ce109
=inductive-invariants point_set point z3v487.ce109 expr point z3v487.ce109 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce109 expr point z3v487.ce109 val 2 for input.spec-%var-val-1.L2%5%fcallStart
2155937536
=inductive-invariants point_set point z3v487.ce109 expr point z3v487.ce109 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point z3v487.ce109 expr point z3v487.ce109 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
2155937536
=inductive-invariants point_set point z3v487.ce109 expr point z3v487.ce109 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point z3v487.ce109 expr point z3v487.ce109 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
2155937536
=inductive-invariants point_set point z3v487.ce109 expr point z3v487.ce109 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point z3v487.ce109 expr point z3v487.ce109 done
=inductive-invariants point_set point z3v487.ce67
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 val 2 for input.spec-%var-val-1.L2%5%fcallStart
2155872384
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 val 3 for input.dst.llvm-%opt
34537472
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
2155872384
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
2155872384
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
569632007
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
2155872384
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
1951132708
=inductive-invariants point_set point z3v487.ce67 expr point z3v487.ce67 done
=inductive-invariants point_set point cvc4.ce68
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 val 3 for input.dst.llvm-%opt
469759996
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
0
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
0
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1001561971
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
770209125
=inductive-invariants point_set point cvc4.ce68 expr point cvc4.ce68 done
=inductive-invariants point_set point yices.ce111
=inductive-invariants point_set point yices.ce111 expr point yices.ce111
=inductive-invariants point_set point yices.ce111 expr point yices.ce111 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce111 expr point yices.ce111 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point yices.ce111 expr point yices.ce111 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point yices.ce111 expr point yices.ce111 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
0
=inductive-invariants point_set point yices.ce111 expr point yices.ce111 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point yices.ce111 expr point yices.ce111 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
0
=inductive-invariants point_set point yices.ce111 expr point yices.ce111 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point yices.ce111 expr point yices.ce111 done
=inductive-invariants point_set point cvc4.ce193
=inductive-invariants point_set point cvc4.ce193 expr point cvc4.ce193
=inductive-invariants point_set point cvc4.ce193 expr point cvc4.ce193 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce193 expr point cvc4.ce193 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point cvc4.ce193 expr point cvc4.ce193 val 3 for input.dst.llvm-%opt
3690987004
=inductive-invariants point_set point cvc4.ce193 expr point cvc4.ce193 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
0
=inductive-invariants point_set point cvc4.ce193 expr point cvc4.ce193 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point cvc4.ce193 expr point cvc4.ce193 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
0
=inductive-invariants point_set point cvc4.ce193 expr point cvc4.ce193 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point cvc4.ce193 expr point cvc4.ce193 done
=inductive-invariants point_set point cvc4.ce110
=inductive-invariants point_set point cvc4.ce110 expr point cvc4.ce110
=inductive-invariants point_set point cvc4.ce110 expr point cvc4.ce110 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce110 expr point cvc4.ce110 val 2 for input.spec-%var-val-1.L2%5%fcallStart
1
=inductive-invariants point_set point cvc4.ce110 expr point cvc4.ce110 val 3 for input.dst.llvm-%opt
3204423156
=inductive-invariants point_set point cvc4.ce110 expr point cvc4.ce110 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
1
=inductive-invariants point_set point cvc4.ce110 expr point cvc4.ce110 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point cvc4.ce110 expr point cvc4.ce110 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
1
=inductive-invariants point_set point cvc4.ce110 expr point cvc4.ce110 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point cvc4.ce110 expr point cvc4.ce110 done
=inductive-invariants point_set point cvc4.ce151
=inductive-invariants point_set point cvc4.ce151 expr point cvc4.ce151
=inductive-invariants point_set point cvc4.ce151 expr point cvc4.ce151 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce151 expr point cvc4.ce151 val 2 for input.spec-%var-val-1.L2%5%fcallStart
4294967295
=inductive-invariants point_set point cvc4.ce151 expr point cvc4.ce151 val 3 for input.dst.llvm-%opt
255776252
=inductive-invariants point_set point cvc4.ce151 expr point cvc4.ce151 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
4294967295
=inductive-invariants point_set point cvc4.ce151 expr point cvc4.ce151 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point cvc4.ce151 expr point cvc4.ce151 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
4294967295
=inductive-invariants point_set point cvc4.ce151 expr point cvc4.ce151 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point cvc4.ce151 expr point cvc4.ce151 done
=inductive-invariants point_set point z3v487.ce152
=inductive-invariants point_set point z3v487.ce152 expr point z3v487.ce152
=inductive-invariants point_set point z3v487.ce152 expr point z3v487.ce152 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce152 expr point z3v487.ce152 val 2 for input.spec-%var-val-1.L2%5%fcallStart
3082270647
=inductive-invariants point_set point z3v487.ce152 expr point z3v487.ce152 val 3 for input.dst.llvm-%opt
3082944028
=inductive-invariants point_set point z3v487.ce152 expr point z3v487.ce152 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
3082270647
=inductive-invariants point_set point z3v487.ce152 expr point z3v487.ce152 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point z3v487.ce152 expr point z3v487.ce152 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
3082270647
=inductive-invariants point_set point z3v487.ce152 expr point z3v487.ce152 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point z3v487.ce152 expr point z3v487.ce152 done
=inductive-invariants point_set point yices.ce153
=inductive-invariants point_set point yices.ce153 expr point yices.ce153
=inductive-invariants point_set point yices.ce153 expr point yices.ce153 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce153 expr point yices.ce153 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point yices.ce153 expr point yices.ce153 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point yices.ce153 expr point yices.ce153 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
0
=inductive-invariants point_set point yices.ce153 expr point yices.ce153 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point yices.ce153 expr point yices.ce153 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
0
=inductive-invariants point_set point yices.ce153 expr point yices.ce153 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point yices.ce153 expr point yices.ce153 done
=inductive-invariants point_set point yices.ce195
=inductive-invariants point_set point yices.ce195 expr point yices.ce195
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
0
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
0
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point yices.ce195 expr point yices.ce195 done
=inductive-invariants point_set point z3v487.ce194
=inductive-invariants point_set point z3v487.ce194 expr point z3v487.ce194
=inductive-invariants point_set point z3v487.ce194 expr point z3v487.ce194 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce194 expr point z3v487.ce194 val 2 for input.spec-%var-val-1.L2%5%fcallStart
2155905152
=inductive-invariants point_set point z3v487.ce194 expr point z3v487.ce194 val 3 for input.dst.llvm-%opt
540745856
=inductive-invariants point_set point z3v487.ce194 expr point z3v487.ce194 val 4 for select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, mlvar.dst.llvm.opt_map.0, input.dst.llvm-%opt, 4, false)
2155905152
=inductive-invariants point_set point z3v487.ce194 expr point z3v487.ce194 val 5 for input.dst.llvm-%tobool.Lentry%2%d
1
=inductive-invariants point_set point z3v487.ce194 expr point z3v487.ce194 val 6 for input.dst.llvm-%0.Lif.then%2%fcallStart
2155905152
=inductive-invariants point_set point z3v487.ce194 expr point z3v487.ce194 val 7 for region_agrees_with_memlabel(input.dst.llvm-mem.alloc, input.dst.llvm-%opt, 4, memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap)
1
=inductive-invariants point_set point z3v487.ce194 expr point z3v487.ce194 done
=inductive-invariants point_set point yices.ce237
=inductive-invariants point_set point yices.ce237 expr point yices.ce237
=inductive-invariants point_set point yices.ce237 expr point yices.ce237 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce237 expr point yices.ce237 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point yices.ce237 expr point yices.ce237 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point yices.ce237 expr point yices.ce237 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1748774542
=inductive-invariants point_set point yices.ce237 expr point yices.ce237 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point yices.ce237 expr point yices.ce237 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
871023316
=inductive-invariants point_set point yices.ce237 expr point yices.ce237 done
=inductive-invariants point_set point cvc4.ce235
=inductive-invariants point_set point cvc4.ce235 expr point cvc4.ce235
=inductive-invariants point_set point cvc4.ce235 expr point cvc4.ce235 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce235 expr point cvc4.ce235 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point cvc4.ce235 expr point cvc4.ce235 val 3 for input.dst.llvm-%opt
1552580672
=inductive-invariants point_set point cvc4.ce235 expr point cvc4.ce235 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
117587209
=inductive-invariants point_set point cvc4.ce235 expr point cvc4.ce235 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point cvc4.ce235 expr point cvc4.ce235 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
48992731
=inductive-invariants point_set point cvc4.ce235 expr point cvc4.ce235 done
=inductive-invariants point_set point z3v487.ce236
=inductive-invariants point_set point z3v487.ce236 expr point z3v487.ce236
=inductive-invariants point_set point z3v487.ce236 expr point z3v487.ce236 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce236 expr point z3v487.ce236 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point z3v487.ce236 expr point z3v487.ce236 val 3 for input.dst.llvm-%opt
540745856
=inductive-invariants point_set point z3v487.ce236 expr point z3v487.ce236 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
810548721
=inductive-invariants point_set point z3v487.ce236 expr point z3v487.ce236 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point z3v487.ce236 expr point z3v487.ce236 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
1834890096
=inductive-invariants point_set point z3v487.ce236 expr point z3v487.ce236 done
=inductive-invariants point_set point z3v487.ce303
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 3 for input.dst.llvm-%opt
3061842456
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1397931696
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
563377593
=inductive-invariants point_set point z3v487.ce303 expr point z3v487.ce303 done
=inductive-invariants point_set point yices.ce304
=inductive-invariants point_set point yices.ce304 expr point yices.ce304
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1544740238
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
602643522
=inductive-invariants point_set point yices.ce304 expr point yices.ce304 done
=inductive-invariants point_set point z3v487.ce329
=inductive-invariants point_set point z3v487.ce329 expr point z3v487.ce329
=inductive-invariants point_set point z3v487.ce329 expr point z3v487.ce329 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce329 expr point z3v487.ce329 val 2 for input.spec-%var-val-1.L2%5%fcallStart
960051513
=inductive-invariants point_set point z3v487.ce329 expr point z3v487.ce329 val 3 for input.dst.llvm-%opt
4
=inductive-invariants point_set point z3v487.ce329 expr point z3v487.ce329 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
572366897
=inductive-invariants point_set point z3v487.ce329 expr point z3v487.ce329 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
960051513
=inductive-invariants point_set point z3v487.ce329 expr point z3v487.ce329 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
2
=inductive-invariants point_set point z3v487.ce329 expr point z3v487.ce329 done
=inductive-invariants point_set point cvc4.ce302
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 2 for input.spec-%var-val-1.L2%5%fcallStart
4294967295
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 3 for input.dst.llvm-%opt
380256320
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1443639088
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
4294967295
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
2043631467
=inductive-invariants point_set point cvc4.ce302 expr point cvc4.ce302 done
=inductive-invariants point_set point cvc4.ce330
=inductive-invariants point_set point cvc4.ce330 expr point cvc4.ce330
=inductive-invariants point_set point cvc4.ce330 expr point cvc4.ce330 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce330 expr point cvc4.ce330 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point cvc4.ce330 expr point cvc4.ce330 val 3 for input.dst.llvm-%opt
447725632
=inductive-invariants point_set point cvc4.ce330 expr point cvc4.ce330 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1794924242
=inductive-invariants point_set point cvc4.ce330 expr point cvc4.ce330 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point cvc4.ce330 expr point cvc4.ce330 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
1
=inductive-invariants point_set point cvc4.ce330 expr point cvc4.ce330 done
=inductive-invariants point_set point yices.ce331
=inductive-invariants point_set point yices.ce331 expr point yices.ce331
=inductive-invariants point_set point yices.ce331 expr point yices.ce331 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce331 expr point yices.ce331 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point yices.ce331 expr point yices.ce331 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point yices.ce331 expr point yices.ce331 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1119446137
=inductive-invariants point_set point yices.ce331 expr point yices.ce331 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point yices.ce331 expr point yices.ce331 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
0
=inductive-invariants point_set point yices.ce331 expr point yices.ce331 done
=inductive-invariants point_set point yices.ce358
=inductive-invariants point_set point yices.ce358 expr point yices.ce358
=inductive-invariants point_set point yices.ce358 expr point yices.ce358 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point yices.ce358 expr point yices.ce358 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point yices.ce358 expr point yices.ce358 val 3 for input.dst.llvm-%opt
2147483648
=inductive-invariants point_set point yices.ce358 expr point yices.ce358 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1098461035
=inductive-invariants point_set point yices.ce358 expr point yices.ce358 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point yices.ce358 expr point yices.ce358 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
901837864
=inductive-invariants point_set point yices.ce358 expr point yices.ce358 done
=inductive-invariants point_set point cvc4.ce356
=inductive-invariants point_set point cvc4.ce356 expr point cvc4.ce356
=inductive-invariants point_set point cvc4.ce356 expr point cvc4.ce356 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point cvc4.ce356 expr point cvc4.ce356 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point cvc4.ce356 expr point cvc4.ce356 val 3 for input.dst.llvm-%opt
1552580672
=inductive-invariants point_set point cvc4.ce356 expr point cvc4.ce356 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
255475084
=inductive-invariants point_set point cvc4.ce356 expr point cvc4.ce356 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point cvc4.ce356 expr point cvc4.ce356 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
442621558
=inductive-invariants point_set point cvc4.ce356 expr point cvc4.ce356 done
=inductive-invariants point_set point z3v487.ce357
=inductive-invariants point_set point z3v487.ce357 expr point z3v487.ce357
=inductive-invariants point_set point z3v487.ce357 expr point z3v487.ce357 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce357 expr point z3v487.ce357 val 2 for input.spec-%var-val-1.L2%5%fcallStart
0
=inductive-invariants point_set point z3v487.ce357 expr point z3v487.ce357 val 3 for input.dst.llvm-%opt
540745856
=inductive-invariants point_set point z3v487.ce357 expr point z3v487.ce357 val 11 for input.spec-%tmpvar-3.L2%5%fcallEnd
1664502206
=inductive-invariants point_set point z3v487.ce357 expr point z3v487.ce357 val 12 for input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd
0
=inductive-invariants point_set point z3v487.ce357 expr point z3v487.ce357 val 13 for input.dst.llvm-%call.Lif.then%2%fcallEnd
333267748
=inductive-invariants point_set point z3v487.ce357 expr point z3v487.ce357 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L2%5%fcallStart_Lif.then%2%fcallStart

=out-of-bound-exprs for reason inductive-invariants at L2%5%fcallEnd_Lif.then%2%fcallEnd

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L2%5%fcallStart_Lif.then%2%fcallStart for reason inductive-invariants
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants invariant_state failcond.description

=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants invariant_state failcond.expr is null
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants invariant_state failcond done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: yices.ce5
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 5 exprs
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%opt : BV:32
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.opt_map.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.6
=LhsExpr
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=predicate done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-32-free_var_idx.5
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.4
=LhsExpr
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.opt_map.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=predicate done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%opt : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 0: yices.ce5
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 1: cvc4.ce25
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce26
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce67
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 4: cvc4.ce68
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=5; number of visited CEs=5; number of preds=4
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 2->0; 3->1073741824; 4->0; 5->0; 6->0; 
4
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 
5
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->1; 6->0; 
6
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->1; 
matrix done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini name expr-group-region_agrees_with_memlabel
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini expr_group_type HOUDINI with 1 exprs
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini point_expr 7
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
2 : input.dst.llvm-%opt : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
5 : region_agrees_with_memlabel(1, 2, 3, 4) : BOOL
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini pred 0
=Comment
expr-group-region_agrees_with_memlabel-houdini-guess
=LhsExpr
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
2 : input.dst.llvm-%opt : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
5 : region_agrees_with_memlabel(1, 2, 3, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini predicate_set done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini is assumed eqclass : 0
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini visited ce 0: yices.ce5
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini visited ces set done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based name spec-coupling-invariants
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 3 exprs
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 8
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 9
1 : input.spec-%tmpvar-6.E0%0%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based point_expr 10
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based predicate_set done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based is assumed eqclass : 0
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based visited ce 0: yices.ce5
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based visited ces set done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini-axiom-based summary: number of exprs=3; number of visited CEs=1; number of preds=1
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 4
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 4 type houdini
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 4 type houdini name local-sizes-are-equal
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 4 type houdini expr_group_type HOUDINI with 0 exprs
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 4 type houdini done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 4 type houdini predicate_set done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 4 type houdini is assumed eqclass : 0
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 4 type houdini visited ce 0: yices.ce5
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 4 type houdini visited ces set done
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants smallest_point_cover 4 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L2%5%fcallStart_Lif.then%2%fcallStart inductive-invariants invariant_state done
=Invariant state at node L2%5%fcallEnd_Lif.then%2%fcallEnd for reason inductive-invariants
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants invariant_state failcond.description

=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants invariant_state failcond.expr is null
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants invariant_state failcond done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: yices.ce5
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 5 exprs
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%opt : BV:32
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 11
1 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 12
1 : input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd : BV:32
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 13
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.12
=LhsExpr
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd : BV:32
=predicate done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%opt : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 0: yices.ce5
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 1: cvc4.ce25
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce26
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce67
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 4: cvc4.ce68
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=5; number of visited CEs=5; number of preds=2
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 2->0; 3->1073741824; 11->0; 12->0; 13->0; 
12
-2147483648->0; 2->4294967295; 3->0; 11->0; 12->1; 13->0; 
matrix done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 4 exprs
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 8
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 14
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 15
1 : input.spec-%tmpvar-6.E0%0%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 16
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: yices.ce5
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=4; number of visited CEs=1; number of preds=2
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 3
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini name local-sizes-are-equal
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini expr_group_type HOUDINI with 0 exprs
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini predicate_set done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini is assumed eqclass : 0
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini visited ce 0: yices.ce5
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini visited ces set done
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L2%5%fcallEnd_Lif.then%2%fcallEnd inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
pointer-implements-opt-ret
=LhsExpr
1 : input.spec-%tmpvar-6.E0%0%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcL2%5%fcallStart_Lif.then%2%fcallStart-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%opt : BV:32
3 : eq(1, 2) : BOOL
4 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
5 : 1 { 0x1 +1.0e1025 } : INT
6 : sum_is(4, 5) : BOOL
7 : or(3, 6) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart edge well-formedness condition done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%opt : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
6 : 0 { 0x0 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(4, 7) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
pointer-implements-opt-ret
=LhsExpr
1 : input.spec-%tmpvar-6.E0%0%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=well-formedness-conditions for L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd
=well-formedness-conditions for L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd edge well-formedness condition
=well-formedness-conditions for L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd edge-wf-cond cg_path
=well-formedness-conditions for L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd edge-wf-cond src_path
=well-formedness-conditions for L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd edge-wf-cond dst_path
=well-formedness-conditions for L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd edge-wf-cond pred.0
=Comment
equal-arg0
=LhsExpr
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
2 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd edge well-formedness condition done
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%5%fcallEnd_Lif.then%2%fcallEnd.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : implies(3, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d)
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
pointer-implements-opt-ret
=LhsExpr
1 : input.spec-%tmpvar-6.E0%0%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%opt : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 2, 5) : BV:32
7 : unit : UNIT
8 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
9 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 3, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L2%5%fcallStart_Lif.then%2%fcallStart
=SRC Ranking expr 0
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%opt : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=DST Tie Breaking expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.opt_map.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=bv_rank_exprs done
=Ranking exprs at node L2%5%fcallEnd_Lif.then%2%fcallEnd
=SRC Ranking expr 0
1 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-val-1.L2%5%fcallStart : BV:32
=SRC Tie Breaking expr 2
1 : input.spec-fcall_arg_copy.0.spec-%var-val-1.L2%5%fcallEnd : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%opt : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140345 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140346 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140381 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
140347 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140382 : select(140345, 140346, 140381, 140347, 140331, 140332) : BV:32
=RhsExpr
140348 : input.dst.llvm-%opt : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #1.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lentry%2%d
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
140500 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin : BV:32
140501 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end : BV:32
140502 : bvule(140500, 140501) : BOOL
140436 : 4 { 0x4 +1.47e129 } : BV:32
140503 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140504 : bvadd(140436, 140503) : BV:32
140505 : bvadd(140500, 140504) : BV:32
140506 : eq(140501, 140505) : BOOL
140507 : and(140502, 140506) : BOOL
140347 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
140508 : 3 { 0x3 +1.35e129 } : BV:32
140509 : bvand(140347, 140508) : BV:32
140292 : 0 { 0x0 +1.0e129 } : BV:32
140510 : eq(140509, 140292) : BOOL
140511 : and(140507, 140510) : BOOL
140512 : eq(140347, 140500) : BOOL
140513 : and(140511, 140512) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #3.pred
=Comment
pointer-implements-opt-arg0
=LhsExpr
140273 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
140292 : 0 { 0x0 +1.0e129 } : BV:32
140348 : input.dst.llvm-%opt : BV:32
140390 : eq(140292, 140348) : BOOL
140334 : 1 { 0x1 +1.11e129 } : BV:32
140518 : ite(140390, 140292, 140334) : BV:32
140336 : unit : UNIT
140345 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140346 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140468 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140525 : select(140345, 140346, 140468, 140348, 140331, 140332) : BV:32
140526 : sum(140518, 140336, 140525) : SUM[UNIT,BV:32]
140527 : eq(140273, 140526) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart assume #4.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%1%d=>Lif.then%2%fcallStart
=LhsExpr
140292 : 0 { 0x0 +1.0e129 } : BV:32
140348 : input.dst.llvm-%opt : BV:32
140390 : eq(140292, 140348) : BOOL
140391 : not(140390) : BOOL
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
140275 : 1 { 0x1 } : BOOL
140726 : eq(140353, 140275) : BOOL
140727 : implies(140391, 140726) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%5%fcallStart_Lif.then%2%fcallStart done
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140345 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140346 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140381 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
140347 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140382 : select(140345, 140346, 140381, 140347, 140331, 140332) : BV:32
=RhsExpr
140348 : input.dst.llvm-%opt : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lentry%2%d
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
140500 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_begin : BV:32
140501 : input.dst.memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/_end : BV:32
140502 : bvule(140500, 140501) : BOOL
140436 : 4 { 0x4 +1.47e129 } : BV:32
140503 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140504 : bvadd(140436, 140503) : BV:32
140505 : bvadd(140500, 140504) : BV:32
140506 : eq(140501, 140505) : BOOL
140507 : and(140502, 140506) : BOOL
140347 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
140508 : 3 { 0x3 +1.35e129 } : BV:32
140509 : bvand(140347, 140508) : BV:32
140292 : 0 { 0x0 +1.0e129 } : BV:32
140510 : eq(140509, 140292) : BOOL
140511 : and(140507, 140510) : BOOL
140512 : eq(140347, 140500) : BOOL
140513 : and(140511, 140512) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.pred
=Comment
pointer-implements-opt-arg0
=LhsExpr
140273 : input.spec-%var-opt-0 : SUM[UNIT,BV:32]
140292 : 0 { 0x0 +1.0e129 } : BV:32
140348 : input.dst.llvm-%opt : BV:32
140390 : eq(140292, 140348) : BOOL
140334 : 1 { 0x1 +1.11e129 } : BV:32
140518 : ite(140390, 140292, 140334) : BV:32
140336 : unit : UNIT
140345 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140346 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140468 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140525 : select(140345, 140346, 140468, 140348, 140331, 140332) : BV:32
140526 : sum(140518, 140336, 140525) : SUM[UNIT,BV:32]
140527 : eq(140273, 140526) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge at L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd
cg.assumes_around_edge at L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd assume #0
cg.assumes_around_edge at L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd assume #0.ec
cg.assumes_around_edge at L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd assume #0.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%5%fcallStart_Lif.then%2%fcallStart=>L2%5%fcallEnd_Lif.then%2%fcallEnd done
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%2%fcallEnd=>Lif.end%1%bbentry
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #1.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d assume #2.pred
=Comment
cg-edge-assume
=LhsExpr
140301 : input.spec-%tmpvar-3.L2%5%fcallEnd : BV:32
140414 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
142108 : eq(140301, 140414) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%5%fcallEnd_Lif.then%2%fcallEnd=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L2%5%fcallStart_Lif.then%2%fcallStart
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L2%5%fcallEnd_Lif.then%2%fcallEnd
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
=FunctionName: update_val
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph update_val.A1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.update_val:
=TFG:
=Nodes: L0%0%d E0%0%d
=Edges:
L0%0%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: update_val
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-val-0 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-2.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;update_val}
=Edge: L0%0%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.E0%0%d
1 : 10 { 0xa +1.119e129 } : BV:32
=spec-%tmpvar-1.E0%0%d
1 : input.spec-%var-val-0 : BV:32
2 : 10 { 0xa +1.119e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-2.E0%0%d
1 : input.spec-%var-val-0 : BV:32
2 : 10 { 0xa +1.119e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((func_head*ctor_bv)*intrinsic_app_bvsub)*func_ret)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.update_val
=Loc 1 in src.spec.update_val.
REGMEM
spec-%var-val-0
1 : input.spec-%var-val-0 : BV:32
=Loc 5 in src.spec.update_val.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 6 in src.spec.update_val.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 7 in src.spec.update_val.
REGMEM
spec-%tmpvar-0.E0%0%d
1 : input.spec-%tmpvar-0.E0%0%d : BV:32
=Loc 8 in src.spec.update_val.
REGMEM
spec-%tmpvar-1.E0%0%d
1 : input.spec-%tmpvar-1.E0%0%d : BV:32
=Loc 9 in src.spec.update_val.
REGMEM
spec-%tmpvar-2.E0%0%d
1 : input.spec-%tmpvar-2.E0%0%d : BV:32
=Locs end
=Liveness in src.spec.update_val
=live locs at L0%0%d
1, 
=live locs at E0%0%d
9[f], 

=Definedness in src.spec.update_val
=loc definedness at L0%0%d
1, 5, 6
=loc definedness at E0%0%d
1, 5, 6, 7, 8, 9

=Branch affecting variable locs in src.spec.update_val
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.update_val
=relevant memlabels
=function: update_val
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 7 {input.spec-%tmpvar-0.E0%0%d }
1 : 10 { 0xa +1.119e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 8 {input.spec-%tmpvar-1.E0%0%d }
1 : input.spec-%var-val-0 : BV:32
2 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 9 {input.spec-%tmpvar-2.E0%0%d }
1 : input.spec-%var-val-0 : BV:32
2 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.update_val
=avail_exprs begin
=loc 1
=loc_expr
140303 : input.spec-%var-val-0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 7
=loc_expr
140317 : input.spec-%tmpvar-0.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 10 { 0xa +1.119e129 } : BV:32
=avail_exprs_val.end
=loc 8
=loc_expr
140318 : input.spec-%tmpvar-1.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-val-0 : BV:32
2 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 9
=loc_expr
140316 : input.spec-%tmpvar-2.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-val-0 : BV:32
2 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.update_val
=loc 7 expr
1 : input.spec-%tmpvar-0.E0%0%d : BV:32
=loc 7 spreled-expr
140305 : 10 { 0xa +1.119e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;update_val}
=loc_id 1 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 5 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 6 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 7 lr-status in lr-status-map at call-context {*;update_val}
lr_status_linearly_related(; )
=loc_id 8 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 9 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 7 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>E0%0%d
=spec-%tmpvar-0.E0%0%d
1 : 10 { 0xa +1.119e129 } : BV:32
=spec-%tmpvar-1.E0%0%d
1 : input.spec-%var-val-0 : BV:32
2 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-2.E0%0%d
1 : input.spec-%var-val-0 : BV:32
2 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.update_val
=suffixpath_at_L0%0%d for src.spec.update_val
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_E0%0%d for src.spec.update_val
=suffixpath_at_E0%0%d.graph_edge_composition
(L0%0%d=>E0%0%d)
=suffixpaths for src.spec.update_val done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>E0%0%d
tfg.assumes_around_edge at L0%0%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.update_val:
=TFG:
=Nodes: L0%0%d E0%0%d
=Edges:
L0%0%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: update_val
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%val : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : update_val : 3 : 1 : 0
C_SYMBOL2 : opt_map : 8 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%val : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;update_val}
=Edge: L0%0%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%val : BV:32
2 : 10 { 0xa +1.119e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%val : BV:32
2 : 10 { 0xa +1.119e129 } : BV:32
3 : bvsub(1, 2) : BV:32
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((start_pc_edge*  %sub = sub i32 %val, 10, !dbg !15)*  ret i32 %sub, !dbg !16)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%val : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.update_val
=Loc 100002 in dst.llvm.update_val.
REGMEM
dst.llvm-%val
1 : input.dst.llvm-%val : BV:32
=Loc 100003 in dst.llvm.update_val.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100005 in dst.llvm.update_val.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100006 in dst.llvm.update_val.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100007 in dst.llvm.update_val.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100008 in dst.llvm.update_val.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100011 in dst.llvm.update_val.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100012 in dst.llvm.update_val.
REGMEM
dst.local./*___y___update_val__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ : BV:32
=Loc 100014 in dst.llvm.update_val.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100015 in dst.llvm.update_val.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap
=Loc 100016 in dst.llvm.update_val.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/
=Loc 100017 in dst.llvm.update_val.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100018 in dst.llvm.update_val.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100019 in dst.llvm.update_val.
REGMEM
dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=Loc 100020 in dst.llvm.update_val.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100021 in dst.llvm.update_val.
REGMEM
dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=Loc 100022 in dst.llvm.update_val.
REGMEM
dst.cur_rounding_mode.E0%0%d
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.update_val
=live locs at L0%0%d
100002, 100015, 
=live locs at E0%0%d
100015, 100019[f], 

=Definedness in dst.llvm.update_val
=loc definedness at L0%0%d
100002, 100012, 100014, 100015, 100016
=loc definedness at E0%0%d
100002, 100012, 100014, 100015, 100016, 100017, 100018, 100019, 100020, 100021, 100022

=Branch affecting variable locs in dst.llvm.update_val
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.update_val
=relevant memlabels
=function: update_val
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap
memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100017 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100018 {input.dst.llvm-%ret-reg.E0%0%d }
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
2 : input.dst.llvm-%val : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100019 {input.dst.llvm-%sub.E0%0%d }
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
2 : input.dst.llvm-%val : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100020 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100021 {input.dst.local_alloc_count.E0%0%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100022 {input.dst.cur_rounding_mode.E0%0%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.update_val
=avail_exprs begin
=loc 100002
=loc_expr
140394 : input.dst.llvm-%val : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100003
=loc_expr
140372 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100005
=loc_expr
140373 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100006
=loc_expr
140375 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100007
=loc_expr
140377 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140379 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100011
=loc_expr
140352 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140393 : input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140418 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100018
=loc_expr
140420 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
2 : input.dst.llvm-%val : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100019
=loc_expr
140437 : input.dst.llvm-%sub.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
2 : input.dst.llvm-%val : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100020
=loc_expr
140421 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100021
=loc_expr
140438 : input.dst.local_alloc_count.E0%0%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100022
=loc_expr
140439 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.update_val
=loc 100020 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100020 spreled-expr
140267 : retaddr_const : BV:32
=loc 100021 expr
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=loc 100021 spreled-expr
140352 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100022 expr
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=loc 100022 spreled-expr
140351 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;update_val}
=loc_id 100002 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, )
=loc_id 100003 lr-status in lr-status-map at call-context {*;update_val}
lr_status_top
=loc_id 100005 lr-status in lr-status-map at call-context {*;update_val}
lr_status_top
=loc_id 100006 lr-status in lr-status-map at call-context {*;update_val}
lr_status_top
=loc_id 100007 lr-status in lr-status-map at call-context {*;update_val}
lr_status_top
=loc_id 100008 lr-status in lr-status-map at call-context {*;update_val}
lr_status_top
=loc_id 100011 lr-status in lr-status-map at call-context {*;update_val}
lr_status_top
=loc_id 100012 lr-status in lr-status-map at call-context {*;update_val}
lr_status_top
=loc_id 100014 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, )
=loc_id 100015 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, )
=loc_id 100016 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, )
=loc_id 100017 lr-status in lr-status-map at call-context {*;update_val}
lr_status_linearly_related(; )
=loc_id 100018 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, )
=loc_id 100019 lr-status in lr-status-map at call-context {*;update_val}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, )
=loc_id 100020 lr-status in lr-status-map at call-context {*;update_val}
lr_status_linearly_related(; )
=loc_id 100021 lr-status in lr-status-map at call-context {*;update_val}
lr_status_linearly_related(; )
=loc_id 100022 lr-status in lr-status-map at call-context {*;update_val}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100020 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100021 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100022 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
2 : input.dst.llvm-%val : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=dst.llvm-%sub.E0%0%d
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
2 : input.dst.llvm-%val : BV:32
3 : bvadd(1, 2) : BV:32
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.update_val
=suffixpath_at_L0%0%d for dst.llvm.update_val
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_E0%0%d for dst.llvm.update_val
=suffixpath_at_E0%0%d.graph_edge_composition
(L0%0%d=>E0%0%d)
=suffixpaths for dst.llvm.update_val done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>E0%0%d
tfg.assumes_around_edge at L0%0%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 2
=pc
Lentry%2%d
=linename
line 2
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 14
=pc
Lentry%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 2 at column 14)
=pc
Lentry%2%d
=line_and_column
(line 2 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___update_val__x__=L0%0%argnum0=/
input.dst.llvm-%val : L0%0%d : val'
input.dst.llvm-%sub : L0%0%d : ((-10) + val')
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : ((-10) + val')
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%sub.E0%0%d : L0%0%d : ((-10) + val')
input.dst.local_alloc_count.E0%0%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.E0%0%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%sub
=dst.llvm-%sub loop pc: L0%0%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
3 : 11111111111111111111111111110110b
4 : input.dst.llvm-%val : BV32
5 : scev_op_add(3, 4) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
3 : 11111111111111111111111111110110b
4 : input.dst.llvm-%val : BV32
5 : scev_op_add(3, 4) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 7 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.local./*___y___update_val__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%val
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sub.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.local_alloc_count.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.E0%0%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename fcall2.proof
=function_name update_val
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: opt_map
=EntryPreconds
=pred 0
=Comment
pointer-implements-opt-arg0
=LhsExpr
1 : $spec-arg-0 : SUM[UNIT,BV:32]
2 : $llvm-arg-0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 3, 5) : BV:32
7 : unit : UNIT
8 : $llvm-md : ARRAY[BV:32 -> BV:8]
9 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-top : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 2, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
pointer-implements-opt-ret
=LhsExpr
1 : $spec-ret : SUM[UNIT,BV:32]
2 : $llvm-ret : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : ite(4, 3, 5) : BV:32
7 : unit : UNIT
8 : $llvm-md : ARRAY[BV:32 -> BV:8]
9 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
10 : memlabel-top : MEMLABEL
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(8, 9, 10, 2, 11, 12) : BV:32
14 : sum(6, 7, 13) : SUM[UNIT,BV:32]
15 : eq(1, 14) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=FunctionName: update_val
=EntryPreconds
=pred 0
=Comment
equal-arg0
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: update_val
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%val : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : update_val : 3 : 1 : 0
C_SYMBOL2 : opt_map : 8 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%val : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>E0%0%d#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>E0%0%d#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-arg0
=LhsExpr
1 : input.spec-%var-val-0 : BV:32
2 : input.dst.llvm-%val : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%val : BV:32
=predicate done
=graph_with_precondition_done

=Locs in update_val.A1
=Locs end
=Liveness in update_val.A1
=live locs at L0%0%d_L0%0%d

=live locs at E0%0%d_E0%0%d


=Definedness in update_val.A1

=Branch affecting variable locs in update_val.A1

=Relevant Memlabels in update_val.A1
=relevant memlabels
=function: update_val
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap
memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in update_val.A1
=avail_exprs begin
=avail_exprs end
=sprel_map in update_val.A1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece cvc4.ce489.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin cvc4.ce489 fa5dfda538bfada8386dfdd04cd730
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___update_val__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
=counter_example.random_seed
655495367
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce490.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce490 c6ab6cbc78c7e0e240ad13fa8d5c770
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___update_val__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
=counter_example.random_seed
561717988
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece yices.ce491.num_edges_traversed0
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(epsilon)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin yices.ce491 6fdc26b43056281a44919f76b5ac34a2
=input.spec-%var-val-0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___opt_map__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___update_val__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%val
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
=input.spec-%tmpvar-0.E0%0%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d
1 : 4294967286 { 0xfffffff6 -10 -1.99999880e128 } : BV:32
=counter_example.random_seed
1407392292
=counter_example_end
=global nodece 2 num_edges_traversed 0
=global nodece 2 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-2.E0%0%d : BV:32
2 : input.dst.llvm-%sub.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-2.E0%0%d : BV:32
2 : input.dst.llvm-%sub.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140345 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140346 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140427 : memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/ : MEMLABEL
140393 : input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140332 : 0 { 0x0 } : BOOL
140428 : select(140345, 140346, 140427, 140393, 140331, 140332) : BV:32
=RhsExpr
140394 : input.dst.llvm-%val : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
equal-arg0
=LhsExpr
140303 : input.spec-%var-val-0 : BV:32
140394 : input.dst.llvm-%val : BV:32
140463 : eq(140303, 140394) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
140448 : input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_begin : BV:32
140449 : input.dst.memlabel-mem--local./*___y___update_val__x__=L0%0%argnum0=/_end : BV:32
140451 : bvule(140448, 140449) : BOOL
140436 : 4 { 0x4 +1.47e129 } : BV:32
140503 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140504 : bvadd(140436, 140503) : BV:32
140452 : bvadd(140448, 140504) : BV:32
140453 : eq(140449, 140452) : BOOL
140454 : and(140451, 140453) : BOOL
140393 : input.dst.local./*___y___update_val__x__=L0%0%argnum0=/ : BV:32
140508 : 3 { 0x3 +1.35e129 } : BV:32
140455 : bvand(140393, 140508) : BV:32
140292 : 0 { 0x0 +1.0e129 } : BV:32
140456 : eq(140455, 140292) : BOOL
140458 : and(140454, 140456) : BOOL
140460 : eq(140393, 140448) : BOOL
140462 : and(140458, 140460) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
