==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x6 $x12)))
 (let (($x19 (and $x10 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x6 $x12)))
 (let (($x19 (and $x10 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x71 (= $x70 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x61 (concat ?x58 (concat ?x54 ?x52)))))
 (let (($x63 (= ?x62 input.dst.llvm-%n)))
 (let (($x64 (= $x63 true)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x45 (= $x43 true)))
 (let (($x31 (= $x45 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x36)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x28 $x6)))
 (let (($x37 (and $x7 $x14)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x25 $x37)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x30)))))))
 (let (($x33 (and $x12 $x10)))
 (let (($x32 (= $x33 true)))
 (let (($x9 (= $x32 true)))
 (let (($x49 (and $x9 $x31)))
 (let (($x65 (and $x49 $x64)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x66 (and $x44 $x65)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x67 (and $x18 $x66)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x68 (and $x20 $x67)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x69 (and $x13 $x68)))
 (let (($x72 (=> $x69 $x71)))
 (not $x72))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x71 (= $x70 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x61 (concat ?x58 (concat ?x54 ?x52)))))
 (let (($x63 (= ?x62 input.dst.llvm-%n)))
 (let (($x64 (= $x63 true)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x45 (= $x43 true)))
 (let (($x31 (= $x45 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x36)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x28 $x6)))
 (let (($x37 (and $x7 $x14)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x25 $x37)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x30)))))))
 (let (($x33 (and $x12 $x10)))
 (let (($x32 (= $x33 true)))
 (let (($x9 (= $x32 true)))
 (let (($x49 (and $x9 $x31)))
 (let (($x65 (and $x49 $x64)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x66 (and $x44 $x65)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x67 (and $x18 $x66)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x68 (and $x20 $x67)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x69 (and $x13 $x68)))
 (let (($x72 (=> $x69 $x71)))
 (not $x72))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-7.L2%7%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L2%7%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_6)
(function @fun_6
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x49)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x48 $x60)))
 (let (($x36 (and $x45 $x61)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x27 $x36)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x9)))))))
 (let (($x69 (and $x15 $x6)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x31 (concat ?x14 (concat ?x29 ?x38)))))
 (let (($x52 (= input.dst.llvm-%n ?x54)))
 (let (($x62 (and (and (and $x15 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x6) $x52)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x65 (and $x17 $x64)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x66 (and $x23 $x65)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x67 (and $x39 $x66)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x68 (and $x8 $x67)))
 (let (($x72 (=> $x68 $x71)))
 (not $x72)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x49)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x48 $x60)))
 (let (($x36 (and $x45 $x61)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x27 $x36)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x9)))))))
 (let (($x69 (and $x15 $x6)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x31 (concat ?x14 (concat ?x29 ?x38)))))
 (let (($x52 (= input.dst.llvm-%n ?x54)))
 (let (($x62 (and (and (and $x15 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x6) $x52)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x65 (and $x17 $x64)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x66 (and $x23 $x65)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x67 (and $x39 $x66)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x68 (and $x8 $x67)))
 (let (($x72 (=> $x68 $x71)))
 (not $x72)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x73 (= $x72 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x54 (concat ?x38 (concat ?x7 ?x31)))))
 (let (($x62 (= input.dst.llvm-%n ?x52)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x61)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x37 $x45)))
 (let (($x6 (and $x49 $x36)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x48 $x6)))
 (let (($x56 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x34)))))))
 (let (($x65 (and (and (and $x47 $x56) $x59) $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x68 (and $x17 $x67)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x69 (and $x23 $x68)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x70 (and $x39 $x69)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x71 (and $x8 $x70)))
 (let (($x46 (=> $x71 $x73)))
 (not $x46)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x73 (= $x72 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x54 (concat ?x38 (concat ?x7 ?x31)))))
 (let (($x62 (= input.dst.llvm-%n ?x52)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x61)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x37 $x45)))
 (let (($x6 (and $x49 $x36)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x48 $x6)))
 (let (($x56 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x34)))))))
 (let (($x65 (and (and (and $x47 $x56) $x59) $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x68 (and $x17 $x67)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x69 (and $x23 $x68)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x70 (and $x39 $x69)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x71 (and $x8 $x70)))
 (let (($x46 (=> $x71 $x73)))
 (not $x46)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-1 #b10000000000000000000000000000000)
(= input.spec-%var-n-0.L2%7%bbentry #b10000000000000000000000000000000)
(= input.spec-%tmpvar-7.L2%7%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L2%7%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x40000000 #xff))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x000000ff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x19)))
 (let (($x44 (= ?x24 input.dst.llvm-%n)))
 (let (($x40 (= $x44 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x52 (concat ?x31 (concat ?x29 ?x54)))))
 (let (($x65 (= input.dst.llvm-%n ?x62)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x36)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x32 $x49)))
 (let (($x59 (and $x61 $x6)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x37 $x59)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x50)))))))
 (let (($x68 (and (and (and $x27 $x53) $x64) $x65)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x71 (and $x17 $x70)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x72 (and $x11 $x71)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x73 (and $x13 $x72)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x46 (and $x42 $x73)))
 (let (($x41 (=> $x46 $x40)))
 (not $x41)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x19)))
 (let (($x44 (= ?x24 input.dst.llvm-%n)))
 (let (($x40 (= $x44 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x52 (concat ?x31 (concat ?x29 ?x54)))))
 (let (($x65 (= input.dst.llvm-%n ?x62)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x36)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x32 $x49)))
 (let (($x59 (and $x61 $x6)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x37 $x59)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x50)))))))
 (let (($x68 (and (and (and $x27 $x53) $x64) $x65)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x71 (and $x17 $x70)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x72 (and $x11 $x71)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x73 (and $x13 $x72)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x46 (and $x42 $x73)))
 (let (($x41 (=> $x46 $x40)))
 (not $x41)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x40)))
 (let (($x51 (= ?x41 input.spec-%var-n-1)))
 (let (($x35 (= $x51 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x62 (concat ?x54 (concat ?x7 ?x52)))))
 (let (($x68 (= input.dst.llvm-%n ?x65)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x6)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x60 $x61)))
 (let (($x64 (and $x36 $x59)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x32 $x64)))
 (let (($x9 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x16)))))))
 (let (($x71 (and (and (and $x48 $x9) $x67) $x68)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x46 (and $x17 $x73)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x30 (and $x11 $x46)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x19 (and $x13 $x30)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x24 (and $x42 $x19)))
 (let (($x5 (=> $x24 $x35)))
 (not $x5)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x40)))
 (let (($x51 (= ?x41 input.spec-%var-n-1)))
 (let (($x35 (= $x51 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x62 (concat ?x54 (concat ?x7 ?x52)))))
 (let (($x68 (= input.dst.llvm-%n ?x65)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x6)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x60 $x61)))
 (let (($x64 (and $x36 $x59)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x32 $x64)))
 (let (($x9 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x16)))))))
 (let (($x71 (and (and (and $x48 $x9) $x67) $x68)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x46 (and $x17 $x73)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x30 (and $x11 $x46)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x19 (and $x13 $x30)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x24 (and $x42 $x19)))
 (let (($x5 (=> $x24 $x35)))
 (not $x5)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x107 false)))
 (let (($x109 (= $x108 true)))
 (let ((?x37 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x37)))
 (let (($x100 (= ?x32 input.dst.llvm-%n)))
 (let (($x101 (= $x100 true)))
 (let (($x96 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x96 true)))
 (let (($x92 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let (($x84 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x26)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x40 $x35)))
 (let (($x43 (and $x5 $x28)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x7 $x43)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x72)))))))
 (let (($x75 (and $x44 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x14 (= (_ bv0 32) input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x62 (= $x14 true)))
 (let (($x64 (= (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x67 (= $x64 true)))
 (let (($x36 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x36 true)))
 (let (($x60 (= ?x32 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x45 (= $x60 true)))
 (let (($x53 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x48 (= $x53 true)))
 (let (($x63 (= $x48 true)))
 (let (($x16 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x56 (= $x16 true)))
 (let (($x27 (= $x56 true)))
 (let (($x34 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x22 (= $x34 true)))
 (let (($x47 (= $x22 true)))
 (let (($x18 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x15 (= $x18 true)))
 (let (($x66 (= $x15 true)))
 (let (($x50 (and $x66 $x47)))
 (let (($x55 (and $x50 $x27)))
 (let (($x9 (and $x55 $x63)))
 (let (($x49 (and $x9 $x45)))
 (let (($x59 (and $x49 $x6)))
 (let (($x70 (and $x59 $x67)))
 (let (($x10 (and $x70 $x62)))
 (let (($x78 (and $x10 $x77)))
 (let (($x83 (and $x78 $x82)))
 (let (($x87 (and $x83 $x86)))
 (let (($x91 (and $x87 $x90)))
 (let (($x95 (and $x91 $x94)))
 (let (($x98 (and $x95 $x97)))
 (let (($x102 (and $x98 $x101)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x103 (and $x12 $x102)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x104 (and $x8 $x103)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x105 (and $x42 $x104)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x106 (and $x25 $x105)))
 (let (($x110 (=> $x106 $x109)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x107 false)))
 (let (($x109 (= $x108 true)))
 (let ((?x37 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x37)))
 (let (($x100 (= ?x32 input.dst.llvm-%n)))
 (let (($x101 (= $x100 true)))
 (let (($x96 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x96 true)))
 (let (($x92 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let (($x84 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x26)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x40 $x35)))
 (let (($x43 (and $x5 $x28)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x7 $x43)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x72)))))))
 (let (($x75 (and $x44 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x14 (= (_ bv0 32) input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x62 (= $x14 true)))
 (let (($x64 (= (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x67 (= $x64 true)))
 (let (($x36 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x36 true)))
 (let (($x60 (= ?x32 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x45 (= $x60 true)))
 (let (($x53 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x48 (= $x53 true)))
 (let (($x63 (= $x48 true)))
 (let (($x16 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x56 (= $x16 true)))
 (let (($x27 (= $x56 true)))
 (let (($x34 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x22 (= $x34 true)))
 (let (($x47 (= $x22 true)))
 (let (($x18 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x15 (= $x18 true)))
 (let (($x66 (= $x15 true)))
 (let (($x50 (and $x66 $x47)))
 (let (($x55 (and $x50 $x27)))
 (let (($x9 (and $x55 $x63)))
 (let (($x49 (and $x9 $x45)))
 (let (($x59 (and $x49 $x6)))
 (let (($x70 (and $x59 $x67)))
 (let (($x10 (and $x70 $x62)))
 (let (($x78 (and $x10 $x77)))
 (let (($x83 (and $x78 $x82)))
 (let (($x87 (and $x83 $x86)))
 (let (($x91 (and $x87 $x90)))
 (let (($x95 (and $x91 $x94)))
 (let (($x98 (and $x95 $x97)))
 (let (($x102 (and $x98 $x101)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x103 (and $x12 $x102)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x104 (and $x8 $x103)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x105 (and $x42 $x104)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x106 (and $x25 $x105)))
 (let (($x110 (=> $x106 $x109)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b01000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b00000000000000000000000000000001)
(= input.spec-%var-n-1 #b01000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-r-0.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-i-0.L2%7%bbentry #b00000000000000000000000000000001)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-0.L2%7%bbentry #b01000000000000000000000000000000)
(= input.spec-%tmpvar-7.L2%7%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L2%7%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000200)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000200)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (not $x92)))
 (let (($x90 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x91 (not $x90)))
 (let (($x94 (or $x91 $x93)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x81 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x81)))
 (let (($x83 (= ?x82 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x83 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x28)))
 (let (($x78 (= ?x43 input.dst.llvm-%n)))
 (let (($x79 (= $x78 true)))
 (let (($x74 (= ?x43 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x75 (= $x74 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x35 (= $x51 true)))
 (let (($x5 (= $x35 true)))
 (let (($x58 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x7 (= $x58 true)))
 (let (($x40 (= $x7 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x46 (= $x73 true)))
 (let (($x30 (= $x46 true)))
 (let (($x68 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x68 true)))
 (let (($x65 (= $x71 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x70)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x36 $x64)))
 (let (($x14 (and $x67 $x33)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x56 $x14)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x69)))))))
 (let (($x10 (and $x61 $x62)))
 (let (($x52 (= $x10 true)))
 (let (($x31 (= $x52 true)))
 (let ((?x23 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x23)))
 (let (($x34 (= ?x21 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x34 true)))
 (let (($x24 (and $x13 $x31)))
 (let (($x72 (and $x24 $x65)))
 (let (($x19 (and $x72 $x30)))
 (let (($x41 (and $x19 $x40)))
 (let (($x26 (and $x41 $x5)))
 (let (($x76 (and $x26 $x75)))
 (let (($x80 (and $x76 $x79)))
 (let (($x85 (and $x80 $x84)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x86 (and $x47 $x85)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x87 (and $x12 $x86)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x88 (and $x17 $x87)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x89 (and $x29 $x88)))
 (let (($x97 (=> $x89 $x96)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (not $x92)))
 (let (($x90 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x91 (not $x90)))
 (let (($x94 (or $x91 $x93)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x81 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x81)))
 (let (($x83 (= ?x82 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x83 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x28)))
 (let (($x78 (= ?x43 input.dst.llvm-%n)))
 (let (($x79 (= $x78 true)))
 (let (($x74 (= ?x43 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x75 (= $x74 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x35 (= $x51 true)))
 (let (($x5 (= $x35 true)))
 (let (($x58 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x7 (= $x58 true)))
 (let (($x40 (= $x7 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x46 (= $x73 true)))
 (let (($x30 (= $x46 true)))
 (let (($x68 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x71 (= $x68 true)))
 (let (($x65 (= $x71 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x70)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x36 $x64)))
 (let (($x14 (and $x67 $x33)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x56 $x14)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x69)))))))
 (let (($x10 (and $x61 $x62)))
 (let (($x52 (= $x10 true)))
 (let (($x31 (= $x52 true)))
 (let ((?x23 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x23)))
 (let (($x34 (= ?x21 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x13 (= $x34 true)))
 (let (($x24 (and $x13 $x31)))
 (let (($x72 (and $x24 $x65)))
 (let (($x19 (and $x72 $x30)))
 (let (($x41 (and $x19 $x40)))
 (let (($x26 (and $x41 $x5)))
 (let (($x76 (and $x26 $x75)))
 (let (($x80 (and $x76 $x79)))
 (let (($x85 (and $x80 $x84)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x86 (and $x47 $x85)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x87 (and $x12 $x86)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x88 (and $x17 $x87)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x89 (and $x29 $x88)))
 (let (($x97 (=> $x89 $x96)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x20 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x42 (bvmul ?x20 (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x42)))
 (let (($x101 (= ?x99 ?x100)))
 (let (($x102 (= $x101 true)))
 (let ((?x88 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x88)))
 (let (($x90 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x90 true)))
 (let (($x84 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x76 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let (($x28 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x43 (= $x28 true)))
 (let (($x74 (= $x43 true)))
 (let (($x51 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x51 true)))
 (let (($x5 (= $x35 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x73)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x38 $x65)))
 (let (($x30 (and $x72 $x46)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x56 $x30)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x33)))))))
 (let (($x44 (and $x24 $x19)))
 (let (($x58 (= $x44 true)))
 (let (($x7 (= $x58 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x49)))
 (let (($x37 (= ?x53 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x32 (= $x37 true)))
 (let (($x9 (= ?x53 input.dst.llvm-%n)))
 (let (($x48 (= $x9 true)))
 (let ((?x66 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x66)))
 (let (($x27 (= ?x34 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x55 (= $x27 true)))
 (let (($x69 (and $x55 $x48)))
 (let (($x60 (and $x69 $x32)))
 (let (($x40 (and $x60 $x7)))
 (let (($x26 (and $x40 $x5)))
 (let (($x75 (and $x26 $x74)))
 (let (($x79 (and $x75 $x78)))
 (let (($x83 (and $x79 $x82)))
 (let (($x87 (and $x83 $x86)))
 (let (($x92 (and $x87 $x91)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x94 (and (not $x23) $x92)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x95 (and $x25 $x94)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x96 (and $x57 $x95)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x97 (and $x29 $x96)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x98 (and $x11 $x97)))
 (let (($x103 (=> $x98 $x102)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x20 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x42 (bvmul ?x20 (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x42)))
 (let (($x101 (= ?x99 ?x100)))
 (let (($x102 (= $x101 true)))
 (let ((?x88 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x88)))
 (let (($x90 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x90 true)))
 (let (($x84 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x76 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let (($x28 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x43 (= $x28 true)))
 (let (($x74 (= $x43 true)))
 (let (($x51 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x51 true)))
 (let (($x5 (= $x35 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x73)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x38 $x65)))
 (let (($x30 (and $x72 $x46)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x56 $x30)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x33)))))))
 (let (($x44 (and $x24 $x19)))
 (let (($x58 (= $x44 true)))
 (let (($x7 (= $x58 true)))
 (let ((?x49 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x49)))
 (let (($x37 (= ?x53 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x32 (= $x37 true)))
 (let (($x9 (= ?x53 input.dst.llvm-%n)))
 (let (($x48 (= $x9 true)))
 (let ((?x66 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x66)))
 (let (($x27 (= ?x34 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x55 (= $x27 true)))
 (let (($x69 (and $x55 $x48)))
 (let (($x60 (and $x69 $x32)))
 (let (($x40 (and $x60 $x7)))
 (let (($x26 (and $x40 $x5)))
 (let (($x75 (and $x26 $x74)))
 (let (($x79 (and $x75 $x78)))
 (let (($x83 (and $x79 $x82)))
 (let (($x87 (and $x83 $x86)))
 (let (($x92 (and $x87 $x91)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x94 (and (not $x23) $x92)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x95 (and $x25 $x94)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x96 (and $x57 $x95)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x97 (and $x29 $x96)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x98 (and $x11 $x97)))
 (let (($x103 (=> $x98 $x102)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x99 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let ((?x100 (bvmul ?x99 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x100)))
 (let (($x103 (= ?x101 ?x102)))
 (let (($x104 (= $x103 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x91 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x91 true)))
 (let ((?x83 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x83)))
 (let (($x86 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let (($x78 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x74 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x26 (= $x5 true)))
 (let (($x28 (= $x26 true)))
 (let (($x40 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x41 (= $x40 true)))
 (let (($x51 (= $x41 true)))
 (let (($x19 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x19 true)))
 (let (($x58 (= $x44 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x56)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x62 $x24)))
 (let (($x68 (and $x16 $x38)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x48 $x68)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x31)))))))
 (let (($x65 (and $x14 $x71)))
 (let (($x72 (= $x65 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x47)))
 (let (($x27 (= ?x21 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x55 (= $x27 true)))
 (let (($x34 (= ?x21 input.dst.llvm-%n)))
 (let (($x13 (= $x34 true)))
 (let (($x49 (and $x13 $x55)))
 (let (($x46 (and $x49 $x73)))
 (let (($x7 (and $x46 $x58)))
 (let (($x35 (and $x7 $x51)))
 (let (($x43 (and $x35 $x28)))
 (let (($x77 (and $x43 $x76)))
 (let (($x81 (and $x77 $x80)))
 (let (($x88 (and $x81 $x87)))
 (let (($x94 (and $x88 $x92)))
 (let (($x8 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x96 (and (not $x8) $x94)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x97 (and $x25 $x96)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x98 (and $x39 $x97)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x20 (and $x17 $x98)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x42 (and $x11 $x20)))
 (let (($x45 (=> $x42 $x104)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x99 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let ((?x100 (bvmul ?x99 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x100)))
 (let (($x103 (= ?x101 ?x102)))
 (let (($x104 (= $x103 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x91 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x91 true)))
 (let ((?x83 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x83)))
 (let (($x86 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x86 true)))
 (let (($x78 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x74 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x26 (= $x5 true)))
 (let (($x28 (= $x26 true)))
 (let (($x40 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x41 (= $x40 true)))
 (let (($x51 (= $x41 true)))
 (let (($x19 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x19 true)))
 (let (($x58 (= $x44 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x56)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x62 $x24)))
 (let (($x68 (and $x16 $x38)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x48 $x68)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x31)))))))
 (let (($x65 (and $x14 $x71)))
 (let (($x72 (= $x65 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x47)))
 (let (($x27 (= ?x21 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x55 (= $x27 true)))
 (let (($x34 (= ?x21 input.dst.llvm-%n)))
 (let (($x13 (= $x34 true)))
 (let (($x49 (and $x13 $x55)))
 (let (($x46 (and $x49 $x73)))
 (let (($x7 (and $x46 $x58)))
 (let (($x35 (and $x7 $x51)))
 (let (($x43 (and $x35 $x28)))
 (let (($x77 (and $x43 $x76)))
 (let (($x81 (and $x77 $x80)))
 (let (($x88 (and $x81 $x87)))
 (let (($x94 (and $x88 $x92)))
 (let (($x8 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x96 (and (not $x8) $x94)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x97 (and $x25 $x96)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x98 (and $x39 $x97)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x20 (and $x17 $x98)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x42 (and $x11 $x20)))
 (let (($x45 (=> $x42 $x104)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x101 (bvuge ?x100 (_ bv1 32))))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x91 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x81 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x43)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x51 $x26)))
 (let (($x75 (and $x28 $x74)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x38 $x75)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x30)))))))
 (let (($x77 (and $x41 $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x33 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x33)))
 (let (($x62 (= ?x32 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x10 (= $x62 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x14 (= $x64 true)))
 (let (($x9 (= $x14 true)))
 (let (($x31 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x59 (= $x31 true)))
 (let (($x67 (= $x59 true)))
 (let (($x36 (= ?x32 input.dst.llvm-%n)))
 (let (($x6 (= $x36 true)))
 (let ((?x13 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x13)))
 (let (($x49 (= ?x27 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x49 true)))
 (let (($x93 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (= $x93 true)))
 (let (($x21 (= $x47 true)))
 (let (($x37 (and $x21 $x69)))
 (let (($x60 (and $x37 $x6)))
 (let (($x70 (and $x60 $x67)))
 (let (($x48 (and $x70 $x9)))
 (let (($x52 (and $x48 $x10)))
 (let (($x80 (and $x52 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x94 (and $x88 $x92)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x97 (and (not $x23) $x94)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x98 (and $x12 $x97)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x20 (and $x15 $x98)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x42 (and $x29 $x20)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x99 (and $x22 $x42)))
 (let (($x104 (=> $x99 $x103)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x101 (bvuge ?x100 (_ bv1 32))))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x91 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x81 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x43)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x51 $x26)))
 (let (($x75 (and $x28 $x74)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x38 $x75)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x30)))))))
 (let (($x77 (and $x41 $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x33 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x33)))
 (let (($x62 (= ?x32 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x10 (= $x62 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x14 (= $x64 true)))
 (let (($x9 (= $x14 true)))
 (let (($x31 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x59 (= $x31 true)))
 (let (($x67 (= $x59 true)))
 (let (($x36 (= ?x32 input.dst.llvm-%n)))
 (let (($x6 (= $x36 true)))
 (let ((?x13 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x13)))
 (let (($x49 (= ?x27 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x49 true)))
 (let (($x93 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (= $x93 true)))
 (let (($x21 (= $x47 true)))
 (let (($x37 (and $x21 $x69)))
 (let (($x60 (and $x37 $x6)))
 (let (($x70 (and $x60 $x67)))
 (let (($x48 (and $x70 $x9)))
 (let (($x52 (and $x48 $x10)))
 (let (($x80 (and $x52 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x94 (and $x88 $x92)))
 (let (($x23 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x97 (and (not $x23) $x94)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x98 (and $x12 $x97)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x20 (and $x15 $x98)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x42 (and $x29 $x20)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x99 (and $x22 $x42)))
 (let (($x104 (=> $x99 $x103)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x102 (bvsge ?x101 (_ bv1 32))))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x91 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x81 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x43)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x51 $x26)))
 (let (($x75 (and $x28 $x74)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x71 $x75)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x19)))))))
 (let (($x77 (and $x38 $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x69)))
 (let (($x9 (= ?x37 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x48 (= $x9 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x70 (= $x67 true)))
 (let (($x64 (= $x70 true)))
 (let (($x6 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x60 (= $x6 true)))
 (let (($x31 (= $x60 true)))
 (let (($x33 (= ?x37 input.dst.llvm-%n)))
 (let (($x32 (= $x33 true)))
 (let ((?x66 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x66)))
 (let (($x27 (= ?x34 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x55 (= $x27 true)))
 (let (($x8 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (= $x8 true)))
 (let (($x93 (= $x95 true)))
 (let (($x49 (and $x93 $x55)))
 (let (($x36 (and $x49 $x32)))
 (let (($x59 (and $x36 $x31)))
 (let (($x14 (and $x59 $x64)))
 (let (($x62 (and $x14 $x48)))
 (let (($x80 (and $x62 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x94 (and $x88 $x92)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x98 (and (not $x25) $x94)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x20 (and $x57 $x98)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x42 (and $x17 $x20)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x99 (and $x50 $x42)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x100 (and $x53 $x99)))
 (let (($x45 (=> $x100 $x104)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x102 (bvsge ?x101 (_ bv1 32))))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x91 (= ?x90 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x91 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x81 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x43)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x51 $x26)))
 (let (($x75 (and $x28 $x74)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x71 $x75)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x19)))))))
 (let (($x77 (and $x38 $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x69)))
 (let (($x9 (= ?x37 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x48 (= $x9 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x70 (= $x67 true)))
 (let (($x64 (= $x70 true)))
 (let (($x6 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x60 (= $x6 true)))
 (let (($x31 (= $x60 true)))
 (let (($x33 (= ?x37 input.dst.llvm-%n)))
 (let (($x32 (= $x33 true)))
 (let ((?x66 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x66)))
 (let (($x27 (= ?x34 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x55 (= $x27 true)))
 (let (($x8 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (= $x8 true)))
 (let (($x93 (= $x95 true)))
 (let (($x49 (and $x93 $x55)))
 (let (($x36 (and $x49 $x32)))
 (let (($x59 (and $x36 $x31)))
 (let (($x14 (and $x59 $x64)))
 (let (($x62 (and $x14 $x48)))
 (let (($x80 (and $x62 $x79)))
 (let (($x84 (and $x80 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x94 (and $x88 $x92)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x98 (and (not $x25) $x94)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x20 (and $x57 $x98)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x42 (and $x17 $x20)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x99 (and $x50 $x42)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x100 (and $x53 $x99)))
 (let (($x45 (=> $x100 $x104)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-i-0.L2%7%bbentry #b01111111111111111111111111111111)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01111111111111111111111111111111)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L2%7%bbentry #b01111111111111111111111111111111)
(= input.spec-%var-n-1 #b01111111111111111111111111111111)
(= input.dst.llvm-%n #b01111111111111111111111111111111)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-7.L2%7%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L2%7%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (bvuge ?x92 (_ bv1 32))))
 (let (($x98 (= $x94 true)))
 (let (($x20 (= $x98 true)))
 (let ((?x81 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x81)))
 (let (($x83 (= ?x82 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x83 true)))
 (let (($x77 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (= $x43 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x41)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x46 $x58)))
 (let (($x68 (and $x7 $x38)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x59 $x68)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x62)))))))
 (let (($x51 (and $x30 $x71)))
 (let (($x35 (= $x51 true)))
 (let (($x5 (= $x35 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x47)))
 (let (($x33 (= ?x21 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x32 (= $x33 true)))
 (let (($x55 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x49 (= $x55 true)))
 (let (($x69 (= $x49 true)))
 (let (($x34 (= ?x21 input.dst.llvm-%n)))
 (let (($x13 (= $x34 true)))
 (let ((?x23 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x23)))
 (let (($x95 (= ?x96 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x95 true)))
 (let (($x27 (and $x93 $x13)))
 (let (($x37 (and $x27 $x69)))
 (let (($x36 (and $x37 $x32)))
 (let (($x26 (and $x36 $x5)))
 (let (($x76 (and $x26 $x75)))
 (let (($x80 (and $x76 $x79)))
 (let (($x85 (and $x80 $x84)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x87 (and (not $x12) $x85)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x88 (and $x39 $x87)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x89 (and $x29 $x88)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x90 (and $x11 $x89)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x91 (and $x24 $x90)))
 (let (($x42 (=> $x91 $x20)))
 (not $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (bvuge ?x92 (_ bv1 32))))
 (let (($x98 (= $x94 true)))
 (let (($x20 (= $x98 true)))
 (let ((?x81 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x81)))
 (let (($x83 (= ?x82 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x83 true)))
 (let (($x77 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x43 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (= $x43 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x41)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x46 $x58)))
 (let (($x68 (and $x7 $x38)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x59 $x68)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x62)))))))
 (let (($x51 (and $x30 $x71)))
 (let (($x35 (= $x51 true)))
 (let (($x5 (= $x35 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x47)))
 (let (($x33 (= ?x21 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x32 (= $x33 true)))
 (let (($x55 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x49 (= $x55 true)))
 (let (($x69 (= $x49 true)))
 (let (($x34 (= ?x21 input.dst.llvm-%n)))
 (let (($x13 (= $x34 true)))
 (let ((?x23 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x96 (bvneg ?x23)))
 (let (($x95 (= ?x96 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x95 true)))
 (let (($x27 (and $x93 $x13)))
 (let (($x37 (and $x27 $x69)))
 (let (($x36 (and $x37 $x32)))
 (let (($x26 (and $x36 $x5)))
 (let (($x76 (and $x26 $x75)))
 (let (($x80 (and $x76 $x79)))
 (let (($x85 (and $x80 $x84)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x87 (and (not $x12) $x85)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x88 (and $x39 $x87)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x89 (and $x29 $x88)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x90 (and $x11 $x89)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x91 (and $x24 $x90)))
 (let (($x42 (=> $x91 $x20)))
 (not $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b11111111111111111111111111111111)
(= input.spec-%var-i-0.L2%7%bbentry #b11111111111111111111111111111111)
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-7.L2%7%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L2%7%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv2147483647 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x87 (bvmul ?x85 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x87)))
 (let (($x90 (= ?x88 ?x89)))
 (let (($x91 (= $x90 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x74)))
 (let (($x76 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x76 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (= $x5 true)))
 (let (($x28 (= $x26 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x44)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x30 $x46)))
 (let (($x7 (and $x19 $x58)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x32 $x7)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x48)))))))
 (let (($x38 (and $x73 $x41)))
 (let (($x68 (= $x38 true)))
 (let (($x71 (= $x68 true)))
 (let ((?x93 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x93)))
 (let (($x27 (= ?x47 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x55 (= $x27 true)))
 (let (($x66 (= ?x47 input.dst.llvm-%n)))
 (let (($x34 (= $x66 true)))
 (let ((?x97 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x97)))
 (let (($x8 (= ?x23 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x8 true)))
 (let (($x13 (and $x95 $x34)))
 (let (($x49 (and $x13 $x55)))
 (let (($x51 (and $x49 $x71)))
 (let (($x43 (and $x51 $x28)))
 (let (($x78 (and $x43 $x77)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x80 (and (not $x12) $x78)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x81 (and $x39 $x80)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x82 (and $x29 $x81)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x83 (and $x11 $x82)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x84 (and $x24 $x83)))
 (let (($x92 (=> $x84 $x91)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x87 (bvmul ?x85 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x87)))
 (let (($x90 (= ?x88 ?x89)))
 (let (($x91 (= $x90 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x74)))
 (let (($x76 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x76 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (= $x5 true)))
 (let (($x28 (= $x26 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x44)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x30 $x46)))
 (let (($x7 (and $x19 $x58)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x32 $x7)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x48)))))))
 (let (($x38 (and $x73 $x41)))
 (let (($x68 (= $x38 true)))
 (let (($x71 (= $x68 true)))
 (let ((?x93 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x93)))
 (let (($x27 (= ?x47 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x55 (= $x27 true)))
 (let (($x66 (= ?x47 input.dst.llvm-%n)))
 (let (($x34 (= $x66 true)))
 (let ((?x97 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x97)))
 (let (($x8 (= ?x23 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x8 true)))
 (let (($x13 (and $x95 $x34)))
 (let (($x49 (and $x13 $x55)))
 (let (($x51 (and $x49 $x71)))
 (let (($x43 (and $x51 $x28)))
 (let (($x78 (and $x43 $x77)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x80 (and (not $x12) $x78)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x81 (and $x39 $x80)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x82 (and $x29 $x81)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x83 (and $x11 $x82)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x84 (and $x24 $x83)))
 (let (($x92 (=> $x84 $x91)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x88 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let ((?x89 (bvmul ?x88 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x92 (= ?x90 ?x91)))
 (let (($x94 (= $x92 true)))
 (let ((?x75 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x75)))
 (let (($x77 (= ?x76 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x77 true)))
 (let ((?x35 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x35)))
 (let (($x28 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x28 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x41 true)))
 (let (($x68 (= $x38 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x32)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x62 $x73)))
 (let (($x31 (and $x33 $x30)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x34 $x31)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x56)))))))
 (let (($x46 (and $x14 $x59)))
 (let (($x19 (= $x46 true)))
 (let (($x44 (= $x19 true)))
 (let ((?x86 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x86)))
 (let (($x8 (= ?x25 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x95 (= $x8 true)))
 (let (($x23 (= ?x25 input.dst.llvm-%n)))
 (let (($x96 (= $x23 true)))
 (let (($x93 (and $x96 $x95)))
 (let (($x58 (and $x93 $x44)))
 (let (($x71 (and $x58 $x68)))
 (let (($x74 (and $x71 $x43)))
 (let (($x80 (and $x74 $x78)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x82 (and (not $x12) $x80)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x83 (and $x39 $x82)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x84 (and $x29 $x83)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x85 (and $x11 $x84)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x87 (and $x24 $x85)))
 (let (($x69 (=> $x87 $x94)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x88 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let ((?x89 (bvmul ?x88 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x89)))
 (let (($x92 (= ?x90 ?x91)))
 (let (($x94 (= $x92 true)))
 (let ((?x75 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x75)))
 (let (($x77 (= ?x76 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x78 (= $x77 true)))
 (let ((?x35 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x35)))
 (let (($x28 (= ?x5 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x28 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x41 true)))
 (let (($x68 (= $x38 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x32)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x62 $x73)))
 (let (($x31 (and $x33 $x30)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x34 $x31)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x56)))))))
 (let (($x46 (and $x14 $x59)))
 (let (($x19 (= $x46 true)))
 (let (($x44 (= $x19 true)))
 (let ((?x86 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x86)))
 (let (($x8 (= ?x25 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x95 (= $x8 true)))
 (let (($x23 (= ?x25 input.dst.llvm-%n)))
 (let (($x96 (= $x23 true)))
 (let (($x93 (and $x96 $x95)))
 (let (($x58 (and $x93 $x44)))
 (let (($x71 (and $x58 $x68)))
 (let (($x74 (and $x71 $x43)))
 (let (($x80 (and $x74 $x78)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x82 (and (not $x12) $x80)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x83 (and $x39 $x82)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x84 (and $x29 $x83)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x85 (and $x11 $x84)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x87 (and $x24 $x85)))
 (let (($x69 (=> $x87 $x94)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (not $x84)))
 (let (($x82 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x83 (not $x82)))
 (let (($x87 (or $x83 $x85)))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x5)))
 (let (($x43 (= ?x26 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x43 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x19)))
 (let (($x68 (= ?x44 input.dst.llvm-%n)))
 (let (($x71 (= $x68 true)))
 (let (($x58 (= ?x44 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x7 (= $x58 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x65)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x14 $x62)))
 (let (($x33 (and $x40 $x73)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x95 $x33)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x67)))))))
 (let (($x30 (and $x72 $x32)))
 (let (($x31 (= $x30 true)))
 (let (($x59 (= $x31 true)))
 (let ((?x81 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x81)))
 (let (($x25 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x25 true)))
 (let (($x46 (and $x97 $x59)))
 (let (($x41 (and $x46 $x7)))
 (let (($x51 (and $x41 $x71)))
 (let (($x75 (and $x51 $x74)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x76 (and $x39 $x75)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x77 (and $x29 $x76)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x78 (and $x11 $x77)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x80 (and $x24 $x78)))
 (let (($x90 (=> $x80 $x89)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (not $x84)))
 (let (($x82 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x83 (not $x82)))
 (let (($x87 (or $x83 $x85)))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let ((?x5 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x5)))
 (let (($x43 (= ?x26 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x43 true)))
 (let ((?x19 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x19)))
 (let (($x68 (= ?x44 input.dst.llvm-%n)))
 (let (($x71 (= $x68 true)))
 (let (($x58 (= ?x44 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x7 (= $x58 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x65)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x14 $x62)))
 (let (($x33 (and $x40 $x73)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x95 $x33)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x67)))))))
 (let (($x30 (and $x72 $x32)))
 (let (($x31 (= $x30 true)))
 (let (($x59 (= $x31 true)))
 (let ((?x81 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x81)))
 (let (($x25 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x25 true)))
 (let (($x46 (and $x97 $x59)))
 (let (($x41 (and $x46 $x7)))
 (let (($x51 (and $x41 $x71)))
 (let (($x75 (and $x51 $x74)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x76 (and $x39 $x75)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x77 (and $x29 $x76)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x78 (and $x11 $x77)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x80 (and $x24 $x78)))
 (let (($x90 (=> $x80 $x89)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (not $x84)))
 (let (($x87 (= $x85 false)))
 (let (($x88 (= $x87 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x28)))
 (let (($x75 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x75 true)))
 (let ((?x93 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x93)))
 (let (($x51 (= ?x13 input.dst.llvm-%n)))
 (let (($x35 (= $x51 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x46)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x33 $x31)))
 (let (($x44 (and $x59 $x19)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x49 $x44)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x14)))))))
 (let (($x7 (and $x73 $x58)))
 (let (($x41 (= $x7 true)))
 (let (($x38 (= $x41 true)))
 (let (($x9 (= ?x13 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x27 (= $x9 true)))
 (let ((?x81 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x81)))
 (let (($x25 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x25 true)))
 (let (($x55 (and $x97 $x27)))
 (let (($x68 (and $x55 $x38)))
 (let (($x5 (and $x68 $x35)))
 (let (($x77 (and $x5 $x76)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x78 (and $x39 $x77)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x80 (and $x29 $x78)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x82 (and $x11 $x80)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x83 (and $x24 $x82)))
 (let (($x89 (=> $x83 $x88)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (not $x84)))
 (let (($x87 (= $x85 false)))
 (let (($x88 (= $x87 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x28)))
 (let (($x75 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x75 true)))
 (let ((?x93 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x93)))
 (let (($x51 (= ?x13 input.dst.llvm-%n)))
 (let (($x35 (= $x51 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x46)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x33 $x31)))
 (let (($x44 (and $x59 $x19)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x49 $x44)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x14)))))))
 (let (($x7 (and $x73 $x58)))
 (let (($x41 (= $x7 true)))
 (let (($x38 (= $x41 true)))
 (let (($x9 (= ?x13 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x27 (= $x9 true)))
 (let ((?x81 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x81)))
 (let (($x25 (= ?x79 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x25 true)))
 (let (($x55 (and $x97 $x27)))
 (let (($x68 (and $x55 $x38)))
 (let (($x5 (and $x68 $x35)))
 (let (($x77 (and $x5 $x76)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x78 (and $x39 $x77)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x80 (and $x29 $x78)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x82 (and $x11 $x80)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x83 (and $x24 $x82)))
 (let (($x89 (=> $x83 $x88)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%n #b00000000000000000000000000000000)
(= input.dst.llvm-%i.0.Lfor.cond%1%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-i-0.L2%7%bbentry #b01000000000000000000000000000000)
(= input.spec-%var-n-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-n-0.L2%7%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%r.0.Lfor.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-r-0.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-7.L2%7%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-8.L2%7%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.L2%7%bbentry #b00000000000000000000000000000001)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%n () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-n-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32) (_ bv1 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x88 (or $x85 $x87)))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x43)))
 (let (($x76 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x76 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x7)))
 (let (($x35 (= ?x41 input.dst.llvm-%n)))
 (let (($x5 (= $x35 true)))
 (let (($x38 (= ?x41 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x68 (= $x38 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x32)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x40 $x49)))
 (let (($x31 (and $x33 $x30)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x9 $x31)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x8)))))))
 (let (($x46 (and $x62 $x59)))
 (let (($x19 (= $x46 true)))
 (let (($x44 (= $x19 true)))
 (let ((?x12 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x12)))
 (let (($x86 (= ?x81 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x25 (= $x86 true)))
 (let (($x58 (and $x25 $x44)))
 (let (($x71 (and $x58 $x68)))
 (let (($x26 (and $x71 $x5)))
 (let (($x78 (and $x26 $x77)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x80 (and $x15 $x78)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x82 (and $x50 $x80)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x83 (and $x22 $x82)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x84 (and $x18 $x83)))
 (let (($x48 (=> $x84 $x90)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x87 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x88 (or $x85 $x87)))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x43)))
 (let (($x76 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x77 (= $x76 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x7)))
 (let (($x35 (= ?x41 input.dst.llvm-%n)))
 (let (($x5 (= $x35 true)))
 (let (($x38 (= ?x41 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x68 (= $x38 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x32)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x40 $x49)))
 (let (($x31 (and $x33 $x30)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x9 $x31)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x8)))))))
 (let (($x46 (and $x62 $x59)))
 (let (($x19 (= $x46 true)))
 (let (($x44 (= $x19 true)))
 (let ((?x12 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x12)))
 (let (($x86 (= ?x81 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x25 (= $x86 true)))
 (let (($x58 (and $x25 $x44)))
 (let (($x71 (and $x58 $x68)))
 (let (($x26 (and $x71 $x5)))
 (let (($x78 (and $x26 $x77)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x80 (and $x15 $x78)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x82 (and $x50 $x80)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x83 (and $x22 $x82)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x84 (and $x18 $x83)))
 (let (($x48 (=> $x84 $x90)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x23 (= input.spec-%var-r-0.L2%7%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x23 true)))
 (let (($x92 (= $x96 true)))
 (let ((?x83 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x83)))
 (let (($x87 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x87 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x28)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x71 $x5)))
 (let (($x74 (and $x26 $x43)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x49 $x74)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x19)))))))
 (let (($x76 (and $x68 $x75)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x8)))
 (let (($x62 (= ?x95 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x13 (= $x62 true)))
 (let (($x72 (= ?x95 input.dst.llvm-%n)))
 (let (($x14 (= $x72 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x34)))
 (let (($x65 (= ?x56 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x64 (= $x65 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (not $x79)))
 (let (($x25 (= $x86 true)))
 (let (($x27 (= $x25 true)))
 (let (($x70 (and $x27 $x64)))
 (let (($x66 (and $x70 $x14)))
 (let (($x9 (and $x66 $x13)))
 (let (($x80 (and $x9 $x78)))
 (let (($x89 (and $x80 $x88)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x90 (and $x57 $x89)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x48 (and $x17 $x90)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x91 (and $x11 $x48)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x97 (and $x53 $x91)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x93 (and $x39 $x97)))
 (let (($x94 (=> $x93 $x92)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x23 (= input.spec-%var-r-0.L2%7%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x23 true)))
 (let (($x92 (= $x96 true)))
 (let ((?x83 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x83)))
 (let (($x87 (= ?x84 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x87 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x28)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x71 $x5)))
 (let (($x74 (and $x26 $x43)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x49 $x74)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x19)))))))
 (let (($x76 (and $x68 $x75)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x8)))
 (let (($x62 (= ?x95 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x13 (= $x62 true)))
 (let (($x72 (= ?x95 input.dst.llvm-%n)))
 (let (($x14 (= $x72 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x34)))
 (let (($x65 (= ?x56 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x64 (= $x65 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (not $x79)))
 (let (($x25 (= $x86 true)))
 (let (($x27 (= $x25 true)))
 (let (($x70 (and $x27 $x64)))
 (let (($x66 (and $x70 $x14)))
 (let (($x9 (and $x66 $x13)))
 (let (($x80 (and $x9 $x78)))
 (let (($x89 (and $x80 $x88)))
 (let (($x57 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x90 (and $x57 $x89)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x48 (and $x17 $x90)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x91 (and $x11 $x48)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x97 (and $x53 $x91)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x93 (and $x39 $x97)))
 (let (($x94 (=> $x93 $x92)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (not $x89)))
 (let (($x48 (or $x89 $x90)))
 (let (($x91 (= $x48 true)))
 (let (($x97 (= $x91 true)))
 (let ((?x76 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x76)))
 (let (($x80 (= ?x77 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x80 true)))
 (let ((?x25 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x25)))
 (let (($x28 (= ?x27 input.dst.llvm-%n)))
 (let (($x43 (= $x28 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x41)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x31 $x58)))
 (let (($x67 (and $x7 $x68)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x8 $x67)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x9)))))))
 (let (($x71 (and $x46 $x49)))
 (let (($x51 (= $x71 true)))
 (let (($x35 (= $x51 true)))
 (let (($x55 (= ?x27 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x34 (= $x55 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x57)))
 (let (($x79 (= ?x12 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x79 true)))
 (let (($x56 (and $x86 $x34)))
 (let (($x5 (and $x56 $x35)))
 (let (($x74 (and $x5 $x43)))
 (let (($x83 (and $x74 $x82)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x84 (and $x29 $x83)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x85 (and $x22 $x84)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x87 (and $x10 $x85)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x88 (and $x18 $x87)))
 (let (($x93 (=> $x88 $x97)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (not $x89)))
 (let (($x48 (or $x89 $x90)))
 (let (($x91 (= $x48 true)))
 (let (($x97 (= $x91 true)))
 (let ((?x76 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x76)))
 (let (($x80 (= ?x77 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x80 true)))
 (let ((?x25 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x25)))
 (let (($x28 (= ?x27 input.dst.llvm-%n)))
 (let (($x43 (= $x28 true)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x41)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x31 $x58)))
 (let (($x67 (and $x7 $x68)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x8 $x67)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x9)))))))
 (let (($x71 (and $x46 $x49)))
 (let (($x51 (= $x71 true)))
 (let (($x35 (= $x51 true)))
 (let (($x55 (= ?x27 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x34 (= $x55 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x57)))
 (let (($x79 (= ?x12 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x79 true)))
 (let (($x56 (and $x86 $x34)))
 (let (($x5 (and $x56 $x35)))
 (let (($x74 (and $x5 $x43)))
 (let (($x83 (and $x74 $x82)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x84 (and $x29 $x83)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x85 (and $x22 $x84)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x87 (and $x10 $x85)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x88 (and $x18 $x87)))
 (let (($x93 (=> $x88 $x97)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x46)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x9 $x38)))
 (let (($x8 (and $x30 $x70)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x66 $x8)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x34)))))))
 (let (($x88 (and $x62 $x31)))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x5 (concat ?x71 (concat ?x41 ?x58)))))
 (let (($x78 (= ?x26 input.dst.llvm-%n)))
 (let (($x80 (= $x78 true)))
 (let (($x28 (= input.dst.llvm-%n ?x26)))
 (let (($x75 (and (and (and $x62 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x31) $x28)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x82 (and $x77 $x80)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x83 (and $x29 $x82)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x84 (and $x22 $x83)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x85 (and $x10 $x84)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x87 (and $x18 $x85)))
 (let (($x48 (=> $x87 $x90)))
 (not $x48))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x46)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x9 $x38)))
 (let (($x8 (and $x30 $x70)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x66 $x8)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x34)))))))
 (let (($x88 (and $x62 $x31)))
 (let (($x89 (= $x88 true)))
 (let (($x90 (= $x89 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x5 (concat ?x71 (concat ?x41 ?x58)))))
 (let (($x78 (= ?x26 input.dst.llvm-%n)))
 (let (($x80 (= $x78 true)))
 (let (($x28 (= input.dst.llvm-%n ?x26)))
 (let (($x75 (and (and (and $x62 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x31) $x28)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x82 (and $x77 $x80)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x83 (and $x29 $x82)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x84 (and $x22 $x83)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x85 (and $x10 $x84)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x87 (and $x18 $x85)))
 (let (($x48 (=> $x87 $x90)))
 (not $x48))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x91)))
 (let (($x15 (= ?x17 input.dst.llvm-%n)))
 (let (($x44 (= $x15 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x26 (concat ?x58 (concat ?x49 ?x5)))))
 (let (($x83 (= ?x28 input.dst.llvm-%n)))
 (let (($x84 (= $x83 true)))
 (let (($x75 (= input.dst.llvm-%n ?x28)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x70)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x33 $x30)))
 (let (($x31 (and $x46 $x8)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x9 $x31)))
 (let (($x86 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x72)))))))
 (let (($x78 (and (and (and $x13 $x86) $x74) $x75)))
 (let (($x80 (= $x78 true)))
 (let (($x82 (= $x80 true)))
 (let (($x85 (and $x82 $x84)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x87 (and $x29 $x85)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x88 (and $x22 $x87)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x89 (and $x10 $x88)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x90 (and $x18 $x89)))
 (let (($x97 (=> $x90 $x44)))
 (not $x97))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x91)))
 (let (($x15 (= ?x17 input.dst.llvm-%n)))
 (let (($x44 (= $x15 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x26 (concat ?x58 (concat ?x49 ?x5)))))
 (let (($x83 (= ?x28 input.dst.llvm-%n)))
 (let (($x84 (= $x83 true)))
 (let (($x75 (= input.dst.llvm-%n ?x28)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x70)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x33 $x30)))
 (let (($x31 (and $x46 $x8)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x9 $x31)))
 (let (($x86 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x72)))))))
 (let (($x78 (and (and (and $x13 $x86) $x74) $x75)))
 (let (($x80 (= $x78 true)))
 (let (($x82 (= $x80 true)))
 (let (($x85 (and $x82 $x84)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x87 (and $x29 $x85)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x88 (and $x22 $x87)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x89 (and $x10 $x88)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x90 (and $x18 $x89)))
 (let (($x97 (=> $x90 $x44)))
 (not $x97))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x44 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x44)))
 (let (($x93 (= ?x97 input.spec-%var-n-1)))
 (let (($x81 (= $x93 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x86 (concat ?x57 (concat ?x34 ?x56)))))
 (let (($x82 (= input.dst.llvm-%n ?x76)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x28)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x49 $x71)))
 (let (($x78 (and $x68 $x75)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x30 $x78)))
 (let (($x38 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x19)))))))
 (let (($x85 (and (and (and $x67 $x38) $x80) $x82)))
 (let (($x87 (= $x85 true)))
 (let (($x88 (= $x87 true)))
 (let (($x9 (= ?x76 input.dst.llvm-%n)))
 (let (($x33 (= $x9 true)))
 (let (($x89 (and $x33 $x88)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x90 (and $x29 $x89)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x48 (and $x22 $x90)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x91 (and $x10 $x48)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x17 (and $x18 $x91)))
 (let (($x79 (=> $x17 $x81)))
 (not $x79))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x44 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x44)))
 (let (($x93 (= ?x97 input.spec-%var-n-1)))
 (let (($x81 (= $x93 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x86 (concat ?x57 (concat ?x34 ?x56)))))
 (let (($x82 (= input.dst.llvm-%n ?x76)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x28)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x49 $x71)))
 (let (($x78 (and $x68 $x75)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x30 $x78)))
 (let (($x38 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x19)))))))
 (let (($x85 (and (and (and $x67 $x38) $x80) $x82)))
 (let (($x87 (= $x85 true)))
 (let (($x88 (= $x87 true)))
 (let (($x9 (= ?x76 input.dst.llvm-%n)))
 (let (($x33 (= $x9 true)))
 (let (($x89 (and $x33 $x88)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x90 (and $x29 $x89)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x48 (and $x22 $x90)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x91 (and $x10 $x48)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x17 (and $x18 $x91)))
 (let (($x79 (=> $x17 $x81)))
 (not $x79))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460626/query
