argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --smt-query-timeout=5
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=ind8.proof
argv[9] = --spec-iospecs=ind8.iospecs
argv[10] = ind8.spec
argv[11] = ind8.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.128716
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/ind8.c
argv[10] = -o
argv[11] = par_tmpdir/ind8.c.bc.tmp
argv[12] = -m32

/home/indrajit/scratch/tests/eq-test/ind8.c:9:18: warning: implicitly declaring library function 'malloc' with type 'void *(unsigned int)' [-Wimplicit-function-declaration]
    list* node = malloc(sizeof(list));
                 ^
/home/indrajit/scratch/tests/eq-test/ind8.c:9:18: note: include the header <stdlib.h> or explicitly provide a declaration for 'malloc'
1 warning generated.
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/ind8.spec.etfg
argv[11] = par_tmpdir/ind8.c.bc
argv[12] = -o
argv[13] = par_tmpdir/ind8.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function make_list</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 100 time spent: 0:0:0 [0.000197s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 123 time spent: 0:0:0 [0.000233s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 1446 time spent: 0:0:0 [0.014792s total; 0.000010 per start]
expr_simplify_solver: num_starts 612 time spent: 0:0:0 [0.032523s total; 0.000053 per start]
expr_simplify_syntactic: num_starts 612 time spent: 0:0:0 [0.241311s total; 0.000394 per start]
expr_simplify_select_on_store: num_starts 5 time spent: 0:0:0 [0.019240s total; 0.003848 per start]
expr_simplify_store_on_store: num_starts 52 time spent: 0:0:0 [0.005177s total; 0.000100 per start]
expr_simplify_using_lhs_set_helper: num_starts 228 time spent: 0:0:0 [0.293213s total; 0.001286 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 1659 time spent: 0:0:0 [0.291783s total; 0.000176 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 217 time spent: 0:0:0 [0.001034s total; 0.000005 per start]
expr_simplify_eq: num_starts 72 time spent: 0:0:0 [0.000942s total; 0.000013 per start]
expr_simplify_or: num_starts 8 time spent: 0:0:0 [0.000013s total; 0.000002 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000008s total; 0.000004 per start]
expr_simplify_ite: num_starts 81 time spent: 0:0:0 [0.003412s total; 0.000042 per start]
canonicalize_expr_tree: num_starts 169 time spent: 0:0:0 [0.004174s total; 0.000025 per start]
expr_simplify_memalloc_using_memlabel: num_starts 121 time spent: 0:0:0 [0.000333s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 15 time spent: 0:0:0 [0.019156s total; 0.001277 per start]
memlabels_are_independent: num_starts 57 time spent: 0:0:0 [0.000111s total; 0.000002 per start]
get_arithmetic_addsub_atoms: num_starts 366 time spent: 0:0:0 [0.000158s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 347 time spent: 0:0:0 [0.005021s total; 0.000014 per start]
expr_is_consts_struct_constant: num_starts 712 time spent: 0:0:0 [0.000494s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 3714 time spent: 0:0:0 [0.297704s total; 0.000080 per start]
expr_do_simplify_helper_cache: num_starts 3714 time spent: 0:0:0 [0.002916s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 125 time spent: 0:0:0 [0.000099s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 125 time spent: 0:0:0 [0.000425s total; 0.000003 per start]
array_constant_equals: num_starts 321 time spent: 0:0:0 [0.000671s total; 0.000002 per start]
sort_dfa_canonical: num_starts 150595 time spent: 0:0:1 [1.218163s total; 0.000008 per start]
expr_convert_to_iexpr: num_starts 52 time spent: 0:0:0 [0.005272s total; 0.000101 per start]
combo_dfa_xfer_and_meet: num_starts 95 time spent: 0:0:0 [0.320101s total; 0.003369 per start]
alias_val_xfer_and_meet: num_starts 95 time spent: 0:0:0 [0.234843s total; 0.002472 per start]
get_sprel_map_from_avail_exprs: num_starts 122 time spent: 0:0:0 [0.012875s total; 0.000106 per start]
update_memlabels_for_memslot_locs: num_starts 26 time spent: 0:0:0 [0.000143s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 190 time spent: 0:0:0 [0.019263s total; 0.000101 per start]
compute_simplified_loc_exprs_for_edge: num_starts 630 time spent: 0:0:0 [0.229287s total; 0.000364 per start]
compute_locs_definitely_written_on_edge: num_starts 190 time spent: 0:0:0 [0.000124s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 175 time spent: 0:0:0 [0.180132s total; 0.001029 per start]
edge_update_memlabel_map_for_mlvars: num_starts 95 time spent: 0:0:0 [0.002791s total; 0.000029 per start]
add_new_locs_based_on_edge: num_starts 95 time spent: 0:0:0 [0.037350s total; 0.000393 per start]
expand_locset_to_include_slots_for_memmask: num_starts 198 time spent: 0:0:0 [0.001029s total; 0.000005 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_execution_constructor.src.spec.make_list.: 0s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.make_list.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.make_list.: 2e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.make_list.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 5e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.make_list.: 1.1e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 2.3e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 2.7e-05s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 2.9e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 4e-05s (num_starts 1; 0.0000s/start)
get_lr_status_for_loc_ids.: 4.2e-05s (num_starts 13; 0.0000s/start)
context_constructor.: 5e-05s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 0.000103s (num_starts 131; 0.0000s/start)
main.3.: 0.000108s (num_starts 1; 0.0001s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000117s (num_starts 2; 0.0001s/start)
expr_is_callee_save_const.: 0.000133s (num_starts 135; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000144s (num_starts 10; 0.0000s/start)
compute_sprel_relations.: 0.000152s (num_starts 1; 0.0002s/start)
propagate_sprels.: 0.000162s (num_starts 1; 0.0002s/start)
determinize_value_expr_map.: 0.000173s (num_starts 177; 0.0000s/start)
populate_memlabel_map.visit2.calling.compute_lr_status_for_expr.: 0.000195s (num_starts 6; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000209s (num_starts 4; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000222s (num_starts 22; 0.0000s/start)
populate_locid2expr_map.: 0.000244s (num_starts 2; 0.0001s/start)
graph_locs_add_all_indvars.: 0.000269s (num_starts 1; 0.0003s/start)
graph_locs_add_all_specvars.: 0.00028s (num_starts 1; 0.0003s/start)
graph_locs_add_exvregs_for_edge.: 0.000311s (num_starts 49; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000341s (num_starts 1; 0.0003s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000351s (num_starts 2; 0.0002s/start)
graph_locs_add_local_vars_for_edge.: 0.000414s (num_starts 49; 0.0000s/start)
lr_status_meet.: 0.000428s (num_starts 109; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000452s (num_starts 1; 0.0005s/start)
expr_represents_llvm_undef.: 0.000539s (num_starts 137; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000631s (num_starts 1; 0.0006s/start)
compute_reachable_memlabels_map.: 0.000641s (num_starts 3; 0.0002s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000646s (num_starts 95; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000753s (num_starts 1379; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000855s (num_starts 98; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000891s (num_starts 1; 0.0009s/start)
populate_memlabel_map.visit2.update_callee_memlabels.: 0.00103s (num_starts 6; 0.0002s/start)
canonicalize_llvm_nextpcs.: 0.00114s (num_starts 1; 0.0011s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001169s (num_starts 1; 0.0012s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.001215s (num_starts 1; 0.0012s/start)
populate_transitive_closure.: 0.001243s (num_starts 1; 0.0012s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.001305s (num_starts 95; 0.0000s/start)
graph_with_locs_constructor.src.spec.make_list.: 0.001339s (num_starts 1; 0.0013s/start)
populate_exit_return_values_for_llvm_method.: 0.001476s (num_starts 1; 0.0015s/start)
tfg::collect_assumes_around_edge.: 0.001747s (num_starts 123; 0.0000s/start)
compute_z3_expr.: 0.001844s (num_starts 166; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.002069s (num_starts 96; 0.0000s/start)
create_closure_matrix.: 0.002357s (num_starts 121; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.002677s (num_starts 95; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.002796s (num_starts 140; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.00311s (num_starts 1611; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.004014s (num_starts 83; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.004205s (num_starts 2; 0.0021s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.004467s (num_starts 1; 0.0045s/start)
graph_with_predicates_constructor.src.spec.make_list.: 0.004595s (num_starts 1; 0.0046s/start)
graph_with_aliasing_constructor.src.spec.make_list.: 0.004793s (num_starts 1; 0.0048s/start)
graph_visit_exprs.: 0.005557s (num_starts 4; 0.0014s/start)
query:convert_from_z3.: 0.005646s (num_starts 166; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.make_list.: 0.006877s (num_starts 1; 0.0069s/start)
graph_with_simplified_assets_constructor.src.spec.make_list.: 0.007137s (num_starts 1; 0.0071s/start)
query:convert_to_z3.: 0.007973s (num_starts 166; 0.0000s/start)
tfg_constructor.src.spec.make_list.after_transitive_closure.: 0.008848s (num_starts 1; 0.0088s/start)
tfg_constructor.src.spec.make_list.post_parsing.: 0.008852s (num_starts 1; 0.0089s/start)
tfg_constructor.src.spec.make_list.after_string_contents.: 0.008857s (num_starts 1; 0.0089s/start)
tfg_constructor.src.spec.make_list.after_compute_max_memlabel_varnum.: 0.008861s (num_starts 1; 0.0089s/start)
tfg_constructor.src.spec.make_list.: 0.008864s (num_starts 1; 0.0089s/start)
graph_identify_back_edges.: 0.009061s (num_starts 6; 0.0015s/start)
tfg::populate_loc_definedness.before_solve.: 0.009508s (num_starts 2; 0.0048s/start)
graph_identify_natural_loops.: 0.009524s (num_starts 6; 0.0016s/start)
create_sp_version_relations_lattice_at_pc.: 0.009971s (num_starts 121; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.010057s (num_starts 2; 0.0050s/start)
tfg::populate_loc_definedness.: 0.010436s (num_starts 2; 0.0052s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.011301s (num_starts 1; 0.0113s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.011507s (num_starts 1; 0.0115s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.011807s (num_starts 1; 0.0118s/start)
populate_branch_affecting_locs.: 0.012234s (num_starts 2; 0.0061s/start)
find_dominators.: 0.012333s (num_starts 10; 0.0012s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.013002s (num_starts 95; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.013213s (num_starts 95; 0.0001s/start)
compute_regions.: 0.014889s (num_starts 6; 0.0025s/start)
graph_to_stream.: 0.015235s (num_starts 1; 0.0152s/start)
query:simplify-z3.: 0.018034s (num_starts 334; 0.0001s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.022256s (num_starts 95; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.023315s (num_starts 1446; 0.0000s/start)
populate_simplified_to_state.: 0.026462s (num_starts 3; 0.0088s/start)
avail_exprs_create_submap.: 0.030708s (num_starts 285; 0.0001s/start)
populate_simplified_assets.: 0.035004s (num_starts 6; 0.0058s/start)
tfg_preprocess.dst.llvm.make_list.: 0.03603s (num_starts 1; 0.0360s/start)
tfg::tfg_preprocess.: 0.036032s (num_starts 1; 0.0360s/start)
get_tfg.: 0.045434s (num_starts 1; 0.0454s/start)
get_function_tfg_map.make_list.: 0.045503s (num_starts 1; 0.0455s/start)
get_function_tfg_map.: 0.045506s (num_starts 1; 0.0455s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.046539s (num_starts 95; 0.0005s/start)
main.2.: 0.047863s (num_starts 1; 0.0479s/start)
populate_locs_potentially_modified_on_edge.: 0.049809s (num_starts 3; 0.0166s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.0737s (num_starts 1446; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.075839s (num_starts 1446; 0.0001s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.084826s (num_starts 3; 0.0283s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.092835s (num_starts 1446; 0.0001s/start)
compute_lr_status_for_expr.: 0.12171s (num_starts 120; 0.0010s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.12215s (num_starts 100; 0.0012s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.122322s (num_starts 100; 0.0012s/start)
compute_new_lr_status_on_locs.: 0.193701s (num_starts 95; 0.0020s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.235037s (num_starts 95; 0.0025s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.274438s (num_starts 222; 0.0012s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.293489s (num_starts 228; 0.0013s/start)
populate_loc_liveness.: 0.296914s (num_starts 2; 0.1485s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.320247s (num_starts 95; 0.0034s/start)
tfg_postprocess_after_pointsto_analysis.: 0.411231s (num_starts 1; 0.4112s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.432621s (num_starts 1; 0.4326s/start)
ftmap_run_pointsto_analysis.: 0.780263s (num_starts 1; 0.7803s/start)
parse_consts_db.: 7.29418s (num_starts 1; 7.2942s/start)
main.: 8.21325s (num_starts 1; 8.2133s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:15 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:23 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:23 : Reading in SPEC-LLVM I/O specification from file ind8.iospecs...</MSG>
<MSG>0:23 : Computing equivalence for function: make_list...</MSG>
<MSG>0:23 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:23 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:24 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:24 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG make_list (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:24 : product-TFG make_list: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%9%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%9%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : product-TFG make_list: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : product-TFG make_list created 3 possibilities in group make_list.A...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L0%0%d --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Adding new edge to the product-TFG make_list.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Adding node L3%6%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:24 : make_list.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Adding edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : make_list.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : make_list.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : make_list.A2: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : make_list.A2: Added the 2 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:24 : make_list.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:24 : make_list.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:24 : make_list.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding new edge to the product-TFG make_list.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    7 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      5.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:24 : Added correlation to the product-TFG make_list.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    7 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      5.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:24 : make_list.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:24 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : make_list.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : make_list.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:24 : make_list.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:24 : make_list.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : make_list.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : make_list.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : make_list.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial3-prove3...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : make_list.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:25 : make_list.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : make_list.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:26 : make_list.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:26 : make_list.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:26 : make_list.A2 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:26 : make_list.A2 (d:0, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:26 : Chosen product-TFG make_list.A2 will be explored later...</MSG>
<MSG>0:26 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:26 : Chose (for CE propagation) product-TFG make_list.A3 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:26 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A3...</MSG>
<MSG>0:26 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A3...</MSG>
<MSG>0:26 : Creating ssa-path for the src-tfg path L0%0%d --> L3%9%bbentry ending at L3%9%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:26 : Adding a CG edge composition using the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:26 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : Adding new edge to the product-TFG make_list.A3 for fromPC L0%0%d_L0%0%d and toPC L3%9%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A3: Computing loop hoisting select expressions at toPC L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A3: Computing loop hoisting non-linear expressions at toPC L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A3: Adding node L3%9%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:26 : make_list.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A3: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A3: Adding edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:26 : make_list.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:26 : make_list.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:26 : make_list.A3: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%9%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
142638 : not(140275) : BOOL                        : false
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140273 : input.spec-%var-n-1 : BV:32               : 0
140430 : bvuge(140276, 140273) : BOOL              : true
142771 : not(140430) : BOOL                        : false
142918 : or(142638, 142771) : BOOL                 : false

ce =
=counter_example_begin z3.ce6 5dcd9f8e3a35de396be1e31b033c4b4
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform21 : BV:32
4 : Lambda54 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda55 : BV:32
7 : 1808360963 { 0x6bc96603 +1.57342565e88 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4055809063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4055809064; 4055809067 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4055809068; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4055809064 { 0xf1bebc28 -239158232 -1.49011707e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4055809064 { 0xf1bebc28 -239158232 -1.49011707e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4055809067 { 0xf1bebc2b -239158229 -1.49011743e100 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1714399066
=counter_example_end


failcond-expr = or(not(true), not(bvuge(0, input.spec-%var-n-1))):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-n-1 : BV:32
5 : bvuge(3, 4) : BOOL
6 : not(5) : BOOL
7 : or(2, 6) : BOOL
</MSG>
<MSG>0:26 : make_list.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:26 : make_list.A3: Finished executing CG's add edge function...</MSG>
<MSG>0:26 : make_list.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%9%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : Done adding new edge to the product-TFG make_list.A3 for fromPC L0%0%d_L0%0%d and toPC L3%9%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : Done adding a CG edge composition using the src path L0%0%d --> L3%9%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : Failed correlation of src pathset L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%9%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
142638 : not(140275) : BOOL                        : false
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140273 : input.spec-%var-n-1 : BV:32               : 0
140430 : bvuge(140276, 140273) : BOOL              : true
142771 : not(140430) : BOOL                        : false
142918 : or(142638, 142771) : BOOL                 : false

ce =
=counter_example_begin z3.ce6 5dcd9f8e3a35de396be1e31b033c4b4
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform21 : BV:32
4 : Lambda54 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda55 : BV:32
7 : 1808360963 { 0x6bc96603 +1.57342565e88 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4055809063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4055809064; 4055809067 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4055809068; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4055809064 { 0xf1bebc28 -239158232 -1.49011707e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4055809064 { 0xf1bebc28 -239158232 -1.49011707e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4055809067 { 0xf1bebc2b -239158229 -1.49011743e100 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1714399066
=counter_example_end


</MSG>
<MSG>0:26 : Discovered that the correlation was useless for the product-TFG make_list.A3 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:26 : Chose (for CE propagation) product-TFG make_list.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:26 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1...</MSG>
<MSG>0:26 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1...</MSG>
<MSG>0:26 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:26 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:26 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : Adding new edge to the product-TFG make_list.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A1: Adding node L0%0%d_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:26 : make_list.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A1: Adding edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:26 : make_list.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:26 : make_list.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:26 : make_list.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : make_list.A1: Added the 2 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:26 : make_list.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:26 : make_list.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:26 : make_list.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : Done adding new edge to the product-TFG make_list.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvule(input.spec-%var-n-1, 0)  ==  true
      1.: bvsle(input.spec-%var-n-1, 0)  ==  true
      2.: bvsge(input.spec-%var-n-1, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:26 : Added correlation to the product-TFG make_list.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:26 : Chose (after CE propagation) product-TFG make_list.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvule(input.spec-%var-n-1, 0)  ==  true
      1.: bvsle(input.spec-%var-n-1, 0)  ==  true
      2.: bvsge(input.spec-%var-n-1, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:26 : make_list.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:26 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : make_list.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:26 : make_list.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:26 : make_list.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:26 : make_list.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:26 : make_list.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:27 : make_list.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>0:27 : make_list.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:27 : make_list.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:27 : make_list.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:27 : make_list.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:27 : make_list.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:27 : make_list.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:27 : make_list.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:27 : make_list.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:27 : make_list.A1 (d:0, s:0, sp: 2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:27 : product-TFG make_list.A1: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : Attempting correlation of src pathset L0%0%d=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : product-TFG make_list.A1: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : product-TFG make_list.A1 created 1 possibilities in group make_list.A1.B...</MSG>
<MSG>0:27 : Chose (for CE propagation) product-TFG make_list.A1.B1 (d:0, s:0, sp: 2) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:27 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1...</MSG>
<MSG>0:27 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1...</MSG>
<MSG>0:27 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:27 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:27 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:27 : Identified no common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:27 : Adding new edge to the product-TFG make_list.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:27 : make_list.A1.B1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : make_list.A1.B1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : make_list.A1.B1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:27 : make_list.A1.B1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : make_list.A1.B1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : make_list.A1.B1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : make_list.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:27 : make_list.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:27 : make_list.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:27 : make_list.A1.B1: Propagated 3 out of 6 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:27 : make_list.A1.B1: Added the 3 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:27 : make_list.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:27 : make_list.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:27 : make_list.A1.B1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : make_list.A1.B1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : Done adding new edge to the product-TFG make_list.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:27 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:27 : Added correlation to the product-TFG make_list.A1.B1 (d:0, s:0, sp: 2) and created a correlation entry...</MSG>
<MSG>0:27 : Chose (after CE propagation) product-TFG make_list.A1.B1 (d:0, s:0, sp: 2) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:27 : make_list.A1.B1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:27 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:27 : make_list.A1.B1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:27 : make_list.A1.B1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:27 : make_list.A1.B1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:27 : make_list.A1.B1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:27 : make_list.A1.B1 (d:0, s:0, sp: 2): checked newly added edge and inferred invariants...</MSG>
<MSG>0:27 : make_list.A1.B1 (d:0, s:0, sp: 2): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:27 : product-TFG make_list.A1.B1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : product-TFG make_list.A1.B1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:27 : product-TFG make_list.A1.B1 created 1 possibilities in group make_list.A1.B1.C...</MSG>
<MSG>0:27 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1 (d:0, s:0, sp: 2) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:27 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1...</MSG>
<MSG>0:27 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1...</MSG>
<MSG>0:27 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:27 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:27 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart
</MSG>
<MSG>0:27 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:27 : Adding new edge to the product-TFG make_list.A1.B1.C1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.body%1%fcallStart, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Adding node L0%0%d_Lfor.body%1%fcallStart to the product-TFG...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Propagated 5 out of 8 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Added the 5 propagated CEs at PC L0%0%d_Lfor.body%1%fcallStart and propagated further.
</MSG>
<MSG>0:27 : make_list.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : Done adding new edge to the product-TFG make_list.A1.B1.C1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.body%1%fcallStart, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 4294967295            ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 4294967295            ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvuge(input.spec-%var-n-1, 4294967295)  ==  true
      1.: bvsle(input.spec-%var-n-1, 4294967295)  ==  true
      2.: bvsge(input.spec-%var-n-1, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:27 : Added correlation to the product-TFG make_list.A1.B1.C1 (d:0, s:0, sp: 2) and created a correlation entry...</MSG>
<MSG>0:27 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1 (d:0, s:0, sp: 2) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 4 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 4294967295            ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 4294967295            ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    3 preds:
      0.: bvuge(input.spec-%var-n-1, 4294967295)  ==  true
      1.: bvsle(input.spec-%var-n-1, 4294967295)  ==  true
      2.: bvsge(input.spec-%var-n-1, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:27 : make_list.A1.B1.C1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:27 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:27 : make_list.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:28 : make_list.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>0:28 : make_list.A1.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3v487.ce384
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3.ce385
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:29 : make_list.A1.B1.C1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>0:29 : make_list.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3v487.ce384
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3.ce385
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:29 : make_list.A1.B1.C1 (d:0, s:0, sp: 2): checked newly added edge and inferred invariants...</MSG>
<MSG>0:29 : make_list.A1.B1.C1 (d:0, s:0, sp: 4): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:30 : product-TFG make_list.A1.B1.C1: Enumerating correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:30 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:30 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:30 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:30 : product-TFG make_list.A1.B1.C1: Found 1 correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:30 : product-TFG make_list.A1.B1.C1 created 1 possibilities in group make_list.A1.B1.C1.D...</MSG>
<MSG>0:30 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1.D1 (d:0, s:0, sp: 4) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:30 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1.D1...</MSG>
<MSG>0:30 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1.D1...</MSG>
<MSG>0:30 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:30 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>0:30 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd
</MSG>
<MSG>0:30 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>0:30 : Adding new edge to the product-TFG make_list.A1.B1.C1.D1 for fromPC L0%0%d_Lfor.body%1%fcallStart and toPC L0%0%d_Lfor.body%1%fcallEnd, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Adding node L0%0%d_Lfor.body%1%fcallEnd to the product-TFG...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Getting alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Found no alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Adding edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Propagated 10 out of 10 counter-examples across edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Added the 10 propagated CEs at PC L0%0%d_Lfor.body%1%fcallEnd and propagated further.
</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:30 : make_list.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:30 : Done adding new edge to the product-TFG make_list.A1.B1.C1.D1 for fromPC L0%0%d_Lfor.body%1%fcallStart and toPC L0%0%d_Lfor.body%1%fcallEnd, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>0:30 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3v487.ce384
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3.ce385
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 16-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce481      1.:z3.ce499      2.:z3v487.ce502      3.:z3v487.ce505
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce502      1.:z3v487.ce505
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:30 : Added correlation to the product-TFG make_list.A1.B1.C1.D1 (d:1, s:0, sp: 4) and created a correlation entry...</MSG>
<MSG>0:30 : Chose (after CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 4 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:30 : make_list.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:30 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:30 : make_list.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:30 : make_list.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:30 : make_list.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:30 : make_list.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:30 : make_list.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : make_list.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:30 : make_list.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : make_list.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>0:30 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:30 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:30 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:30 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:30 : make_list.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : make_list.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:30 : make_list.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : make_list.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:30 : make_list.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:30 : make_list.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5


<MSG>0:30 : make_list.A2 (d:0, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:30 : make_list.A2 (d:0, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:31 : product-TFG make_list.A2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Attempting correlation of src pathset L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : product-TFG make_list.A2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : product-TFG make_list.A2 created 1 possibilities in group make_list.A2.B...</MSG>
<MSG>0:31 : Chose (for CE propagation) product-TFG make_list.A2.B1 (d:0, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:31 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1...</MSG>
<MSG>0:31 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1...</MSG>
<MSG>0:31 : Creating ssa-path for the src-tfg path L3%6%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:31 : Adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:31 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:31 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:31 : Adding new edge to the product-TFG make_list.A2.B1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:31 : make_list.A2.B1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:31 : make_list.A2.B1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:31 : make_list.A2.B1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:31 : make_list.A2.B1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:31 : make_list.A2.B1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:31 : make_list.A2.B1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:31 : make_list.A2.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:31 : make_list.A2.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:31 : make_list.A2.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:31 : make_list.A2.B1: Propagated 3 out of 6 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:31 : make_list.A2.B1: Added the 3 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:31 : make_list.A2.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:31 : make_list.A2.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:31 : make_list.A2.B1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:31 : make_list.A2.B1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:31 : Done adding new edge to the product-TFG make_list.A2.B1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:31 : Done adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:31 : Added correlation to the product-TFG make_list.A2.B1 (d:0, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:31 : Chose (after CE propagation) product-TFG make_list.A2.B1 (d:0, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:31 : make_list.A2.B1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:31 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:31 : make_list.A2.B1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:31 : make_list.A2.B1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:31 : make_list.A2.B1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:31 : make_list.A2.B1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:31 : make_list.A2.B1 (d:0, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:31 : make_list.A2.B1 (d:0, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:31 : product-TFG make_list.A2.B1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : product-TFG make_list.A2.B1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:31 : product-TFG make_list.A2.B1 created 1 possibilities in group make_list.A2.B1.C...</MSG>
<MSG>0:31 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1 (d:0, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:31 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1...</MSG>
<MSG>0:31 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1...</MSG>
<MSG>0:31 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:31 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:31 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart
</MSG>
<MSG>0:31 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:31 : Adding new edge to the product-TFG make_list.A2.B1.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.body%1%fcallStart, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Updating dst fcall edge using src fcall edge for toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Adding node L3%6%bbentry_Lfor.body%1%fcallStart to the product-TFG...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Propagated 5 out of 8 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Added the 5 propagated CEs at PC L3%6%bbentry_Lfor.body%1%fcallStart and propagated further.
</MSG>
<MSG>0:31 : make_list.A2.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : Done adding new edge to the product-TFG make_list.A2.B1.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.body%1%fcallStart, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    7 preds:
      0.: 4294967295            ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: 4294967295            ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
      5.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      6.: 4294967295            ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    12 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      2.: eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      4.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      9.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      10.: eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))  ==  true
      11.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:31 : Added correlation to the product-TFG make_list.A2.B1.C1 (d:0, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:31 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1 (d:0, s:0, sp: 5) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 4 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    7 preds:
      0.: 4294967295            ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: 4294967295            ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
      5.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      6.: 4294967295            ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      1.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967295)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    12 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      2.: eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      4.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      9.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      10.: eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))  ==  true
      11.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:31 : make_list.A2.B1.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:31 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:31 : make_list.A2.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:32 : make_list.A2.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht7-prove_trivial5-prove2...</MSG>
<MSG>0:32 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:32 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:32 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:32 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:32 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:32 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:32 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:33 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:33 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:33 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:33 : make_list.A2.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht12-prove_trivial2-prove10...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:36 : make_list.A2.B1.C1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>0:36 : make_list.A2.B1.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:36 : make_list.A2.B1.C1 (d:0, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:36 : make_list.A2.B1.C1 (d:0, s:0, sp: 15): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:36 : product-TFG make_list.A2.B1.C1: Enumerating correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:36 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:36 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:36 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:36 : product-TFG make_list.A2.B1.C1: Found 1 correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:36 : product-TFG make_list.A2.B1.C1 created 1 possibilities in group make_list.A2.B1.C1.D...</MSG>
<MSG>0:36 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1 (d:0, s:0, sp: 15) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 9 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:36 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1...</MSG>
<MSG>0:36 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1...</MSG>
<MSG>0:36 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:36 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>0:36 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd
</MSG>
<MSG>0:36 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>0:36 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1 for fromPC L3%6%bbentry_Lfor.body%1%fcallStart and toPC L3%6%bbentry_Lfor.body%1%fcallEnd, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Adding node L3%6%bbentry_Lfor.body%1%fcallEnd to the product-TFG...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Adding edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Propagated 9 out of 9 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Added the 9 propagated CEs at PC L3%6%bbentry_Lfor.body%1%fcallEnd and propagated further.
</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:36 : make_list.A2.B1.C1.D1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:36 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1 for fromPC L3%6%bbentry_Lfor.body%1%fcallStart and toPC L3%6%bbentry_Lfor.body%1%fcallEnd, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>0:36 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    14 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      4.: false                 ==  true
      5.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      6.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      8.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      9.: eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      10.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      11.: eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))  ==  true
      12.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:36 : Added correlation to the product-TFG make_list.A2.B1.C1.D1 (d:1, s:0, sp: 15) and created a correlation entry...</MSG>
<MSG>0:36 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1.D1 (d:1, s:0, sp: 4) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3v487.ce384
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3.ce385
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 16-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce481      1.:z3.ce499      2.:z3v487.ce502      3.:z3v487.ce505
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce502      1.:z3v487.ce505
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:36 : make_list.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:36 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:36 : make_list.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:36 : make_list.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>0:36 : make_list.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.body%1%fcallStart ...</MSG>
<MSG>0:36 : make_list.A1.B1.C1.D1: Relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:36 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:36 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:36 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:36 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:36 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3v487.ce384
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3.ce385
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 16-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce481      1.:z3.ce499      2.:z3v487.ce502      3.:z3v487.ce505
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505      3.:z3.ce833
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505      3.:z3.ce833
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce502      1.:z3v487.ce505
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:37 : make_list.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3v487.ce384
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3.ce385
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 16-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce481      1.:z3.ce499      2.:z3v487.ce502      3.:z3v487.ce505
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505      3.:z3.ce833
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505      3.:z3.ce833
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce502      1.:z3v487.ce505
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:37 : make_list.A1.B1.C1.D1 (d:1, s:0, sp: 4): checked newly added edge and inferred invariants...</MSG>
<MSG>0:37 : make_list.A1.B1.C1.D1 (d:1, s:0, sp: 6): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:38 : product-TFG make_list.A1.B1.C1.D1: Enumerating correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:38 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:38 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:38 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:38 : product-TFG make_list.A1.B1.C1.D1: Found 1 correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:38 : product-TFG make_list.A1.B1.C1.D1 created 1 possibilities in group make_list.A1.B1.C1.D1.E...</MSG>
<MSG>0:38 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1.D1.E1 (d:1, s:0, sp: 6) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 11 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:38 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1.D1.E1...</MSG>
<MSG>0:38 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1.D1.E1...</MSG>
<MSG>0:38 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:38 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>0:38 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:38 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>0:38 : Adding new edge to the product-TFG make_list.A1.B1.C1.D1.E1 for fromPC L0%0%d_Lfor.body%1%fcallEnd and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Adding edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Propagated 1 out of 11 counter-examples across edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Added the 1 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:38 : Done adding new edge to the product-TFG make_list.A1.B1.C1.D1.E1 for fromPC L0%0%d_Lfor.body%1%fcallEnd and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:38 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    3 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1426646132)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce351      1.:z3v487.ce384      2.:z3v487.ce924
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3v487.ce924
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3.ce385
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 16-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce481      1.:z3.ce499      2.:z3v487.ce502      3.:z3v487.ce505
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505      3.:z3.ce833
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505      3.:z3.ce833
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce502      1.:z3v487.ce505
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:38 : Added correlation to the product-TFG make_list.A1.B1.C1.D1.E1 (d:1, s:0, sp: 6) and created a correlation entry...</MSG>
<MSG>0:38 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1.D1.E1 (d:1, s:0, sp: 6) from a frontier of size 2...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    3 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1426646132)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce351      1.:z3v487.ce384      2.:z3v487.ce924
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3v487.ce924
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3.ce385
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 16-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce481      1.:z3.ce499      2.:z3v487.ce502      3.:z3v487.ce505
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505      3.:z3.ce833
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505      3.:z3.ce833
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce502      1.:z3v487.ce505
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:38 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.body%1%fcallStart ...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:38 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 5 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 15-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    3 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1426646132)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce351      1.:z3v487.ce384      2.:z3v487.ce924
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3v487.ce924
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce351      1.:z3.ce385      2.:z3v487.ce384      3.:z3.ce406      4.:z3.ce428
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce351      1.:z3.ce385
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce351

L0%0%d_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 16-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    2 preds:
      0.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1426646132)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce481      1.:z3.ce499      2.:z3v487.ce502      3.:z3v487.ce505      4.:z3v487.ce940
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505      3.:z3.ce833
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce505      1.:z3v487.ce940
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce499      1.:z3v487.ce502      2.:z3v487.ce505      3.:z3.ce833
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce502      1.:z3v487.ce505
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 17-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce505

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 2)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.spec-%var-n-1 ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce159
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-n-1 ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3.ce199      3.:z3v487.ce159
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce179      2.:z3v487.ce159
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [1]: 14-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.body%1%fcallEnd ...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: marking unstable at L0%0%d_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL0%0%d_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140664 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 1
140675 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32 : 1
140698 : bvult(140664, 140675) : BOOL              : false
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140273 : input.spec-%var-n-1 : BV:32               : 1
140430 : bvuge(140276, 140273) : BOOL              : false
143038 : or(140698, 140430) : BOOL                 : false

ce =
=counter_example_begin z3.ce966 df6dead55ddbaf7d1b9c7338a8c44f2d
=input.spec-%var-n-1
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 2415919104; 2415919104 ] -> 0, [ 2415919105; 2415919105 ] -> 0, [ 2415919106; 2415919106 ] -> 0, [ 2415919107; 2415919107 ] -> 0, [ 2415919108; 2415919108 ] -> 0, [ 2415919109; 2415919109 ] -> 0, [ 2415919110; 2415919110 ] -> 0, [ 2415919111; 2415919111 ] -> 0, { [ 0; 2415919103 ], [ 2415919112; 4294967295 ], } -> (RAC: m_multiplier -> 24 , m_adder -> 44), ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform379 : BV:32
4 : Lambda1129 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda1130 : BV:32
7 : 1898412492 { 0x712779cc +1.30840444e99 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2679306232 { 0x9fb2f7f8 -1615661064 -1.39819240e192 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2415919103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2415919104; 2415919111 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2415919112; 2679306231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2679306232; 2679306235 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2679306236; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 860247099 { 0x3346543b +1.54944550e231 } : COUNT
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 759927951 { 0x2d4b948f +1.59047114e219 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 216940508 { 0xcee3fdc +1.86132383e154 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2415919104 { 0x90000000 -1879048192 -1.0e161 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1991829993 { 0x76b8e9e9 +1.44463837e110 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 24 , m_adder -> 44), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2415919104 { 0x90000000 -1879048192 -1.0e161 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 2415919104; 2415919111 ] -> 58, { [ 0; 2415919103 ], [ 2415919112; 4294967295 ], } -> (RAC: m_multiplier -> 24 , m_adder -> 44), ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 2415919103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2415919104; 2415919111 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2415919112; 2679306231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2679306232; 2679306235 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2679306236; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 860247099 { 0x3346543b +1.54944550e231 } : COUNT
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 759927951 { 0x2d4b948f +1.59047114e219 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 216940508 { 0xcee3fdc +1.86132383e154 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%2%d
1 : 2415919104 { 0x90000000 -1879048192 -1.0e161 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 2415919104 { 0x90000000 -1879048192 -1.0e161 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%808ddefedd3236aa83e8b266ced5c475.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 2415919104 { 0x90000000 -1879048192 -1.0e161 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 2415919108 { 0x90000004 -1879048188 -1.47e161 } : BV:32
=input.dst.llvm-%8dc75962723a128ae8efe5fcb9b8f58b.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2415919104 { 0x90000000 -1879048192 -1.0e161 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 2415919108 { 0x90000004 -1879048188 -1.47e161 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 2415919104 { 0x90000000 -1879048192 -1.0e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2679306232 { 0x9fb2f7f8 -1615661064 -1.39819240e192 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2679306235 { 0x9fb2f7fb -1615661061 -1.39819276e192 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3409196135
=counter_example_end


failcond-expr = or(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry), bvuge(0, input.spec-%var-n-1)):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : input.spec-%var-n-1 : BV:32
6 : bvuge(4, 5) : BOOL
7 : or(3, 6) : BOOL
</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:39 : make_list.A1.B1.C1.D1.E1: edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry) became unstable after invariant inference</MSG>
<MSG>0:39 : Chosen product-TFG make_list.A1.B1.C1.D1.E1 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry))
</MSG>
<MSG>0:39 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1 (d:1, s:0, sp: 15) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 9 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    14 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      4.: false                 ==  true
      5.: eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      6.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      8.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      9.: eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      10.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
      11.: eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))  ==  true
      12.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:39 : make_list.A2.B1.C1.D1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:39 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht5-prove_trivial5-prove0...</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:39 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:40 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>0:40 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:40 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:40 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:40 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:40 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:40 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:40 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:44 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht14-prove_trivial2-prove12...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:44 : make_list.A2.B1.C1.D1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>0:44 : make_list.A2.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:44 : make_list.A2.B1.C1.D1 (d:1, s:0, sp: 15): checked newly added edge and inferred invariants...</MSG>
<MSG>0:44 : make_list.A2.B1.C1.D1 (d:1, s:0, sp: 27): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:44 : product-TFG make_list.A2.B1.C1.D1: Enumerating correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:44 : Considering 2 paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:44 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:44 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:44 : Found 2 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:44 : product-TFG make_list.A2.B1.C1.D1: Found 2 correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>0:44 : product-TFG make_list.A2.B1.C1.D1 created 2 possibilities in group make_list.A2.B1.C1.D1.E...</MSG>
<MSG>0:44 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:1, s:0, sp: 27) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 9 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:44 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1.E2...</MSG>
<MSG>0:44 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1.E2...</MSG>
<MSG>0:44 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:44 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>0:44 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:44 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>0:44 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1.E2 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:44 : make_list.A2.B1.C1.D1.E2: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:44 : make_list.A2.B1.C1.D1.E2: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:44 : make_list.A2.B1.C1.D1.E2: Adding edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:44 : make_list.A2.B1.C1.D1.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:44 : make_list.A2.B1.C1.D1.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:44 : make_list.A2.B1.C1.D1.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Propagated 2 out of 10 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Added the 2 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Finished executing CG's add edge function...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:45 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1.E2 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:45 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvmul(input.spec-%var-i-0.L3%6%bbentry, 352653916)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 25165824))  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 25165824))  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:45 : Added correlation to the product-TFG make_list.A2.B1.C1.D1.E2 (d:1, s:0, sp: 27) and created a correlation entry...</MSG>
<MSG>0:45 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:1, s:0, sp: 27) from a frontier of size 2...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvmul(input.spec-%var-i-0.L3%6%bbentry, 352653916)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 25165824))  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 25165824))  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:45 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:45 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht6-prove_trivial3-prove3...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>0:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 25165824))  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 25165824))  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 25165824))  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial1-prove4...</MSG>
<MSG>0:51 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:01 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:01 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:01 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:01 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:02 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:03 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:04 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged ...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 13 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:06 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:07 : make_list.A2.B1.C1.D1.E2 (d:4, s:0, sp: 27): checked newly added edge and inferred invariants...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E2 (d:4, s:0, sp: 28): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>1:07 : Chosen product-TFG make_list.A2.B1.C1.D1.E2 will be explored later...</MSG>
<MSG>1:07 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>1:07 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1.E1 (d:1, s:0, sp: 27) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 9 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:07 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1.E1...</MSG>
<MSG>1:07 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1.E1...</MSG>
<MSG>1:07 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>1:07 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:07 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>1:07 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>1:07 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1.E1 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Adding edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Propagated 2 out of 10 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Added the 2 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:07 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1.E1 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>1:07 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 352653916)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce2018
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce2018
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvadd(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 25165824))
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce2059
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce795      1.:z3.ce2059
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvadd(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 25165824))
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1977
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3.ce1977
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:07 : Added correlation to the product-TFG make_list.A2.B1.C1.D1.E1 (d:1, s:0, sp: 27) and created a correlation entry...</MSG>
<MSG>1:07 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1.E1 (d:1, s:0, sp: 27) from a frontier of size 2...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:0, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 352653916)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce2018
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce2018
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:1, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvadd(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 25165824))
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce2059
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce795      1.:z3.ce2059
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 5)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvadd(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 25165824))
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1977
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce5      1.:z3.ce1977
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    2 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:07 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>1:07 : make_list.A2.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E1: marking unstable at E0%0%d_E0%0%d due to failing condition:
140664 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 1
140675 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32 : 1
140698 : bvult(140664, 140675) : BOOL              : false
140355 : input.spec-%var-i-0.L3%6%bbentry : BV:32  : 0
140359 : input.spec-%var-n-0.L3%6%bbentry : BV:32  : 1
140360 : bvuge(140355, 140359) : BOOL              : false
145184 : or(140698, 140360) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce2073 3226d1bb263b74e1e487d16f34395893
=input.spec-%var-n-1
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-n-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform985 : BV:32
4 : Lambda2613 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda2614 : BV:32
7 : 1531945494 { 0x5b4fa216 +1.62213397e55 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1690932512 { 0x64c99520 +1.57486343e74 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform984 : BV:32
5 : Lambda2611 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda2612 : BV:32
8 : 1357500815 { 0x50e9d18f +1.82670772e34 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1690932511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1690932512; 1690932515 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1690932516; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4269801472 { 0xfe800000 -25165824 -1.0e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1690932512 { 0x64c99520 +1.57486343e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1690932515 { 0x64c99523 +1.57486379e74 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
911774674
=counter_example_end


failcond-expr = or(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry), bvuge(input.spec-%var-i-0.L3%6%bbentry, input.spec-%var-n-0.L3%6%bbentry)):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : input.spec-%var-n-0.L3%6%bbentry : BV:32
6 : bvuge(4, 5) : BOOL
7 : or(3, 6) : BOOL
</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E1: edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) became unstable after invariant inference</MSG>
<MSG>1:08 : Chosen product-TFG make_list.A2.B1.C1.D1.E1 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry))
</MSG>
<MSG>1:08 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:4, s:0, sp: 28) from a frontier of size 1...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 20 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 23 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:08 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:08 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:09 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>1:09 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:09 : make_list.A2.B1.C1.D1.E2 (d:4, s:0, sp: 28): checked newly added edge and inferred invariants...</MSG>
<MSG>1:09 : make_list.A2.B1.C1.D1.E2 (d:4, s:0, sp: 28): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:09 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>1:09 : Checking equivalence proof...</MSG>
<MSG>1:11 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 10)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce677      2.:z3v487.ce1171      3.:z3.ce1234
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce642      1.:z3v487.ce1171      2.:z3.ce1687      3.:z3.ce1931
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce701      1.:z3v487.ce642      2.:z3.ce678      3.:z3v487.ce677
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce642      1.:z3.ce678
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 23-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 24-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 25-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 26-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 27-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce642

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:2, s:0, sp: 12)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 30-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3.ce1216      4.:z3.ce1270      5.:z3v487.ce1303
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce795      1.:z3.ce1216      2.:z3.ce1421      3.:z3.ce1498      4.:z3.ce1574      5.:z3.ce1651      6.:z3.ce1763      7.:z3.ce1840
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce789      1.:z3v487.ce792      2.:z3v487.ce795      3.:z3v487.ce1029
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce792      1.:z3v487.ce795
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [13]: 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 33-->eq(spec-%tmpvar-1.L3%6%bbentry, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))) ; 34-->eq(spec-%tmpvar-2.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 35-->eq(spec-%var-new_l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 36-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 37-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 38-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 39-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 40-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 41-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 42-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 43-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 1, prod_init(SORT2EXPR.VAR, input.spec-%var-i-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce795

L3%6%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 6)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3.ce1111      3.:z3v487.ce1335
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce5      1.:z3.ce1111      2.:z3.ce1384      3.:z3.ce1461      4.:z3.ce1537      5.:z3.ce1614      6.:z3.ce1726      7.:z3.ce1803      8.:z3v487.ce1880
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53      3.:z3.ce77
    eqclass 6:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce5      1.:z3v487.ce29      2.:z3v487.ce53
    eqclass 7:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 16-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 17-->eq(spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 18-->eq(spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 19-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce5

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 20 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 23 counterexamples (for correlating 7 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function make_list. 48.06s, query:smt.: 19.9964s (num_starts 179; 0.1117s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 42.9678s (num_starts 431; 0.0997s/start)ftmap_run_pointsto_analysis.: 9.31018s (num_starts 213; 0.0437s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 9e-06s (num_starts 9; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.9e-05s (num_starts 7; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 2e-05s (num_starts 12; 0.0000s/start)
prune_dst_memslots.: 2.3e-05s (num_starts 7; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.4e-05s (num_starts 12; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 2.8e-05s (num_starts 3; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.7e-05s (num_starts 11; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 4.3e-05s (num_starts 51; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart.: 5e-05s (num_starts 1; 0.0001s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry.: 6.4e-05s (num_starts 1; 0.0001s/start)
bv_expr_pair_ranges_merge_adjacent.: 7.6e-05s (num_starts 1; 0.0001s/start)
check_wfconds_on_edge.L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry.: 9.6e-05s (num_starts 1; 0.0001s/start)
check_wfconds_on_edge.L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd.: 0.000101s (num_starts 2; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.000105s (num_starts 5; 0.0000s/start)
remove_complex_bv_exprs.: 0.000118s (num_starts 7; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000145s (num_starts 7; 0.0000s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart.: 0.000205s (num_starts 4; 0.0001s/start)
alias_val_t::constructor_with_map_arg.: 0.000219s (num_starts 280; 0.0000s/start)
prove_trivial.: 0.000238s (num_starts 258; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000254s (num_starts 227; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.000259s (num_starts 3; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.00029s (num_starts 1; 0.0003s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.000302s (num_starts 6; 0.0001s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000323s (num_starts 12; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000324s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000324s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000324s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000326s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000343s (num_starts 1; 0.0003s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.00036s (num_starts 104; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000388s (num_starts 97; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.00039s (num_starts 65; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000567s (num_starts 431; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000582s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-signed;-trivial.: 0.000583s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000585s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.000588s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-signed.: 0.000591s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.000597s (num_starts 1; 0.0006s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000617s (num_starts 7; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-signed;-trivial.: 0.000635s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.000636s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.000641s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-signed.: 0.000644s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-signed;-trivial.: 0.000697s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.000698s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.000703s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-signed.: 0.000706s (num_starts 1; 0.0007s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.00076s (num_starts 104; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000768s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000769s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000769s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-unsigned;-trivial.: 0.000779s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.00078s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.000782s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.000785s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.000787s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-unsigned.: 0.00079s (num_starts 1; 0.0008s/start)
collect_dst_to_src_submap_preds.: 0.000791s (num_starts 431; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.000793s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000808s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.000809s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.000815s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.000819s (num_starts 1; 0.0008s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000951s (num_starts 7; 0.0001s/start)
get_sprel_map_pair.: 0.000979s (num_starts 72; 0.0000s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.001007s (num_starts 173; 0.0000s/start)
compute_bv_bool_eqclass.: 0.001012s (num_starts 7; 0.0001s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.: 0.001015s (num_starts 1; 0.0010s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001037s (num_starts 15; 0.0001s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.001089s (num_starts 8; 0.0001s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-trivial.: 0.001217s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001218s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00122s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001223s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001223s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001226s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001229s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001233s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001239s (num_starts 1; 0.0012s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001333s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;lb-signed;-trivial.: 0.001424s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.001426s (num_starts 2; 0.0007s/start)
get_intersected_lr_status.: 0.001429s (num_starts 213; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.001434s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;lb-signed.: 0.001441s (num_starts 2; 0.0007s/start)
proof_query_is_trivial_helper.: 0.001452s (num_starts 455; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001452s (num_starts 1; 0.0015s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.001474s (num_starts 82; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;ub-signed;-trivial.: 0.001492s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.001497s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned;-trivial.: 0.001498s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.001503s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.001505s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;ub-signed.: 0.00151s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst-ineq-houdini-guess;-trivial.: 0.001517s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.001521s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.001532s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst-ineq-houdini-guess.: 0.001537s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;ub-unsigned;-trivial.: 0.001539s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.001544s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.001554s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;ub-unsigned.: 0.00156s (num_starts 2; 0.0008s/start)
removeMostPromising.: 0.001616s (num_starts 37; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001677s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001682s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001691s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.001705s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed;-trivial.: 0.001712s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.001717s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed.: 0.00173s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed.: 0.001739s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.001742s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-signed;-trivial.: 0.001749s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.001754s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed.: 0.001755s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed.: 0.001766s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-signed.: 0.001775s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed.: 0.001788s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-trivial.: 0.001805s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear;-trivial.: 0.001814s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-trivial.: 0.001819s (num_starts 3; 0.0006s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.001826s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.001948s (num_starts 1; 0.0019s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.001948s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned;-trivial.: 0.001955s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.001961s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned.: 0.001975s (num_starts 1; 0.0020s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001983s (num_starts 8; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned.: 0.001984s (num_starts 1; 0.0020s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.001984s (num_starts 216; 0.0000s/start)
tfg_suffixpath_get_expr_helper.: 0.001984s (num_starts 33; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned.: 0.001999s (num_starts 1; 0.0020s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.002005s (num_starts 3; 0.0007s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002018s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.002049s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear;-trivial.: 0.00206s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.002065s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 0.00208s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear.: 0.002087s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.002099s (num_starts 3; 0.0007s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.002104s (num_starts 7; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.002181s (num_starts 3; 0.0007s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.002231s (num_starts 214; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.002234s (num_starts 3; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002269s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00227s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002277s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.002283s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.002311s (num_starts 3; 0.0008s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.002313s (num_starts 8; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.002365s (num_starts 3; 0.0008s/start)
interesting_wp_exprs_apply_trans_funs.: 0.002366s (num_starts 8; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002368s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002368s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.002374s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.00238s (num_starts 1; 0.0024s/start)
parse_yices_model.: 0.002381s (num_starts 1; 0.0024s/start)
parse_cvc4_model.: 0.002455s (num_starts 1; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002483s (num_starts 3; 0.0008s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.002498s (num_starts 29; 0.0001s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.002528s (num_starts 502; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.002552s (num_starts 3; 0.0009s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.: 0.002561s (num_starts 3; 0.0009s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.002662s (num_starts 16; 0.0002s/start)
expr_is_hidden_reg.: 0.00273s (num_starts 3276; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;lb-unsigned;-trivial.: 0.002748s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.002754s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.002768s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities.;-trivial.: 0.00277s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 0.002771s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;lb-unsigned.: 0.002781s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;dst-ineq-houdini-guess;-trivial.: 0.002878s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.002887s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.002905s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;dst-ineq-houdini-guess.: 0.002914s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;linear;-trivial.: 0.00295s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.002955s (num_starts 4; 0.0007s/start)
pth_collect_preds_using_atom_func.: 0.002996s (num_starts 59; 0.0001s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.: 0.003127s (num_starts 3; 0.0010s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.00313s (num_starts 9; 0.0003s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.003143s (num_starts 113; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003483s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed;-trivial.: 0.003493s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.0035s (num_starts 4; 0.0009s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.003533s (num_starts 338; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.003571s (num_starts 4; 0.0009s/start)
expr_is_callee_save_const.: 0.003575s (num_starts 3308; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-signed;-trivial.: 0.003581s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.003589s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.003603s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-signed.: 0.003616s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.003626s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.003638s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.003639s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst-ineq-houdini-guess;-trivial.: 0.00364s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.003649s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.003675s (num_starts 2; 0.0018s/start)
ldr_decomposition.: 0.003676s (num_starts 97; 0.0000s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.003686s (num_starts 13; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst-ineq-houdini-guess.: 0.00369s (num_starts 2; 0.0018s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.003716s (num_starts 7; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.003719s (num_starts 2; 0.0019s/start)
tfg_edge_composition_get_assumes.: 0.003793s (num_starts 59; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003842s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned;-trivial.: 0.003851s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003857s (num_starts 4; 0.0010s/start)
proof_query_is_trivial.: 0.003872s (num_starts 431; 0.0000s/start)
construct_linear_combination_exprs.: 0.003982s (num_starts 167; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.004114s (num_starts 251; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-signed;-trivial.: 0.004124s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.004125s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.004135s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-signed;-trivial.: 0.004138s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.004142s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-signed.: 0.004142s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst-ineq-houdini-guess;-trivial.: 0.004146s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.00415s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.004152s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-signed.: 0.004157s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.00416s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst-ineq-houdini-guess.: 0.004165s (num_starts 2; 0.0021s/start)
set_result_and_counter_example.: 0.004171s (num_starts 179; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.004187s (num_starts 7779; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-unsigned;-trivial.: 0.004225s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.004228s (num_starts 6; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.00423s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.00424s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-unsigned.: 0.004245s (num_starts 2; 0.0021s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.: 0.004278s (num_starts 1; 0.0043s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.00429s (num_starts 78; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned;-trivial.: 0.004309s (num_starts 2; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.004312s (num_starts 2; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.004376s (num_starts 6; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.004499s (num_starts 6; 0.0007s/start)
corr_graph_enumerate_correlations.: 0.0045s (num_starts 11; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.004512s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess;-trivial.: 0.004517s (num_starts 1; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.00452s (num_starts 1; 0.0045s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.004548s (num_starts 122; 0.0000s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.004695s (num_starts 502; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.004842s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst-ineq-houdini-guess;-trivial.: 0.004846s (num_starts 1; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.004851s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.004855s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst-ineq-houdini-guess.: 0.004858s (num_starts 1; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.004864s (num_starts 1; 0.0049s/start)
collect_assumes_around_edge.: 0.004937s (num_starts 12; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.004989s (num_starts 7; 0.0007s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.: 0.005088s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-signed;-trivial.: 0.005287s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.005292s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.005305s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-signed.: 0.005313s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed;-trivial.: 0.005428s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.005433s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.005447s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed.: 0.005455s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005529s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005532s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005533s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.005538s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;abstract-memlabel-asserts-houdini-guess.: 0.005542s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-trivial.: 0.005546s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.005547s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.005549s (num_starts 1; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;false-predicate;-trivial.: 0.00555s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-trivial.: 0.005553s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.00556s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;false-predicate.: 0.005563s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.00557s (num_starts 1; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-trivial.: 0.005615s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.005618s (num_starts 2; 0.0028s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.005667s (num_starts 4; 0.0014s/start)
aliasing_constraints.convert_to_expr.: 0.005841s (num_starts 216; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005963s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005967s (num_starts 1; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005969s (num_starts 1; 0.0060s/start)
compute_sprel_relations.: 0.005981s (num_starts 213; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.006023s (num_starts 431; 0.0000s/start)
identify_address_taken_local_variables.: 0.006104s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-trivial.: 0.006145s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.006149s (num_starts 2; 0.0031s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.006177s (num_starts 216; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.006254s (num_starts 7; 0.0009s/start)
generate_aliasing_constraints_from_expr.: 0.006476s (num_starts 1340; 0.0000s/start)
determinize_value_expr_map.: 0.006556s (num_starts 5791; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.: 0.006559s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.006612s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;lb-signed;-trivial.: 0.006616s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.006618s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.006627s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;lb-signed.: 0.006635s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.006645s (num_starts 2; 0.0033s/start)
tfg::populate_loc_definedness.post_dfa.: 0.006727s (num_starts 214; 0.0000s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.006737s (num_starts 121; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.006804s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned;-trivial.: 0.006808s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.006811s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.006822s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned.: 0.006827s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.006839s (num_starts 2; 0.0034s/start)
propagate_sprels.: 0.006895s (num_starts 213; 0.0000s/start)
bv_const_ref_map2expr_map.: 0.007s (num_starts 167; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.007238s (num_starts 3; 0.0024s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.00734s (num_starts 431; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.00749s (num_starts 2; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned;-trivial.: 0.00749s (num_starts 2; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 0.007506s (num_starts 2; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned.: 0.007518s (num_starts 2; 0.0038s/start)
graph_with_guessing_sync_preds.: 0.007625s (num_starts 431; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.: 0.007786s (num_starts 3; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst-ineq-houdini-guess;-trivial.: 0.008632s (num_starts 2; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.008637s (num_starts 2; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.008658s (num_starts 2; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst-ineq-houdini-guess.: 0.008671s (num_starts 2; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.008769s (num_starts 4; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.008789s (num_starts 4; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.008888s (num_starts 4; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.008912s (num_starts 4; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009132s (num_starts 5; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.009154s (num_starts 5; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.009373s (num_starts 1; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;pred-type-unknown;-trivial.: 0.009376s (num_starts 1; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.009377s (num_starts 1; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;pred-type-unknown.: 0.009385s (num_starts 1; 0.0094s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.009444s (num_starts 56; 0.0002s/start)
graph_locs_add_all_specvars.: 0.009527s (num_starts 213; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.009713s (num_starts 56; 0.0002s/start)
graph_locs_add_exvregs_for_edge.: 0.010007s (num_starts 1829; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear;-trivial.: 0.010336s (num_starts 5; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.010343s (num_starts 5; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 0.010369s (num_starts 5; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear.: 0.010381s (num_starts 5; 0.0021s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.010402s (num_starts 6; 0.0017s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.01042s (num_starts 9; 0.0012s/start)
graph_locs_add_local_vars_for_edge.: 0.010483s (num_starts 1829; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.010525s (num_starts 4; 0.0026s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.010846s (num_starts 56; 0.0002s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.011075s (num_starts 5; 0.0022s/start)
get_lr_status_for_loc_ids.: 0.01116s (num_starts 742; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.011162s (num_starts 2546; 0.0000s/start)
lr_status_meet.: 0.011378s (num_starts 2569; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011379s (num_starts 6; 0.0019s/start)
cg_src_dst_tfg_copy.: 0.011416s (num_starts 2; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.011497s (num_starts 6; 0.0019s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-trivial.: 0.011565s (num_starts 9; 0.0013s/start)
graph_locs_add_all_exvregs.: 0.011727s (num_starts 213; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.011773s (num_starts 1838; 0.0000s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.011972s (num_starts 2; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.012012s (num_starts 4; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.012041s (num_starts 4; 0.0030s/start)
graph_locs_add_all_local_vars.: 0.012159s (num_starts 213; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012405s (num_starts 7; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.012439s (num_starts 7; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.012475s (num_starts 4; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear;-trivial.: 0.012488s (num_starts 4; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.012492s (num_starts 4; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.01251s (num_starts 4; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear.: 0.012522s (num_starts 4; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.012541s (num_starts 4; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.012883s (num_starts 6; 0.0021s/start)
expr_represents_llvm_undef.: 0.012904s (num_starts 3321; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.012986s (num_starts 6; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.012988s (num_starts 6; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.013097s (num_starts 6; 0.0022s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.0134s (num_starts 7; 0.0019s/start)
create_closure_matrix.: 0.013561s (num_starts 3467; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.014411s (num_starts 2869; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.014412s (num_starts 213; 0.0001s/start)
get_next_potential_correlations.: 0.014446s (num_starts 9; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.014736s (num_starts 8; 0.0018s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.014798s (num_starts 7; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.014899s (num_starts 8; 0.0019s/start)
get_sprel_map_pair_at_pc.: 0.015384s (num_starts 173; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear;-trivial.: 0.015883s (num_starts 8; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.015899s (num_starts 8; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.015931s (num_starts 6; 0.0027s/start)
tfg::get_aliasing_constraints_for_edge.: 0.016349s (num_starts 263; 0.0001s/start)
predicate_canonicalized.: 0.016353s (num_starts 167; 0.0001s/start)
gen_pred_from_coeff_row.simplify.: 0.017123s (num_starts 167; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.017235s (num_starts 7; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.017262s (num_starts 6; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear;-trivial.: 0.017359s (num_starts 5; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.017376s (num_starts 5; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.017412s (num_starts 6; 0.0029s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.017469s (num_starts 1407; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed;-trivial.: 0.019279s (num_starts 8; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.019464s (num_starts 10; 0.0019s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.02029s (num_starts 1838; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed;-trivial.: 0.020884s (num_starts 8; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed.: 0.020984s (num_starts 8; 0.0026s/start)
populate_locid2expr_map.: 0.021396s (num_starts 213; 0.0001s/start)
simplify_bv_add_atomic.: 0.02175s (num_starts 998; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.022471s (num_starts 1407; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-trivial.: 0.022567s (num_starts 31; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.022649s (num_starts 9; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.022806s (num_starts 9; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.023162s (num_starts 14; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.023232s (num_starts 14; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.023305s (num_starts 14; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.023358s (num_starts 14; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.023371s (num_starts 14; 0.0017s/start)
ldr_decompose_and_linear_solve.: 0.023388s (num_starts 97; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.023427s (num_starts 14; 0.0017s/start)
bv_linear_solve.: 0.024938s (num_starts 97; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.025048s (num_starts 3; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.02506s (num_starts 3; 0.0084s/start)
query:bv_solve.: 0.025513s (num_starts 97; 0.0003s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.026206s (num_starts 7; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.027364s (num_starts 16; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.027399s (num_starts 16; 0.0017s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.027483s (num_starts 7; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.027522s (num_starts 16; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.027646s (num_starts 16; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.027792s (num_starts 16; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.028723s (num_starts 11; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.028912s (num_starts 10; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.028972s (num_starts 10; 0.0029s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.cond%1%bbentry.inductive-invariants.: 0.029784s (num_starts 12; 0.0025s/start)
bv_solve_returning_intermediate_structures.: 0.030981s (num_starts 97; 0.0003s/start)
graph_to_stream.: 0.031809s (num_starts 4; 0.0080s/start)
graph_locs_add_all_indvars.: 0.033747s (num_starts 213; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.034256s (num_starts 1; 0.0343s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.034263s (num_starts 1; 0.0343s/start)
tfg::collect_assumes_around_edge.: 0.034284s (num_starts 3667; 0.0000s/start)
check_node_stability_after_CE_addition.: 0.034419s (num_starts 156; 0.0002s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.034423s (num_starts 4; 0.0086s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.034424s (num_starts 4; 0.0086s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.034514s (num_starts 4; 0.0086s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.034538s (num_starts 4; 0.0086s/start)
bvsolve_cache_query.miss1.: 0.035626s (num_starts 97; 0.0004s/start)
bvsolve_cache_query.: 0.036715s (num_starts 97; 0.0004s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.036984s (num_starts 5; 0.0074s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.037474s (num_starts 12; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.037787s (num_starts 12; 0.0031s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.038349s (num_starts 21; 0.0018s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.038699s (num_starts 21; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.038794s (num_starts 2; 0.0194s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess.: 0.038801s (num_starts 2; 0.0194s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.039113s (num_starts 1844; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.039355s (num_starts 1; 0.0394s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.039363s (num_starts 1; 0.0394s/start)
counter_example_falsifies_preds.: 0.039718s (num_starts 119; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.040103s (num_starts 1; 0.0401s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.04012s (num_starts 1; 0.0401s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.040127s (num_starts 1; 0.0401s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.040137s (num_starts 1; 0.0401s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;-dst-edgecond-implies-src-edgecond.: 0.040142s (num_starts 1; 0.0401s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.040152s (num_starts 1; 0.0402s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.040242s (num_starts 644; 0.0001s/start)
create_sp_version_relations_lattice_at_pc.: 0.04091s (num_starts 3467; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.041595s (num_starts 619; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-trivial.: 0.04237s (num_starts 12; 0.0035s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.042454s (num_starts 11; 0.0039s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.042687s (num_starts 22; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.043202s (num_starts 1; 0.0432s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.04321s (num_starts 1; 0.0432s/start)
populate_simplified_to_state.: 0.04365s (num_starts 214; 0.0002s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.044038s (num_starts 3; 0.0147s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.045225s (num_starts 1; 0.0452s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.045234s (num_starts 1; 0.0452s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.046514s (num_starts 18; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.046938s (num_starts 28; 0.0017s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.047059s (num_starts 216; 0.0002s/start)
solve_for_bv_points.: 0.047405s (num_starts 97; 0.0005s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.047424s (num_starts 917; 0.0001s/start)
pth_collect_simplified_preds_using_atom_func.: 0.048373s (num_starts 858; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.049191s (num_starts 2; 0.0246s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess.: 0.049198s (num_starts 2; 0.0246s/start)
gen_pred_from_coeff_row.: 0.049887s (num_starts 167; 0.0003s/start)
populate_dominator_and_postdominator_relations.: 0.050625s (num_starts 213; 0.0002s/start)
compute_preds_for_bv_points.: 0.05092s (num_starts 40; 0.0013s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.051188s (num_starts 64; 0.0008s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.051311s (num_starts 1; 0.0513s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.051313s (num_starts 1; 0.0513s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.05132s (num_starts 1; 0.0513s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess;-trivial.: 0.052165s (num_starts 24; 0.0022s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.: 0.052182s (num_starts 1; 0.0522s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.05448s (num_starts 51; 0.0011s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.054653s (num_starts 51; 0.0011s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.055422s (num_starts 3; 0.0185s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 0.056265s (num_starts 1; 0.0563s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.056266s (num_starts 1; 0.0563s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown;-all-proof-path-optimizations.: 0.056268s (num_starts 1; 0.0563s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.056271s (num_starts 1; 0.0563s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 0.056277s (num_starts 1; 0.0563s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown.: 0.056281s (num_starts 1; 0.0563s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 0.056288s (num_starts 1; 0.0563s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.057096s (num_starts 33; 0.0017s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.058329s (num_starts 97; 0.0006s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.05946s (num_starts 53; 0.0011s/start)
get_unrolled_paths_from.: 0.060617s (num_starts 55; 0.0011s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.061298s (num_starts 2471; 0.0000s/start)
collect_aliasing_constraints_around_path_helper.: 0.062909s (num_starts 289; 0.0002s/start)
counter_example_satisfies_preds.: 0.06368s (num_starts 936; 0.0001s/start)
collect_aliasing_constraints_around_path.: 0.064825s (num_starts 187; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-trivial.: 0.064889s (num_starts 19; 0.0034s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.065852s (num_starts 763; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.068896s (num_starts 2479; 0.0000s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.070923s (num_starts 216; 0.0003s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.072554s (num_starts 14; 0.0052s/start)
collect_assumes_around_path_helper.: 0.072619s (num_starts 502; 0.0001s/start)
graph_with_paths::collect_assumes_around_path.: 0.074226s (num_starts 502; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.074981s (num_starts 1407; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079449s (num_starts 2; 0.0397s/start)
tfg::populate_loc_definedness.before_solve.: 0.080066s (num_starts 214; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 0.082278s (num_starts 38; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082534s (num_starts 2; 0.0413s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.084073s (num_starts 3; 0.0280s/start)
lhs_set_sort.: 0.085583s (num_starts 173; 0.0005s/start)
expr_linear_relation_holds::visit.var.: 0.086846s (num_starts 3357; 0.0000s/start)
query:convert_from_z3.: 0.087582s (num_starts 2578; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.088605s (num_starts 3; 0.0295s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08878s (num_starts 2; 0.0444s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.092448s (num_starts 4; 0.0231s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094206s (num_starts 1; 0.0942s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094216s (num_starts 1; 0.0942s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094229s (num_starts 1; 0.0942s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094238s (num_starts 1; 0.0942s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.094247s (num_starts 1; 0.0942s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.094259s (num_starts 1; 0.0943s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.09441s (num_starts 3857; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.096473s (num_starts 214; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities..: 0.097047s (num_starts 4; 0.0243s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.097063s (num_starts 4; 0.0243s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry).: 0.098943s (num_starts 13; 0.0076s/start)
compute_ssa_vars_renaming_map.: 0.099043s (num_starts 213; 0.0005s/start)
counter_example_evaluate_preds.: 0.100887s (num_starts 1055; 0.0001s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.102168s (num_starts 741; 0.0001s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.102205s (num_starts 486; 0.0002s/start)
tfg::populate_loc_definedness.: 0.102993s (num_starts 214; 0.0005s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.body%1%fcallStart.inductive-invariants.: 0.103245s (num_starts 8; 0.0129s/start)
graph_visit_exprs_and_keys.: 0.103813s (num_starts 213; 0.0005s/start)
populate_transitive_closure.: 0.104711s (num_starts 673; 0.0002s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.body%1%fcallEnd.inductive-invariants.: 0.10513s (num_starts 3; 0.0350s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.105444s (num_starts 1; 0.1054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.105465s (num_starts 1; 0.1055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallEnd;(L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.105476s (num_starts 1; 0.1055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallEnd;(L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.105493s (num_starts 1; 0.1055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.105513s (num_starts 1; 0.1055s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallEnd.: 0.105861s (num_starts 1; 0.1059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess.: 0.107197s (num_starts 3; 0.0357s/start)
graph_visit_exprs.: 0.107954s (num_starts 425; 0.0003s/start)
query:convert_to_z3.: 0.108185s (num_starts 2578; 0.0000s/start)
populate_locs_potentially_modified_on_edge.: 0.108219s (num_starts 214; 0.0005s/start)
populate_simplified_assets.: 0.112028s (num_starts 428; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.116943s (num_starts 2; 0.0585s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.116964s (num_starts 2; 0.0585s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.body%1%fcallStart.inductive-invariants.: 0.120404s (num_starts 10; 0.0120s/start)
compute_expr_eqclasses_at_pc.: 0.122504s (num_starts 7; 0.0175s/start)
expr_substitute_using_available_exprs_submap.: 0.122834s (num_starts 1328; 0.0001s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.125011s (num_starts 10; 0.0125s/start)
cg_add_node.: 0.12714s (num_starts 10; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.13848s (num_starts 14; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146141s (num_starts 1; 0.1461s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.14615s (num_starts 1; 0.1462s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.146166s (num_starts 1; 0.1462s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;-dst-edgecond-implies-src-edgecond.: 0.146172s (num_starts 1; 0.1462s/start)
create_new_corr_graph_edge.new_node.: 0.149728s (num_starts 9; 0.0166s/start)
create_new_corr_graph_edge.: 0.150393s (num_starts 12; 0.0125s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.150564s (num_starts 2546; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.157839s (num_starts 22; 0.0072s/start)
compute_vars_reaching_definitions.: 0.158171s (num_starts 213; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.166927s (num_starts 3; 0.0556s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.166942s (num_starts 3; 0.0556s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.167791s (num_starts 20; 0.0084s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-trivial.: 0.168143s (num_starts 4; 0.0420s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.173202s (num_starts 7; 0.0247s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.176084s (num_starts 8; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.176187s (num_starts 8; 0.0220s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.178068s (num_starts 2546; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.180643s (num_starts 9; 0.0201s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.182055s (num_starts 1; 0.1821s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.182064s (num_starts 1; 0.1821s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.184947s (num_starts 25; 0.0074s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.190141s (num_starts 1; 0.1901s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.190147s (num_starts 1; 0.1901s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.19015s (num_starts 1; 0.1902s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.190158s (num_starts 1; 0.1902s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;false-predicate.: 0.190162s (num_starts 1; 0.1902s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.190171s (num_starts 1; 0.1902s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-all-proof-path-optimizations.: 0.190614s (num_starts 1; 0.1906s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 0.190619s (num_starts 1; 0.1906s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-all-proof-path-optimizations.: 0.190628s (num_starts 1; 0.1906s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 0.190634s (num_starts 1; 0.1906s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown.: 0.190648s (num_starts 1; 0.1906s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown.: 0.190651s (num_starts 1; 0.1907s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown.: 0.190658s (num_starts 1; 0.1907s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.194376s (num_starts 5; 0.0389s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.194808s (num_starts 486; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned;-trivial.: 0.196519s (num_starts 21; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198168s (num_starts 1; 0.1982s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198168s (num_starts 1; 0.1982s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.198177s (num_starts 1; 0.1982s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;dst_edge_composition_proves_false.: 0.198182s (num_starts 1; 0.1982s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198377s (num_starts 1; 0.1984s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198383s (num_starts 1; 0.1984s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.198387s (num_starts 1; 0.1984s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.19892s (num_starts 2546; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.20191s (num_starts 5; 0.0404s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed.: 0.201924s (num_starts 5; 0.0404s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.201953s (num_starts 5; 0.0404s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.204872s (num_starts 2546; 0.0001s/start)
avail_exprs_create_submap.: 0.20554s (num_starts 7638; 0.0000s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-trivial.: 0.208493s (num_starts 112; 0.0019s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21102s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.211024s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.211033s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.211039s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.211048s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;pred-type-unknown.: 0.211056s (num_starts 1; 0.2111s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.21107s (num_starts 1; 0.2111s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.211078s (num_starts 1; 0.2111s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.212289s (num_starts 1; 0.2123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21229s (num_starts 1; 0.2123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.212298s (num_starts 1; 0.2123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst_edge_composition_proves_false.: 0.212303s (num_starts 1; 0.2123s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.218245s (num_starts 4; 0.0546s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.21825s (num_starts 4; 0.0546s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.221084s (num_starts 214; 0.0010s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.223097s (num_starts 35; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228289s (num_starts 1; 0.2283s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228298s (num_starts 1; 0.2283s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.229298s (num_starts 1; 0.2293s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.229302s (num_starts 1; 0.2293s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.229307s (num_starts 1; 0.2293s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.229309s (num_starts 1; 0.2293s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.229323s (num_starts 1; 0.2293s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst_edge_composition_proves_false.: 0.229329s (num_starts 1; 0.2293s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.229341s (num_starts 1; 0.2293s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(epsilon).: 0.229345s (num_starts 1; 0.2293s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23185s (num_starts 1; 0.2319s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.231855s (num_starts 1; 0.2319s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23186s (num_starts 1; 0.2319s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.231865s (num_starts 1; 0.2319s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.231873s (num_starts 1; 0.2319s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list;dst_edge_composition_proves_false.: 0.231875s (num_starts 1; 0.2319s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.231881s (num_starts 1; 0.2319s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.232231s (num_starts 2; 0.1161s/start)
graph_identify_back_edges.: 0.236318s (num_starts 1944; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.243646s (num_starts 2; 0.1218s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.246324s (num_starts 1; 0.2463s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24633s (num_starts 1; 0.2463s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.246333s (num_starts 1; 0.2463s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.250215s (num_starts 5; 0.0500s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned.: 0.250232s (num_starts 5; 0.0500s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.250263s (num_starts 5; 0.0501s/start)
check_wfconds_on_edge.L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.255076s (num_starts 1; 0.2551s/start)
graph_identify_natural_loops.: 0.255629s (num_starts 1944; 0.0001s/start)
find_dominators.: 0.25636s (num_starts 2370; 0.0001s/start)
compute_z3_expr.: 0.262717s (num_starts 2757; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.262818s (num_starts 2; 0.1314s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.262867s (num_starts 2; 0.1314s/start)
evaluate_function_call.: 0.26975s (num_starts 48; 0.0056s/start)
populate_branch_affecting_locs.: 0.27728s (num_starts 214; 0.0013s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.277606s (num_starts 1; 0.2776s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.279904s (num_starts 3; 0.0933s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.279914s (num_starts 3; 0.0933s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281589s (num_starts 1; 0.2816s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281597s (num_starts 1; 0.2816s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281599s (num_starts 1; 0.2816s/start)
query:simplify-z3.: 0.282982s (num_starts 5213; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 0.283126s (num_starts 3; 0.0944s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned.: 0.283135s (num_starts 3; 0.0944s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.283733s (num_starts 1; 0.2837s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.283742s (num_starts 1; 0.2837s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.283746s (num_starts 1; 0.2837s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate.: 0.283765s (num_starts 1; 0.2838s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;false-predicate.: 0.283771s (num_starts 1; 0.2838s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate.: 0.283781s (num_starts 1; 0.2838s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 0.285954s (num_starts 7; 0.0409s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 0.291395s (num_starts 1; 0.2914s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-all-proof-path-optimizations.: 0.291397s (num_starts 1; 0.2914s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-all-proof-path-optimizations.: 0.291398s (num_starts 1; 0.2914s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 0.291399s (num_starts 1; 0.2914s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown.: 0.29141s (num_starts 1; 0.2914s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown.: 0.291417s (num_starts 1; 0.2914s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown.: 0.291432s (num_starts 1; 0.2914s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.292974s (num_starts 10; 0.0293s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.29499s (num_starts 3; 0.0983s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.295876s (num_starts 11; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear.: 0.29591s (num_starts 11; 0.0269s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.body%1%fcallStart.: 0.304387s (num_starts 3; 0.1015s/start)
guarded_predicate_set_and.: 0.305616s (num_starts 216; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.310161s (num_starts 3; 0.1034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.31023s (num_starts 3; 0.1034s/start)
graph_ec_apply_trans_funs_helper.0.: 0.310592s (num_starts 1164; 0.0003s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.313337s (num_starts 1; 0.3133s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.31334s (num_starts 1; 0.3133s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.313344s (num_starts 1; 0.3133s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.313346s (num_starts 1; 0.3133s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.313361s (num_starts 1; 0.3134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst_edge_composition_proves_false.: 0.313365s (num_starts 1; 0.3134s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.313373s (num_starts 1; 0.3134s/start)
put_smtlib_string_in_file.: 0.314257s (num_starts 358; 0.0009s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon).: 0.314614s (num_starts 2; 0.1573s/start)
graph_ec_apply_trans_funs_helper.: 0.316429s (num_starts 1172; 0.0003s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.319471s (num_starts 1172; 0.0003s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.320929s (num_starts 1156; 0.0003s/start)
computeWP_for_pred_across_ec.: 0.324659s (num_starts 1156; 0.0003s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.326023s (num_starts 3; 0.1087s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.329066s (num_starts 1; 0.3291s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.329068s (num_starts 1; 0.3291s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.32908s (num_starts 1; 0.3291s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;dst_edge_composition_proves_false.: 0.329084s (num_starts 1; 0.3291s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.330395s (num_starts 24; 0.0138s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.332151s (num_starts 1; 0.3322s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.332158s (num_starts 1; 0.3322s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.33216s (num_starts 1; 0.3322s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate.: 0.332176s (num_starts 1; 0.3322s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;false-predicate.: 0.332184s (num_starts 1; 0.3322s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate.: 0.332193s (num_starts 1; 0.3322s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.357763s (num_starts 1; 0.3578s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.357775s (num_starts 1; 0.3578s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 0.360759s (num_starts 5; 0.0722s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 0.362902s (num_starts 8; 0.0454s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.368623s (num_starts 5; 0.0737s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.369265s (num_starts 486; 0.0008s/start)
edge_composition_apply_trans_funs_on_pred.: 0.373449s (num_starts 431; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 0.374235s (num_starts 1; 0.3742s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.374739s (num_starts 2; 0.1874s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallEnd;(L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.374762s (num_starts 2; 0.1874s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.body%1%fcallEnd;(L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.374788s (num_starts 2; 0.1874s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry);linear.: 0.374826s (num_starts 2; 0.1874s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 0.380433s (num_starts 1; 0.3804s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.381707s (num_starts 2; 0.1909s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.381729s (num_starts 2; 0.1909s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.381745s (num_starts 2; 0.1909s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear.: 0.383606s (num_starts 5; 0.0767s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear.: 0.383622s (num_starts 5; 0.0767s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear.: 0.383651s (num_starts 5; 0.0767s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.388482s (num_starts 15; 0.0259s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.: 0.390331s (num_starts 1; 0.3903s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear;-trivial.: 0.394379s (num_starts 58; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 0.396946s (num_starts 10; 0.0397s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 0.397709s (num_starts 8; 0.0497s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-trivial.: 0.405995s (num_starts 6; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-trivial.: 0.406043s (num_starts 6; 0.0677s/start)
tfg_preprocess.dst.ind.make_list.: 0.406122s (num_starts 211; 0.0019s/start)
tfg::tfg_preprocess.: 0.40675s (num_starts 211; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410306s (num_starts 2; 0.2052s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410448s (num_starts 2; 0.2052s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.410503s (num_starts 2; 0.2053s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.: 0.410595s (num_starts 3; 0.1369s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.412512s (num_starts 1; 0.4125s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.412515s (num_starts 1; 0.4125s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.412529s (num_starts 1; 0.4125s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond.: 0.412534s (num_starts 1; 0.4125s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.42186s (num_starts 1; 0.4219s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.421867s (num_starts 1; 0.4219s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.421871s (num_starts 1; 0.4219s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate.: 0.42189s (num_starts 1; 0.4219s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;false-predicate.: 0.421893s (num_starts 1; 0.4219s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate.: 0.421901s (num_starts 1; 0.4219s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.425177s (num_starts 1; 0.4252s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.425186s (num_starts 1; 0.4252s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.42519s (num_starts 1; 0.4252s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned;-trivial.: 0.429163s (num_starts 20; 0.0215s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.429194s (num_starts 1; 0.4292s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.429197s (num_starts 1; 0.4292s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.429207s (num_starts 1; 0.4292s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst_edge_composition_proves_false.: 0.429211s (num_starts 1; 0.4292s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.429525s (num_starts 3; 0.1432s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned.: 0.429534s (num_starts 3; 0.1432s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.429859s (num_starts 5; 0.0860s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.429938s (num_starts 5; 0.0860s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.437647s (num_starts 28; 0.0156s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.437836s (num_starts 3; 0.1459s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-trivial.: 0.437854s (num_starts 3; 0.1460s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.437863s (num_starts 3; 0.1460s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.449984s (num_starts 1; 0.4500s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.449991s (num_starts 1; 0.4500s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.449993s (num_starts 1; 0.4500s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate.: 0.450009s (num_starts 1; 0.4500s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;false-predicate.: 0.450015s (num_starts 1; 0.4500s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate.: 0.450022s (num_starts 1; 0.4500s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.450536s (num_starts 3; 0.1502s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon).: 0.450668s (num_starts 3; 0.1502s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.452432s (num_starts 5; 0.0905s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.452891s (num_starts 17; 0.0266s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.457031s (num_starts 90; 0.0051s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.462234s (num_starts 173; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.476955s (num_starts 1; 0.4770s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.476964s (num_starts 1; 0.4770s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.478601s (num_starts 27; 0.0177s/start)
tfg_relax_pointsto_vals_on_edge.: 0.480081s (num_starts 67; 0.0072s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.480163s (num_starts 3; 0.1601s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry).: 0.480368s (num_starts 3; 0.1601s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallEnd.: 0.480814s (num_starts 1; 0.4808s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.483439s (num_starts 14; 0.0345s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 0.483519s (num_starts 10; 0.0484s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.487524s (num_starts 5; 0.0975s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.487578s (num_starts 5; 0.0975s/start)
propagate_nodece_across_edge.: 0.490819s (num_starts 64; 0.0077s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 0.491183s (num_starts 12; 0.0409s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.493054s (num_starts 7; 0.0704s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.506481s (num_starts 4; 0.1266s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.: 0.512146s (num_starts 3; 0.1707s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.516909s (num_starts 2546; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.52282s (num_starts 4; 0.1307s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.522858s (num_starts 4; 0.1307s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.523833s (num_starts 27; 0.0194s/start)
do_ssa_transformation.: 0.553552s (num_starts 213; 0.0026s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.567149s (num_starts 5; 0.1134s/start)
collect_inductive_preds_around_path.: 0.580098s (num_starts 431; 0.0013s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.597312s (num_starts 173; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.604274s (num_starts 2; 0.3021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.604287s (num_starts 2; 0.3021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 0.62174s (num_starts 7; 0.0888s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear.: 0.621765s (num_starts 7; 0.0888s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.: 0.633549s (num_starts 1; 0.6335s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.638319s (num_starts 45; 0.0142s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.639611s (num_starts 149; 0.0043s/start)
compute_regions.: 0.640001s (num_starts 1944; 0.0003s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.652735s (num_starts 5; 0.1305s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 0.679556s (num_starts 4; 0.1699s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.679569s (num_starts 4; 0.1699s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-all-proof-path-optimizations.: 0.679586s (num_starts 4; 0.1699s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.6796s (num_starts 4; 0.1699s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.697694s (num_starts 1; 0.6977s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.697696s (num_starts 1; 0.6977s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.697702s (num_starts 1; 0.6977s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.697703s (num_starts 1; 0.6977s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.697716s (num_starts 1; 0.6977s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst_edge_composition_proves_false.: 0.697723s (num_starts 1; 0.6977s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.697735s (num_starts 1; 0.6977s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(epsilon).: 0.697741s (num_starts 1; 0.6977s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond.: 0.724895s (num_starts 8; 0.0906s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.732525s (num_starts 3; 0.2442s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;linear.: 0.735577s (num_starts 7; 0.1051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.739521s (num_starts 3; 0.2465s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.739543s (num_starts 3; 0.2465s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 0.739603s (num_starts 3; 0.2465s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned.: 0.739614s (num_starts 3; 0.2465s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.758248s (num_starts 2; 0.3791s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.75831s (num_starts 2; 0.3792s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.769495s (num_starts 6; 0.1282s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.769641s (num_starts 6; 0.1283s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.769746s (num_starts 6; 0.1283s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.76987s (num_starts 6; 0.1283s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.775185s (num_starts 1; 0.7752s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.775191s (num_starts 1; 0.7752s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.775194s (num_starts 1; 0.7752s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.775209s (num_starts 1; 0.7752s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst_edge_composition_proves_false.: 0.775213s (num_starts 1; 0.7752s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.775221s (num_starts 1; 0.7752s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.802238s (num_starts 4; 0.2006s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.808838s (num_starts 5; 0.1618s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.814804s (num_starts 7; 0.1164s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.816255s (num_starts 1; 0.8163s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.81626s (num_starts 1; 0.8163s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.816273s (num_starts 1; 0.8163s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.81629s (num_starts 1; 0.8163s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.82982s (num_starts 1726; 0.0005s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.833312s (num_starts 1726; 0.0005s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.848988s (num_starts 8; 0.1061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.853766s (num_starts 5; 0.1708s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.cond%1%bbentry.: 0.864108s (num_starts 1; 0.8641s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess.: 0.867468s (num_starts 31; 0.0280s/start)
compute_lr_status_for_expr.: 0.872973s (num_starts 2822; 0.0003s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-trivial.: 0.876235s (num_starts 79; 0.0111s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.897184s (num_starts 5; 0.1794s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.900091s (num_starts 4; 0.2250s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.900135s (num_starts 4; 0.2250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.900154s (num_starts 4; 0.2250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned.: 0.900223s (num_starts 4; 0.2251s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-unsigned.: 0.900249s (num_starts 4; 0.2251s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned.: 0.900288s (num_starts 4; 0.2251s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.902366s (num_starts 4; 0.2256s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.902465s (num_starts 4; 0.2256s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.90455s (num_starts 5; 0.1809s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.923066s (num_starts 3; 0.3077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 0.929s (num_starts 10; 0.0929s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 0.932319s (num_starts 46; 0.0203s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.941782s (num_starts 5; 0.1884s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned.: 0.952322s (num_starts 24; 0.0397s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.969076s (num_starts 1; 0.9691s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 0.969079s (num_starts 1; 0.9691s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 0.969083s (num_starts 1; 0.9691s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.970685s (num_starts 751; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 1.01952s (num_starts 6; 0.1699s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 1.01963s (num_starts 6; 0.1699s/start)
compute_new_lr_status_on_locs.: 1.02376s (num_starts 2546; 0.0004s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.03798s (num_starts 3; 0.3460s/start)
apply_mask_and_overlay_array_constant.: 1.03962s (num_starts 751; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess.: 1.08058s (num_starts 19; 0.0569s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09039s (num_starts 7; 0.1558s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1052s (num_starts 7; 0.1579s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd).: 1.13714s (num_starts 35; 0.0325s/start)
corr_graph::add_edge().: 1.17181s (num_starts 12; 0.0977s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon).: 1.20644s (num_starts 7; 0.1723s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.body%1%fcallEnd.inductive-invariants.: 1.21438s (num_starts 16; 0.0759s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 1.24892s (num_starts 29; 0.0431s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.26224s (num_starts 7; 0.1803s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.27359s (num_starts 6; 0.2123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.29322s (num_starts 2; 0.6466s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed.: 1.31263s (num_starts 10; 0.1313s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 1.32381s (num_starts 11; 0.1203s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 1.32624s (num_starts 12; 0.1105s/start)
corr_graph_add_correlation.: 1.32669s (num_starts 12; 0.1106s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.32696s (num_starts 2; 0.6635s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.32699s (num_starts 2; 0.6635s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 1.34581s (num_starts 8; 0.1682s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown.: 1.34583s (num_starts 8; 0.1682s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 1.3693s (num_starts 12; 0.1141s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 1.3741s (num_starts 30; 0.0458s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 1.3847s (num_starts 35; 0.0396s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 1.44161s (num_starts 26; 0.0554s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 1.46902s (num_starts 7; 0.2099s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.49159s (num_starts 3; 0.4972s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 1.52797s (num_starts 9; 0.1698s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 1.53471s (num_starts 25; 0.0614s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.57568s (num_starts 14; 0.1125s/start)
check_wfconds_on_edge.: 1.61343s (num_starts 29; 0.0556s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.6139s (num_starts 7; 0.2306s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 1.61686s (num_starts 3; 0.5390s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.65465s (num_starts 7; 0.2364s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 1.66878s (num_starts 13; 0.1284s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.67788s (num_starts 5; 0.3356s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 1.68362s (num_starts 6; 0.2806s/start)
add_fresh_counterexample_at_pc_and_propagate.: 1.69262s (num_starts 81; 0.0209s/start)
decide_hoare_triple_with_alias_cons.ce.: 1.69466s (num_starts 372; 0.0046s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 1.70168s (num_starts 10; 0.1702s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon).: 1.70638s (num_starts 8; 0.2133s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-all-proof-path-optimizations.: 1.72373s (num_starts 3; 0.5746s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 1.76625s (num_starts 266; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.87768s (num_starts 8; 0.2347s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 1.9091s (num_starts 18843; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart).: 1.91772s (num_starts 17; 0.1128s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 2.024s (num_starts 5; 0.4048s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 2.0637s (num_starts 33; 0.0625s/start)
check_equivalence_proof.: 2.14722s (num_starts 1; 2.1472s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.17398s (num_starts 4; 0.5435s/start)
decide_hoare_triple_helper;-trivial.: 2.202s (num_starts 291; 0.0076s/start)
counter_example_translate_on_edge_composition_helper.: 2.42003s (num_starts 882; 0.0027s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry).: 2.73533s (num_starts 45; 0.0608s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-all-proof-path-optimizations.: 2.7794s (num_starts 9; 0.3088s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 2.77943s (num_starts 9; 0.3088s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 2.78517s (num_starts 11; 0.2532s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown.: 2.78521s (num_starts 11; 0.2532s/start)
ce_reconcile_sorts_and_values.: 2.86173s (num_starts 212; 0.0135s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.86917s (num_starts 13; 0.2207s/start)
liveness_analysis_conservative::xfer_and_meet.: 2.96439s (num_starts 1625; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.01616s (num_starts 6; 0.5027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.01627s (num_starts 6; 0.5027s/start)
populate_loc_liveness.: 3.06273s (num_starts 214; 0.0143s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-all-proof-path-optimizations.: 3.15974s (num_starts 10; 0.3160s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 3.15977s (num_starts 10; 0.3160s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 3.18305s (num_starts 19; 0.1675s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.19828s (num_starts 7; 0.4569s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 3.30777s (num_starts 41; 0.0807s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 3.33669s (num_starts 5; 0.6673s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-all-proof-path-optimizations.: 3.39963s (num_starts 11; 0.3091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 3.39967s (num_starts 11; 0.3091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 3.40596s (num_starts 13; 0.2620s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown.: 3.406s (num_starts 13; 0.2620s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.4161s (num_starts 9; 0.3796s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 3.41634s (num_starts 9; 0.3796s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.43676s (num_starts 17; 0.2022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.43713s (num_starts 17; 0.2022s/start)
parse_z3_model.: 3.43739s (num_starts 210; 0.0164s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 3.46014s (num_starts 55; 0.0629s/start)
read_counter_examples_from_channel.: 3.47667s (num_starts 108; 0.0322s/start)
check_preds_on_edge_compositions.: 3.50551s (num_starts 34; 0.1031s/start)
decide_hoare_triple.: 3.52564s (num_starts 13; 0.2712s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 3.53073s (num_starts 5; 0.7061s/start)
dst_edge_composition_proves_false.: 3.58691s (num_starts 9; 0.3985s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 3.61369s (num_starts 25; 0.1445s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 3.61409s (num_starts 25; 0.1446s/start)
get_next_dst_edge_composition_to_correlate.: 3.62884s (num_starts 10; 0.3629s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.63753s (num_starts 9; 0.4042s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 3.65252s (num_starts 5; 0.7305s/start)
tfg_postprocess_after_pointsto_analysis.: 3.71039s (num_starts 213; 0.0174s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-all-proof-path-optimizations.: 3.77374s (num_starts 12; 0.3145s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 3.77379s (num_starts 12; 0.3145s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 3.8031s (num_starts 23; 0.1654s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.98546s (num_starts 7; 0.5694s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.98563s (num_starts 7; 0.5694s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 4.26059s (num_starts 7; 0.6087s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.37688s (num_starts 20; 0.2188s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 4.61012s (num_starts 2479; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown.: 4.98739s (num_starts 29; 0.1720s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 5.25994s (num_starts 2479; 0.0021s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 5.66826s (num_starts 20250; 0.0003s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 5.68569s (num_starts 18843; 0.0003s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 6.01267s (num_starts 18843; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.12628s (num_starts 27; 0.2269s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd).: 6.15936s (num_starts 128; 0.0481s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear.: 6.52218s (num_starts 85; 0.0767s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.7069s (num_starts 7; 0.9581s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.70695s (num_starts 7; 0.9581s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 6.70706s (num_starts 7; 0.9582s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 6.70715s (num_starts 7; 0.9582s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.01714s (num_starts 10; 0.7017s/start)
expr_do_simplify_using_lhs_set_and_precond.: 7.19838s (num_starts 3867; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned.: 7.21413s (num_starts 31; 0.2327s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.26342s (num_starts 11; 0.6603s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 7.48745s (num_starts 46; 0.1628s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 7.76806s (num_starts 10; 0.7768s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.12445s (num_starts 37; 0.2196s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart).: 8.41689s (num_starts 109; 0.0772s/start)
decide_hoare_triple_helper;per-query-type;linear.: 8.58448s (num_starts 127; 0.0676s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-all-proof-path-optimizations.: 9.12055s (num_starts 30; 0.3040s/start)
decide_hoare_triple_helper;-all-proof-path-optimizations.: 9.12215s (num_starts 30; 0.3041s/start)
ftmap_run_pointsto_analysis.: 9.31018s (num_starts 213; 0.0437s/start)
tfg_run_pointsto_analysis.: 9.33052s (num_starts 213; 0.0438s/start)
tfg_populate_structs_after_ssa_construction.: 9.74518s (num_starts 213; 0.0458s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 10.4814s (num_starts 213; 0.0492s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 13.2835s (num_starts 66; 0.2013s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.6477s (num_starts 41; 0.3817s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry).: 16.913s (num_starts 52; 0.3252s/start)
query:smt.: 19.9964s (num_starts 179; 0.1117s/start)
spawn_smt_query.: 23.4756s (num_starts 179; 0.1311s/start)
solver_provable.: 27.5674s (num_starts 216; 0.1276s/start)
solver_satisfiable-cache-miss.: 27.6081s (num_starts 179; 0.1542s/start)
solver_satisfiable.: 27.6102s (num_starts 217; 0.1272s/start)
expr_is_provable.: 27.6911s (num_starts 216; 0.1282s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 27.6969s (num_starts 216; 0.1282s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 27.7092s (num_starts 216; 0.1283s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 27.7204s (num_starts 216; 0.1283s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 28.0437s (num_starts 216; 0.1298s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 28.0669s (num_starts 216; 0.1299s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 28.0708s (num_starts 216; 0.1300s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 31.6247s (num_starts 110; 0.2875s/start)
update_invariant_state_for_edges.: 39.8017s (num_starts 13; 3.0617s/start)
cg_check_new_cg_ec.: 39.842s (num_starts 13; 3.0648s/start)
correl_entry_apply.: 39.8426s (num_starts 13; 3.0648s/start)
is_expr_equal_using_lhs_set_and_precond.: 40.5434s (num_starts 173; 0.2344s/start)
prove.: 40.5455s (num_starts 173; 0.2344s/start)
prove_spawn_and_join_helper.: 40.5466s (num_starts 173; 0.2344s/start)
prove_spawn_and_join.: 41.5979s (num_starts 173; 0.2405s/start)
prove_wrapper.proof_query_not_trivial.: 41.6283s (num_starts 173; 0.2406s/start)
prove_wrapper.: 41.8364s (num_starts 431; 0.0971s/start)
decide_hoare_triple_check_ub.: 42.2382s (num_starts 431; 0.0980s/start)
decide_hoare_triple_helper.: 42.9678s (num_starts 431; 0.0997s/start)
expandProductCFG.: 43.4871s (num_starts 18; 2.4159s/start)
decide_hoare_triple_with_alias_cons.: 44.6657s (num_starts 431; 0.1036s/start)
bestFirstSearch.: 44.9666s (num_starts 1; 44.9666s/start)
Time taken for equivalence check.: 47.128s (num_starts 1; 47.1280s/start)

counters:
# of Paths Prunned through CE propagation.: 1
# of assume sat failures for undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d.: 8
# of assume sat failures for undef-behavioursome.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry.: 34
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 3
# of paths enumerated.: 24
# of paths expanded.: 13
# of queries to linear solver.: 97
# of smt-solver-queries.: 179
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd-src_ecs.: 1
Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd-src_to_pcs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart-src_ecs.: 1
Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart-src_to_pcs.: 1
num-backtrackings.: 6
removed-siblings.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallEnd.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallEnd.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 5
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 5
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallEnd.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallEnd.prove_queries.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 4
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 16
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 9
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 11
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 2
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 2
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 2
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 6
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 6
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 20
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 13
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 16
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 11
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 6
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 4
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 7
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 15
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 12
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 9
smt-queries-cache-hits.: 38
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 210
total-correlation-possibilities.: 13
total-correlation-possibilities-mod-lsprels.: 13
total-correlations-explored.: 14

flags:
dst-aloc.: 0
dst-edges.: 9
dst-nodes.: 9
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.body%1%fcallEnd.: 3
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.body%1%fcallStart.: 5
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 12
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.body%1%fcallEnd.: 23
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.body%1%fcallStart.: 20
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 19
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 5
final-CG-num-invariants.: 32
final-CG-super-edges.: 0
src-edges.: 6
src-nodes.: 6
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 35.71
final-CG-time-to-total-time-ratio.: 0.79
query-time-to-total-time-ratio.: 0.43

Context stats:
exprs: count: 172223
sorts: count: 16518
num_proof_queries: 173
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	62859
	        hit ratio:	0.943986
m_simplify_solver:
	----------- total:	10906
	        hit ratio:	0.758115
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	8839
	        hit ratio:	0.80801
m_z3_solver_substitution:
	----------- total:	2635
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	2638
	        hit ratio:	0
m_is_expr_not_equal_syntactic:
	----------- total:	256
	        hit ratio:	0.996094
m_expr_size:
	----------- total:	24848
	        hit ratio:	0.888925
m_contains_only_constants_or_sp_versions:
	----------- total:	1546
	        hit ratio:	0.702458
m_expr_evaluates_to_constant_visitor:
	----------- total:	70779
	        hit ratio:	0.723887
m_sort_dfa_canonicalize:
	----------- total:	383693
	        hit ratio:	0.978618
m_expr_convert_to_iexpr:
	----------- total:	8191
	        hit ratio:	0.702967

z3_solver expr_query_cache entry size: 179
	----------- total:	217
	             hits:	38
	        hit ratio:	0.175115
histogram (time taken by solver in ms):
[  12.2100,   19.0392) (avg.   12.2100)  : 1
[  19.0392,   29.6879) (avg.   27.3706)  : 8
[  29.6879,   46.2927) (avg.   39.4183)  : 56
[  46.2927,   72.1846) (avg.   51.5150)  : 24
[  72.1846,  112.5581) (avg.   93.2810)  : 37
[ 112.5581,  175.5128) (avg.  128.0349)  : 26
[ 175.5128,  273.6787) (avg.  206.1373)  : 10
[ 273.6787,  426.7496) (avg.  332.0239)  : 11
[ 426.7496,  665.4345) (avg.  529.9475)  : 4
[ 665.4345, 1037.6180) (avg.  852.5875)  : 2
histogram (number of quantifiers in query)
[0, 2) (avg. 1)                          : 173
[2, 3) (avg. 2)                          : 6
[3, 4) (avg. 0)                          : 0
[4, 5) (avg. 0)                          : 0
[5, 6) (avg. 0)                          : 0
[6, 8) (avg. 0)                          : 0
[8, 9) (avg. 0)                          : 0
[9, 10) (avg. 0)                         : 0
[10, 11) (avg. 0)                        : 0
[11, 12) (avg. 0)                        : 0
histogram (number of nodes in z3 ast)
[ 33,  95) (avg.  33)                    : 1
[ 95, 156) (avg. 122)                    : 28
[156, 218) (avg. 191)                    : 25
[218, 279) (avg. 263)                    : 9
[279, 341) (avg. 310)                    : 15
[341, 402) (avg. 379)                    : 45
[402, 464) (avg. 446)                    : 14
[464, 525) (avg. 481)                    : 25
[525, 587) (avg. 547)                    : 14
[587, 648) (avg. 629)                    : 3
Top 10 highest time taking queries:
1. [1.037s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
2. [0.669s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear2-32-free_var_idx.6.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
3. [0.651s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.1
4. [0.564s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.3
5. [0.466s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear2-32-free_var_idx.6.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
6. [0.439s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond.0
7. [0.424s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
8. [0.398s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.4
9. [0.388s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
10. [0.371s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.4

<MSG>1:11 : Successfully computed equivalence for function: make_list.</MSG>

tfg_edge_expr_wp_fn: num_starts 125 time spent: 0:0:0 [0.003456s total; 0.000028 per start]
tfg_computeWP: num_starts 1070 time spent: 0:0:0 [0.285040s total; 0.000266 per start]
tfg_get_simplified_to_state_for_edge: num_starts 3134 time spent: 0:0:0 [0.006496s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 4652 time spent: 0:0:0 [0.007980s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 5135 time spent: 0:0:0 [0.007644s total; 0.000001 per start]
add_nodeces_at_pc_and_propagate: num_starts 92 time spent: 0:0:0 [0.811278s total; 0.008818 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 24 time spent: 0:0:1 [1.152183s total; 0.048008 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 659 time spent: 0:0:2 [2.385762s total; 0.003620 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 296 time spent: 0:0:0 [0.081562s total; 0.000276 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 542 time spent: 0:0:2 [2.301724s total; 0.004247 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 3797 time spent: 0:0:2 [2.352334s total; 0.000620 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 584 time spent: 0:0:0 [0.052511s total; 0.000090 per start]
tfg_graph_get_vars_written_on_edge: num_starts 542 time spent: 0:0:0 [0.021205s total; 0.000039 per start]
cg_with_rank_add_CE_at_pc: num_starts 156 time spent: 0:0:0 [0.318732s total; 0.002043 per start]
graph_with_ce_add_CE_at_pc: num_starts 107 time spent: 0:0:0 [0.004716s total; 0.000044 per start]
graph_with_guessing_add_CE_at_pc: num_starts 156 time spent: 0:0:0 [0.315112s total; 0.002020 per start]
point_set_add_point_using_CE: num_starts 644 time spent: 0:0:0 [0.100688s total; 0.000156 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 644 time spent: 0:0:0 [0.102446s total; 0.000159 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 105 time spent: 0:0:0 [0.274183s total; 0.002611 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 105 time spent: 0:0:0 [0.168683s total; 0.001607 per start]
expr_label_memlabels_using_memlabel_map: num_starts 32949 time spent: 0:0:0 [0.985263s total; 0.000030 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 1444 time spent: 0:0:0 [0.048387s total; 0.000034 per start]
expr_simplify_solver: num_starts 11171 time spent: 0:0:0 [0.590075s total; 0.000053 per start]
expr_simplify_syntactic: num_starts 11307 time spent: 0:0:6 [6.324629s total; 0.000559 per start]
expr_simplify_select_on_store: num_starts 1921 time spent: 0:0:5 [5.829807s total; 0.003035 per start]
expr_simplify_store_on_store: num_starts 304 time spent: 0:0:0 [0.014731s total; 0.000048 per start]
expr_simplify_using_lhs_set_helper: num_starts 3989 time spent: 0:0:7 [7.316344s total; 0.001834 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 29445 time spent: 0:0:7 [7.289102s total; 0.000248 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 8638 time spent: 0:0:0 [0.037913s total; 0.000004 per start]
expr_simplify_eq: num_starts 2013 time spent: 0:0:0 [0.025234s total; 0.000013 per start]
expr_simplify_or: num_starts 50 time spent: 0:0:0 [0.000077s total; 0.000002 per start]
expr_simplify_and: num_starts 164 time spent: 0:0:0 [0.000833s total; 0.000005 per start]
expr_simplify_not: num_starts 29 time spent: 0:0:0 [0.000110s total; 0.000004 per start]
expr_simplify_implies: num_starts 76 time spent: 0:0:0 [0.000624s total; 0.000008 per start]
expr_simplify_ite: num_starts 1513 time spent: 0:0:0 [0.064119s total; 0.000042 per start]
canonicalize_expr_tree: num_starts 2710 time spent: 0:0:0 [0.111554s total; 0.000041 per start]
expr_simplify_memalloc_using_memlabel: num_starts 860 time spent: 0:0:0 [0.003833s total; 0.000004 per start]
expr_simplify_select_on_store_visit_function: num_starts 2634 time spent: 0:0:5 [5.755504s total; 0.002185 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 280 time spent: 0:0:0 [0.442725s total; 0.001581 per start]
memlabels_are_independent: num_starts 777 time spent: 0:0:0 [0.004499s total; 0.000006 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 248 time spent: 0:0:0 [0.126091s total; 0.000508 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 248 time spent: 0:0:0 [0.123274s total; 0.000497 per start]
is_overlapping_atoms_pair_syntactic: num_starts 248 time spent: 0:0:0 [0.110672s total; 0.000446 per start]
is_overlapping_considering_type_constraints: num_starts 248 time spent: 0:0:0 [0.002782s total; 0.000011 per start]
find_offset_wrt_typed_variable_pointer: num_starts 248 time spent: 0:0:0 [0.002752s total; 0.000011 per start]
is_gep_inbounds_offset: num_starts 248 time spent: 0:0:0 [0.001508s total; 0.000006 per start]
get_arithmetic_addsub_atoms: num_starts 29661 time spent: 0:0:0 [0.020949s total; 0.000001 per start]
expr_is_variable_start: num_starts 368 time spent: 0:0:0 [0.000058s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 9359 time spent: 0:0:0 [0.124362s total; 0.000013 per start]
expr_is_consts_struct_constant: num_starts 3727 time spent: 0:0:0 [0.004580s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 63292 time spent: 0:0:7 [7.049988s total; 0.000111 per start]
expr_do_simplify_helper_cache: num_starts 63292 time spent: 0:0:0 [0.064989s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 4287 time spent: 0:0:0 [0.004520s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 4287 time spent: 0:0:0 [0.012408s total; 0.000003 per start]
evaluate_expr_and_check_bounds: num_starts 3553 time spent: 0:0:2 [2.399960s total; 0.000675 per start]
array_constant_equals: num_starts 66722 time spent: 0:0:0 [0.066462s total; 0.000001 per start]
sort_dfa_canonical: num_starts 528693 time spent: 0:0:2 [2.275830s total; 0.000004 per start]
expr_convert_to_iexpr: num_starts 8246 time spent: 0:0:1 [1.193250s total; 0.000145 per start]
combo_dfa_xfer_and_meet: num_starts 2479 time spent: 0:0:5 [5.256207s total; 0.002120 per start]
alias_val_xfer_and_meet: num_starts 2479 time spent: 0:0:4 [4.604786s total; 0.001858 per start]
get_sprel_map_from_avail_exprs: num_starts 3613 time spent: 0:0:0 [0.065046s total; 0.000018 per start]
update_memlabels_for_memslot_locs: num_starts 921 time spent: 0:0:0 [0.003151s total; 0.000003 per start]
populate_gen_and_kill_sets_for_edge: num_starts 5092 time spent: 0:0:0 [0.268767s total; 0.000053 per start]
compute_simplified_loc_exprs_for_edge: num_starts 11175 time spent: 0:0:2 [2.873955s total; 0.000257 per start]
compute_locs_definitely_written_on_edge: num_starts 5092 time spent: 0:0:0 [0.002647s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 1499 time spent: 0:0:0 [0.661608s total; 0.000441 per start]
edge_update_memlabel_map_for_mlvars: num_starts 2546 time spent: 0:0:0 [0.202679s total; 0.000080 per start]
add_new_locs_based_on_edge: num_starts 2479 time spent: 0:0:3 [3.621335s total; 0.001461 per start]
expand_locset_to_include_slots_for_memmask: num_starts 3045 time spent: 0:0:0 [0.020480s total; 0.000007 per start]
total: num_starts 1 time spent: 0:1:18 [78.554540s total; 78.554540 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 48.09s.
ftmap_run_pointsto_analysis.: 9.31018s (num_starts 213; 0.0437s/start)s.
EQ Time after pointsto analysis: 38.7766s.
EQ Time after pointsto analysis and smt_query: -3.05979s.
EQ Time after pointsto analysis and smt_query and bv-solve: -3.0965s.
Equivalence proof found. The programs are equivalent.
