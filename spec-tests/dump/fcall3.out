argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=fcall3.proof
argv[5] = --spec-iospecs=fcall3.iospecs
argv[6] = fcall3.spec
argv[7] = fcall3.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2710192
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/repos/superopt-project/superopt-tests/spec-tests/fcall3.c
argv[10] = -o
argv[11] = par_tmpdir/fcall3.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/fcall3.spec.etfg
argv[10] = par_tmpdir/fcall3.c.bc
argv[11] = -o
argv[12] = par_tmpdir/fcall3.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function bar</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 72 time spent: 0:0:0 [0.000108s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 148 time spent: 0:0:0 [0.000215s total; 0.000001 per start]
expr_label_memlabels_using_memlabel_map: num_starts 855 time spent: 0:0:0 [0.007096s total; 0.000008 per start]
expr_simplify_solver: num_starts 250 time spent: 0:0:0 [0.022713s total; 0.000091 per start]
expr_simplify_syntactic: num_starts 250 time spent: 0:0:0 [0.130202s total; 0.000521 per start]
expr_simplify_select_on_store: num_starts 16 time spent: 0:0:0 [0.039452s total; 0.002466 per start]
expr_simplify_using_lhs_set_helper: num_starts 214 time spent: 0:0:0 [0.161486s total; 0.000755 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 1127 time spent: 0:0:0 [0.160584s total; 0.000142 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 91 time spent: 0:0:0 [0.000351s total; 0.000004 per start]
canonicalize_expr_tree: num_starts 132 time spent: 0:0:0 [0.001953s total; 0.000015 per start]
expr_simplify_memalloc_using_memlabel: num_starts 24 time spent: 0:0:0 [0.000075s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 16 time spent: 0:0:0 [0.038787s total; 0.002424 per start]
get_arithmetic_addsub_atoms: num_starts 64 time spent: 0:0:0 [0.000069s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 132 time spent: 0:0:0 [0.001724s total; 0.000013 per start]
expr_is_consts_struct_constant: num_starts 754 time spent: 0:0:0 [0.000444s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 1960 time spent: 0:0:0 [0.163980s total; 0.000084 per start]
expr_do_simplify_helper_cache: num_starts 1960 time spent: 0:0:0 [0.001364s total; 0.000001 per start]
array_constant_equals: num_starts 115 time spent: 0:0:0 [0.000237s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 38 time spent: 0:0:0 [0.094830s total; 0.002496 per start]
alias_val_xfer_and_meet: num_starts 38 time spent: 0:0:0 [0.061325s total; 0.001614 per start]
get_sprel_map_from_avail_exprs: num_starts 70 time spent: 0:0:0 [0.006381s total; 0.000091 per start]
update_memlabels_for_memslot_locs: num_starts 28 time spent: 0:0:0 [0.000123s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 72 time spent: 0:0:0 [0.004727s total; 0.000066 per start]
compute_simplified_loc_exprs_for_edge: num_starts 328 time spent: 0:0:0 [0.140539s total; 0.000428 per start]
compute_locs_definitely_written_on_edge: num_starts 72 time spent: 0:0:0 [0.000045s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 54 time spent: 0:0:0 [0.023172s total; 0.000429 per start]
edge_update_memlabel_map_for_mlvars: num_starts 36 time spent: 0:0:0 [0.000909s total; 0.000025 per start]
add_new_locs_based_on_edge: num_starts 36 time spent: 0:0:0 [0.028090s total; 0.000780 per start]
alias_val_meet: num_starts 1 time spent: 0:0:0 [0.000066s total; 0.000066 per start]
expand_locset_to_include_slots_for_memmask: num_starts 54 time spent: 0:0:0 [0.000429s total; 0.000008 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_execution_constructor.src.spec.bar.: 0s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.bar.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 2e-06s (num_starts 2; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 2e-06s (num_starts 2; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 3e-06s (num_starts 3; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.bar.: 3e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 3e-06s (num_starts 2; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_loc_for_arg_expr.: 4e-06s (num_starts 2; 0.0000s/start)
graph_with_guessing_constructor.src.spec.bar.: 7e-06s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 3.3e-05s (num_starts 2; 0.0000s/start)
add_assumes_to_start_edge.: 3.5e-05s (num_starts 2; 0.0000s/start)
add_extra_node_at_start_pc.: 3.8e-05s (num_starts 2; 0.0000s/start)
context_constructor.solver.: 3.8e-05s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 4.4e-05s (num_starts 54; 0.0000s/start)
context_constructor.: 4.7e-05s (num_starts 1; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_locs_in_fcall_edge.: 6.1e-05s (num_starts 2; 0.0000s/start)
expr_is_callee_save_const.: 6.3e-05s (num_starts 62; 0.0000s/start)
get_lr_status_for_loc_ids.: 6.3e-05s (num_starts 6; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 7.9e-05s (num_starts 4; 0.0000s/start)
main.3.: 8.4e-05s (num_starts 1; 0.0001s/start)
identify_farg_memlabels_at_pc.calling.compute_lr_status_for_expr.: 8.9e-05s (num_starts 2; 0.0000s/start)
lr_status_meet.: 8.9e-05s (num_starts 70; 0.0000s/start)
get_memlabel_set_from_mlvarnames.: 0.000111s (num_starts 4; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000117s (num_starts 14; 0.0000s/start)
compute_reachable_memlabels_map.: 0.000132s (num_starts 1; 0.0001s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000213s (num_starts 4; 0.0001s/start)
graph_locs_add_all_specvars.: 0.000218s (num_starts 2; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000233s (num_starts 4; 0.0001s/start)
determinize_value_expr_map.: 0.000234s (num_starts 310; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000236s (num_starts 14; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000253s (num_starts 36; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_farg_memlabels_at_pc.: 0.000275s (num_starts 2; 0.0001s/start)
graph_locs_add_all_exvregs.: 0.000283s (num_starts 2; 0.0001s/start)
sp_version_relations_val_t::meet.: 0.00031s (num_starts 670; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.00032s (num_starts 36; 0.0000s/start)
expr_represents_llvm_undef.: 0.000323s (num_starts 66; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000326s (num_starts 36; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000342s (num_starts 2; 0.0002s/start)
compute_sprel_relations.: 0.000355s (num_starts 2; 0.0002s/start)
graph_with_aliasing_constructor.src.spec.bar.: 0.000367s (num_starts 1; 0.0004s/start)
propagate_sprels.: 0.000368s (num_starts 2; 0.0002s/start)
populate_locid2expr_map.: 0.00041s (num_starts 4; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000466s (num_starts 2; 0.0002s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.00053s (num_starts 36; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_convert_caller_pointsto_value_to_callee_pointsto_value.: 0.000549s (num_starts 2; 0.0003s/start)
tfg_get_write_memlabels.: 0.00055s (num_starts 2; 0.0003s/start)
def_analysis::xfer_and_meet.: 0.000564s (num_starts 72; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000759s (num_starts 2; 0.0004s/start)
graph_locs_add_all_llvmvars.: 0.00079s (num_starts 2; 0.0004s/start)
populate_exit_return_values_for_llvm_method.: 0.00079s (num_starts 2; 0.0004s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000797s (num_starts 36; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.bar.: 0.0008s (num_starts 1; 0.0008s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000864s (num_starts 36; 0.0000s/start)
tfg_get_read_memlabels.: 0.000865s (num_starts 2; 0.0004s/start)
graph_with_locs_constructor.src.spec.bar.: 0.001056s (num_starts 1; 0.0011s/start)
canonicalize_llvm_nextpcs.: 0.00111s (num_starts 2; 0.0006s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_update_callee_boundary_value.: 0.001232s (num_starts 2; 0.0006s/start)
expr_substitute_using_available_exprs_submap.: 0.001243s (num_starts 36; 0.0000s/start)
graph_visit_exprs_const.const.: 0.001276s (num_starts 4; 0.0003s/start)
expr_linear_relation_holds::visit.var.: 0.001289s (num_starts 66; 0.0000s/start)
create_closure_matrix.: 0.001344s (num_starts 64; 0.0000s/start)
graph_with_simplified_assets_constructor.src.spec.bar.: 0.001436s (num_starts 1; 0.0014s/start)
get_summary_for_calling_functions.: 0.00144s (num_starts 2; 0.0007s/start)
ftmap_pointsto_analysis_combo_dfa_t.compute_summary_function.: 0.001452s (num_starts 2; 0.0007s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001543s (num_starts 2; 0.0008s/start)
graph_with_locs_constructor.src.spec.foo.: 0.001922s (num_starts 1; 0.0019s/start)
tfg::collect_assumes_around_edge.: 0.002046s (num_starts 148; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.002141s (num_starts 749; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.002149s (num_starts 2; 0.0011s/start)
graph_with_predicates_constructor.src.spec.bar.: 0.002163s (num_starts 1; 0.0022s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.002642s (num_starts 2; 0.0013s/start)
tfg_constructor.src.spec.bar.after_transitive_closure.: 0.002644s (num_starts 1; 0.0026s/start)
tfg_constructor.src.spec.bar.post_parsing.: 0.002648s (num_starts 1; 0.0026s/start)
tfg_constructor.src.spec.bar.after_string_contents.: 0.002657s (num_starts 1; 0.0027s/start)
tfg_constructor.src.spec.bar.after_compute_max_memlabel_varnum.: 0.002662s (num_starts 1; 0.0027s/start)
tfg_constructor.src.spec.bar.: 0.002665s (num_starts 1; 0.0027s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.002773s (num_starts 1; 0.0028s/start)
tfg_preprocess.dst.llvm.bar.: 0.002791s (num_starts 1; 0.0028s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002877s (num_starts 2; 0.0014s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.003034s (num_starts 2; 0.0015s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.00337s (num_starts 1; 0.0034s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.00338s (num_starts 38; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.003455s (num_starts 38; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.00358s (num_starts 4; 0.0009s/start)
compute_lr_status_for_expr.: 0.003617s (num_starts 58; 0.0001s/start)
populate_transitive_closure.: 0.003837s (num_starts 2; 0.0019s/start)
compute_z3_expr.: 0.003857s (num_starts 120; 0.0000s/start)
query:convert_from_z3.: 0.003883s (num_starts 120; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.00394s (num_starts 38; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.004077s (num_starts 4; 0.0010s/start)
populate_branch_affecting_locs.: 0.004149s (num_starts 4; 0.0010s/start)
tfg::populate_loc_definedness.: 0.00432s (num_starts 4; 0.0011s/start)
graph_visit_exprs.: 0.004352s (num_starts 8; 0.0005s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.005259s (num_starts 36; 0.0001s/start)
graph_identify_back_edges.: 0.005302s (num_starts 10; 0.0005s/start)
graph_identify_natural_loops.: 0.005329s (num_starts 10; 0.0005s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.005668s (num_starts 1; 0.0057s/start)
populate_dominator_and_postdominator_relations.: 0.005689s (num_starts 4; 0.0014s/start)
get_function_tfg_map.bar.: 0.005983s (num_starts 1; 0.0060s/start)
create_sp_version_relations_lattice_at_pc.: 0.006526s (num_starts 64; 0.0001s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.006565s (num_starts 1; 0.0066s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.00777s (num_starts 37; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.007962s (num_starts 855; 0.0000s/start)
tfg_preprocess.dst.llvm.foo.: 0.008189s (num_starts 1; 0.0082s/start)
query:convert_to_z3.: 0.008471s (num_starts 120; 0.0001s/start)
compute_regions.: 0.008562s (num_starts 10; 0.0009s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.009115s (num_starts 1; 0.0091s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.009117s (num_starts 1; 0.0091s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.009122s (num_starts 1; 0.0091s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.009126s (num_starts 1; 0.0091s/start)
tfg_constructor.src.spec.foo.: 0.00913s (num_starts 1; 0.0091s/start)
find_dominators.: 0.010302s (num_starts 18; 0.0006s/start)
tfg::tfg_preprocess.: 0.010985s (num_starts 2; 0.0055s/start)
avail_exprs_create_submap.: 0.011146s (num_starts 110; 0.0001s/start)
graph_to_stream.: 0.011317s (num_starts 2; 0.0057s/start)
get_function_tfg_map.foo.: 0.013006s (num_starts 1; 0.0130s/start)
populate_simplified_to_state.: 0.013998s (num_starts 6; 0.0023s/start)
query:simplify-z3.: 0.015151s (num_starts 252; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.015947s (num_starts 38; 0.0004s/start)
get_tfg.: 0.01892s (num_starts 2; 0.0095s/start)
get_function_tfg_map.: 0.018995s (num_starts 2; 0.0095s/start)
main.2.: 0.021523s (num_starts 1; 0.0215s/start)
populate_simplified_assets.: 0.021837s (num_starts 12; 0.0018s/start)
compute_new_lr_status_on_locs.: 0.031909s (num_starts 36; 0.0009s/start)
populate_locs_potentially_modified_on_edge.: 0.050028s (num_starts 6; 0.0083s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.061397s (num_starts 38; 0.0016s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.062991s (num_starts 34; 0.0019s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.071894s (num_starts 6; 0.0120s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.076057s (num_starts 72; 0.0011s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.083872s (num_starts 855; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.08487s (num_starts 855; 0.0001s/start)
populate_loc_liveness.: 0.087729s (num_starts 4; 0.0219s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.093157s (num_starts 855; 0.0001s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.161724s (num_starts 214; 0.0008s/start)
tfg_postprocess_after_pointsto_analysis.: 0.164314s (num_starts 2; 0.0822s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.173137s (num_starts 2; 0.0866s/start)
ftmap_run_pointsto_analysis.: 0.280039s (num_starts 1; 0.2800s/start)
parse_consts_db.: 6.02779s (num_starts 1; 6.0278s/start)
main.: 6.41258s (num_starts 1; 6.4126s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:13 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:19 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:19 : Reading in SPEC-LLVM I/O specification from file fcall3.iospecs...</MSG>
<MSG>0:20 : Computing equivalence for function: bar...</MSG>
<MSG>0:20 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:20 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:20 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:20 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:20 : Chose (after CE propagation) product-TFG bar (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:20 : product-TFG bar: Enumerating correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:20 : Considering 1 paths to src pc L2%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:20 : Attempting correlation of src pathset L0%0%d=>L2%1%fcallStart[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:20 : Found 1 feasible correlations for paths to src pc L2%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:20 : product-TFG bar: Found 1 correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:20 : product-TFG bar created 1 possibilities in group bar.A...</MSG>
<MSG>0:20 : Chose (for CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L2%1%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:20 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1...</MSG>
<MSG>0:20 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1...</MSG>
<MSG>0:20 : Creating ssa-path for the src-tfg path L0%0%d --> L2%1%fcallStart ending at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:20 : Adding a CG edge composition using the src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:20 : Identifying common alloc-deallocs in the src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart
</MSG>
<MSG>0:20 : Identified no common alloc-deallocs in the src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:20 : Adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L2%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Updating dst fcall edge using src fcall edge for toPC L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Computing loop hoisting select expressions at toPC L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Computing loop hoisting non-linear expressions at toPC L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Adding node L2%1%fcallStart_Lentry%1%fcallStart to the product-TFG...</MSG>
<MSG>0:20 : bar.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Adding edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:20 : bar.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:20 : bar.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:20 : bar.A1: Propagated 1 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart</MSG>
<MSG>0:20 : bar.A1: Added the 1 propagated CEs at PC L2%1%fcallStart_Lentry%1%fcallStart and propagated further.
</MSG>
<MSG>0:20 : bar.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:20 : bar.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:20 : bar.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : Done adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L2%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:20 : Done adding a CG edge composition using the src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:20 : Added correlation to the product-TFG bar.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:20 : Chose (after CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 1 counterexamples (for correlating 2 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L2%1%fcallStart[mu 1, delta {1,0}]
<MSG>0:20 : bar.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:20 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:20 : bar.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart), result: unchanged</MSG>
<MSG>0:20 : bar.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:20 : bar.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:20 : bar.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:20 : bar.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:20 : bar.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:21 : bar.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>0:21 : bar.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:21 : bar.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:21 : bar.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:21 : bar.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:21 : bar.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart), result: changed ...</MSG>
<MSG>0:21 : bar.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>0:21 : bar.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:21 : bar.A1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:22 : product-TFG bar.A1: Enumerating correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : Considering 1 paths to src pc L2%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : Attempting correlation of src pathset L2%1%fcallStart=>L2%1%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : Found 1 feasible correlations for paths to src pc L2%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : product-TFG bar.A1: Found 1 correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : product-TFG bar.A1 created 1 possibilities in group bar.A1.B...</MSG>
<MSG>0:22 : Chose (for CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L2%1%fcallStart=>L2%1%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:22 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:22 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:22 : Creating ssa-path for the src-tfg path L2%1%fcallStart --> L2%1%fcallEnd ending at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:22 : Adding a CG edge composition using the src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:22 : Identifying common alloc-deallocs in the src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd
</MSG>
<MSG>0:22 : Identified no common alloc-deallocs in the src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:22 : Adding new edge to the product-TFG bar.A1.B1 for fromPC L2%1%fcallStart_Lentry%1%fcallStart and toPC L2%1%fcallEnd_Lentry%1%fcallEnd, src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Computing loop hoisting select expressions at toPC L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Computing loop hoisting non-linear expressions at toPC L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Adding node L2%1%fcallEnd_Lentry%1%fcallEnd to the product-TFG...</MSG>
<MSG>0:22 : bar.A1.B1: Getting alloca-ptrs on edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Found no alloca-ptrs on edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Adding edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:22 : bar.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:22 : bar.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:22 : bar.A1.B1: Propagated 7 out of 7 counter-examples across edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd</MSG>
<MSG>0:22 : bar.A1.B1: Added the 7 propagated CEs at PC L2%1%fcallEnd_Lentry%1%fcallEnd and propagated further.
</MSG>
<MSG>0:22 : bar.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:22 : bar.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:22 : bar.A1.B1: Computing CG regions after the addition of the edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Done computing CG regions after the addition of the edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : Done adding new edge to the product-TFG bar.A1.B1 for fromPC L2%1%fcallStart_Lentry%1%fcallStart and toPC L2%1%fcallEnd_Lentry%1%fcallEnd, src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : Done adding a CG edge composition using the src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:22 : Added correlation to the product-TFG bar.A1.B1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 5 counterexamples (for correlating 3 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L2%1%fcallStart=>L2%1%fcallEnd[mu 1, delta {1,0}]
<MSG>0:22 : bar.A1.B1: Updating invariants over the newly added edges in edge composition L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:22 : Constructed infer_invariants_dfa with initial worklist L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Relaxing dst graph's memlabels for edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:22 : bar.A1.B1: Done relaxing dst graph's memlabels for edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd), result: unchanged</MSG>
<MSG>0:22 : bar.A1.B1: Checking well-formedness assertions on outgoing edges from L2%1%fcallStart_Lentry%1%fcallStart ...</MSG>
<MSG>0:22 : bar.A1.B1: Relaxing invariants across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:22 : bar.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:22 : bar.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:22 : bar.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 3 exprs and 5 CEs across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:22 : bar.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:22 : bar.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 14 exprs and 1 CEs across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:24 : bar.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd). changed = 1 proof-stats=dht15-prove_trivial6-prove9...</MSG>
<MSG>0:24 : bar.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:24 : bar.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : bar.A1.B1: Done relaxing invariants across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd), result: changed ...</MSG>
<MSG>0:24 : bar.A1.B1: Done relaxing memlabels and invariants across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>0:24 : bar.A1.B1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:24 : bar.A1.B1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:24 : product-TFG bar.A1.B1: Enumerating correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L2%3%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L2%1%fcallEnd=>L2%3%fcallStart[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L2%3%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:24 : product-TFG bar.A1.B1: Found 1 correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:24 : product-TFG bar.A1.B1 created 1 possibilities in group bar.A1.B1.C...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L2%1%fcallEnd=>L2%3%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L2%1%fcallEnd --> L2%3%fcallStart ending at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>0:24 : Adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L2%1%fcallEnd_Lentry%1%fcallEnd and toPC L2%3%fcallStart_Lentry%2%fcallStart, src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Computing loop hoisting select expressions at toPC L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Adding node L2%3%fcallStart_Lentry%2%fcallStart to the product-TFG...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Getting alloca-ptrs on edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Found no alloca-ptrs on edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Adding edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:24 : bar.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : bar.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Propagated 0 out of 7 counter-examples across edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart</MSG>
<MSG>0:24 : bar.A1.B1.C1: Added the 0 propagated CEs at PC L2%3%fcallStart_Lentry%2%fcallStart and propagated further.
</MSG>
<MSG>0:24 : bar.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Computing CG regions after the addition of the edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Done computing CG regions after the addition of the edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:24 : Done adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L2%1%fcallEnd_Lentry%1%fcallEnd and toPC L2%3%fcallStart_Lentry%2%fcallStart, src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>0:24 : Done adding a CG edge composition using the src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>0:24 : Added correlation to the product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 0 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L2%1%fcallEnd=>L2%3%fcallStart[mu 1, delta {1,0}]
<MSG>0:24 : bar.A1.B1.C1: Updating invariants over the newly added edges in edge composition L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:24 : Constructed infer_invariants_dfa with initial worklist L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>0:24 : bar.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart), result: unchanged</MSG>
<MSG>0:24 : bar.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L2%1%fcallEnd_Lentry%1%fcallEnd ...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Relaxing invariants across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>0:26 : bar.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht9-prove_trivial1-prove8...</MSG>
<MSG>0:26 : bar.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 16 exprs and 1 CEs across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>0:29 : bar.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht17-prove_trivial6-prove11...</MSG>
<MSG>0:29 : bar.A1.B1.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>0:29 : bar.A1.B1.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : bar.A1.B1.C1: Done relaxing invariants across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart), result: changed ...</MSG>
<MSG>0:29 : bar.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>0:29 : bar.A1.B1.C1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:29 : bar.A1.B1.C1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:29 : product-TFG bar.A1.B1.C1: Enumerating correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:29 : Considering 1 paths to src pc L2%3%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:29 : Attempting correlation of src pathset L2%3%fcallStart=>L2%3%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:29 : Found 1 feasible correlations for paths to src pc L2%3%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:29 : product-TFG bar.A1.B1.C1: Found 1 correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:29 : product-TFG bar.A1.B1.C1 created 1 possibilities in group bar.A1.B1.C1.D...</MSG>
<MSG>0:29 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L2%3%fcallStart=>L2%3%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:29 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>0:29 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>0:29 : Creating ssa-path for the src-tfg path L2%3%fcallStart --> L2%3%fcallEnd ending at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:29 : Adding a CG edge composition using the src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>0:29 : Identifying common alloc-deallocs in the src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd
</MSG>
<MSG>0:29 : Identified no common alloc-deallocs in the src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>0:29 : Adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L2%3%fcallStart_Lentry%2%fcallStart and toPC L2%3%fcallEnd_Lentry%2%fcallEnd, src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Adding node L2%3%fcallEnd_Lentry%2%fcallEnd to the product-TFG...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Getting alloca-ptrs on edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Found no alloca-ptrs on edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Adding edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Propagated 10 out of 10 counter-examples across edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Added the 10 propagated CEs at PC L2%3%fcallEnd_Lentry%2%fcallEnd and propagated further.
</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Computing CG regions after the addition of the edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L2%3%fcallStart_Lentry%2%fcallStart and toPC L2%3%fcallEnd_Lentry%2%fcallEnd, src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : Done adding a CG edge composition using the src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>0:29 : Added correlation to the product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:29 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallStart => C L2%3%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
            L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallEnd, A (line 6 at column 10))
                L2%3%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 5 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L2%3%fcallStart=>L2%3%fcallEnd[mu 1, delta {1,0}]
<MSG>0:29 : bar.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:29 : Constructed infer_invariants_dfa with initial worklist L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd), result: unchanged</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L2%3%fcallStart_Lentry%2%fcallStart ...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Relaxing invariants across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 5 CEs across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 29 exprs and 1 CEs across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd)...</MSG>
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710192/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.28.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710192/decide_hoare_triple.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.path_hashb449485232d690ba517e3e857e4995b.pre0.0.gz
<MSG>0:45 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd). changed = 1 proof-stats=dht30-prove_trivial11-prove19...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd), result: changed ...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:45 : product-TFG bar.A1.B1.C1.D1: Enumerating correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:45 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:45 : Attempting correlation of src pathset L2%3%fcallEnd=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:45 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:45 : product-TFG bar.A1.B1.C1.D1: Found 1 correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:45 : product-TFG bar.A1.B1.C1.D1 created 1 possibilities in group bar.A1.B1.C1.D1.E...</MSG>
<MSG>0:45 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallStart => C L2%3%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
            L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallEnd, A (line 6 at column 10))
                L2%3%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L2%3%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:45 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>0:45 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>0:45 : Creating ssa-path for the src-tfg path L2%3%fcallEnd --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:45 : Adding a CG edge composition using the src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>0:45 : Identifying common alloc-deallocs in the src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d
</MSG>
<MSG>0:45 : Identified no common alloc-deallocs in the src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>0:45 : Adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L2%3%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Adding edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Propagated 0 out of 7 counter-examples across edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Added the 0 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:45 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L2%3%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>0:45 : Done adding a CG edge composition using the src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>0:45 : Added correlation to the product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:45 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallStart => C L2%3%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L2%3%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 6 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
            L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallEnd, A (line 6 at column 10))
                L2%3%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L2%3%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Updating invariants over the newly added edges in edge composition L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:45 : Constructed infer_invariants_dfa with initial worklist L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:45 : bar.A1.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L2%3%fcallEnd_Lentry%2%fcallEnd ...</MSG>
<MSG>0:46 : bar.A1.B1.C1.D1.E1: Done relaxing memlabels and invariants across the edge composition (L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:46 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:46 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:46 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:46 : Checking equivalence proof...</MSG>
<MSG>0:46 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L2%1%fcallStart_Lentry%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [2]: 2-->input.dst.llvm-%m1 ; 3-->input.dst.llvm-%m2 ; 
    2 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%m2, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%m1, 1, 0)
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce3      1.:z3v487.ce12      2.:z3.ce13      3.:z3.ce40      4.:z3v487.ce26
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 4-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 5-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      1.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

L2%1%fcallEnd_Lentry%1%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [3]: 3-->input.dst.llvm-%m2 ; 6-->input.spec-%tmpvar-24.L2%1%fcallEnd ; 7-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 
    1 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%m2, 1, 0)
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce3      1.:z3v487.ce12      2.:z3.ce13      3.:z3.ce40      4.:z3v487.ce26
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 4-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 5-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 8-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 9-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 10-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 11-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 12-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 13-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 14-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 15-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 16-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 17-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 18-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 19-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 
    6 preds:
      0.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      1.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      2.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      3.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      4.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      5.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

L2%3%fcallStart_Lentry%2%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 3-->input.dst.llvm-%m2 ; 6-->input.spec-%tmpvar-24.L2%1%fcallEnd ; 7-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 20-->input.spec-%var-fi-0.L2%3%fcallStart ; 
    3 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%tmpvar-24.L2%1%fcallEnd))  ==  input.spec-%var-fi-0.L2%3%fcallStart
      1.: bvneg(bvmul(4294967295, input.spec-%tmpvar-24.L2%1%fcallEnd))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
      2.: 0                     ==  bvextract(input.dst.llvm-%m2, 1, 0)
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce243      1.:z3.ce261      2.:z3.ce279      3.:z3v487.ce297      4.:z3.ce298      5.:z3v487.ce315      6.:z3v487.ce333      7.:z3v487.ce351
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [16]: 4-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 5-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 8-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 9-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 10-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 11-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 12-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 13-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 14-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 15-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 16-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 17-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 18-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 19-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 21-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 22-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 
    6 preds:
      0.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      1.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      2.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      3.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      4.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      5.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243

L2%3%fcallEnd_Lentry%2%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 6-->input.spec-%tmpvar-24.L2%1%fcallEnd ; 7-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 20-->input.spec-%var-fi-0.L2%3%fcallStart ; 23-->input.spec-%tmpvar-25.L2%3%fcallEnd ; 24-->input.dst.llvm-%call1.Lentry%2%fcallEnd ; 
    2 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%tmpvar-24.L2%1%fcallEnd))  ==  input.spec-%var-fi-0.L2%3%fcallStart
      1.: bvneg(bvmul(4294967295, input.spec-%tmpvar-24.L2%1%fcallEnd))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce243      1.:z3.ce261      2.:z3.ce279      3.:z3v487.ce297      4.:z3v487.ce315
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [29]: 4-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 5-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 8-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 9-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 10-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 11-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 12-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 13-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 15-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 16-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 17-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 18-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 25-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 26-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 27-->eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 28-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 29-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 30-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 31-->eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 32-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 33-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 34-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 35-->eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 36-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 37-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 38-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 39-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 40-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 41-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 
    11 preds:
      0.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      1.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      2.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      3.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      4.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      5.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      6.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      7.: eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      8.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      9.: eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      10.: eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallStart => C L2%3%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L2%3%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 6 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 10 counterexamples (for correlating 4 bv exprs)
            L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallEnd, A (line 6 at column 10))
                L2%3%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function bar. 26.76s, query:smt.: 18.6527s (num_starts 61; 0.3058s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 25.6511s (num_starts 144; 0.1781s/start)ftmap_run_pointsto_analysis.: 0.162157s (num_starts 2; 0.0811s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 4e-06s (num_starts 4; 0.0000s/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 5e-06s (num_starts 5; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 7e-06s (num_starts 5; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 8e-06s (num_starts 12; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 9e-06s (num_starts 5; 0.0000s/start)
compute_tfg_pred_eqclass.: 9e-06s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 9e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L2%1%fcallStart_Lentry%1%fcallStart.: 1e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L2%1%fcallEnd_Lentry%1%fcallEnd.: 1.1e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L2%3%fcallStart_Lentry%2%fcallStart.: 1.1e-05s (num_starts 1; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.3e-05s (num_starts 5; 0.0000s/start)
prune_dst_memslots.: 1.3e-05s (num_starts 4; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 1.7e-05s (num_starts 5; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 1.8e-05s (num_starts 23; 0.0000s/start)
get_intersected_lr_status.: 2.9e-05s (num_starts 2; 0.0000s/start)
determinize_value_expr_map.: 3.1e-05s (num_starts 15; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 3.8e-05s (num_starts 3; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 4.7e-05s (num_starts 5; 0.0000s/start)
remove_complex_bv_exprs.: 4.7e-05s (num_starts 4; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 4.8e-05s (num_starts 1; 0.0000s/start)
prove_trivial.: 4.9e-05s (num_starts 69; 0.0000s/start)
sp_version_relations_val_t::meet.: 5.1e-05s (num_starts 134; 0.0000s/start)
get_lr_status_for_loc_ids.: 5.7e-05s (num_starts 18; 0.0000s/start)
lr_status_meet.: 5.7e-05s (num_starts 70; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 5.8e-05s (num_starts 4; 0.0000s/start)
expr_is_hidden_reg.: 6.3e-05s (num_starts 89; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 7.9e-05s (num_starts 3; 0.0000s/start)
expr_is_callee_save_const.: 8.6e-05s (num_starts 101; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 8.7e-05s (num_starts 11; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 8.9e-05s (num_starts 5; 0.0000s/start)
ce_perform_memory_fuzzing.: 9.4e-05s (num_starts 94; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 9.7e-05s (num_starts 3; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000103s (num_starts 10; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000109s (num_starts 5; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000111s (num_starts 2; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000112s (num_starts 10; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000135s (num_starts 4; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.00015s (num_starts 10; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000156s (num_starts 2; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.000167s (num_starts 15; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000176s (num_starts 144; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart.: 0.000186s (num_starts 2; 0.0001s/start)
compute_sprel_relations.: 0.000201s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.00021s (num_starts 2; 0.0001s/start)
collect_dst_to_src_submap_preds.: 0.000216s (num_starts 144; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000225s (num_starts 18; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000233s (num_starts 1; 0.0002s/start)
populate_dominator_and_postdominator_relations.: 0.000248s (num_starts 2; 0.0001s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000253s (num_starts 102; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L2%3%fcallEnd_Lentry%2%fcallEnd.inductive-invariants.: 0.000257s (num_starts 2; 0.0001s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000261s (num_starts 4; 0.0001s/start)
pth_collect_preds_using_atom_func.: 0.000263s (num_starts 16; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000287s (num_starts 25; 0.0000s/start)
compute_bv_bool_eqclass.: 0.000289s (num_starts 4; 0.0001s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.00029s (num_starts 10; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000296s (num_starts 20; 0.0000s/start)
tfg_edge_composition_get_assumes.: 0.000306s (num_starts 16; 0.0000s/start)
populate_locid2expr_map.: 0.000308s (num_starts 2; 0.0002s/start)
removeMostPromising.: 0.000311s (num_starts 16; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000312s (num_starts 2; 0.0002s/start)
aliasing_constraints.convert_to_expr.: 0.000322s (num_starts 75; 0.0000s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.000325s (num_starts 10; 0.0000s/start)
create_closure_matrix.: 0.000332s (num_starts 28; 0.0000s/start)
expr_represents_llvm_undef.: 0.000332s (num_starts 105; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000334s (num_starts 1; 0.0003s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000342s (num_starts 1; 0.0003s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000358s (num_starts 1; 0.0004s/start)
proof_query_is_trivial_helper.: 0.000361s (num_starts 144; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000397s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000397s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.0004s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000402s (num_starts 1; 0.0004s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000408s (num_starts 75; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000413s (num_starts 1; 0.0004s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000423s (num_starts 4; 0.0001s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000436s (num_starts 104; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000459s (num_starts 1; 0.0005s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000466s (num_starts 11; 0.0000s/start)
graph_locs_add_all_specvars.: 0.000504s (num_starts 2; 0.0003s/start)
tfg::populate_loc_definedness.before_solve.: 0.000565s (num_starts 3; 0.0002s/start)
compute_ssa_vars_renaming_map.: 0.000611s (num_starts 2; 0.0003s/start)
populate_branch_affecting_locs.: 0.000618s (num_starts 3; 0.0002s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.00062s (num_starts 20; 0.0000s/start)
compute_vars_reaching_definitions.: 0.000629s (num_starts 2; 0.0003s/start)
generate_aliasing_constraints_from_expr.: 0.000668s (num_starts 214; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.000675s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.000677s (num_starts 1; 0.0007s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000688s (num_starts 152; 0.0000s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000694s (num_starts 8; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.000695s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.000697s (num_starts 1; 0.0007s/start)
graph_visit_exprs.: 0.000708s (num_starts 3; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000711s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000715s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000716s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000724s (num_starts 1; 0.0007s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.000746s (num_starts 75; 0.0000s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.000746s (num_starts 17; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.000851s (num_starts 3; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear;-trivial.: 0.000866s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.000867s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.000869s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear.: 0.000872s (num_starts 1; 0.0009s/start)
tfg_suffixpath_get_expr_helper.: 0.000906s (num_starts 24; 0.0000s/start)
collect_assumes_around_edge.: 0.000911s (num_starts 5; 0.0002s/start)
tfg::populate_loc_definedness.: 0.000919s (num_starts 3; 0.0003s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.000927s (num_starts 8; 0.0001s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.00093s (num_starts 189; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.000948s (num_starts 4; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.000964s (num_starts 8; 0.0001s/start)
invariant_inference_xfer.expr-group-bvs.from.L2%1%fcallStart_Lentry%1%fcallStart.: 0.000979s (num_starts 1; 0.0010s/start)
graph_visit_exprs_and_keys.: 0.000985s (num_starts 2; 0.0005s/start)
parse_yices_model.: 0.001019s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001024s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.001027s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001028s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001031s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001033s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001042s (num_starts 1; 0.0010s/start)
populate_transitive_closure.: 0.001054s (num_starts 17; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001089s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.001093s (num_starts 1; 0.0011s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.001233s (num_starts 5; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001234s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001235s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-trivial.: 0.001235s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001237s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.001238s (num_starts 1; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.00124s (num_starts 1; 0.0012s/start)
proof_query_is_trivial.: 0.001244s (num_starts 144; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001287s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.001292s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001365s (num_starts 2; 0.0007s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.001389s (num_starts 103; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001389s (num_starts 4; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.001393s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001397s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001398s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.001402s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.001408s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.001436s (num_starts 1; 0.0014s/start)
identify_address_taken_local_variables.: 0.001437s (num_starts 3; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.001439s (num_starts 1; 0.0014s/start)
set_result_and_counter_example.: 0.00145s (num_starts 61; 0.0000s/start)
parse_cvc4_model.: 0.001462s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001521s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001522s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001525s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001535s (num_starts 1; 0.0015s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L2%1%fcallStart_Lentry%1%fcallStart.: 0.001535s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001553s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001556s (num_starts 1; 0.0016s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.001599s (num_starts 15; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.001669s (num_starts 57; 0.0000s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.001762s (num_starts 189; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001784s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001785s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001788s (num_starts 1; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.001793s (num_starts 1; 0.0018s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.001808s (num_starts 75; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.001811s (num_starts 5; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.001977s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002019s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.002023s (num_starts 1; 0.0020s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.002033s (num_starts 102; 0.0000s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);-trivial.: 0.002073s (num_starts 3; 0.0007s/start)
populate_locs_potentially_modified_on_edge.: 0.002078s (num_starts 3; 0.0007s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.002081s (num_starts 24; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.00211s (num_starts 2; 0.0011s/start)
graph_with_guessing_sync_preds.: 0.002116s (num_starts 144; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L2%3%fcallStart_Lentry%2%fcallStart.: 0.002136s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.002139s (num_starts 2; 0.0011s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.00215s (num_starts 24; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.00229s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.00233s (num_starts 2; 0.0012s/start)
expr_linear_relation_holds::visit.var.: 0.002417s (num_starts 117; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.002448s (num_starts 4; 0.0006s/start)
check_wfconds_on_edge.L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd.: 0.002459s (num_starts 2; 0.0012s/start)
bv_const_ref_map2expr_map.: 0.002576s (num_starts 86; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.002599s (num_starts 2; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear.: 0.002605s (num_starts 2; 0.0013s/start)
check_node_stability_after_CE_addition.: 0.002631s (num_starts 112; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00268s (num_starts 2; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002716s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear;-trivial.: 0.002726s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.00273s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear.: 0.002736s (num_starts 2; 0.0014s/start)
construct_linear_combination_exprs.: 0.002739s (num_starts 86; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear.: 0.002742s (num_starts 2; 0.0014s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.002804s (num_starts 152; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.0029s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00291s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002916s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002937s (num_starts 1; 0.0029s/start)
invariant_inference_xfer.expr-group-bvs.from.L2%3%fcallStart_Lentry%2%fcallStart.: 0.00295s (num_starts 1; 0.0029s/start)
collect_aliasing_constraints_around_path_helper.: 0.002978s (num_starts 134; 0.0000s/start)
do_ssa_transformation.: 0.003008s (num_starts 2; 0.0015s/start)
bv_expr_pair_ranges_merge_adjacent.: 0.00305s (num_starts 106; 0.0000s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);-trivial.: 0.003138s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.003203s (num_starts 2; 0.0016s/start)
create_sp_version_relations_lattice_at_pc.: 0.003208s (num_starts 28; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003243s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003282s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003329s (num_starts 2; 0.0017s/start)
check_wfconds_on_edge.L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd.: 0.003332s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003364s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.003376s (num_starts 29; 0.0001s/start)
collect_aliasing_constraints_around_path.: 0.003487s (num_starts 86; 0.0000s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.003582s (num_starts 5; 0.0007s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.003656s (num_starts 20; 0.0002s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.003798s (num_starts 8; 0.0005s/start)
find_dominators.: 0.003834s (num_starts 29; 0.0001s/start)
cg_src_dst_tfg_copy.: 0.003974s (num_starts 2; 0.0020s/start)
graph_identify_back_edges.: 0.004017s (num_starts 25; 0.0002s/start)
get_next_potential_correlations.: 0.004061s (num_starts 5; 0.0008s/start)
graph_identify_natural_loops.: 0.00407s (num_starts 25; 0.0002s/start)
ldr_decomposition.: 0.004169s (num_starts 102; 0.0000s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.004192s (num_starts 2; 0.0021s/start)
get_sprel_map_pair_at_pc.: 0.004217s (num_starts 75; 0.0001s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.004577s (num_starts 107; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.004683s (num_starts 152; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004856s (num_starts 3; 0.0016s/start)
expr_substitute_using_available_exprs_submap.: 0.0053s (num_starts 70; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.005308s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear.: 0.005371s (num_starts 4; 0.0013s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.0057s (num_starts 343; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-trivial.: 0.006002s (num_starts 4; 0.0015s/start)
get_mask_ranges_for_memlabel.: 0.006058s (num_starts 57; 0.0001s/start)
compute_regions.: 0.006293s (num_starts 25; 0.0003s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.006501s (num_starts 397; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.006564s (num_starts 5; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.006572s (num_starts 5; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities..: 0.00662s (num_starts 5; 0.0013s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.006637s (num_starts 5; 0.0013s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.007013s (num_starts 20; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.007072s (num_starts 6; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 0.007086s (num_starts 6; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-trivial.: 0.007248s (num_starts 6; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.007253s (num_starts 6; 0.0012s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.007397s (num_starts 397; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.008565s (num_starts 570; 0.0000s/start)
get_unrolled_paths_from.: 0.008802s (num_starts 36; 0.0002s/start)
populate_simplified_to_state.: 0.009051s (num_starts 3; 0.0030s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009261s (num_starts 6; 0.0015s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.009336s (num_starts 306; 0.0000s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.009443s (num_starts 20; 0.0005s/start)
populate_simplified_assets.: 0.009594s (num_starts 6; 0.0016s/start)
avail_exprs_create_submap.: 0.010387s (num_starts 60; 0.0002s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.010814s (num_starts 8; 0.0014s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.011685s (num_starts 3; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.011906s (num_starts 6; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 0.011946s (num_starts 6; 0.0020s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.011967s (num_starts 554; 0.0000s/start)
output_lhs_set_guard_etc_and_src_dst_to_file.: 0.012549s (num_starts 1; 0.0125s/start)
counter_example_satisfies_preds.: 0.01282s (num_starts 322; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.013102s (num_starts 102; 0.0001s/start)
pth_collect_simplified_preds_using_atom_func.: 0.013431s (num_starts 538; 0.0000s/start)
prove_dump_to_file.: 0.013458s (num_starts 1; 0.0135s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.013704s (num_starts 102; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.014928s (num_starts 1; 0.0149s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.014934s (num_starts 1; 0.0149s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.014938s (num_starts 1; 0.0149s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.015032s (num_starts 1; 0.0150s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.015035s (num_starts 1; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-trivial.: 0.015038s (num_starts 1; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.01504s (num_starts 1; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.015398s (num_starts 11; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 0.015431s (num_starts 11; 0.0014s/start)
ldr_decompose_and_linear_solve.: 0.016058s (num_starts 102; 0.0002s/start)
predicate_canonicalized.: 0.016551s (num_starts 86; 0.0002s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.017105s (num_starts 1074; 0.0000s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-trivial.: 0.017824s (num_starts 2; 0.0089s/start)
bv_linear_solve.: 0.017994s (num_starts 102; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.01831s (num_starts 343; 0.0001s/start)
query:bv_solve.: 0.018556s (num_starts 102; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.019107s (num_starts 12; 0.0016s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.01936s (num_starts 75; 0.0003s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.019652s (num_starts 5; 0.0039s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.019906s (num_starts 20; 0.0010s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.020494s (num_starts 495; 0.0000s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.020765s (num_starts 191; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.022463s (num_starts 343; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.022842s (num_starts 1; 0.0228s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.022846s (num_starts 1; 0.0228s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.023067s (num_starts 191; 0.0001s/start)
query:convert_from_z3.: 0.023158s (num_starts 432; 0.0001s/start)
graph_to_stream.: 0.023568s (num_starts 7; 0.0034s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-trivial.: 0.02359s (num_starts 1; 0.0236s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.023593s (num_starts 1; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.023598s (num_starts 1; 0.0236s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.023666s (num_starts 10; 0.0024s/start)
collect_assumes_around_path_helper.: 0.023801s (num_starts 189; 0.0001s/start)
graph_with_paths::collect_assumes_around_path.: 0.024287s (num_starts 189; 0.0001s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-trivial.: 0.024358s (num_starts 2; 0.0122s/start)
bv_solve_returning_intermediate_structures.: 0.024719s (num_starts 102; 0.0002s/start)
gen_pred_from_coeff_row.simplify.: 0.028179s (num_starts 86; 0.0003s/start)
bvsolve_cache_query.miss1.: 0.02881s (num_starts 102; 0.0003s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.030027s (num_starts 75; 0.0004s/start)
bvsolve_cache_query.: 0.030851s (num_starts 102; 0.0003s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.031599s (num_starts 15; 0.0021s/start)
populate_loc_liveness.: 0.036468s (num_starts 3; 0.0122s/start)
query:convert_to_z3.: 0.036587s (num_starts 432; 0.0001s/start)
compute_expr_eqclasses_at_pc.: 0.036602s (num_starts 4; 0.0092s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.037515s (num_starts 6; 0.0063s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.037775s (num_starts 2; 0.0189s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.037779s (num_starts 2; 0.0189s/start)
cg_add_node.: 0.037804s (num_starts 6; 0.0063s/start)
tfg_relax_pointsto_vals_on_edge.: 0.039213s (num_starts 10; 0.0039s/start)
graph_ec_apply_trans_funs_helper.0.: 0.039707s (num_starts 397; 0.0001s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);-trivial.: 0.039992s (num_starts 17; 0.0024s/start)
graph_ec_apply_trans_funs_helper.: 0.041687s (num_starts 405; 0.0001s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.04267s (num_starts 405; 0.0001s/start)
solve_for_bv_points.: 0.042979s (num_starts 102; 0.0004s/start)
counter_example_falsifies_preds.: 0.043501s (num_starts 93; 0.0005s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.04387s (num_starts 405; 0.0001s/start)
computeWP_for_pred_across_ec.: 0.044918s (num_starts 405; 0.0001s/start)
create_new_corr_graph_edge.new_node.: 0.045642s (num_starts 5; 0.0091s/start)
create_new_corr_graph_edge.: 0.047023s (num_starts 5; 0.0094s/start)
lhs_set_sort.: 0.04774s (num_starts 75; 0.0006s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.050977s (num_starts 1; 0.0510s/start)
tfg_postprocess_after_pointsto_analysis.: 0.051072s (num_starts 2; 0.0255s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.052157s (num_starts 102; 0.0005s/start)
gen_pred_from_coeff_row.: 0.052902s (num_starts 86; 0.0006s/start)
compute_preds_for_bv_points.: 0.053765s (num_starts 32; 0.0017s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.053908s (num_starts 36; 0.0015s/start)
edge_composition_apply_trans_funs_on_pred.: 0.053984s (num_starts 144; 0.0004s/start)
counter_example_evaluate_preds.: 0.055372s (num_starts 415; 0.0001s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.056194s (num_starts 191; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.057676s (num_starts 1; 0.0577s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.057694s (num_starts 1; 0.0577s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.057705s (num_starts 1; 0.0577s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-trivial.: 0.05966s (num_starts 26; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess.: 0.062595s (num_starts 4; 0.0156s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.063233s (num_starts 408; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067249s (num_starts 1; 0.0672s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067267s (num_starts 1; 0.0673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067277s (num_starts 1; 0.0673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.067288s (num_starts 1; 0.0673s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond.: 0.067295s (num_starts 1; 0.0673s/start)
compute_lr_status_for_expr.: 0.076869s (num_starts 73; 0.0011s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.077146s (num_starts 70; 0.0011s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.077262s (num_starts 70; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.078621s (num_starts 11; 0.0071s/start)
query:simplify-z3.: 0.079187s (num_starts 954; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-trivial.: 0.079283s (num_starts 12; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.082255s (num_starts 2; 0.0411s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082479s (num_starts 1; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08251s (num_starts 1; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082516s (num_starts 1; 0.0825s/start)
check_wfconds_on_edge.L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart.: 0.083323s (num_starts 2; 0.0417s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085212s (num_starts 1; 0.0852s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085239s (num_starts 1; 0.0852s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085254s (num_starts 1; 0.0853s/start)
put_smtlib_string_in_file.: 0.085573s (num_starts 122; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.085613s (num_starts 17; 0.0050s/start)
add_fresh_counterexample_at_pc_and_propagate.L2%1%fcallStart_Lentry%1%fcallStart.inductive-invariants.: 0.085702s (num_starts 14; 0.0061s/start)
add_fresh_counterexample_at_pc_and_propagate.L2%1%fcallEnd_Lentry%1%fcallEnd.inductive-invariants.: 0.090268s (num_starts 38; 0.0024s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);-trivial.: 0.091104s (num_starts 21; 0.0043s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.094345s (num_starts 10; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.099504s (num_starts 1; 0.0995s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.099513s (num_starts 1; 0.0995s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.099521s (num_starts 1; 0.0995s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess.: 0.099524s (num_starts 1; 0.0995s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.099848s (num_starts 1; 0.0998s/start)
collect_inductive_preds_around_path.: 0.102364s (num_starts 144; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.105377s (num_starts 2; 0.0527s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.1054s (num_starts 2; 0.0527s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.10561s (num_starts 10; 0.0106s/start)
compute_new_lr_status_on_locs.: 0.108123s (num_starts 20; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.108876s (num_starts 2; 0.0544s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.108909s (num_starts 2; 0.0545s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d).: 0.108922s (num_starts 2; 0.0545s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond.: 0.120329s (num_starts 3; 0.0401s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.128426s (num_starts 17; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-trivial.: 0.129493s (num_starts 18; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.12995s (num_starts 2; 0.0650s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.129962s (num_starts 2; 0.0650s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 0.129982s (num_starts 2; 0.0650s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown.: 0.129995s (num_starts 2; 0.0650s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131096s (num_starts 2; 0.0655s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear.: 0.131118s (num_starts 2; 0.0656s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.132438s (num_starts 2; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 0.13246s (num_starts 2; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.137079s (num_starts 2; 0.0685s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear.: 0.139088s (num_starts 3; 0.0464s/start)
corr_graph::add_edge().: 0.142624s (num_starts 5; 0.0285s/start)
get_masked_array_constant.: 0.143401s (num_starts 57; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.143716s (num_starts 28; 0.0051s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149742s (num_starts 2; 0.0749s/start)
evaluate_memmask.: 0.151417s (num_starts 57; 0.0027s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);-trivial.: 0.152305s (num_starts 34; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157142s (num_starts 2; 0.0786s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.157156s (num_starts 2; 0.0786s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.157251s (num_starts 2; 0.0786s/start)
ftmap_run_pointsto_analysis.: 0.162157s (num_starts 2; 0.0811s/start)
tfg_run_pointsto_analysis.: 0.162399s (num_starts 2; 0.0812s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.166589s (num_starts 8; 0.0208s/start)
tfg_populate_structs_after_ssa_construction.: 0.168575s (num_starts 2; 0.0843s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169061s (num_starts 1; 0.1691s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169066s (num_starts 1; 0.1691s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169067s (num_starts 1; 0.1691s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.169074s (num_starts 1; 0.1691s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate.: 0.169078s (num_starts 1; 0.1691s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.169084s (num_starts 1; 0.1691s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.172651s (num_starts 2; 0.0863s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175109s (num_starts 1; 0.1751s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175112s (num_starts 1; 0.1751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175117s (num_starts 1; 0.1751s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175117s (num_starts 1; 0.1751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.175125s (num_starts 1; 0.1751s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false.: 0.175129s (num_starts 1; 0.1751s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.175135s (num_starts 1; 0.1751s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon).: 0.177267s (num_starts 4; 0.0443s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.185252s (num_starts 1; 0.1853s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.185258s (num_starts 1; 0.1853s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.185261s (num_starts 1; 0.1853s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.185272s (num_starts 1; 0.1853s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate.: 0.185275s (num_starts 1; 0.1853s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.185281s (num_starts 1; 0.1853s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.18764s (num_starts 4; 0.0469s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.187715s (num_starts 1; 0.1877s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.187719s (num_starts 1; 0.1877s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.187721s (num_starts 1; 0.1877s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.190918s (num_starts 5; 0.0382s/start)
corr_graph_add_correlation.: 0.191071s (num_starts 5; 0.0382s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.191153s (num_starts 5; 0.0382s/start)
decide_hoare_triple_dump_to_file.: 0.191211s (num_starts 1; 0.1912s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.191594s (num_starts 1; 0.1916s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.191596s (num_starts 1; 0.1916s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.191606s (num_starts 1; 0.1916s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.191609s (num_starts 1; 0.1916s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.191621s (num_starts 1; 0.1916s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false.: 0.191626s (num_starts 1; 0.1916s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.191632s (num_starts 1; 0.1916s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon).: 0.194831s (num_starts 4; 0.0487s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L2%1%fcallEnd_Lentry%1%fcallEnd.: 0.194963s (num_starts 1; 0.1950s/start)
guarded_predicate_set_and.: 0.196098s (num_starts 75; 0.0026s/start)
add_fresh_counterexample_at_pc_and_propagate.L2%3%fcallStart_Lentry%2%fcallStart.inductive-invariants.: 0.196938s (num_starts 30; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.202775s (num_starts 2; 0.1014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate.: 0.202789s (num_starts 2; 0.1014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.202806s (num_starts 2; 0.1014s/start)
check_wfconds_on_edge.L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d.: 0.217153s (num_starts 2; 0.1086s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.217365s (num_starts 75; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217679s (num_starts 3; 0.0726s/start)
evaluate_function_call.: 0.221755s (num_starts 57; 0.0039s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.236791s (num_starts 103; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.236859s (num_starts 1; 0.2369s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.236859s (num_starts 1; 0.2369s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23686s (num_starts 1; 0.2369s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.236867s (num_starts 1; 0.2369s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate.: 0.236873s (num_starts 1; 0.2369s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.236885s (num_starts 1; 0.2369s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.246439s (num_starts 75; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.253533s (num_starts 1; 0.2535s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.253537s (num_starts 1; 0.2535s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.25354s (num_starts 1; 0.2535s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.253549s (num_starts 1; 0.2535s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false.: 0.253552s (num_starts 1; 0.2536s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.253558s (num_starts 1; 0.2536s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.262339s (num_starts 4; 0.0656s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 0.262522s (num_starts 4; 0.0656s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268141s (num_starts 4; 0.0670s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.273315s (num_starts 1; 0.2733s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.273319s (num_starts 1; 0.2733s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.273322s (num_starts 1; 0.2733s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.273333s (num_starts 1; 0.2733s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false.: 0.273336s (num_starts 1; 0.2733s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.273344s (num_starts 1; 0.2733s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear.: 0.274293s (num_starts 8; 0.0343s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.275598s (num_starts 62; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown.: 0.277644s (num_starts 29; 0.0096s/start)
counter_example_translate_on_edge_composition_helper.: 0.298754s (num_starts 568; 0.0005s/start)
check_wfconds_on_edge.: 0.306573s (num_starts 10; 0.0307s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.310125s (num_starts 1; 0.3101s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.310127s (num_starts 1; 0.3101s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.31013s (num_starts 1; 0.3101s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.310131s (num_starts 1; 0.3101s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.310139s (num_starts 1; 0.3101s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false.: 0.310142s (num_starts 1; 0.3101s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.310146s (num_starts 1; 0.3101s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.310566s (num_starts 2; 0.1553s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.320767s (num_starts 2; 0.1604s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.330325s (num_starts 270; 0.0012s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon).: 0.338774s (num_starts 4; 0.0847s/start)
apply_mask_and_overlay_array_constant.: 0.349846s (num_starts 270; 0.0013s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.355779s (num_starts 2; 0.1779s/start)
decide_hoare_triple_helper;-trivial.: 0.358524s (num_starts 84; 0.0043s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 0.371889s (num_starts 1; 0.3719s/start)
compute_z3_expr.: 0.377182s (num_starts 493; 0.0008s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon).: 0.380294s (num_starts 4; 0.0951s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.39749s (num_starts 94; 0.0042s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.399133s (num_starts 92; 0.0043s/start)
check_equivalence_proof.: 0.611628s (num_starts 1; 0.6116s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.619057s (num_starts 399; 0.0016s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.7789s (num_starts 4; 0.1947s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.794039s (num_starts 5; 0.1588s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 0.81324s (num_starts 47; 0.0173s/start)
check_preds_on_edge_compositions.: 0.825963s (num_starts 15; 0.0551s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.82737s (num_starts 5; 0.1655s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.82739s (num_starts 5; 0.1655s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear.: 0.827441s (num_starts 5; 0.1655s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear.: 0.827459s (num_starts 5; 0.1655s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.849535s (num_starts 1; 0.8495s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.958391s (num_starts 7; 0.1369s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear.: 0.958665s (num_starts 7; 0.1370s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.2037s (num_starts 5; 0.2407s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 1.2038s (num_starts 5; 0.2408s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.2075s (num_starts 8; 0.1509s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20753s (num_starts 8; 0.1509s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear.: 1.20887s (num_starts 9; 0.1343s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear.: 1.2089s (num_starts 9; 0.1343s/start)
decide_hoare_triple.: 1.21333s (num_starts 10; 0.1213s/start)
dst_edge_composition_proves_false.: 1.22602s (num_starts 5; 0.2452s/start)
get_next_dst_edge_composition_to_correlate.: 1.23293s (num_starts 6; 0.2055s/start)
invariant_inference_xfer.expr-group-bvs.from.L2%1%fcallEnd_Lentry%1%fcallEnd.: 1.24731s (num_starts 1; 1.2473s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.34448s (num_starts 10; 0.1344s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear.: 1.34811s (num_starts 12; 0.1123s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.61466s (num_starts 14; 0.1153s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart).: 1.6154s (num_starts 14; 0.1154s/start)
ce_reconcile_sorts.: 1.77737s (num_starts 80; 0.0222s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.18555s (num_starts 3; 0.7285s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.18558s (num_starts 3; 0.7285s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.18559s (num_starts 3; 0.7285s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 2.26428s (num_starts 14; 0.1617s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown.: 2.265s (num_starts 15; 0.1510s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 2.27151s (num_starts 20; 0.1136s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.30295s (num_starts 17; 0.1355s/start)
decide_hoare_triple_helper;per-query-type;linear.: 2.31439s (num_starts 25; 0.0926s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.3546s (num_starts 4; 0.5886s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd).: 2.44627s (num_starts 25; 0.0979s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.4664s (num_starts 10; 0.2466s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.46646s (num_starts 10; 0.2466s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.46649s (num_starts 10; 0.2466s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 2.47389s (num_starts 16; 0.1546s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown.: 2.47393s (num_starts 16; 0.1546s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 2.48603s (num_starts 22; 0.1130s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L2%1%fcallStart_Lentry%1%fcallStart.: 2.52211s (num_starts 1; 2.5221s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L2%1%fcallEnd_Lentry%1%fcallEnd.: 2.5439s (num_starts 1; 2.5439s/start)
parse_z3_model.: 2.76611s (num_starts 78; 0.0355s/start)
read_counter_examples_from_channel.: 2.78853s (num_starts 43; 0.0648s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.99852s (num_starts 21; 0.1904s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart).: 4.03979s (num_starts 38; 0.1063s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.5013s (num_starts 12; 1.2918s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.5014s (num_starts 12; 1.2918s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.5014s (num_starts 12; 1.2918s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.6865s (num_starts 13; 1.2067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 15.8213s (num_starts 29; 0.5456s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown.: 15.8225s (num_starts 30; 0.5274s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 15.837s (num_starts 40; 0.3959s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd).: 16.0312s (num_starts 47; 0.3411s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L2%3%fcallStart_Lentry%2%fcallStart.: 16.2104s (num_starts 1; 16.2104s/start)
query:smt.: 18.6527s (num_starts 61; 0.3058s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 20.5009s (num_starts 30; 0.6834s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 20.9693s (num_starts 92; 0.2279s/start)
spawn_smt_query.: 21.4421s (num_starts 61; 0.3515s/start)
solver_provable.: 23.7177s (num_starts 75; 0.3162s/start)
solver_satisfiable-cache-miss.: 23.7473s (num_starts 61; 0.3893s/start)
solver_satisfiable.: 23.7483s (num_starts 76; 0.3125s/start)
expr_is_provable.: 23.7691s (num_starts 75; 0.3169s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 23.7712s (num_starts 75; 0.3169s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 23.7749s (num_starts 75; 0.3170s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 23.7767s (num_starts 75; 0.3170s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 23.9764s (num_starts 75; 0.3197s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 23.9814s (num_starts 75; 0.3198s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 23.9826s (num_starts 75; 0.3198s/start)
update_invariant_state_for_edges.: 24.3126s (num_starts 5; 4.8625s/start)
cg_check_new_cg_ec.: 24.3127s (num_starts 5; 4.8625s/start)
correl_entry_apply.: 24.3128s (num_starts 5; 4.8626s/start)
is_expr_equal_using_lhs_set_and_precond.: 24.7408s (num_starts 75; 0.3299s/start)
prove.: 24.7415s (num_starts 75; 0.3299s/start)
prove_spawn_and_join_helper.: 24.7419s (num_starts 75; 0.3299s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 25.0959s (num_starts 60; 0.4183s/start)
prove_spawn_and_join.: 25.1648s (num_starts 75; 0.3355s/start)
prove_wrapper.proof_query_not_trivial.: 25.188s (num_starts 75; 0.3358s/start)
prove_wrapper.: 25.2501s (num_starts 144; 0.1753s/start)
decide_hoare_triple_check_ub.: 25.3127s (num_starts 144; 0.1758s/start)
expandProductCFG.: 25.5502s (num_starts 6; 4.2584s/start)
decide_hoare_triple_helper.: 25.6511s (num_starts 144; 0.1781s/start)
bestFirstSearch.: 25.791s (num_starts 1; 25.7910s/start)
decide_hoare_triple_with_alias_cons.: 26.0517s (num_starts 144; 0.1809s/start)
Time taken for equivalence check.: 26.4258s (num_starts 1; 26.4258s/start)

counters:
# of assume sat failures for cg-edge-assume-unknown.: 14
# of assume sat failures for undef-behavioursome.edge.L0%0%d=>Lentry%1%fcallStart.: 1
# of paths enumerated.: 5
# of paths expanded.: 5
# of queries to linear solver.: 102
# of smt-solver-queries.: 61
L0%0%d=>Lentry%1%fcallStart-src_ecs.: 1
L0%0%d=>Lentry%1%fcallStart-src_to_pcs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_ecs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_to_pcs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_ecs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_to_pcs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_ecs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_to_pcs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_ecs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_to_pcs.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%1%fcallEnd_Lentry%1%fcallEnd.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%3%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%3%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 4
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L2%1%fcallEnd_Lentry%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L2%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 8
smallest_point_cover_xfer.expr-group-bvs.from.L2%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L2%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L2%3%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L2%3%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%1%fcallEnd_Lentry%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%1%fcallStart_Lentry%1%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%3%fcallStart_Lentry%2%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%3%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%1%fcallEnd_Lentry%1%fcallEnd.iters.: 12
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 11
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%1%fcallStart_Lentry%1%fcallStart.iters.: 10
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%3%fcallStart_Lentry%2%fcallStart.iters.: 20
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%3%fcallStart_Lentry%2%fcallStart.prove_queries.: 19
smt-queries-cache-hits.: 15
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 78
total-correlation-possibilities.: 6
total-correlation-possibilities-mod-lsprels.: 6
total-correlations-explored.: 6

flags:
dst-aloc.: 0
dst-edges.: 5
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L2%1%fcallEnd_Lentry%1%fcallEnd.: 0
final-CG-counterexamples-generated-at-L2%1%fcallStart_Lentry%1%fcallStart.: 4
final-CG-counterexamples-generated-at-L2%3%fcallEnd_Lentry%2%fcallEnd.: 0
final-CG-counterexamples-generated-at-L2%3%fcallStart_Lentry%2%fcallStart.: 8
final-CG-counterexamples-total-at-L2%1%fcallEnd_Lentry%1%fcallEnd.: 7
final-CG-counterexamples-total-at-L2%1%fcallStart_Lentry%1%fcallStart.: 7
final-CG-counterexamples-total-at-L2%3%fcallEnd_Lentry%2%fcallEnd.: 7
final-CG-counterexamples-total-at-L2%3%fcallStart_Lentry%2%fcallStart.: 10
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 6
final-CG-num-invariants.: 37
final-CG-super-edges.: 0
src-edges.: 5
src-nodes.: 6
timeout-occured.: 1

info:
eq-state.: find_correlation
final-CG-time-secs.: 24.50
final-CG-time-to-total-time-ratio.: 0.95
query-time-to-total-time-ratio.: 0.71

Context stats:
exprs: count: 196161
sorts: count: 163
num_proof_queries: 75
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	5625
	        hit ratio:	0.955733
m_simplify_solver:
	----------- total:	1914
	        hit ratio:	0.727273
m_z3_solver_substitution:
	----------- total:	522
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	522
	        hit ratio:	0
m_expr_size:
	----------- total:	4439
	        hit ratio:	0.866186
m_expr_evaluates_to_constant_visitor:
	----------- total:	111582
	        hit ratio:	0.454751

z3_solver expr_query_cache entry size: 61
	----------- total:	76
	             hits:	15
	        hit ratio:	0.197368
histogram (time taken by solver in ms):
[  26.5860,   44.9162) (avg.   37.8007)  : 15
[  44.9162,   75.8845) (avg.   64.1465)  : 12
[  75.8845,  128.2046) (avg.   96.5766)  : 24
[ 128.2046,  216.5976) (avg.  134.8720)  : 2
[ 216.5976,  365.9349) (avg.  283.5930)  : 1
[ 365.9349,  618.2356) (avg.    0.0000)  : 0
[ 618.2356, 1044.4898) (avg.  909.8325)  : 4
[1044.4898, 1764.6329) (avg.    0.0000)  : 0
[1764.6329, 2981.2921) (avg. 2725.4480)  : 1
[2981.2921, 5036.8000) (avg. 4039.5895)  : 2
histogram (number of quantifiers in query)
[ 0,  4) (avg.  0)                       : 1
[ 4,  8) (avg.  0)                       : 0
[ 8, 12) (avg.  0)                       : 0
[12, 16) (avg. 15)                       : 18
[16, 20) (avg. 16)                       : 2
[20, 24) (avg. 22)                       : 37
[24, 28) (avg.  0)                       : 0
[28, 32) (avg. 29)                       : 3
[32, 36) (avg.  0)                       : 0
[36, 39) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[ 50,  79) (avg.  50)                    : 1
[ 79, 108) (avg.   0)                    : 0
[108, 137) (avg.   0)                    : 0
[137, 165) (avg.   0)                    : 0
[165, 194) (avg. 190)                    : 6
[194, 223) (avg. 201)                    : 12
[223, 251) (avg. 244)                    : 20
[251, 280) (avg. 263)                    : 13
[280, 309) (avg. 299)                    : 7
[309, 337) (avg. 323)                    : 2
Top 10 highest time taking queries:
1. [5.036s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.28
2. [3.043s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.13
3. [2.725s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.1
4. [1.024s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.7
5. [0.924s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.20
6. [0.853s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%1%fcallStart_Lentry%1%fcallStart.cond_apply_set_elem0_of_1.8
7. [0.838s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%1%fcallStart_Lentry%1%fcallStart.cond_apply_set_elem0_of_1.0
8. [0.284s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.11
9. [0.136s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.12
10. [0.134s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.6

<MSG>0:46 : Successfully computed equivalence for function: bar.</MSG>
<MSG>0:46 : Computing equivalence for function: foo...</MSG>
<MSG>0:47 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:47 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:47 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:47 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:47 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:47 : product-TFG foo: Enumerating correlations for L0%0%d=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:47 : Considering 1 paths to src pc E0%0%d as correlation candidates for L0%0%d=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:47 : Attempting correlation of src pathset L0%0%d=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:47 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for L0%0%d=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:47 : product-TFG foo: Found 1 correlations for L0%0%d=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:47 : product-TFG foo created 1 possibilities in group foo.A...</MSG>
<MSG>0:47 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:47 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:47 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:47 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:47 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>0:47 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>0:47 : Identified no common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>0:47 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d...</MSG>
<MSG>0:47 : foo.A1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:47 : foo.A1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:47 : foo.A1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:47 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:47 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:47 : foo.A1: Adding edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:47 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:47 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:47 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:47 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d</MSG>
<MSG>0:47 : foo.A1: Added the 2 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:47 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:47 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:47 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:47 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:47 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d...</MSG>
<MSG>0:47 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>0:47 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:47 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A L0%0%d => A E0%0%d at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
<MSG>0:47 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:47 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:47 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:47 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:47 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:50 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:50 : foo.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:50 : foo.A1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:50 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:50 : Checking equivalence proof...</MSG>
<MSG>0:51 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[1]: L0%0%d_L0%0%d=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A L0%0%d => A E0%0%d at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 4.46s, query:smt.: 2.03137s (num_starts 20; 0.1016s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 3.68849s (num_starts 6; 0.6147s/start)ftmap_run_pointsto_analysis.: 0.313432s (num_starts 2; 0.1567s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 1e-06s (num_starts 1; 0.0000s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 1e-06s (num_starts 1; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1e-06s (num_starts 1; 0.0000s/start)
ce_perform_memory_fuzzing.: 2e-06s (num_starts 2; 0.0000s/start)
prove_trivial.: 2e-06s (num_starts 1; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 3e-06s (num_starts 1; 0.0000s/start)
get_paths_with_matching_to_pc.: 3e-06s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 4e-06s (num_starts 4; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 1.3e-05s (num_starts 1; 0.0000s/start)
collect_dst_to_src_submap_preds.: 1.4e-05s (num_starts 6; 0.0000s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 1.5e-05s (num_starts 3; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 3.5e-05s (num_starts 1; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 4.1e-05s (num_starts 3; 0.0000s/start)
get_intersected_lr_status.: 4.6e-05s (num_starts 2; 0.0000s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 5.4e-05s (num_starts 19; 0.0000s/start)
get_lr_status_for_loc_ids.: 5.7e-05s (num_starts 20; 0.0000s/start)
graph_with_guessing_sync_preds.: 6.2e-05s (num_starts 6; 0.0000s/start)
determinize_value_expr_map.: 6.9e-05s (num_starts 23; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 7.1e-05s (num_starts 36; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 7.3e-05s (num_starts 29; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 7.5e-05s (num_starts 1; 0.0001s/start)
removeMostPromising.: 8e-05s (num_starts 4; 0.0000s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 8.9e-05s (num_starts 35; 0.0000s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 9.9e-05s (num_starts 2; 0.0000s/start)
proof_query_is_trivial_helper.: 0.000104s (num_starts 40; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000106s (num_starts 3; 0.0000s/start)
check_node_stability_after_CE_addition.: 0.000115s (num_starts 4; 0.0000s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.000119s (num_starts 19; 0.0000s/start)
lr_status_meet.: 0.000128s (num_starts 243; 0.0000s/start)
expr_is_hidden_reg.: 0.000137s (num_starts 205; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000138s (num_starts 1; 0.0001s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000139s (num_starts 1; 0.0001s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000147s (num_starts 35; 0.0000s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.000147s (num_starts 1; 0.0001s/start)
populate_locid2expr_map.: 0.000174s (num_starts 2; 0.0001s/start)
expr_is_callee_save_const.: 0.000186s (num_starts 217; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.000201s (num_starts 2; 0.0001s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.00021s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000215s (num_starts 1; 0.0002s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.000219s (num_starts 1; 0.0002s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000228s (num_starts 19; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000229s (num_starts 1; 0.0002s/start)
set_result_and_counter_example.: 0.000237s (num_starts 20; 0.0000s/start)
collect_assumes_around_edge.: 0.000242s (num_starts 1; 0.0002s/start)
collect_inductive_preds_around_path.: 0.000249s (num_starts 6; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.000288s (num_starts 1; 0.0003s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000308s (num_starts 40; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.00036s (num_starts 22; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000375s (num_starts 33; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000379s (num_starts 2; 0.0002s/start)
proof_query_is_trivial.: 0.000392s (num_starts 36; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000423s (num_starts 22; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000439s (num_starts 2; 0.0002s/start)
compute_sprel_relations.: 0.000456s (num_starts 2; 0.0002s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.000463s (num_starts 3; 0.0002s/start)
tfg::collect_assumes_around_edge.: 0.000464s (num_starts 45; 0.0000s/start)
propagate_sprels.: 0.000471s (num_starts 2; 0.0002s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.000473s (num_starts 3; 0.0002s/start)
parse_yices_model.: 0.000508s (num_starts 1; 0.0005s/start)
sp_version_relations_val_t::meet.: 0.000532s (num_starts 1012; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000563s (num_starts 1; 0.0006s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.000586s (num_starts 2; 0.0003s/start)
create_new_corr_graph_edge.new_node.: 0.000623s (num_starts 1; 0.0006s/start)
parse_cvc4_model.: 0.000661s (num_starts 1; 0.0007s/start)
cg_add_node.: 0.000666s (num_starts 2; 0.0003s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.000776s (num_starts 35; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000778s (num_starts 2; 0.0004s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000808s (num_starts 66; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.00081s (num_starts 64; 0.0000s/start)
create_new_corr_graph_edge.: 0.000847s (num_starts 1; 0.0008s/start)
graph_locs_add_all_llvmvars.: 0.000847s (num_starts 2; 0.0004s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000873s (num_starts 29; 0.0000s/start)
populate_simplified_to_state.: 0.000893s (num_starts 3; 0.0003s/start)
expr_represents_llvm_undef.: 0.000911s (num_starts 221; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.001052s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001053s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.001057s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.00106s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001064s (num_starts 1; 0.0011s/start)
create_closure_matrix.: 0.001068s (num_starts 83; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001068s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;outgoing_edges_cover_all_possibilities..: 0.001076s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.001082s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001088s (num_starts 1; 0.0011s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.001255s (num_starts 32; 0.0000s/start)
get_sprel_map_pair.: 0.001321s (num_starts 72; 0.0000s/start)
pth_collect_simplified_preds_using_atom_func.: 0.001328s (num_starts 8; 0.0002s/start)
tfg::populate_loc_definedness.before_solve.: 0.001349s (num_starts 3; 0.0004s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.001414s (num_starts 1; 0.0014s/start)
graph_locs_add_all_specvars.: 0.001415s (num_starts 2; 0.0007s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.001452s (num_starts 1; 0.0015s/start)
tfg::populate_loc_definedness.before_initialize.: 0.00169s (num_starts 3; 0.0006s/start)
tfg::populate_loc_definedness.: 0.001777s (num_starts 3; 0.0006s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.001857s (num_starts 12; 0.0002s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.001972s (num_starts 29; 0.0001s/start)
populate_branch_affecting_locs.: 0.002062s (num_starts 3; 0.0007s/start)
identify_address_taken_local_variables.: 0.002136s (num_starts 1; 0.0021s/start)
get_sprel_map_pair_at_pc.: 0.002212s (num_starts 35; 0.0001s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.002281s (num_starts 2; 0.0011s/start)
compute_ssa_vars_renaming_map.: 0.002349s (num_starts 2; 0.0012s/start)
apply_mask_and_overlay_array_constant.: 0.002404s (num_starts 2; 0.0012s/start)
create_sp_version_relations_lattice_at_pc.: 0.002435s (num_starts 83; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.002735s (num_starts 1; 0.0027s/start)
populate_simplified_assets.: 0.002749s (num_starts 6; 0.0005s/start)
populate_transitive_closure.: 0.002762s (num_starts 11; 0.0003s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.002778s (num_starts 48; 0.0001s/start)
graph_visit_exprs_and_keys.: 0.002841s (num_starts 2; 0.0014s/start)
graph_identify_back_edges.: 0.003011s (num_starts 16; 0.0002s/start)
graph_identify_natural_loops.: 0.003034s (num_starts 16; 0.0002s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.003132s (num_starts 32; 0.0001s/start)
graph_visit_exprs.: 0.003334s (num_starts 3; 0.0011s/start)
find_dominators.: 0.003451s (num_starts 20; 0.0002s/start)
get_next_potential_correlations.: 0.003561s (num_starts 1; 0.0036s/start)
collect_assumes_around_path_helper.: 0.003702s (num_starts 19; 0.0002s/start)
pth_collect_preds_using_atom_func.: 0.003717s (num_starts 64; 0.0001s/start)
graph_with_paths::collect_assumes_around_path.: 0.003769s (num_starts 19; 0.0002s/start)
expr_linear_relation_holds::visit.var.: 0.003815s (num_starts 221; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.003876s (num_starts 1236; 0.0000s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.003922s (num_starts 96; 0.0000s/start)
get_unrolled_paths_from.: 0.00395s (num_starts 6; 0.0007s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.004109s (num_starts 236; 0.0000s/start)
compute_vars_reaching_definitions.: 0.004146s (num_starts 2; 0.0021s/start)
counter_example_satisfies_preds.: 0.004436s (num_starts 60; 0.0001s/start)
aliasing_constraints.convert_to_expr.: 0.004632s (num_starts 35; 0.0001s/start)
tfg_edge_composition_get_assumes.: 0.004722s (num_starts 64; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.004864s (num_starts 72; 0.0001s/start)
populate_locs_potentially_modified_on_edge.: 0.005521s (num_starts 3; 0.0018s/start)
compute_regions.: 0.006555s (num_starts 16; 0.0004s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.007847s (num_starts 66; 0.0001s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.008283s (num_starts 3; 0.0028s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.00848s (num_starts 35; 0.0002s/start)
generate_aliasing_constraints_from_expr.: 0.009868s (num_starts 569; 0.0000s/start)
lhs_set_sort.: 0.012362s (num_starts 35; 0.0004s/start)
do_ssa_transformation.: 0.012543s (num_starts 2; 0.0063s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.012707s (num_starts 35; 0.0004s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.015259s (num_starts 66; 0.0002s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.016095s (num_starts 243; 0.0001s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.016288s (num_starts 40; 0.0004s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.016294s (num_starts 1; 0.0163s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.016394s (num_starts 243; 0.0001s/start)
compute_lr_status_for_expr.: 0.016835s (num_starts 310; 0.0001s/start)
expr_substitute_using_available_exprs_submap.: 0.017533s (num_starts 251; 0.0001s/start)
ce_reconcile_sorts.: 0.019594s (num_starts 5; 0.0039s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.019937s (num_starts 4; 0.0050s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.020807s (num_starts 10; 0.0021s/start)
tfg::get_aliasing_constraints_for_edge.: 0.022557s (num_starts 133; 0.0002s/start)
query:convert_from_z3.: 0.024606s (num_starts 326; 0.0001s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.026412s (num_starts 6; 0.0044s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.026432s (num_starts 6; 0.0044s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.027277s (num_starts 7; 0.0039s/start)
compute_new_lr_status_on_locs.: 0.028508s (num_starts 66; 0.0004s/start)
collect_aliasing_constraints_around_path_helper.: 0.02886s (num_starts 32; 0.0009s/start)
collect_aliasing_constraints_around_path.: 0.028944s (num_starts 20; 0.0014s/start)
counter_example_falsifies_preds.: 0.03045s (num_starts 4; 0.0076s/start)
parse_z3_model.: 0.031686s (num_starts 3; 0.0106s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.033045s (num_starts 66; 0.0005s/start)
read_counter_examples_from_channel.: 0.033372s (num_starts 2; 0.0167s/start)
put_smtlib_string_in_file.: 0.033556s (num_starts 40; 0.0008s/start)
tfg_relax_pointsto_vals_on_edge.: 0.033903s (num_starts 2; 0.0170s/start)
counter_example_evaluate_preds.: 0.034749s (num_starts 64; 0.0005s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.034872s (num_starts 66; 0.0005s/start)
query:convert_to_z3.: 0.035007s (num_starts 326; 0.0001s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.036838s (num_starts 50; 0.0007s/start)
computeWP_for_pred_across_ec.: 0.036979s (num_starts 50; 0.0007s/start)
graph_to_stream.: 0.03707s (num_starts 4; 0.0093s/start)
graph_ec_apply_trans_funs_helper.0.: 0.038224s (num_starts 62; 0.0006s/start)
graph_ec_apply_trans_funs_helper.: 0.038382s (num_starts 62; 0.0006s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.038493s (num_starts 62; 0.0006s/start)
edge_composition_apply_trans_funs_on_pred.: 0.043215s (num_starts 6; 0.0072s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.043598s (num_starts 10; 0.0044s/start)
guarded_predicate_set_and.: 0.044248s (num_starts 35; 0.0013s/start)
tfg_suffixpath_get_expr_helper.: 0.045845s (num_starts 20; 0.0023s/start)
avail_exprs_create_submap.: 0.047767s (num_starts 198; 0.0002s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.05202s (num_starts 35; 0.0015s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.068359s (num_starts 23; 0.0030s/start)
populate_loc_liveness.: 0.073426s (num_starts 3; 0.0245s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.074516s (num_starts 1463; 0.0001s/start)
query:simplify-z3.: 0.078191s (num_starts 684; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.081159s (num_starts 66; 0.0012s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.082167s (num_starts 1; 0.0822s/start)
tfg_postprocess_after_pointsto_analysis.: 0.08844s (num_starts 2; 0.0442s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.092354s (num_starts 4; 0.0231s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.092377s (num_starts 4; 0.0231s/start)
counter_example_translate_on_edge_composition_helper.: 0.112487s (num_starts 20; 0.0056s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113499s (num_starts 2; 0.0567s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113512s (num_starts 2; 0.0568s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113525s (num_starts 2; 0.0568s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113537s (num_starts 2; 0.0568s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.113549s (num_starts 2; 0.0568s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;-dst-edgecond-implies-src-edgecond.: 0.113556s (num_starts 2; 0.0568s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.113561s (num_starts 2; 0.0568s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.113568s (num_starts 2; 0.0568s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.118447s (num_starts 64; 0.0019s/start)
compute_z3_expr.: 0.128761s (num_starts 346; 0.0004s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.132091s (num_starts 99; 0.0013s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.148361s (num_starts 299; 0.0005s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.157849s (num_starts 1492; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.159462s (num_starts 1463; 0.0001s/start)
corr_graph::add_edge().: 0.163352s (num_starts 1; 0.1634s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.164737s (num_starts 1; 0.1647s/start)
corr_graph_add_correlation.: 0.164769s (num_starts 1; 0.1648s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.164795s (num_starts 1; 0.1648s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.185969s (num_starts 1463; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188372s (num_starts 1; 0.1884s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188373s (num_starts 1; 0.1884s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188374s (num_starts 1; 0.1884s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188375s (num_starts 1; 0.1884s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.188383s (num_starts 1; 0.1884s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.188386s (num_starts 1; 0.1884s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 0.188388s (num_starts 1; 0.1884s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.188391s (num_starts 1; 0.1884s/start)
decide_hoare_triple.: 0.197167s (num_starts 2; 0.0986s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.209738s (num_starts 64; 0.0033s/start)
dst_edge_composition_proves_false.: 0.209846s (num_starts 1; 0.2098s/start)
get_next_dst_edge_composition_to_correlate.: 0.210584s (num_starts 2; 0.1053s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.223359s (num_starts 35; 0.0064s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.301856s (num_starts 3; 0.1006s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.303068s (num_starts 4; 0.0758s/start)
ftmap_run_pointsto_analysis.: 0.313432s (num_starts 2; 0.1567s/start)
tfg_run_pointsto_analysis.: 0.313909s (num_starts 2; 0.1570s/start)
tfg_populate_structs_after_ssa_construction.: 0.368822s (num_starts 2; 0.1844s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.384355s (num_starts 2; 0.1922s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.43157s (num_starts 1; 0.4316s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.431571s (num_starts 1; 0.4316s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.431571s (num_starts 1; 0.4316s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.431572s (num_starts 1; 0.4316s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);-trivial.: 0.431572s (num_starts 1; 0.4316s/start)
decide_hoare_triple_helper;-trivial.: 0.432786s (num_starts 2; 0.2164s/start)
check_equivalence_proof.: 0.51064s (num_starts 1; 0.5106s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.06567s (num_starts 392; 0.0027s/start)
query:smt.: 2.03137s (num_starts 20; 0.1016s/start)
spawn_smt_query.: 2.06493s (num_starts 20; 0.1032s/start)
solver_provable.: 2.22478s (num_starts 35; 0.0636s/start)
expr_is_provable.: 2.24632s (num_starts 35; 0.0642s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 2.24673s (num_starts 35; 0.0642s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 2.24833s (num_starts 35; 0.0642s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 2.25378s (num_starts 35; 0.0644s/start)
solver_satisfiable-cache-miss.: 2.25703s (num_starts 20; 0.1129s/start)
solver_satisfiable.: 2.25722s (num_starts 36; 0.0627s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 2.3061s (num_starts 35; 0.0659s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 2.33479s (num_starts 35; 0.0667s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 2.33532s (num_starts 35; 0.0667s/start)
is_expr_equal_using_lhs_set_and_precond.: 2.78682s (num_starts 35; 0.0796s/start)
prove.: 2.7871s (num_starts 35; 0.0796s/start)
prove_spawn_and_join_helper.: 2.7873s (num_starts 35; 0.0796s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.95342s (num_starts 1; 2.9534s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.95343s (num_starts 1; 2.9534s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.95343s (num_starts 1; 2.9534s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.95344s (num_starts 1; 2.9534s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.95344s (num_starts 1; 2.9534s/start)
update_invariant_state_for_edges.: 3.03867s (num_starts 1; 3.0387s/start)
cg_check_new_cg_ec.: 3.03869s (num_starts 1; 3.0387s/start)
correl_entry_apply.: 3.03873s (num_starts 1; 3.0387s/start)
expandProductCFG.: 3.25299s (num_starts 2; 1.6265s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.25541s (num_starts 4; 0.8139s/start)
prove_spawn_and_join.: 3.34006s (num_starts 35; 0.0954s/start)
prove_wrapper.proof_query_not_trivial.: 3.34433s (num_starts 35; 0.0956s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown.: 3.38503s (num_starts 2; 1.6925s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 3.38503s (num_starts 2; 1.6925s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 3.38505s (num_starts 2; 1.6925s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown.: 3.38506s (num_starts 2; 1.6925s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d).: 3.38507s (num_starts 2; 1.6925s/start)
bestFirstSearch.: 3.46132s (num_starts 1; 3.4613s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 3.49945s (num_starts 4; 0.8749s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>E0%0%d_E0%0%d.: 3.52009s (num_starts 2; 1.7600s/start)
check_wfconds_on_edge.: 3.52011s (num_starts 2; 1.7601s/start)
check_preds_on_edge_compositions.: 3.52289s (num_starts 3; 1.1743s/start)
prove_wrapper.: 3.63853s (num_starts 36; 0.1011s/start)
decide_hoare_triple_check_ub.: 3.68573s (num_starts 6; 0.6143s/start)
decide_hoare_triple_helper.: 3.68849s (num_starts 6; 0.6147s/start)
decide_hoare_triple_with_alias_cons.: 3.68877s (num_starts 6; 0.6148s/start)
Time taken for equivalence check.: 3.97269s (num_starts 1; 3.9727s/start)

counters:
# of paths enumerated.: 1
# of paths expanded.: 1
# of smt-solver-queries.: 20
L0%0%d=>E0%0%d-src_ecs.: 1
L0%0%d=>E0%0%d-src_to_pcs.: 1
smt-queries-cache-hits.: 16
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 3
total-correlation-possibilities.: 2
total-correlation-possibilities-mod-lsprels.: 2
total-correlations-explored.: 2

flags:
dst-aloc.: 0
dst-edges.: 1
dst-nodes.: 2
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 1
final-CG-edges.: 1
final-CG-nodes.: 2
final-CG-num-invariants.: 0
final-CG-super-edges.: 0
src-edges.: 21
src-nodes.: 18
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 3.20
final-CG-time-to-total-time-ratio.: 0.93
query-time-to-total-time-ratio.: 0.58

Context stats:
exprs: count: 148684
sorts: count: 163
num_proof_queries: 110
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	7210
	        hit ratio:	0.95534
m_simplify_solver:
	----------- total:	2918
	        hit ratio:	0.877313
m_z3_solver_substitution:
	----------- total:	358
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	358
	        hit ratio:	0
m_expr_size:
	----------- total:	11570
	        hit ratio:	0.954192
m_contains_only_constants_or_sp_versions:
	----------- total:	8
	        hit ratio:	0.5
m_expr_evaluates_to_constant_visitor:
	----------- total:	8573
	        hit ratio:	0.757611

z3_solver expr_query_cache entry size: 20
	----------- total:	112
	             hits:	16
	        hit ratio:	0.142857
histogram (time taken by solver in ms):
[  30.0990,   43.3467) (avg.   33.9470)  : 3
[  43.3467,   62.4253) (avg.   46.1103)  : 15
[  62.4253,   89.9011) (avg.   83.5630)  : 1
[  89.9011,  129.4700) (avg.    0.0000)  : 0
[ 129.4700,  186.4548) (avg.    0.0000)  : 0
[ 186.4548,  268.5208) (avg.    0.0000)  : 0
[ 268.5208,  386.7072) (avg.    0.0000)  : 0
[ 386.7072,  556.9119) (avg.    0.0000)  : 0
[ 556.9119,  802.0304) (avg.    0.0000)  : 0
[ 802.0304, 1155.0350) (avg. 1154.0350)  : 1
histogram (number of quantifiers in query)
[0, 2) (avg. 0)                          : 1
[2, 3) (avg. 0)                          : 0
[3, 5) (avg. 4)                          : 19
[5, 6) (avg. 0)                          : 0
[6, 7) (avg. 0)                          : 0
[7, 9) (avg. 0)                          : 0
[9, 10) (avg. 0)                         : 0
[10, 12) (avg. 0)                        : 0
[12, 13) (avg. 0)                        : 0
[13, 14) (avg. 0)                        : 0
histogram (number of nodes in z3 ast)
[ 17,  52) (avg.  17)                    : 1
[ 52,  86) (avg.   0)                    : 0
[ 86, 120) (avg.   0)                    : 0
[120, 154) (avg.   0)                    : 0
[154, 188) (avg.   0)                    : 0
[188, 223) (avg.   0)                    : 0
[223, 257) (avg.   0)                    : 0
[257, 291) (avg. 261)                    : 1
[291, 325) (avg. 308)                    : 2
[325, 359) (avg. 347)                    : 16
Top 10 highest time taking queries:
1. [1.154s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_16.0
2. [0.084s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L0%0%d_L0%0%d.dstToPC.E0%0%d.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
3. [0.047s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem13_of_16.0
4. [0.047s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem1_of_16.0
5. [0.047s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem5_of_16.0
6. [0.047s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem6_of_16.0
7. [0.047s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem4_of_16.0
8. [0.046s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem10_of_16.0
9. [0.046s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem3_of_16.0
10. [0.046s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem7_of_16.0

<MSG>0:51 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 172 time spent: 0:0:0 [0.003658s total; 0.000021 per start]
tfg_computeWP: num_starts 501 time spent: 0:0:0 [0.068464s total; 0.000137 per start]
tfg_get_simplified_to_state_for_edge: num_starts 2623 time spent: 0:0:0 [0.004163s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 2567 time spent: 0:0:0 [0.004424s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 2554 time spent: 0:0:0 [0.003836s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 102 time spent: 0:0:0 [0.211344s total; 0.002072 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 12 time spent: 0:0:0 [0.283353s total; 0.023613 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 277 time spent: 0:0:0 [0.354261s total; 0.001279 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 105 time spent: 0:0:0 [0.140557s total; 0.001339 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 260 time spent: 0:0:0 [0.309488s total; 0.001190 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 1278 time spent: 0:0:0 [0.399787s total; 0.000313 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 261 time spent: 0:0:0 [0.011381s total; 0.000044 per start]
tfg_graph_get_vars_written_on_edge: num_starts 260 time spent: 0:0:0 [0.006291s total; 0.000024 per start]
cg_with_rank_add_CE_at_pc: num_starts 116 time spent: 0:0:0 [0.210741s total; 0.001817 per start]
graph_with_ce_add_CE_at_pc: num_starts 35 time spent: 0:0:0 [0.000770s total; 0.000022 per start]
graph_with_guessing_add_CE_at_pc: num_starts 116 time spent: 0:0:0 [0.210596s total; 0.001815 per start]
point_set_add_point_using_CE: num_starts 306 time spent: 0:0:0 [0.079313s total; 0.000259 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 306 time spent: 0:0:0 [0.080139s total; 0.000262 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 104 time spent: 0:0:0 [0.206422s total; 0.001985 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 104 time spent: 0:0:0 [0.124525s total; 0.001197 per start]
expr_label_memlabels_using_memlabel_map: num_starts 5649 time spent: 0:0:0 [0.178114s total; 0.000032 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 469 time spent: 0:0:0 [0.046960s total; 0.000100 per start]
expr_simplify_solver: num_starts 4964 time spent: 0:0:0 [0.352437s total; 0.000071 per start]
expr_simplify_syntactic: num_starts 5164 time spent: 0:0:1 [1.305626s total; 0.000253 per start]
expr_simplify_select_on_store: num_starts 433 time spent: 0:0:1 [1.116095s total; 0.002578 per start]
expr_simplify_using_lhs_set_helper: num_starts 932 time spent: 0:0:1 [1.765368s total; 0.001894 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 10106 time spent: 0:0:1 [1.755334s total; 0.000174 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 5714 time spent: 0:0:0 [0.018491s total; 0.000003 per start]
expr_simplify_eq: num_starts 496 time spent: 0:0:0 [0.007406s total; 0.000015 per start]
expr_simplify_or: num_starts 128 time spent: 0:0:0 [0.000106s total; 0.000001 per start]
expr_simplify_and: num_starts 762 time spent: 0:0:0 [0.004535s total; 0.000006 per start]
expr_simplify_andnot1: num_starts 14 time spent: 0:0:0 [0.000173s total; 0.000012 per start]
expr_simplify_not: num_starts 14 time spent: 0:0:0 [0.000041s total; 0.000003 per start]
expr_simplify_implies: num_starts 36 time spent: 0:0:0 [0.000321s total; 0.000009 per start]
canonicalize_expr_tree: num_starts 956 time spent: 0:0:0 [0.069729s total; 0.000073 per start]
expr_simplify_memalloc_using_memlabel: num_starts 31 time spent: 0:0:0 [0.000089s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 437 time spent: 0:0:1 [1.100300s total; 0.002518 per start]
get_arithmetic_addsub_atoms: num_starts 7291 time spent: 0:0:0 [0.004861s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 875 time spent: 0:0:0 [0.008393s total; 0.000010 per start]
expr_is_consts_struct_constant: num_starts 4050 time spent: 0:0:0 [0.002193s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 13379 time spent: 0:0:1 [1.340035s total; 0.000100 per start]
expr_do_simplify_helper_cache: num_starts 13379 time spent: 0:0:0 [0.011769s total; 0.000001 per start]
evaluate_expr_and_check_bounds: num_starts 1168 time spent: 0:0:0 [0.446478s total; 0.000382 per start]
array_constant_equals: num_starts 19811 time spent: 0:0:0 [0.022152s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 74 time spent: 0:0:0 [0.315262s total; 0.004260 per start]
alias_val_xfer_and_meet: num_starts 74 time spent: 0:0:0 [0.212649s total; 0.002874 per start]
get_sprel_map_from_avail_exprs: num_starts 103 time spent: 0:0:0 [0.010798s total; 0.000105 per start]
update_memlabels_for_memslot_locs: num_starts 25 time spent: 0:0:0 [0.000104s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 172 time spent: 0:0:0 [0.030088s total; 0.000175 per start]
compute_simplified_loc_exprs_for_edge: num_starts 446 time spent: 0:0:0 [0.236458s total; 0.000530 per start]
compute_locs_definitely_written_on_edge: num_starts 172 time spent: 0:0:0 [0.000328s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 54 time spent: 0:0:0 [0.022693s total; 0.000420 per start]
edge_update_memlabel_map_for_mlvars: num_starts 86 time spent: 0:0:0 [0.008581s total; 0.000100 per start]
add_new_locs_based_on_edge: num_starts 74 time spent: 0:0:0 [0.102400s total; 0.001384 per start]
expand_locset_to_include_slots_for_memmask: num_starts 74 time spent: 0:0:0 [0.000452s total; 0.000006 per start]
total: num_starts 1 time spent: 0:0:57 [57.226113s total; 57.226113 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 31.40s.
ftmap_run_pointsto_analysis.: 0.313432s (num_starts 2; 0.1567s/start)s.
EQ Time after pointsto analysis: 31.0862s.
EQ Time after pointsto analysis and smt_query: 27.4476s.
EQ Time after pointsto analysis and smt_query and bv-solve: 27.4476s.
Equivalence proof found. The programs are equivalent.
