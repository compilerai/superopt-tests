argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=fcall3.proof
argv[5] = --spec-iospecs=fcall3.iospecs
argv[6] = fcall3.spec
argv[7] = fcall3.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2889963
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/fcall3.c
argv[10] = -o
argv[11] = par_tmpdir/fcall3.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/fcall3.spec.etfg
argv[10] = par_tmpdir/fcall3.c.bc
argv[11] = -o
argv[12] = par_tmpdir/fcall3.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function bar</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 72 time spent: 0:0:0 [0.000100s total; 0.000001 per start]
tfg_get_simplified_assumes_for_edge: num_starts 148 time spent: 0:0:0 [0.000217s total; 0.000001 per start]
expr_label_memlabels_using_memlabel_map: num_starts 855 time spent: 0:0:0 [0.007091s total; 0.000008 per start]
expr_simplify_solver: num_starts 250 time spent: 0:0:0 [0.022422s total; 0.000090 per start]
expr_simplify_syntactic: num_starts 250 time spent: 0:0:0 [0.128068s total; 0.000512 per start]
expr_simplify_select_on_store: num_starts 16 time spent: 0:0:0 [0.038671s total; 0.002417 per start]
expr_simplify_using_lhs_set_helper: num_starts 214 time spent: 0:0:0 [0.159013s total; 0.000743 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 1127 time spent: 0:0:0 [0.158145s total; 0.000140 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 91 time spent: 0:0:0 [0.000329s total; 0.000004 per start]
canonicalize_expr_tree: num_starts 132 time spent: 0:0:0 [0.001952s total; 0.000015 per start]
expr_simplify_memalloc_using_memlabel: num_starts 24 time spent: 0:0:0 [0.000060s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 16 time spent: 0:0:0 [0.038038s total; 0.002377 per start]
get_arithmetic_addsub_atoms: num_starts 64 time spent: 0:0:0 [0.000073s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 132 time spent: 0:0:0 [0.001638s total; 0.000012 per start]
expr_is_consts_struct_constant: num_starts 754 time spent: 0:0:0 [0.000474s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 1960 time spent: 0:0:0 [0.161554s total; 0.000082 per start]
expr_do_simplify_helper_cache: num_starts 1960 time spent: 0:0:0 [0.001371s total; 0.000001 per start]
array_constant_equals: num_starts 115 time spent: 0:0:0 [0.000227s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 38 time spent: 0:0:0 [0.094137s total; 0.002477 per start]
alias_val_xfer_and_meet: num_starts 38 time spent: 0:0:0 [0.060613s total; 0.001595 per start]
get_sprel_map_from_avail_exprs: num_starts 70 time spent: 0:0:0 [0.006327s total; 0.000090 per start]
update_memlabels_for_memslot_locs: num_starts 28 time spent: 0:0:0 [0.000118s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 72 time spent: 0:0:0 [0.004817s total; 0.000067 per start]
compute_simplified_loc_exprs_for_edge: num_starts 328 time spent: 0:0:0 [0.139415s total; 0.000425 per start]
compute_locs_definitely_written_on_edge: num_starts 72 time spent: 0:0:0 [0.000056s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 54 time spent: 0:0:0 [0.023004s total; 0.000426 per start]
edge_update_memlabel_map_for_mlvars: num_starts 36 time spent: 0:0:0 [0.000901s total; 0.000025 per start]
add_new_locs_based_on_edge: num_starts 36 time spent: 0:0:0 [0.027721s total; 0.000770 per start]
alias_val_meet: num_starts 1 time spent: 0:0:0 [0.000066s total; 0.000066 per start]
expand_locset_to_include_slots_for_memmask: num_starts 54 time spent: 0:0:0 [0.000450s total; 0.000008 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_paths_constructor.src.spec.bar.: 0s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.bar.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 2e-06s (num_starts 3; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.bar.: 2e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 2e-06s (num_starts 2; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 2e-06s (num_starts 2; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 3e-06s (num_starts 2; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_loc_for_arg_expr.: 5e-06s (num_starts 2; 0.0000s/start)
graph_with_guessing_constructor.src.spec.bar.: 6e-06s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 3.3e-05s (num_starts 2; 0.0000s/start)
add_assumes_to_start_edge.: 3.4e-05s (num_starts 2; 0.0000s/start)
add_extra_node_at_start_pc.: 3.8e-05s (num_starts 2; 0.0000s/start)
context_constructor.solver.: 3.9e-05s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 4.5e-05s (num_starts 54; 0.0000s/start)
context_constructor.: 4.7e-05s (num_starts 1; 0.0000s/start)
expr_is_callee_save_const.: 5.7e-05s (num_starts 62; 0.0000s/start)
get_lr_status_for_loc_ids.: 6.2e-05s (num_starts 6; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_locs_in_fcall_edge.: 6.7e-05s (num_starts 2; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 8.1e-05s (num_starts 4; 0.0000s/start)
lr_status_meet.: 8.2e-05s (num_starts 70; 0.0000s/start)
identify_farg_memlabels_at_pc.calling.compute_lr_status_for_expr.: 8.5e-05s (num_starts 2; 0.0000s/start)
main.3.: 8.5e-05s (num_starts 1; 0.0001s/start)
get_memlabel_set_from_mlvarnames.: 0.000105s (num_starts 4; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000118s (num_starts 14; 0.0000s/start)
compute_reachable_memlabels_map.: 0.000133s (num_starts 1; 0.0001s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000207s (num_starts 4; 0.0001s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000218s (num_starts 14; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000225s (num_starts 4; 0.0001s/start)
graph_locs_add_all_specvars.: 0.000249s (num_starts 2; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000257s (num_starts 36; 0.0000s/start)
determinize_value_expr_map.: 0.000263s (num_starts 310; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_farg_memlabels_at_pc.: 0.000268s (num_starts 2; 0.0001s/start)
graph_locs_add_all_exvregs.: 0.000284s (num_starts 2; 0.0001s/start)
compute_sprel_relations.: 0.000289s (num_starts 2; 0.0001s/start)
expr_represents_llvm_undef.: 0.000299s (num_starts 66; 0.0000s/start)
propagate_sprels.: 0.000302s (num_starts 2; 0.0002s/start)
sp_version_relations_val_t::meet.: 0.000313s (num_starts 670; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000333s (num_starts 36; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000341s (num_starts 36; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000367s (num_starts 2; 0.0002s/start)
graph_with_aliasing_constructor.src.spec.bar.: 0.000376s (num_starts 1; 0.0004s/start)
populate_locid2expr_map.: 0.000432s (num_starts 4; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000436s (num_starts 2; 0.0002s/start)
tfg_get_write_memlabels.: 0.000537s (num_starts 2; 0.0003s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.00054s (num_starts 36; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000555s (num_starts 72; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_convert_caller_pointsto_value_to_callee_pointsto_value.: 0.000559s (num_starts 2; 0.0003s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000699s (num_starts 36; 0.0000s/start)
tfg_get_read_memlabels.: 0.000792s (num_starts 2; 0.0004s/start)
populate_exit_return_values_for_llvm_method.: 0.000807s (num_starts 2; 0.0004s/start)
graph_locs_add_all_llvmvars.: 0.000817s (num_starts 2; 0.0004s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000836s (num_starts 2; 0.0004s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000862s (num_starts 36; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.bar.: 0.000877s (num_starts 1; 0.0009s/start)
graph_with_locs_constructor.src.spec.bar.: 0.001041s (num_starts 1; 0.0010s/start)
canonicalize_llvm_nextpcs.: 0.001127s (num_starts 2; 0.0006s/start)
graph_visit_exprs_const.const.: 0.001198s (num_starts 4; 0.0003s/start)
expr_substitute_using_available_exprs_submap.: 0.001217s (num_starts 36; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.001224s (num_starts 66; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_update_callee_boundary_value.: 0.001265s (num_starts 2; 0.0006s/start)
get_summary_for_calling_functions.: 0.001355s (num_starts 2; 0.0007s/start)
create_closure_matrix.: 0.00136s (num_starts 64; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.compute_summary_function.: 0.001368s (num_starts 2; 0.0007s/start)
graph_with_simplified_assets_constructor.src.spec.bar.: 0.001379s (num_starts 1; 0.0014s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001448s (num_starts 2; 0.0007s/start)
tfg::collect_assumes_around_edge.: 0.001981s (num_starts 148; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.002017s (num_starts 2; 0.0010s/start)
graph_with_locs_constructor.src.spec.foo.: 0.002052s (num_starts 1; 0.0021s/start)
graph_with_predicates_constructor.src.spec.bar.: 0.002088s (num_starts 1; 0.0021s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.002142s (num_starts 749; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.002428s (num_starts 2; 0.0012s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002647s (num_starts 2; 0.0013s/start)
tfg_constructor.src.spec.bar.after_transitive_closure.: 0.002706s (num_starts 1; 0.0027s/start)
tfg_constructor.src.spec.bar.post_parsing.: 0.00271s (num_starts 1; 0.0027s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.002715s (num_starts 1; 0.0027s/start)
tfg_constructor.src.spec.bar.after_string_contents.: 0.002718s (num_starts 1; 0.0027s/start)
tfg_constructor.src.spec.bar.after_compute_max_memlabel_varnum.: 0.002721s (num_starts 1; 0.0027s/start)
tfg_constructor.src.spec.bar.: 0.002725s (num_starts 1; 0.0027s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002798s (num_starts 2; 0.0014s/start)
tfg_preprocess.dst.llvm.bar.: 0.002994s (num_starts 1; 0.0030s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.003219s (num_starts 38; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.003279s (num_starts 38; 0.0001s/start)
compute_lr_status_for_expr.: 0.003433s (num_starts 58; 0.0001s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.003454s (num_starts 1; 0.0035s/start)
tfg::populate_loc_definedness.before_solve.: 0.003547s (num_starts 4; 0.0009s/start)
compute_z3_expr.: 0.003777s (num_starts 120; 0.0000s/start)
query:convert_from_z3.: 0.003806s (num_starts 120; 0.0000s/start)
populate_transitive_closure.: 0.003962s (num_starts 2; 0.0020s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.003984s (num_starts 38; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.004034s (num_starts 4; 0.0010s/start)
tfg::populate_loc_definedness.: 0.004262s (num_starts 4; 0.0011s/start)
populate_branch_affecting_locs.: 0.004444s (num_starts 4; 0.0011s/start)
graph_visit_exprs.: 0.004462s (num_starts 8; 0.0006s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.005097s (num_starts 36; 0.0001s/start)
graph_identify_back_edges.: 0.005329s (num_starts 10; 0.0005s/start)
graph_identify_natural_loops.: 0.005358s (num_starts 10; 0.0005s/start)
populate_dominator_and_postdominator_relations.: 0.00586s (num_starts 4; 0.0015s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.005932s (num_starts 1; 0.0059s/start)
get_function_tfg_map.bar.: 0.006134s (num_starts 1; 0.0061s/start)
create_sp_version_relations_lattice_at_pc.: 0.006461s (num_starts 64; 0.0001s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.006628s (num_starts 1; 0.0066s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.007789s (num_starts 855; 0.0000s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.007906s (num_starts 37; 0.0002s/start)
tfg_preprocess.dst.llvm.foo.: 0.008185s (num_starts 1; 0.0082s/start)
query:convert_to_z3.: 0.008375s (num_starts 120; 0.0001s/start)
compute_regions.: 0.008684s (num_starts 10; 0.0009s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.009479s (num_starts 1; 0.0095s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.009482s (num_starts 1; 0.0095s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.009486s (num_starts 1; 0.0095s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.00949s (num_starts 1; 0.0095s/start)
tfg_constructor.src.spec.foo.: 0.009493s (num_starts 1; 0.0095s/start)
find_dominators.: 0.010488s (num_starts 18; 0.0006s/start)
avail_exprs_create_submap.: 0.011142s (num_starts 110; 0.0001s/start)
tfg::tfg_preprocess.: 0.011184s (num_starts 2; 0.0056s/start)
graph_to_stream.: 0.011983s (num_starts 2; 0.0060s/start)
get_function_tfg_map.foo.: 0.013217s (num_starts 1; 0.0132s/start)
populate_simplified_to_state.: 0.013557s (num_starts 6; 0.0023s/start)
query:simplify-z3.: 0.014995s (num_starts 252; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.015967s (num_starts 38; 0.0004s/start)
get_tfg.: 0.01928s (num_starts 2; 0.0096s/start)
get_function_tfg_map.: 0.019356s (num_starts 2; 0.0097s/start)
populate_simplified_assets.: 0.021477s (num_starts 12; 0.0018s/start)
main.2.: 0.024599s (num_starts 1; 0.0246s/start)
compute_new_lr_status_on_locs.: 0.031583s (num_starts 36; 0.0009s/start)
populate_locs_potentially_modified_on_edge.: 0.050057s (num_starts 6; 0.0083s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.060682s (num_starts 38; 0.0016s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.062446s (num_starts 34; 0.0018s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.071569s (num_starts 6; 0.0119s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.075065s (num_starts 72; 0.0010s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.082492s (num_starts 855; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.083479s (num_starts 855; 0.0001s/start)
populate_loc_liveness.: 0.086702s (num_starts 4; 0.0217s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.09177s (num_starts 855; 0.0001s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.159259s (num_starts 214; 0.0007s/start)
tfg_postprocess_after_pointsto_analysis.: 0.162958s (num_starts 2; 0.0815s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.17144s (num_starts 2; 0.0857s/start)
ftmap_run_pointsto_analysis.: 0.277803s (num_starts 1; 0.2778s/start)
parse_consts_db.: 6.06246s (num_starts 1; 6.0625s/start)
main.: 6.45019s (num_starts 1; 6.4502s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:13 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:20 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:20 : Reading in SPEC-LLVM I/O specification from file fcall3.iospecs...</MSG>
<MSG>0:20 : Computing equivalence for function: bar...</MSG>
<MSG>0:20 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:20 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:20 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:20 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:20 : Chose (after CE propagation) product-TFG bar (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:20 : product-TFG bar: Enumerating correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:20 : Considering 1 paths to src pc L2%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:20 : Attempting correlation of src pathset L0%0%d=>L2%1%fcallStart[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:20 : Found 1 feasible correlations for paths to src pc L2%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:20 : product-TFG bar: Found 1 correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:20 : product-TFG bar created 1 possibilities in group bar.A...</MSG>
<MSG>0:20 : Chose (for CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L2%1%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:20 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1...</MSG>
<MSG>0:20 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1...</MSG>
<MSG>0:20 : Creating ssa-path for the src-tfg path L0%0%d --> L2%1%fcallStart ending at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:20 : Adding a CG edge composition using the src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:20 : Identifying common alloc-deallocs in the src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart
</MSG>
<MSG>0:20 : Identified no common alloc-deallocs in the src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:20 : Adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L2%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Updating dst fcall edge using src fcall edge for toPC L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Computing loop hoisting select expressions at toPC L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Computing loop hoisting non-linear expressions at toPC L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Adding node L2%1%fcallStart_Lentry%1%fcallStart to the product-TFG...</MSG>
<MSG>0:20 : bar.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Adding edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:20 : bar.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:20 : bar.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:20 : bar.A1: Propagated 1 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart</MSG>
<MSG>0:20 : bar.A1: Added the 1 propagated CEs at PC L2%1%fcallStart_Lentry%1%fcallStart and propagated further.
</MSG>
<MSG>0:20 : bar.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:20 : bar.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:20 : bar.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : Done adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L2%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:20 : Done adding a CG edge composition using the src path L0%0%d --> L2%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:20 : Added correlation to the product-TFG bar.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:20 : Chose (after CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 1 counterexamples (for correlating 2 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L2%1%fcallStart[mu 1, delta {1,0}]
<MSG>0:20 : bar.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:20 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:20 : bar.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:20 : bar.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart), result: unchanged</MSG>
<MSG>0:20 : bar.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:20 : bar.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:20 : bar.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:21 : bar.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:21 : bar.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:21 : bar.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>0:21 : bar.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 2 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:22 : bar.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:22 : bar.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:22 : bar.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:22 : bar.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart), result: changed ...</MSG>
<MSG>0:22 : bar.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>0:22 : bar.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:22 : bar.A1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:22 : product-TFG bar.A1: Enumerating correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : Considering 1 paths to src pc L2%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : Attempting correlation of src pathset L2%1%fcallStart=>L2%1%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : Found 1 feasible correlations for paths to src pc L2%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : product-TFG bar.A1: Found 1 correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L2%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : product-TFG bar.A1 created 1 possibilities in group bar.A1.B...</MSG>
<MSG>0:22 : Chose (for CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L2%1%fcallStart=>L2%1%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:22 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:22 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:22 : Creating ssa-path for the src-tfg path L2%1%fcallStart --> L2%1%fcallEnd ending at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:22 : Adding a CG edge composition using the src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:22 : Identifying common alloc-deallocs in the src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd
</MSG>
<MSG>0:22 : Identified no common alloc-deallocs in the src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:22 : Adding new edge to the product-TFG bar.A1.B1 for fromPC L2%1%fcallStart_Lentry%1%fcallStart and toPC L2%1%fcallEnd_Lentry%1%fcallEnd, src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Computing loop hoisting select expressions at toPC L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Computing loop hoisting non-linear expressions at toPC L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Adding node L2%1%fcallEnd_Lentry%1%fcallEnd to the product-TFG...</MSG>
<MSG>0:22 : bar.A1.B1: Getting alloca-ptrs on edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Found no alloca-ptrs on edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Adding edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:22 : bar.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:22 : bar.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:22 : bar.A1.B1: Propagated 7 out of 7 counter-examples across edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd</MSG>
<MSG>0:22 : bar.A1.B1: Added the 7 propagated CEs at PC L2%1%fcallEnd_Lentry%1%fcallEnd and propagated further.
</MSG>
<MSG>0:22 : bar.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:22 : bar.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:22 : bar.A1.B1: Computing CG regions after the addition of the edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Done computing CG regions after the addition of the edge L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : Done adding new edge to the product-TFG bar.A1.B1 for fromPC L2%1%fcallStart_Lentry%1%fcallStart and toPC L2%1%fcallEnd_Lentry%1%fcallEnd, src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : Done adding a CG edge composition using the src path L2%1%fcallStart --> L2%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:22 : Added correlation to the product-TFG bar.A1.B1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 5 counterexamples (for correlating 3 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L2%1%fcallStart=>L2%1%fcallEnd[mu 1, delta {1,0}]
<MSG>0:22 : bar.A1.B1: Updating invariants over the newly added edges in edge composition L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:22 : Constructed infer_invariants_dfa with initial worklist L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:22 : bar.A1.B1: Relaxing dst graph's memlabels for edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:22 : bar.A1.B1: Done relaxing dst graph's memlabels for edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd), result: unchanged</MSG>
<MSG>0:22 : bar.A1.B1: Checking well-formedness assertions on outgoing edges from L2%1%fcallStart_Lentry%1%fcallStart ...</MSG>
<MSG>0:22 : bar.A1.B1: Relaxing invariants across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:22 : bar.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:22 : bar.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:22 : bar.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 3 exprs and 5 CEs across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:22 : bar.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:22 : bar.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 14 exprs and 1 CEs across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:24 : bar.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd). changed = 1 proof-stats=dht15-prove_trivial6-prove9...</MSG>
<MSG>0:24 : bar.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:24 : bar.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : bar.A1.B1: Done relaxing invariants across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd), result: changed ...</MSG>
<MSG>0:24 : bar.A1.B1: Done relaxing memlabels and invariants across the edge composition (L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>0:24 : bar.A1.B1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:24 : bar.A1.B1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:25 : product-TFG bar.A1.B1: Enumerating correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:25 : Considering 1 paths to src pc L2%3%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:25 : Attempting correlation of src pathset L2%1%fcallEnd=>L2%3%fcallStart[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:25 : Found 1 feasible correlations for paths to src pc L2%3%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:25 : product-TFG bar.A1.B1: Found 1 correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L2%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:25 : product-TFG bar.A1.B1 created 1 possibilities in group bar.A1.B1.C...</MSG>
<MSG>0:25 : Chose (for CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L2%1%fcallEnd=>L2%3%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:25 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>0:25 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>0:25 : Creating ssa-path for the src-tfg path L2%1%fcallEnd --> L2%3%fcallStart ending at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:25 : Adding a CG edge composition using the src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>0:25 : Identifying common alloc-deallocs in the src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart
</MSG>
<MSG>0:25 : Identified no common alloc-deallocs in the src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>0:25 : Adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L2%1%fcallEnd_Lentry%1%fcallEnd and toPC L2%3%fcallStart_Lentry%2%fcallStart, src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Computing loop hoisting select expressions at toPC L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Adding node L2%3%fcallStart_Lentry%2%fcallStart to the product-TFG...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Getting alloca-ptrs on edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Found no alloca-ptrs on edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Adding edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:25 : bar.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:25 : bar.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Propagated 0 out of 7 counter-examples across edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart</MSG>
<MSG>0:25 : bar.A1.B1.C1: Added the 0 propagated CEs at PC L2%3%fcallStart_Lentry%2%fcallStart and propagated further.
</MSG>
<MSG>0:25 : bar.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Computing CG regions after the addition of the edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Done computing CG regions after the addition of the edge L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:25 : Done adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L2%1%fcallEnd_Lentry%1%fcallEnd and toPC L2%3%fcallStart_Lentry%2%fcallStart, src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>0:25 : Done adding a CG edge composition using the src path L2%1%fcallEnd --> L2%3%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>0:25 : Added correlation to the product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:25 : Chose (after CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 0 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L2%1%fcallEnd=>L2%3%fcallStart[mu 1, delta {1,0}]
<MSG>0:25 : bar.A1.B1.C1: Updating invariants over the newly added edges in edge composition L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:25 : Constructed infer_invariants_dfa with initial worklist L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart), result: unchanged</MSG>
<MSG>0:25 : bar.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L2%1%fcallEnd_Lentry%1%fcallEnd ...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Relaxing invariants across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>0:25 : bar.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>0:26 : bar.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht8-prove_trivial1-prove7...</MSG>
<MSG>0:26 : bar.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 16 exprs and 1 CEs across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>0:29 : bar.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht17-prove_trivial6-prove11...</MSG>
<MSG>0:29 : bar.A1.B1.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>0:29 : bar.A1.B1.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : bar.A1.B1.C1: Done relaxing invariants across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart), result: changed ...</MSG>
<MSG>0:29 : bar.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>0:29 : bar.A1.B1.C1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:29 : bar.A1.B1.C1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:29 : product-TFG bar.A1.B1.C1: Enumerating correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:29 : Considering 1 paths to src pc L2%3%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:29 : Attempting correlation of src pathset L2%3%fcallStart=>L2%3%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:29 : Found 1 feasible correlations for paths to src pc L2%3%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:29 : product-TFG bar.A1.B1.C1: Found 1 correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L2%3%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>0:29 : product-TFG bar.A1.B1.C1 created 1 possibilities in group bar.A1.B1.C1.D...</MSG>
<MSG>0:29 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L2%3%fcallStart=>L2%3%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:29 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>0:29 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>0:29 : Creating ssa-path for the src-tfg path L2%3%fcallStart --> L2%3%fcallEnd ending at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:29 : Adding a CG edge composition using the src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>0:29 : Identifying common alloc-deallocs in the src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd
</MSG>
<MSG>0:29 : Identified no common alloc-deallocs in the src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>0:29 : Adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L2%3%fcallStart_Lentry%2%fcallStart and toPC L2%3%fcallEnd_Lentry%2%fcallEnd, src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Adding node L2%3%fcallEnd_Lentry%2%fcallEnd to the product-TFG...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Getting alloca-ptrs on edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Found no alloca-ptrs on edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Adding edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Propagated 8 out of 8 counter-examples across edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Added the 8 propagated CEs at PC L2%3%fcallEnd_Lentry%2%fcallEnd and propagated further.
</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Computing CG regions after the addition of the edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L2%3%fcallStart_Lentry%2%fcallStart and toPC L2%3%fcallEnd_Lentry%2%fcallEnd, src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : Done adding a CG edge composition using the src path L2%3%fcallStart --> L2%3%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>0:29 : Added correlation to the product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:29 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallStart => C L2%3%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallEnd, A (line 6 at column 10))
                L2%3%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 5 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L2%3%fcallStart=>L2%3%fcallEnd[mu 1, delta {1,0}]
<MSG>0:29 : bar.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:29 : Constructed infer_invariants_dfa with initial worklist L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd), result: unchanged</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L2%3%fcallStart_Lentry%2%fcallStart ...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Relaxing invariants across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 5 CEs across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:29 : bar.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 29 exprs and 1 CEs across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd)...</MSG>
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2889963/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.1.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2889963/decide_hoare_triple.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.path_hashb449485232d690ba517e3e857e4995b.pre0.0.gz
<MSG>0:48 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd). changed = 1 proof-stats=dht30-prove_trivial11-prove19...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd), result: changed ...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:48 : product-TFG bar.A1.B1.C1.D1: Enumerating correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:48 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:48 : Attempting correlation of src pathset L2%3%fcallEnd=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:48 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:48 : product-TFG bar.A1.B1.C1.D1: Found 1 correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L2%3%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>0:48 : product-TFG bar.A1.B1.C1.D1 created 1 possibilities in group bar.A1.B1.C1.D1.E...</MSG>
<MSG>0:48 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallStart => C L2%3%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallEnd, A (line 6 at column 10))
                L2%3%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L2%3%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:48 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>0:48 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>0:48 : Creating ssa-path for the src-tfg path L2%3%fcallEnd --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:48 : Adding a CG edge composition using the src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>0:48 : Identifying common alloc-deallocs in the src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d
</MSG>
<MSG>0:48 : Identified no common alloc-deallocs in the src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>0:48 : Adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L2%3%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Adding edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Propagated 0 out of 7 counter-examples across edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Added the 0 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:48 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L2%3%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>0:48 : Done adding a CG edge composition using the src path L2%3%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>0:48 : Added correlation to the product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:48 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallStart => C L2%3%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L2%3%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 6 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallEnd, A (line 6 at column 10))
                L2%3%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L2%3%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Updating invariants over the newly added edges in edge composition L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:48 : Constructed infer_invariants_dfa with initial worklist L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L2%3%fcallEnd_Lentry%2%fcallEnd ...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1: Done relaxing memlabels and invariants across the edge composition (L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:48 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:48 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:48 : Checking equivalence proof...</MSG>
<MSG>0:49 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L2%1%fcallStart_Lentry%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [2]: 2-->input.dst.llvm-%m1 ; 3-->input.dst.llvm-%m2 ; 
    2 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%m2, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%m1, 1, 0)
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce3      1.:z3v487.ce12      2.:z3.ce13      3.:z3v487.ce40      4.:z3v487.ce26
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [2]: 4-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 5-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      1.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

L2%1%fcallEnd_Lentry%1%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [3]: 3-->input.dst.llvm-%m2 ; 6-->input.spec-%tmpvar-24.L2%1%fcallEnd ; 7-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 
    1 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%m2, 1, 0)
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce3      1.:z3v487.ce12      2.:z3.ce13      3.:z3v487.ce40      4.:z3v487.ce26
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [14]: 4-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 5-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 8-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 9-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 10-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 11-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 12-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 13-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 14-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 15-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 16-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 17-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 18-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 19-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 
    6 preds:
      0.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      1.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      2.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      3.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      4.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      5.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

L2%3%fcallStart_Lentry%2%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 3-->input.dst.llvm-%m2 ; 6-->input.spec-%tmpvar-24.L2%1%fcallEnd ; 7-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 20-->input.spec-%var-fi-0.L2%3%fcallStart ; 
    3 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%tmpvar-24.L2%1%fcallEnd))  ==  input.spec-%var-fi-0.L2%3%fcallStart
      1.: bvneg(bvmul(4294967295, input.spec-%tmpvar-24.L2%1%fcallEnd))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
      2.: 0                     ==  bvextract(input.dst.llvm-%m2, 1, 0)
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce243      1.:z3v487.ce261      2.:z3.ce279      3.:z3.ce315      4.:z3v487.ce297      5.:z3v487.ce333
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [16]: 4-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 5-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 8-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 9-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 10-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 11-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 12-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 13-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 14-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 15-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 16-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 17-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 18-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 19-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 21-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 22-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 
    6 preds:
      0.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      1.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      2.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      3.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      4.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      5.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243

L2%3%fcallEnd_Lentry%2%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 6-->input.spec-%tmpvar-24.L2%1%fcallEnd ; 7-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 20-->input.spec-%var-fi-0.L2%3%fcallStart ; 23-->input.spec-%tmpvar-25.L2%3%fcallEnd ; 24-->input.dst.llvm-%call1.Lentry%2%fcallEnd ; 
    2 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%tmpvar-24.L2%1%fcallEnd))  ==  input.spec-%var-fi-0.L2%3%fcallStart
      1.: bvneg(bvmul(4294967295, input.spec-%tmpvar-24.L2%1%fcallEnd))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce243      1.:z3v487.ce261      2.:z3.ce279      3.:z3.ce315      4.:z3v487.ce297
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [29]: 4-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 5-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 8-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 9-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 10-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 11-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 12-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 13-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 15-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 16-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 17-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 18-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 25-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 26-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false)))) ; 27-->eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 28-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 29-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 30-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 31-->eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 32-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 33-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 34-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 35-->eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false)))) ; 36-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 37-->eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 38-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 39-->eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 40-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call.Lentry%1%fcallEnd), 4, false)))) ; 41-->eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%call1.Lentry%2%fcallEnd), 4, false)))) ; 
    11 preds:
      0.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      1.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      2.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      3.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      4.: eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      5.: eq(input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      6.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      7.: eq(input.spec-%var-m2-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      8.: eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
      9.: eq(input.spec-%var-m1-1, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m1), 4, false))))  ==  true
      10.: eq(input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd, map(lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, 100))), lambda(Lambda1Var, select(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap, bvadd(bvmul(Lambda1Var, 4), input.dst.llvm-%m2), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce243

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L2%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallStart => C L2%1%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart (C L2%1%fcallEnd => C L2%3%fcallStart at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallStart => C L2%3%fcallEnd at mu 1 delta {1,0}, A (line 6 at column 10) => A (line 6 at column 10) at mu 1 delta {1,0})
            L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L2%3%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 6 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L2%1%fcallStart_Lentry%1%fcallStart (C L2%1%fcallStart, A (line 6 at column 10))
                L2%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 7 counterexamples (for correlating 2 bv exprs)
            L2%1%fcallEnd_Lentry%1%fcallEnd (C L2%1%fcallEnd, A (line 6 at column 10))
                L2%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 3 bv exprs)
            L2%3%fcallStart_Lentry%2%fcallStart (C L2%3%fcallStart, A (line 6 at column 10))
                L2%3%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 8 counterexamples (for correlating 4 bv exprs)
            L2%3%fcallEnd_Lentry%2%fcallEnd (C L2%3%fcallEnd, A (line 6 at column 10))
                L2%3%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function bar. 28.85s, query:smt.: 21.159s (num_starts 60; 0.3526s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 27.7607s (num_starts 143; 0.1941s/start)ftmap_run_pointsto_analysis.: 0.162153s (num_starts 2; 0.0811s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 3e-06s (num_starts 5; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 3e-06s (num_starts 4; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 6e-06s (num_starts 5; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 7e-06s (num_starts 5; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 9e-06s (num_starts 12; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 9e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L2%1%fcallStart_Lentry%1%fcallStart.: 9e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L2%1%fcallEnd_Lentry%1%fcallEnd.: 1e-05s (num_starts 1; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.1e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L2%3%fcallStart_Lentry%2%fcallStart.: 1.1e-05s (num_starts 1; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.2e-05s (num_starts 5; 0.0000s/start)
prune_dst_memslots.: 1.3e-05s (num_starts 4; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 1.5e-05s (num_starts 23; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 1.7e-05s (num_starts 5; 0.0000s/start)
determinize_value_expr_map.: 2.7e-05s (num_starts 15; 0.0000s/start)
get_intersected_lr_status.: 2.7e-05s (num_starts 2; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 3.8e-05s (num_starts 3; 0.0000s/start)
lr_status_meet.: 4e-05s (num_starts 70; 0.0000s/start)
prove_trivial.: 4.4e-05s (num_starts 69; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 4.5e-05s (num_starts 5; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 5e-05s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 6.1e-05s (num_starts 89; 0.0000s/start)
get_lr_status_for_loc_ids.: 6.1e-05s (num_starts 18; 0.0000s/start)
sp_version_relations_val_t::meet.: 6.1e-05s (num_starts 134; 0.0000s/start)
remove_complex_bv_exprs.: 6.5e-05s (num_starts 4; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 7.1e-05s (num_starts 4; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 7.5e-05s (num_starts 3; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 8.4e-05s (num_starts 5; 0.0000s/start)
ce_perform_memory_fuzzing.: 8.6e-05s (num_starts 92; 0.0000s/start)
expr_is_callee_save_const.: 8.8e-05s (num_starts 101; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 9.8e-05s (num_starts 11; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 9.9e-05s (num_starts 3; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000102s (num_starts 5; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000117s (num_starts 10; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000123s (num_starts 2; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000128s (num_starts 10; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000133s (num_starts 4; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000152s (num_starts 10; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000161s (num_starts 2; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.000167s (num_starts 15; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000174s (num_starts 143; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart.: 0.00018s (num_starts 2; 0.0001s/start)
compute_sprel_relations.: 0.000186s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000194s (num_starts 2; 0.0001s/start)
collect_dst_to_src_submap_preds.: 0.000222s (num_starts 143; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000224s (num_starts 18; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000225s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.00023s (num_starts 1; 0.0002s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.00024s (num_starts 98; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L2%3%fcallEnd_Lentry%2%fcallEnd.inductive-invariants.: 0.000252s (num_starts 2; 0.0001s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000261s (num_starts 4; 0.0001s/start)
pth_collect_preds_using_atom_func.: 0.000262s (num_starts 16; 0.0000s/start)
compute_bv_bool_eqclass.: 0.000289s (num_starts 4; 0.0001s/start)
tfg_edge_composition_get_assumes.: 0.000305s (num_starts 16; 0.0000s/start)
populate_locid2expr_map.: 0.000306s (num_starts 2; 0.0002s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000307s (num_starts 20; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000308s (num_starts 25; 0.0000s/start)
aliasing_constraints.convert_to_expr.: 0.000313s (num_starts 74; 0.0000s/start)
removeMostPromising.: 0.000315s (num_starts 16; 0.0000s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.00032s (num_starts 10; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000327s (num_starts 1; 0.0003s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000335s (num_starts 1; 0.0003s/start)
expr_represents_llvm_undef.: 0.000336s (num_starts 105; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000338s (num_starts 2; 0.0002s/start)
create_closure_matrix.: 0.000345s (num_starts 28; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.00035s (num_starts 1; 0.0003s/start)
proof_query_is_trivial_helper.: 0.000353s (num_starts 143; 0.0000s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.000386s (num_starts 10; 0.0000s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000388s (num_starts 11; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000414s (num_starts 104; 0.0000s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000421s (num_starts 74; 0.0000s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000428s (num_starts 4; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000492s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000492s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000495s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000497s (num_starts 1; 0.0005s/start)
graph_locs_add_all_specvars.: 0.00051s (num_starts 2; 0.0003s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000511s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000512s (num_starts 1; 0.0005s/start)
tfg::populate_loc_definedness.before_solve.: 0.000567s (num_starts 3; 0.0002s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000581s (num_starts 20; 0.0000s/start)
populate_branch_affecting_locs.: 0.000631s (num_starts 3; 0.0002s/start)
generate_aliasing_constraints_from_expr.: 0.000664s (num_starts 214; 0.0000s/start)
compute_ssa_vars_renaming_map.: 0.000673s (num_starts 2; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.000682s (num_starts 1; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.000684s (num_starts 1; 0.0007s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000691s (num_starts 152; 0.0000s/start)
compute_vars_reaching_definitions.: 0.000705s (num_starts 2; 0.0004s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.000707s (num_starts 17; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.000712s (num_starts 1; 0.0007s/start)
graph_visit_exprs.: 0.000713s (num_starts 3; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.000714s (num_starts 1; 0.0007s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.000717s (num_starts 74; 0.0000s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000724s (num_starts 8; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear;-trivial.: 0.000839s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.00084s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.000842s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear.: 0.000845s (num_starts 1; 0.0008s/start)
tfg::populate_loc_definedness.before_initialize.: 0.000861s (num_starts 3; 0.0003s/start)
tfg_suffixpath_get_expr_helper.: 0.000866s (num_starts 24; 0.0000s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.000898s (num_starts 188; 0.0000s/start)
collect_assumes_around_edge.: 0.000909s (num_starts 5; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000913s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000919s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000921s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000929s (num_starts 1; 0.0009s/start)
tfg::populate_loc_definedness.: 0.000932s (num_starts 3; 0.0003s/start)
invariant_inference_xfer.expr-group-bvs.from.L2%1%fcallStart_Lentry%1%fcallStart.: 0.000951s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.00097s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.000973s (num_starts 1; 0.0010s/start)
get_unrolled_loop_paths_from.: 0.000977s (num_starts 4; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.000993s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.000995s (num_starts 1; 0.0010s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.000996s (num_starts 8; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001026s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001028s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001031s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001032s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.001035s (num_starts 1; 0.0010s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001038s (num_starts 8; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00104s (num_starts 1; 0.0010s/start)
populate_transitive_closure.: 0.001067s (num_starts 17; 0.0001s/start)
graph_visit_exprs_and_keys.: 0.001079s (num_starts 2; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-trivial.: 0.001146s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.001148s (num_starts 1; 0.0011s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.001172s (num_starts 5; 0.0002s/start)
parse_yices_model.: 0.001201s (num_starts 1; 0.0012s/start)
proof_query_is_trivial.: 0.001243s (num_starts 143; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001306s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001308s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001327s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001329s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001331s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001331s (num_starts 1; 0.0013s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.001332s (num_starts 102; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.001334s (num_starts 1; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.001335s (num_starts 1; 0.0013s/start)
set_result_and_counter_example.: 0.001355s (num_starts 60; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001388s (num_starts 2; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00139s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001393s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001396s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001401s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001401s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001404s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.001406s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.001411s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.001416s (num_starts 2; 0.0007s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.001438s (num_starts 15; 0.0001s/start)
identify_address_taken_local_variables.: 0.001463s (num_starts 3; 0.0005s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001465s (num_starts 4; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001535s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001538s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001551s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001553s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001556s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.001559s (num_starts 1; 0.0016s/start)
find_dominators.: 0.001581s (num_starts 29; 0.0001s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L2%1%fcallStart_Lentry%1%fcallStart.: 0.001604s (num_starts 1; 0.0016s/start)
tfg::get_aliasing_constraints_for_edge.: 0.001643s (num_starts 57; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.001667s (num_starts 5; 0.0003s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.00169s (num_starts 74; 0.0000s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.001761s (num_starts 188; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.001801s (num_starts 2; 0.0009s/start)
parse_cvc4_model.: 0.001812s (num_starts 1; 0.0018s/start)
graph_identify_back_edges.: 0.001818s (num_starts 25; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.001831s (num_starts 2; 0.0009s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L2%3%fcallStart_Lentry%2%fcallStart.: 0.001832s (num_starts 1; 0.0018s/start)
graph_identify_natural_loops.: 0.001878s (num_starts 25; 0.0001s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.001898s (num_starts 98; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.002018s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.002048s (num_starts 2; 0.0010s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.002059s (num_starts 24; 0.0001s/start)
populate_locs_potentially_modified_on_edge.: 0.002112s (num_starts 3; 0.0007s/start)
graph_with_guessing_sync_preds.: 0.002115s (num_starts 143; 0.0000s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.002128s (num_starts 24; 0.0001s/start)
bv_const_ref_map2expr_map.: 0.002224s (num_starts 77; 0.0000s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);-trivial.: 0.0023s (num_starts 3; 0.0008s/start)
construct_linear_combination_exprs.: 0.002358s (num_starts 77; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.002365s (num_starts 117; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear;-trivial.: 0.002374s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.002376s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear.: 0.002382s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear.: 0.002387s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.002463s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear.: 0.002468s (num_starts 2; 0.0012s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.002503s (num_starts 4; 0.0006s/start)
check_wfconds_on_edge.L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd.: 0.002553s (num_starts 2; 0.0013s/start)
check_node_stability_after_CE_addition.: 0.002563s (num_starts 108; 0.0000s/start)
invariant_inference_xfer.expr-group-bvs.from.L2%3%fcallStart_Lentry%2%fcallStart.: 0.002572s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002624s (num_starts 2; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.002656s (num_starts 2; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002722s (num_starts 2; 0.0014s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.002752s (num_starts 152; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002762s (num_starts 2; 0.0014s/start)
bv_expr_pair_ranges_merge_adjacent.: 0.002883s (num_starts 102; 0.0000s/start)
collect_aliasing_constraints_around_path_helper.: 0.002905s (num_starts 134; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002937s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002947s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002954s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002975s (num_starts 1; 0.0030s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);-trivial.: 0.003045s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00308s (num_starts 2; 0.0015s/start)
check_wfconds_on_edge.L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd.: 0.003086s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003111s (num_starts 2; 0.0016s/start)
do_ssa_transformation.: 0.003234s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.003247s (num_starts 29; 0.0001s/start)
create_sp_version_relations_lattice_at_pc.: 0.003317s (num_starts 28; 0.0001s/start)
collect_aliasing_constraints_around_path.: 0.00336s (num_starts 86; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.003528s (num_starts 1; 0.0035s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.003649s (num_starts 20; 0.0002s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.003708s (num_starts 5; 0.0007s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.003734s (num_starts 8; 0.0005s/start)
get_next_potential_correlations.: 0.003735s (num_starts 5; 0.0007s/start)
ldr_decomposition.: 0.003845s (num_starts 98; 0.0000s/start)
cg_src_dst_tfg_copy.: 0.004062s (num_starts 2; 0.0020s/start)
compute_regions.: 0.004095s (num_starts 25; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004166s (num_starts 3; 0.0014s/start)
get_sprel_map_pair_at_pc.: 0.004237s (num_starts 74; 0.0001s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.004318s (num_starts 103; 0.0000s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.004319s (num_starts 2; 0.0022s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.004625s (num_starts 152; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.004652s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.004804s (num_starts 4; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);linear.: 0.004878s (num_starts 4; 0.0012s/start)
expr_substitute_using_available_exprs_submap.: 0.005404s (num_starts 70; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.005626s (num_starts 343; 0.0000s/start)
get_mask_ranges_for_memlabel.: 0.005705s (num_starts 55; 0.0001s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.006293s (num_starts 395; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.006331s (num_starts 6; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 0.006343s (num_starts 6; 0.0011s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.006769s (num_starts 5; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.006777s (num_starts 5; 0.0014s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.006787s (num_starts 20; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities..: 0.006825s (num_starts 5; 0.0014s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.006844s (num_starts 5; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-trivial.: 0.006939s (num_starts 4; 0.0017s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.007158s (num_starts 395; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-trivial.: 0.007159s (num_starts 6; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.007167s (num_starts 6; 0.0012s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.008398s (num_starts 567; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008436s (num_starts 6; 0.0014s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.008859s (num_starts 294; 0.0000s/start)
get_unrolled_paths_from.: 0.008967s (num_starts 36; 0.0002s/start)
populate_simplified_to_state.: 0.009105s (num_starts 3; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.009494s (num_starts 6; 0.0016s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.009511s (num_starts 20; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 0.009527s (num_starts 6; 0.0016s/start)
populate_simplified_assets.: 0.009696s (num_starts 6; 0.0016s/start)
avail_exprs_create_submap.: 0.010122s (num_starts 60; 0.0002s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.011284s (num_starts 8; 0.0014s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.011781s (num_starts 551; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.011819s (num_starts 3; 0.0039s/start)
output_lhs_set_guard_etc_and_src_dst_to_file.: 0.011822s (num_starts 1; 0.0118s/start)
counter_example_satisfies_preds.: 0.01225s (num_starts 310; 0.0000s/start)
prove_dump_to_file.: 0.012397s (num_starts 1; 0.0124s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.01266s (num_starts 98; 0.0001s/start)
pth_collect_simplified_preds_using_atom_func.: 0.013196s (num_starts 535; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.01322s (num_starts 98; 0.0001s/start)
ldr_decompose_and_linear_solve.: 0.014121s (num_starts 98; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.014147s (num_starts 1; 0.0141s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.01415s (num_starts 1; 0.0141s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-trivial.: 0.014153s (num_starts 1; 0.0142s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.014155s (num_starts 1; 0.0142s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.014335s (num_starts 1; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.014339s (num_starts 1; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.014342s (num_starts 1; 0.0143s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.014822s (num_starts 11; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 0.014852s (num_starts 11; 0.0014s/start)
predicate_canonicalized.: 0.01518s (num_starts 77; 0.0002s/start)
bv_linear_solve.: 0.015647s (num_starts 98; 0.0002s/start)
query:bv_solve.: 0.016187s (num_starts 98; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.016597s (num_starts 12; 0.0014s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.016839s (num_starts 1062; 0.0000s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-trivial.: 0.01727s (num_starts 2; 0.0086s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.018501s (num_starts 343; 0.0001s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.018644s (num_starts 74; 0.0003s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.018948s (num_starts 5; 0.0038s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.019722s (num_starts 20; 0.0010s/start)
graph_to_stream.: 0.019893s (num_starts 7; 0.0028s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.0206s (num_starts 495; 0.0000s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.021s (num_starts 190; 0.0001s/start)
bv_solve_returning_intermediate_structures.: 0.021646s (num_starts 98; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.02197s (num_starts 1; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.021975s (num_starts 1; 0.0220s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.022685s (num_starts 343; 0.0001s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.022924s (num_starts 190; 0.0001s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-trivial.: 0.023125s (num_starts 1; 0.0231s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.023127s (num_starts 1; 0.0231s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.023131s (num_starts 1; 0.0231s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.02314s (num_starts 10; 0.0023s/start)
query:convert_from_z3.: 0.023239s (num_starts 430; 0.0001s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-trivial.: 0.023359s (num_starts 2; 0.0117s/start)
collect_assumes_around_path_helper.: 0.023401s (num_starts 188; 0.0001s/start)
graph_with_paths::collect_assumes_around_path.: 0.0239s (num_starts 188; 0.0001s/start)
bvsolve_cache_query.miss1.: 0.02532s (num_starts 98; 0.0003s/start)
gen_pred_from_coeff_row.simplify.: 0.026431s (num_starts 77; 0.0003s/start)
bvsolve_cache_query.: 0.027093s (num_starts 98; 0.0003s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.02892s (num_starts 74; 0.0004s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.031306s (num_starts 15; 0.0021s/start)
compute_expr_eqclasses_at_pc.: 0.03527s (num_starts 4; 0.0088s/start)
populate_loc_liveness.: 0.035985s (num_starts 3; 0.0120s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.03616s (num_starts 6; 0.0060s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.036309s (num_starts 2; 0.0182s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.036311s (num_starts 2; 0.0182s/start)
cg_add_node.: 0.036448s (num_starts 6; 0.0061s/start)
query:convert_to_z3.: 0.037226s (num_starts 430; 0.0001s/start)
tfg_relax_pointsto_vals_on_edge.: 0.037672s (num_starts 10; 0.0038s/start)
solve_for_bv_points.: 0.037915s (num_starts 98; 0.0004s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);-trivial.: 0.038094s (num_starts 17; 0.0022s/start)
graph_ec_apply_trans_funs_helper.0.: 0.039682s (num_starts 395; 0.0001s/start)
counter_example_falsifies_preds.: 0.040484s (num_starts 89; 0.0005s/start)
graph_ec_apply_trans_funs_helper.: 0.041682s (num_starts 403; 0.0001s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.042625s (num_starts 403; 0.0001s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.043837s (num_starts 403; 0.0001s/start)
create_new_corr_graph_edge.new_node.: 0.044553s (num_starts 5; 0.0089s/start)
computeWP_for_pred_across_ec.: 0.04491s (num_starts 403; 0.0001s/start)
create_new_corr_graph_edge.: 0.045941s (num_starts 5; 0.0092s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.046259s (num_starts 98; 0.0005s/start)
gen_pred_from_coeff_row.: 0.048755s (num_starts 77; 0.0006s/start)
compute_preds_for_bv_points.: 0.04958s (num_starts 29; 0.0017s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.049714s (num_starts 33; 0.0015s/start)
lhs_set_sort.: 0.050496s (num_starts 74; 0.0007s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.050651s (num_starts 1; 0.0507s/start)
tfg_postprocess_after_pointsto_analysis.: 0.050727s (num_starts 2; 0.0254s/start)
counter_example_evaluate_preds.: 0.051801s (num_starts 399; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.053937s (num_starts 1; 0.0539s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.053959s (num_starts 1; 0.0540s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.053972s (num_starts 1; 0.0540s/start)
edge_composition_apply_trans_funs_on_pred.: 0.054307s (num_starts 143; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-trivial.: 0.055434s (num_starts 26; 0.0021s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.056301s (num_starts 190; 0.0003s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.056819s (num_starts 392; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess.: 0.058173s (num_starts 4; 0.0145s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066803s (num_starts 1; 0.0668s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.066824s (num_starts 1; 0.0668s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.06685s (num_starts 1; 0.0669s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.066861s (num_starts 1; 0.0669s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond.: 0.066866s (num_starts 1; 0.0669s/start)
compute_lr_status_for_expr.: 0.076278s (num_starts 73; 0.0010s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.076525s (num_starts 70; 0.0011s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.076648s (num_starts 70; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07753s (num_starts 1; 0.0775s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077543s (num_starts 1; 0.0775s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077574s (num_starts 1; 0.0776s/start)
query:simplify-z3.: 0.079931s (num_starts 950; 0.0001s/start)
add_fresh_counterexample_at_pc_and_propagate.L2%1%fcallEnd_Lentry%1%fcallEnd.inductive-invariants.: 0.080213s (num_starts 36; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.081229s (num_starts 2; 0.0406s/start)
check_wfconds_on_edge.L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart.: 0.082245s (num_starts 2; 0.0411s/start)
put_smtlib_string_in_file.: 0.083672s (num_starts 120; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.084156s (num_starts 11; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-trivial.: 0.084824s (num_starts 12; 0.0071s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08961s (num_starts 1; 0.0896s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089616s (num_starts 1; 0.0896s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.089634s (num_starts 1; 0.0896s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.090396s (num_starts 17; 0.0053s/start)
add_fresh_counterexample_at_pc_and_propagate.L2%1%fcallStart_Lentry%1%fcallStart.inductive-invariants.: 0.091524s (num_starts 14; 0.0065s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.093971s (num_starts 10; 0.0094s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);-trivial.: 0.094786s (num_starts 21; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.095356s (num_starts 1; 0.0954s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.095364s (num_starts 1; 0.0954s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.095374s (num_starts 1; 0.0954s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess.: 0.095377s (num_starts 1; 0.0954s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.095731s (num_starts 1; 0.0957s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.099564s (num_starts 2; 0.0498s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.099585s (num_starts 2; 0.0498s/start)
collect_inductive_preds_around_path.: 0.101934s (num_starts 143; 0.0007s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.105829s (num_starts 10; 0.0106s/start)
compute_new_lr_status_on_locs.: 0.107006s (num_starts 20; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.11279s (num_starts 2; 0.0564s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.112826s (num_starts 2; 0.0564s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d).: 0.11284s (num_starts 2; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond.: 0.113918s (num_starts 3; 0.0380s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.120303s (num_starts 2; 0.0602s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear.: 0.120325s (num_starts 2; 0.0602s/start)
corr_graph::add_edge().: 0.124511s (num_starts 5; 0.0249s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.125242s (num_starts 2; 0.0626s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.125255s (num_starts 2; 0.0626s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 0.125276s (num_starts 2; 0.0626s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown.: 0.125287s (num_starts 2; 0.0626s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.128381s (num_starts 17; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-trivial.: 0.129391s (num_starts 18; 0.0072s/start)
decide_hoare_triple_dump_to_file.: 0.130924s (num_starts 1; 0.1309s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.134252s (num_starts 2; 0.0671s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 0.134277s (num_starts 2; 0.0671s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.137623s (num_starts 2; 0.0688s/start)
get_masked_array_constant.: 0.138802s (num_starts 55; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear.: 0.141193s (num_starts 3; 0.0471s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.143091s (num_starts 28; 0.0051s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144349s (num_starts 2; 0.0722s/start)
evaluate_memmask.: 0.146339s (num_starts 55; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149248s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149262s (num_starts 2; 0.0746s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.149375s (num_starts 2; 0.0747s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);-trivial.: 0.150911s (num_starts 34; 0.0044s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.157881s (num_starts 8; 0.0197s/start)
ftmap_run_pointsto_analysis.: 0.162153s (num_starts 2; 0.0811s/start)
tfg_run_pointsto_analysis.: 0.162373s (num_starts 2; 0.0812s/start)
tfg_populate_structs_after_ssa_construction.: 0.166233s (num_starts 2; 0.0831s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168987s (num_starts 1; 0.1690s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16899s (num_starts 1; 0.1690s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168993s (num_starts 1; 0.1690s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168993s (num_starts 1; 0.1690s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.168999s (num_starts 1; 0.1690s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false.: 0.169004s (num_starts 1; 0.1690s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.169011s (num_starts 1; 0.1690s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.170566s (num_starts 2; 0.0853s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(epsilon).: 0.171375s (num_starts 4; 0.0428s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.171676s (num_starts 5; 0.0343s/start)
corr_graph_add_correlation.: 0.171826s (num_starts 5; 0.0344s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.171914s (num_starts 5; 0.0344s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172358s (num_starts 1; 0.1724s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172362s (num_starts 1; 0.1724s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.172367s (num_starts 1; 0.1724s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.172375s (num_starts 1; 0.1724s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate.: 0.172378s (num_starts 1; 0.1724s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.172386s (num_starts 1; 0.1724s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.1808s (num_starts 4; 0.0452s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183544s (num_starts 1; 0.1835s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183549s (num_starts 1; 0.1835s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183552s (num_starts 1; 0.1836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.183562s (num_starts 1; 0.1836s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate.: 0.183565s (num_starts 1; 0.1836s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.183571s (num_starts 1; 0.1836s/start)
add_fresh_counterexample_at_pc_and_propagate.L2%3%fcallStart_Lentry%2%fcallStart.inductive-invariants.: 0.192214s (num_starts 30; 0.0064s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.196069s (num_starts 1; 0.1961s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.196072s (num_starts 1; 0.1961s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.196078s (num_starts 1; 0.1961s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.19608s (num_starts 1; 0.1961s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.196088s (num_starts 1; 0.1961s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false.: 0.196092s (num_starts 1; 0.1961s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.196098s (num_starts 1; 0.1961s/start)
guarded_predicate_set_and.: 0.197629s (num_starts 74; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.197855s (num_starts 1; 0.1979s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.197858s (num_starts 1; 0.1979s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.19786s (num_starts 1; 0.1979s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(epsilon).: 0.199204s (num_starts 4; 0.0498s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L2%1%fcallEnd_Lentry%1%fcallEnd.: 0.205219s (num_starts 1; 0.2052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.212031s (num_starts 2; 0.1060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate.: 0.212043s (num_starts 2; 0.1060s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.212062s (num_starts 2; 0.1060s/start)
evaluate_function_call.: 0.213391s (num_starts 55; 0.0039s/start)
check_wfconds_on_edge.L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d.: 0.215214s (num_starts 2; 0.1076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217037s (num_starts 1; 0.2170s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217038s (num_starts 1; 0.2170s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217041s (num_starts 1; 0.2170s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.217046s (num_starts 1; 0.2170s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate.: 0.217053s (num_starts 1; 0.2171s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.217066s (num_starts 1; 0.2171s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.22387s (num_starts 3; 0.0746s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.224978s (num_starts 74; 0.0030s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.227537s (num_starts 99; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.234688s (num_starts 1; 0.2347s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.234694s (num_starts 1; 0.2347s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.234697s (num_starts 1; 0.2347s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.234704s (num_starts 1; 0.2347s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false.: 0.234709s (num_starts 1; 0.2347s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.234715s (num_starts 1; 0.2347s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.254142s (num_starts 74; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.257893s (num_starts 4; 0.0645s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.259434s (num_starts 4; 0.0649s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 0.259634s (num_starts 4; 0.0649s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear.: 0.265006s (num_starts 8; 0.0331s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.270589s (num_starts 1; 0.2706s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.270593s (num_starts 1; 0.2706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.270595s (num_starts 1; 0.2706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.270607s (num_starts 1; 0.2706s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false.: 0.270611s (num_starts 1; 0.2706s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.270619s (num_starts 1; 0.2706s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.276712s (num_starts 62; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown.: 0.279603s (num_starts 29; 0.0096s/start)
counter_example_translate_on_edge_composition_helper.: 0.28745s (num_starts 546; 0.0005s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.301474s (num_starts 2; 0.1507s/start)
check_wfconds_on_edge.: 0.303387s (num_starts 10; 0.0303s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.314953s (num_starts 264; 0.0012s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(epsilon).: 0.318947s (num_starts 4; 0.0797s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.319061s (num_starts 1; 0.3191s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.319062s (num_starts 1; 0.3191s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.319066s (num_starts 1; 0.3191s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.319067s (num_starts 1; 0.3191s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.319074s (num_starts 1; 0.3191s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false.: 0.319076s (num_starts 1; 0.3191s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.31908s (num_starts 1; 0.3191s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.319602s (num_starts 2; 0.1598s/start)
apply_mask_and_overlay_array_constant.: 0.333833s (num_starts 264; 0.0013s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 0.347048s (num_starts 1; 0.3470s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.348105s (num_starts 2; 0.1741s/start)
decide_hoare_triple_helper;-trivial.: 0.357176s (num_starts 84; 0.0043s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallEnd_Lentry%2%fcallEnd;(epsilon).: 0.371624s (num_starts 4; 0.0929s/start)
compute_z3_expr.: 0.376627s (num_starts 490; 0.0008s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.38796s (num_starts 92; 0.0042s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.38945s (num_starts 91; 0.0043s/start)
check_equivalence_proof.: 0.596219s (num_starts 1; 0.5962s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.621322s (num_starts 391; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.769332s (num_starts 5; 0.1539s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.769336s (num_starts 5; 0.1539s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear.: 0.769378s (num_starts 5; 0.1539s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear.: 0.769416s (num_starts 5; 0.1539s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.770803s (num_starts 4; 0.1927s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.785062s (num_starts 5; 0.1570s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.790962s (num_starts 1; 0.7910s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 0.794331s (num_starts 47; 0.0169s/start)
check_preds_on_edge_compositions.: 0.806659s (num_starts 15; 0.0538s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.889583s (num_starts 7; 0.1271s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);linear.: 0.889821s (num_starts 7; 0.1271s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07197s (num_starts 7; 0.1531s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.072s (num_starts 7; 0.1531s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear.: 1.07324s (num_starts 8; 0.1342s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear.: 1.07327s (num_starts 8; 0.1342s/start)
invariant_inference_xfer.expr-group-bvs.from.L2%1%fcallEnd_Lentry%1%fcallEnd.: 1.10401s (num_starts 1; 1.1040s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.18941s (num_starts 5; 0.2379s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 1.18951s (num_starts 5; 0.2379s/start)
decide_hoare_triple.: 1.1992s (num_starts 10; 0.1199s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20949s (num_starts 9; 0.1344s/start)
dst_edge_composition_proves_false.: 1.21079s (num_starts 5; 0.2422s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);linear.: 1.21457s (num_starts 11; 0.1104s/start)
get_next_dst_edge_composition_to_correlate.: 1.21802s (num_starts 6; 0.2030s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.51523s (num_starts 14; 0.1082s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart).: 1.51597s (num_starts 14; 0.1083s/start)
ce_reconcile_sorts.: 1.65988s (num_starts 78; 0.0213s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.09914s (num_starts 16; 0.1312s/start)
decide_hoare_triple_helper;per-query-type;linear.: 2.11102s (num_starts 24; 0.0880s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.15161s (num_starts 3; 0.7172s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.15164s (num_starts 3; 0.7172s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.15165s (num_starts 3; 0.7172s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 2.23588s (num_starts 14; 0.1597s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown.: 2.23661s (num_starts 15; 0.1491s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 2.24237s (num_starts 20; 0.1121s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.32396s (num_starts 4; 0.5810s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.38441s (num_starts 10; 0.2384s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.38447s (num_starts 10; 0.2384s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.3845s (num_starts 10; 0.2385s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 2.39181s (num_starts 16; 0.1495s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown.: 2.39185s (num_starts 16; 0.1495s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 2.40151s (num_starts 22; 0.1092s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallStart_Lentry%1%fcallStart;(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd).: 2.41931s (num_starts 25; 0.0968s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L2%1%fcallEnd_Lentry%1%fcallEnd.: 2.45764s (num_starts 1; 2.4576s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L2%1%fcallStart_Lentry%1%fcallStart.: 2.5034s (num_starts 1; 2.5034s/start)
parse_z3_model.: 2.58374s (num_starts 76; 0.0340s/start)
read_counter_examples_from_channel.: 2.60718s (num_starts 42; 0.0621s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.79168s (num_starts 20; 0.1896s/start)
decide_hoare_triple_helper;per-path;L2%1%fcallEnd_Lentry%1%fcallEnd;(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart).: 3.83103s (num_starts 37; 0.1035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 18.0266s (num_starts 12; 1.5022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 18.0266s (num_starts 12; 1.5022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 18.0267s (num_starts 12; 1.5022s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 18.21s (num_starts 13; 1.4008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 18.2862s (num_starts 29; 0.6306s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown.: 18.2873s (num_starts 30; 0.6096s/start)
decide_hoare_triple_helper;per-path-and-query-type;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 18.3013s (num_starts 40; 0.4575s/start)
decide_hoare_triple_helper;per-path;L2%3%fcallStart_Lentry%2%fcallStart;(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd).: 18.493s (num_starts 47; 0.3935s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L2%3%fcallStart_Lentry%2%fcallStart.: 18.6689s (num_starts 1; 18.6689s/start)
query:smt.: 21.159s (num_starts 60; 0.3526s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 22.9117s (num_starts 30; 0.7637s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 23.3209s (num_starts 92; 0.2535s/start)
spawn_smt_query.: 23.767s (num_starts 60; 0.3961s/start)
solver_provable.: 25.9003s (num_starts 74; 0.3500s/start)
expr_is_provable.: 25.9499s (num_starts 74; 0.3507s/start)
solver_satisfiable-cache-miss.: 25.9507s (num_starts 60; 0.4325s/start)
solver_satisfiable.: 25.9517s (num_starts 75; 0.3460s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 25.9519s (num_starts 74; 0.3507s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 25.9554s (num_starts 74; 0.3507s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 25.9571s (num_starts 74; 0.3508s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 26.1583s (num_starts 74; 0.3535s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 26.1631s (num_starts 74; 0.3536s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 26.1643s (num_starts 74; 0.3536s/start)
update_invariant_state_for_edges.: 26.4428s (num_starts 5; 5.2886s/start)
cg_check_new_cg_ec.: 26.4429s (num_starts 5; 5.2886s/start)
correl_entry_apply.: 26.443s (num_starts 5; 5.2886s/start)
is_expr_equal_using_lhs_set_and_precond.: 26.9017s (num_starts 74; 0.3635s/start)
prove.: 26.9024s (num_starts 74; 0.3635s/start)
prove_spawn_and_join_helper.: 26.9028s (num_starts 74; 0.3636s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 27.2673s (num_starts 59; 0.4622s/start)
prove_spawn_and_join.: 27.3372s (num_starts 74; 0.3694s/start)
prove_wrapper.proof_query_not_trivial.: 27.3594s (num_starts 74; 0.3697s/start)
prove_wrapper.: 27.4205s (num_starts 143; 0.1918s/start)
decide_hoare_triple_check_ub.: 27.4835s (num_starts 143; 0.1922s/start)
expandProductCFG.: 27.6652s (num_starts 6; 4.6109s/start)
decide_hoare_triple_helper.: 27.7607s (num_starts 143; 0.1941s/start)
bestFirstSearch.: 27.9091s (num_starts 1; 27.9091s/start)
decide_hoare_triple_with_alias_cons.: 28.1516s (num_starts 143; 0.1969s/start)
Time taken for equivalence check.: 28.5257s (num_starts 1; 28.5257s/start)

counters:
# of assume sat failures for cg-edge-assume-unknown.: 14
# of assume sat failures for undef-behavioursome.edge.L0%0%d=>Lentry%1%fcallStart.: 1
# of paths enumerated.: 5
# of paths expanded.: 5
# of queries to linear solver.: 98
# of smt-solver-queries.: 60
L0%0%d=>Lentry%1%fcallStart-src_ecs.: 1
L0%0%d=>Lentry%1%fcallStart-src_to_pcs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_ecs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_to_pcs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_ecs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_to_pcs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_ecs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_to_pcs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_ecs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_to_pcs.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%1%fcallEnd_Lentry%1%fcallEnd.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%3%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L2%3%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 4
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L2%1%fcallEnd_Lentry%1%fcallEnd.iters.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L2%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L2%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L2%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L2%3%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L2%3%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%1%fcallEnd_Lentry%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%1%fcallStart_Lentry%1%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%3%fcallStart_Lentry%2%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L2%3%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%1%fcallEnd_Lentry%1%fcallEnd.iters.: 12
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 11
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%1%fcallStart_Lentry%1%fcallStart.iters.: 10
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%3%fcallStart_Lentry%2%fcallStart.iters.: 20
smallest_point_cover_xfer.spec-coupling-invariants.from.L2%3%fcallStart_Lentry%2%fcallStart.prove_queries.: 19
smt-queries-cache-hits.: 15
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 76
total-correlation-possibilities.: 6
total-correlation-possibilities-mod-lsprels.: 6
total-correlations-explored.: 6

flags:
dst-aloc.: 0
dst-edges.: 5
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L2%1%fcallEnd_Lentry%1%fcallEnd.: 0
final-CG-counterexamples-generated-at-L2%1%fcallStart_Lentry%1%fcallStart.: 4
final-CG-counterexamples-generated-at-L2%3%fcallEnd_Lentry%2%fcallEnd.: 0
final-CG-counterexamples-generated-at-L2%3%fcallStart_Lentry%2%fcallStart.: 6
final-CG-counterexamples-total-at-L2%1%fcallEnd_Lentry%1%fcallEnd.: 7
final-CG-counterexamples-total-at-L2%1%fcallStart_Lentry%1%fcallStart.: 7
final-CG-counterexamples-total-at-L2%3%fcallEnd_Lentry%2%fcallEnd.: 7
final-CG-counterexamples-total-at-L2%3%fcallStart_Lentry%2%fcallStart.: 8
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 6
final-CG-num-invariants.: 37
final-CG-super-edges.: 0
src-edges.: 5
src-nodes.: 6
timeout-occured.: 1

info:
eq-state.: find_correlation
final-CG-time-secs.: 26.61
final-CG-time-to-total-time-ratio.: 0.95
query-time-to-total-time-ratio.: 0.75

Context stats:
exprs: count: 189174
sorts: count: 161
num_proof_queries: 74
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	5529
	        hit ratio:	0.95605
m_simplify_solver:
	----------- total:	1901
	        hit ratio:	0.72646
m_z3_solver_substitution:
	----------- total:	520
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	520
	        hit ratio:	0
m_expr_size:
	----------- total:	4413
	        hit ratio:	0.865851
m_expr_evaluates_to_constant_visitor:
	----------- total:	98640
	        hit ratio:	0.467964

z3_solver expr_query_cache entry size: 60
	----------- total:	75
	             hits:	15
	        hit ratio:	0.2
histogram (time taken by solver in ms):
[  30.9620,   51.5184) (avg.   38.2976)  : 18
[  51.5184,   85.7228) (avg.   75.5079)  : 17
[  85.7228,  142.6363) (avg.  107.8804)  : 17
[ 142.6363,  237.3361) (avg.    0.0000)  : 0
[ 237.3361,  394.9094) (avg.  280.6600)  : 1
[ 394.9094,  657.0994) (avg.    0.0000)  : 0
[ 657.0994, 1093.3640) (avg.  837.0290)  : 4
[1093.3640, 1819.2755) (avg.    0.0000)  : 0
[1819.2755, 3027.1375) (avg.    0.0000)  : 0
[3027.1375, 5036.9290) (avg. 4574.1473)  : 3
histogram (number of quantifiers in query)
[ 0,  4) (avg.  0)                       : 1
[ 4,  8) (avg.  0)                       : 0
[ 8, 12) (avg.  0)                       : 0
[12, 16) (avg. 15)                       : 18
[16, 20) (avg. 16)                       : 2
[20, 24) (avg. 22)                       : 36
[24, 28) (avg.  0)                       : 0
[28, 32) (avg. 29)                       : 3
[32, 36) (avg.  0)                       : 0
[36, 39) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[ 50,  79) (avg.  50)                    : 1
[ 79, 108) (avg.   0)                    : 0
[108, 137) (avg.   0)                    : 0
[137, 165) (avg.   0)                    : 0
[165, 194) (avg. 190)                    : 6
[194, 223) (avg. 201)                    : 12
[223, 251) (avg. 244)                    : 19
[251, 280) (avg. 263)                    : 13
[280, 309) (avg. 299)                    : 7
[309, 337) (avg. 323)                    : 2
Top 10 highest time taking queries:
1. [5.036s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.1
2. [4.475s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.16
3. [4.211s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.17
4. [0.943s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.2
5. [0.832s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%1%fcallStart_Lentry%1%fcallStart.cond_apply_set_elem0_of_1.9
6. [0.790s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%1%fcallStart_Lentry%1%fcallStart.cond_apply_set_elem0_of_1.2
7. [0.784s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.14
8. [0.281s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%3%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.4
9. [0.130s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.13
10. [0.126s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL2%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.5

<MSG>0:49 : Successfully computed equivalence for function: bar.</MSG>
<MSG>0:49 : Computing equivalence for function: foo...</MSG>
<MSG>0:49 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:49 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:49 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:49 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:49 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:50 : product-TFG foo: Enumerating correlations for L0%0%d=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:50 : Considering 1 paths to src pc E0%0%d as correlation candidates for L0%0%d=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:50 : Attempting correlation of src pathset L0%0%d=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:50 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for L0%0%d=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:50 : product-TFG foo: Found 1 correlations for L0%0%d=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:50 : product-TFG foo created 1 possibilities in group foo.A...</MSG>
<MSG>0:50 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:50 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:50 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:50 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:50 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>0:50 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d
</MSG>
<MSG>0:50 : Identified no common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>0:50 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d...</MSG>
<MSG>0:50 : foo.A1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:50 : foo.A1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:50 : foo.A1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:50 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:50 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:50 : foo.A1: Adding edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:50 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:50 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:50 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:50 : foo.A1: Propagated 1 out of 2 counter-examples across edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d</MSG>
<MSG>0:50 : foo.A1: Added the 1 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:50 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:50 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:50 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:50 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:50 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d...</MSG>
<MSG>0:50 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path L0%0%d --> E0%0%d</MSG>
<MSG>0:50 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:50 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A L0%0%d => A E0%0%d at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
<MSG>0:50 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:50 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>E0%0%d_E0%0%d...</MSG>
<MSG>0:50 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:50 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:50 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:52 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:52 : foo.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:52 : foo.A1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:52 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:52 : Checking equivalence proof...</MSG>
<MSG>0:53 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[1]: L0%0%d_L0%0%d=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A L0%0%d => A E0%0%d at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 4.04s, query:smt.: 1.71191s (num_starts 20; 0.0856s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 3.33326s (num_starts 6; 0.5555s/start)ftmap_run_pointsto_analysis.: 0.307594s (num_starts 2; 0.1538s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 4; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 1e-06s (num_starts 1; 0.0000s/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 1e-06s (num_starts 1; 0.0000s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 1e-06s (num_starts 1; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1e-06s (num_starts 1; 0.0000s/start)
prove_trivial.: 2e-06s (num_starts 1; 0.0000s/start)
ce_perform_memory_fuzzing.: 3e-06s (num_starts 2; 0.0000s/start)
get_paths_with_matching_to_pc.: 3e-06s (num_starts 1; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 9e-06s (num_starts 1; 0.0000s/start)
collect_dst_to_src_submap_preds.: 1.4e-05s (num_starts 6; 0.0000s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 1.8e-05s (num_starts 3; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 2.7e-05s (num_starts 1; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 3.4e-05s (num_starts 3; 0.0000s/start)
get_intersected_lr_status.: 3.9e-05s (num_starts 2; 0.0000s/start)
get_lr_status_for_loc_ids.: 4.8e-05s (num_starts 20; 0.0000s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 5.6e-05s (num_starts 19; 0.0000s/start)
graph_with_guessing_sync_preds.: 6.7e-05s (num_starts 6; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 6.9e-05s (num_starts 1; 0.0001s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 7.2e-05s (num_starts 36; 0.0000s/start)
removeMostPromising.: 7.2e-05s (num_starts 4; 0.0000s/start)
determinize_value_expr_map.: 7.3e-05s (num_starts 23; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 7.4e-05s (num_starts 29; 0.0000s/start)
check_node_stability_after_CE_addition.: 8.6e-05s (num_starts 3; 0.0000s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 9.4e-05s (num_starts 35; 0.0000s/start)
proof_query_is_trivial_helper.: 9.7e-05s (num_starts 40; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 9.9e-05s (num_starts 3; 0.0000s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.0001s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000118s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 0.000122s (num_starts 205; 0.0000s/start)
lr_status_meet.: 0.000126s (num_starts 243; 0.0000s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.000133s (num_starts 19; 0.0000s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.000137s (num_starts 1; 0.0001s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000144s (num_starts 1; 0.0001s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000149s (num_starts 35; 0.0000s/start)
populate_locid2expr_map.: 0.000176s (num_starts 2; 0.0001s/start)
expr_is_callee_save_const.: 0.00018s (num_starts 217; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000189s (num_starts 1; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000202s (num_starts 1; 0.0002s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000216s (num_starts 19; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.000229s (num_starts 2; 0.0001s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.00024s (num_starts 2; 0.0001s/start)
collect_assumes_around_edge.: 0.000242s (num_starts 1; 0.0002s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.000248s (num_starts 1; 0.0002s/start)
set_result_and_counter_example.: 0.000262s (num_starts 20; 0.0000s/start)
collect_inductive_preds_around_path.: 0.000263s (num_starts 6; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.000294s (num_starts 1; 0.0003s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000306s (num_starts 40; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000351s (num_starts 22; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000362s (num_starts 33; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000367s (num_starts 2; 0.0002s/start)
proof_query_is_trivial.: 0.000379s (num_starts 36; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.000399s (num_starts 2; 0.0002s/start)
graph_locs_add_local_vars_for_edge.: 0.000413s (num_starts 22; 0.0000s/start)
compute_sprel_relations.: 0.000423s (num_starts 2; 0.0002s/start)
graph_locs_add_all_local_vars.: 0.000429s (num_starts 2; 0.0002s/start)
propagate_sprels.: 0.000437s (num_starts 2; 0.0002s/start)
tfg::collect_assumes_around_edge.: 0.000454s (num_starts 45; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.000461s (num_starts 3; 0.0002s/start)
sp_version_relations_val_t::meet.: 0.000466s (num_starts 1012; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.000472s (num_starts 3; 0.0002s/start)
parse_yices_model.: 0.000519s (num_starts 1; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000526s (num_starts 1; 0.0005s/start)
create_new_corr_graph_edge.new_node.: 0.000668s (num_starts 1; 0.0007s/start)
cg_add_node.: 0.000706s (num_starts 2; 0.0004s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.000757s (num_starts 35; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000776s (num_starts 2; 0.0004s/start)
graph_locs_add_all_llvmvars.: 0.000777s (num_starts 2; 0.0004s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000796s (num_starts 66; 0.0000s/start)
parse_cvc4_model.: 0.000808s (num_starts 1; 0.0008s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000822s (num_starts 64; 0.0000s/start)
populate_simplified_to_state.: 0.000835s (num_starts 3; 0.0003s/start)
expr_represents_llvm_undef.: 0.000847s (num_starts 221; 0.0000s/start)
create_new_corr_graph_edge.: 0.000868s (num_starts 1; 0.0009s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000871s (num_starts 29; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.001029s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00103s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.001033s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.001036s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001039s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001043s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;outgoing_edges_cover_all_possibilities..: 0.001051s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.001058s (num_starts 1; 0.0011s/start)
create_closure_matrix.: 0.001059s (num_starts 83; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001065s (num_starts 1; 0.0011s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.001244s (num_starts 32; 0.0000s/start)
tfg::populate_loc_definedness.before_solve.: 0.001291s (num_starts 3; 0.0004s/start)
graph_locs_add_all_specvars.: 0.001352s (num_starts 2; 0.0007s/start)
pth_collect_simplified_preds_using_atom_func.: 0.001361s (num_starts 8; 0.0002s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.001365s (num_starts 1; 0.0014s/start)
get_sprel_map_pair.: 0.00139s (num_starts 72; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.001403s (num_starts 1; 0.0014s/start)
tfg::populate_loc_definedness.before_initialize.: 0.001592s (num_starts 3; 0.0005s/start)
tfg::populate_loc_definedness.: 0.001674s (num_starts 3; 0.0006s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.001851s (num_starts 12; 0.0002s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.001933s (num_starts 29; 0.0001s/start)
populate_branch_affecting_locs.: 0.002037s (num_starts 3; 0.0007s/start)
identify_address_taken_local_variables.: 0.002091s (num_starts 1; 0.0021s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.002122s (num_starts 2; 0.0011s/start)
get_sprel_map_pair_at_pc.: 0.002188s (num_starts 35; 0.0001s/start)
apply_mask_and_overlay_array_constant.: 0.002241s (num_starts 2; 0.0011s/start)
compute_ssa_vars_renaming_map.: 0.002335s (num_starts 2; 0.0012s/start)
create_sp_version_relations_lattice_at_pc.: 0.002416s (num_starts 83; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.002555s (num_starts 1; 0.0026s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.002562s (num_starts 48; 0.0001s/start)
populate_simplified_assets.: 0.002658s (num_starts 6; 0.0004s/start)
counter_example_satisfies_preds.: 0.002713s (num_starts 34; 0.0001s/start)
populate_transitive_closure.: 0.00277s (num_starts 11; 0.0003s/start)
graph_visit_exprs_and_keys.: 0.002803s (num_starts 2; 0.0014s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.00296s (num_starts 32; 0.0001s/start)
graph_identify_back_edges.: 0.00297s (num_starts 16; 0.0002s/start)
graph_identify_natural_loops.: 0.003003s (num_starts 16; 0.0002s/start)
graph_visit_exprs.: 0.003314s (num_starts 3; 0.0011s/start)
find_dominators.: 0.003407s (num_starts 20; 0.0002s/start)
get_next_potential_correlations.: 0.00355s (num_starts 1; 0.0036s/start)
expr_linear_relation_holds::visit.var.: 0.003561s (num_starts 221; 0.0000s/start)
pth_collect_preds_using_atom_func.: 0.003688s (num_starts 64; 0.0001s/start)
get_unrolled_paths_from.: 0.003806s (num_starts 6; 0.0006s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.003859s (num_starts 1236; 0.0000s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.003874s (num_starts 96; 0.0000s/start)
compute_vars_reaching_definitions.: 0.003957s (num_starts 2; 0.0020s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.004133s (num_starts 236; 0.0000s/start)
collect_assumes_around_path_helper.: 0.004227s (num_starts 19; 0.0002s/start)
graph_with_paths::collect_assumes_around_path.: 0.004298s (num_starts 19; 0.0002s/start)
aliasing_constraints.convert_to_expr.: 0.004619s (num_starts 35; 0.0001s/start)
tfg_edge_composition_get_assumes.: 0.004686s (num_starts 64; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.004877s (num_starts 72; 0.0001s/start)
populate_locs_potentially_modified_on_edge.: 0.005426s (num_starts 3; 0.0018s/start)
compute_regions.: 0.006436s (num_starts 16; 0.0004s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.007279s (num_starts 66; 0.0001s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.008097s (num_starts 3; 0.0027s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.008455s (num_starts 35; 0.0002s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.010258s (num_starts 4; 0.0026s/start)
generate_aliasing_constraints_from_expr.: 0.010856s (num_starts 569; 0.0000s/start)
do_ssa_transformation.: 0.012213s (num_starts 2; 0.0061s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.012595s (num_starts 35; 0.0004s/start)
lhs_set_sort.: 0.012616s (num_starts 35; 0.0004s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.013321s (num_starts 40; 0.0003s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.015094s (num_starts 66; 0.0002s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.015158s (num_starts 243; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.015468s (num_starts 243; 0.0001s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.015751s (num_starts 1; 0.0158s/start)
compute_lr_status_for_expr.: 0.015833s (num_starts 310; 0.0001s/start)
expr_substitute_using_available_exprs_submap.: 0.017462s (num_starts 251; 0.0001s/start)
ce_reconcile_sorts.: 0.019646s (num_starts 5; 0.0039s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.019898s (num_starts 10; 0.0020s/start)
query:convert_from_z3.: 0.024314s (num_starts 325; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.024641s (num_starts 133; 0.0002s/start)
compute_new_lr_status_on_locs.: 0.027029s (num_starts 66; 0.0004s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.028987s (num_starts 6; 0.0048s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.029008s (num_starts 6; 0.0048s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.029902s (num_starts 7; 0.0043s/start)
collect_aliasing_constraints_around_path_helper.: 0.031404s (num_starts 32; 0.0010s/start)
collect_aliasing_constraints_around_path.: 0.031505s (num_starts 20; 0.0016s/start)
tfg_relax_pointsto_vals_on_edge.: 0.03159s (num_starts 2; 0.0158s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.032965s (num_starts 50; 0.0007s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.033083s (num_starts 66; 0.0005s/start)
computeWP_for_pred_across_ec.: 0.033096s (num_starts 50; 0.0007s/start)
put_smtlib_string_in_file.: 0.03325s (num_starts 40; 0.0008s/start)
parse_z3_model.: 0.033849s (num_starts 3; 0.0113s/start)
graph_ec_apply_trans_funs_helper.0.: 0.034338s (num_starts 62; 0.0006s/start)
graph_ec_apply_trans_funs_helper.: 0.034501s (num_starts 62; 0.0006s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.034619s (num_starts 62; 0.0006s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.034717s (num_starts 66; 0.0005s/start)
query:convert_to_z3.: 0.035211s (num_starts 325; 0.0001s/start)
graph_to_stream.: 0.035554s (num_starts 4; 0.0089s/start)
read_counter_examples_from_channel.: 0.035738s (num_starts 2; 0.0179s/start)
counter_example_falsifies_preds.: 0.036222s (num_starts 3; 0.0121s/start)
counter_example_evaluate_preds.: 0.038864s (num_starts 37; 0.0011s/start)
edge_composition_apply_trans_funs_on_pred.: 0.038981s (num_starts 6; 0.0065s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.039035s (num_starts 2; 0.0195s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.039046s (num_starts 2; 0.0195s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.039432s (num_starts 10; 0.0039s/start)
guarded_predicate_set_and.: 0.042542s (num_starts 35; 0.0012s/start)
avail_exprs_create_submap.: 0.047696s (num_starts 198; 0.0002s/start)
tfg_suffixpath_get_expr_helper.: 0.048146s (num_starts 20; 0.0024s/start)
counter_example_translate_on_edge_composition_helper.: 0.049458s (num_starts 16; 0.0031s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.050307s (num_starts 35; 0.0014s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.066509s (num_starts 23; 0.0029s/start)
populate_loc_liveness.: 0.071444s (num_starts 3; 0.0238s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.072821s (num_starts 1463; 0.0000s/start)
query:simplify-z3.: 0.077792s (num_starts 684; 0.0001s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.079323s (num_starts 1; 0.0793s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.080852s (num_starts 66; 0.0012s/start)
tfg_postprocess_after_pointsto_analysis.: 0.085924s (num_starts 2; 0.0430s/start)
corr_graph::add_edge().: 0.104756s (num_starts 1; 0.1048s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.106194s (num_starts 1; 0.1062s/start)
corr_graph_add_correlation.: 0.106227s (num_starts 1; 0.1062s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.106243s (num_starts 1; 0.1062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113841s (num_starts 2; 0.0569s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113853s (num_starts 2; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113866s (num_starts 2; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.113881s (num_starts 2; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.113895s (num_starts 2; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;-dst-edgecond-implies-src-edgecond.: 0.1139s (num_starts 2; 0.0570s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.113907s (num_starts 2; 0.0570s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.113916s (num_starts 2; 0.0570s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.1158s (num_starts 64; 0.0018s/start)
compute_z3_expr.: 0.130269s (num_starts 345; 0.0004s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.135487s (num_starts 99; 0.0014s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.149683s (num_starts 299; 0.0005s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.153797s (num_starts 1492; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.155529s (num_starts 1463; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.181139s (num_starts 1463; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183942s (num_starts 1; 0.1839s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183944s (num_starts 1; 0.1839s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183944s (num_starts 1; 0.1839s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183946s (num_starts 1; 0.1839s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.183955s (num_starts 1; 0.1840s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.183957s (num_starts 1; 0.1840s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 0.18396s (num_starts 1; 0.1840s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.183962s (num_starts 1; 0.1840s/start)
decide_hoare_triple.: 0.192727s (num_starts 2; 0.0964s/start)
dst_edge_composition_proves_false.: 0.203545s (num_starts 1; 0.2035s/start)
get_next_dst_edge_composition_to_correlate.: 0.204162s (num_starts 2; 0.1021s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.207107s (num_starts 64; 0.0032s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.21785s (num_starts 35; 0.0062s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.297766s (num_starts 3; 0.0993s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.298963s (num_starts 4; 0.0747s/start)
ftmap_run_pointsto_analysis.: 0.307594s (num_starts 2; 0.1538s/start)
tfg_run_pointsto_analysis.: 0.308057s (num_starts 2; 0.1540s/start)
tfg_populate_structs_after_ssa_construction.: 0.365108s (num_starts 2; 0.1826s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.380367s (num_starts 2; 0.1902s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);-trivial.: 0.426047s (num_starts 1; 0.4260s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.426048s (num_starts 1; 0.4260s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.426048s (num_starts 1; 0.4260s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.426049s (num_starts 1; 0.4260s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.42605s (num_starts 1; 0.4260s/start)
decide_hoare_triple_helper;-trivial.: 0.427229s (num_starts 2; 0.2136s/start)
check_equivalence_proof.: 0.502486s (num_starts 1; 0.5025s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.0316s (num_starts 392; 0.0026s/start)
query:smt.: 1.71191s (num_starts 20; 0.0856s/start)
spawn_smt_query.: 1.74786s (num_starts 20; 0.0874s/start)
solver_provable.: 1.90847s (num_starts 35; 0.0545s/start)
expr_is_provable.: 1.92988s (num_starts 35; 0.0551s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 1.93031s (num_starts 35; 0.0552s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 1.93189s (num_starts 35; 0.0552s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 1.93735s (num_starts 35; 0.0554s/start)
solver_satisfiable-cache-miss.: 1.94275s (num_starts 20; 0.0971s/start)
solver_satisfiable.: 1.94293s (num_starts 36; 0.0540s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 1.98788s (num_starts 35; 0.0568s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 2.01647s (num_starts 35; 0.0576s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 2.01699s (num_starts 35; 0.0576s/start)
is_expr_equal_using_lhs_set_and_precond.: 2.46761s (num_starts 35; 0.0705s/start)
prove.: 2.4679s (num_starts 35; 0.0705s/start)
prove_spawn_and_join_helper.: 2.46809s (num_starts 35; 0.0705s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.60779s (num_starts 1; 2.6078s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.6078s (num_starts 1; 2.6078s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.6078s (num_starts 1; 2.6078s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.6078s (num_starts 1; 2.6078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.60781s (num_starts 1; 2.6078s/start)
update_invariant_state_for_edges.: 2.69876s (num_starts 1; 2.6988s/start)
cg_check_new_cg_ec.: 2.69877s (num_starts 1; 2.6988s/start)
correl_entry_apply.: 2.69881s (num_starts 1; 2.6988s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.90573s (num_starts 4; 0.7264s/start)
expandProductCFG.: 2.90663s (num_starts 2; 1.4533s/start)
prove_spawn_and_join.: 3.00506s (num_starts 35; 0.0859s/start)
prove_wrapper.proof_query_not_trivial.: 3.00923s (num_starts 35; 0.0860s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown.: 3.03387s (num_starts 2; 1.5169s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 3.03388s (num_starts 2; 1.5169s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 3.03389s (num_starts 2; 1.5169s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d);pred-type-unknown.: 3.0339s (num_starts 2; 1.5170s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>E0%0%d_E0%0%d).: 3.03391s (num_starts 2; 1.5170s/start)
bestFirstSearch.: 3.05903s (num_starts 1; 3.0590s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 3.14868s (num_starts 4; 0.7872s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>E0%0%d_E0%0%d.: 3.17093s (num_starts 2; 1.5855s/start)
check_wfconds_on_edge.: 3.17095s (num_starts 2; 1.5855s/start)
check_preds_on_edge_compositions.: 3.17545s (num_starts 3; 1.0585s/start)
prove_wrapper.: 3.28737s (num_starts 36; 0.0913s/start)
decide_hoare_triple_check_ub.: 3.33037s (num_starts 6; 0.5551s/start)
decide_hoare_triple_helper.: 3.33326s (num_starts 6; 0.5555s/start)
decide_hoare_triple_with_alias_cons.: 3.33357s (num_starts 6; 0.5556s/start)
Time taken for equivalence check.: 3.56222s (num_starts 1; 3.5622s/start)

counters:
# of assume sat failures for undef-behavioursome.edge.L0%0%d=>E0%0%d.: 2
# of paths enumerated.: 1
# of paths expanded.: 1
# of smt-solver-queries.: 20
L0%0%d=>E0%0%d-src_ecs.: 1
L0%0%d=>E0%0%d-src_to_pcs.: 1
smt-queries-cache-hits.: 16
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 3
total-correlation-possibilities.: 2
total-correlation-possibilities-mod-lsprels.: 2
total-correlations-explored.: 2

flags:
dst-aloc.: 0
dst-edges.: 1
dst-nodes.: 2
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 1
final-CG-edges.: 1
final-CG-nodes.: 2
final-CG-num-invariants.: 0
final-CG-super-edges.: 0
src-edges.: 21
src-nodes.: 18
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 2.81
final-CG-time-to-total-time-ratio.: 0.92
query-time-to-total-time-ratio.: 0.55

Context stats:
exprs: count: 148138
sorts: count: 161
num_proof_queries: 109
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	7210
	        hit ratio:	0.95534
m_simplify_solver:
	----------- total:	2917
	        hit ratio:	0.876928
m_z3_solver_substitution:
	----------- total:	359
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	359
	        hit ratio:	0
m_expr_size:
	----------- total:	11568
	        hit ratio:	0.954098
m_contains_only_constants_or_sp_versions:
	----------- total:	8
	        hit ratio:	0.5
m_expr_evaluates_to_constant_visitor:
	----------- total:	8124
	        hit ratio:	0.762925

z3_solver expr_query_cache entry size: 20
	----------- total:	111
	             hits:	16
	        hit ratio:	0.144144
histogram (time taken by solver in ms):
[ 31.9900,  44.4936) (avg.  41.4826)     : 13
[ 44.4936,  61.8843) (avg.  45.4394)     : 5
[ 61.8843,  86.0723) (avg.  79.4830)     : 1
[ 86.0723, 119.7144) (avg.   0.0000)     : 0
[119.7144, 166.5058) (avg.   0.0000)     : 0
[166.5058, 231.5861) (avg.   0.0000)     : 0
[231.5861, 322.1036) (avg.   0.0000)     : 0
[322.1036, 448.0006) (avg.   0.0000)     : 0
[448.0006, 623.1057) (avg.   0.0000)     : 0
[623.1057, 866.6520) (avg. 865.6520)     : 1
histogram (number of quantifiers in query)
[0, 2) (avg. 0)                          : 1
[2, 3) (avg. 0)                          : 0
[3, 5) (avg. 4)                          : 19
[5, 6) (avg. 0)                          : 0
[6, 7) (avg. 0)                          : 0
[7, 9) (avg. 0)                          : 0
[9, 10) (avg. 0)                         : 0
[10, 12) (avg. 0)                        : 0
[12, 13) (avg. 0)                        : 0
[13, 14) (avg. 0)                        : 0
histogram (number of nodes in z3 ast)
[ 17,  52) (avg.  17)                    : 1
[ 52,  86) (avg.   0)                    : 0
[ 86, 120) (avg.   0)                    : 0
[120, 154) (avg.   0)                    : 0
[154, 188) (avg.   0)                    : 0
[188, 223) (avg.   0)                    : 0
[223, 257) (avg.   0)                    : 0
[257, 291) (avg. 261)                    : 1
[291, 325) (avg. 308)                    : 2
[325, 359) (avg. 347)                    : 16
Top 10 highest time taking queries:
1. [0.866s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_16.0
2. [0.079s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L0%0%d_L0%0%d.dstToPC.E0%0%d.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
3. [0.046s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem1_of_16.0
4. [0.046s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem10_of_16.0
5. [0.045s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem3_of_16.0
6. [0.045s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem14_of_16.0
7. [0.045s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem15_of_16.0
8. [0.044s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem6_of_16.0
9. [0.044s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem9_of_16.0
10. [0.044s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.equal-ret.from_pcL0%0%d_L0%0%d.cond_apply_set_elem11_of_16.0

<MSG>0:53 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 172 time spent: 0:0:0 [0.003607s total; 0.000021 per start]
tfg_computeWP: num_starts 499 time spent: 0:0:0 [0.064721s total; 0.000130 per start]
tfg_get_simplified_to_state_for_edge: num_starts 2582 time spent: 0:0:0 [0.004131s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 2522 time spent: 0:0:0 [0.004472s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 2549 time spent: 0:0:0 [0.003777s total; 0.000001 per start]
add_nodeces_at_pc_and_propagate: num_starts 100 time spent: 0:0:0 [0.198149s total; 0.001981 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 12 time spent: 0:0:0 [0.207386s total; 0.017282 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 235 time spent: 0:0:0 [0.282902s total; 0.001204 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 101 time spent: 0:0:0 [0.110190s total; 0.001091 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 224 time spent: 0:0:0 [0.256272s total; 0.001144 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 1087 time spent: 0:0:0 [0.335903s total; 0.000309 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 227 time spent: 0:0:0 [0.009257s total; 0.000041 per start]
tfg_graph_get_vars_written_on_edge: num_starts 224 time spent: 0:0:0 [0.004798s total; 0.000021 per start]
cg_with_rank_add_CE_at_pc: num_starts 111 time spent: 0:0:0 [0.197616s total; 0.001780 per start]
graph_with_ce_add_CE_at_pc: num_starts 33 time spent: 0:0:0 [0.000666s total; 0.000020 per start]
graph_with_guessing_add_CE_at_pc: num_starts 111 time spent: 0:0:0 [0.197478s total; 0.001779 per start]
point_set_add_point_using_CE: num_starts 294 time spent: 0:0:0 [0.077022s total; 0.000262 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 294 time spent: 0:0:0 [0.077814s total; 0.000265 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 99 time spent: 0:0:0 [0.193557s total; 0.001955 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 99 time spent: 0:0:0 [0.114100s total; 0.001153 per start]
expr_label_memlabels_using_memlabel_map: num_starts 5617 time spent: 0:0:0 [0.176830s total; 0.000031 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 455 time spent: 0:0:0 [0.046022s total; 0.000101 per start]
expr_simplify_solver: num_starts 4950 time spent: 0:0:0 [0.357753s total; 0.000072 per start]
expr_simplify_syntactic: num_starts 5150 time spent: 0:0:1 [1.275102s total; 0.000248 per start]
expr_simplify_select_on_store: num_starts 433 time spent: 0:0:1 [1.087364s total; 0.002511 per start]
expr_simplify_using_lhs_set_helper: num_starts 924 time spent: 0:0:1 [1.741934s total; 0.001885 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 10073 time spent: 0:0:1 [1.731790s total; 0.000172 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 5712 time spent: 0:0:0 [0.018604s total; 0.000003 per start]
expr_simplify_eq: num_starts 496 time spent: 0:0:0 [0.007409s total; 0.000015 per start]
expr_simplify_or: num_starts 128 time spent: 0:0:0 [0.000110s total; 0.000001 per start]
expr_simplify_and: num_starts 761 time spent: 0:0:0 [0.004577s total; 0.000006 per start]
expr_simplify_andnot1: num_starts 14 time spent: 0:0:0 [0.000179s total; 0.000013 per start]
expr_simplify_not: num_starts 14 time spent: 0:0:0 [0.000040s total; 0.000003 per start]
expr_simplify_implies: num_starts 36 time spent: 0:0:0 [0.000320s total; 0.000009 per start]
canonicalize_expr_tree: num_starts 955 time spent: 0:0:0 [0.070762s total; 0.000074 per start]
expr_simplify_memalloc_using_memlabel: num_starts 31 time spent: 0:0:0 [0.000084s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 437 time spent: 0:0:1 [1.071825s total; 0.002453 per start]
get_arithmetic_addsub_atoms: num_starts 7241 time spent: 0:0:0 [0.004873s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 875 time spent: 0:0:0 [0.008025s total; 0.000009 per start]
expr_is_consts_struct_constant: num_starts 4050 time spent: 0:0:0 [0.002240s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 13283 time spent: 0:0:1 [1.325966s total; 0.000100 per start]
expr_do_simplify_helper_cache: num_starts 13283 time spent: 0:0:0 [0.011632s total; 0.000001 per start]
evaluate_expr_and_check_bounds: num_starts 1031 time spent: 0:0:0 [0.381712s total; 0.000370 per start]
array_constant_equals: num_starts 19810 time spent: 0:0:0 [0.021402s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 74 time spent: 0:0:0 [0.312853s total; 0.004228 per start]
alias_val_xfer_and_meet: num_starts 74 time spent: 0:0:0 [0.209632s total; 0.002833 per start]
get_sprel_map_from_avail_exprs: num_starts 103 time spent: 0:0:0 [0.010761s total; 0.000104 per start]
update_memlabels_for_memslot_locs: num_starts 25 time spent: 0:0:0 [0.000105s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 172 time spent: 0:0:0 [0.029708s total; 0.000173 per start]
compute_simplified_loc_exprs_for_edge: num_starts 446 time spent: 0:0:0 [0.240742s total; 0.000540 per start]
compute_locs_definitely_written_on_edge: num_starts 172 time spent: 0:0:0 [0.000307s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 54 time spent: 0:0:0 [0.022422s total; 0.000415 per start]
edge_update_memlabel_map_for_mlvars: num_starts 86 time spent: 0:0:0 [0.007978s total; 0.000093 per start]
add_new_locs_based_on_edge: num_starts 74 time spent: 0:0:0 [0.100020s total; 0.001352 per start]
expand_locset_to_include_slots_for_memmask: num_starts 74 time spent: 0:0:0 [0.000443s total; 0.000006 per start]
total: num_starts 1 time spent: 0:0:58 [58.844234s total; 58.844234 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 33.04s.
ftmap_run_pointsto_analysis.: 0.307594s (num_starts 2; 0.1538s/start)s.
EQ Time after pointsto analysis: 32.7346s.
EQ Time after pointsto analysis and smt_query: 29.4472s.
EQ Time after pointsto analysis and smt_query and bv-solve: 29.4472s.
Equivalence proof found. The programs are equivalent.
