=TFG_SSA:
=TFG_LLVM dst.llvm.head_or:
=TFG:
=Nodes: L0%0%d Lcond.end%1%bbentry Lcond.false%1%intermediateVal0 Lcond.true%1%d Lentry%2%d E0%0%d
=Edges:
L0%0%d => Lentry%2%d
Lentry%2%d => Lcond.true%1%d
Lentry%2%d => Lcond.false%1%intermediateVal0
Lcond.true%1%d => Lcond.end%1%bbentry
Lcond.false%1%intermediateVal0 => Lcond.end%1%bbentry
Lcond.end%1%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.end%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.false%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lcond.true%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: head_or
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%l : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%val : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : head_or : 10 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%l : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%val : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;head_or}
=memlabel_map.0 for call-context {*;head_or}
mlvar.dst.llvm.head_or.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => Lentry%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%tobool.Lentry%2%d
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*  %tobool = icmp ne %struct.list* %l, null, !dbg !23)
tfg_edge_comment end

=Edge: Lentry%2%d => Lcond.true%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %cond.true, label %cond.false, !dbg !23*  br i1 %tobool, label %cond.true, label %cond.false, !dbg !23)*  br i1 %tobool, label %cond.true, label %cond.false, !dbg !23)
tfg_edge_comment end

=Edge: Lentry%2%d => Lcond.false%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %cond.true, label %cond.false, !dbg !23*  br i1 %tobool, label %cond.true, label %cond.false, !dbg !23)*(  br i1 %tobool, label %cond.true, label %cond.false, !dbg !23*  br label %cond.end, !dbg !23))
tfg_edge_comment end

=Edge: Lcond.true%1%d => Lcond.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.head_or.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%0.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.head_or.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.head_or.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%val1.Lcond.end%1%bbentry
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvslt(1, 1) : BOOL
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(1, 3) : BV:64
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvzero_ext(5, 3) : BV:64
7 : bvmul(4, 6) : BV:64
8 : 63 { 0x3f +1.0e1025 } : INT
9 : bvextract(7, 8, 3) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : eq(9, 1) : BOOL
13 : ite(2, 11, 12) : BOOL
14 : 8 { 0x8 +1.0e1025 } : INT
15 : isindexforsize(13, 14) : BOOL
16 : input.dst.llvm-%l : BV:32
17 : bvmul(1, 5) : BV:32
18 : bvadd(1, 17) : BV:32
19 : bvadd(16, 18) : BV:32
20 : isgepoffset(19, 17) : BOOL
21 : and(15, 20) : BOOL
22 : bvadd(18, 1) : BV:32
23 : bvadd(16, 22) : BV:32
24 : isgepoffset(23, 1) : BOOL
25 : and(21, 24) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : islangaligned(7, 8) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:(((  %val1 = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 0, !dbg !24*  %val1 = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 0, !dbg !24)*(  %val1 = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 0, !dbg !24*  %val1 = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 0, !dbg !24))*((((  %0 = load i32, i32* %val1, align 4, !dbg !24*  %0 = load i32, i32* %val1, align 4, !dbg !24)*  br label %cond.end, !dbg !23)*(  %cond = phi i32 [ %0, %cond.true ], [ %val, %cond.false ], !dbg !23*  br label %cond.end, !dbg !23))*(  br label %cond.end, !dbg !23*  br label %cond.end, !dbg !23)))
tfg_edge_comment end

=Edge: Lcond.false%1%intermediateVal0 => Lcond.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-%val : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
1 : input.dst.llvm-%val : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((  %cond = phi i32 [ %0, %cond.true ], [ %val, %cond.false ], !dbg !23*  br label %cond.end, !dbg !23)*(  br label %cond.end, !dbg !23*  br label %cond.end, !dbg !23))
tfg_edge_comment end

=Edge: Lcond.end%1%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  ret i32 %cond, !dbg !25)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%l : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%val : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.head_or
=Loc 100001 in dst.llvm.head_or.
REGMEM
dst.llvm-%l
1 : input.dst.llvm-%l : BV:32
=Loc 100013 in dst.llvm.head_or.
REGMEM
dst.llvm-%val
1 : input.dst.llvm-%val : BV:32
=Loc 100014 in dst.llvm.head_or.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100016 in dst.llvm.head_or.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100017 in dst.llvm.head_or.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100018 in dst.llvm.head_or.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100019 in dst.llvm.head_or.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100022 in dst.llvm.head_or.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100023 in dst.llvm.head_or.
REGMEM
dst.local./*___y___head_or__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ : BV:32
=Loc 100024 in dst.llvm.head_or.
REGMEM
dst.local./*___y___head_or__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ : BV:32
=Loc 100026 in dst.llvm.head_or.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100027 in dst.llvm.head_or.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100028 in dst.llvm.head_or.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/
=Loc 100029 in dst.llvm.head_or.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/
=Loc 100030 in dst.llvm.head_or.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100031 in dst.llvm.head_or.
REGMEM
dst.llvm-%tobool.Lentry%2%d
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=Loc 100032 in dst.llvm.head_or.
REGMEM
dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=Loc 100033 in dst.llvm.head_or.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100034 in dst.llvm.head_or.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100035 in dst.llvm.head_or.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100036 in dst.llvm.head_or.
REGMEM
dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
1 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=Loc 100037 in dst.llvm.head_or.
REGMEM
dst.llvm-%0.Lcond.end%1%bbentry
1 : input.dst.llvm-%0.Lcond.end%1%bbentry : BV:32
=Loc 100038 in dst.llvm.head_or.
REGMEM
dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100039 in dst.llvm.head_or.
REGMEM
dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100040 in dst.llvm.head_or.
REGMEM
dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=Loc 100041 in dst.llvm.head_or.
REGMEM
dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=Loc 100042 in dst.llvm.head_or.
REGMEM
dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=Loc 100043 in dst.llvm.head_or.
REGMEM
dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry
1 : input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry : BV:32
=Loc 100044 in dst.llvm.head_or.
REGMEM
dst.llvm-%val1.Lcond.end%1%bbentry
1 : input.dst.llvm-%val1.Lcond.end%1%bbentry : BV:32
=Loc 100045 in dst.llvm.head_or.
REGMEM
dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=Loc 100046 in dst.llvm.head_or.
REGMEM
dst.cur_rounding_mode.Lentry%2%d
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.head_or
=live locs at L0%0%d
100001, 100013, 100028, 100029, 100030, 
=live locs at Lcond.end%1%bbentry
100030, 100032[f], 
=live locs at Lcond.false%1%intermediateVal0
100013, 100030, 
=live locs at Lcond.true%1%d
100001, 100028, 100029, 100030, 
=live locs at Lentry%2%d
100001, 100013, 100028, 100029, 100030, 100031, 
=live locs at E0%0%d
100030, 100032[f], 

=Definedness in dst.llvm.head_or
=loc definedness at L0%0%d
100001, 100013, 100023, 100024, 100026, 100027, 100028, 100029, 100030
=loc definedness at Lcond.end%1%bbentry
100001, 100013, 100023, 100024, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100045, 100046
=loc definedness at Lcond.false%1%intermediateVal0
100001, 100013, 100023, 100024, 100026, 100027, 100028, 100029, 100030, 100031, 100045, 100046
=loc definedness at Lcond.true%1%d
100001, 100013, 100023, 100024, 100026, 100027, 100028, 100029, 100030, 100031, 100045, 100046
=loc definedness at Lentry%2%d
100001, 100013, 100023, 100024, 100026, 100027, 100028, 100029, 100030, 100031, 100045, 100046
=loc definedness at E0%0%d
100001, 100013, 100023, 100024, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100035, 100045, 100046

=Branch affecting variable locs in dst.llvm.head_or
=branch affecting variable locs at L0%0%d
100001
=branch affecting variable locs at Lcond.end%1%bbentry

=branch affecting variable locs at Lcond.false%1%intermediateVal0

=branch affecting variable locs at Lcond.true%1%d

=branch affecting variable locs at Lentry%2%d
100031
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.head_or
=relevant memlabels
=function: head_or
memlabel-mem--arg.0
memlabel-mem--arg.1
memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100031 {input.dst.llvm-%tobool.Lentry%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100045 {input.dst.local_alloc_count.Lentry%2%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100046 {input.dst.cur_rounding_mode.Lentry%2%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>E0%0%d for loc_id 100033 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>E0%0%d for loc_id 100034 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>E0%0%d for loc_id 100035 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.end%1%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry for loc_id 100032 {input.dst.llvm-%cond.Lcond.end%1%bbentry }
1 : input.dst.llvm-%val : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry for loc_id 100036 {input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry }
1 : input.dst.llvm-%val : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100032 {input.dst.llvm-%cond.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100037 {input.dst.llvm-%0.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100038 {input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100039 {input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100040 {input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset.Lcond.end%1%bbentry }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100041 {input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100042 {input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100043 {input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry for loc_id 100044 {input.dst.llvm-%val1.Lcond.end%1%bbentry }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lcond.true%1%d=>Lcond.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.false%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.false%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.true%1%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lcond.true%1%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lcond.end%1%bbentry:
vacuous mls at Lcond.false%1%intermediateVal0:
vacuous mls at Lcond.true%1%d:
vacuous mls at Lentry%2%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lcond.end%1%bbentry:
non-vacuous mls at Lcond.false%1%intermediateVal0:
non-vacuous mls at Lcond.true%1%d:
non-vacuous mls at Lentry%2%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.head_or
=avail_exprs begin
=loc 100001
=loc_expr
140339 : input.dst.llvm-%l : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100013
=loc_expr
140341 : input.dst.llvm-%val : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140381 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140382 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140384 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100018
=loc_expr
140386 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100019
=loc_expr
140388 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140346 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100023
=loc_expr
140338 : input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100024
=loc_expr
140340 : input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100031
=loc_expr
140430 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=avail_exprs_val.end
=loc 100033
=loc_expr
140433 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100034
=loc_expr
140434 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100035
=loc_expr
140435 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100036
=loc_expr
140436 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%val : BV:32
=avail_exprs_val.end
=loc 100037
=loc_expr
140437 : input.dst.llvm-%0.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=avail_exprs_val.end
=loc 100038
=loc_expr
140438 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100039
=loc_expr
140439 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
140440 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140441 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140442 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100043
=loc_expr
140443 : input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=avail_exprs_val.end
=loc 100044
=loc_expr
140444 : input.dst.llvm-%val1.Lcond.end%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l : BV:32
=avail_exprs_val.end
=loc 100045
=loc_expr
140445 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100046
=loc_expr
140446 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.head_or
=loc 100035 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100035 spreled-expr
140267 : retaddr_const : BV:32
=loc 100038 expr
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=loc 100038 spreled-expr
140291 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100039 expr
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=loc 100039 spreled-expr
140291 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100041 expr
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=loc 100041 spreled-expr
140291 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100042 expr
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=loc 100042 spreled-expr
140291 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100045 expr
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=loc 100045 spreled-expr
140346 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100046 expr
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=loc 100046 spreled-expr
140345 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;head_or}
=loc_id 100001 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100013 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100014 lr-status in lr-status-map at call-context {*;head_or}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;head_or}
lr_status_top
=loc_id 100017 lr-status in lr-status-map at call-context {*;head_or}
lr_status_top
=loc_id 100018 lr-status in lr-status-map at call-context {*;head_or}
lr_status_top
=loc_id 100019 lr-status in lr-status-map at call-context {*;head_or}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;head_or}
lr_status_top
=loc_id 100023 lr-status in lr-status-map at call-context {*;head_or}
lr_status_top
=loc_id 100024 lr-status in lr-status-map at call-context {*;head_or}
lr_status_top
=loc_id 100026 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100027 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100028 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100029 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100030 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;head_or}
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100035 lr-status in lr-status-map at call-context {*;head_or}
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;head_or}
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;head_or}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;head_or}
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-map at call-context {*;head_or}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100044 lr-status in lr-status-map at call-context {*;head_or}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;head_or}
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-map at call-context {*;head_or}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100035 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100041 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.end%1%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lcond.true%1%d=>Lcond.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lcond.false%1%intermediateVal0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lcond.true%1%d
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%2%d
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%tobool.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.end%1%bbentry=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-%val : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
1 : input.dst.llvm-%val : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lcond.true%1%d=>Lcond.end%1%bbentry
=dst.llvm-%cond.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=dst.llvm-%0.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset.Lcond.end%1%bbentry
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=dst.llvm-%val1.Lcond.end%1%bbentry
1 : input.dst.llvm-%l : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lcond.false%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lcond.true%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d assume# 0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d done
=graph_with_simplified_assets.simplified_assumes at Lcond.end%1%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lcond.end%1%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.end%1%bbentry assume# 0
1 : input.dst.llvm-%l : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.end%1%bbentry assume# 1
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : isgepoffset(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : and(4, 3) : BOOL
6 : and(3, 5) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lcond.true%1%d=>Lcond.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.false%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.false%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.true%1%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lcond.true%1%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
1
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.head_or
=suffixpath_at_L0%0%d for dst.llvm.head_or
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lcond.end%1%bbentry for dst.llvm.head_or
=suffixpath_at_Lcond.end%1%bbentry.graph_edge_composition
(((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*(Lcond.true%1%d=>Lcond.end%1%bbentry)))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.false%1%intermediateVal0)*(Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry))))
=suffixpath_at_Lcond.false%1%intermediateVal0 for dst.llvm.head_or
=suffixpath_at_Lcond.false%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lcond.false%1%intermediateVal0))
=suffixpath_at_Lcond.true%1%d for dst.llvm.head_or
=suffixpath_at_Lcond.true%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lcond.true%1%d))
=suffixpath_at_Lentry%2%d for dst.llvm.head_or
=suffixpath_at_Lentry%2%d.graph_edge_composition
(L0%0%d=>Lentry%2%d)
=suffixpath_at_E0%0%d for dst.llvm.head_or
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.true%1%d)*(Lcond.true%1%d=>Lcond.end%1%bbentry)))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lcond.false%1%intermediateVal0)*(Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry))))*(Lcond.end%1%bbentry=>E0%0%d))
=suffixpaths for dst.llvm.head_or done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lentry%2%d
=LhsExpr
140339 : input.dst.llvm-%l : BV:32
140347 : 8 { 0x8 +1.0e1025 } : INT
140348 : islangaligned(140339, 140347) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lentry%2%d done
tfg.assumes_around_edge at Lcond.end%1%bbentry=>E0%0%d
tfg.assumes_around_edge at Lcond.end%1%bbentry=>E0%0%d done
tfg.assumes_around_edge at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
tfg.assumes_around_edge at Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry done
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #0
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lcond.true%1%d=>Lcond.end%1%bbentry
=LhsExpr
140339 : input.dst.llvm-%l : BV:32
140311 : 4 { 0x4 +1.0e1025 } : INT
140473 : islangaligned(140339, 140311) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #1
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry assume #1.pred
=Comment
undef-behavioursome.edge.Lcond.true%1%d=>Lcond.end%1%bbentry
=LhsExpr
140339 : input.dst.llvm-%l : BV:32
140291 : 0 { 0x0 +1.0e129 } : BV:32
140416 : isgepoffset(140339, 140291) : BOOL
140276 : 1 { 0x1 } : BOOL
140468 : and(140276, 140416) : BOOL
140471 : and(140416, 140468) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lcond.true%1%d=>Lcond.end%1%bbentry done
tfg.assumes_around_edge at Lentry%2%d=>Lcond.false%1%intermediateVal0
tfg.assumes_around_edge at Lentry%2%d=>Lcond.false%1%intermediateVal0 done
tfg.assumes_around_edge at Lentry%2%d=>Lcond.true%1%d
tfg.assumes_around_edge at Lentry%2%d=>Lcond.true%1%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lcond.end%1%d
=linename
line 7
=pc
Lcond.false%1%d
=linename
line 7
=pc
Lcond.true%1%d
=linename
line 7
=pc
Lcond.true%2%d
=linename
line 7
=pc
Lcond.true%3%d
=linename
line 7
=pc
Lentry%1%d
=linename
line 7
=pc
Lentry%2%d
=linename
line 7
=PC_to_linename done
=PC_to_column_name:
=pc
Lcond.end%1%d
=column_name
 at column 3
=pc
Lcond.false%1%d
=column_name
 at column 10
=pc
Lcond.true%1%d
=column_name
 at column 17
=pc
Lcond.true%2%d
=column_name
 at column 17
=pc
Lcond.true%3%d
=column_name
 at column 10
=pc
Lentry%1%d
=column_name
 at column 10
=pc
Lentry%2%d
=column_name
 at column 10
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lcond.end%1%d
=line_and_column
(line 7 at column 3)
=pc
Lcond.false%1%d
=line_and_column
(line 7 at column 10)
=pc
Lcond.true%1%d
=line_and_column
(line 7 at column 17)
=pc
Lcond.true%2%d
=line_and_column
(line 7 at column 17)
=pc
Lcond.true%3%d
=line_and_column
(line 7 at column 10)
=pc
Lentry%1%d
=line_and_column
(line 7 at column 10)
=pc
Lentry%2%d
=line_and_column
(line 7 at column 10)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset.Lcond.end%1%bbentry : L0%0%d : l'{L0%0%d}
input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___head_or__x__=L0%0%argnum0=/
input.dst.llvm-%l : L0%0%d : l'
input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___head_or__x__=L0%0%argnum1=/
input.dst.llvm-%val : L0%0%d : val'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%tobool : L0%0%d : not(l' = 0)
input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset : L0%0%d : l'
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%val1]_4
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val1 : L0%0%d : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset
input.dst.llvm-%cond.phi.tmpvar.cond.true : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%cond.phi.tmpvar.cond.false : L0%0%d : val'
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%cond
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : L0%0%d : 0
input.dst.llvm-%tobool.Lentry%2%d : L0%0%d : not(l'{L0%0%d} = 0)
input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%cond.Lcond.end%1%bbentry
input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : L0%0%d : val'{L0%0%d}
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%0.Lcond.end%1%bbentry : L0%0%d : DSTMEM[l'{L0%0%d}]_4
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry : L0%0%d : 0
input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry : L0%0%d : DSTMEM[l'{L0%0%d}]_4
input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : L0%0%d : 0
input.dst.llvm-%val1.Lcond.end%1%bbentry : L0%0%d : l'{L0%0%d}
input.dst.local_alloc_count.Lentry%2%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d={L0%0%d}
input.dst.cur_rounding_mode.Lentry%2%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%val1
=dst.llvm-%val1 loop pc: L0%0%d
=dst.llvm-%val1 val_scevb
=dst.llvm-%val1 val_scevb scev
=dst.llvm-%val1 val_scevb scev loop: L0%0%d
=dst.llvm-%val1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%val1 val_scevb scev scev_expr
1 : input.dst.llvm-%l : BV32
=dst.llvm-%val1 val_scevb scev scev_expr done
=dst.llvm-%val1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb
=dst.llvm-%val1 atuse_scevb scev
=dst.llvm-%val1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%val1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val1 atuse_scevb scev scev_expr
1 : input.dst.llvm-%l : BV32
=dst.llvm-%val1 atuse_scevb scev scev_expr done
=dst.llvm-%val1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val1 atexit_scev nullptr
=dst.llvm-%0
=dst.llvm-%0 loop pc: L0%0%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
2 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
2 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev nullptr
=dst.llvm-%cond
=dst.llvm-%cond loop pc: L0%0%d
=dst.llvm-%cond val_scevb
=dst.llvm-%cond val_scevb scev
=dst.llvm-%cond val_scevb scev loop: L0%0%d
=dst.llvm-%cond val_scevb scev scev_overflow_flag: 
=dst.llvm-%cond val_scevb scev scev_expr
3 : input.dst.llvm-%cond : BV32
=dst.llvm-%cond val_scevb scev scev_expr done
=dst.llvm-%cond val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%cond val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%cond val_scevb signed lower bound: 32:4294967295
=dst.llvm-%cond val_scevb signed upper bound: 32:4294967295
=dst.llvm-%cond atuse_scevb
=dst.llvm-%cond atuse_scevb scev
=dst.llvm-%cond atuse_scevb scev loop: L0%0%d
=dst.llvm-%cond atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%cond atuse_scevb scev scev_expr
3 : input.dst.llvm-%cond : BV32
=dst.llvm-%cond atuse_scevb scev scev_expr done
=dst.llvm-%cond atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%cond atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%cond atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%cond atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%cond atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lcond.end%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 7 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 8 edges
  Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 9 edges
  Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%0.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%val1.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns done
=Reaching Definitions at Lcond.false%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 7 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at Lcond.true%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 7 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 7 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%val : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 7 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%cond.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 8 edges
  Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lcond.end%1%bbentry=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lcond.end%1%bbentry=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 11 edges
  Lcond.end%1%bbentry=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lcond.false%1%intermediateVal0=>Lcond.end%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%0.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 17 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%val1.Lcond.end%1%bbentry : BV:32
=reaching defns for expr 20 edges
  Lcond.true%1%d=>Lcond.end%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.3.total_offset.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___head_or__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%l
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___head_or__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.llvm-%val
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.1.offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cond.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%tobool.Lentry%2%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.2.total_offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%cond.phi.tmpvar.cond.false.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%0.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.gepoffset.1.total_offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cond.phi.tmpvar.cond.true.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%acfdcc15ff8b6e2c45d799138e49eb.intermediate.gepoffset.2.offset.Lcond.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%val1.Lcond.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%2%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
