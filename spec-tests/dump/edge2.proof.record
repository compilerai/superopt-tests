==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x11 $x12)))
 (let (($x19 (and $x8 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x11 $x12)))
 (let (($x19 (and $x8 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310036/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%11%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%11%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (= true false)))
 (let (($x55 (= $x54 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x46 (concat ?x39 (concat ?x13 ?x22)))))
 (let (($x48 (= ?x47 input.dst.llvm-%x)))
 (let (($x49 (= $x48 true)))
 (let (($x50 (= $x49 true)))
 (let (($x14 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x38 (= $x14 true)))
 (let (($x8 (= $x38 true)))
 (let (($x16 (= $x8 true)))
 (let ((?x9 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x9)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x35 $x37)))
 (let (($x29 (and $x10 $x44)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x27 $x29)))
 (let (($x42 (= $x26 true)))
 (let (($x43 (= $x42 true)))
 (let (($x15 (= $x43 true)))
 (let (($x17 (and $x15 $x16)))
 (let (($x51 (and $x17 $x50)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-1.L1%11%bbentry)))
 (let (($x52 (and $x21 $x51)))
 (let (($x32 (= (_ bv3 32) input.spec-%tmpvar-2.L1%11%bbentry)))
 (let (($x53 (and $x32 $x52)))
 (let (($x56 (=> $x53 $x55)))
 (not $x56)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%11%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%11%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (= true false)))
 (let (($x55 (= $x54 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x46 (concat ?x39 (concat ?x13 ?x22)))))
 (let (($x48 (= ?x47 input.dst.llvm-%x)))
 (let (($x49 (= $x48 true)))
 (let (($x50 (= $x49 true)))
 (let (($x14 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x38 (= $x14 true)))
 (let (($x8 (= $x38 true)))
 (let (($x16 (= $x8 true)))
 (let ((?x9 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x9)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x35 $x37)))
 (let (($x29 (and $x10 $x44)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x27 $x29)))
 (let (($x42 (= $x26 true)))
 (let (($x43 (= $x42 true)))
 (let (($x15 (= $x43 true)))
 (let (($x17 (and $x15 $x16)))
 (let (($x51 (and $x17 $x50)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-1.L1%11%bbentry)))
 (let (($x52 (and $x21 $x51)))
 (let (($x32 (= (_ bv3 32) input.spec-%tmpvar-2.L1%11%bbentry)))
 (let (($x53 (and $x32 $x52)))
 (let (($x56 (=> $x53 $x55)))
 (not $x56)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-1.L1%11%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.L1%11%bbentry #b00000000000000000000000000000011)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%11%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%11%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%tmpvar-1.L1%11%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.L1%11%bbentry () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310036/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%11%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%11%bbentry () (_ BitVec 32))
(assert
 (let (($x57 (= (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x36 (or $x56 $x57)))
 (let (($x30 (or false $x36)))
 (let (($x58 (= $x30 true)))
 (let (($x59 (= $x58 true)))
 (let (($x49 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x50 (= $x49 true)))
 (let (($x51 (= $x50 true)))
 (let (($x52 (= $x51 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x20 (concat ?x18 (concat ?x17 ?x38)))))
 (let (($x22 (= ?x12 input.dst.llvm-%x)))
 (let (($x40 (= $x22 true)))
 (let (($x41 (= $x40 true)))
 (let ((?x9 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x9)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x35 $x37)))
 (let (($x29 (and $x10 $x44)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x27 $x29)))
 (let (($x42 (= $x26 true)))
 (let (($x43 (= $x42 true)))
 (let (($x15 (= $x43 true)))
 (let (($x47 (and $x15 $x41)))
 (let (($x53 (and $x47 $x52)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-1.L1%11%bbentry)))
 (let (($x54 (and $x21 $x53)))
 (let (($x19 (= (_ bv3 32) input.spec-%tmpvar-2.L1%11%bbentry)))
 (let (($x55 (and $x19 $x54)))
 (let (($x60 (=> $x55 $x59)))
 (not $x60)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%11%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%11%bbentry () (_ BitVec 32))
(assert
 (let (($x57 (= (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x36 (or $x56 $x57)))
 (let (($x30 (or false $x36)))
 (let (($x58 (= $x30 true)))
 (let (($x59 (= $x58 true)))
 (let (($x49 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x50 (= $x49 true)))
 (let (($x51 (= $x50 true)))
 (let (($x52 (= $x51 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x20 (concat ?x18 (concat ?x17 ?x38)))))
 (let (($x22 (= ?x12 input.dst.llvm-%x)))
 (let (($x40 (= $x22 true)))
 (let (($x41 (= $x40 true)))
 (let ((?x9 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x9)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x35 $x37)))
 (let (($x29 (and $x10 $x44)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x27 $x29)))
 (let (($x42 (= $x26 true)))
 (let (($x43 (= $x42 true)))
 (let (($x15 (= $x43 true)))
 (let (($x47 (and $x15 $x41)))
 (let (($x53 (and $x47 $x52)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-1.L1%11%bbentry)))
 (let (($x54 (and $x21 $x53)))
 (let (($x19 (= (_ bv3 32) input.spec-%tmpvar-2.L1%11%bbentry)))
 (let (($x55 (and $x19 $x54)))
 (let (($x60 (=> $x55 $x59)))
 (not $x60)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310036/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%11%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%11%bbentry () (_ BitVec 32))
(assert
 (let ((?x58 (bvadd (_ bv3 32) input.spec-%var-x-0)))
 (let ((?x30 (bvadd (_ bv3 32) input.dst.llvm-%x)))
 (let (($x59 (= ?x30 ?x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x37 (concat ?x48 (concat ?x22 ?x54)))))
 (let (($x12 (= ?x6 input.dst.llvm-%x)))
 (let (($x41 (= $x12 true)))
 (let (($x9 (= $x41 true)))
 (let (($x40 (= input.dst.llvm-%x ?x6)))
 (let ((?x43 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x15 (= (_ bv0 32) ?x43)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x10 $x13)))
 (let (($x28 (and $x49 $x15)))
 (let (($x47 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and (and (and $x38 $x47) $x28) $x40)))
 (let (($x26 (= $x17 true)))
 (let (($x51 (= $x26 true)))
 (let (($x44 (= $x51 true)))
 (let (($x29 (and $x44 $x9)))
 (let (($x25 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x39 (and $x25 $x29)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-1.L1%11%bbentry)))
 (let (($x57 (and $x19 $x39)))
 (let (($x11 (= (_ bv3 32) input.spec-%tmpvar-2.L1%11%bbentry)))
 (let (($x36 (and $x11 $x57)))
 (let (($x31 (=> $x36 $x61)))
 (not $x31)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%11%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%11%bbentry () (_ BitVec 32))
(assert
 (let ((?x58 (bvadd (_ bv3 32) input.spec-%var-x-0)))
 (let ((?x30 (bvadd (_ bv3 32) input.dst.llvm-%x)))
 (let (($x59 (= ?x30 ?x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x37 (concat ?x48 (concat ?x22 ?x54)))))
 (let (($x12 (= ?x6 input.dst.llvm-%x)))
 (let (($x41 (= $x12 true)))
 (let (($x9 (= $x41 true)))
 (let (($x40 (= input.dst.llvm-%x ?x6)))
 (let ((?x43 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x15 (= (_ bv0 32) ?x43)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x10 $x13)))
 (let (($x28 (and $x49 $x15)))
 (let (($x47 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and (and (and $x38 $x47) $x28) $x40)))
 (let (($x26 (= $x17 true)))
 (let (($x51 (= $x26 true)))
 (let (($x44 (= $x51 true)))
 (let (($x29 (and $x44 $x9)))
 (let (($x25 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x39 (and $x25 $x29)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-1.L1%11%bbentry)))
 (let (($x57 (and $x19 $x39)))
 (let (($x11 (= (_ bv3 32) input.spec-%tmpvar-2.L1%11%bbentry)))
 (let (($x36 (and $x11 $x57)))
 (let (($x31 (=> $x36 $x61)))
 (not $x31)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310036/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%11%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%11%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvadd (_ bv3 32) input.dst.llvm-%x)))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let (($x61 (= $x60 true)))
 (let (($x31 (= $x61 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x18 (concat ?x22 (concat ?x50 ?x34)))))
 (let (($x9 (= ?x6 input.dst.llvm-%x)))
 (let (($x29 (= $x9 true)))
 (let (($x39 (= $x29 true)))
 (let (($x40 (= input.dst.llvm-%x ?x6)))
 (let ((?x49 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x43 (= (_ bv0 32) ?x49)))
 (let ((?x10 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x55 $x56)))
 (let (($x15 (and $x13 $x43)))
 (let (($x47 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and (and (and $x33 $x47) $x15) $x40)))
 (let (($x44 (= $x51 true)))
 (let (($x12 (= $x44 true)))
 (let (($x41 (= $x12 true)))
 (let (($x57 (and $x41 $x39)))
 (let (($x52 (= (_ bv1 32) (_ bv0 32))))
 (let (($x36 (and $x52 $x57)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-1.L1%11%bbentry)))
 (let (($x30 (and $x11 $x36)))
 (let (($x19 (= (_ bv3 32) input.spec-%tmpvar-2.L1%11%bbentry)))
 (let (($x58 (and $x19 $x30)))
 (let (($x14 (=> $x58 $x31)))
 (not $x14))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%11%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%11%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvadd (_ bv3 32) input.dst.llvm-%x)))
 (let (($x60 (= (_ bv0 32) ?x59)))
 (let (($x61 (= $x60 true)))
 (let (($x31 (= $x61 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x18 (concat ?x22 (concat ?x50 ?x34)))))
 (let (($x9 (= ?x6 input.dst.llvm-%x)))
 (let (($x29 (= $x9 true)))
 (let (($x39 (= $x29 true)))
 (let (($x40 (= input.dst.llvm-%x ?x6)))
 (let ((?x49 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x43 (= (_ bv0 32) ?x49)))
 (let ((?x10 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x55 $x56)))
 (let (($x15 (and $x13 $x43)))
 (let (($x47 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and (and (and $x33 $x47) $x15) $x40)))
 (let (($x44 (= $x51 true)))
 (let (($x12 (= $x44 true)))
 (let (($x41 (= $x12 true)))
 (let (($x57 (and $x41 $x39)))
 (let (($x52 (= (_ bv1 32) (_ bv0 32))))
 (let (($x36 (and $x52 $x57)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-1.L1%11%bbentry)))
 (let (($x30 (and $x11 $x36)))
 (let (($x19 (= (_ bv3 32) input.spec-%tmpvar-2.L1%11%bbentry)))
 (let (($x58 (and $x19 $x30)))
 (let (($x14 (=> $x58 $x31)))
 (not $x14))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310036/query
