==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087313/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x37 (not $x36)))
 (let (($x105 (or $x36 $x37)))
 (let (($x106 (= $x105 false)))
 (let (($x107 (= $x106 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x97 (concat ?x94 (concat ?x91 ?x89)))))
 (let (($x99 (= ?x98 input.dst.llvm-%x)))
 (let (($x100 (= $x99 true)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x74)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x78)))
 (let (($x81 (= input.spec-%var-x-0.2 ?x80)))
 (let (($x67 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x82 (=> $x67 $x81)))
 (let ((?x63 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x63 (_ bv1 32))))
 (let (($x69 (= $x67 $x68)))
 (let (($x5 (= false false)))
 (let (($x62 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x66 (=> $x62 $x5)))
 (let (($x64 (= ?x63 (_ bv0 32))))
 (let (($x65 (= $x62 $x64)))
 (let (($x85 (and (and (and $x65 $x66) $x69) $x82)))
 (let (($x86 (= $x85 true)))
 (let (($x53 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x59 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x41 (=> (and $x37 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x48 (= $x41 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x16)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x40 $x38)))
 (let (($x19 (and $x28 $x10)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x15 $x19)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x32)))))))
 (let (($x17 (and $x42 $x22)))
 (let (($x11 (= $x17 true)))
 (let (($x60 (and $x11 $x48)))
 (let (($x87 (and $x60 $x86)))
 (let (($x101 (and $x87 $x100)))
 (let (($x27 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x102 (and $x27 $x101)))
 (let (($x103 (and $x5 $x102)))
 (let (($x18 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x104 (and $x18 $x103)))
 (let (($x108 (=> $x104 $x107)))
 (not $x108)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x37 (not $x36)))
 (let (($x105 (or $x36 $x37)))
 (let (($x106 (= $x105 false)))
 (let (($x107 (= $x106 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x97 (concat ?x94 (concat ?x91 ?x89)))))
 (let (($x99 (= ?x98 input.dst.llvm-%x)))
 (let (($x100 (= $x99 true)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x74)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x78)))
 (let (($x81 (= input.spec-%var-x-0.2 ?x80)))
 (let (($x67 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x82 (=> $x67 $x81)))
 (let ((?x63 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x63 (_ bv1 32))))
 (let (($x69 (= $x67 $x68)))
 (let (($x5 (= false false)))
 (let (($x62 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x66 (=> $x62 $x5)))
 (let (($x64 (= ?x63 (_ bv0 32))))
 (let (($x65 (= $x62 $x64)))
 (let (($x85 (and (and (and $x65 $x66) $x69) $x82)))
 (let (($x86 (= $x85 true)))
 (let (($x53 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x59 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x41 (=> (and $x37 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x52 $x53)))))))
 (let (($x48 (= $x41 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x16)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x40 $x38)))
 (let (($x19 (and $x28 $x10)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x15 $x19)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x32)))))))
 (let (($x17 (and $x42 $x22)))
 (let (($x11 (= $x17 true)))
 (let (($x60 (and $x11 $x48)))
 (let (($x87 (and $x60 $x86)))
 (let (($x101 (and $x87 $x100)))
 (let (($x27 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x102 (and $x27 $x101)))
 (let (($x103 (and $x5 $x102)))
 (let (($x18 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x104 (and $x18 $x103)))
 (let (($x108 (=> $x104 $x107)))
 (not $x108)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-x-0.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%7%bbentry #b00000000000000000000000000000101)
(= input.spec-%var-x_val-0.L2%7%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-x-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-x-0.2 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv536870908 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv536870911 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv536870908 32))
(define-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087313/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x23 (not $x39)))
 (let (($x110 (or $x39 $x23)))
 (let (($x111 (not $x110)))
 (let (($x83 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x70 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x88 (or $x70 $x83)))
 (let (($x112 (or $x88 $x111)))
 (let (($x113 (= $x112 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x103 (concat ?x100 (concat ?x95 ?x89)))))
 (let (($x105 (= ?x104 input.dst.llvm-%x)))
 (let (($x106 (= $x105 true)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x71)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x81)))
 (let (($x86 (= input.spec-%var-x-0.2 ?x85)))
 (let (($x87 (=> $x70 $x86)))
 (let ((?x67 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x79 (bvuge ?x67 (_ bv1 32))))
 (let (($x75 (= $x70 $x79)))
 (let (($x97 (and (and (= $x83 (= ?x67 (_ bv0 32))) (=> $x83 (= false false))) $x75)))
 (let (($x93 (and $x97 $x87)))
 (let (($x94 (= $x93 true)))
 (let (($x64 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x65 (= $x64 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x53 $x55)))
 (let (($x41 (and $x56 $x59)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x22 $x41)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x37)))))))
 (let (($x60 (and $x52 $x48)))
 (let (($x61 (= $x60 true)))
 (let (($x5 (and $x61 $x65)))
 (let (($x90 (and $x5 $x94)))
 (let (($x107 (and $x90 $x106)))
 (let (($x16 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x108 (and $x16 $x107)))
 (let (($x33 (= false false)))
 (let (($x109 (and $x33 $x108)))
 (let (($x12 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x20 (and $x12 $x109)))
 (let (($x43 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x15 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x43)))))))
 (let (($x30 (=> (and $x23 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x32 $x43)))))))
 (let (($x6 (and $x30 $x20)))
 (let (($x114 (=> $x6 $x113)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x23 (not $x39)))
 (let (($x110 (or $x39 $x23)))
 (let (($x111 (not $x110)))
 (let (($x83 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x70 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x88 (or $x70 $x83)))
 (let (($x112 (or $x88 $x111)))
 (let (($x113 (= $x112 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x103 (concat ?x100 (concat ?x95 ?x89)))))
 (let (($x105 (= ?x104 input.dst.llvm-%x)))
 (let (($x106 (= $x105 true)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x71)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x81)))
 (let (($x86 (= input.spec-%var-x-0.2 ?x85)))
 (let (($x87 (=> $x70 $x86)))
 (let ((?x67 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x79 (bvuge ?x67 (_ bv1 32))))
 (let (($x75 (= $x70 $x79)))
 (let (($x97 (and (and (= $x83 (= ?x67 (_ bv0 32))) (=> $x83 (= false false))) $x75)))
 (let (($x93 (and $x97 $x87)))
 (let (($x94 (= $x93 true)))
 (let (($x64 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x65 (= $x64 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x53 $x55)))
 (let (($x41 (and $x56 $x59)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x22 $x41)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x37)))))))
 (let (($x60 (and $x52 $x48)))
 (let (($x61 (= $x60 true)))
 (let (($x5 (and $x61 $x65)))
 (let (($x90 (and $x5 $x94)))
 (let (($x107 (and $x90 $x106)))
 (let (($x16 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x108 (and $x16 $x107)))
 (let (($x33 (= false false)))
 (let (($x109 (and $x33 $x108)))
 (let (($x12 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x20 (and $x12 $x109)))
 (let (($x43 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x15 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x43)))))))
 (let (($x30 (=> (and $x23 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x32 $x43)))))))
 (let (($x6 (and $x30 $x20)))
 (let (($x114 (=> $x6 $x113)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087313/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x28)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x37)))
 (let (($x76 (= input.spec-%var-x-0.2 ?x97)))
 (let (($x116 (= $x76 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x101 (concat ?x95 (concat ?x99 ?x102)))))
 (let (($x111 (= ?x104 input.dst.llvm-%x)))
 (let (($x112 (= $x111 true)))
 (let (($x31 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x27 (not $x39)))
 (let (($x20 (=> $x27 $x31)))
 (let (($x105 (= input.dst.llvm-%x ?x104)))
 (let (($x106 (and $x31 $x105)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x86)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x77 $x81)))
 (let (($x93 (and $x85 $x87)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x73 $x93)))
 (let (($x69 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x82 (=> $x69 $x76)))
 (let ((?x70 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x70 (_ bv1 32))))
 (let (($x59 (= $x69 $x83)))
 (let (($x46 (= false false)))
 (let (($x17 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x66 (=> $x17 $x46)))
 (let (($x64 (= ?x70 (_ bv0 32))))
 (let (($x5 (= $x17 $x64)))
 (let (($x80 (and (and (and $x5 $x66) $x59) $x82)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x15)))))))
 (let (($x109 (and (and (and $x60 $x80) $x94) $x106)))
 (let (($x6 (and $x109 $x20)))
 (let (($x88 (= $x6 true)))
 (let (($x51 (= $x27 true)))
 (let (($x47 (= $x31 true)))
 (let (($x84 (and $x47 $x51)))
 (let (($x110 (and $x84 $x88)))
 (let (($x113 (and $x110 $x112)))
 (let (($x114 (and $x69 $x113)))
 (let (($x50 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x115 (and $x50 $x114)))
 (let (($x8 (and $x46 $x115)))
 (let (($x26 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x10 (and $x26 $x8)))
 (let (($x33 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x11 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x33)))))))
 (let (($x21 (=> (and $x27 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x35 $x33)))))))
 (let (($x91 (and $x21 $x10)))
 (let (($x117 (=> $x91 $x116)))
 (not $x117))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x28)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x37)))
 (let (($x76 (= input.spec-%var-x-0.2 ?x97)))
 (let (($x116 (= $x76 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x101 (concat ?x95 (concat ?x99 ?x102)))))
 (let (($x111 (= ?x104 input.dst.llvm-%x)))
 (let (($x112 (= $x111 true)))
 (let (($x31 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x27 (not $x39)))
 (let (($x20 (=> $x27 $x31)))
 (let (($x105 (= input.dst.llvm-%x ?x104)))
 (let (($x106 (and $x31 $x105)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x86)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x77 $x81)))
 (let (($x93 (and $x85 $x87)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x73 $x93)))
 (let (($x69 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x82 (=> $x69 $x76)))
 (let ((?x70 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x70 (_ bv1 32))))
 (let (($x59 (= $x69 $x83)))
 (let (($x46 (= false false)))
 (let (($x17 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x66 (=> $x17 $x46)))
 (let (($x64 (= ?x70 (_ bv0 32))))
 (let (($x5 (= $x17 $x64)))
 (let (($x80 (and (and (and $x5 $x66) $x59) $x82)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x15)))))))
 (let (($x109 (and (and (and $x60 $x80) $x94) $x106)))
 (let (($x6 (and $x109 $x20)))
 (let (($x88 (= $x6 true)))
 (let (($x51 (= $x27 true)))
 (let (($x47 (= $x31 true)))
 (let (($x84 (and $x47 $x51)))
 (let (($x110 (and $x84 $x88)))
 (let (($x113 (and $x110 $x112)))
 (let (($x114 (and $x69 $x113)))
 (let (($x50 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x115 (and $x50 $x114)))
 (let (($x8 (and $x46 $x115)))
 (let (($x26 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x10 (and $x26 $x8)))
 (let (($x33 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x11 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x33)))))))
 (let (($x21 (=> (and $x27 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x35 $x33)))))))
 (let (($x91 (and $x21 $x10)))
 (let (($x117 (=> $x91 $x116)))
 (not $x117))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087313/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x13 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x12 (= $x13 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x100 (concat ?x103 (concat ?x101 ?x108)))))
 (let (($x114 (= ?x89 input.dst.llvm-%x)))
 (let (($x115 (= $x114 true)))
 (let (($x93 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x112 (= $x93 true)))
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x34 (not $x68)))
 (let (($x6 (=> $x34 $x93)))
 (let (($x104 (= input.dst.llvm-%x ?x89)))
 (let (($x105 (and $x93 $x104)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x77)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x80 $x72)))
 (let (($x81 (and $x73 $x71)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x82 $x81)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x78)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x55)))
 (let (($x57 (= input.spec-%var-x-0.2 ?x54)))
 (let (($x47 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x58 (=> $x47 $x57)))
 (let ((?x36 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x36 (_ bv1 32))))
 (let (($x66 (= $x47 $x46)))
 (let (($x49 (= false false)))
 (let (($x9 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x5 (=> $x9 $x49)))
 (let (($x70 (= ?x36 (_ bv0 32))))
 (let (($x64 (= $x9 $x70)))
 (let (($x97 (and (and (and $x64 $x5) $x66) $x58)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x63)))))))
 (let (($x20 (and (and (and $x17 $x97) $x85) $x105)))
 (let (($x88 (and $x20 $x6)))
 (let (($x110 (= $x88 true)))
 (let (($x51 (= $x68 true)))
 (let (($x111 (and $x51 $x110)))
 (let (($x113 (and $x111 $x112)))
 (let (($x8 (and $x113 $x115)))
 (let (($x10 (and $x47 $x8)))
 (let (($x45 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x91 (and $x45 $x10)))
 (let (($x116 (and $x49 $x91)))
 (let (($x75 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x117 (and $x75 $x116)))
 (let (($x19 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x24 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x19)))))))
 (let (($x40 (=> (and $x34 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x30 $x19)))))))
 (let (($x118 (and $x40 $x117)))
 (let (($x90 (=> $x118 $x12)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x13 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x12 (= $x13 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x100 (concat ?x103 (concat ?x101 ?x108)))))
 (let (($x114 (= ?x89 input.dst.llvm-%x)))
 (let (($x115 (= $x114 true)))
 (let (($x93 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x112 (= $x93 true)))
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x34 (not $x68)))
 (let (($x6 (=> $x34 $x93)))
 (let (($x104 (= input.dst.llvm-%x ?x89)))
 (let (($x105 (and $x93 $x104)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x77)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x80 $x72)))
 (let (($x81 (and $x73 $x71)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x82 $x81)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x78)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x55)))
 (let (($x57 (= input.spec-%var-x-0.2 ?x54)))
 (let (($x47 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x58 (=> $x47 $x57)))
 (let ((?x36 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x36 (_ bv1 32))))
 (let (($x66 (= $x47 $x46)))
 (let (($x49 (= false false)))
 (let (($x9 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x5 (=> $x9 $x49)))
 (let (($x70 (= ?x36 (_ bv0 32))))
 (let (($x64 (= $x9 $x70)))
 (let (($x97 (and (and (and $x64 $x5) $x66) $x58)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x63)))))))
 (let (($x20 (and (and (and $x17 $x97) $x85) $x105)))
 (let (($x88 (and $x20 $x6)))
 (let (($x110 (= $x88 true)))
 (let (($x51 (= $x68 true)))
 (let (($x111 (and $x51 $x110)))
 (let (($x113 (and $x111 $x112)))
 (let (($x8 (and $x113 $x115)))
 (let (($x10 (and $x47 $x8)))
 (let (($x45 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x91 (and $x45 $x10)))
 (let (($x116 (and $x49 $x91)))
 (let (($x75 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x117 (and $x75 $x116)))
 (let (($x19 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x24 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x19)))))))
 (let (($x40 (=> (and $x34 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x30 $x19)))))))
 (let (($x118 (and $x40 $x117)))
 (let (($x90 (=> $x118 $x12)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087313/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x54)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x106)))
 (let (($x29 (= (_ bv5 32) ?x82)))
 (let (($x27 (= $x29 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x20 (concat ?x89 (concat ?x108 ?x98)))))
 (let (($x91 (= ?x6 input.dst.llvm-%x)))
 (let (($x116 (= $x91 true)))
 (let (($x65 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x68 (not $x50)))
 (let (($x114 (=> $x68 $x65)))
 (let (($x88 (= input.dst.llvm-%x ?x6)))
 (let (($x110 (and $x65 $x88)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x93)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x85 $x86)))
 (let (($x100 (and $x87 $x102)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x81 $x100)))
 (let (($x80 (= input.spec-%var-x-0.2 ?x82)))
 (let (($x14 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x107 (=> $x14 $x80)))
 (let ((?x31 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x61 (bvuge ?x31 (_ bv1 32))))
 (let (($x83 (= $x14 $x61)))
 (let (($x45 (= false false)))
 (let (($x38 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x67 (=> $x38 $x45)))
 (let (($x9 (= ?x31 (_ bv0 32))))
 (let (($x16 (= $x38 $x9)))
 (let (($x77 (and (and (and $x16 $x67) $x83) $x107)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x5)))))))
 (let (($x113 (and (and (and $x74 $x77) $x95) $x110)))
 (let (($x115 (and $x113 $x114)))
 (let (($x8 (= $x115 true)))
 (let (($x48 (= $x68 true)))
 (let (($x62 (= $x65 true)))
 (let (($x60 (and $x62 $x48)))
 (let (($x10 (and $x60 $x8)))
 (let (($x117 (and $x10 $x116)))
 (let (($x118 (and $x38 $x117)))
 (let (($x32 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x13 (and $x32 $x118)))
 (let (($x12 (and $x45 $x13)))
 (let (($x43 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x90 (and $x43 $x12)))
 (let (($x22 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x26 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x22)))))))
 (let (($x56 (=> (and $x68 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x96 $x22)))))))
 (let (($x119 (and $x56 $x90)))
 (let (($x84 (=> $x119 $x27)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x54)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x106)))
 (let (($x29 (= (_ bv5 32) ?x82)))
 (let (($x27 (= $x29 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x20 (concat ?x89 (concat ?x108 ?x98)))))
 (let (($x91 (= ?x6 input.dst.llvm-%x)))
 (let (($x116 (= $x91 true)))
 (let (($x65 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x68 (not $x50)))
 (let (($x114 (=> $x68 $x65)))
 (let (($x88 (= input.dst.llvm-%x ?x6)))
 (let (($x110 (and $x65 $x88)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x93)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x85 $x86)))
 (let (($x100 (and $x87 $x102)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x81 $x100)))
 (let (($x80 (= input.spec-%var-x-0.2 ?x82)))
 (let (($x14 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x107 (=> $x14 $x80)))
 (let ((?x31 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x61 (bvuge ?x31 (_ bv1 32))))
 (let (($x83 (= $x14 $x61)))
 (let (($x45 (= false false)))
 (let (($x38 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x67 (=> $x38 $x45)))
 (let (($x9 (= ?x31 (_ bv0 32))))
 (let (($x16 (= $x38 $x9)))
 (let (($x77 (and (and (and $x16 $x67) $x83) $x107)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x5)))))))
 (let (($x113 (and (and (and $x74 $x77) $x95) $x110)))
 (let (($x115 (and $x113 $x114)))
 (let (($x8 (= $x115 true)))
 (let (($x48 (= $x68 true)))
 (let (($x62 (= $x65 true)))
 (let (($x60 (and $x62 $x48)))
 (let (($x10 (and $x60 $x8)))
 (let (($x117 (and $x10 $x116)))
 (let (($x118 (and $x38 $x117)))
 (let (($x32 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x13 (and $x32 $x118)))
 (let (($x12 (and $x45 $x13)))
 (let (($x43 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x90 (and $x43 $x12)))
 (let (($x22 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x26 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x22)))))))
 (let (($x56 (=> (and $x68 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x96 $x22)))))))
 (let (($x119 (and $x56 $x90)))
 (let (($x84 (=> $x119 $x27)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087313/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x68 (not $x50)))
 (let (($x91 (or $x50 $x68)))
 (let (($x116 (= $x91 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x104 (concat ?x108 (concat ?x99 ?x105)))))
 (let (($x88 (= ?x6 input.dst.llvm-%x)))
 (let (($x110 (= $x88 true)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x80)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x71)))
 (let (($x109 (= input.spec-%var-x-0.2 ?x85)))
 (let (($x97 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x86 (=> $x97 $x109)))
 (let ((?x59 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x59 (_ bv1 32))))
 (let (($x55 (= $x97 $x78)))
 (let (($x32 (= false false)))
 (let (($x73 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x58 (=> $x73 $x32)))
 (let (($x76 (= ?x59 (_ bv0 32))))
 (let (($x57 (= $x73 $x76)))
 (let (($x102 (and (and (and $x57 $x58) $x55) $x86)))
 (let (($x100 (= $x102 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x16)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x53 $x31)))
 (let (($x67 (and $x9 $x45)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x60 $x67)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x49)))))))
 (let (($x14 (and $x74 $x72)))
 (let (($x61 (= $x14 true)))
 (let (($x95 (and $x61 $x100)))
 (let (($x113 (and $x95 $x110)))
 (let (($x65 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x114 (and $x65 $x113)))
 (let (($x115 (and $x32 $x114)))
 (let (($x41 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x8 (and $x41 $x115)))
 (let (($x24 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x43 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x24)))))))
 (let (($x52 (=> (and $x68 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x21 $x24)))))))
 (let (($x10 (and $x52 $x8)))
 (let (($x117 (=> $x10 $x116)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x68 (not $x50)))
 (let (($x91 (or $x50 $x68)))
 (let (($x116 (= $x91 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x104 (concat ?x108 (concat ?x99 ?x105)))))
 (let (($x88 (= ?x6 input.dst.llvm-%x)))
 (let (($x110 (= $x88 true)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x80)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x71)))
 (let (($x109 (= input.spec-%var-x-0.2 ?x85)))
 (let (($x97 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x86 (=> $x97 $x109)))
 (let ((?x59 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x59 (_ bv1 32))))
 (let (($x55 (= $x97 $x78)))
 (let (($x32 (= false false)))
 (let (($x73 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x58 (=> $x73 $x32)))
 (let (($x76 (= ?x59 (_ bv0 32))))
 (let (($x57 (= $x73 $x76)))
 (let (($x102 (and (and (and $x57 $x58) $x55) $x86)))
 (let (($x100 (= $x102 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x16)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x53 $x31)))
 (let (($x67 (and $x9 $x45)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x60 $x67)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x49)))))))
 (let (($x14 (and $x74 $x72)))
 (let (($x61 (= $x14 true)))
 (let (($x95 (and $x61 $x100)))
 (let (($x113 (and $x95 $x110)))
 (let (($x65 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x114 (and $x65 $x113)))
 (let (($x115 (and $x32 $x114)))
 (let (($x41 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x8 (and $x41 $x115)))
 (let (($x24 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x43 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x24)))))))
 (let (($x52 (=> (and $x68 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x21 $x24)))))))
 (let (($x10 (and $x52 $x8)))
 (let (($x117 (=> $x10 $x116)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087313/query
