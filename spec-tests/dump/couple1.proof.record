==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x6 $x12)))
 (let (($x19 (and $x11 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x6 $x12)))
 (let (($x19 (and $x11 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888454/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x64 (not $x26)))
 (let (($x99 (or $x26 $x64)))
 (let (($x100 (= $x99 false)))
 (let (($x101 (= $x100 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x90 (concat ?x87 (concat ?x84 ?x82)))))
 (let (($x92 (= ?x91 input.dst.llvm-%x)))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let (($x71 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x77 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x71)))))))
 (let (($x66 (=> (and $x64 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x70 $x71)))))))
 (let (($x67 (= $x66 true)))
 (let (($x78 (= $x67 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x9)))
 (let ((?x48 (concat (select input.dst.llvm-mem ?x41) ?x29)))
 (let (($x57 (= input.spec-%var-x-0.2 ?x48)))
 (let (($x53 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x58 (=> $x53 $x57)))
 (let ((?x12 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x12 (_ bv1 32))))
 (let (($x55 (= $x53 $x54)))
 (let (($x5 (= false false)))
 (let (($x25 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x51 (=> $x25 $x5)))
 (let (($x49 (= ?x12 (_ bv0 32))))
 (let (($x50 (= $x25 $x49)))
 (let (($x52 (and $x50 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x22)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x14 $x18)))
 (let (($x30 (and $x16 $x24)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x42 $x30)))
 (let (($x20 (= $x27 true)))
 (let (($x17 (= $x20 true)))
 (let (($x13 (= $x17 true)))
 (let (($x63 (and $x13 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x95 (and $x80 $x94)))
 (let (($x44 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x96 (and $x44 $x95)))
 (let (($x97 (and $x5 $x96)))
 (let (($x33 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x98 (and $x33 $x97)))
 (let (($x102 (=> $x98 $x101)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x64 (not $x26)))
 (let (($x99 (or $x26 $x64)))
 (let (($x100 (= $x99 false)))
 (let (($x101 (= $x100 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x90 (concat ?x87 (concat ?x84 ?x82)))))
 (let (($x92 (= ?x91 input.dst.llvm-%x)))
 (let (($x93 (= $x92 true)))
 (let (($x94 (= $x93 true)))
 (let (($x71 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x77 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x71)))))))
 (let (($x66 (=> (and $x64 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x70 $x71)))))))
 (let (($x67 (= $x66 true)))
 (let (($x78 (= $x67 true)))
 (let (($x79 (= $x78 true)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x9)))
 (let ((?x48 (concat (select input.dst.llvm-mem ?x41) ?x29)))
 (let (($x57 (= input.spec-%var-x-0.2 ?x48)))
 (let (($x53 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x58 (=> $x53 $x57)))
 (let ((?x12 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x12 (_ bv1 32))))
 (let (($x55 (= $x53 $x54)))
 (let (($x5 (= false false)))
 (let (($x25 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x51 (=> $x25 $x5)))
 (let (($x49 (= ?x12 (_ bv0 32))))
 (let (($x50 (= $x25 $x49)))
 (let (($x52 (and $x50 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x22)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x14 $x18)))
 (let (($x30 (and $x16 $x24)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x42 $x30)))
 (let (($x20 (= $x27 true)))
 (let (($x17 (= $x20 true)))
 (let (($x13 (= $x17 true)))
 (let (($x63 (and $x13 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x95 (and $x80 $x94)))
 (let (($x44 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x96 (and $x44 $x95)))
 (let (($x97 (and $x5 $x96)))
 (let (($x33 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x98 (and $x33 $x97)))
 (let (($x102 (=> $x98 $x101)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.spec-%var-x-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-x-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%7%bbentry #b00000000000000000000000000000101)
(= input.spec-%var-x_val-0.L1%7%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4026269756 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4026269759 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4026269756 32))
(define-fun input.spec-%var-x-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-x-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-0.2 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888454/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x32 (not $x37)))
 (let (($x104 (or $x37 $x32)))
 (let (($x105 (not $x104)))
 (let (($x58 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x77 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x15 (or $x77 $x58)))
 (let (($x106 (or $x15 $x105)))
 (let (($x107 (= $x106 true)))
 (let (($x108 (= $x107 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x96 (concat ?x93 (concat ?x88 ?x82)))))
 (let (($x98 (= ?x97 input.dst.llvm-%x)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x64)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x76)))
 (let (($x79 (= input.spec-%var-x-0.2 ?x71)))
 (let (($x80 (=> $x77 $x79)))
 (let ((?x59 (ite $x37 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x59 (_ bv1 32))))
 (let (($x67 (= $x77 $x66)))
 (let (($x35 (= false false)))
 (let (($x74 (=> $x58 $x35)))
 (let (($x72 (= ?x59 (_ bv0 32))))
 (let (($x73 (= $x58 $x72)))
 (let (($x75 (and $x73 $x74)))
 (let (($x78 (and $x75 $x67)))
 (let (($x89 (and $x78 $x80)))
 (let (($x90 (= $x89 true)))
 (let (($x86 (= $x90 true)))
 (let (($x87 (= $x86 true)))
 (let (($x6 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x9 (= $x6 true)))
 (let (($x29 (= $x9 true)))
 (let (($x48 (= $x29 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x56)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x52 $x54)))
 (let (($x41 (and $x55 $x8)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x51 $x41)))
 (let (($x23 (= $x31 true)))
 (let (($x34 (= $x23 true)))
 (let (($x36 (= $x34 true)))
 (let (($x57 (and $x36 $x48)))
 (let (($x83 (and $x57 $x87)))
 (let (($x101 (and $x83 $x100)))
 (let (($x50 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x102 (and $x50 $x101)))
 (let (($x103 (and $x35 $x102)))
 (let (($x26 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x38 (and $x26 $x103)))
 (let (($x24 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x21 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x24)))))))
 (let (($x43 (=> (and $x32 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x24)))))))
 (let (($x81 (and $x43 $x38)))
 (let (($x109 (=> $x81 $x108)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x32 (not $x37)))
 (let (($x104 (or $x37 $x32)))
 (let (($x105 (not $x104)))
 (let (($x58 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x77 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x15 (or $x77 $x58)))
 (let (($x106 (or $x15 $x105)))
 (let (($x107 (= $x106 true)))
 (let (($x108 (= $x107 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x96 (concat ?x93 (concat ?x88 ?x82)))))
 (let (($x98 (= ?x97 input.dst.llvm-%x)))
 (let (($x99 (= $x98 true)))
 (let (($x100 (= $x99 true)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x64)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x76)))
 (let (($x79 (= input.spec-%var-x-0.2 ?x71)))
 (let (($x80 (=> $x77 $x79)))
 (let ((?x59 (ite $x37 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x59 (_ bv1 32))))
 (let (($x67 (= $x77 $x66)))
 (let (($x35 (= false false)))
 (let (($x74 (=> $x58 $x35)))
 (let (($x72 (= ?x59 (_ bv0 32))))
 (let (($x73 (= $x58 $x72)))
 (let (($x75 (and $x73 $x74)))
 (let (($x78 (and $x75 $x67)))
 (let (($x89 (and $x78 $x80)))
 (let (($x90 (= $x89 true)))
 (let (($x86 (= $x90 true)))
 (let (($x87 (= $x86 true)))
 (let (($x6 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x9 (= $x6 true)))
 (let (($x29 (= $x9 true)))
 (let (($x48 (= $x29 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x56)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x52 $x54)))
 (let (($x41 (and $x55 $x8)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x51 $x41)))
 (let (($x23 (= $x31 true)))
 (let (($x34 (= $x23 true)))
 (let (($x36 (= $x34 true)))
 (let (($x57 (and $x36 $x48)))
 (let (($x83 (and $x57 $x87)))
 (let (($x101 (and $x83 $x100)))
 (let (($x50 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x102 (and $x50 $x101)))
 (let (($x103 (and $x35 $x102)))
 (let (($x26 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x38 (and $x26 $x103)))
 (let (($x24 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x21 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x24)))))))
 (let (($x43 (=> (and $x32 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x24)))))))
 (let (($x81 (and $x43 $x38)))
 (let (($x109 (=> $x81 $x108)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888454/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x75)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x31)))
 (let (($x20 (= input.spec-%var-x-0.2 ?x59)))
 (let (($x111 (= $x20 true)))
 (let (($x112 (= $x111 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x82 (concat ?x93 (concat ?x95 ?x87)))))
 (let (($x105 (= ?x91 input.dst.llvm-%x)))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let (($x26 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x101 (= true $x26)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x11 (not $x19)))
 (let (($x102 (=> $x11 $x101)))
 (let (($x94 (= input.dst.llvm-%x ?x91)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x80)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x64 $x71)))
 (let (($x90 (and $x79 $x89)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and (and (and $x26 $x61) $x90) $x94)))
 (let (($x13 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x69 (=> $x13 $x20)))
 (let ((?x50 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x50 (_ bv1 32))))
 (let (($x57 (= $x13 $x77)))
 (let (($x47 (= false false)))
 (let (($x21 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x6 (=> $x21 $x47)))
 (let (($x8 (= ?x50 (_ bv0 32))))
 (let (($x24 (= $x21 $x8)))
 (let (($x35 (and $x24 $x6)))
 (let (($x78 (and $x35 $x57)))
 (let (($x62 (and $x78 $x69)))
 (let (($x100 (and $x62 $x99)))
 (let (($x103 (and $x100 $x102)))
 (let (($x38 (= $x103 true)))
 (let (($x81 (= $x38 true)))
 (let (($x15 (= $x81 true)))
 (let (($x67 (= $x11 true)))
 (let (($x40 (= $x67 true)))
 (let (($x10 (= $x40 true)))
 (let (($x45 (= $x26 true)))
 (let (($x60 (= $x45 true)))
 (let (($x5 (= $x60 true)))
 (let (($x12 (and $x5 $x10)))
 (let (($x104 (and $x12 $x15)))
 (let (($x108 (and $x104 $x107)))
 (let (($x109 (and $x13 $x108)))
 (let (($x74 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x110 (and $x74 $x109)))
 (let (($x33 (and $x47 $x110)))
 (let (($x54 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x84 (and $x54 $x33)))
 (let (($x41 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x41)))))))
 (let (($x32 (=> (and $x11 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x51 $x41)))))))
 (let (($x44 (and $x32 $x84)))
 (let (($x113 (=> $x44 $x112)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x75)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x31)))
 (let (($x20 (= input.spec-%var-x-0.2 ?x59)))
 (let (($x111 (= $x20 true)))
 (let (($x112 (= $x111 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x82 (concat ?x93 (concat ?x95 ?x87)))))
 (let (($x105 (= ?x91 input.dst.llvm-%x)))
 (let (($x106 (= $x105 true)))
 (let (($x107 (= $x106 true)))
 (let (($x26 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x101 (= true $x26)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x11 (not $x19)))
 (let (($x102 (=> $x11 $x101)))
 (let (($x94 (= input.dst.llvm-%x ?x91)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x80)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x64 $x71)))
 (let (($x90 (and $x79 $x89)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and (and (and $x26 $x61) $x90) $x94)))
 (let (($x13 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x69 (=> $x13 $x20)))
 (let ((?x50 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x50 (_ bv1 32))))
 (let (($x57 (= $x13 $x77)))
 (let (($x47 (= false false)))
 (let (($x21 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x6 (=> $x21 $x47)))
 (let (($x8 (= ?x50 (_ bv0 32))))
 (let (($x24 (= $x21 $x8)))
 (let (($x35 (and $x24 $x6)))
 (let (($x78 (and $x35 $x57)))
 (let (($x62 (and $x78 $x69)))
 (let (($x100 (and $x62 $x99)))
 (let (($x103 (and $x100 $x102)))
 (let (($x38 (= $x103 true)))
 (let (($x81 (= $x38 true)))
 (let (($x15 (= $x81 true)))
 (let (($x67 (= $x11 true)))
 (let (($x40 (= $x67 true)))
 (let (($x10 (= $x40 true)))
 (let (($x45 (= $x26 true)))
 (let (($x60 (= $x45 true)))
 (let (($x5 (= $x60 true)))
 (let (($x12 (and $x5 $x10)))
 (let (($x104 (and $x12 $x15)))
 (let (($x108 (and $x104 $x107)))
 (let (($x109 (and $x13 $x108)))
 (let (($x74 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x110 (and $x74 $x109)))
 (let (($x33 (and $x47 $x110)))
 (let (($x54 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x84 (and $x54 $x33)))
 (let (($x41 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x41)))))))
 (let (($x32 (=> (and $x11 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x51 $x41)))))))
 (let (($x44 (and $x32 $x84)))
 (let (($x113 (=> $x44 $x112)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888454/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x16 (= $x114 true)))
 (let (($x86 (= $x16 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x91 (concat ?x87 (concat ?x93 ?x82)))))
 (let (($x108 (= ?x94 input.dst.llvm-%x)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let (($x48 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x38 (= true $x48)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x43 (not $x14)))
 (let (($x81 (=> $x43 $x38)))
 (let (($x99 (= input.dst.llvm-%x ?x94)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x89)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x76 $x79)))
 (let (($x98 (and $x80 $x90)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and (and (and $x48 $x64) $x98) $x99)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x78)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x72)))
 (let (($x62 (= input.spec-%var-x-0.2 ?x22)))
 (let (($x60 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x63 (=> $x60 $x62)))
 (let ((?x6 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x59 (bvuge ?x6 (_ bv1 32))))
 (let (($x20 (= $x60 $x59)))
 (let (($x39 (= false false)))
 (let (($x47 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x75 (=> $x47 $x39)))
 (let (($x30 (= ?x6 (_ bv0 32))))
 (let (($x53 (= $x47 $x30)))
 (let (($x31 (and $x53 $x75)))
 (let (($x69 (and $x31 $x20)))
 (let (($x61 (and $x69 $x63)))
 (let (($x103 (and $x61 $x102)))
 (let (($x15 (and $x103 $x81)))
 (let (($x104 (= $x15 true)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x21 (= $x48 true)))
 (let (($x50 (= $x21 true)))
 (let (($x8 (= $x50 true)))
 (let (($x5 (= $x14 true)))
 (let (($x67 (= $x5 true)))
 (let (($x40 (= $x67 true)))
 (let (($x24 (and $x40 $x8)))
 (let (($x107 (and $x24 $x106)))
 (let (($x33 (and $x107 $x110)))
 (let (($x84 (and $x60 $x33)))
 (let (($x45 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x44 (and $x45 $x84)))
 (let (($x111 (and $x39 $x44)))
 (let (($x74 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x112 (and $x74 $x111)))
 (let (($x18 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x54 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x18)))))))
 (let (($x58 (=> (and $x43 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x27 $x18)))))))
 (let (($x113 (and $x58 $x112)))
 (let (($x37 (=> $x113 $x86)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x16 (= $x114 true)))
 (let (($x86 (= $x16 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x91 (concat ?x87 (concat ?x93 ?x82)))))
 (let (($x108 (= ?x94 input.dst.llvm-%x)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let (($x48 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x38 (= true $x48)))
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x43 (not $x14)))
 (let (($x81 (=> $x43 $x38)))
 (let (($x99 (= input.dst.llvm-%x ?x94)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x89)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x76 $x79)))
 (let (($x98 (and $x80 $x90)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and (and (and $x48 $x64) $x98) $x99)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x78)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x72)))
 (let (($x62 (= input.spec-%var-x-0.2 ?x22)))
 (let (($x60 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x63 (=> $x60 $x62)))
 (let ((?x6 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x59 (bvuge ?x6 (_ bv1 32))))
 (let (($x20 (= $x60 $x59)))
 (let (($x39 (= false false)))
 (let (($x47 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x75 (=> $x47 $x39)))
 (let (($x30 (= ?x6 (_ bv0 32))))
 (let (($x53 (= $x47 $x30)))
 (let (($x31 (and $x53 $x75)))
 (let (($x69 (and $x31 $x20)))
 (let (($x61 (and $x69 $x63)))
 (let (($x103 (and $x61 $x102)))
 (let (($x15 (and $x103 $x81)))
 (let (($x104 (= $x15 true)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x21 (= $x48 true)))
 (let (($x50 (= $x21 true)))
 (let (($x8 (= $x50 true)))
 (let (($x5 (= $x14 true)))
 (let (($x67 (= $x5 true)))
 (let (($x40 (= $x67 true)))
 (let (($x24 (and $x40 $x8)))
 (let (($x107 (and $x24 $x106)))
 (let (($x33 (and $x107 $x110)))
 (let (($x84 (and $x60 $x33)))
 (let (($x45 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x44 (and $x45 $x84)))
 (let (($x111 (and $x39 $x44)))
 (let (($x74 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x112 (and $x74 $x111)))
 (let (($x18 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x54 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x18)))))))
 (let (($x58 (=> (and $x43 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x27 $x18)))))))
 (let (($x113 (and $x58 $x112)))
 (let (($x37 (=> $x113 $x86)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888454/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x20)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x17)))
 (let (($x37 (= (_ bv5 32) ?x29)))
 (let (($x115 (= $x37 true)))
 (let (($x28 (= $x115 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x94 (concat ?x82 (concat ?x87 ?x91)))))
 (let (($x33 (= ?x99 input.dst.llvm-%x)))
 (let (($x84 (= $x33 true)))
 (let (($x44 (= $x84 true)))
 (let (($x50 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x104 (= true $x50)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x14 (not $x34)))
 (let (($x105 (=> $x14 $x104)))
 (let (($x102 (= input.dst.llvm-%x ?x99)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x90)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x71 $x80)))
 (let (($x101 (and $x89 $x98)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and (and (and $x50 $x76) $x101) $x102)))
 (let (($x61 (= input.spec-%var-x-0.2 ?x29)))
 (let (($x72 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x97 (=> $x72 $x61)))
 (let ((?x39 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x39 (_ bv1 32))))
 (let (($x62 (= $x72 $x22)))
 (let (($x5 (= false false)))
 (let (($x12 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x13 (=> $x12 $x5)))
 (let (($x77 (= ?x39 (_ bv0 32))))
 (let (($x57 (= $x12 $x77)))
 (let (($x78 (and $x57 $x13)))
 (let (($x63 (and $x78 $x62)))
 (let (($x64 (and $x63 $x97)))
 (let (($x15 (and $x64 $x81)))
 (let (($x106 (and $x15 $x105)))
 (let (($x107 (= $x106 true)))
 (let (($x108 (= $x107 true)))
 (let (($x109 (= $x108 true)))
 (let (($x47 (= $x14 true)))
 (let (($x6 (= $x47 true)))
 (let (($x30 (= $x6 true)))
 (let (($x8 (= $x50 true)))
 (let (($x24 (= $x8 true)))
 (let (($x9 (= $x24 true)))
 (let (($x53 (and $x9 $x30)))
 (let (($x110 (and $x53 $x109)))
 (let (($x111 (and $x110 $x44)))
 (let (($x112 (and $x12 $x111)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x113 (and $x10 $x112)))
 (let (($x114 (and $x5 $x113)))
 (let (($x45 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x16 (and $x45 $x114)))
 (let (($x36 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x73 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x36)))))))
 (let (($x42 (=> (and $x14 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x65 $x36)))))))
 (let (($x86 (and $x42 $x16)))
 (let (($x88 (=> $x86 $x28)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x20)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x17)))
 (let (($x37 (= (_ bv5 32) ?x29)))
 (let (($x115 (= $x37 true)))
 (let (($x28 (= $x115 true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x94 (concat ?x82 (concat ?x87 ?x91)))))
 (let (($x33 (= ?x99 input.dst.llvm-%x)))
 (let (($x84 (= $x33 true)))
 (let (($x44 (= $x84 true)))
 (let (($x50 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x104 (= true $x50)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x14 (not $x34)))
 (let (($x105 (=> $x14 $x104)))
 (let (($x102 (= input.dst.llvm-%x ?x99)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x90)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x71 $x80)))
 (let (($x101 (and $x89 $x98)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and (and (and $x50 $x76) $x101) $x102)))
 (let (($x61 (= input.spec-%var-x-0.2 ?x29)))
 (let (($x72 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x97 (=> $x72 $x61)))
 (let ((?x39 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x39 (_ bv1 32))))
 (let (($x62 (= $x72 $x22)))
 (let (($x5 (= false false)))
 (let (($x12 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x13 (=> $x12 $x5)))
 (let (($x77 (= ?x39 (_ bv0 32))))
 (let (($x57 (= $x12 $x77)))
 (let (($x78 (and $x57 $x13)))
 (let (($x63 (and $x78 $x62)))
 (let (($x64 (and $x63 $x97)))
 (let (($x15 (and $x64 $x81)))
 (let (($x106 (and $x15 $x105)))
 (let (($x107 (= $x106 true)))
 (let (($x108 (= $x107 true)))
 (let (($x109 (= $x108 true)))
 (let (($x47 (= $x14 true)))
 (let (($x6 (= $x47 true)))
 (let (($x30 (= $x6 true)))
 (let (($x8 (= $x50 true)))
 (let (($x24 (= $x8 true)))
 (let (($x9 (= $x24 true)))
 (let (($x53 (and $x9 $x30)))
 (let (($x110 (and $x53 $x109)))
 (let (($x111 (and $x110 $x44)))
 (let (($x112 (and $x12 $x111)))
 (let (($x10 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x113 (and $x10 $x112)))
 (let (($x114 (and $x5 $x113)))
 (let (($x45 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x16 (and $x45 $x114)))
 (let (($x36 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x73 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x36)))))))
 (let (($x42 (=> (and $x14 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x65 $x36)))))))
 (let (($x86 (and $x42 $x16)))
 (let (($x88 (=> $x86 $x28)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888454/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x14 (not $x34)))
 (let (($x108 (or $x34 $x14)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x92 (concat ?x95 (concat ?x94 ?x38)))))
 (let (($x99 (= ?x83 input.dst.llvm-%x)))
 (let (($x102 (= $x99 true)))
 (let (($x81 (= $x102 true)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x49)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x60)))
 (let (($x103 (= input.spec-%var-x-0.2 ?x31)))
 (let (($x97 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x71 (=> $x97 $x103)))
 (let ((?x72 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x72 (_ bv1 32))))
 (let (($x100 (= $x97 $x64)))
 (let (($x48 (= false false)))
 (let (($x78 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x29 (=> $x78 $x48)))
 (let (($x20 (= ?x72 (_ bv0 32))))
 (let (($x17 (= $x78 $x20)))
 (let (($x61 (and $x17 $x29)))
 (let (($x76 (and $x61 $x100)))
 (let (($x79 (and $x76 $x71)))
 (let (($x80 (= $x79 true)))
 (let (($x89 (= $x80 true)))
 (let (($x90 (= $x89 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x46)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x47 $x30)))
 (let (($x39 (and $x53 $x12)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x9 $x39)))
 (let (($x57 (= $x77 true)))
 (let (($x5 (= $x57 true)))
 (let (($x13 (= $x5 true)))
 (let (($x98 (and $x13 $x90)))
 (let (($x15 (and $x98 $x81)))
 (let (($x8 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x104 (and $x8 $x15)))
 (let (($x105 (and $x48 $x104)))
 (let (($x10 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x106 (and $x10 $x105)))
 (let (($x54 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x45 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x54)))))))
 (let (($x41 (=> (and $x14 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x25 $x54)))))))
 (let (($x107 (and $x41 $x106)))
 (let (($x33 (=> $x107 $x110)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x14 (not $x34)))
 (let (($x108 (or $x34 $x14)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x92 (concat ?x95 (concat ?x94 ?x38)))))
 (let (($x99 (= ?x83 input.dst.llvm-%x)))
 (let (($x102 (= $x99 true)))
 (let (($x81 (= $x102 true)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x49)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x60)))
 (let (($x103 (= input.spec-%var-x-0.2 ?x31)))
 (let (($x97 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x71 (=> $x97 $x103)))
 (let ((?x72 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x72 (_ bv1 32))))
 (let (($x100 (= $x97 $x64)))
 (let (($x48 (= false false)))
 (let (($x78 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x29 (=> $x78 $x48)))
 (let (($x20 (= ?x72 (_ bv0 32))))
 (let (($x17 (= $x78 $x20)))
 (let (($x61 (and $x17 $x29)))
 (let (($x76 (and $x61 $x100)))
 (let (($x79 (and $x76 $x71)))
 (let (($x80 (= $x79 true)))
 (let (($x89 (= $x80 true)))
 (let (($x90 (= $x89 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x46)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x47 $x30)))
 (let (($x39 (and $x53 $x12)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x9 $x39)))
 (let (($x57 (= $x77 true)))
 (let (($x5 (= $x57 true)))
 (let (($x13 (= $x5 true)))
 (let (($x98 (and $x13 $x90)))
 (let (($x15 (and $x98 $x81)))
 (let (($x8 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x104 (and $x8 $x15)))
 (let (($x105 (and $x48 $x104)))
 (let (($x10 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x106 (and $x10 $x105)))
 (let (($x54 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x45 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x54)))))))
 (let (($x41 (=> (and $x14 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x25 $x54)))))))
 (let (($x107 (and $x41 $x106)))
 (let (($x33 (=> $x107 $x110)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888454/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x23 (= $x88 true)))
 (let (($x43 (= $x23 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x83 (concat ?x38 (concat ?x95 ?x92)))))
 (let (($x111 (= ?x99 input.dst.llvm-%x)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let (($x49 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x19 (= $x49 true)))
 (let (($x101 (= $x19 true)))
 (let (($x51 (= $x101 true)))
 (let (($x106 (= true $x49)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x14 (not $x34)))
 (let (($x107 (=> $x14 $x106)))
 (let (($x102 (= input.dst.llvm-%x ?x99)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x89)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x103 $x79)))
 (let (($x98 (and $x80 $x90)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and (and (and $x49 $x31) $x98) $x102)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x78)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x48)))
 (let (($x35 (= input.spec-%var-x-0.2 ?x61)))
 (let (($x30 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x7 (=> $x30 $x35)))
 (let ((?x77 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x77 (_ bv1 32))))
 (let (($x59 (= $x30 $x22)))
 (let (($x24 (= false false)))
 (let (($x39 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x100 (=> $x39 $x24)))
 (let (($x97 (= ?x77 (_ bv0 32))))
 (let (($x64 (= $x39 $x97)))
 (let (($x76 (and $x64 $x100)))
 (let (($x69 (and $x76 $x59)))
 (let (($x63 (and $x69 $x7)))
 (let (($x105 (and $x63 $x104)))
 (let (($x108 (and $x105 $x107)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let (($x33 (= $x110 true)))
 (let (($x53 (= $x34 true)))
 (let (($x46 (= $x53 true)))
 (let (($x12 (= $x46 true)))
 (let (($x84 (and $x12 $x33)))
 (let (($x44 (and $x84 $x51)))
 (let (($x114 (and $x44 $x113)))
 (let (($x16 (and $x30 $x114)))
 (let (($x6 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x86 (and $x6 $x16)))
 (let (($x37 (and $x24 $x86)))
 (let (($x8 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x115 (and $x8 $x37)))
 (let (($x42 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x10 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x42)))))))
 (let (($x18 (=> (and $x14 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x73 $x42)))))))
 (let (($x28 (and $x18 $x115)))
 (let (($x85 (=> $x28 $x43)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x23 (= $x88 true)))
 (let (($x43 (= $x23 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x83 (concat ?x38 (concat ?x95 ?x92)))))
 (let (($x111 (= ?x99 input.dst.llvm-%x)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let (($x49 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x19 (= $x49 true)))
 (let (($x101 (= $x19 true)))
 (let (($x51 (= $x101 true)))
 (let (($x106 (= true $x49)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x14 (not $x34)))
 (let (($x107 (=> $x14 $x106)))
 (let (($x102 (= input.dst.llvm-%x ?x99)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x89)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x103 $x79)))
 (let (($x98 (and $x80 $x90)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and (and (and $x49 $x31) $x98) $x102)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x78)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x48)))
 (let (($x35 (= input.spec-%var-x-0.2 ?x61)))
 (let (($x30 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x7 (=> $x30 $x35)))
 (let ((?x77 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x77 (_ bv1 32))))
 (let (($x59 (= $x30 $x22)))
 (let (($x24 (= false false)))
 (let (($x39 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x100 (=> $x39 $x24)))
 (let (($x97 (= ?x77 (_ bv0 32))))
 (let (($x64 (= $x39 $x97)))
 (let (($x76 (and $x64 $x100)))
 (let (($x69 (and $x76 $x59)))
 (let (($x63 (and $x69 $x7)))
 (let (($x105 (and $x63 $x104)))
 (let (($x108 (and $x105 $x107)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let (($x33 (= $x110 true)))
 (let (($x53 (= $x34 true)))
 (let (($x46 (= $x53 true)))
 (let (($x12 (= $x46 true)))
 (let (($x84 (and $x12 $x33)))
 (let (($x44 (and $x84 $x51)))
 (let (($x114 (and $x44 $x113)))
 (let (($x16 (and $x30 $x114)))
 (let (($x6 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x86 (and $x6 $x16)))
 (let (($x37 (and $x24 $x86)))
 (let (($x8 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x115 (and $x8 $x37)))
 (let (($x42 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x10 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x42)))))))
 (let (($x18 (=> (and $x14 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x73 $x42)))))))
 (let (($x28 (and $x18 $x115)))
 (let (($x85 (=> $x28 $x43)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888454/query
