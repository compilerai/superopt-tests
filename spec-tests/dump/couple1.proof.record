==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676034/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x12 (not $x42)))
 (let (($x110 (or $x42 $x12)))
 (let (($x111 (= $x110 false)))
 (let (($x112 (= $x111 true)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x94)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x97)))
 (let (($x100 (= input.spec-%var-x-0.2 ?x99)))
 (let (($x88 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x101 (=> $x88 $x100)))
 (let ((?x84 (ite $x42 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x84 (_ bv1 32))))
 (let (($x90 (= $x88 $x89)))
 (let (($x5 (= false false)))
 (let (($x83 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x87 (=> $x83 $x5)))
 (let (($x85 (= ?x84 (_ bv0 32))))
 (let (($x86 (= $x83 $x85)))
 (let (($x104 (and (and (and $x86 $x87) $x90) $x101)))
 (let (($x105 (= $x104 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x76 (concat ?x73 (concat ?x69 ?x67)))))
 (let (($x78 (= ?x77 input.dst.llvm-%x)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x55 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x61 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x10 (=> (and $x12 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x7)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x38 $x22)))
 (let (($x33 (and $x11 $x37)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x41 $x33)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x13)))))))
 (let (($x32 (and $x14 $x9)))
 (let (($x40 (= $x32 true)))
 (let (($x43 (= $x40 true)))
 (let (($x16 (= $x43 true)))
 (let (($x64 (and $x16 $x63)))
 (let (($x81 (and $x64 $x80)))
 (let (($x106 (and $x81 $x105)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x107 (and $x24 $x106)))
 (let (($x108 (and $x5 $x107)))
 (let (($x21 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x109 (and $x21 $x108)))
 (let (($x113 (=> $x109 $x112)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x12 (not $x42)))
 (let (($x110 (or $x42 $x12)))
 (let (($x111 (= $x110 false)))
 (let (($x112 (= $x111 true)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x94)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x97)))
 (let (($x100 (= input.spec-%var-x-0.2 ?x99)))
 (let (($x88 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x101 (=> $x88 $x100)))
 (let ((?x84 (ite $x42 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x84 (_ bv1 32))))
 (let (($x90 (= $x88 $x89)))
 (let (($x5 (= false false)))
 (let (($x83 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x87 (=> $x83 $x5)))
 (let (($x85 (= ?x84 (_ bv0 32))))
 (let (($x86 (= $x83 $x85)))
 (let (($x104 (and (and (and $x86 $x87) $x90) $x101)))
 (let (($x105 (= $x104 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x76 (concat ?x73 (concat ?x69 ?x67)))))
 (let (($x78 (= ?x77 input.dst.llvm-%x)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let (($x55 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x61 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x10 (=> (and $x12 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x7)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x38 $x22)))
 (let (($x33 (and $x11 $x37)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x41 $x33)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x13)))))))
 (let (($x32 (and $x14 $x9)))
 (let (($x40 (= $x32 true)))
 (let (($x43 (= $x40 true)))
 (let (($x16 (= $x43 true)))
 (let (($x64 (and $x16 $x63)))
 (let (($x81 (and $x64 $x80)))
 (let (($x106 (and $x81 $x105)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x107 (and $x24 $x106)))
 (let (($x108 (and $x5 $x107)))
 (let (($x21 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x109 (and $x21 $x108)))
 (let (($x113 (=> $x109 $x112)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%var-x-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-x-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%7%bbentry #b00000000000000000000000000000101)
(= input.spec-%var-x_val-0.L2%7%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-x-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-x-0.2 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv536870908 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv536870911 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv536870908 32))
(define-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676034/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x45 (not $x29)))
 (let (($x115 (or $x29 $x45)))
 (let (($x116 (not $x115)))
 (let (($x88 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x95 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x66 (or $x95 $x88)))
 (let (($x117 (or $x66 $x116)))
 (let (($x118 (= $x117 true)))
 (let (($x119 (= $x118 true)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x97)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x101)))
 (let (($x106 (= input.spec-%var-x-0.2 ?x105)))
 (let (($x107 (=> $x95 $x106)))
 (let ((?x89 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x96 (bvuge ?x89 (_ bv1 32))))
 (let (($x92 (= $x95 $x96)))
 (let (($x109 (and (and (= $x88 (= ?x89 (_ bv0 32))) (=> $x88 (= false false))) $x92)))
 (let (($x110 (and $x109 $x107)))
 (let (($x111 (= $x110 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x83 (concat ?x80 (concat ?x74 ?x67)))))
 (let (($x85 (= ?x84 input.dst.llvm-%x)))
 (let (($x86 (= $x85 true)))
 (let (($x5 (= $x86 true)))
 (let (($x75 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x76 (= $x75 true)))
 (let (($x71 (= $x76 true)))
 (let (($x72 (= $x71 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x53 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x9 $x59)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x27)))))))
 (let (($x10 (and $x60 $x61)))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let (($x73 (and $x63 $x72)))
 (let (($x87 (and $x73 $x5)))
 (let (($x112 (and $x87 $x111)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x113 (and $x7 $x112)))
 (let (($x28 (= false false)))
 (let (($x114 (and $x28 $x113)))
 (let (($x17 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x26 (and $x17 $x114)))
 (let (($x25 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x41 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x8 (=> (and $x45 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x39 (and $x8 $x26)))
 (let (($x120 (=> $x39 $x119)))
 (not $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x45 (not $x29)))
 (let (($x115 (or $x29 $x45)))
 (let (($x116 (not $x115)))
 (let (($x88 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x95 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x66 (or $x95 $x88)))
 (let (($x117 (or $x66 $x116)))
 (let (($x118 (= $x117 true)))
 (let (($x119 (= $x118 true)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x97)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x101)))
 (let (($x106 (= input.spec-%var-x-0.2 ?x105)))
 (let (($x107 (=> $x95 $x106)))
 (let ((?x89 (ite $x29 (_ bv0 32) (_ bv1 32))))
 (let (($x96 (bvuge ?x89 (_ bv1 32))))
 (let (($x92 (= $x95 $x96)))
 (let (($x109 (and (and (= $x88 (= ?x89 (_ bv0 32))) (=> $x88 (= false false))) $x92)))
 (let (($x110 (and $x109 $x107)))
 (let (($x111 (= $x110 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x83 (concat ?x80 (concat ?x74 ?x67)))))
 (let (($x85 (= ?x84 input.dst.llvm-%x)))
 (let (($x86 (= $x85 true)))
 (let (($x5 (= $x86 true)))
 (let (($x75 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x76 (= $x75 true)))
 (let (($x71 (= $x76 true)))
 (let (($x72 (= $x71 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x53 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x9 $x59)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x27)))))))
 (let (($x10 (and $x60 $x61)))
 (let (($x50 (= $x10 true)))
 (let (($x62 (= $x50 true)))
 (let (($x63 (= $x62 true)))
 (let (($x73 (and $x63 $x72)))
 (let (($x87 (and $x73 $x5)))
 (let (($x112 (and $x87 $x111)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x113 (and $x7 $x112)))
 (let (($x28 (= false false)))
 (let (($x114 (and $x28 $x113)))
 (let (($x17 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x26 (and $x17 $x114)))
 (let (($x25 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x41 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x8 (=> (and $x45 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x25)))))))
 (let (($x39 (and $x8 $x26)))
 (let (($x120 (=> $x39 $x119)))
 (not $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676034/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x114)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x66)))
 (let (($x117 (= input.spec-%var-x-0.2 ?x116)))
 (let (($x126 (= $x117 true)))
 (let (($x127 (= $x126 true)))
 (let (($x10 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x118 (=> $x10 $x117)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x97 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x97 (_ bv1 32))))
 (let (($x110 (= $x10 $x107)))
 (let (($x47 (= false false)))
 (let (($x93 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x106 (=> $x93 $x47)))
 (let (($x101 (= ?x97 (_ bv0 32))))
 (let (($x105 (= $x93 $x101)))
 (let (($x121 (and (and (and $x105 $x106) $x110) $x118)))
 (let (($x23 (= $x121 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x87 (concat ?x85 (concat ?x67 ?x70)))))
 (let (($x99 (= ?x102 input.dst.llvm-%x)))
 (let (($x100 (= $x99 true)))
 (let (($x91 (= $x100 true)))
 (let (($x14 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x98 (= true $x14)))
 (let (($x18 (not $x45)))
 (let (($x108 (=> $x18 $x98)))
 (let (($x88 (= input.dst.llvm-%x ?x102)))
 (let (($x89 (and $x14 $x88)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x68)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x76 $x72)))
 (let (($x83 (and $x73 $x82)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x19 $x83)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x9)))))))
 (let (($x28 (and (and (and $x75 true) $x78) $x89)))
 (let (($x95 (and $x28 $x108)))
 (let (($x96 (= $x95 true)))
 (let (($x92 (= $x96 true)))
 (let (($x109 (= $x92 true)))
 (let (($x11 (= $x18 true)))
 (let (($x53 (= $x11 true)))
 (let (($x44 (= $x53 true)))
 (let (($x42 (= $x14 true)))
 (let (($x7 (= $x42 true)))
 (let (($x58 (= $x7 true)))
 (let (($x30 (and $x58 $x44)))
 (let (($x104 (and $x30 $x109)))
 (let (($x94 (and $x104 $x91)))
 (let (($x37 (and $x94 $x23)))
 (let (($x69 (and $x10 $x37)))
 (let (($x50 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x122 (and $x50 $x69)))
 (let (($x123 (and $x47 $x122)))
 (let (($x62 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x124 (and $x62 $x123)))
 (let (($x49 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x33 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x49)))))))
 (let (($x46 (=> (and $x18 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x49)))))))
 (let (($x125 (and $x46 $x124)))
 (let (($x128 (=> $x125 $x127)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x114)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x66)))
 (let (($x117 (= input.spec-%var-x-0.2 ?x116)))
 (let (($x126 (= $x117 true)))
 (let (($x127 (= $x126 true)))
 (let (($x10 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x118 (=> $x10 $x117)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x97 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x97 (_ bv1 32))))
 (let (($x110 (= $x10 $x107)))
 (let (($x47 (= false false)))
 (let (($x93 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x106 (=> $x93 $x47)))
 (let (($x101 (= ?x97 (_ bv0 32))))
 (let (($x105 (= $x93 $x101)))
 (let (($x121 (and (and (and $x105 $x106) $x110) $x118)))
 (let (($x23 (= $x121 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x87 (concat ?x85 (concat ?x67 ?x70)))))
 (let (($x99 (= ?x102 input.dst.llvm-%x)))
 (let (($x100 (= $x99 true)))
 (let (($x91 (= $x100 true)))
 (let (($x14 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x98 (= true $x14)))
 (let (($x18 (not $x45)))
 (let (($x108 (=> $x18 $x98)))
 (let (($x88 (= input.dst.llvm-%x ?x102)))
 (let (($x89 (and $x14 $x88)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x68)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x76 $x72)))
 (let (($x83 (and $x73 $x82)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x19 $x83)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x9)))))))
 (let (($x28 (and (and (and $x75 true) $x78) $x89)))
 (let (($x95 (and $x28 $x108)))
 (let (($x96 (= $x95 true)))
 (let (($x92 (= $x96 true)))
 (let (($x109 (= $x92 true)))
 (let (($x11 (= $x18 true)))
 (let (($x53 (= $x11 true)))
 (let (($x44 (= $x53 true)))
 (let (($x42 (= $x14 true)))
 (let (($x7 (= $x42 true)))
 (let (($x58 (= $x7 true)))
 (let (($x30 (and $x58 $x44)))
 (let (($x104 (and $x30 $x109)))
 (let (($x94 (and $x104 $x91)))
 (let (($x37 (and $x94 $x23)))
 (let (($x69 (and $x10 $x37)))
 (let (($x50 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x122 (and $x50 $x69)))
 (let (($x123 (and $x47 $x122)))
 (let (($x62 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x124 (and $x62 $x123)))
 (let (($x49 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x33 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x49)))))))
 (let (($x46 (=> (and $x18 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x49)))))))
 (let (($x125 (and $x46 $x124)))
 (let (($x128 (=> $x125 $x127)))
 (not $x128)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676034/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x129 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x29 (= $x129 true)))
 (let (($x56 (= $x29 true)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x113)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x66)))
 (let (($x118 (= input.spec-%var-x-0.2 ?x117)))
 (let (($x42 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x121 (=> $x42 $x118)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x119 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x119 (_ bv1 32))))
 (let (($x115 (= $x42 $x120)))
 (let (($x8 (= false false)))
 (let (($x106 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x110 (=> $x106 $x8)))
 (let (($x10 (= ?x119 (_ bv0 32))))
 (let (($x107 (= $x106 $x10)))
 (let (($x69 (and (and (and $x107 $x110) $x115) $x121)))
 (let (($x122 (= $x69 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x28 (concat ?x102 (concat ?x67 ?x85)))))
 (let (($x97 (= ?x98 input.dst.llvm-%x)))
 (let (($x101 (= $x97 true)))
 (let (($x105 (= $x101 true)))
 (let (($x30 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x104 (= true $x30)))
 (let (($x18 (not $x34)))
 (let (($x99 (=> $x18 $x104)))
 (let (($x108 (= input.dst.llvm-%x ?x98)))
 (let (($x95 (and $x30 $x108)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x103)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x68 $x83)))
 (let (($x5 (and $x78 $x79)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x54 $x5)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x90)))))))
 (let (($x109 (and (and (and $x73 true) $x87) $x95)))
 (let (($x100 (and $x109 $x99)))
 (let (($x91 (= $x100 true)))
 (let (($x94 (= $x91 true)))
 (let (($x15 (= $x94 true)))
 (let (($x51 (= $x30 true)))
 (let (($x31 (= $x51 true)))
 (let (($x65 (= $x31 true)))
 (let (($x7 (= $x34 true)))
 (let (($x58 (= $x7 true)))
 (let (($x11 (= $x58 true)))
 (let (($x22 (and $x11 $x65)))
 (let (($x93 (and $x22 $x15)))
 (let (($x47 (and $x93 $x105)))
 (let (($x123 (and $x47 $x122)))
 (let (($x124 (and $x42 $x123)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x125 (and $x12 $x124)))
 (let (($x126 (and $x8 $x125)))
 (let (($x32 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x127 (and $x32 $x126)))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x17 (=> (and $x18 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x128 (and $x17 $x127)))
 (let (($x80 (=> $x128 $x56)))
 (not $x80))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x129 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x29 (= $x129 true)))
 (let (($x56 (= $x29 true)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x113)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x66)))
 (let (($x118 (= input.spec-%var-x-0.2 ?x117)))
 (let (($x42 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x121 (=> $x42 $x118)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x119 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x119 (_ bv1 32))))
 (let (($x115 (= $x42 $x120)))
 (let (($x8 (= false false)))
 (let (($x106 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x110 (=> $x106 $x8)))
 (let (($x10 (= ?x119 (_ bv0 32))))
 (let (($x107 (= $x106 $x10)))
 (let (($x69 (and (and (and $x107 $x110) $x115) $x121)))
 (let (($x122 (= $x69 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x28 (concat ?x102 (concat ?x67 ?x85)))))
 (let (($x97 (= ?x98 input.dst.llvm-%x)))
 (let (($x101 (= $x97 true)))
 (let (($x105 (= $x101 true)))
 (let (($x30 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x104 (= true $x30)))
 (let (($x18 (not $x34)))
 (let (($x99 (=> $x18 $x104)))
 (let (($x108 (= input.dst.llvm-%x ?x98)))
 (let (($x95 (and $x30 $x108)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x103)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x68 $x83)))
 (let (($x5 (and $x78 $x79)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x54 $x5)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x90)))))))
 (let (($x109 (and (and (and $x73 true) $x87) $x95)))
 (let (($x100 (and $x109 $x99)))
 (let (($x91 (= $x100 true)))
 (let (($x94 (= $x91 true)))
 (let (($x15 (= $x94 true)))
 (let (($x51 (= $x30 true)))
 (let (($x31 (= $x51 true)))
 (let (($x65 (= $x31 true)))
 (let (($x7 (= $x34 true)))
 (let (($x58 (= $x7 true)))
 (let (($x11 (= $x58 true)))
 (let (($x22 (and $x11 $x65)))
 (let (($x93 (and $x22 $x15)))
 (let (($x47 (and $x93 $x105)))
 (let (($x123 (and $x47 $x122)))
 (let (($x124 (and $x42 $x123)))
 (let (($x12 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x125 (and $x12 $x124)))
 (let (($x126 (and $x8 $x125)))
 (let (($x32 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x127 (and $x32 $x126)))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x17 (=> (and $x18 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x6)))))))
 (let (($x128 (and $x17 $x127)))
 (let (($x80 (=> $x128 $x56)))
 (not $x80))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676034/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x26)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x117)))
 (let (($x130 (= (_ bv5 32) ?x121)))
 (let (($x59 (= $x130 true)))
 (let (($x43 (= $x59 true)))
 (let (($x69 (= input.spec-%var-x-0.2 ?x121)))
 (let (($x37 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x122 (=> $x37 $x69)))
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x23 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x23 (_ bv1 32))))
 (let (($x111 (= $x37 $x116)))
 (let (($x12 (= false false)))
 (let (($x44 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x115 (=> $x44 $x12)))
 (let (($x42 (= ?x23 (_ bv0 32))))
 (let (($x120 (= $x44 $x42)))
 (let (($x125 (and (and (and $x120 $x115) $x111) $x122)))
 (let (($x126 (= $x125 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x104 (concat ?x108 (concat ?x85 ?x74)))))
 (let (($x10 (= ?x99 input.dst.llvm-%x)))
 (let (($x107 (= $x10 true)))
 (let (($x8 (= $x107 true)))
 (let (($x31 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x97 (= true $x31)))
 (let (($x34 (not $x50)))
 (let (($x101 (=> $x34 $x97)))
 (let (($x100 (= input.dst.llvm-%x ?x99)))
 (let (($x91 (and $x31 $x100)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x81)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x79 $x87)))
 (let (($x28 (and $x92 $x89)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x19 $x28)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x9)))))))
 (let (($x93 (and (and (and $x103 true) $x77) $x91)))
 (let (($x105 (and $x93 $x101)))
 (let (($x47 (= $x105 true)))
 (let (($x14 (= $x47 true)))
 (let (($x106 (= $x14 true)))
 (let (($x35 (= $x34 true)))
 (let (($x72 (= $x35 true)))
 (let (($x16 (= $x72 true)))
 (let (($x65 (= $x31 true)))
 (let (($x22 (= $x65 true)))
 (let (($x25 (= $x22 true)))
 (let (($x75 (and $x25 $x16)))
 (let (($x119 (and $x75 $x106)))
 (let (($x110 (and $x119 $x8)))
 (let (($x127 (and $x110 $x126)))
 (let (($x128 (and $x44 $x127)))
 (let (($x11 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x129 (and $x11 $x128)))
 (let (($x29 (and $x12 $x129)))
 (let (($x21 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x56 (and $x21 $x29)))
 (let (($x57 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x62 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x57)))))))
 (let (($x13 (=> (and $x34 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x48 $x57)))))))
 (let (($x80 (and $x13 $x56)))
 (let (($x61 (=> $x80 $x43)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x26)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x117)))
 (let (($x130 (= (_ bv5 32) ?x121)))
 (let (($x59 (= $x130 true)))
 (let (($x43 (= $x59 true)))
 (let (($x69 (= input.spec-%var-x-0.2 ?x121)))
 (let (($x37 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x122 (=> $x37 $x69)))
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x23 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x23 (_ bv1 32))))
 (let (($x111 (= $x37 $x116)))
 (let (($x12 (= false false)))
 (let (($x44 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x115 (=> $x44 $x12)))
 (let (($x42 (= ?x23 (_ bv0 32))))
 (let (($x120 (= $x44 $x42)))
 (let (($x125 (and (and (and $x120 $x115) $x111) $x122)))
 (let (($x126 (= $x125 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x104 (concat ?x108 (concat ?x85 ?x74)))))
 (let (($x10 (= ?x99 input.dst.llvm-%x)))
 (let (($x107 (= $x10 true)))
 (let (($x8 (= $x107 true)))
 (let (($x31 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x97 (= true $x31)))
 (let (($x34 (not $x50)))
 (let (($x101 (=> $x34 $x97)))
 (let (($x100 (= input.dst.llvm-%x ?x99)))
 (let (($x91 (and $x31 $x100)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x81)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x79 $x87)))
 (let (($x28 (and $x92 $x89)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x19 $x28)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x9)))))))
 (let (($x93 (and (and (and $x103 true) $x77) $x91)))
 (let (($x105 (and $x93 $x101)))
 (let (($x47 (= $x105 true)))
 (let (($x14 (= $x47 true)))
 (let (($x106 (= $x14 true)))
 (let (($x35 (= $x34 true)))
 (let (($x72 (= $x35 true)))
 (let (($x16 (= $x72 true)))
 (let (($x65 (= $x31 true)))
 (let (($x22 (= $x65 true)))
 (let (($x25 (= $x22 true)))
 (let (($x75 (and $x25 $x16)))
 (let (($x119 (and $x75 $x106)))
 (let (($x110 (and $x119 $x8)))
 (let (($x127 (and $x110 $x126)))
 (let (($x128 (and $x44 $x127)))
 (let (($x11 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x129 (and $x11 $x128)))
 (let (($x29 (and $x12 $x129)))
 (let (($x21 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x56 (and $x21 $x29)))
 (let (($x57 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x62 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x57)))))))
 (let (($x13 (=> (and $x34 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x48 $x57)))))))
 (let (($x80 (and $x13 $x56)))
 (let (($x61 (=> $x80 $x43)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676034/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x34 (not $x50)))
 (let (($x112 (or $x50 $x34)))
 (let (($x114 (= $x112 true)))
 (let (($x26 (= $x114 true)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x110)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x23)))
 (let (($x12 (= input.spec-%var-x-0.2 ?x120)))
 (let (($x14 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x115 (=> $x14 $x12)))
 (let ((?x97 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x97 (_ bv1 32))))
 (let (($x119 (= $x14 $x106)))
 (let (($x11 (= false false)))
 (let (($x93 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x47 (=> $x93 $x11)))
 (let (($x101 (= ?x97 (_ bv0 32))))
 (let (($x105 (= $x93 $x101)))
 (let (($x116 (and (and (and $x105 $x47) $x119) $x115)))
 (let (($x111 (= $x116 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x85 (concat ?x98 (concat ?x86 ?x77)))))
 (let (($x70 (= ?x74 input.dst.llvm-%x)))
 (let (($x95 (= $x70 true)))
 (let (($x99 (= $x95 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x94)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x68 $x83)))
 (let (($x19 (and $x103 $x27)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x25 $x19)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x76)))))))
 (let (($x5 (and $x54 $x79)))
 (let (($x87 (= $x5 true)))
 (let (($x92 (= $x87 true)))
 (let (($x81 (= $x92 true)))
 (let (($x100 (and $x81 $x99)))
 (let (($x124 (and $x100 $x111)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x118 (and $x31 $x124)))
 (let (($x113 (and $x11 $x118)))
 (let (($x58 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x66 (and $x58 $x113)))
 (let (($x36 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x21 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x36)))))))
 (let (($x55 (=> (and $x34 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x46 $x36)))))))
 (let (($x39 (and $x55 $x66)))
 (let (($x117 (=> $x39 $x26)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x34 (not $x50)))
 (let (($x112 (or $x50 $x34)))
 (let (($x114 (= $x112 true)))
 (let (($x26 (= $x114 true)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x110)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x23)))
 (let (($x12 (= input.spec-%var-x-0.2 ?x120)))
 (let (($x14 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x115 (=> $x14 $x12)))
 (let ((?x97 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x97 (_ bv1 32))))
 (let (($x119 (= $x14 $x106)))
 (let (($x11 (= false false)))
 (let (($x93 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x47 (=> $x93 $x11)))
 (let (($x101 (= ?x97 (_ bv0 32))))
 (let (($x105 (= $x93 $x101)))
 (let (($x116 (and (and (and $x105 $x47) $x119) $x115)))
 (let (($x111 (= $x116 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x85 (concat ?x98 (concat ?x86 ?x77)))))
 (let (($x70 (= ?x74 input.dst.llvm-%x)))
 (let (($x95 (= $x70 true)))
 (let (($x99 (= $x95 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x94)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x68 $x83)))
 (let (($x19 (and $x103 $x27)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x25 $x19)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x76)))))))
 (let (($x5 (and $x54 $x79)))
 (let (($x87 (= $x5 true)))
 (let (($x92 (= $x87 true)))
 (let (($x81 (= $x92 true)))
 (let (($x100 (and $x81 $x99)))
 (let (($x124 (and $x100 $x111)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x118 (and $x31 $x124)))
 (let (($x113 (and $x11 $x118)))
 (let (($x58 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x66 (and $x58 $x113)))
 (let (($x36 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x21 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x36)))))))
 (let (($x55 (=> (and $x34 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x46 $x36)))))))
 (let (($x39 (and $x55 $x66)))
 (let (($x117 (=> $x39 $x26)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676034/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x60 (= $x84 true)))
 (let (($x18 (= $x60 true)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x63)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x28)))
 (let (($x125 (= input.spec-%var-x-0.2 ?x122)))
 (let (($x75 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x126 (=> $x75 $x125)))
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x118 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x118 (_ bv1 32))))
 (let (($x114 (= $x75 $x112)))
 (let (($x31 (= false false)))
 (let (($x124 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x39 (=> $x124 $x31)))
 (let (($x113 (= ?x118 (_ bv0 32))))
 (let (($x66 (= $x124 $x113)))
 (let (($x129 (and (and (and $x66 $x39) $x114) $x126)))
 (let (($x29 (= $x129 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x101 (concat ?x91 (concat ?x70 ?x108)))))
 (let (($x12 (= ?x105 input.dst.llvm-%x)))
 (let (($x115 (= $x12 true)))
 (let (($x116 (= $x115 true)))
 (let (($x86 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x10 (= $x86 true)))
 (let (($x110 (= $x10 true)))
 (let (($x23 (= $x110 true)))
 (let (($x119 (= true $x86)))
 (let (($x34 (not $x50)))
 (let (($x37 (=> $x34 $x119)))
 (let (($x11 (= input.dst.llvm-%x ?x105)))
 (let (($x47 (and $x86 $x11)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x67)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x87 $x81)))
 (let (($x104 (and $x89 $x85)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x54 $x104)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x83)))))))
 (let (($x106 (and (and (and $x5 true) $x88) $x47)))
 (let (($x42 (and $x106 $x37)))
 (let (($x53 (= $x42 true)))
 (let (($x44 (= $x53 true)))
 (let (($x107 (= $x44 true)))
 (let (($x76 (= $x50 true)))
 (let (($x71 (= $x76 true)))
 (let (($x78 (= $x71 true)))
 (let (($x8 (and $x78 $x107)))
 (let (($x120 (and $x8 $x23)))
 (let (($x111 (and $x120 $x116)))
 (let (($x56 (and $x111 $x29)))
 (let (($x80 (and $x75 $x56)))
 (let (($x9 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x130 (and $x9 $x80)))
 (let (($x59 (and $x31 $x130)))
 (let (($x51 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x43 (and $x51 $x59)))
 (let (($x13 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x58 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x13)))))))
 (let (($x6 (=> (and $x34 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x62 $x13)))))))
 (let (($x61 (and $x6 $x43)))
 (let (($x90 (=> $x61 $x18)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x60 (= $x84 true)))
 (let (($x18 (= $x60 true)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x63)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x28)))
 (let (($x125 (= input.spec-%var-x-0.2 ?x122)))
 (let (($x75 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x126 (=> $x75 $x125)))
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%x)))
 (let ((?x118 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x118 (_ bv1 32))))
 (let (($x114 (= $x75 $x112)))
 (let (($x31 (= false false)))
 (let (($x124 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x39 (=> $x124 $x31)))
 (let (($x113 (= ?x118 (_ bv0 32))))
 (let (($x66 (= $x124 $x113)))
 (let (($x129 (and (and (and $x66 $x39) $x114) $x126)))
 (let (($x29 (= $x129 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x101 (concat ?x91 (concat ?x70 ?x108)))))
 (let (($x12 (= ?x105 input.dst.llvm-%x)))
 (let (($x115 (= $x12 true)))
 (let (($x116 (= $x115 true)))
 (let (($x86 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x10 (= $x86 true)))
 (let (($x110 (= $x10 true)))
 (let (($x23 (= $x110 true)))
 (let (($x119 (= true $x86)))
 (let (($x34 (not $x50)))
 (let (($x37 (=> $x34 $x119)))
 (let (($x11 (= input.dst.llvm-%x ?x105)))
 (let (($x47 (and $x86 $x11)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x67)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x87 $x81)))
 (let (($x104 (and $x89 $x85)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x54 $x104)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x82 $x83)))))))
 (let (($x106 (and (and (and $x5 true) $x88) $x47)))
 (let (($x42 (and $x106 $x37)))
 (let (($x53 (= $x42 true)))
 (let (($x44 (= $x53 true)))
 (let (($x107 (= $x44 true)))
 (let (($x76 (= $x50 true)))
 (let (($x71 (= $x76 true)))
 (let (($x78 (= $x71 true)))
 (let (($x8 (and $x78 $x107)))
 (let (($x120 (and $x8 $x23)))
 (let (($x111 (and $x120 $x116)))
 (let (($x56 (and $x111 $x29)))
 (let (($x80 (and $x75 $x56)))
 (let (($x9 (= (_ bv5 32) input.spec-%tmpvar-0.L2%7%bbentry)))
 (let (($x130 (and $x9 $x80)))
 (let (($x59 (and $x31 $x130)))
 (let (($x51 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L2%7%bbentry)))
 (let (($x43 (and $x51 $x59)))
 (let (($x13 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x58 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x13)))))))
 (let (($x6 (=> (and $x34 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x62 $x13)))))))
 (let (($x61 (and $x6 $x43)))
 (let (($x90 (=> $x61 $x18)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676034/query
