==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x12)))
 (let (($x19 (and $x7 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460696/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x75 (not $x43)))
 (let (($x108 (or $x43 $x75)))
 (let (($x109 (= $x108 false)))
 (let (($x110 (= $x109 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x100 (concat ?x97 (concat ?x94 ?x92)))))
 (let (($x102 (= ?x101 input.dst.llvm-%x)))
 (let (($x103 (= $x102 true)))
 (let (($x82 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x88 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x82)))))))
 (let (($x77 (=> (and $x75 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x81 $x82)))))))
 (let (($x78 (= $x77 true)))
 (let (($x89 (= $x78 true)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x61)))
 (let ((?x68 (concat (select input.dst.llvm-mem ?x66) ?x65)))
 (let (($x69 (= input.spec-%var-x-0.2 ?x68)))
 (let (($x52 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x70 (=> $x52 $x69)))
 (let ((?x45 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x45 (_ bv1 32))))
 (let (($x54 (= $x52 $x53)))
 (let (($x5 (= false false)))
 (let (($x9 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x50 (=> $x9 $x5)))
 (let (($x31 (= ?x45 (_ bv0 32))))
 (let (($x49 (= $x9 $x31)))
 (let (($x51 (and $x49 $x50)))
 (let (($x55 (and $x51 $x54)))
 (let (($x71 (and $x55 $x70)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x22)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x38 $x16)))
 (let (($x36 (and $x17 $x11)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x44 $x36)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x47)))))))
 (let (($x37 (and $x42 $x14)))
 (let (($x7 (= $x37 true)))
 (let (($x33 (= $x7 true)))
 (let (($x74 (and $x33 $x73)))
 (let (($x90 (and $x74 $x89)))
 (let (($x104 (and $x90 $x103)))
 (let (($x23 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x105 (and $x23 $x104)))
 (let (($x106 (and $x5 $x105)))
 (let (($x39 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x107 (and $x39 $x106)))
 (let (($x111 (=> $x107 $x110)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x75 (not $x43)))
 (let (($x108 (or $x43 $x75)))
 (let (($x109 (= $x108 false)))
 (let (($x110 (= $x109 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x100 (concat ?x97 (concat ?x94 ?x92)))))
 (let (($x102 (= ?x101 input.dst.llvm-%x)))
 (let (($x103 (= $x102 true)))
 (let (($x82 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x88 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x82)))))))
 (let (($x77 (=> (and $x75 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x81 $x82)))))))
 (let (($x78 (= $x77 true)))
 (let (($x89 (= $x78 true)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x61)))
 (let ((?x68 (concat (select input.dst.llvm-mem ?x66) ?x65)))
 (let (($x69 (= input.spec-%var-x-0.2 ?x68)))
 (let (($x52 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x70 (=> $x52 $x69)))
 (let ((?x45 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x45 (_ bv1 32))))
 (let (($x54 (= $x52 $x53)))
 (let (($x5 (= false false)))
 (let (($x9 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x50 (=> $x9 $x5)))
 (let (($x31 (= ?x45 (_ bv0 32))))
 (let (($x49 (= $x9 $x31)))
 (let (($x51 (and $x49 $x50)))
 (let (($x55 (and $x51 $x54)))
 (let (($x71 (and $x55 $x70)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x22)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x38 $x16)))
 (let (($x36 (and $x17 $x11)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x44 $x36)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x47)))))))
 (let (($x37 (and $x42 $x14)))
 (let (($x7 (= $x37 true)))
 (let (($x33 (= $x7 true)))
 (let (($x74 (and $x33 $x73)))
 (let (($x90 (and $x74 $x89)))
 (let (($x104 (and $x90 $x103)))
 (let (($x23 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x105 (and $x23 $x104)))
 (let (($x106 (and $x5 $x105)))
 (let (($x39 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x107 (and $x39 $x106)))
 (let (($x111 (=> $x107 $x110)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.spec-%var-x-0.2 #b10000000000000000000000000000000)
(= input.spec-%var-x-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%7%bbentry #b00000000000000000000000000000101)
(= input.spec-%var-x_val-0.L1%7%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-x-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-0.2 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16251836 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16251839 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16251836 32))
(define-fun input.spec-%var-x-0.2 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460696/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x19 (not $x39)))
 (let (($x113 (or $x39 $x19)))
 (let (($x114 (not $x113)))
 (let (($x69 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x75 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x57 (or $x75 $x69)))
 (let (($x115 (or $x57 $x114)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x103 (concat ?x98 ?x92)))))
 (let (($x108 (= ?x107 input.dst.llvm-%x)))
 (let (($x109 (= $x108 true)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x84)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x77)))
 (let (($x90 (= input.spec-%var-x-0.2 ?x89)))
 (let (($x99 (=> $x75 $x90)))
 (let ((?x70 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x76 (bvuge ?x70 (_ bv1 32))))
 (let (($x79 (= $x75 $x76)))
 (let (($x28 (= false false)))
 (let (($x73 (=> $x69 $x28)))
 (let (($x71 (= ?x70 (_ bv0 32))))
 (let (($x72 (= $x69 $x71)))
 (let (($x74 (and $x72 $x73)))
 (let (($x80 (and $x74 $x79)))
 (let (($x100 (and $x80 $x99)))
 (let (($x96 (= $x100 true)))
 (let (($x97 (= $x96 true)))
 (let (($x60 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x58 (= $x60 true)))
 (let (($x61 (= $x58 true)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x54)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x50 $x52)))
 (let (($x56 (and $x53 $x55)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x14 $x56)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x9)))))))
 (let (($x67 (and $x5 $x66)))
 (let (($x62 (= $x67 true)))
 (let (($x63 (= $x62 true)))
 (let (($x65 (and $x63 $x61)))
 (let (($x93 (and $x65 $x97)))
 (let (($x110 (and $x93 $x109)))
 (let (($x22 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x111 (and $x22 $x110)))
 (let (($x112 (and $x28 $x111)))
 (let (($x12 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x26 (and $x12 $x112)))
 (let (($x27 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x44 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x27)))))))
 (let (($x23 (=> (and $x19 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x47 $x27)))))))
 (let (($x91 (and $x23 $x26)))
 (let (($x118 (=> $x91 $x117)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x19 (not $x39)))
 (let (($x113 (or $x39 $x19)))
 (let (($x114 (not $x113)))
 (let (($x69 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x75 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x57 (or $x75 $x69)))
 (let (($x115 (or $x57 $x114)))
 (let (($x116 (= $x115 true)))
 (let (($x117 (= $x116 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x103 (concat ?x98 ?x92)))))
 (let (($x108 (= ?x107 input.dst.llvm-%x)))
 (let (($x109 (= $x108 true)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x84)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x77)))
 (let (($x90 (= input.spec-%var-x-0.2 ?x89)))
 (let (($x99 (=> $x75 $x90)))
 (let ((?x70 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x76 (bvuge ?x70 (_ bv1 32))))
 (let (($x79 (= $x75 $x76)))
 (let (($x28 (= false false)))
 (let (($x73 (=> $x69 $x28)))
 (let (($x71 (= ?x70 (_ bv0 32))))
 (let (($x72 (= $x69 $x71)))
 (let (($x74 (and $x72 $x73)))
 (let (($x80 (and $x74 $x79)))
 (let (($x100 (and $x80 $x99)))
 (let (($x96 (= $x100 true)))
 (let (($x97 (= $x96 true)))
 (let (($x60 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x58 (= $x60 true)))
 (let (($x61 (= $x58 true)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x54)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x50 $x52)))
 (let (($x56 (and $x53 $x55)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x14 $x56)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x9)))))))
 (let (($x67 (and $x5 $x66)))
 (let (($x62 (= $x67 true)))
 (let (($x63 (= $x62 true)))
 (let (($x65 (and $x63 $x61)))
 (let (($x93 (and $x65 $x97)))
 (let (($x110 (and $x93 $x109)))
 (let (($x22 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x111 (and $x22 $x110)))
 (let (($x112 (and $x28 $x111)))
 (let (($x12 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x26 (and $x12 $x112)))
 (let (($x27 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x44 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x27)))))))
 (let (($x23 (=> (and $x19 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x47 $x27)))))))
 (let (($x91 (and $x23 $x26)))
 (let (($x118 (=> $x91 $x117)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460696/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x23)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x51)))
 (let (($x63 (= input.spec-%var-x-0.2 ?x5)))
 (let (($x120 (= $x63 true)))
 (let (($x121 (= $x120 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x101 (concat ?x95 (concat ?x106 ?x93)))))
 (let (($x115 (= ?x104 input.dst.llvm-%x)))
 (let (($x116 (= $x115 true)))
 (let (($x35 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x112 (= true $x35)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x20 (not $x47)))
 (let (($x26 (=> $x20 $x112)))
 (let (($x107 (= input.dst.llvm-%x ?x104)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x90)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x81 $x77)))
 (let (($x100 (and $x89 $x99)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x74 $x100)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x87)))))))
 (let (($x110 (and (and (and $x35 $x83) $x96) $x107)))
 (let (($x71 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x34 (=> $x71 $x63)))
 (let ((?x48 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x44 (bvuge ?x48 (_ bv1 32))))
 (let (($x65 (= $x71 $x44)))
 (let (($x28 (= false false)))
 (let (($x7 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x62 (=> $x7 $x28)))
 (let (($x25 (= ?x48 (_ bv0 32))))
 (let (($x42 (= $x7 $x25)))
 (let (($x60 (and $x42 $x62)))
 (let (($x15 (and $x60 $x65)))
 (let (($x38 (and $x15 $x34)))
 (let (($x111 (and $x38 $x110)))
 (let (($x91 (and $x111 $x26)))
 (let (($x57 (= $x91 true)))
 (let (($x113 (= $x57 true)))
 (let (($x72 (= $x20 true)))
 (let (($x66 (= $x72 true)))
 (let (($x12 (= $x35 true)))
 (let (($x36 (= $x12 true)))
 (let (($x53 (and $x36 $x66)))
 (let (($x114 (and $x53 $x113)))
 (let (($x117 (and $x114 $x116)))
 (let (($x118 (and $x71 $x117)))
 (let (($x43 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x119 (and $x43 $x118)))
 (let (($x11 (and $x28 $x119)))
 (let (($x67 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x94 (and $x67 $x11)))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x56 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x6)))))))
 (let (($x18 (=> (and $x20 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x50 $x6)))))))
 (let (($x13 (and $x18 $x94)))
 (let (($x122 (=> $x13 $x121)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x23)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x51)))
 (let (($x63 (= input.spec-%var-x-0.2 ?x5)))
 (let (($x120 (= $x63 true)))
 (let (($x121 (= $x120 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x101 (concat ?x95 (concat ?x106 ?x93)))))
 (let (($x115 (= ?x104 input.dst.llvm-%x)))
 (let (($x116 (= $x115 true)))
 (let (($x35 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x112 (= true $x35)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x20 (not $x47)))
 (let (($x26 (=> $x20 $x112)))
 (let (($x107 (= input.dst.llvm-%x ?x104)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x90)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x81 $x77)))
 (let (($x100 (and $x89 $x99)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x74 $x100)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x87)))))))
 (let (($x110 (and (and (and $x35 $x83) $x96) $x107)))
 (let (($x71 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x34 (=> $x71 $x63)))
 (let ((?x48 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x44 (bvuge ?x48 (_ bv1 32))))
 (let (($x65 (= $x71 $x44)))
 (let (($x28 (= false false)))
 (let (($x7 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x62 (=> $x7 $x28)))
 (let (($x25 (= ?x48 (_ bv0 32))))
 (let (($x42 (= $x7 $x25)))
 (let (($x60 (and $x42 $x62)))
 (let (($x15 (and $x60 $x65)))
 (let (($x38 (and $x15 $x34)))
 (let (($x111 (and $x38 $x110)))
 (let (($x91 (and $x111 $x26)))
 (let (($x57 (= $x91 true)))
 (let (($x113 (= $x57 true)))
 (let (($x72 (= $x20 true)))
 (let (($x66 (= $x72 true)))
 (let (($x12 (= $x35 true)))
 (let (($x36 (= $x12 true)))
 (let (($x53 (and $x36 $x66)))
 (let (($x114 (and $x53 $x113)))
 (let (($x117 (and $x114 $x116)))
 (let (($x118 (and $x71 $x117)))
 (let (($x43 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x119 (and $x43 $x118)))
 (let (($x11 (and $x28 $x119)))
 (let (($x67 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x94 (and $x67 $x11)))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x56 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x6)))))))
 (let (($x18 (=> (and $x20 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x50 $x6)))))))
 (let (($x13 (and $x18 $x94)))
 (let (($x122 (=> $x13 $x121)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460696/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x40 (= $x123 true)))
 (let (($x97 (= $x40 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x104 (concat ?x93 (concat ?x95 ?x101)))))
 (let (($x118 (= ?x107 input.dst.llvm-%x)))
 (let (($x119 (= $x118 true)))
 (let (($x14 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x57 (= true $x14)))
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x54 (not $x20)))
 (let (($x113 (=> $x54 $x57)))
 (let (($x110 (= input.dst.llvm-%x ?x107)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x84 $x89)))
 (let (($x96 (and $x90 $x100)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x79 $x96)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x86)))))))
 (let (($x26 (and (and (and $x14 $x81) $x109) $x110)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x10)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x51)))
 (let (($x34 (= input.spec-%var-x-0.2 ?x63)))
 (let (($x12 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x38 (=> $x12 $x34)))
 (let ((?x28 (ite $x20 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x28 (_ bv1 32))))
 (let (($x15 (= $x12 $x65)))
 (let (($x41 (= false false)))
 (let (($x42 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x71 (=> $x42 $x41)))
 (let (($x62 (= ?x28 (_ bv0 32))))
 (let (($x60 (= $x42 $x62)))
 (let (($x44 (and $x60 $x71)))
 (let (($x29 (and $x44 $x15)))
 (let (($x75 (and $x29 $x38)))
 (let (($x91 (and $x75 $x26)))
 (let (($x114 (and $x91 $x113)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x7 (= $x14 true)))
 (let (($x48 (= $x7 true)))
 (let (($x36 (= $x20 true)))
 (let (($x72 (= $x36 true)))
 (let (($x25 (and $x72 $x48)))
 (let (($x117 (and $x25 $x116)))
 (let (($x11 (and $x117 $x119)))
 (let (($x94 (and $x12 $x11)))
 (let (($x69 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x13 (and $x69 $x94)))
 (let (($x120 (and $x41 $x13)))
 (let (($x70 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x121 (and $x70 $x120)))
 (let (($x49 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x30 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x49)))))))
 (let (($x9 (=> (and $x54 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x52 $x49)))))))
 (let (($x122 (and $x9 $x121)))
 (let (($x21 (=> $x122 $x97)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x40 (= $x123 true)))
 (let (($x97 (= $x40 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x104 (concat ?x93 (concat ?x95 ?x101)))))
 (let (($x118 (= ?x107 input.dst.llvm-%x)))
 (let (($x119 (= $x118 true)))
 (let (($x14 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x57 (= true $x14)))
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x54 (not $x20)))
 (let (($x113 (=> $x54 $x57)))
 (let (($x110 (= input.dst.llvm-%x ?x107)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x84 $x89)))
 (let (($x96 (and $x90 $x100)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x79 $x96)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x86)))))))
 (let (($x26 (and (and (and $x14 $x81) $x109) $x110)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x10)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x51)))
 (let (($x34 (= input.spec-%var-x-0.2 ?x63)))
 (let (($x12 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x38 (=> $x12 $x34)))
 (let ((?x28 (ite $x20 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x28 (_ bv1 32))))
 (let (($x15 (= $x12 $x65)))
 (let (($x41 (= false false)))
 (let (($x42 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x71 (=> $x42 $x41)))
 (let (($x62 (= ?x28 (_ bv0 32))))
 (let (($x60 (= $x42 $x62)))
 (let (($x44 (and $x60 $x71)))
 (let (($x29 (and $x44 $x15)))
 (let (($x75 (and $x29 $x38)))
 (let (($x91 (and $x75 $x26)))
 (let (($x114 (and $x91 $x113)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x7 (= $x14 true)))
 (let (($x48 (= $x7 true)))
 (let (($x36 (= $x20 true)))
 (let (($x72 (= $x36 true)))
 (let (($x25 (and $x72 $x48)))
 (let (($x117 (and $x25 $x116)))
 (let (($x11 (and $x117 $x119)))
 (let (($x94 (and $x12 $x11)))
 (let (($x69 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x13 (and $x69 $x94)))
 (let (($x120 (and $x41 $x13)))
 (let (($x70 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x121 (and $x70 $x120)))
 (let (($x49 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x30 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x49)))))))
 (let (($x9 (=> (and $x54 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x52 $x49)))))))
 (let (($x122 (and $x9 $x121)))
 (let (($x21 (=> $x122 $x97)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460696/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x55)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x63)))
 (let (($x124 (= (_ bv5 32) ?x38)))
 (let (($x45 (= $x124 true)))
 (let (($x76 (= $x45 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x110 (concat ?x105 (concat ?x103 ?x106)))))
 (let (($x13 (= ?x26 input.dst.llvm-%x)))
 (let (($x120 (= $x13 true)))
 (let (($x25 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x116 (= true $x25)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x20 (not $x43)))
 (let (($x117 (=> $x20 $x116)))
 (let (($x91 (= input.dst.llvm-%x ?x26)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x96)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x89 $x99)))
 (let (($x112 (and $x100 $x109)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x85 $x112)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x73)))))))
 (let (($x114 (and (and (and $x25 $x77) $x98) $x91)))
 (let (($x75 (= input.spec-%var-x-0.2 ?x38)))
 (let (($x15 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x80 (=> $x15 $x75)))
 (let ((?x41 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x41 (_ bv1 32))))
 (let (($x22 (= $x15 $x29)))
 (let (($x69 (= false false)))
 (let (($x14 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x12 (=> $x14 $x69)))
 (let (($x71 (= ?x41 (_ bv0 32))))
 (let (($x44 (= $x14 $x71)))
 (let (($x65 (and $x44 $x12)))
 (let (($x5 (and $x65 $x22)))
 (let (($x87 (and $x5 $x80)))
 (let (($x115 (and $x87 $x114)))
 (let (($x118 (and $x115 $x117)))
 (let (($x119 (= $x118 true)))
 (let (($x11 (= $x119 true)))
 (let (($x28 (= $x20 true)))
 (let (($x62 (= $x28 true)))
 (let (($x35 (= $x25 true)))
 (let (($x42 (= $x35 true)))
 (let (($x60 (and $x42 $x62)))
 (let (($x94 (and $x60 $x11)))
 (let (($x121 (and $x94 $x120)))
 (let (($x122 (and $x14 $x121)))
 (let (($x66 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x123 (and $x66 $x122)))
 (let (($x40 (and $x69 $x123)))
 (let (($x68 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x97 (and $x68 $x40)))
 (let (($x16 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x67 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x16)))))))
 (let (($x33 (=> (and $x20 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x31 $x16)))))))
 (let (($x21 (and $x33 $x97)))
 (let (($x92 (=> $x21 $x76)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x55)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x63)))
 (let (($x124 (= (_ bv5 32) ?x38)))
 (let (($x45 (= $x124 true)))
 (let (($x76 (= $x45 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x110 (concat ?x105 (concat ?x103 ?x106)))))
 (let (($x13 (= ?x26 input.dst.llvm-%x)))
 (let (($x120 (= $x13 true)))
 (let (($x25 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x116 (= true $x25)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x20 (not $x43)))
 (let (($x117 (=> $x20 $x116)))
 (let (($x91 (= input.dst.llvm-%x ?x26)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x96)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x89 $x99)))
 (let (($x112 (and $x100 $x109)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x85 $x112)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x73)))))))
 (let (($x114 (and (and (and $x25 $x77) $x98) $x91)))
 (let (($x75 (= input.spec-%var-x-0.2 ?x38)))
 (let (($x15 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x80 (=> $x15 $x75)))
 (let ((?x41 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x41 (_ bv1 32))))
 (let (($x22 (= $x15 $x29)))
 (let (($x69 (= false false)))
 (let (($x14 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x12 (=> $x14 $x69)))
 (let (($x71 (= ?x41 (_ bv0 32))))
 (let (($x44 (= $x14 $x71)))
 (let (($x65 (and $x44 $x12)))
 (let (($x5 (and $x65 $x22)))
 (let (($x87 (and $x5 $x80)))
 (let (($x115 (and $x87 $x114)))
 (let (($x118 (and $x115 $x117)))
 (let (($x119 (= $x118 true)))
 (let (($x11 (= $x119 true)))
 (let (($x28 (= $x20 true)))
 (let (($x62 (= $x28 true)))
 (let (($x35 (= $x25 true)))
 (let (($x42 (= $x35 true)))
 (let (($x60 (and $x42 $x62)))
 (let (($x94 (and $x60 $x11)))
 (let (($x121 (and $x94 $x120)))
 (let (($x122 (and $x14 $x121)))
 (let (($x66 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x123 (and $x66 $x122)))
 (let (($x40 (and $x69 $x123)))
 (let (($x68 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x97 (and $x68 $x40)))
 (let (($x16 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x67 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x16)))))))
 (let (($x33 (=> (and $x20 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x31 $x16)))))))
 (let (($x21 (and $x33 $x97)))
 (let (($x92 (=> $x21 $x76)))
 (not $x92))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460696/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x20 (not $x43)))
 (let (($x11 (or $x43 $x20)))
 (let (($x94 (= $x11 true)))
 (let (($x13 (= $x94 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x102 (concat ?x103 (concat ?x101 ?x107)))))
 (let (($x91 (= ?x26 input.dst.llvm-%x)))
 (let (($x114 (= $x91 true)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x79)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x85)))
 (let (($x99 (= input.spec-%var-x-0.2 ?x90)))
 (let (($x88 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x100 (=> $x88 $x99)))
 (let ((?x38 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x38 (_ bv1 32))))
 (let (($x83 (= $x88 $x84)))
 (let (($x66 (= false false)))
 (let (($x63 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x87 (=> $x63 $x66)))
 (let (($x75 (= ?x38 (_ bv0 32))))
 (let (($x80 (= $x63 $x75)))
 (let (($x86 (and $x80 $x87)))
 (let (($x108 (and $x86 $x83)))
 (let (($x96 (and $x108 $x100)))
 (let (($x109 (= $x96 true)))
 (let (($x112 (= $x109 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x34)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x29 $x5)))
 (let (($x10 (and $x61 $x37)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x28 $x10)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x41)))))))
 (let (($x23 (and $x15 $x51)))
 (let (($x64 (= $x23 true)))
 (let (($x32 (= $x64 true)))
 (let (($x98 (and $x32 $x112)))
 (let (($x115 (and $x98 $x114)))
 (let (($x25 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x116 (and $x25 $x115)))
 (let (($x117 (and $x66 $x116)))
 (let (($x72 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x118 (and $x72 $x117)))
 (let (($x30 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x68 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x30)))))))
 (let (($x59 (=> (and $x20 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x18 $x30)))))))
 (let (($x119 (and $x59 $x118)))
 (let (($x120 (=> $x119 $x13)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x20 (not $x43)))
 (let (($x11 (or $x43 $x20)))
 (let (($x94 (= $x11 true)))
 (let (($x13 (= $x94 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x102 (concat ?x103 (concat ?x101 ?x107)))))
 (let (($x91 (= ?x26 input.dst.llvm-%x)))
 (let (($x114 (= $x91 true)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x79)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x85)))
 (let (($x99 (= input.spec-%var-x-0.2 ?x90)))
 (let (($x88 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x100 (=> $x88 $x99)))
 (let ((?x38 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x38 (_ bv1 32))))
 (let (($x83 (= $x88 $x84)))
 (let (($x66 (= false false)))
 (let (($x63 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x87 (=> $x63 $x66)))
 (let (($x75 (= ?x38 (_ bv0 32))))
 (let (($x80 (= $x63 $x75)))
 (let (($x86 (and $x80 $x87)))
 (let (($x108 (and $x86 $x83)))
 (let (($x96 (and $x108 $x100)))
 (let (($x109 (= $x96 true)))
 (let (($x112 (= $x109 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x34)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x29 $x5)))
 (let (($x10 (and $x61 $x37)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x28 $x10)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x41)))))))
 (let (($x23 (and $x15 $x51)))
 (let (($x64 (= $x23 true)))
 (let (($x32 (= $x64 true)))
 (let (($x98 (and $x32 $x112)))
 (let (($x115 (and $x98 $x114)))
 (let (($x25 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x116 (and $x25 $x115)))
 (let (($x117 (and $x66 $x116)))
 (let (($x72 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x118 (and $x72 $x117)))
 (let (($x30 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x68 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x30)))))))
 (let (($x59 (=> (and $x20 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x18 $x30)))))))
 (let (($x119 (and $x59 $x118)))
 (let (($x120 (=> $x119 $x13)))
 (not $x120))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460696/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x8 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x54 (= $x8 true)))
 (let (($x74 (= $x54 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x106 (concat ?x101 ?x103)))))
 (let (($x123 (= ?x115 input.dst.llvm-%x)))
 (let (($x40 (= $x123 true)))
 (let (($x88 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x113 (= $x88 true)))
 (let (($x46 (= $x113 true)))
 (let (($x94 (= true $x88)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x20 (not $x43)))
 (let (($x13 (=> $x20 $x94)))
 (let (($x116 (= input.dst.llvm-%x ?x115)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x112)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x99 $x96)))
 (let (($x95 (and $x109 $x98)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x108 $x95)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x78)))))))
 (let (($x119 (and (and (and $x88 $x90) $x102) $x116)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x51)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x55)))
 (let (($x75 (= input.spec-%var-x-0.2 ?x38)))
 (let (($x14 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x80 (=> $x14 $x75)))
 (let ((?x69 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x69 (_ bv1 32))))
 (let (($x22 (= $x14 $x29)))
 (let (($x25 (= false false)))
 (let (($x44 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x42 (=> $x44 $x25)))
 (let (($x12 (= ?x69 (_ bv0 32))))
 (let (($x15 (= $x44 $x12)))
 (let (($x28 (and $x15 $x42)))
 (let (($x5 (and $x28 $x22)))
 (let (($x66 (and $x5 $x80)))
 (let (($x11 (and $x66 $x119)))
 (let (($x120 (and $x11 $x13)))
 (let (($x121 (= $x120 true)))
 (let (($x27 (= $x121 true)))
 (let (($x41 (= $x43 true)))
 (let (($x71 (= $x41 true)))
 (let (($x35 (and $x71 $x27)))
 (let (($x122 (and $x35 $x46)))
 (let (($x97 (and $x122 $x40)))
 (let (($x21 (and $x14 $x97)))
 (let (($x65 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x124 (and $x65 $x21)))
 (let (($x45 (and $x25 $x124)))
 (let (($x48 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x76 (and $x48 $x45)))
 (let (($x33 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x72 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x33)))))))
 (let (($x49 (=> (and $x20 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x67 $x33)))))))
 (let (($x92 (and $x49 $x76)))
 (let (($x104 (=> $x92 $x74)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0.2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x_val-0.L1%7%bbentry () (_ BitVec 32))
(assert
 (let (($x8 (= input.spec-%var-x-0.2 (_ bv5 32))))
 (let (($x54 (= $x8 true)))
 (let (($x74 (= $x54 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x106 (concat ?x101 ?x103)))))
 (let (($x123 (= ?x115 input.dst.llvm-%x)))
 (let (($x40 (= $x123 true)))
 (let (($x88 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x113 (= $x88 true)))
 (let (($x46 (= $x113 true)))
 (let (($x94 (= true $x88)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x20 (not $x43)))
 (let (($x13 (=> $x20 $x94)))
 (let (($x116 (= input.dst.llvm-%x ?x115)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x112)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x99 $x96)))
 (let (($x95 (and $x109 $x98)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x108 $x95)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x78)))))))
 (let (($x119 (and (and (and $x88 $x90) $x102) $x116)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x51)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x55)))
 (let (($x75 (= input.spec-%var-x-0.2 ?x38)))
 (let (($x14 (bvuge input.spec-%var-x-0.0 (_ bv1 32))))
 (let (($x80 (=> $x14 $x75)))
 (let ((?x69 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x69 (_ bv1 32))))
 (let (($x22 (= $x14 $x29)))
 (let (($x25 (= false false)))
 (let (($x44 (= input.spec-%var-x-0.0 (_ bv0 32))))
 (let (($x42 (=> $x44 $x25)))
 (let (($x12 (= ?x69 (_ bv0 32))))
 (let (($x15 (= $x44 $x12)))
 (let (($x28 (and $x15 $x42)))
 (let (($x5 (and $x28 $x22)))
 (let (($x66 (and $x5 $x80)))
 (let (($x11 (and $x66 $x119)))
 (let (($x120 (and $x11 $x13)))
 (let (($x121 (= $x120 true)))
 (let (($x27 (= $x121 true)))
 (let (($x41 (= $x43 true)))
 (let (($x71 (= $x41 true)))
 (let (($x35 (and $x71 $x27)))
 (let (($x122 (and $x35 $x46)))
 (let (($x97 (and $x122 $x40)))
 (let (($x21 (and $x14 $x97)))
 (let (($x65 (= (_ bv5 32) input.spec-%tmpvar-0.L1%7%bbentry)))
 (let (($x124 (and $x65 $x21)))
 (let (($x45 (and $x25 $x124)))
 (let (($x48 (= input.spec-%var-x-0.2 input.spec-%var-x_val-0.L1%7%bbentry)))
 (let (($x76 (and $x48 $x45)))
 (let (($x33 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x72 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x33)))))))
 (let (($x49 (=> (and $x20 (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x67 $x33)))))))
 (let (($x92 (and $x49 $x76)))
 (let (($x104 (=> $x92 $x74)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460696/query
