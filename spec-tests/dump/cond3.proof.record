==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460617/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x98 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x99 (not $x98)))
 (let (($x100 (or $x98 $x99)))
 (let (($x101 (= $x100 false)))
 (let (($x102 (= $x101 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x86 (concat ?x83 (concat ?x80 ?x78)))))
 (let (($x88 (= ?x87 input.dst.llvm-%x)))
 (let (($x89 (= $x88 true)))
 (let (($x72 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x64)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x59 $x62)))
 (let (($x66 (and $x63 $x65)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x40 $x66)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x52)))))))
 (let (($x68 (and $x58 $x67)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x75 (and $x70 $x74)))
 (let (($x90 (and $x75 $x89)))
 (let (($x14 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x9 (= $x14 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x91 (and $x9 $x90)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x92 (and $x10 $x91)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x93 (and $x17 $x92)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x12 (=> true $x38)))
 (let (($x29 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x8 (= true $x29)))
 (let (($x47 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x27 (= false $x47)))
 (let (($x30 (and $x27 true)))
 (let (($x19 (and $x30 $x8)))
 (let (($x28 (and $x19 $x12)))
 (let (($x94 (and $x28 $x93)))
 (let (($x15 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x95 (and $x15 $x94)))
 (let (($x48 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x25 (=> true $x48)))
 (let (($x24 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x26 (= true $x24)))
 (let (($x23 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x20 (= false $x23)))
 (let (($x34 (and $x20 true)))
 (let (($x44 (and $x34 $x26)))
 (let (($x35 (and $x44 $x25)))
 (let (($x96 (and $x35 $x95)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x97 (and $x13 $x96)))
 (let (($x103 (=> $x97 $x102)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x98 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x99 (not $x98)))
 (let (($x100 (or $x98 $x99)))
 (let (($x101 (= $x100 false)))
 (let (($x102 (= $x101 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x86 (concat ?x83 (concat ?x80 ?x78)))))
 (let (($x88 (= ?x87 input.dst.llvm-%x)))
 (let (($x89 (= $x88 true)))
 (let (($x72 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x64)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x59 $x62)))
 (let (($x66 (and $x63 $x65)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x40 $x66)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x52)))))))
 (let (($x68 (and $x58 $x67)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x75 (and $x70 $x74)))
 (let (($x90 (and $x75 $x89)))
 (let (($x14 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x9 (= $x14 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x91 (and $x9 $x90)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x92 (and $x10 $x91)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x93 (and $x17 $x92)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x12 (=> true $x38)))
 (let (($x29 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x8 (= true $x29)))
 (let (($x47 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x27 (= false $x47)))
 (let (($x30 (and $x27 true)))
 (let (($x19 (and $x30 $x8)))
 (let (($x28 (and $x19 $x12)))
 (let (($x94 (and $x28 $x93)))
 (let (($x15 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x95 (and $x15 $x94)))
 (let (($x48 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x25 (=> true $x48)))
 (let (($x24 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x26 (= true $x24)))
 (let (($x23 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x20 (= false $x23)))
 (let (($x34 (and $x20 true)))
 (let (($x44 (and $x34 $x26)))
 (let (($x35 (and $x44 $x25)))
 (let (($x96 (and $x35 $x95)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x97 (and $x13 $x96)))
 (let (($x103 (=> $x97 $x102)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-1.L1%3%d false)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.L1%3%d #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.L1%10%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-3.L1%10%bbentry.2 #b00000000000000000000000000000001)
(= input.spec-%tmpvar-3.L1%10%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.L1%10%bbentry #b00000000000000000000000000000010)
(= input.spec-%tmpvar-5.L1%10%bbentry.2 #b00000000000000000000000000000010)
(= input.spec-%tmpvar-5.L1%10%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-7.L1%16%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_7)
(function @fun_7
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.L1%3%d () Bool
    false)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv262144 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv262144 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv262147 32))
(define-fun input.spec-%tmpvar-1.L1%3%d () Bool false)
(define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460617/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x103 (not $x102)))
 (let (($x104 (or $x102 $x103)))
 (let (($x32 (not $x104)))
 (let (($x36 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x100 (not $x36)))
 (let (($x101 (or $x36 $x100)))
 (let (($x77 (or $x101 $x32)))
 (let (($x105 (= $x77 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x88 (concat ?x81 (concat ?x79 ?x82)))))
 (let (($x90 (= ?x89 input.dst.llvm-%x)))
 (let (($x91 (= $x90 true)))
 (let (($x73 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x65)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x60 $x63)))
 (let (($x67 (and $x64 $x66)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x57 $x67)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x54)))))))
 (let (($x69 (and $x59 $x68)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x76 (and $x71 $x75)))
 (let (($x92 (and $x76 $x91)))
 (let (($x37 (= $x36 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x93 (and $x37 $x92)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x94 (and $x6 $x93)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x95 (and $x16 $x94)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x38 (=> true $x42)))
 (let (($x30 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x29 (= true $x30)))
 (let (($x46 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x47 (= false $x46)))
 (let (($x27 (and $x47 true)))
 (let (($x8 (and $x27 $x29)))
 (let (($x12 (and $x8 $x38)))
 (let (($x96 (and $x12 $x95)))
 (let (($x5 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x97 (and $x5 $x96)))
 (let (($x41 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x48 (=> true $x41)))
 (let (($x18 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x24 (= true $x18)))
 (let (($x11 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x23 (= false $x11)))
 (let (($x20 (and $x23 true)))
 (let (($x26 (and $x20 $x24)))
 (let (($x25 (and $x26 $x48)))
 (let (($x98 (and $x25 $x97)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x99 (and $x33 $x98)))
 (let (($x107 (=> $x99 $x106)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x103 (not $x102)))
 (let (($x104 (or $x102 $x103)))
 (let (($x32 (not $x104)))
 (let (($x36 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x100 (not $x36)))
 (let (($x101 (or $x36 $x100)))
 (let (($x77 (or $x101 $x32)))
 (let (($x105 (= $x77 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x88 (concat ?x81 (concat ?x79 ?x82)))))
 (let (($x90 (= ?x89 input.dst.llvm-%x)))
 (let (($x91 (= $x90 true)))
 (let (($x73 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x65)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x60 $x63)))
 (let (($x67 (and $x64 $x66)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x57 $x67)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x54)))))))
 (let (($x69 (and $x59 $x68)))
 (let (($x70 (= $x69 true)))
 (let (($x71 (= $x70 true)))
 (let (($x76 (and $x71 $x75)))
 (let (($x92 (and $x76 $x91)))
 (let (($x37 (= $x36 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x93 (and $x37 $x92)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x94 (and $x6 $x93)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x95 (and $x16 $x94)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x38 (=> true $x42)))
 (let (($x30 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x29 (= true $x30)))
 (let (($x46 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x47 (= false $x46)))
 (let (($x27 (and $x47 true)))
 (let (($x8 (and $x27 $x29)))
 (let (($x12 (and $x8 $x38)))
 (let (($x96 (and $x12 $x95)))
 (let (($x5 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x97 (and $x5 $x96)))
 (let (($x41 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x48 (=> true $x41)))
 (let (($x18 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x24 (= true $x18)))
 (let (($x11 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x23 (= false $x11)))
 (let (($x20 (and $x23 true)))
 (let (($x26 (and $x20 $x24)))
 (let (($x25 (and $x26 $x48)))
 (let (($x98 (and $x25 $x97)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x99 (and $x33 $x98)))
 (let (($x107 (=> $x99 $x106)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460617/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (= false true)))
 (let (($x108 (= $x107 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x84 (concat ?x79 (concat ?x78 ?x87)))))
 (let (($x97 (= ?x89 input.dst.llvm-%x)))
 (let (($x98 (= $x97 true)))
 (let (($x90 (= input.dst.llvm-%x ?x89)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x72)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x67 $x70)))
 (let (($x74 (and $x71 $x73)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x66 $x74)))
 (let (($x46 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x57)))))))
 (let (($x93 (and (and (and $x65 $x46) $x75) $x90)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x28 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x37 (= $x28 true)))
 (let (($x40 (= $x37 true)))
 (let (($x96 (and $x40 $x95)))
 (let (($x99 (and $x96 $x98)))
 (let (($x101 (and (not (bvsgt input.spec-%var-x-0 (_ bv0 32))) $x99)))
 (let (($x52 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x56 (= $x52 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x102 (and $x56 $x101)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x103 (and $x31 $x102)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x104 (and $x8 $x103)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x48 (=> true $x34)))
 (let (($x50 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x19 (= true $x50)))
 (let (($x12 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x44 (= false $x12)))
 (let (($x39 (and $x44 true)))
 (let (($x42 (and $x39 $x19)))
 (let (($x25 (and $x42 $x48)))
 (let (($x32 (and $x25 $x104)))
 (let (($x58 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x77 (and $x58 $x32)))
 (let (($x54 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x47 (=> true $x54)))
 (let (($x11 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x30 (= true $x11)))
 (let (($x21 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x13 (= false $x21)))
 (let (($x33 (and $x13 true)))
 (let (($x29 (and $x33 $x30)))
 (let (($x27 (and $x29 $x47)))
 (let (($x105 (and $x27 $x77)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x106 (and $x18 $x105)))
 (let (($x9 (=> $x106 $x108)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (= false true)))
 (let (($x108 (= $x107 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x84 (concat ?x79 (concat ?x78 ?x87)))))
 (let (($x97 (= ?x89 input.dst.llvm-%x)))
 (let (($x98 (= $x97 true)))
 (let (($x90 (= input.dst.llvm-%x ?x89)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x72)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x67 $x70)))
 (let (($x74 (and $x71 $x73)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x66 $x74)))
 (let (($x46 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x57)))))))
 (let (($x93 (and (and (and $x65 $x46) $x75) $x90)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x28 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x37 (= $x28 true)))
 (let (($x40 (= $x37 true)))
 (let (($x96 (and $x40 $x95)))
 (let (($x99 (and $x96 $x98)))
 (let (($x101 (and (not (bvsgt input.spec-%var-x-0 (_ bv0 32))) $x99)))
 (let (($x52 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x56 (= $x52 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x102 (and $x56 $x101)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x103 (and $x31 $x102)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x104 (and $x8 $x103)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x48 (=> true $x34)))
 (let (($x50 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x19 (= true $x50)))
 (let (($x12 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x44 (= false $x12)))
 (let (($x39 (and $x44 true)))
 (let (($x42 (and $x39 $x19)))
 (let (($x25 (and $x42 $x48)))
 (let (($x32 (and $x25 $x104)))
 (let (($x58 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x77 (and $x58 $x32)))
 (let (($x54 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x47 (=> true $x54)))
 (let (($x11 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x30 (= true $x11)))
 (let (($x21 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x13 (= false $x21)))
 (let (($x33 (and $x13 true)))
 (let (($x29 (and $x33 $x30)))
 (let (($x27 (and $x29 $x47)))
 (let (($x105 (and $x27 $x77)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x106 (and $x18 $x105)))
 (let (($x9 (=> $x106 $x108)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460617/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x9 (= false true)))
 (let (($x43 (= $x9 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x82 (concat ?x78 (concat ?x83 ?x80)))))
 (let (($x99 (= ?x89 input.dst.llvm-%x)))
 (let (($x101 (= $x99 true)))
 (let (($x90 (= input.dst.llvm-%x ?x89)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x72)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x67 $x70)))
 (let (($x74 (and $x71 $x73)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x66 $x74)))
 (let (($x16 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x61)))))))
 (let (($x95 (and (and (and $x51 $x16) $x75) $x90)))
 (let (($x96 (= $x95 true)))
 (let (($x97 (= $x96 true)))
 (let (($x100 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x17 (not $x100)))
 (let (($x28 (= $x17 true)))
 (let (($x37 (= $x28 true)))
 (let (($x98 (and $x37 $x97)))
 (let (($x102 (and $x98 $x101)))
 (let (($x55 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x103 (and $x55 $x102)))
 (let (($x49 (= $x55 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x104 (and $x49 $x103)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x32 (and $x36 $x104)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x77 (and $x35 $x32)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x34 (=> true $x20)))
 (let (($x39 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x50 (= true $x39)))
 (let (($x45 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x12 (= false $x45)))
 (let (($x44 (and $x12 true)))
 (let (($x19 (and $x44 $x50)))
 (let (($x48 (and $x19 $x34)))
 (let (($x105 (and $x48 $x77)))
 (let (($x38 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x106 (and $x38 $x105)))
 (let (($x15 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x54 (=> true $x15)))
 (let (($x22 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x11 (= true $x22)))
 (let (($x10 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x21 (= false $x10)))
 (let (($x13 (and $x21 true)))
 (let (($x30 (and $x13 $x11)))
 (let (($x47 (and $x30 $x54)))
 (let (($x107 (and $x47 $x106)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x108 (and $x7 $x107)))
 (let (($x14 (=> $x108 $x43)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x9 (= false true)))
 (let (($x43 (= $x9 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x82 (concat ?x78 (concat ?x83 ?x80)))))
 (let (($x99 (= ?x89 input.dst.llvm-%x)))
 (let (($x101 (= $x99 true)))
 (let (($x90 (= input.dst.llvm-%x ?x89)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x72)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x67 $x70)))
 (let (($x74 (and $x71 $x73)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x66 $x74)))
 (let (($x16 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x61)))))))
 (let (($x95 (and (and (and $x51 $x16) $x75) $x90)))
 (let (($x96 (= $x95 true)))
 (let (($x97 (= $x96 true)))
 (let (($x100 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x17 (not $x100)))
 (let (($x28 (= $x17 true)))
 (let (($x37 (= $x28 true)))
 (let (($x98 (and $x37 $x97)))
 (let (($x102 (and $x98 $x101)))
 (let (($x55 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x103 (and $x55 $x102)))
 (let (($x49 (= $x55 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x104 (and $x49 $x103)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x32 (and $x36 $x104)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x77 (and $x35 $x32)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x34 (=> true $x20)))
 (let (($x39 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x50 (= true $x39)))
 (let (($x45 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x12 (= false $x45)))
 (let (($x44 (and $x12 true)))
 (let (($x19 (and $x44 $x50)))
 (let (($x48 (and $x19 $x34)))
 (let (($x105 (and $x48 $x77)))
 (let (($x38 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x106 (and $x38 $x105)))
 (let (($x15 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x54 (=> true $x15)))
 (let (($x22 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x11 (= true $x22)))
 (let (($x10 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x21 (= false $x10)))
 (let (($x13 (and $x21 true)))
 (let (($x30 (and $x13 $x11)))
 (let (($x47 (and $x30 $x54)))
 (let (($x107 (and $x47 $x106)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x108 (and $x7 $x107)))
 (let (($x14 (=> $x108 $x43)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460617/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x106 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x107 (not $x106)))
 (let (($x108 (or $x106 $x107)))
 (let (($x9 (= $x108 true)))
 (let (($x43 (= $x9 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x95 (concat ?x87 (concat ?x83 ?x78)))))
 (let (($x97 (= ?x96 input.dst.llvm-%x)))
 (let (($x98 (= $x97 true)))
 (let (($x75 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x94 (= $x75 true)))
 (let (($x92 (= $x94 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x67)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x51 $x64)))
 (let (($x69 (and $x66 $x68)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x28 $x69)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x60)))))))
 (let (($x71 (and $x46 $x70)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x81 (and $x73 $x92)))
 (let (($x99 (and $x81 $x98)))
 (let (($x55 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x49 (= $x55 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x101 (and $x49 $x99)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x102 (and $x36 $x101)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x103 (and $x35 $x102)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x34 (=> true $x20)))
 (let (($x39 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x50 (= true $x39)))
 (let (($x45 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x12 (= false $x45)))
 (let (($x44 (and $x12 true)))
 (let (($x19 (and $x44 $x50)))
 (let (($x48 (and $x19 $x34)))
 (let (($x104 (and $x48 $x103)))
 (let (($x38 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x32 (and $x38 $x104)))
 (let (($x15 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x54 (=> true $x15)))
 (let (($x22 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x11 (= true $x22)))
 (let (($x10 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x21 (= false $x10)))
 (let (($x13 (and $x21 true)))
 (let (($x30 (and $x13 $x11)))
 (let (($x47 (and $x30 $x54)))
 (let (($x77 (and $x47 $x32)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x105 (and $x7 $x77)))
 (let (($x14 (=> $x105 $x43)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x106 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x107 (not $x106)))
 (let (($x108 (or $x106 $x107)))
 (let (($x9 (= $x108 true)))
 (let (($x43 (= $x9 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x95 (concat ?x87 (concat ?x83 ?x78)))))
 (let (($x97 (= ?x96 input.dst.llvm-%x)))
 (let (($x98 (= $x97 true)))
 (let (($x75 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x94 (= $x75 true)))
 (let (($x92 (= $x94 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x67)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x51 $x64)))
 (let (($x69 (and $x66 $x68)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x28 $x69)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x60)))))))
 (let (($x71 (and $x46 $x70)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x81 (and $x73 $x92)))
 (let (($x99 (and $x81 $x98)))
 (let (($x55 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x49 (= $x55 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x101 (and $x49 $x99)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x102 (and $x36 $x101)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x103 (and $x35 $x102)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x34 (=> true $x20)))
 (let (($x39 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x50 (= true $x39)))
 (let (($x45 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x12 (= false $x45)))
 (let (($x44 (and $x12 true)))
 (let (($x19 (and $x44 $x50)))
 (let (($x48 (and $x19 $x34)))
 (let (($x104 (and $x48 $x103)))
 (let (($x38 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x32 (and $x38 $x104)))
 (let (($x15 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x54 (=> true $x15)))
 (let (($x22 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x11 (= true $x22)))
 (let (($x10 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x21 (= false $x10)))
 (let (($x13 (and $x21 true)))
 (let (($x30 (and $x13 $x11)))
 (let (($x47 (and $x30 $x54)))
 (let (($x77 (and $x47 $x32)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x105 (and $x7 $x77)))
 (let (($x14 (=> $x105 $x43)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460617/query
