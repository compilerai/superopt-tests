==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791644/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x100 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x101 (not $x100)))
 (let (($x102 (or $x100 $x101)))
 (let (($x103 (= $x102 false)))
 (let (($x104 (= $x103 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x88 (concat ?x85 (concat ?x82 ?x80)))))
 (let (($x90 (= ?x89 input.dst.llvm-%x)))
 (let (($x91 (= $x90 true)))
 (let (($x75 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x76 (= $x75 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x68)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x63 $x66)))
 (let (($x70 (and $x67 $x69)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x49 $x70)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x56)))))))
 (let (($x72 (and $x62 $x71)))
 (let (($x73 (= $x72 true)))
 (let (($x77 (and $x73 $x76)))
 (let (($x92 (and $x77 $x91)))
 (let (($x36 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x9 (= $x36 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x93 (and $x9 $x92)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x94 (and $x10 $x93)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x95 (and $x6 $x94)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x5 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x38 (=> $x5 $x33)))
 (let (($x42 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x40 (= $x5 $x42)))
 (let (($x25 (= false false)))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let (($x35 (=> $x20 $x25)))
 (let (($x44 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x7 (= $x20 $x44)))
 (let (($x8 (and (and (and $x7 $x35) $x40) $x38)))
 (let (($x96 (and $x8 $x95)))
 (let (($x45 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x97 (and $x45 $x96)))
 (let (($x30 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x29 (=> $x5 $x30)))
 (let (($x15 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x46 (= $x5 $x15)))
 (let (($x26 (and (and (= $x20 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))) $x35) $x46)))
 (let (($x32 (and $x26 $x29)))
 (let (($x98 (and $x32 $x97)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x99 (and $x11 $x98)))
 (let (($x105 (=> $x99 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x100 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x101 (not $x100)))
 (let (($x102 (or $x100 $x101)))
 (let (($x103 (= $x102 false)))
 (let (($x104 (= $x103 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x88 (concat ?x85 (concat ?x82 ?x80)))))
 (let (($x90 (= ?x89 input.dst.llvm-%x)))
 (let (($x91 (= $x90 true)))
 (let (($x75 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x76 (= $x75 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x68)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x63 $x66)))
 (let (($x70 (and $x67 $x69)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x49 $x70)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x56)))))))
 (let (($x72 (and $x62 $x71)))
 (let (($x73 (= $x72 true)))
 (let (($x77 (and $x73 $x76)))
 (let (($x92 (and $x77 $x91)))
 (let (($x36 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x9 (= $x36 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x93 (and $x9 $x92)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x94 (and $x10 $x93)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x95 (and $x6 $x94)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x5 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x38 (=> $x5 $x33)))
 (let (($x42 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x40 (= $x5 $x42)))
 (let (($x25 (= false false)))
 (let (($x20 (= (_ bv1 32) (_ bv0 32))))
 (let (($x35 (=> $x20 $x25)))
 (let (($x44 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x7 (= $x20 $x44)))
 (let (($x8 (and (and (and $x7 $x35) $x40) $x38)))
 (let (($x96 (and $x8 $x95)))
 (let (($x45 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x97 (and $x45 $x96)))
 (let (($x30 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x29 (=> $x5 $x30)))
 (let (($x15 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x46 (= $x5 $x15)))
 (let (($x26 (and (and (= $x20 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))) $x35) $x46)))
 (let (($x32 (and $x26 $x29)))
 (let (($x98 (and $x32 $x97)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x99 (and $x11 $x98)))
 (let (($x105 (=> $x99 $x104)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-1.L2%3%d false)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.L2%3%d #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.L2%10%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-3.L2%10%bbentry.2 #b00000000000000000000000000000001)
(= input.spec-%tmpvar-3.L2%10%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.L2%10%bbentry #b00000000000000000000000000000010)
(= input.spec-%tmpvar-5.L2%10%bbentry.2 #b00000000000000000000000000000010)
(= input.spec-%tmpvar-5.L2%10%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-7.L2%16%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_7)
(function @fun_7
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.L2%3%d () Bool
    false)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv262144 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv262144 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv262147 32))
(define-fun input.spec-%tmpvar-1.L2%3%d () Bool false)
(define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791644/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x104 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x105 (not $x104)))
 (let (($x106 (or $x104 $x105)))
 (let (($x41 (not $x106)))
 (let (($x14 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x102 (not $x14)))
 (let (($x103 (or $x14 $x102)))
 (let (($x79 (or $x103 $x41)))
 (let (($x107 (= $x79 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x90 (concat ?x83 (concat ?x81 ?x84)))))
 (let (($x92 (= ?x91 input.dst.llvm-%x)))
 (let (($x93 (= $x92 true)))
 (let (($x76 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x77 (= $x76 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x69)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x64 $x67)))
 (let (($x71 (and $x68 $x70)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x61 $x71)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x58)))))))
 (let (($x73 (and $x63 $x72)))
 (let (($x74 (= $x73 true)))
 (let (($x78 (and $x74 $x77)))
 (let (($x94 (and $x78 $x93)))
 (let (($x37 (= $x14 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x95 (and $x37 $x94)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x96 (and $x17 $x95)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x97 (and $x19 $x96)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x35 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x16 (=> $x35 $x40)))
 (let (($x7 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x28 (= $x35 $x7)))
 (let (($x13 (= false false)))
 (let (($x21 (= (_ bv1 32) (_ bv0 32))))
 (let (($x25 (=> $x21 $x13)))
 (let (($x31 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x44 (= $x21 $x31)))
 (let (($x38 (and (and (and $x44 $x25) $x28) $x16)))
 (let (($x98 (and $x38 $x97)))
 (let (($x43 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x99 (and $x43 $x98)))
 (let (($x26 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x47 (=> $x35 $x26)))
 (let (($x24 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x5 (= $x35 $x24)))
 (let (($x30 (and (and (= $x21 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))) $x25) $x5)))
 (let (($x29 (and $x30 $x47)))
 (let (($x100 (and $x29 $x99)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x101 (and $x39 $x100)))
 (let (($x108 (=> $x101 $x107)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x104 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x105 (not $x104)))
 (let (($x106 (or $x104 $x105)))
 (let (($x41 (not $x106)))
 (let (($x14 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x102 (not $x14)))
 (let (($x103 (or $x14 $x102)))
 (let (($x79 (or $x103 $x41)))
 (let (($x107 (= $x79 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x90 (concat ?x83 (concat ?x81 ?x84)))))
 (let (($x92 (= ?x91 input.dst.llvm-%x)))
 (let (($x93 (= $x92 true)))
 (let (($x76 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x77 (= $x76 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x69)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x64 $x67)))
 (let (($x71 (and $x68 $x70)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x61 $x71)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x58)))))))
 (let (($x73 (and $x63 $x72)))
 (let (($x74 (= $x73 true)))
 (let (($x78 (and $x74 $x77)))
 (let (($x94 (and $x78 $x93)))
 (let (($x37 (= $x14 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x95 (and $x37 $x94)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x96 (and $x17 $x95)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x97 (and $x19 $x96)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x35 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x16 (=> $x35 $x40)))
 (let (($x7 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x28 (= $x35 $x7)))
 (let (($x13 (= false false)))
 (let (($x21 (= (_ bv1 32) (_ bv0 32))))
 (let (($x25 (=> $x21 $x13)))
 (let (($x31 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x44 (= $x21 $x31)))
 (let (($x38 (and (and (and $x44 $x25) $x28) $x16)))
 (let (($x98 (and $x38 $x97)))
 (let (($x43 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x99 (and $x43 $x98)))
 (let (($x26 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x47 (=> $x35 $x26)))
 (let (($x24 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x5 (= $x35 $x24)))
 (let (($x30 (and (and (= $x21 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))) $x25) $x5)))
 (let (($x29 (and $x30 $x47)))
 (let (($x100 (and $x29 $x99)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x101 (and $x39 $x100)))
 (let (($x108 (=> $x101 $x107)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791644/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (= false true)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x84 (concat ?x83 ?x90)))))
 (let (($x99 (= ?x92 input.dst.llvm-%x)))
 (let (($x100 (= $x99 true)))
 (let (($x93 (= input.dst.llvm-%x ?x92)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x75)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x70 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x69 $x77)))
 (let (($x19 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x51)))))))
 (let (($x96 (and (and (and $x68 $x19) $x78) $x93)))
 (let (($x97 (= $x96 true)))
 (let (($x16 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x6 (= $x16 true)))
 (let (($x98 (and $x6 $x97)))
 (let (($x101 (and $x98 $x100)))
 (let (($x103 (and (not (bvsgt input.spec-%var-x-0 (_ bv0 32))) $x101)))
 (let (($x57 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x8 (= $x57 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x104 (and $x8 $x103)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x105 (and $x56 $x104)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x106 (and $x52 $x105)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x33 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x54 (=> $x33 $x27)))
 (let (($x47 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x59 (= $x33 $x47)))
 (let (($x45 (= false false)))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let (($x31 (=> $x11 $x45)))
 (let (($x46 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x26 (= $x11 $x46)))
 (let (($x17 (and (and (and $x26 $x31) $x59) $x54)))
 (let (($x41 (and $x17 $x106)))
 (let (($x30 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x79 (and $x30 $x41)))
 (let (($x7 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x34 (=> $x33 $x7)))
 (let (($x35 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x24 (= $x33 $x35)))
 (let (($x28 (and (and (= $x11 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))) $x31) $x24)))
 (let (($x53 (and $x28 $x34)))
 (let (($x107 (and $x53 $x79)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x108 (and $x10 $x107)))
 (let (($x9 (=> $x108 $x109)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (= false true)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x84 (concat ?x83 ?x90)))))
 (let (($x99 (= ?x92 input.dst.llvm-%x)))
 (let (($x100 (= $x99 true)))
 (let (($x93 (= input.dst.llvm-%x ?x92)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x75)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x70 $x73)))
 (let (($x77 (and $x74 $x76)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x69 $x77)))
 (let (($x19 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x51)))))))
 (let (($x96 (and (and (and $x68 $x19) $x78) $x93)))
 (let (($x97 (= $x96 true)))
 (let (($x16 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x6 (= $x16 true)))
 (let (($x98 (and $x6 $x97)))
 (let (($x101 (and $x98 $x100)))
 (let (($x103 (and (not (bvsgt input.spec-%var-x-0 (_ bv0 32))) $x101)))
 (let (($x57 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x8 (= $x57 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x104 (and $x8 $x103)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x105 (and $x56 $x104)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x106 (and $x52 $x105)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x33 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x54 (=> $x33 $x27)))
 (let (($x47 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x59 (= $x33 $x47)))
 (let (($x45 (= false false)))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let (($x31 (=> $x11 $x45)))
 (let (($x46 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x26 (= $x11 $x46)))
 (let (($x17 (and (and (and $x26 $x31) $x59) $x54)))
 (let (($x41 (and $x17 $x106)))
 (let (($x30 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x79 (and $x30 $x41)))
 (let (($x7 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x34 (=> $x33 $x7)))
 (let (($x35 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x24 (= $x33 $x35)))
 (let (($x28 (and (and (= $x11 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))) $x31) $x24)))
 (let (($x53 (and $x28 $x34)))
 (let (($x107 (and $x53 $x79)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x108 (and $x10 $x107)))
 (let (($x9 (=> $x108 $x109)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791644/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x5 (= false true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x92 (concat ?x90 (concat ?x84 ?x91)))))
 (let (($x103 (= ?x93 input.dst.llvm-%x)))
 (let (($x104 (= $x103 true)))
 (let (($x96 (= input.dst.llvm-%x ?x93)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x76)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x71 $x74)))
 (let (($x78 (and $x75 $x77)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x70 $x78)))
 (let (($x67 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x99 (and (and (and $x69 $x67) $x95) $x96)))
 (let (($x100 (= $x99 true)))
 (let (($x42 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x16 (not $x42)))
 (let (($x6 (= $x16 true)))
 (let (($x101 (and $x6 $x100)))
 (let (($x105 (and $x101 $x104)))
 (let (($x57 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x106 (and $x57 $x105)))
 (let (($x8 (= $x57 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x41 (and $x8 $x106)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x79 (and $x56 $x41)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x107 (and $x52 $x79)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x18 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x25 (=> $x18 $x40)))
 (let (($x55 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x47 (= $x18 $x55)))
 (let (($x45 (= false false)))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let (($x31 (=> $x11 $x45)))
 (let (($x46 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x26 (= $x11 $x46)))
 (let (($x17 (and (and (and $x26 $x31) $x47) $x25)))
 (let (($x108 (and $x17 $x107)))
 (let (($x30 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x109 (and $x30 $x108)))
 (let (($x14 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x12 (=> $x18 $x14)))
 (let (($x33 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x35 (= $x18 $x33)))
 (let (($x34 (and (and (= $x11 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))) $x31) $x35)))
 (let (($x53 (and $x34 $x12)))
 (let (($x9 (and $x53 $x109)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x50 (and $x10 $x9)))
 (let (($x36 (=> $x50 $x5)))
 (not $x36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x5 (= false true)))
 (let ((?x91 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x92 (concat ?x90 (concat ?x84 ?x91)))))
 (let (($x103 (= ?x93 input.dst.llvm-%x)))
 (let (($x104 (= $x103 true)))
 (let (($x96 (= input.dst.llvm-%x ?x93)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x76)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x71 $x74)))
 (let (($x78 (and $x75 $x77)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x70 $x78)))
 (let (($x67 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x99 (and (and (and $x69 $x67) $x95) $x96)))
 (let (($x100 (= $x99 true)))
 (let (($x42 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x16 (not $x42)))
 (let (($x6 (= $x16 true)))
 (let (($x101 (and $x6 $x100)))
 (let (($x105 (and $x101 $x104)))
 (let (($x57 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x106 (and $x57 $x105)))
 (let (($x8 (= $x57 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x41 (and $x8 $x106)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x79 (and $x56 $x41)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x107 (and $x52 $x79)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x18 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x25 (=> $x18 $x40)))
 (let (($x55 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x47 (= $x18 $x55)))
 (let (($x45 (= false false)))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let (($x31 (=> $x11 $x45)))
 (let (($x46 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x26 (= $x11 $x46)))
 (let (($x17 (and (and (and $x26 $x31) $x47) $x25)))
 (let (($x108 (and $x17 $x107)))
 (let (($x30 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x109 (and $x30 $x108)))
 (let (($x14 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x12 (=> $x18 $x14)))
 (let (($x33 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x35 (= $x18 $x33)))
 (let (($x34 (and (and (= $x11 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))) $x31) $x35)))
 (let (($x53 (and $x34 $x12)))
 (let (($x9 (and $x53 $x109)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x50 (and $x10 $x9)))
 (let (($x36 (=> $x50 $x5)))
 (not $x36)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791644/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x9 (not $x109)))
 (let (($x50 (or $x109 $x9)))
 (let (($x5 (= $x50 true)))
 (let ((?x83 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x96 (concat ?x80 (concat ?x81 ?x83)))))
 (let (($x100 (= ?x99 input.dst.llvm-%x)))
 (let (($x101 (= $x100 true)))
 (let (($x95 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x98 (= $x95 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x72)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x67 $x70)))
 (let (($x74 (and $x71 $x73)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x6 $x74)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x51)))))))
 (let (($x76 (and $x69 $x75)))
 (let (($x77 (= $x76 true)))
 (let (($x87 (and $x77 $x98)))
 (let (($x103 (and $x87 $x101)))
 (let (($x57 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x8 (= $x57 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x104 (and $x8 $x103)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x105 (and $x56 $x104)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x106 (and $x52 $x105)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x7 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x59 (=> $x7 $x54)))
 (let (($x27 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x55 (= $x7 $x27)))
 (let (($x45 (= false false)))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let (($x31 (=> $x11 $x45)))
 (let (($x46 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x26 (= $x11 $x46)))
 (let (($x17 (and (and (and $x26 $x31) $x55) $x59)))
 (let (($x41 (and $x17 $x106)))
 (let (($x30 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x79 (and $x30 $x41)))
 (let (($x24 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x28 (=> $x7 $x24)))
 (let (($x18 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x33 (= $x7 $x18)))
 (let (($x12 (and (and (= $x11 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))) $x31) $x33)))
 (let (($x53 (and $x12 $x28)))
 (let (($x107 (and $x53 $x79)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x108 (and $x10 $x107)))
 (let (($x36 (=> $x108 $x5)))
 (not $x36))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x9 (not $x109)))
 (let (($x50 (or $x109 $x9)))
 (let (($x5 (= $x50 true)))
 (let ((?x83 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x96 (concat ?x80 (concat ?x81 ?x83)))))
 (let (($x100 (= ?x99 input.dst.llvm-%x)))
 (let (($x101 (= $x100 true)))
 (let (($x95 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x98 (= $x95 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x72)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x67 $x70)))
 (let (($x74 (and $x71 $x73)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x6 $x74)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x51)))))))
 (let (($x76 (and $x69 $x75)))
 (let (($x77 (= $x76 true)))
 (let (($x87 (and $x77 $x98)))
 (let (($x103 (and $x87 $x101)))
 (let (($x57 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x8 (= $x57 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x104 (and $x8 $x103)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x105 (and $x56 $x104)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x106 (and $x52 $x105)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x7 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x59 (=> $x7 $x54)))
 (let (($x27 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x55 (= $x7 $x27)))
 (let (($x45 (= false false)))
 (let (($x11 (= (_ bv1 32) (_ bv0 32))))
 (let (($x31 (=> $x11 $x45)))
 (let (($x46 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x26 (= $x11 $x46)))
 (let (($x17 (and (and (and $x26 $x31) $x55) $x59)))
 (let (($x41 (and $x17 $x106)))
 (let (($x30 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x79 (and $x30 $x41)))
 (let (($x24 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x28 (=> $x7 $x24)))
 (let (($x18 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x33 (= $x7 $x18)))
 (let (($x12 (and (and (= $x11 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))) $x31) $x33)))
 (let (($x53 (and $x12 $x28)))
 (let (($x107 (and $x53 $x79)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x108 (and $x10 $x107)))
 (let (($x36 (=> $x108 $x5)))
 (not $x36))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791644/query
