==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x11 $x12)))
 (let (($x19 (and $x6 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x11 $x12)))
 (let (($x19 (and $x6 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888377/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x89 (not $x88)))
 (let (($x90 (or $x88 $x89)))
 (let (($x91 (= $x90 false)))
 (let (($x92 (= $x91 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x69 ?x67)))))
 (let (($x77 (= ?x76 input.dst.llvm-%x)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x59 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x41 $x49)))
 (let (($x53 (and $x50 $x52)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x36 $x53)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x63 (and $x57 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x10 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x7 (= $x10 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x81 (and $x7 $x80)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x82 (and $x15 $x81)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x83 (and $x8 $x82)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x26 (=> true $x40)))
 (let (($x17 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x13 (= true $x17)))
 (let (($x30 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x27 (= false $x30)))
 (let (($x20 (and $x27 true)))
 (let (($x25 (and $x20 $x13)))
 (let (($x35 (and $x25 $x26)))
 (let (($x84 (and $x35 $x83)))
 (let (($x46 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x85 (and $x46 $x84)))
 (let (($x43 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x39 (=> true $x43)))
 (let (($x14 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x37 (= true $x14)))
 (let (($x6 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x44 (= false $x6)))
 (let (($x45 (and $x44 true)))
 (let (($x47 (and $x45 $x37)))
 (let (($x18 (and $x47 $x39)))
 (let (($x86 (and $x18 $x85)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x87 (and $x19 $x86)))
 (let (($x93 (=> $x87 $x92)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x89 (not $x88)))
 (let (($x90 (or $x88 $x89)))
 (let (($x91 (= $x90 false)))
 (let (($x92 (= $x91 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x69 ?x67)))))
 (let (($x77 (= ?x76 input.dst.llvm-%x)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x59 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x41 $x49)))
 (let (($x53 (and $x50 $x52)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x36 $x53)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x63 (and $x57 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x10 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x7 (= $x10 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x81 (and $x7 $x80)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x82 (and $x15 $x81)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x83 (and $x8 $x82)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x26 (=> true $x40)))
 (let (($x17 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x13 (= true $x17)))
 (let (($x30 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x27 (= false $x30)))
 (let (($x20 (and $x27 true)))
 (let (($x25 (and $x20 $x13)))
 (let (($x35 (and $x25 $x26)))
 (let (($x84 (and $x35 $x83)))
 (let (($x46 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x85 (and $x46 $x84)))
 (let (($x43 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x39 (=> true $x43)))
 (let (($x14 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x37 (= true $x14)))
 (let (($x6 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x44 (= false $x6)))
 (let (($x45 (and $x44 true)))
 (let (($x47 (and $x45 $x37)))
 (let (($x18 (and $x47 $x39)))
 (let (($x86 (and $x18 $x85)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x87 (and $x19 $x86)))
 (let (($x93 (=> $x87 $x92)))
 (not $x93)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-1.L1%3%d false)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-0.L1%3%d #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.L1%10%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-3.L1%10%bbentry.2 #b00000000000000000000000000000001)
(= input.spec-%tmpvar-3.L1%10%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.L1%10%bbentry #b00000000000000000000000000000010)
(= input.spec-%tmpvar-5.L1%10%bbentry.2 #b00000000000000000000000000000010)
(= input.spec-%tmpvar-5.L1%10%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-7.L1%16%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_7)
(function @fun_7
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.L1%3%d () Bool
    false)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%tmpvar-1.L1%3%d () Bool false)
(define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32) (_ bv2048 32))
(define-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32) (_ bv16 32))
(define-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888377/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x93 (not $x92)))
 (let (($x94 (or $x92 $x93)))
 (let (($x65 (not $x94)))
 (let (($x10 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x90 (not $x10)))
 (let (($x91 (or $x10 $x90)))
 (let (($x66 (or $x91 $x65)))
 (let (($x95 (= $x66 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x77 (concat ?x70 (concat ?x68 ?x71)))))
 (let (($x79 (= ?x78 input.dst.llvm-%x)))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let (($x59 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x41 $x49)))
 (let (($x53 (and $x50 $x52)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x36 $x53)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x63 (and $x57 $x62)))
 (let (($x82 (and $x63 $x81)))
 (let (($x7 (= $x10 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x83 (and $x7 $x82)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x84 (and $x15 $x83)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x85 (and $x8 $x84)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x26 (=> true $x40)))
 (let (($x13 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x25 (= true $x13)))
 (let (($x27 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x20 (= false $x27)))
 (let (($x17 (and $x20 true)))
 (let (($x24 (and $x17 $x25)))
 (let (($x35 (and $x24 $x26)))
 (let (($x86 (and $x35 $x85)))
 (let (($x46 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x87 (and $x46 $x86)))
 (let (($x43 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x39 (=> true $x43)))
 (let (($x37 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x47 (= true $x37)))
 (let (($x44 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x45 (= false $x44)))
 (let (($x28 (and $x45 true)))
 (let (($x42 (and $x28 $x47)))
 (let (($x18 (and $x42 $x39)))
 (let (($x88 (and $x18 $x87)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x89 (and $x19 $x88)))
 (let (($x97 (=> $x89 $x96)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x93 (not $x92)))
 (let (($x94 (or $x92 $x93)))
 (let (($x65 (not $x94)))
 (let (($x10 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x90 (not $x10)))
 (let (($x91 (or $x10 $x90)))
 (let (($x66 (or $x91 $x65)))
 (let (($x95 (= $x66 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x77 (concat ?x70 (concat ?x68 ?x71)))))
 (let (($x79 (= ?x78 input.dst.llvm-%x)))
 (let (($x80 (= $x79 true)))
 (let (($x81 (= $x80 true)))
 (let (($x59 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x41 $x49)))
 (let (($x53 (and $x50 $x52)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x36 $x53)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x63 (and $x57 $x62)))
 (let (($x82 (and $x63 $x81)))
 (let (($x7 (= $x10 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x83 (and $x7 $x82)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x84 (and $x15 $x83)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x85 (and $x8 $x84)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x26 (=> true $x40)))
 (let (($x13 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x25 (= true $x13)))
 (let (($x27 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x20 (= false $x27)))
 (let (($x17 (and $x20 true)))
 (let (($x24 (and $x17 $x25)))
 (let (($x35 (and $x24 $x26)))
 (let (($x86 (and $x35 $x85)))
 (let (($x46 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x87 (and $x46 $x86)))
 (let (($x43 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x39 (=> true $x43)))
 (let (($x37 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x47 (= true $x37)))
 (let (($x44 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x45 (= false $x44)))
 (let (($x28 (and $x45 true)))
 (let (($x42 (and $x28 $x47)))
 (let (($x18 (and $x42 $x39)))
 (let (($x88 (and $x18 $x87)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x89 (and $x19 $x88)))
 (let (($x97 (=> $x89 $x96)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888377/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x96 (= false true)))
 (let (($x97 (= $x96 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x71 (concat ?x70 (concat ?x76 ?x63)))))
 (let (($x85 (= ?x69 input.dst.llvm-%x)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x73 (= input.dst.llvm-%x ?x69)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x43 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x5 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and (and (and $x51 $x5) $x59) $x73)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x34 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x12 (= $x34 true)))
 (let (($x46 (= $x12 true)))
 (let (($x38 (= $x46 true)))
 (let (($x84 (and $x38 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x90 (and (not (bvsgt input.spec-%var-x-0 (_ bv0 32))) $x88)))
 (let (($x35 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x22 (= $x35 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x91 (and $x22 $x90)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x92 (and $x8 $x91)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x93 (and $x6 $x92)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x24 (=> true $x7)))
 (let (($x40 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x14 (= true $x40)))
 (let (($x31 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x27 (= false $x31)))
 (let (($x20 (and $x27 true)))
 (let (($x9 (and $x20 $x14)))
 (let (($x30 (and $x9 $x24)))
 (let (($x94 (and $x30 $x93)))
 (let (($x54 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x65 (and $x54 $x94)))
 (let (($x47 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x29 (=> true $x47)))
 (let (($x26 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x52 (= true $x26)))
 (let (($x44 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x45 (= false $x44)))
 (let (($x17 (and $x45 true)))
 (let (($x28 (and $x17 $x52)))
 (let (($x53 (and $x28 $x29)))
 (let (($x66 (and $x53 $x65)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x95 (and $x21 $x66)))
 (let (($x98 (=> $x95 $x97)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x96 (= false true)))
 (let (($x97 (= $x96 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x71 (concat ?x70 (concat ?x76 ?x63)))))
 (let (($x85 (= ?x69 input.dst.llvm-%x)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x73 (= input.dst.llvm-%x ?x69)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x43 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x5 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and (and (and $x51 $x5) $x59) $x73)))
 (let (($x81 (= $x80 true)))
 (let (($x82 (= $x81 true)))
 (let (($x83 (= $x82 true)))
 (let (($x34 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x12 (= $x34 true)))
 (let (($x46 (= $x12 true)))
 (let (($x38 (= $x46 true)))
 (let (($x84 (and $x38 $x83)))
 (let (($x88 (and $x84 $x87)))
 (let (($x90 (and (not (bvsgt input.spec-%var-x-0 (_ bv0 32))) $x88)))
 (let (($x35 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x22 (= $x35 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x91 (and $x22 $x90)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x92 (and $x8 $x91)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x93 (and $x6 $x92)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x24 (=> true $x7)))
 (let (($x40 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x14 (= true $x40)))
 (let (($x31 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x27 (= false $x31)))
 (let (($x20 (and $x27 true)))
 (let (($x9 (and $x20 $x14)))
 (let (($x30 (and $x9 $x24)))
 (let (($x94 (and $x30 $x93)))
 (let (($x54 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x65 (and $x54 $x94)))
 (let (($x47 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x29 (=> true $x47)))
 (let (($x26 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x52 (= true $x26)))
 (let (($x44 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x45 (= false $x44)))
 (let (($x17 (and $x45 true)))
 (let (($x28 (and $x17 $x52)))
 (let (($x53 (and $x28 $x29)))
 (let (($x66 (and $x53 $x65)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x95 (and $x21 $x66)))
 (let (($x98 (=> $x95 $x97)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888377/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x98 (= false true)))
 (let (($x74 (= $x98 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x72 (concat ?x76 (concat ?x67 ?x68)))))
 (let (($x87 (= ?x69 input.dst.llvm-%x)))
 (let (($x88 (= $x87 true)))
 (let (($x90 (= $x88 true)))
 (let (($x73 (= input.dst.llvm-%x ?x69)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x36 $x25)))
 (let (($x58 (and $x55 $x57)))
 (let (($x5 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and (and (and $x51 $x5) $x58) $x73)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x11 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x34 (not $x11)))
 (let (($x12 (= $x34 true)))
 (let (($x46 (= $x12 true)))
 (let (($x38 (= $x46 true)))
 (let (($x86 (and $x38 $x85)))
 (let (($x91 (and $x86 $x90)))
 (let (($x35 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x92 (and $x35 $x91)))
 (let (($x22 (= $x35 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x93 (and $x22 $x92)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x94 (and $x8 $x93)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x65 (and $x6 $x94)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x24 (=> true $x7)))
 (let (($x14 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x9 (= true $x14)))
 (let (($x27 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x20 (= false $x27)))
 (let (($x40 (and $x20 true)))
 (let (($x16 (and $x40 $x9)))
 (let (($x30 (and $x16 $x24)))
 (let (($x66 (and $x30 $x65)))
 (let (($x54 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x95 (and $x54 $x66)))
 (let (($x47 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x29 (=> true $x47)))
 (let (($x52 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x28 (= true $x52)))
 (let (($x45 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x17 (= false $x45)))
 (let (($x13 (and $x17 true)))
 (let (($x15 (and $x13 $x28)))
 (let (($x53 (and $x15 $x29)))
 (let (($x96 (and $x53 $x95)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x97 (and $x32 $x96)))
 (let (($x61 (=> $x97 $x74)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x98 (= false true)))
 (let (($x74 (= $x98 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x72 (concat ?x76 (concat ?x67 ?x68)))))
 (let (($x87 (= ?x69 input.dst.llvm-%x)))
 (let (($x88 (= $x87 true)))
 (let (($x90 (= $x88 true)))
 (let (($x73 (= input.dst.llvm-%x ?x69)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x56)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x36 $x25)))
 (let (($x58 (and $x55 $x57)))
 (let (($x5 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and (and (and $x51 $x5) $x58) $x73)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x85 (= $x84 true)))
 (let (($x11 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x34 (not $x11)))
 (let (($x12 (= $x34 true)))
 (let (($x46 (= $x12 true)))
 (let (($x38 (= $x46 true)))
 (let (($x86 (and $x38 $x85)))
 (let (($x91 (and $x86 $x90)))
 (let (($x35 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x92 (and $x35 $x91)))
 (let (($x22 (= $x35 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x93 (and $x22 $x92)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x94 (and $x8 $x93)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x65 (and $x6 $x94)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x24 (=> true $x7)))
 (let (($x14 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x9 (= true $x14)))
 (let (($x27 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x20 (= false $x27)))
 (let (($x40 (and $x20 true)))
 (let (($x16 (and $x40 $x9)))
 (let (($x30 (and $x16 $x24)))
 (let (($x66 (and $x30 $x65)))
 (let (($x54 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x95 (and $x54 $x66)))
 (let (($x47 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x29 (=> true $x47)))
 (let (($x52 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x28 (= true $x52)))
 (let (($x45 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x17 (= false $x45)))
 (let (($x13 (and $x17 true)))
 (let (($x15 (and $x13 $x28)))
 (let (($x53 (and $x15 $x29)))
 (let (($x96 (and $x53 $x95)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x97 (and $x32 $x96)))
 (let (($x61 (=> $x97 $x74)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888377/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x66 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x95 (not $x66)))
 (let (($x96 (or $x66 $x95)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x82 (concat ?x63 (concat ?x67 ?x76)))))
 (let (($x84 (= ?x83 input.dst.llvm-%x)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x56 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x81 (= $x58 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x5)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x46 $x49)))
 (let (($x78 (and $x51 $x80)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x34 $x78)))
 (let (($x43 (= $x36 true)))
 (let (($x39 (= $x43 true)))
 (let (($x25 (= $x39 true)))
 (let (($x59 (and $x25 $x81)))
 (let (($x87 (and $x59 $x86)))
 (let (($x35 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x22 (= $x35 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x88 (and $x22 $x87)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x90 (and $x8 $x88)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x91 (and $x6 $x90)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x24 (=> true $x7)))
 (let (($x9 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x16 (= true $x9)))
 (let (($x20 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x40 (= false $x20)))
 (let (($x14 (and $x40 true)))
 (let (($x31 (and $x14 $x16)))
 (let (($x30 (and $x31 $x24)))
 (let (($x92 (and $x30 $x91)))
 (let (($x54 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x93 (and $x54 $x92)))
 (let (($x47 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x29 (=> true $x47)))
 (let (($x28 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x15 (= true $x28)))
 (let (($x17 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x13 (= false $x17)))
 (let (($x26 (and $x13 true)))
 (let (($x33 (and $x26 $x15)))
 (let (($x53 (and $x33 $x29)))
 (let (($x94 (and $x53 $x93)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x65 (and $x32 $x94)))
 (let (($x74 (=> $x65 $x98)))
 (not $x74)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L1%16%bbentry () (_ BitVec 32))
(assert
 (let (($x66 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x95 (not $x66)))
 (let (($x96 (or $x66 $x95)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x82 (concat ?x63 (concat ?x67 ?x76)))))
 (let (($x84 (= ?x83 input.dst.llvm-%x)))
 (let (($x85 (= $x84 true)))
 (let (($x86 (= $x85 true)))
 (let (($x56 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x81 (= $x58 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x5)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x46 $x49)))
 (let (($x78 (and $x51 $x80)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x34 $x78)))
 (let (($x43 (= $x36 true)))
 (let (($x39 (= $x43 true)))
 (let (($x25 (= $x39 true)))
 (let (($x59 (and $x25 $x81)))
 (let (($x87 (and $x59 $x86)))
 (let (($x35 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x22 (= $x35 input.spec-%tmpvar-1.L1%3%d)))
 (let (($x88 (and $x22 $x87)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x90 (and $x8 $x88)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-2.L1%10%bbentry)))
 (let (($x91 (and $x6 $x90)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L1%10%bbentry.2)))
 (let (($x24 (=> true $x7)))
 (let (($x9 (bvuge input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x16 (= true $x9)))
 (let (($x20 (= input.spec-%tmpvar-3.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x40 (= false $x20)))
 (let (($x14 (and $x40 true)))
 (let (($x31 (and $x14 $x16)))
 (let (($x30 (and $x31 $x24)))
 (let (($x92 (and $x30 $x91)))
 (let (($x54 (= (_ bv2 32) input.spec-%tmpvar-4.L1%10%bbentry)))
 (let (($x93 (and $x54 $x92)))
 (let (($x47 (= (_ bv2 32) input.spec-%tmpvar-5.L1%10%bbentry.2)))
 (let (($x29 (=> true $x47)))
 (let (($x28 (bvuge input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv1 32))))
 (let (($x15 (= true $x28)))
 (let (($x17 (= input.spec-%tmpvar-5.L1%10%bbentry.0 (_ bv0 32))))
 (let (($x13 (= false $x17)))
 (let (($x26 (and $x13 true)))
 (let (($x33 (and $x26 $x15)))
 (let (($x53 (and $x33 $x29)))
 (let (($x94 (and $x53 $x93)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-7.L1%16%bbentry)))
 (let (($x65 (and $x32 $x94)))
 (let (($x74 (=> $x65 $x98)))
 (not $x74)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888377/query
