=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%7%bbentry L2%8%d L2%9%bbentry L2%10%bbentry L2%21%d L2%22%bbentry L2%25%bbentry L2%28%d L2%29%bbentry L2%32%bbentry L2%35%bbentry L2%37%bbentry E0%0%d
=Edges:
L0%0%d => L2%7%bbentry
L2%7%bbentry => L2%8%d
L2%8%d => L2%10%bbentry
L2%8%d => L2%9%bbentry
L2%9%bbentry => L2%37%bbentry
L2%10%bbentry => L2%21%d
L2%21%d => L2%25%bbentry
L2%21%d => L2%22%bbentry
L2%22%bbentry => L2%35%bbentry
L2%25%bbentry => L2%28%d
L2%28%d => L2%32%bbentry
L2%28%d => L2%29%bbentry
L2%29%bbentry => L2%35%bbentry
L2%35%bbentry => L2%37%bbentry
L2%37%bbentry => E0%0%d
L2%32%bbentry => L2%7%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%8%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%10%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%21%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%22%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%25%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%28%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%29%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%32%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%35%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L2%37%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-n-1 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-24.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => L2%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-n-0.L2%7%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L2%7%bbentry => L2%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L2%8%d
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : input.spec-%var-n-0.L2%7%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_bvsgt)
tfg_edge_comment end

=Edge: L2%8%d => L2%10%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L2%8%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_false_split
tfg_edge_comment end

=Edge: L2%8%d => L2%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L2%8%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_true_split
tfg_edge_comment end

=Edge: L2%9%bbentry => L2%37%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-19.L2%37%bbentry
1 : input.spec-%var-r-0.L2%7%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*ite_true_merge)
tfg_edge_comment end

=Edge: L2%10%bbentry => L2%21%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-1.L2%21%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-10.L2%21%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : input.spec-%var-i-0.L2%7%bbentry : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : map_set(2, 3, 6) : MAP[BV:32 -> BV:32]
8 : 10 { 0xa +1.119e129 } : BV:32
9 : input.spec-%var-r-0.L2%7%bbentry : BV:32
10 : bvadd(9, 4) : BV:32
11 : map_set(7, 8, 10) : MAP[BV:32 -> BV:32]
12 : map_get(11, 8) : SUM[UNIT,BV:32]
=spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-4.L2%21%d
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-5.L2%21%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : input.spec-%var-i-0.L2%7%bbentry : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : map_set(2, 3, 6) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=spec-%tmpvar-7.L2%21%d
1 : input.spec-%var-r-0.L2%7%bbentry : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-8.L2%21%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : input.spec-%var-i-0.L2%7%bbentry : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : map_set(2, 3, 6) : MAP[BV:32 -> BV:32]
8 : 10 { 0xa +1.119e129 } : BV:32
9 : input.spec-%var-r-0.L2%7%bbentry : BV:32
10 : bvadd(9, 4) : BV:32
11 : map_set(7, 8, 10) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=spec-%var-m1-0.L2%21%d
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : input.spec-%var-i-0.L2%7%bbentry : BV:32
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : map_set(2, 3, 6) : MAP[BV:32 -> BV:32]
8 : 10 { 0xa +1.119e129 } : BV:32
9 : input.spec-%var-r-0.L2%7%bbentry : BV:32
10 : bvadd(9, 4) : BV:32
11 : map_set(7, 8, 10) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((((bb_entry*ctor_map)*ctor_bv)*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_map_set*ctor_bv))*intrinsic_app_bvadd)*(((intrinsic_app_map_set*letin_def)*ctor_bv)*intrinsic_app_map_get))
tfg_edge_comment end

=Edge: L2%21%d => L2%25%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:20:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%21%d => L2%22%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:17:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%22%bbentry => L2%35%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-0.L2%35%bbentry
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%25%bbentry => L2%28%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=spec-%tmpvar-13.L2%28%d
1 : input.spec-%var-m1-0.L2%21%d : MAP[BV:32 -> BV:32]
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=spec-%var-y2-0.L2%28%d
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%28%d => L2%32%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:27:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%28%d => L2%29%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:24:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%29%bbentry => L2%35%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u2-0.L2%35%bbentry
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%35%bbentry => L2%37%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-19.L2%37%bbentry
1 : input.spec-%tmpvar-17.L2%35%bbentry : BV:32
=spec-%tmpvar-18.L2%37%bbentry
1 : input.spec-%tmpvar-17.L2%35%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*letin_body)*ite_false_merge)
tfg_edge_comment end

=Edge: L2%37%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-19.L2%37%bbentry : BV:32
=spec-%tmpvar-23.E0%0%d
1 : input.spec-%tmpvar-19.L2%37%bbentry : BV:32
=spec-%tmpvar-24.E0%0%d
1 : input.spec-%tmpvar-19.L2%37%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L2%32%bbentry => L2%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L2%7%bbentry
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-n-0.L2%7%bbentry
1 : input.spec-%var-n-0.L2%7%bbentry : BV:32
=spec-%var-r-0.L2%7%bbentry
1 : input.spec-%var-y2-0.L2%28%d : BV:32
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-y1-0.L2%7%bbentry
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-n-1
1 : input.spec-%var-n-1 : BV:32
=Loc 35 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 36 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 37 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%8%d
1 : input.spec-%tmpvar-0.L2%8%d : BOOL
=Loc 38 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L2%21%d
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L2%28%d
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
=Loc 40 in src.spec.foo.
REGMEM
spec-%var-i-0.L2%7%bbentry
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%var-n-0.L2%7%bbentry
1 : input.spec-%var-n-0.L2%7%bbentry : BV:32
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-19.L2%37%bbentry
1 : input.spec-%tmpvar-19.L2%37%bbentry : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-20.E0%0%d : BV:32
=Loc 44 in src.spec.foo.
REGMEM
spec-%tmpvar-23.E0%0%d
1 : input.spec-%tmpvar-23.E0%0%d : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-24.E0%0%d
1 : input.spec-%tmpvar-24.E0%0%d : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L2%28%d
1 : input.spec-%tmpvar-12.L2%28%d : BV:32
=Loc 47 in src.spec.foo.
REGMEM
spec-%var-m1-0.L2%21%d
1 : input.spec-%var-m1-0.L2%21%d : MAP[BV:32 -> BV:32]
=Loc 48 in src.spec.foo.
REGMEM
spec-%var-y2-0.L2%28%d
1 : input.spec-%var-y2-0.L2%28%d : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L2%21%d
1 : input.spec-%tmpvar-1.L2%21%d : MAP[BV:32 -> BV:32]
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L2%21%d
1 : input.spec-%tmpvar-2.L2%21%d : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L2%21%d
1 : input.spec-%tmpvar-3.L2%21%d : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L2%21%d
1 : input.spec-%tmpvar-4.L2%21%d : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L2%21%d
1 : input.spec-%tmpvar-5.L2%21%d : MAP[BV:32 -> BV:32]
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L2%21%d
1 : input.spec-%tmpvar-6.L2%21%d : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L2%21%d
1 : input.spec-%tmpvar-7.L2%21%d : BV:32
=Loc 56 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L2%21%d
1 : input.spec-%tmpvar-8.L2%21%d : MAP[BV:32 -> BV:32]
=Loc 57 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L2%21%d
1 : input.spec-%tmpvar-9.L2%21%d : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%var-r-0.L2%7%bbentry
1 : input.spec-%var-r-0.L2%7%bbentry : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-21.L2%7%bbentry
1 : input.spec-%tmpvar-21.L2%7%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-22.L2%7%bbentry
1 : input.spec-%tmpvar-22.L2%7%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
=Loc 62 in src.spec.foo.
REGMEM
spec-%var-y1-0.L2%7%bbentry
1 : input.spec-%var-y1-0.L2%7%bbentry : BV:32
=Loc 63 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L2%35%bbentry
1 : input.spec-%tmpvar-11.L2%35%bbentry : BV:32
=Loc 64 in src.spec.foo.
REGMEM
spec-%tmpvar-17.L2%35%bbentry
1 : input.spec-%tmpvar-17.L2%35%bbentry : BV:32
=Loc 65 in src.spec.foo.
REGMEM
spec-%var-u-0.L2%35%bbentry
1 : input.spec-%var-u-0.L2%35%bbentry : UNIT
=Loc 66 in src.spec.foo.
REGMEM
spec-%tmpvar-14.L2%35%bbentry
1 : input.spec-%tmpvar-14.L2%35%bbentry : BV:32
=Loc 67 in src.spec.foo.
REGMEM
spec-%tmpvar-16.L2%35%bbentry
1 : input.spec-%tmpvar-16.L2%35%bbentry : BV:32
=Loc 68 in src.spec.foo.
REGMEM
spec-%var-u2-0.L2%35%bbentry
1 : input.spec-%var-u2-0.L2%35%bbentry : UNIT
=Loc 69 in src.spec.foo.
REGMEM
spec-%tmpvar-18.L2%37%bbentry
1 : input.spec-%tmpvar-18.L2%37%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L2%7%bbentry
40, 41, 58, 
=live locs at L2%8%d
37, 40, 41, 58, 
=live locs at L2%9%bbentry
58, 
=live locs at L2%10%bbentry
40, 41, 58, 
=live locs at L2%21%d
38, 41, 47, 
=live locs at L2%22%bbentry

=live locs at L2%25%bbentry
38, 41, 47, 
=live locs at L2%28%d
39, 41, 48, 
=live locs at L2%29%bbentry

=live locs at L2%32%bbentry
39, 41, 48, 
=live locs at L2%35%bbentry
64, 
=live locs at L2%37%bbentry
42, 
=live locs at E0%0%d
45[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 35, 36
=loc definedness at L2%7%bbentry
1, 35, 36, 40, 41, 58, 59, 60, 61
=loc definedness at L2%8%d
1, 35, 36, 37, 40, 41, 58, 59, 60, 61
=loc definedness at L2%9%bbentry
1, 35, 36, 37, 40, 41, 58, 59, 60, 61
=loc definedness at L2%10%bbentry
1, 35, 36, 37, 40, 41, 58, 59, 60, 61
=loc definedness at L2%21%d
1, 35, 36, 37, 38, 40, 41, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
=loc definedness at L2%22%bbentry
1, 35, 36, 37, 38, 40, 41, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
=loc definedness at L2%25%bbentry
1, 35, 36, 37, 38, 40, 41, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
=loc definedness at L2%28%d
1, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
=loc definedness at L2%29%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
=loc definedness at L2%32%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61
=loc definedness at L2%35%bbentry
1, 35, 36, 37, 38, 40, 41, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64
=loc definedness at L2%37%bbentry
1, 35, 36, 37, 40, 41, 42, 58, 59, 60, 61
=loc definedness at E0%0%d
1, 35, 36, 37, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L2%7%bbentry
40, 41, 58
=branch affecting variable locs at L2%8%d
37, 40, 41, 58
=branch affecting variable locs at L2%9%bbentry

=branch affecting variable locs at L2%10%bbentry
40, 41, 58
=branch affecting variable locs at L2%21%d
38, 41, 47
=branch affecting variable locs at L2%22%bbentry

=branch affecting variable locs at L2%25%bbentry
38, 41, 47
=branch affecting variable locs at L2%28%d
39, 41, 48
=branch affecting variable locs at L2%29%bbentry

=branch affecting variable locs at L2%32%bbentry
39, 41, 48
=branch affecting variable locs at L2%35%bbentry

=branch affecting variable locs at L2%37%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 40 {input.spec-%var-i-0.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 41 {input.spec-%var-n-0.L2%7%bbentry }
1 : input.spec-%var-n-1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 58 {input.spec-%var-r-0.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 59 {input.spec-%tmpvar-21.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 60 {input.spec-%tmpvar-22.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry for loc_id 61 {input.src.spec-ghostvar.itervar.1.L2%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%8%d
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%8%d for loc_id 37 {input.spec-%tmpvar-0.L2%8%d }
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : input.spec-%var-n-0.L2%7%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%8%d done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%d=>L2%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%37%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%37%bbentry for loc_id 42 {input.spec-%tmpvar-19.L2%37%bbentry }
1 : input.spec-%var-r-0.L2%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%37%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 38 {input.spec-%tmpvar-10.L2%21%d }
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : 1 { 0x1 +1.11e129 } : BV:32
11 : input.spec-%var-i-0.L2%7%bbentry : BV:32
12 : bvadd(10, 11) : BV:32
13 : map_set(8, 9, 12) : MAP[BV:32 -> BV:32]
14 : 10 { 0xa +1.119e129 } : BV:32
15 : input.spec-%var-r-0.L2%7%bbentry : BV:32
16 : bvadd(11, 15) : BV:32
17 : map_set(13, 14, 16) : MAP[BV:32 -> BV:32]
18 : map_get(17, 14) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 47 {input.spec-%var-m1-0.L2%21%d }
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : 1 { 0x1 +1.11e129 } : BV:32
11 : input.spec-%var-i-0.L2%7%bbentry : BV:32
12 : bvadd(10, 11) : BV:32
13 : map_set(8, 9, 12) : MAP[BV:32 -> BV:32]
14 : 10 { 0xa +1.119e129 } : BV:32
15 : input.spec-%var-r-0.L2%7%bbentry : BV:32
16 : bvadd(11, 15) : BV:32
17 : map_set(13, 14, 16) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 49 {input.spec-%tmpvar-1.L2%21%d }
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 50 {input.spec-%tmpvar-2.L2%21%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 51 {input.spec-%tmpvar-3.L2%21%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 52 {input.spec-%tmpvar-4.L2%21%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 53 {input.spec-%tmpvar-5.L2%21%d }
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : 1 { 0x1 +1.11e129 } : BV:32
11 : input.spec-%var-i-0.L2%7%bbentry : BV:32
12 : bvadd(10, 11) : BV:32
13 : map_set(8, 9, 12) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 54 {input.spec-%tmpvar-6.L2%21%d }
1 : 10 { 0xa +1.119e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 55 {input.spec-%tmpvar-7.L2%21%d }
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : input.spec-%var-r-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 56 {input.spec-%tmpvar-8.L2%21%d }
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : 1 { 0x1 +1.11e129 } : BV:32
11 : input.spec-%var-i-0.L2%7%bbentry : BV:32
12 : bvadd(10, 11) : BV:32
13 : map_set(8, 9, 12) : MAP[BV:32 -> BV:32]
14 : 10 { 0xa +1.119e129 } : BV:32
15 : input.spec-%var-r-0.L2%7%bbentry : BV:32
16 : bvadd(11, 15) : BV:32
17 : map_set(13, 14, 16) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d for loc_id 57 {input.spec-%tmpvar-9.L2%21%d }
1 : 10 { 0xa +1.119e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>L2%21%d done
=graph_with_edge_structures.loc_to_expr_map at L2%21%d=>L2%22%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%21%d=>L2%22%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%21%d=>L2%25%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%21%d=>L2%25%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%22%bbentry=>L2%35%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%22%bbentry=>L2%35%bbentry for loc_id 63 {input.spec-%tmpvar-11.L2%35%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%22%bbentry=>L2%35%bbentry for loc_id 64 {input.spec-%tmpvar-17.L2%35%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%22%bbentry=>L2%35%bbentry for loc_id 65 {input.spec-%var-u-0.L2%35%bbentry }
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%22%bbentry=>L2%35%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%25%bbentry=>L2%28%d
=graph_with_edge_structures.loc_to_expr_map at L2%25%bbentry=>L2%28%d for loc_id 39 {input.spec-%tmpvar-13.L2%28%d }
1 : input.spec-%var-m1-0.L2%21%d : MAP[BV:32 -> BV:32]
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%25%bbentry=>L2%28%d for loc_id 46 {input.spec-%tmpvar-12.L2%28%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%25%bbentry=>L2%28%d for loc_id 48 {input.spec-%var-y2-0.L2%28%d }
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%25%bbentry=>L2%28%d done
=graph_with_edge_structures.loc_to_expr_map at L2%28%d=>L2%29%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%28%d=>L2%29%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%28%d=>L2%32%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%28%d=>L2%32%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%29%bbentry=>L2%35%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%29%bbentry=>L2%35%bbentry for loc_id 64 {input.spec-%tmpvar-17.L2%35%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%29%bbentry=>L2%35%bbentry for loc_id 66 {input.spec-%tmpvar-14.L2%35%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%29%bbentry=>L2%35%bbentry for loc_id 67 {input.spec-%tmpvar-16.L2%35%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%29%bbentry=>L2%35%bbentry for loc_id 68 {input.spec-%var-u2-0.L2%35%bbentry }
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%29%bbentry=>L2%35%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%32%bbentry=>L2%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%32%bbentry=>L2%7%bbentry for loc_id 40 {input.spec-%var-i-0.L2%7%bbentry }
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%32%bbentry=>L2%7%bbentry for loc_id 58 {input.spec-%var-r-0.L2%7%bbentry }
1 : input.spec-%var-y2-0.L2%28%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%32%bbentry=>L2%7%bbentry for loc_id 61 {input.src.spec-ghostvar.itervar.1.L2%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%32%bbentry=>L2%7%bbentry for loc_id 62 {input.spec-%var-y1-0.L2%7%bbentry }
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%32%bbentry=>L2%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%35%bbentry=>L2%37%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%35%bbentry=>L2%37%bbentry for loc_id 42 {input.spec-%tmpvar-19.L2%37%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%35%bbentry=>L2%37%bbentry for loc_id 69 {input.spec-%tmpvar-18.L2%37%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%35%bbentry=>L2%37%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%37%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%37%bbentry=>E0%0%d for loc_id 43 {input.spec-%tmpvar-20.E0%0%d }
1 : input.spec-%tmpvar-19.L2%37%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%37%bbentry=>E0%0%d for loc_id 44 {input.spec-%tmpvar-23.E0%0%d }
1 : input.spec-%tmpvar-19.L2%37%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%37%bbentry=>E0%0%d for loc_id 45 {input.spec-%tmpvar-24.E0%0%d }
1 : input.spec-%tmpvar-19.L2%37%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%37%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%7%bbentry:
vacuous mls at L2%8%d:
vacuous mls at L2%9%bbentry:
vacuous mls at L2%10%bbentry:
vacuous mls at L2%21%d:
vacuous mls at L2%22%bbentry:
vacuous mls at L2%25%bbentry:
vacuous mls at L2%28%d:
vacuous mls at L2%29%bbentry:
vacuous mls at L2%32%bbentry:
vacuous mls at L2%35%bbentry:
vacuous mls at L2%37%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%7%bbentry:
non-vacuous mls at L2%8%d:
non-vacuous mls at L2%9%bbentry:
non-vacuous mls at L2%10%bbentry:
non-vacuous mls at L2%21%d:
non-vacuous mls at L2%22%bbentry:
non-vacuous mls at L2%25%bbentry:
non-vacuous mls at L2%28%d:
non-vacuous mls at L2%29%bbentry:
non-vacuous mls at L2%32%bbentry:
non-vacuous mls at L2%35%bbentry:
non-vacuous mls at L2%37%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 41
=loc_expr
140399 : input.spec-%var-n-0.L2%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.end
=loc 46
=loc_expr
140448 : input.spec-%tmpvar-12.L2%28%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 49
=loc_expr
140449 : input.spec-%tmpvar-1.L2%21%d : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 50
=loc_expr
140450 : input.spec-%tmpvar-2.L2%21%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 51
=loc_expr
140451 : input.spec-%tmpvar-3.L2%21%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140454 : input.spec-%tmpvar-6.L2%21%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 10 { 0xa +1.119e129 } : BV:32
=avail_exprs_val.end
=loc 57
=loc_expr
140457 : input.spec-%tmpvar-9.L2%21%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 10 { 0xa +1.119e129 } : BV:32
=avail_exprs_val.end
=loc 59
=loc_expr
140458 : input.spec-%tmpvar-21.L2%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 60
=loc_expr
140459 : input.spec-%tmpvar-22.L2%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 63
=loc_expr
140461 : input.spec-%tmpvar-11.L2%35%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 64
=loc_expr
140444 : input.spec-%tmpvar-17.L2%35%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 66
=loc_expr
140463 : input.spec-%tmpvar-14.L2%35%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 67
=loc_expr
140464 : input.spec-%tmpvar-16.L2%35%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 69
=loc_expr
140466 : input.spec-%tmpvar-18.L2%37%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 46 expr
1 : input.spec-%tmpvar-12.L2%28%d : BV:32
=loc 46 spreled-expr
140287 : 4 { 0x4 +1.47e129 } : BV:32
=loc 49 expr
1 : input.spec-%tmpvar-1.L2%21%d : MAP[BV:32 -> BV:32]
=loc 49 spreled-expr
140472 : Lambda14Var : BV:32
140338 : 0 { 0x0 } : BOOL
140474 : lambda(140472, 140338) : FUNCTION[BV:32 -> BOOL]
140473 : Lambda15Var : BV:32
140277 : 0 { 0x0 +1.0e129 } : BV:32
140475 : lambda(140473, 140277) : FUNCTION[BV:32 -> BV:32]
140476 : map(140474, 140475) : MAP[BV:32 -> BV:32]
140477 : sym_const(140476) : MAP[BV:32 -> BV:32]
=loc 50 expr
1 : input.spec-%tmpvar-2.L2%21%d : BV:32
=loc 50 spreled-expr
140287 : 4 { 0x4 +1.47e129 } : BV:32
=loc 51 expr
1 : input.spec-%tmpvar-3.L2%21%d : BV:32
=loc 51 spreled-expr
140276 : 1 { 0x1 +1.11e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-6.L2%21%d : BV:32
=loc 54 spreled-expr
140294 : 10 { 0xa +1.119e129 } : BV:32
=loc 57 expr
1 : input.spec-%tmpvar-9.L2%21%d : BV:32
=loc 57 spreled-expr
140294 : 10 { 0xa +1.119e129 } : BV:32
=loc 59 expr
1 : input.spec-%tmpvar-21.L2%7%bbentry : BV:32
=loc 59 spreled-expr
140276 : 1 { 0x1 +1.11e129 } : BV:32
=loc 60 expr
1 : input.spec-%tmpvar-22.L2%7%bbentry : BV:32
=loc 60 spreled-expr
140277 : 0 { 0x0 +1.0e129 } : BV:32
=loc 63 expr
1 : input.spec-%tmpvar-11.L2%35%bbentry : BV:32
=loc 63 spreled-expr
140277 : 0 { 0x0 +1.0e129 } : BV:32
=loc 64 expr
1 : input.spec-%tmpvar-17.L2%35%bbentry : BV:32
=loc 64 spreled-expr
140277 : 0 { 0x0 +1.0e129 } : BV:32
=loc 66 expr
1 : input.spec-%tmpvar-14.L2%35%bbentry : BV:32
=loc 66 spreled-expr
140277 : 0 { 0x0 +1.0e129 } : BV:32
=loc 67 expr
1 : input.spec-%tmpvar-16.L2%35%bbentry : BV:32
=loc 67 spreled-expr
140277 : 0 { 0x0 +1.0e129 } : BV:32
=loc 69 expr
1 : input.spec-%tmpvar-18.L2%37%bbentry : BV:32
=loc 69 spreled-expr
140277 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 62 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 63 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 64 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 68 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 69 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 46 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 49 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 50 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 51 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 57 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 59 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 60 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 63 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 64 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 69 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%7%bbentry=>L2%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%9%bbentry
1 : input.spec-%tmpvar-0.L2%8%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%d=>L2%10%bbentry
1 : input.spec-%tmpvar-0.L2%8%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%9%bbentry=>L2%37%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%10%bbentry=>L2%21%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%21%d=>L2%22%bbentry
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%21%d=>L2%25%bbentry
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%22%bbentry=>L2%35%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%25%bbentry=>L2%28%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%28%d=>L2%29%bbentry
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%28%d=>L2%32%bbentry
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%29%bbentry=>L2%35%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%32%bbentry=>L2%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%35%bbentry=>L2%37%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%37%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%7%bbentry
=spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-n-0.L2%7%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%7%bbentry=>L2%8%d
=spec-%tmpvar-0.L2%8%d
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : input.spec-%var-n-0.L2%7%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%d=>L2%10%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%9%bbentry=>L2%37%bbentry
=spec-%tmpvar-19.L2%37%bbentry
1 : input.spec-%var-r-0.L2%7%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%10%bbentry=>L2%21%d
=spec-%tmpvar-1.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-10.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : 1 { 0x1 +1.11e129 } : BV:32
11 : input.spec-%var-i-0.L2%7%bbentry : BV:32
12 : bvadd(10, 11) : BV:32
13 : map_set(8, 9, 12) : MAP[BV:32 -> BV:32]
14 : 10 { 0xa +1.119e129 } : BV:32
15 : input.spec-%var-r-0.L2%7%bbentry : BV:32
16 : bvadd(11, 15) : BV:32
17 : map_set(13, 14, 16) : MAP[BV:32 -> BV:32]
18 : map_get(17, 14) : SUM[UNIT,BV:32]
=spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-4.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-5.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : 1 { 0x1 +1.11e129 } : BV:32
11 : input.spec-%var-i-0.L2%7%bbentry : BV:32
12 : bvadd(10, 11) : BV:32
13 : map_set(8, 9, 12) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=spec-%tmpvar-7.L2%21%d
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : input.spec-%var-r-0.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-8.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : 1 { 0x1 +1.11e129 } : BV:32
11 : input.spec-%var-i-0.L2%7%bbentry : BV:32
12 : bvadd(10, 11) : BV:32
13 : map_set(8, 9, 12) : MAP[BV:32 -> BV:32]
14 : 10 { 0xa +1.119e129 } : BV:32
15 : input.spec-%var-r-0.L2%7%bbentry : BV:32
16 : bvadd(11, 15) : BV:32
17 : map_set(13, 14, 16) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=spec-%var-m1-0.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : 1 { 0x1 +1.11e129 } : BV:32
11 : input.spec-%var-i-0.L2%7%bbentry : BV:32
12 : bvadd(10, 11) : BV:32
13 : map_set(8, 9, 12) : MAP[BV:32 -> BV:32]
14 : 10 { 0xa +1.119e129 } : BV:32
15 : input.spec-%var-r-0.L2%7%bbentry : BV:32
16 : bvadd(11, 15) : BV:32
17 : map_set(13, 14, 16) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%21%d=>L2%22%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%21%d=>L2%25%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%22%bbentry=>L2%35%bbentry
=spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-0.L2%35%bbentry
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%25%bbentry=>L2%28%d
=spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=spec-%tmpvar-13.L2%28%d
1 : input.spec-%var-m1-0.L2%21%d : MAP[BV:32 -> BV:32]
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=spec-%var-y2-0.L2%28%d
1 : input.spec-%tmpvar-10.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%28%d=>L2%29%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%28%d=>L2%32%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%29%bbentry=>L2%35%bbentry
=spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u2-0.L2%35%bbentry
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%32%bbentry=>L2%7%bbentry
=spec-%var-i-0.L2%7%bbentry
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-r-0.L2%7%bbentry
1 : input.spec-%var-y2-0.L2%28%d : BV:32
=src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L2%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-y1-0.L2%7%bbentry
1 : input.spec-%tmpvar-13.L2%28%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%35%bbentry=>L2%37%bbentry
=spec-%tmpvar-19.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%37%bbentry=>E0%0%d
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-19.L2%37%bbentry : BV:32
=spec-%tmpvar-23.E0%0%d
1 : input.spec-%tmpvar-19.L2%37%bbentry : BV:32
=spec-%tmpvar-24.E0%0%d
1 : input.spec-%tmpvar-19.L2%37%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%7%bbentry=>L2%8%d
=graph_with_simplified_assets.simplified_assumes at L2%7%bbentry=>L2%8%d done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%d=>L2%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%37%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%37%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%10%bbentry=>L2%21%d
=graph_with_simplified_assets.simplified_assumes at L2%10%bbentry=>L2%21%d done
=graph_with_simplified_assets.simplified_assumes at L2%21%d=>L2%22%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%21%d=>L2%22%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%21%d=>L2%25%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%21%d=>L2%25%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%22%bbentry=>L2%35%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%22%bbentry=>L2%35%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%25%bbentry=>L2%28%d
=graph_with_simplified_assets.simplified_assumes at L2%25%bbentry=>L2%28%d done
=graph_with_simplified_assets.simplified_assumes at L2%28%d=>L2%29%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%28%d=>L2%29%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%28%d=>L2%32%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%28%d=>L2%32%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%29%bbentry=>L2%35%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%29%bbentry=>L2%35%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%32%bbentry=>L2%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%32%bbentry=>L2%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%35%bbentry=>L2%37%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%35%bbentry=>L2%37%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%37%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%37%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%7%bbentry for src.spec.foo
=suffixpath_at_L2%7%bbentry.graph_edge_composition
(L0%0%d=>L2%7%bbentry)
=suffixpath_at_L2%8%d for src.spec.foo
=suffixpath_at_L2%8%d.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%8%d))
=suffixpath_at_L2%9%bbentry for src.spec.foo
=suffixpath_at_L2%9%bbentry.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*(L2%8%d=>L2%9%bbentry)))
=suffixpath_at_L2%10%bbentry for src.spec.foo
=suffixpath_at_L2%10%bbentry.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*(L2%8%d=>L2%10%bbentry)))
=suffixpath_at_L2%21%d for src.spec.foo
=suffixpath_at_L2%21%d.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*(L2%10%bbentry=>L2%21%d))))
=suffixpath_at_L2%22%bbentry for src.spec.foo
=suffixpath_at_L2%22%bbentry.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*(L2%21%d=>L2%22%bbentry)))))
=suffixpath_at_L2%25%bbentry for src.spec.foo
=suffixpath_at_L2%25%bbentry.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*(L2%21%d=>L2%25%bbentry)))))
=suffixpath_at_L2%28%d for src.spec.foo
=suffixpath_at_L2%28%d.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*(L2%25%bbentry=>L2%28%d))))))
=suffixpath_at_L2%29%bbentry for src.spec.foo
=suffixpath_at_L2%29%bbentry.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*((L2%25%bbentry=>L2%28%d)*(L2%28%d=>L2%29%bbentry)))))))
=suffixpath_at_L2%32%bbentry for src.spec.foo
=suffixpath_at_L2%32%bbentry.graph_edge_composition
((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*((L2%25%bbentry=>L2%28%d)*(L2%28%d=>L2%32%bbentry)))))))
=suffixpath_at_L2%35%bbentry for src.spec.foo
=suffixpath_at_L2%35%bbentry.graph_edge_composition
(((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%35%bbentry))))))+((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*((L2%25%bbentry=>L2%28%d)*((L2%28%d=>L2%29%bbentry)*(L2%29%bbentry=>L2%35%bbentry)))))))))
=suffixpath_at_L2%37%bbentry for src.spec.foo
=suffixpath_at_L2%37%bbentry.graph_edge_composition
(((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>L2%37%bbentry))))+((((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%35%bbentry))))))+((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*((L2%25%bbentry=>L2%28%d)*((L2%28%d=>L2%29%bbentry)*(L2%29%bbentry=>L2%35%bbentry)))))))))*(L2%35%bbentry=>L2%37%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%9%bbentry)*(L2%9%bbentry=>L2%37%bbentry))))+((((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%35%bbentry))))))+((L0%0%d=>L2%7%bbentry)*((L2%7%bbentry=>L2%8%d)*((L2%8%d=>L2%10%bbentry)*((L2%10%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*((L2%25%bbentry=>L2%28%d)*((L2%28%d=>L2%29%bbentry)*(L2%29%bbentry=>L2%35%bbentry)))))))))*(L2%35%bbentry=>L2%37%bbentry)))*(L2%37%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%7%bbentry
tfg.assumes_around_edge at L0%0%d=>L2%7%bbentry done
tfg.assumes_around_edge at L2%7%bbentry=>L2%8%d
tfg.assumes_around_edge at L2%7%bbentry=>L2%8%d done
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%9%bbentry done
tfg.assumes_around_edge at L2%8%d=>L2%10%bbentry
tfg.assumes_around_edge at L2%8%d=>L2%10%bbentry done
tfg.assumes_around_edge at L2%9%bbentry=>L2%37%bbentry
tfg.assumes_around_edge at L2%9%bbentry=>L2%37%bbentry done
tfg.assumes_around_edge at L2%10%bbentry=>L2%21%d
tfg.assumes_around_edge at L2%10%bbentry=>L2%21%d done
tfg.assumes_around_edge at L2%21%d=>L2%22%bbentry
tfg.assumes_around_edge at L2%21%d=>L2%22%bbentry done
tfg.assumes_around_edge at L2%21%d=>L2%25%bbentry
tfg.assumes_around_edge at L2%21%d=>L2%25%bbentry done
tfg.assumes_around_edge at L2%22%bbentry=>L2%35%bbentry
tfg.assumes_around_edge at L2%22%bbentry=>L2%35%bbentry done
tfg.assumes_around_edge at L2%25%bbentry=>L2%28%d
tfg.assumes_around_edge at L2%25%bbentry=>L2%28%d done
tfg.assumes_around_edge at L2%28%d=>L2%29%bbentry
tfg.assumes_around_edge at L2%28%d=>L2%29%bbentry done
tfg.assumes_around_edge at L2%28%d=>L2%32%bbentry
tfg.assumes_around_edge at L2%28%d=>L2%32%bbentry done
tfg.assumes_around_edge at L2%29%bbentry=>L2%35%bbentry
tfg.assumes_around_edge at L2%29%bbentry=>L2%35%bbentry done
tfg.assumes_around_edge at L2%32%bbentry=>L2%7%bbentry
tfg.assumes_around_edge at L2%32%bbentry=>L2%7%bbentry done
tfg.assumes_around_edge at L2%35%bbentry=>L2%37%bbentry
tfg.assumes_around_edge at L2%35%bbentry=>L2%37%bbentry done
tfg.assumes_around_edge at L2%37%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%37%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%d
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 17 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !19)*  %r.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !14)*(  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ], !dbg !18*  br label %for.cond, !dbg !19))*  br label %for.cond, !dbg !19)*(  br label %for.cond, !dbg !19*  br label %for.cond, !dbg !19))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp sle i32 %i.0, %n, !dbg !20)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !22*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !22*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %r.0, !dbg !30
tfg_edge_comment end

=Edge: Lfor.body%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:(((((  %add = add nsw i32 %r.0, %i.0, !dbg !23*  br label %for.inc, !dbg !25)*  br label %for.inc, !dbg !25)*  br label %for.inc, !dbg !25)*(((((  %inc = add nsw i32 %i.0, 1, !dbg !26*  br label %for.cond, !dbg !27, !llvm.loop !28)*  %r.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !14)*(  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ], !dbg !18*  br label %for.cond, !dbg !27, !llvm.loop !28))*  br label %for.cond, !dbg !27, !llvm.loop !28)*(  br label %for.cond, !dbg !27, !llvm.loop !28*  br label %for.cond, !dbg !27, !llvm.loop !28)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100011 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100013 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100014 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100015 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100020 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100023 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100024 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100025 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100030 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100032 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100025, 
=live locs at Lfor.body%1%d
100006, 100025, 100027, 100031, 
=live locs at Lfor.cond%1%bbentry
100006, 100025, 100027[f], 100031, 
=live locs at Lfor.cond%2%d
100006, 100025, 100027[f], 100030, 100031, 
=live locs at Lfor.end%1%d
100025, 100027[f], 
=live locs at E0%0%d
100025, 100027[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100021, 100023, 100024, 100025
=loc definedness at Lfor.body%1%d
100006, 100021, 100023, 100024, 100025, 100027, 100030, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at Lfor.cond%1%bbentry
100006, 100021, 100023, 100024, 100025, 100027, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at Lfor.cond%2%d
100006, 100021, 100023, 100024, 100025, 100027, 100030, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at Lfor.end%1%d
100006, 100021, 100023, 100024, 100025, 100027, 100030, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at E0%0%d
100006, 100021, 100023, 100024, 100025, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100039, 100040

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%d
100006, 100031
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100031
=branch affecting variable locs at Lfor.cond%2%d
100006, 100030, 100031
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100027 {input.dst.llvm-%r.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100031 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100032 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100033 {input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100034 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100039 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100027 {input.dst.llvm-%r.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100031 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100034 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100035 {input.dst.llvm-%add.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100036 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100038 {input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100030 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100026 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100028 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100029 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140369 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100011
=loc_expr
140409 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100013
=loc_expr
140410 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140412 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140414 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140416 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140374 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140351 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140586 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100028
=loc_expr
140587 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100029
=loc_expr
140588 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100032
=loc_expr
140589 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 100033
=loc_expr
140590 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100039
=loc_expr
140595 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100040
=loc_expr
140596 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100029 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100029 spreled-expr
140267 : retaddr_const : BV:32
=loc 100032 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100032 spreled-expr
140276 : 1 { 0x1 +1.11e129 } : BV:32
=loc 100033 expr
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100033 spreled-expr
140277 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100039 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100039 spreled-expr
140374 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100040 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100040 spreled-expr
140373 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100011 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100013 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100014 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100015 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100023 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100029 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%d)))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body%2%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.end%1%d
=linename
line 6
=pc
Lfor.inc%1%d
=linename
line 3
=pc
Lfor.inc%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 7
=pc
Lfor.body%2%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 21
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 27
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
line 4
=pc
Lfor.body%2%d
=line_and_column
line 5
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 21)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 6
=pc
Lfor.inc%1%d
=line_and_column
(line 3 at column 27)
=pc
Lfor.inc%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%n : L0%0%d : n'
input.dst.llvm-%r.0 : Lfor.cond%1%bbentry : r'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 1
input.dst.llvm-%r.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%add : Lfor.body%2%bbentry : r'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%r.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%r.0.Lfor.cond%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 1
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: nuw nsw
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000001b
2 : scev_op_addrec(1, 1) : loop Lfor.cond%1%d : nuw nsw
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:1
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%i.0 val_scevb signed lower bound: 32:1
=dst.llvm-%i.0 val_scevb signed upper bound: 32:2147483648
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: nuw nsw
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000001b
2 : scev_op_addrec(1, 1) : loop Lfor.cond%1%d : nuw nsw
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:1
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:1
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: nuw
=dst.llvm-%i.0 atexit_scev scev_expr
1 : 00000000000000000000000000000001b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
6 : scev_op_add(1, 5) : loop L0%0%d : nuw
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%r.0
=dst.llvm-%r.0 loop pc: Lfor.cond%1%d
=dst.llvm-%r.0 val_scevb
=dst.llvm-%r.0 val_scevb scev
=dst.llvm-%r.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%r.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%r.0 val_scevb scev scev_expr
3 : 00000000000000000000000000000000b
1 : 00000000000000000000000000000001b
7 : scev_op_addrec(3, 1, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%r.0 val_scevb scev scev_expr done
=dst.llvm-%r.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%r.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%r.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%r.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb
=dst.llvm-%r.0 atuse_scevb scev
=dst.llvm-%r.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%r.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%r.0 atuse_scevb scev scev_expr
3 : 00000000000000000000000000000000b
1 : 00000000000000000000000000000001b
7 : scev_op_addrec(3, 1, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%r.0 atuse_scevb scev scev_expr done
=dst.llvm-%r.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%r.0 atexit_scev
=dst.llvm-%r.0 atexit_scev loop: L0%0%d
=dst.llvm-%r.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%r.0 atexit_scev scev_expr
8 : 11111111111111111111111111111111b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
9 : scev_op_add(8, 5) : loop L0%0%d : nsw
10 : scev_op_zeroext(9) : loop L0%0%d : 
11 : scev_op_zeroext(5) : loop L0%0%d : 
12 : scev_op_mul(10, 11) : loop L0%0%d : 
13 : 000000000000000000000000000000010b
14 : scev_op_udiv(12, 13) : loop L0%0%d : 
15 : scev_op_truncate(14) : loop L0%0%d : 
16 : scev_op_add(15, 5) : loop L0%0%d : 
=dst.llvm-%r.0 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
1 : 00000000000000000000000000000001b
17 : 00000000000000000000000000000010b
18 : scev_op_addrec(1, 17, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
1 : 00000000000000000000000000000001b
17 : 00000000000000000000000000000010b
18 : scev_op_addrec(1, 17, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
1 : 00000000000000000000000000000001b
8 : 11111111111111111111111111111111b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
9 : scev_op_add(8, 5) : loop L0%0%d : nsw
10 : scev_op_zeroext(9) : loop L0%0%d : 
11 : scev_op_zeroext(5) : loop L0%0%d : 
12 : scev_op_mul(10, 11) : loop L0%0%d : 
13 : 000000000000000000000000000000010b
14 : scev_op_udiv(12, 13) : loop L0%0%d : 
15 : scev_op_truncate(14) : loop L0%0%d : 
17 : 00000000000000000000000000000010b
19 : scev_op_mul(17, 5) : loop L0%0%d : nuw
20 : scev_op_add(1, 15, 19) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: nuw
=dst.llvm-%inc val_scevb scev scev_expr
17 : 00000000000000000000000000000010b
1 : 00000000000000000000000000000001b
21 : scev_op_addrec(17, 1) : loop Lfor.cond%1%d : nuw
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:2
=dst.llvm-%inc val_scevb unsigned upper bound: 32:2147483650
=dst.llvm-%inc val_scevb signed lower bound: 32:2
=dst.llvm-%inc val_scevb signed upper bound: 32:2147483650
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: nuw
=dst.llvm-%inc atuse_scevb scev scev_expr
17 : 00000000000000000000000000000010b
1 : 00000000000000000000000000000001b
21 : scev_op_addrec(17, 1) : loop Lfor.cond%1%d : nuw
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:2
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:2147483650
=dst.llvm-%inc atuse_scevb signed lower bound: 32:2
=dst.llvm-%inc atuse_scevb signed upper bound: 32:2147483650
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: nuw
=dst.llvm-%inc atexit_scev scev_expr
17 : 00000000000000000000000000000010b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
22 : scev_op_add(17, 5) : loop L0%0%d : nuw
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%add.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%r.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename loop5.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
equal-arg0
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L2%7%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L2%7%bbentry_Lfor.cond%1%bbentry
L2%7%bbentry_Lfor.cond%1%bbentry => L2%7%bbentry_Lfor.cond%1%bbentry
L2%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 17 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L2%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L2%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L2%7%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%7%bbentry_Lfor.cond%1%bbentry => L2%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%7%bbentry to L2%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L2%7%bbentry#{0,0}=>L2%8%d#{0,0})*((L2%8%d#{0,0}=>L2%10%bbentry#{0,0})*((L2%10%bbentry#{0,0}=>L2%21%d#{0,0})*((L2%21%d#{0,0}=>L2%25%bbentry#{0,0})*((L2%25%bbentry#{0,0}=>L2%28%d#{0,0})*((L2%28%d#{0,0}=>L2%32%bbentry#{0,0})*(L2%32%bbentry#{0,0}=>L2%7%bbentry#{1,0})))))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%d#{0,0})*(Lfor.body%1%d#{0,0}=>Lfor.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%7%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L2%7%bbentry#{0,0}=>L2%8%d#{0,0})*((((L2%8%d#{0,0}=>L2%9%bbentry#{0,0})*(L2%9%bbentry#{0,0}=>L2%37%bbentry#{0,0}))+((L2%8%d#{0,0}=>L2%10%bbentry#{0,0})*((L2%10%bbentry#{0,0}=>L2%21%d#{0,0})*((((L2%21%d#{0,0}=>L2%22%bbentry#{0,0})*(L2%22%bbentry#{0,0}=>L2%35%bbentry#{0,0}))+((L2%21%d#{0,0}=>L2%25%bbentry#{0,0})*((L2%25%bbentry#{0,0}=>L2%28%d#{0,0})*((L2%28%d#{0,0}=>L2%29%bbentry#{0,0})*(L2%29%bbentry#{0,0}=>L2%35%bbentry#{0,0})))))*(L2%35%bbentry#{0,0}=>L2%37%bbentry#{0,0})))))*(L2%37%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-arg0
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : input.dst.llvm-%n : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1.B2.C1
=Locs end
=Liveness in foo.A1.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L2%7%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1.B2.C1

=Branch affecting variable locs in foo.A1.B2.C1

=Relevant Memlabels in foo.A1.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 45be189c50391f61dae8a7c251873
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3621921087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3621921088; 3621921091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3621921092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3621921088 { 0xd7e22140 -673046208 -1.76663970e48 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1610438063 { 0x5ffd55af +1.97917735e64 } : COUNT
=input.spec-%var-n-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda68Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda69Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1610438063 { 0x5ffd55af +1.97917735e64 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3621921088 { 0xd7e22140 -673046208 -1.76663970e48 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3621921091 { 0xd7e22143 -673046205 -1.76664006e48 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1370483088
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 d03673c75b1ca4cf75fec045221b717
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147483971 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483972; 2147483975 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483976; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483972 { 0x80000144 -2147483324 -1.3862e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda78Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda79Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483972 { 0x80000144 -2147483324 -1.3862e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483975 { 0x80000147 -2147483321 -1.3898e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2494662331
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce29.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce29 385e81a9c46c9beb199a3893f0ba7dc
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 163694057 { 0x9c1c5e9 +1.51385223e148 } : COUNT
=input.spec-%var-n-0.L2%7%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda124Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda125Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 163694057 { 0x9c1c5e9 +1.51385223e148 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
971625804
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce55.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce55 bac6c4af8b52d06a21f077f938a282
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1906735454 { 0x71a6795e +1.30057883e100 } : COUNT
=input.spec-%var-n-0.L2%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda195Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda196Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1906735454 { 0x71a6795e +1.30057883e100 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
4250854614
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce81.num_edges_traversed0
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(epsilon)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce81 d84efef01f2dd65efac1c1edaf934bd
=input.spec-%var-n-1
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda234Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda235Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3888545802
=counter_example_end
=global nodece 4 num_edges_traversed 0
=global nodece 4 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce82.num_edges_traversed0
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(epsilon)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce82 a89badf031bbb224db23e496f929b44
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 19 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 20; 23 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 24; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda244Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda245Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 23 { 0x17 +1.274e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
547076238
=counter_example_end
=global nodece 5 num_edges_traversed 0
=global nodece 5 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce128.num_edges_traversed2
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(epsilon)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce128 53ce5313dc842c2c17f5f1f2a8f8ee
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 163694057 { 0x9c1c5e9 +1.51385223e148 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
971625804
=counter_example_end
=global nodece 6 num_edges_traversed 2
=global nodece 6 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce149.num_edges_traversed3
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce149 dd7cd449c25905c3ceb8c251886b479
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 163694057 { 0x9c1c5e9 +1.51385223e148 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
971625804
=counter_example_end
=global nodece 7 num_edges_traversed 3
=global nodece 7 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce175.num_edges_traversed4
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce175 d74a24481a68e24010905659e13b97
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 163694057 { 0x9c1c5e9 +1.51385223e148 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
971625804
=counter_example_end
=global nodece 8 num_edges_traversed 4
=global nodece 8 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce110.num_edges_traversed1
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce110 f9c57a25764c9661d6405a53b6de6f48
=input.spec-%var-n-1
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1942339429 { 0x73c5bf65 +1.54490339e104 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1144947015 { 0x443e8147 +1.48832023e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2522467346
=counter_example_end
=global nodece 9 num_edges_traversed 1
=global nodece 9 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3.ce204.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce204 a832c3c15fc0df3e96f52c9a79db1593
=input.spec-%var-n-1
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1942339430 { 0x73c5bf66 +1.54490351e104 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1144947016 { 0x443e8148 +1.48832035e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2522467346
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce220.num_edges_traversed1
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce220 26697cd634c26c23bc31d6c1e9417e7a
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 676028765 { 0x284b615d +1.58890879e209 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-5.L2%21%d
1 : Lambda1262Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda1265Var : BV:32
6 : eq(5, 2) : BOOL
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(6, 2, 7) : BV:32
9 : lambda(5, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(4, 9) : MAP[BV:32 -> BV:32]
11 : sym_const(10) : MAP[BV:32 -> BV:32]
=input.spec-%var-m1-0.L2%21%d
1 : Lambda1278Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1281Var : BV:32
9 : eq(8, 4) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : eq(8, 2) : BOOL
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : ite(11, 2, 12) : BV:32
14 : ite(9, 10, 13) : BV:32
15 : lambda(8, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(7, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-10.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : eq(1, 1) : BOOL
5 : or(3, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : ite(3, 2, 7) : BV:32
12 : ite(4, 10, 11) : BV:32
13 : sum(8, 9, 12) : SUM[UNIT,BV:32]
14 : sym_const(13) : SUM[UNIT,BV:32]
=input.spec-%var-y2-0.L2%28%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L2%21%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-13.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : eq(1, 1) : BOOL
3 : 10 { 0xa +1.119e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : or(2, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : ite(2, 1, 7) : BV:32
12 : ite(4, 10, 11) : BV:32
13 : sum(8, 9, 12) : SUM[UNIT,BV:32]
14 : sym_const(13) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%21%d
1 : Lambda1314Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1317Var : BV:32
9 : eq(8, 4) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : eq(8, 2) : BOOL
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : ite(11, 2, 12) : BV:32
14 : ite(9, 10, 13) : BV:32
15 : lambda(8, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(7, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-y1-0.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1663321775 { 0x632446af +1.28340709e71 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3111263663
=counter_example_end
=global nodece 11 num_edges_traversed 1
=global nodece 11 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce260.num_edges_traversed2
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce260 355ca49cbb3b5e8fc4120f83a4ec1cb
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 676028766 { 0x284b615e +1.58890891e209 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1663321776 { 0x632446b0 +1.28340721e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3111263663
=counter_example_end
=global nodece 12 num_edges_traversed 2
=global nodece 12 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3.ce289.num_edges_traversed1
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce289 11f614bcd4eefba15f0ba55e3deec0
=input.spec-%var-n-1
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 596131520 { 0x23883ec0 +1.6441497e200 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L2%21%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-5.L2%21%d
1 : Lambda1684Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda1687Var : BV:32
6 : eq(5, 2) : BOOL
7 : 5 { 0x5 +1.59e129 } : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : ite(6, 7, 8) : BV:32
10 : lambda(5, 9) : FUNCTION[BV:32 -> BV:32]
11 : map(4, 10) : MAP[BV:32 -> BV:32]
12 : sym_const(11) : MAP[BV:32 -> BV:32]
=input.spec-%var-m1-0.L2%21%d
1 : Lambda1700Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1703Var : BV:32
9 : eq(8, 4) : BOOL
10 : eq(8, 2) : BOOL
11 : 5 { 0x5 +1.59e129 } : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : ite(10, 11, 12) : BV:32
14 : ite(9, 2, 13) : BV:32
15 : lambda(8, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(7, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-10.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : eq(1, 1) : BOOL
5 : or(3, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 5 { 0x5 +1.59e129 } : BV:32
11 : ite(3, 10, 7) : BV:32
12 : ite(4, 2, 11) : BV:32
13 : sum(8, 9, 12) : SUM[UNIT,BV:32]
14 : sym_const(13) : SUM[UNIT,BV:32]
=input.spec-%var-y2-0.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-7.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-13.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : eq(1, 1) : BOOL
3 : 10 { 0xa +1.119e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : or(2, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 5 { 0x5 +1.59e129 } : BV:32
11 : ite(2, 10, 7) : BV:32
12 : ite(4, 1, 11) : BV:32
13 : sum(8, 9, 12) : SUM[UNIT,BV:32]
14 : sym_const(13) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%21%d
1 : Lambda1736Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1739Var : BV:32
9 : eq(8, 4) : BOOL
10 : eq(8, 2) : BOOL
11 : 5 { 0x5 +1.59e129 } : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : ite(10, 11, 12) : BV:32
14 : ite(9, 2, 13) : BV:32
15 : lambda(8, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(7, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-y1-0.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1983710295 { 0x763d0457 +1.47669494e109 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2300368919
=counter_example_end
=global nodece 13 num_edges_traversed 1
=global nodece 13 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3.ce345.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce345 fc8b9fba4c748152809a3f18d2f4f
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2097199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2097200; 2097203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2097204; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2097200 { 0x200030 +1.25000572e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1344079365 { 0x501d0605 +1.22674620e33 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-5.L2%21%d
1 : Lambda2018Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda2021Var : BV:32
6 : eq(5, 2) : BOOL
7 : 10 { 0xa +1.119e129 } : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : ite(6, 7, 8) : BV:32
10 : lambda(5, 9) : FUNCTION[BV:32 -> BV:32]
11 : map(4, 10) : MAP[BV:32 -> BV:32]
12 : sym_const(11) : MAP[BV:32 -> BV:32]
=input.spec-%var-m1-0.L2%21%d
1 : Lambda2034Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda2037Var : BV:32
9 : eq(8, 4) : BOOL
10 : 11 { 0xb +1.131e129 } : BV:32
11 : eq(8, 2) : BOOL
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : ite(11, 4, 12) : BV:32
14 : ite(9, 10, 13) : BV:32
15 : lambda(8, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(7, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-10.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : eq(1, 1) : BOOL
5 : or(3, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 11 { 0xb +1.131e129 } : BV:32
11 : ite(3, 1, 7) : BV:32
12 : ite(4, 10, 11) : BV:32
13 : sum(8, 9, 12) : SUM[UNIT,BV:32]
14 : sym_const(13) : SUM[UNIT,BV:32]
=input.spec-%var-y2-0.L2%28%d
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-7.L2%21%d
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-13.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : eq(1, 1) : BOOL
3 : 10 { 0xa +1.119e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : or(2, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 11 { 0xb +1.131e129 } : BV:32
11 : ite(2, 3, 7) : BV:32
12 : ite(4, 10, 11) : BV:32
13 : sum(8, 9, 12) : SUM[UNIT,BV:32]
14 : sym_const(13) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%21%d
1 : Lambda2070Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda2073Var : BV:32
9 : eq(8, 4) : BOOL
10 : 11 { 0xb +1.131e129 } : BV:32
11 : eq(8, 2) : BOOL
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : ite(11, 4, 12) : BV:32
14 : ite(9, 10, 13) : BV:32
15 : lambda(8, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(7, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-y1-0.L2%7%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1046023638 { 0x3e590dd6 +1.69573473e253 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2097200 { 0x200030 +1.25000572e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2097203 { 0x200033 +1.25000607e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1359051322
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce385.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce385 b2a8b2ba8c39719047813ad2b7237f1c
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 21 { 0x15 +1.250e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 2097199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2097200; 2097203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2097204; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2097200 { 0x200030 +1.25000572e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1344079366 { 0x501d0606 +1.22674632e33 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 21 { 0x15 +1.250e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1046023639 { 0x3e590dd7 +1.69573485e253 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2097200 { 0x200030 +1.25000572e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2097203 { 0x200033 +1.25000607e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1359051322
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce414.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce414 6ba3738310d1b735e9454f659829d9b
=input.spec-%var-n-1
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 2116854839 { 0x7e2ca437 +1.34876143e125 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L2%21%d
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-5.L2%21%d
1 : Lambda2440Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda2443Var : BV:32
6 : eq(5, 2) : BOOL
7 : 11 { 0xb +1.131e129 } : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : ite(6, 7, 8) : BV:32
10 : lambda(5, 9) : FUNCTION[BV:32 -> BV:32]
11 : map(4, 10) : MAP[BV:32 -> BV:32]
12 : sym_const(11) : MAP[BV:32 -> BV:32]
=input.spec-%var-m1-0.L2%21%d
1 : Lambda2456Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda2459Var : BV:32
9 : eq(8, 4) : BOOL
10 : eq(8, 2) : BOOL
11 : 11 { 0xb +1.131e129 } : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : ite(10, 11, 12) : BV:32
14 : ite(9, 4, 13) : BV:32
15 : lambda(8, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(7, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-10.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : eq(1, 1) : BOOL
5 : or(3, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 11 { 0xb +1.131e129 } : BV:32
11 : ite(3, 10, 7) : BV:32
12 : ite(4, 1, 11) : BV:32
13 : sum(8, 9, 12) : SUM[UNIT,BV:32]
14 : sym_const(13) : SUM[UNIT,BV:32]
=input.spec-%var-y2-0.L2%28%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-7.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-13.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : eq(1, 1) : BOOL
3 : 10 { 0xa +1.119e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : or(2, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 11 { 0xb +1.131e129 } : BV:32
11 : ite(2, 10, 7) : BV:32
12 : ite(4, 3, 11) : BV:32
13 : sum(8, 9, 12) : SUM[UNIT,BV:32]
14 : sym_const(13) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%21%d
1 : Lambda2492Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda2495Var : BV:32
9 : eq(8, 4) : BOOL
10 : eq(8, 2) : BOOL
11 : 11 { 0xb +1.131e129 } : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : ite(10, 11, 12) : BV:32
14 : ite(9, 4, 13) : BV:32
15 : lambda(8, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(7, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-y1-0.L2%7%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 808718016 { 0x30340ec0 +1.40670013e225 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1418920670
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce470.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce470 47a1bf20359e264719d6cc2f753a65d4
=input.spec-%var-n-1
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 11241183 { 0xab86df +1.34005343e130 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L2%21%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%21%d
1 : Lambda2836Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda2839Var : BV:32
6 : eq(5, 2) : BOOL
7 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : ite(6, 7, 8) : BV:32
10 : lambda(5, 9) : FUNCTION[BV:32 -> BV:32]
11 : map(4, 10) : MAP[BV:32 -> BV:32]
12 : sym_const(11) : MAP[BV:32 -> BV:32]
=input.spec-%var-m1-0.L2%21%d
1 : Lambda2852Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda2855Var : BV:32
9 : eq(8, 4) : BOOL
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : eq(8, 2) : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : ite(11, 12, 13) : BV:32
15 : ite(9, 10, 14) : BV:32
16 : lambda(8, 15) : FUNCTION[BV:32 -> BV:32]
17 : map(7, 16) : MAP[BV:32 -> BV:32]
18 : sym_const(17) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-10.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : eq(1, 1) : BOOL
5 : or(3, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
12 : ite(3, 11, 7) : BV:32
13 : ite(4, 10, 12) : BV:32
14 : sum(8, 9, 13) : SUM[UNIT,BV:32]
15 : sym_const(14) : SUM[UNIT,BV:32]
=input.spec-%var-y2-0.L2%28%d
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L2%21%d
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-13.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : eq(1, 1) : BOOL
3 : 10 { 0xa +1.119e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : or(2, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
12 : ite(2, 11, 7) : BV:32
13 : ite(4, 10, 12) : BV:32
14 : sum(8, 9, 13) : SUM[UNIT,BV:32]
15 : sym_const(14) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%21%d
1 : Lambda2888Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda2891Var : BV:32
9 : eq(8, 4) : BOOL
10 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
11 : eq(8, 2) : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : ite(11, 12, 13) : BV:32
15 : ite(9, 10, 14) : BV:32
16 : lambda(8, 15) : FUNCTION[BV:32 -> BV:32]
17 : map(7, 16) : MAP[BV:32 -> BV:32]
18 : sym_const(17) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-y1-0.L2%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1203842313 { 0x47c12d09 +1.50918686e16 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3424962705
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce510.num_edges_traversed2
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce510 657fe5576d2b8a2c5b6dddfa8602314
=input.spec-%var-n-1
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 11241184 { 0xab86e0 +1.34005355e130 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1203842314 { 0x47c12d0a +1.50918698e16 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3424962705
=counter_example_end
=global nodece 18 num_edges_traversed 2
=global nodece 18 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce539.num_edges_traversed1
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce539 4e57dc2971cb91f4823748e6d914aac
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 2054618610 { 0x7a76fdf2 +1.92962479e117 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L2%21%d
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.spec-%tmpvar-5.L2%21%d
1 : Lambda3258Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda3261Var : BV:32
6 : eq(5, 2) : BOOL
7 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : ite(6, 7, 8) : BV:32
10 : lambda(5, 9) : FUNCTION[BV:32 -> BV:32]
11 : map(4, 10) : MAP[BV:32 -> BV:32]
12 : sym_const(11) : MAP[BV:32 -> BV:32]
=input.spec-%var-m1-0.L2%21%d
1 : Lambda3274Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda3277Var : BV:32
9 : eq(8, 4) : BOOL
10 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
11 : eq(8, 2) : BOOL
12 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : ite(11, 12, 13) : BV:32
15 : ite(9, 10, 14) : BV:32
16 : lambda(8, 15) : FUNCTION[BV:32 -> BV:32]
17 : map(7, 16) : MAP[BV:32 -> BV:32]
18 : sym_const(17) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-10.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : eq(1, 1) : BOOL
5 : or(3, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
11 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
12 : ite(3, 11, 7) : BV:32
13 : ite(4, 10, 12) : BV:32
14 : sum(8, 9, 13) : SUM[UNIT,BV:32]
15 : sym_const(14) : SUM[UNIT,BV:32]
=input.spec-%var-y2-0.L2%28%d
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%tmpvar-7.L2%21%d
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%tmpvar-13.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : eq(1, 1) : BOOL
3 : 10 { 0xa +1.119e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : or(2, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
11 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
12 : ite(2, 11, 7) : BV:32
13 : ite(4, 10, 12) : BV:32
14 : sum(8, 9, 13) : SUM[UNIT,BV:32]
15 : sym_const(14) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%21%d
1 : Lambda3310Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda3313Var : BV:32
9 : eq(8, 4) : BOOL
10 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
11 : eq(8, 2) : BOOL
12 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : ite(11, 12, 13) : BV:32
15 : ite(9, 10, 14) : BV:32
16 : lambda(8, 15) : FUNCTION[BV:32 -> BV:32]
17 : map(7, 16) : MAP[BV:32 -> BV:32]
18 : sym_const(17) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-y1-0.L2%7%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1354777578 { 0x50c043ea +1.50207257e34 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
658926996
=counter_example_end
=global nodece 19 num_edges_traversed 1
=global nodece 19 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce579.num_edges_traversed2
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce579 ba7f8da35593a1d7696738fed27994fd
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 2054618611 { 0x7a76fdf3 +1.92962491e117 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1354777579 { 0x50c043eb +1.50207269e34 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
658926996
=counter_example_end
=global nodece 20 num_edges_traversed 2
=global nodece 20 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 21
=global nodece 21 nodece z3.ce608.num_edges_traversed1
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce608 fa7fe1d7a7a864335134e7a693ff9f
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1597215445 { 0x5f3392d5 +1.40291845e63 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda14Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda15Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L2%21%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%21%d
1 : Lambda3677Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda3680Var : BV:32
6 : eq(5, 2) : BOOL
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(6, 7, 7) : BV:32
9 : lambda(5, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(4, 9) : MAP[BV:32 -> BV:32]
11 : sym_const(10) : MAP[BV:32 -> BV:32]
=input.spec-%var-m1-0.L2%21%d
1 : Lambda3693Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda3696Var : BV:32
9 : eq(8, 4) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(8, 2) : BOOL
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : ite(11, 12, 12) : BV:32
14 : ite(9, 10, 13) : BV:32
15 : lambda(8, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(7, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-10.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : eq(1, 1) : BOOL
5 : or(3, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(3, 7, 7) : BV:32
12 : ite(4, 10, 11) : BV:32
13 : sum(8, 9, 12) : SUM[UNIT,BV:32]
14 : sym_const(13) : SUM[UNIT,BV:32]
=input.spec-%var-y2-0.L2%28%d
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L2%21%d
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-13.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : eq(1, 1) : BOOL
3 : 10 { 0xa +1.119e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : or(2, 4) : BOOL
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(5, 6, 7) : BV:32
9 : unit : UNIT
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(2, 7, 7) : BV:32
12 : ite(4, 10, 11) : BV:32
13 : sum(8, 9, 12) : SUM[UNIT,BV:32]
14 : sym_const(13) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%21%d
1 : Lambda3729Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 10 { 0xa +1.119e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : or(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda3732Var : BV:32
9 : eq(8, 4) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : eq(8, 2) : BOOL
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : ite(11, 12, 12) : BV:32
14 : ite(9, 10, 13) : BV:32
15 : lambda(8, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(7, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-y1-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1082307962 { 0x4082b57a +1.2116322e2 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2363193751
=counter_example_end
=global nodece 21 num_edges_traversed 1
=global nodece 21 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 22
=global nodece 22 nodece z3.ce648.num_edges_traversed2
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3.ce648 374511a72c88ef4799da196e19a9ff
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 1597215446 { 0x5f3392d6 +1.40291857e63 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1082307963 { 0x4082b57b +1.2116334e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2363193751
=counter_example_end
=global nodece 22 num_edges_traversed 2
=global nodece 22 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 23
=global nodece 23 nodece z3.ce677.num_edges_traversed0
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3.ce677 984d742b742e6867e9c19243f8fe1
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 819455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 819456; 819459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 819460; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 819456 { 0xc8100 +1.9768676e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda4198Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda4199Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 819456 { 0xc8100 +1.9768676e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 819459 { 0xc8103 +1.9768712e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2524163997
=counter_example_end
=global nodece 23 num_edges_traversed 0
=global nodece 23 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3v487.ce678.num_edges_traversed0
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3v487.ce678 3e58aa81e4fb1829e6c1b438d173a7
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L2%28%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 8388623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8388624; 8388627 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8388628; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8388624 { 0x800010 +1.190e130 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d
1 : Lambda4208Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda4209Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-2.L2%21%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-6.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-17.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-14.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L2%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8388624 { 0x800010 +1.190e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8388627 { 0x800013 +1.226e130 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2466630971
=counter_example_end
=global nodece 24 num_edges_traversed 0
=global nodece 24 nodece_visted_pcs: 
L2%7%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce934.num_edges_traversed2
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce934 a2b22dbdf20cd546446fb65dd1ceb99
=retaddr_const
1 : 1728220986 { 0x67028f3a +1.1999592e79 } : BV:32
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-23.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3621921087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3621921088; 3621921091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3621921092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3621921088 { 0xd7e22140 -673046208 -1.76663970e48 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-24.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1728220986 { 0x67028f3a +1.1999592e79 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 988310424 { 0x3ae86b98 +1.81578350e246 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1610438063 { 0x5ffd55af +1.97917735e64 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3621921088 { 0xd7e22140 -673046208 -1.76663970e48 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3621921091 { 0xd7e22143 -673046205 -1.76664006e48 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
4159958888
=counter_example_end
=global nodece 25 num_edges_traversed 2
=global nodece 25 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 26
=global nodece 26 nodece z3.ce908.num_edges_traversed2
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3.ce908 f96404a766e5876933e1651ea463bf
=retaddr_const
1 : 1782805415 { 0x6a4373a7 +1.52696692e85 } : BV:32
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-23.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L2%37%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-24.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1782805415 { 0x6a4373a7 +1.52696692e85 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 178137197 { 0xa9e286d +1.23560869e150 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1906735454 { 0x71a6795e +1.30057883e100 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
73581422
=counter_example_end
=global nodece 26 num_edges_traversed 2
=global nodece 26 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 27
=global nodece 27 nodece z3.ce834.num_edges_traversed2
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(epsilon)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3.ce834 32b9fe5d6aaa553682c8ed89275b989c
=retaddr_const
1 : 1050473044 { 0x3e9cf254 +1.22614526e254 } : BV:32
=input.spec-%var-n-1
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-23.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 596131520 { 0x23883ec0 +1.6441497e200 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-19.L2%37%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-24.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1983710295 { 0x763d0457 +1.47669494e109 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1050473044 { 0x3e9cf254 +1.22614526e254 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1326068835 { 0x4f0a3463 +1.7972371e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3616769743
=counter_example_end
=global nodece 27 num_edges_traversed 2
=global nodece 27 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 28
=global nodece 28 nodece z3.ce802.num_edges_traversed2
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(epsilon)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3.ce802 b883461e463c6f2e4a8a13384e63137f
=retaddr_const
1 : 851539830 { 0x32c17776 +1.51145815e230 } : BV:32
=input.spec-%var-n-1
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%var-i-0.L2%7%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-23.E0%0%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-0.L2%8%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-r-0.L2%7%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%var-n-0.L2%7%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L2%7%bbentry
1 : 2116854839 { 0x7e2ca437 +1.34876143e125 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-19.L2%37%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.spec-%tmpvar-22.L2%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L2%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-24.E0%0%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 808718016 { 0x30340ec0 +1.40670013e225 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 851539830 { 0x32c17776 +1.51145815e230 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1861203381 { 0x6eefb5b5 +1.87273275e94 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.L2%21%d.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-1.L2%21%d.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
492692086
=counter_example_end
=global nodece 28 num_edges_traversed 2
=global nodece 28 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-n-1 : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.spec-%var-n-0.L2%7%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.spec-%var-r-0.L2%7%bbentry : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-i-0.L2%7%bbentry
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.spec-%var-n-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.spec-%var-r-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-i-0.L2%7%bbentry
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.spec-%var-n-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.spec-%var-r-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3.ce55
=inductive-invariants point_set point z3.ce55 expr point z3.ce55
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 3 for input.spec-%var-i-0.L2%7%bbentry
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 4 for input.spec-%var-n-0.L2%7%bbentry
2147483648
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 5 for input.spec-%var-r-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 6 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 done
=inductive-invariants point_set point z3v487.ce56
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 3 for input.spec-%var-i-0.L2%7%bbentry
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 4 for input.spec-%var-n-0.L2%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 5 for input.spec-%var-r-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 6 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 done
=inductive-invariants point_set point z3v487.ce30
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 3 for input.spec-%var-i-0.L2%7%bbentry
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 4 for input.spec-%var-n-0.L2%7%bbentry
16843009
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 5 for input.spec-%var-r-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 6 for input.dst.llvm-%n
16843009
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce30 expr point z3v487.ce30 done
=inductive-invariants point_set point z3.ce29
=inductive-invariants point_set point z3.ce29 expr point z3.ce29
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 3 for input.spec-%var-i-0.L2%7%bbentry
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 4 for input.spec-%var-n-0.L2%7%bbentry
16843009
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 5 for input.spec-%var-r-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 6 for input.dst.llvm-%n
16843009
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce29 expr point z3.ce29 done
=inductive-invariants point_set point z3v487.ce96
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 3 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 4 for input.spec-%var-n-0.L2%7%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 5 for input.spec-%var-r-0.L2%7%bbentry
1
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 6 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce96 expr point z3v487.ce96 done
=inductive-invariants point_set point z3.ce149
=inductive-invariants point_set point z3.ce149 expr point z3.ce149
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 3 for input.spec-%var-i-0.L2%7%bbentry
3
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 4 for input.spec-%var-n-0.L2%7%bbentry
16843009
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 5 for input.spec-%var-r-0.L2%7%bbentry
3
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 6 for input.dst.llvm-%n
16843009
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce149 expr point z3.ce149 done
=inductive-invariants point_set point z3.ce110
=inductive-invariants point_set point z3.ce110 expr point z3.ce110
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 2 for input.spec-%var-n-1
16777216
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 3 for input.spec-%var-i-0.L2%7%bbentry
2
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 4 for input.spec-%var-n-0.L2%7%bbentry
16777216
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 5 for input.spec-%var-r-0.L2%7%bbentry
1
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 6 for input.dst.llvm-%n
16777216
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce110 expr point z3.ce110 done
=inductive-invariants point_set point z3v487.ce221
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 2 for input.spec-%var-n-1
134217728
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 3 for input.spec-%var-i-0.L2%7%bbentry
4
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 4 for input.spec-%var-n-0.L2%7%bbentry
134217728
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 5 for input.spec-%var-r-0.L2%7%bbentry
3
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 6 for input.dst.llvm-%n
134217728
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce221 expr point z3v487.ce221 done
=inductive-invariants point_set point z3.ce220
=inductive-invariants point_set point z3.ce220 expr point z3.ce220
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 3 for input.spec-%var-i-0.L2%7%bbentry
4
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 4 for input.spec-%var-n-0.L2%7%bbentry
1073741824
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 5 for input.spec-%var-r-0.L2%7%bbentry
3
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 6 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce220 expr point z3.ce220 done
=inductive-invariants point_set point z3.ce289
=inductive-invariants point_set point z3.ce289 expr point z3.ce289
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 2 for input.spec-%var-n-1
4
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 3 for input.spec-%var-i-0.L2%7%bbentry
5
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 4 for input.spec-%var-n-0.L2%7%bbentry
4
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 5 for input.spec-%var-r-0.L2%7%bbentry
4
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 6 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce289 expr point z3.ce289 done
=inductive-invariants point_set point z3v487.ce290
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 2 for input.spec-%var-n-1
16777216
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 3 for input.spec-%var-i-0.L2%7%bbentry
5
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 4 for input.spec-%var-n-0.L2%7%bbentry
16777216
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 5 for input.spec-%var-r-0.L2%7%bbentry
4
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 6 for input.dst.llvm-%n
16777216
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce290 expr point z3v487.ce290 done
=inductive-invariants point_set point z3.ce345
=inductive-invariants point_set point z3.ce345 expr point z3.ce345
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 3 for input.spec-%var-i-0.L2%7%bbentry
10
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 4 for input.spec-%var-n-0.L2%7%bbentry
1073741824
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 5 for input.spec-%var-r-0.L2%7%bbentry
11
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 6 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
11
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
10
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce345 expr point z3.ce345 done
=inductive-invariants point_set point z3v487.ce346
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 3 for input.spec-%var-i-0.L2%7%bbentry
10
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 4 for input.spec-%var-n-0.L2%7%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 5 for input.spec-%var-r-0.L2%7%bbentry
11
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 6 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
11
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
10
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce346 expr point z3v487.ce346 done
=inductive-invariants point_set point z3.ce414
=inductive-invariants point_set point z3.ce414 expr point z3.ce414
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 2 for input.spec-%var-n-1
10
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 3 for input.spec-%var-i-0.L2%7%bbentry
11
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 4 for input.spec-%var-n-0.L2%7%bbentry
10
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 5 for input.spec-%var-r-0.L2%7%bbentry
10
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 6 for input.dst.llvm-%n
10
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
10
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
11
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce414 expr point z3.ce414 done
=inductive-invariants point_set point z3v487.ce415
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 2 for input.spec-%var-n-1
134217728
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 3 for input.spec-%var-i-0.L2%7%bbentry
11
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 4 for input.spec-%var-n-0.L2%7%bbentry
134217728
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 5 for input.spec-%var-r-0.L2%7%bbentry
10
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 6 for input.dst.llvm-%n
134217728
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
10
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
11
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce415 expr point z3v487.ce415 done
=inductive-invariants point_set point z3.ce470
=inductive-invariants point_set point z3.ce470 expr point z3.ce470
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 2 for input.spec-%var-n-1
2147483647
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 3 for input.spec-%var-i-0.L2%7%bbentry
2147483648
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 4 for input.spec-%var-n-0.L2%7%bbentry
2147483647
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 5 for input.spec-%var-r-0.L2%7%bbentry
2147483647
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 6 for input.dst.llvm-%n
2147483647
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce470 expr point z3.ce470 done
=inductive-invariants point_set point z3v487.ce471
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 2 for input.spec-%var-n-1
2147483647
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 3 for input.spec-%var-i-0.L2%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 4 for input.spec-%var-n-0.L2%7%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 5 for input.spec-%var-r-0.L2%7%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 6 for input.dst.llvm-%n
2147483647
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce471 expr point z3v487.ce471 done
=inductive-invariants point_set point z3.ce539
=inductive-invariants point_set point z3.ce539 expr point z3.ce539
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 3 for input.spec-%var-i-0.L2%7%bbentry
2147483650
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 4 for input.spec-%var-n-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 5 for input.spec-%var-r-0.L2%7%bbentry
2147483649
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483649
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483650
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce539 expr point z3.ce539 done
=inductive-invariants point_set point z3v487.ce540
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 2 for input.spec-%var-n-1
2155872256
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 3 for input.spec-%var-i-0.L2%7%bbentry
2147483785
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 4 for input.spec-%var-n-0.L2%7%bbentry
2155872256
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 5 for input.spec-%var-r-0.L2%7%bbentry
2147483784
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 6 for input.dst.llvm-%n
2155872256
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483784
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483785
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce540 expr point z3v487.ce540 done
=inductive-invariants point_set point z3.ce608
=inductive-invariants point_set point z3.ce608 expr point z3.ce608
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 3 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 4 for input.spec-%var-n-0.L2%7%bbentry
0
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 5 for input.spec-%var-r-0.L2%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce608 expr point z3.ce608 done
=inductive-invariants point_set point z3v487.ce609
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 1 for and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))
1
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 3 for input.spec-%var-i-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 4 for input.spec-%var-n-0.L2%7%bbentry
0
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 5 for input.spec-%var-r-0.L2%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce609 expr point z3v487.ce609 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L2%7%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L2%7%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-n-1 : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.spec-%var-n-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.spec-%var-r-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : input.spec-%var-r-0.L2%7%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.6
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.4
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-n-0.L2%7%bbentry : BV:32
=predicate done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce29
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce149
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce110
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=4; number of preds=4
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 7->0; 8->0; 
6
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->1; 7->0; 8->0; 
7
-2147483648->0; 2->0; 3->0; 4->0; 5->4294967295; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 3
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce149
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce220
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce289
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3.ce345
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3.ce414
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3.ce470
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 7: z3.ce608
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=8; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 10 { 0xa +1.119e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.spec-%var-n-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce55
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce29
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=3; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 10 { 0xa +1.119e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name src-branches-const-ineq
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.spec-%var-r-0.L2%7%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce149
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce289
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce345
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3.ce539
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=5; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 10 { 0xa +1.119e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 6
1 : input.dst.llvm-%n : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3.ce55
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce29
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=3; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 10 { 0xa +1.119e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3.ce149
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3.ce220
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3.ce289
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 4: z3.ce345
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 5: z3.ce414
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 6: z3.ce470
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 7: z3.ce608
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=8; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 3
1 : 10 { 0xa +1.119e129 } : BV:32
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini name dst-ineq
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini expr_group_type HOUDINI with 8 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 16
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ce 1: z3.ce29
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini summary: number of exprs=8; number of visited CEs=2; number of preds=0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini name local-sizes-are-equal
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini expr_group_type HOUDINI with 0 exprs
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini predicate_set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini is assumed eqclass : 0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 0: z3.ce3
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ces set done
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L2%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-24.E0%0%d : BV:32
2 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%7%bbentry_Lfor.cond%1%bbentry.to_pcL2%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-0.L2%7%bbentry : BV:32
6 : input.spec-%var-n-0.L2%7%bbentry : BV:32
7 : bvsgt(5, 6) : BOOL
8 : Lambda14Var : BV:32
9 : 0 { 0x0 } : BOOL
10 : lambda(8, 9) : FUNCTION[BV:32 -> BOOL]
11 : Lambda15Var : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : lambda(11, 12) : FUNCTION[BV:32 -> BV:32]
14 : map(10, 13) : MAP[BV:32 -> BV:32]
15 : sym_const(14) : MAP[BV:32 -> BV:32]
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 5) : BV:32
19 : map_set(15, 16, 18) : MAP[BV:32 -> BV:32]
20 : 10 { 0xa +1.119e129 } : BV:32
21 : input.spec-%var-r-0.L2%7%bbentry : BV:32
22 : bvadd(5, 21) : BV:32
23 : map_set(19, 20, 22) : MAP[BV:32 -> BV:32]
24 : map_get(23, 20) : SUM[UNIT,BV:32]
25 : 1 { 0x1 +1.0e1025 } : INT
26 : sum_is(24, 25) : BOOL
27 : map_get(23, 16) : SUM[UNIT,BV:32]
28 : sum_is(27, 25) : BOOL
29 : and(26, 28) : BOOL
30 : andnot1(7, 29) : BOOL
31 : or(4, 30) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%7%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
4 : input.spec-%var-i-0.L2%7%bbentry : BV:32
5 : input.spec-%var-n-0.L2%7%bbentry : BV:32
6 : bvsgt(4, 5) : BOOL
7 : Lambda14Var : BV:32
8 : 0 { 0x0 } : BOOL
9 : lambda(7, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda15Var : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : lambda(10, 11) : FUNCTION[BV:32 -> BV:32]
13 : map(9, 12) : MAP[BV:32 -> BV:32]
14 : sym_const(13) : MAP[BV:32 -> BV:32]
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4) : BV:32
18 : map_set(14, 15, 17) : MAP[BV:32 -> BV:32]
19 : 10 { 0xa +1.119e129 } : BV:32
20 : input.spec-%var-r-0.L2%7%bbentry : BV:32
21 : bvadd(4, 20) : BV:32
22 : map_set(18, 19, 21) : MAP[BV:32 -> BV:32]
23 : map_get(22, 19) : SUM[UNIT,BV:32]
24 : 0 { 0x0 +1.0e1025 } : INT
25 : sum_is(23, 24) : BOOL
26 : 1 { 0x1 +1.0e1025 } : INT
27 : sum_is(23, 26) : BOOL
28 : map_get(22, 15) : SUM[UNIT,BV:32]
29 : sum_is(28, 24) : BOOL
30 : and(27, 29) : BOOL
31 : or(25, 30) : BOOL
32 : andnot1(6, 31) : BOOL
33 : or(6, 32) : BOOL
34 : or(3, 33) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-24.E0%0%d : BV:32
2 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L2%7%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-n-0.L2%7%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-i-0.L2%7%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%var-r-0.L2%7%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-n-1 : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140349 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140350 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140418 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140351 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140419 : 4 { 0x4 +1.0e1025 } : INT
140338 : 0 { 0x0 } : BOOL
140420 : select(140349, 140350, 140418, 140351, 140419, 140338) : BV:32
=RhsExpr
140369 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
equal-arg0
=LhsExpr
140273 : input.spec-%var-n-1 : BV:32
140369 : input.dst.llvm-%n : BV:32
140624 : eq(140273, 140369) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
140608 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140609 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140610 : bvule(140608, 140609) : BOOL
140287 : 4 { 0x4 +1.47e129 } : BV:32
140611 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140612 : bvadd(140287, 140611) : BV:32
140613 : bvadd(140608, 140612) : BV:32
140614 : eq(140609, 140613) : BOOL
140615 : and(140610, 140614) : BOOL
140351 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140616 : 3 { 0x3 +1.35e129 } : BV:32
140617 : bvand(140351, 140616) : BV:32
140277 : 0 { 0x0 +1.0e129 } : BV:32
140618 : eq(140617, 140277) : BOOL
140619 : and(140615, 140618) : BOOL
140620 : eq(140351, 140608) : BOOL
140621 : and(140619, 140620) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>L2%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L2%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L2%7%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
