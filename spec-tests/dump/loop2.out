argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --smt-query-timeout=5
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=loop2.proof
argv[9] = --spec-iospecs=loop2.iospecs
argv[10] = loop2.spec
argv[11] = loop2.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.4087252
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/loop2.c
argv[10] = -o
argv[11] = par_tmpdir/loop2.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/loop2.spec.etfg
argv[11] = par_tmpdir/loop2.c.bc
argv[12] = -o
argv[13] = par_tmpdir/loop2.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 68 time spent: 0:0:0 [0.000124s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 119 time spent: 0:0:0 [0.000237s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 641 time spent: 0:0:0 [0.002587s total; 0.000004 per start]
expr_simplify_solver: num_starts 56 time spent: 0:0:0 [0.006005s total; 0.000107 per start]
expr_simplify_syntactic: num_starts 56 time spent: 0:0:0 [0.002067s total; 0.000037 per start]
expr_simplify_using_lhs_set_helper: num_starts 73 time spent: 0:0:0 [0.017926s total; 0.000246 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 168 time spent: 0:0:0 [0.017731s total; 0.000106 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 48 time spent: 0:0:0 [0.000228s total; 0.000005 per start]
expr_simplify_not: num_starts 2 time spent: 0:0:0 [0.000007s total; 0.000003 per start]
canonicalize_expr_tree: num_starts 39 time spent: 0:0:0 [0.000559s total; 0.000014 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1 time spent: 0:0:0 [0.000003s total; 0.000003 per start]
get_arithmetic_addsub_atoms: num_starts 44 time spent: 0:0:0 [0.000047s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 60 time spent: 0:0:0 [0.000712s total; 0.000012 per start]
expr_is_consts_struct_constant: num_starts 131 time spent: 0:0:0 [0.000127s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 1461 time spent: 0:0:0 [0.019417s total; 0.000013 per start]
expr_do_simplify_helper_cache: num_starts 1461 time spent: 0:0:0 [0.001014s total; 0.000001 per start]
array_constant_equals: num_starts 3 time spent: 0:0:0 [0.000009s total; 0.000003 per start]
sort_dfa_canonical: num_starts 142151 time spent: 0:0:1 [1.270200s total; 0.000009 per start]
expr_convert_to_iexpr: num_starts 24 time spent: 0:0:0 [0.007469s total; 0.000311 per start]
combo_dfa_xfer_and_meet: num_starts 65 time spent: 0:0:0 [0.046566s total; 0.000716 per start]
alias_val_xfer_and_meet: num_starts 65 time spent: 0:0:0 [0.014549s total; 0.000224 per start]
get_sprel_map_from_avail_exprs: num_starts 86 time spent: 0:0:0 [0.005685s total; 0.000066 per start]
update_memlabels_for_memslot_locs: num_starts 20 time spent: 0:0:0 [0.000088s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 130 time spent: 0:0:0 [0.005419s total; 0.000042 per start]
compute_simplified_loc_exprs_for_edge: num_starts 382 time spent: 0:0:0 [0.026467s total; 0.000069 per start]
compute_locs_definitely_written_on_edge: num_starts 130 time spent: 0:0:0 [0.000055s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 28 time spent: 0:0:0 [0.005368s total; 0.000192 per start]
edge_update_memlabel_map_for_mlvars: num_starts 65 time spent: 0:0:0 [0.000409s total; 0.000006 per start]
add_new_locs_based_on_edge: num_starts 65 time spent: 0:0:0 [0.008905s total; 0.000137 per start]
expand_locset_to_include_slots_for_memmask: num_starts 45 time spent: 0:0:0 [0.000109s total; 0.000002 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_paths_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 1e-05s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 1.7e-05s (num_starts 22; 0.0000s/start)
get_intersected_lr_status.: 1.7e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 2e-05s (num_starts 1; 0.0000s/start)
lr_status_meet.: 2.3e-05s (num_starts 31; 0.0000s/start)
add_extra_node_at_start_pc.: 2.8e-05s (num_starts 1; 0.0000s/start)
expr_is_callee_save_const.: 3.4e-05s (num_starts 26; 0.0000s/start)
context_constructor.solver.: 4.1e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 5e-05s (num_starts 1; 0.0001s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.5e-05s (num_starts 2; 0.0000s/start)
graph_locs_add_all_indvars.: 7.7e-05s (num_starts 1; 0.0001s/start)
graph_locs_add_all_specvars.: 7.8e-05s (num_starts 1; 0.0001s/start)
compute_sprel_relations.: 8.6e-05s (num_starts 1; 0.0001s/start)
propagate_sprels.: 9.3e-05s (num_starts 1; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.0001s (num_starts 33; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.0001s (num_starts 10; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000109s (num_starts 5; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000122s (num_starts 1; 0.0001s/start)
main.3.: 0.000135s (num_starts 1; 0.0001s/start)
graph_locs_add_local_vars_for_edge.: 0.000137s (num_starts 33; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000165s (num_starts 1; 0.0002s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000182s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000189s (num_starts 228; 0.0000s/start)
expr_represents_llvm_undef.: 0.000191s (num_starts 28; 0.0000s/start)
populate_locid2expr_map.: 0.000216s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000308s (num_starts 1; 0.0003s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000313s (num_starts 65; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.000329s (num_starts 65; 0.0000s/start)
canonicalize_llvm_nextpcs.: 0.000347s (num_starts 1; 0.0003s/start)
graph_locs_add_all_llvmvars.: 0.000364s (num_starts 1; 0.0004s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000404s (num_starts 1; 0.0004s/start)
def_analysis::xfer_and_meet.: 0.000421s (num_starts 66; 0.0000s/start)
compute_z3_expr.: 0.000427s (num_starts 28; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000448s (num_starts 759; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.000453s (num_starts 45; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000501s (num_starts 1; 0.0005s/start)
expr_linear_relation_holds::visit.var.: 0.000554s (num_starts 28; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000654s (num_starts 65; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.0009s (num_starts 1; 0.0009s/start)
populate_simplified_to_state.: 0.001009s (num_starts 3; 0.0003s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.001067s (num_starts 552; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001246s (num_starts 51; 0.0000s/start)
create_closure_matrix.: 0.001343s (num_starts 85; 0.0000s/start)
query:convert_from_z3.: 0.001387s (num_starts 28; 0.0000s/start)
compute_lr_status_for_expr.: 0.001498s (num_starts 36; 0.0000s/start)
graph_visit_exprs.: 0.001522s (num_starts 4; 0.0004s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.001559s (num_starts 31; 0.0001s/start)
query:convert_to_z3.: 0.001567s (num_starts 28; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.001623s (num_starts 31; 0.0001s/start)
tfg::collect_assumes_around_edge.: 0.00168s (num_starts 119; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002076s (num_starts 1; 0.0021s/start)
graph_with_locs_constructor.src.spec.foo.: 0.002293s (num_starts 1; 0.0023s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.002849s (num_starts 1; 0.0028s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.003611s (num_starts 65; 0.0001s/start)
query:simplify-z3.: 0.004044s (num_starts 66; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.004234s (num_starts 2; 0.0021s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.004245s (num_starts 1; 0.0042s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.004261s (num_starts 1; 0.0043s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.004417s (num_starts 1; 0.0044s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.004499s (num_starts 68; 0.0001s/start)
compute_new_lr_status_on_locs.: 0.004547s (num_starts 65; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.004592s (num_starts 2; 0.0023s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.004593s (num_starts 1; 0.0046s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.004781s (num_starts 65; 0.0001s/start)
tfg::populate_loc_definedness.: 0.004819s (num_starts 2; 0.0024s/start)
populate_dominator_and_postdominator_relations.: 0.005566s (num_starts 2; 0.0028s/start)
graph_to_stream.: 0.005907s (num_starts 1; 0.0059s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.006012s (num_starts 65; 0.0001s/start)
populate_branch_affecting_locs.: 0.006213s (num_starts 2; 0.0031s/start)
populate_simplified_assets.: 0.006261s (num_starts 6; 0.0010s/start)
graph_identify_back_edges.: 0.006573s (num_starts 6; 0.0011s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.006606s (num_starts 1; 0.0066s/start)
create_sp_version_relations_lattice_at_pc.: 0.006827s (num_starts 85; 0.0001s/start)
graph_identify_natural_loops.: 0.006895s (num_starts 6; 0.0011s/start)
populate_transitive_closure.: 0.006989s (num_starts 1; 0.0070s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.007116s (num_starts 1; 0.0071s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.007943s (num_starts 641; 0.0000s/start)
avail_exprs_create_submap.: 0.008336s (num_starts 195; 0.0000s/start)
compute_regions.: 0.010859s (num_starts 6; 0.0018s/start)
find_dominators.: 0.011405s (num_starts 10; 0.0011s/start)
tfg_preprocess.dst.llvm.foo.: 0.012094s (num_starts 1; 0.0121s/start)
tfg::tfg_preprocess.: 0.012097s (num_starts 1; 0.0121s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.013096s (num_starts 65; 0.0002s/start)
populate_loc_liveness.: 0.013771s (num_starts 2; 0.0069s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.014669s (num_starts 65; 0.0002s/start)
get_tfg.: 0.016124s (num_starts 1; 0.0161s/start)
get_function_tfg_map.foo.: 0.016155s (num_starts 1; 0.0162s/start)
get_function_tfg_map.: 0.016158s (num_starts 1; 0.0162s/start)
populate_locs_potentially_modified_on_edge.: 0.017603s (num_starts 3; 0.0059s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.017999s (num_starts 73; 0.0002s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.018511s (num_starts 1; 0.0185s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.018517s (num_starts 1; 0.0185s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.018522s (num_starts 1; 0.0185s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.018527s (num_starts 1; 0.0185s/start)
tfg_constructor.src.spec.foo.: 0.018531s (num_starts 1; 0.0185s/start)
main.2.: 0.018966s (num_starts 1; 0.0190s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.021911s (num_starts 641; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.022876s (num_starts 641; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.023876s (num_starts 3; 0.0080s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.026398s (num_starts 641; 0.0000s/start)
tfg_postprocess_after_pointsto_analysis.: 0.038494s (num_starts 1; 0.0385s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.04667s (num_starts 65; 0.0007s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.047777s (num_starts 1; 0.0478s/start)
ftmap_run_pointsto_analysis.: 0.10621s (num_starts 1; 0.1062s/start)
parse_consts_db.: 7.28154s (num_starts 1; 7.2815s/start)
main.: 7.49124s (num_starts 1; 7.4912s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:15 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:22 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:22 : Reading in SPEC-LLVM I/O specification from file loop2.iospecs...</MSG>
<MSG>0:22 : Computing equivalence for function: foo...</MSG>
<MSG>0:22 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:22 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:22 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:22 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:23 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%9%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%9%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%9%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG foo: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG foo created 3 possibilities in group foo.A...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Adding node L3%6%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A2: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A2: Added the 2 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%n
      2.: 0                     ==  input.spec-%var-r-0.L3%6%bbentry
      3.: 0                     ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  input.spec-%var-i-0.L3%6%bbentry
      5.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      6.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:23 : Added correlation to the product-TFG foo.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%n
      2.: 0                     ==  input.spec-%var-r-0.L3%6%bbentry
      3.: 0                     ==  input.spec-%var-n-0.L3%6%bbentry
      4.: 1                     ==  input.spec-%var-i-0.L3%6%bbentry
      5.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      6.: 0                     ==  input.spec-%var-n-1
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-n-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      1.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      2.: bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3


<MSG>0:23 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial4-prove3...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%6%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27


<MSG>0:23 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:23 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4942:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 1                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  input.spec-%var-r-0.L3%6%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
      5.: 1                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    4 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      3.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      3.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27


<MSG>0:23 : foo.A2 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:23 : foo.A2 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:23 : product-TFG foo.A2: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Considering 2 paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Found 2 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : product-TFG foo.A2: Found 2 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : product-TFG foo.A2 created 2 possibilities in group foo.A2.B...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A2.B2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A2.B2 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A2.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A2.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A2.B2: Propagated 3 out of 5 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A2.B2: Added the 3 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A2.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A2.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A2.B2: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A2.B2 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce151
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    1 preds:
      0.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce151
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce151
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27


<MSG>0:23 : Added correlation to the product-TFG foo.A2.B2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A2.B2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvuge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce151
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    1 preds:
      0.: bvsge(input.spec-%var-r-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce151
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvuge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce151
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27


<MSG>0:23 : foo.A2.B2: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove4...</MSG>
<MSG>0:23 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove3...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove4...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27


<MSG>0:24 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:24 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 7 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial2-prove4...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:24 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27


<MSG>0:24 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:24 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4942:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27


<MSG>0:24 : foo.A2.B2 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:24 : foo.A2.B2 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:24 : product-TFG foo.A2.B2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A2.B2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : product-TFG foo.A2.B2 created 1 possibilities in group foo.A2.B2.C...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 7 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L3%6%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:24 : Adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : foo.A2.B2.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Propagated 6 out of 17 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:24 : foo.A2.B2.C1: Added the 6 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:24 : foo.A2.B2.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : Done adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:24 : Done adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:24 : Added correlation to the product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG foo.A2.B2.C1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 21) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 7 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:24 : foo.A2.B2.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:24 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:24 : foo.A2.B2.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:24 : foo.A2.B2.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4942:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:24 : foo.A2.B2.C1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:24 : foo.A2.B2.C1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:24 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:24 : Checking equivalence proof...</MSG>
<MSG>0:25 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (8 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [7]: 2-->input.spec-%var-n-1 ; 3-->input.spec-%var-i-0.L3%6%bbentry ; 4-->input.spec-%var-n-0.L3%6%bbentry ; 5-->input.spec-%var-r-0.L3%6%bbentry ; 6-->input.dst.llvm-%n ; 7-->input.dst.llvm-%r.0.Lfor.cond%1%bbentry ; 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-r-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%r.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-n-1, 4294967295))  ==  input.spec-%var-n-0.L3%6%bbentry
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce27      2.:z3.ce108      3.:z3.ce151
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 3-->input.spec-%var-i-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-n-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-r-0.L3%6%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce281
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce51      2.:z3.ce27
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce151      2.:z3.ce208      3.:z3.ce354
    eqclass 7:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 9-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 15-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 16-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    0 preds:
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce3      1.:z3.ce27

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 21) => A (line 3 at column 21) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 21) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 21))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 7 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 3 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 2.32s, query:smt.: 0.695574s (num_starts 32; 0.0217s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 1.53103s (num_starts 61; 0.0251s/start)ftmap_run_pointsto_analysis.: 0.151715s (num_starts 2; 0.0759s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 2e-06s (num_starts 2; 0.0000s/start)
compute_tfg_pred_eqclass.: 2e-06s (num_starts 1; 0.0000s/start)
prune_dst_memslots.: 4e-06s (num_starts 1; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 4e-06s (num_starts 3; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 5e-06s (num_starts 5; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 8e-06s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 1.1e-05s (num_starts 1; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 1.2e-05s (num_starts 19; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1.3e-05s (num_starts 19; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 1.3e-05s (num_starts 3; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 1.3e-05s (num_starts 12; 0.0000s/start)
remove_complex_bv_exprs.: 1.3e-05s (num_starts 1; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 1.3e-05s (num_starts 1; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.4e-05s (num_starts 5; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 1.4e-05s (num_starts 1; 0.0000s/start)
ce_perform_memory_fuzzing.: 2.2e-05s (num_starts 16; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 2.5e-05s (num_starts 1; 0.0000s/start)
prove_trivial.: 2.7e-05s (num_starts 30; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes.: 2.9e-05s (num_starts 1; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 3e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 3.6e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 3.7e-05s (num_starts 3; 0.0000s/start)
get_intersected_lr_status.: 3.8e-05s (num_starts 2; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 6.1e-05s (num_starts 3; 0.0000s/start)
determinize_value_expr_map.: 6.3e-05s (num_starts 28; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 7.8e-05s (num_starts 1; 0.0001s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 8e-05s (num_starts 15; 0.0000s/start)
expr_is_hidden_reg.: 8.2e-05s (num_starts 94; 0.0000s/start)
lr_status_meet.: 0.000103s (num_starts 180; 0.0000s/start)
expr_is_callee_save_const.: 0.000105s (num_starts 106; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000107s (num_starts 16; 0.0000s/start)
collect_dst_to_src_submap_preds.: 0.000112s (num_starts 61; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.00012s (num_starts 70; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.00015s (num_starts 40; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.000151s (num_starts 2; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000157s (num_starts 3; 0.0001s/start)
aliasing_constraints.convert_to_expr.: 0.000161s (num_starts 31; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000164s (num_starts 1; 0.0002s/start)
graph_locs_add_all_indvars.: 0.000166s (num_starts 2; 0.0001s/start)
compute_bv_bool_eqclass.: 0.000173s (num_starts 1; 0.0002s/start)
graph_locs_add_exvregs_for_edge.: 0.000179s (num_starts 22; 0.0000s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.000181s (num_starts 31; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000183s (num_starts 40; 0.0000s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000193s (num_starts 40; 0.0000s/start)
proof_query_is_trivial_helper.: 0.000194s (num_starts 82; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000198s (num_starts 2; 0.0001s/start)
populate_locid2expr_map.: 0.000198s (num_starts 2; 0.0001s/start)
compute_sprel_relations.: 0.000225s (num_starts 2; 0.0001s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000229s (num_starts 6; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000235s (num_starts 15; 0.0000s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000238s (num_starts 1; 0.0002s/start)
propagate_sprels.: 0.000241s (num_starts 2; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000254s (num_starts 27; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000258s (num_starts 22; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000271s (num_starts 509; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000278s (num_starts 2; 0.0001s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000284s (num_starts 9; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000314s (num_starts 1; 0.0003s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000315s (num_starts 1; 0.0003s/start)
collect_assumes_around_edge.: 0.000405s (num_starts 3; 0.0001s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.000437s (num_starts 2; 0.0002s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.000444s (num_starts 90; 0.0000s/start)
identify_address_taken_local_variables.: 0.000457s (num_starts 1; 0.0005s/start)
def_analysis::xfer_and_meet.: 0.00046s (num_starts 31; 0.0000s/start)
set_result_and_counter_example.: 0.000469s (num_starts 32; 0.0000s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.000474s (num_starts 90; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000483s (num_starts 2; 0.0002s/start)
parse_yices_model.: 0.000575s (num_starts 1; 0.0006s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.000585s (num_starts 40; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000595s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000597s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000599s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.0006s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.0006s (num_starts 1; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000604s (num_starts 1; 0.0006s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.000612s (num_starts 19; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000616s (num_starts 1; 0.0006s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000628s (num_starts 8; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000628s (num_starts 1; 0.0006s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000657s (num_starts 62; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000668s (num_starts 50; 0.0000s/start)
ldr_decomposition.: 0.000675s (num_starts 15; 0.0000s/start)
expr_represents_llvm_undef.: 0.000677s (num_starts 110; 0.0000s/start)
construct_linear_combination_exprs.: 0.00068s (num_starts 28; 0.0000s/start)
graph_with_guessing_sync_preds.: 0.000686s (num_starts 61; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000708s (num_starts 1; 0.0007s/start)
proof_query_is_trivial.: 0.000722s (num_starts 70; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000734s (num_starts 79; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.00074s (num_starts 1; 0.0007s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.00075s (num_starts 3; 0.0003s/start)
populate_dominator_and_postdominator_relations.: 0.000772s (num_starts 2; 0.0004s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000787s (num_starts 5; 0.0002s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.000803s (num_starts 15; 0.0001s/start)
pth_collect_preds_using_atom_func.: 0.000847s (num_starts 64; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.000853s (num_starts 1; 0.0009s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.000855s (num_starts 31; 0.0000s/start)
populate_simplified_to_state.: 0.000871s (num_starts 3; 0.0003s/start)
create_closure_matrix.: 0.000914s (num_starts 102; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.000933s (num_starts 5; 0.0002s/start)
tfg_edge_composition_get_assumes.: 0.000952s (num_starts 64; 0.0000s/start)
interesting_wp_exprs_apply_trans_funs.: 0.000962s (num_starts 5; 0.0002s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001048s (num_starts 2; 0.0005s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.001049s (num_starts 1; 0.0010s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.001195s (num_starts 79; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.001204s (num_starts 5; 0.0002s/start)
parse_cvc4_model.: 0.001222s (num_starts 1; 0.0012s/start)
removeMostPromising.: 0.001368s (num_starts 10; 0.0001s/start)
graph_locs_add_all_specvars.: 0.001377s (num_starts 2; 0.0007s/start)
bv_const_ref_map2expr_map.: 0.001434s (num_starts 28; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.001801s (num_starts 3; 0.0006s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.001873s (num_starts 40; 0.0000s/start)
populate_simplified_assets.: 0.001929s (num_starts 6; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.001934s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.001936s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-unsigned;-trivial.: 0.00194s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-trivial.: 0.001944s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.001953s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-unsigned.: 0.00196s (num_starts 2; 0.0010s/start)
graph_visit_exprs.: 0.001964s (num_starts 3; 0.0007s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.00197s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.001976s (num_starts 2; 0.0010s/start)
expr_linear_relation_holds::visit.var.: 0.002102s (num_starts 110; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.002139s (num_starts 1194; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.00216s (num_starts 3; 0.0007s/start)
generate_aliasing_constraints_from_expr.: 0.00219s (num_starts 712; 0.0000s/start)
tfg::populate_loc_definedness.: 0.00228s (num_starts 3; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.002342s (num_starts 2; 0.0012s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.002476s (num_starts 3; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002689s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.002692s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-trivial.: 0.002697s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002701s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.002738s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.002742s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed;-trivial.: 0.00275s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.002754s (num_starts 3; 0.0009s/start)
get_sprel_map_pair_at_pc.: 0.002764s (num_starts 40; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002766s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed.: 0.002776s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002779s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00278s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002782s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.002785s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002794s (num_starts 3; 0.0009s/start)
graph_visit_exprs_and_keys.: 0.002885s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.00296s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.002965s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned;-trivial.: 0.002969s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.002974s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.002988s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned.: 0.002998s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 0.003009s (num_starts 3; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.003019s (num_starts 3; 0.0010s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.00317s (num_starts 1; 0.0032s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.003388s (num_starts 221; 0.0000s/start)
graph_identify_back_edges.: 0.003415s (num_starts 21; 0.0002s/start)
populate_locs_potentially_modified_on_edge.: 0.003443s (num_starts 3; 0.0011s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.003583s (num_starts 64; 0.0001s/start)
find_dominators.: 0.003671s (num_starts 25; 0.0001s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.003716s (num_starts 31; 0.0001s/start)
graph_identify_natural_loops.: 0.003723s (num_starts 21; 0.0002s/start)
compute_ssa_vars_renaming_map.: 0.003817s (num_starts 2; 0.0019s/start)
pth_collect_simplified_preds_using_atom_func.: 0.004157s (num_starts 61; 0.0001s/start)
populate_branch_affecting_locs.: 0.004171s (num_starts 3; 0.0014s/start)
create_sp_version_relations_lattice_at_pc.: 0.004281s (num_starts 102; 0.0000s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.004386s (num_starts 31; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.004546s (num_starts 125; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-trivial.: 0.004663s (num_starts 4; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004668s (num_starts 4; 0.0012s/start)
ldr_decompose_and_linear_solve.: 0.00483s (num_starts 15; 0.0003s/start)
check_node_stability_after_CE_addition.: 0.004909s (num_starts 32; 0.0002s/start)
bv_linear_solve.: 0.005119s (num_starts 15; 0.0003s/start)
compute_expr_eqclasses_at_pc.: 0.00513s (num_starts 1; 0.0051s/start)
query:bv_solve.: 0.005212s (num_starts 15; 0.0003s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.005339s (num_starts 31; 0.0002s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.005384s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.00555s (num_starts 2; 0.0028s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.005562s (num_starts 3; 0.0019s/start)
cg_add_node.: 0.00573s (num_starts 3; 0.0019s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.005918s (num_starts 105; 0.0001s/start)
predicate_canonicalized.: 0.006205s (num_starts 28; 0.0002s/start)
bv_solve_returning_intermediate_structures.: 0.006218s (num_starts 15; 0.0004s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.006246s (num_starts 42; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.006432s (num_starts 220; 0.0000s/start)
counter_example_falsifies_preds.: 0.006637s (num_starts 58; 0.0001s/start)
populate_transitive_closure.: 0.006697s (num_starts 27; 0.0002s/start)
collect_assumes_around_path_helper.: 0.006733s (num_starts 90; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.006976s (num_starts 6; 0.0012s/start)
graph_with_paths::collect_assumes_around_path.: 0.007028s (num_starts 90; 0.0001s/start)
expr_substitute_using_available_exprs_submap.: 0.007089s (num_starts 186; 0.0000s/start)
bvsolve_cache_query.miss1.: 0.007121s (num_starts 15; 0.0005s/start)
bvsolve_cache_query.: 0.007257s (num_starts 15; 0.0005s/start)
create_new_corr_graph_edge.new_node.: 0.007644s (num_starts 2; 0.0038s/start)
compute_lr_status_for_expr.: 0.007667s (num_starts 195; 0.0000s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.007726s (num_starts 20; 0.0004s/start)
create_new_corr_graph_edge.: 0.007786s (num_starts 3; 0.0026s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.007787s (num_starts 20; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-trivial.: 0.007879s (num_starts 4; 0.0020s/start)
compute_vars_reaching_definitions.: 0.007989s (num_starts 2; 0.0040s/start)
lhs_set_sort.: 0.008142s (num_starts 40; 0.0002s/start)
tfg_suffixpath_get_expr_helper.: 0.008201s (num_starts 20; 0.0004s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.008344s (num_starts 180; 0.0000s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.008652s (num_starts 180; 0.0000s/start)
compute_regions.: 0.008724s (num_starts 21; 0.0004s/start)
solve_for_bv_points.: 0.008859s (num_starts 15; 0.0006s/start)
collect_aliasing_constraints_around_path_helper.: 0.009293s (num_starts 106; 0.0001s/start)
query:convert_from_z3.: 0.009399s (num_starts 154; 0.0001s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.009668s (num_starts 18; 0.0005s/start)
collect_aliasing_constraints_around_path.: 0.009824s (num_starts 66; 0.0001s/start)
gen_pred_from_coeff_row.simplify.: 0.009911s (num_starts 28; 0.0004s/start)
collect_inductive_preds_around_path.: 0.009975s (num_starts 61; 0.0002s/start)
query:convert_to_z3.: 0.010052s (num_starts 154; 0.0001s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.010699s (num_starts 15; 0.0007s/start)
counter_example_satisfies_preds.: 0.010724s (num_starts 354; 0.0000s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.010927s (num_starts 4; 0.0027s/start)
get_next_potential_correlations.: 0.010928s (num_starts 3; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011418s (num_starts 3; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011419s (num_starts 3; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.01143s (num_starts 3; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess.: 0.011444s (num_starts 3; 0.0038s/start)
populate_loc_liveness.: 0.011882s (num_starts 3; 0.0040s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.011945s (num_starts 79; 0.0002s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.01241s (num_starts 3; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-trivial.: 0.013823s (num_starts 6; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.013835s (num_starts 6; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.014182s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.014188s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.014266s (num_starts 4; 0.0036s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.014979s (num_starts 79; 0.0002s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.015604s (num_starts 79; 0.0002s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.015688s (num_starts 1; 0.0157s/start)
counter_example_evaluate_preds.: 0.016408s (num_starts 412; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.016567s (num_starts 6; 0.0028s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.017231s (num_starts 120; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.017262s (num_starts 17; 0.0010s/start)
compute_new_lr_status_on_locs.: 0.018165s (num_starts 79; 0.0002s/start)
guarded_predicate_set_and.: 0.018449s (num_starts 31; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.018465s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.018468s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.018472s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.018474s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.018477s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.018487s (num_starts 1; 0.0185s/start)
do_ssa_transformation.: 0.018729s (num_starts 2; 0.0094s/start)
tfg_relax_pointsto_vals_on_edge.: 0.018779s (num_starts 17; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities..: 0.019094s (num_starts 2; 0.0095s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.019106s (num_starts 2; 0.0096s/start)
gen_pred_from_coeff_row.: 0.019295s (num_starts 28; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.019331s (num_starts 8; 0.0024s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.019476s (num_starts 1024; 0.0000s/start)
compute_preds_for_bv_points.: 0.01956s (num_starts 5; 0.0039s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.0196s (num_starts 9; 0.0022s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.02093s (num_starts 89; 0.0002s/start)
avail_exprs_create_submap.: 0.021454s (num_starts 237; 0.0001s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.021573s (num_starts 16; 0.0013s/start)
graph_to_stream.: 0.021842s (num_starts 4; 0.0055s/start)
get_unrolled_paths_from.: 0.02253s (num_starts 15; 0.0015s/start)
apply_mask_and_overlay_array_constant.: 0.02276s (num_starts 16; 0.0014s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.022906s (num_starts 59; 0.0004s/start)
put_smtlib_string_in_file.: 0.024636s (num_starts 64; 0.0004s/start)
tfg_postprocess_after_pointsto_analysis.: 0.02577s (num_starts 2; 0.0129s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.026332s (num_starts 14; 0.0019s/start)
query:simplify-z3.: 0.027948s (num_starts 316; 0.0001s/start)
compute_z3_expr.: 0.029507s (num_starts 186; 0.0002s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.033483s (num_starts 12; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.034157s (num_starts 1; 0.0342s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.034166s (num_starts 1; 0.0342s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.034175s (num_starts 1; 0.0342s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.035373s (num_starts 40; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess.: 0.036968s (num_starts 2; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.038416s (num_starts 1; 0.0384s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.03842s (num_starts 1; 0.0384s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.038428s (num_starts 1; 0.0384s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess.: 0.038432s (num_starts 1; 0.0384s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.038664s (num_starts 1; 0.0387s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.039036s (num_starts 40; 0.0010s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.039224s (num_starts 1064; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.040799s (num_starts 1024; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.041368s (num_starts 79; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044951s (num_starts 2; 0.0225s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.044962s (num_starts 2; 0.0225s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.044976s (num_starts 2; 0.0225s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond.: 0.044983s (num_starts 2; 0.0225s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.049814s (num_starts 78; 0.0006s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.050984s (num_starts 1024; 0.0000s/start)
decide_hoare_triple_helper;-trivial.: 0.052876s (num_starts 30; 0.0018s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.055761s (num_starts 62; 0.0009s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.063875s (num_starts 360; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.065921s (num_starts 2; 0.0330s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067472s (num_starts 1; 0.0675s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067474s (num_starts 1; 0.0675s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.067483s (num_starts 1; 0.0675s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false.: 0.067487s (num_starts 1; 0.0675s/start)
graph_ec_apply_trans_funs_helper.0.: 0.067895s (num_starts 167; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.068292s (num_starts 4; 0.0171s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.068497s (num_starts 3; 0.0228s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069259s (num_starts 2; 0.0346s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069265s (num_starts 2; 0.0346s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069271s (num_starts 2; 0.0346s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069279s (num_starts 2; 0.0346s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.069288s (num_starts 2; 0.0346s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.0693s (num_starts 2; 0.0347s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown.: 0.069309s (num_starts 2; 0.0347s/start)
graph_ec_apply_trans_funs_helper.: 0.069311s (num_starts 172; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 0.069321s (num_starts 2; 0.0347s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.069331s (num_starts 2; 0.0347s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.069345s (num_starts 2; 0.0347s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.069754s (num_starts 172; 0.0004s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.070346s (num_starts 172; 0.0004s/start)
computeWP_for_pred_across_ec.: 0.07092s (num_starts 172; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072552s (num_starts 2; 0.0363s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072562s (num_starts 2; 0.0363s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.072626s (num_starts 2; 0.0363s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074866s (num_starts 3; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074879s (num_starts 3; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.074895s (num_starts 3; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond.: 0.074905s (num_starts 3; 0.0250s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076878s (num_starts 1; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07688s (num_starts 1; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.076893s (num_starts 1; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false.: 0.076896s (num_starts 1; 0.0769s/start)
edge_composition_apply_trans_funs_on_pred.: 0.082352s (num_starts 61; 0.0014s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.083147s (num_starts 78; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084867s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084873s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084877s (num_starts 1; 0.0849s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.086868s (num_starts 6; 0.0145s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.087601s (num_starts 4; 0.0219s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed.: 0.087614s (num_starts 4; 0.0219s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.087642s (num_starts 4; 0.0219s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.089342s (num_starts 105; 0.0009s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.092392s (num_starts 1; 0.0924s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.092394s (num_starts 1; 0.0924s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.092398s (num_starts 1; 0.0924s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.0924s (num_starts 1; 0.0924s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.092407s (num_starts 1; 0.0924s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.09241s (num_starts 1; 0.0924s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.092415s (num_starts 1; 0.0924s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.093055s (num_starts 2; 0.0465s/start)
propagate_nodece_across_edge.: 0.098676s (num_starts 8; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.100382s (num_starts 2; 0.0502s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.10087s (num_starts 3; 0.0336s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.10595s (num_starts 4; 0.0265s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.113476s (num_starts 62; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.119773s (num_starts 5; 0.0240s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.119795s (num_starts 5; 0.0240s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.119913s (num_starts 5; 0.0240s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.11993s (num_starts 5; 0.0240s/start)
parse_z3_model.: 0.126249s (num_starts 17; 0.0074s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.12838s (num_starts 2; 0.0642s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.128669s (num_starts 284; 0.0005s/start)
read_counter_examples_from_channel.: 0.129426s (num_starts 9; 0.0144s/start)
ce_reconcile_sorts_and_values.: 0.13222s (num_starts 19; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.133465s (num_starts 2; 0.0667s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.133473s (num_starts 2; 0.0667s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13348s (num_starts 2; 0.0667s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13349s (num_starts 2; 0.0667s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.133505s (num_starts 2; 0.0668s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-unsigned.: 0.133513s (num_starts 2; 0.0668s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-unsigned.: 0.133527s (num_starts 2; 0.0668s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 0.135488s (num_starts 4; 0.0339s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.136117s (num_starts 3; 0.0454s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13613s (num_starts 3; 0.0454s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.140846s (num_starts 7; 0.0201s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear.: 0.140867s (num_starts 7; 0.0201s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144339s (num_starts 2; 0.0722s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.144397s (num_starts 2; 0.0722s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.146824s (num_starts 3; 0.0489s/start)
ftmap_run_pointsto_analysis.: 0.151715s (num_starts 2; 0.0759s/start)
tfg_run_pointsto_analysis.: 0.152016s (num_starts 2; 0.0760s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 0.152594s (num_starts 1; 0.1526s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166279s (num_starts 4; 0.0416s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168926s (num_starts 2; 0.0845s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168936s (num_starts 2; 0.0845s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16894s (num_starts 2; 0.0845s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.16896s (num_starts 2; 0.0845s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed.: 0.16897s (num_starts 2; 0.0845s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.168984s (num_starts 2; 0.0845s/start)
tfg_populate_structs_after_ssa_construction.: 0.169501s (num_starts 2; 0.0848s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear.: 0.174275s (num_starts 8; 0.0218s/start)
corr_graph::add_edge().: 0.176389s (num_starts 3; 0.0588s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.185057s (num_starts 3; 0.0617s/start)
corr_graph_add_correlation.: 0.185165s (num_starts 3; 0.0617s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.187671s (num_starts 3; 0.0626s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.189454s (num_starts 10; 0.0189s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.191329s (num_starts 2; 0.0957s/start)
check_wfconds_on_edge.: 0.197122s (num_starts 7; 0.0282s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.201975s (num_starts 5; 0.0404s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.206141s (num_starts 16; 0.0129s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.206379s (num_starts 42; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.209245s (num_starts 11; 0.0190s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.236737s (num_starts 3; 0.0789s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 0.236803s (num_starts 3; 0.0789s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.246918s (num_starts 32; 0.0077s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.247122s (num_starts 32; 0.0077s/start)
dst_edge_composition_proves_false.: 0.248747s (num_starts 3; 0.0829s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.253803s (num_starts 3; 0.0846s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 0.256607s (num_starts 6; 0.0428s/start)
get_next_dst_edge_composition_to_correlate.: 0.259092s (num_starts 4; 0.0648s/start)
decide_hoare_triple.: 0.260473s (num_starts 5; 0.0521s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268211s (num_starts 6; 0.0447s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268235s (num_starts 6; 0.0447s/start)
counter_example_translate_on_edge_composition_helper.: 0.27347s (num_starts 286; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.282119s (num_starts 12; 0.0235s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear.: 0.282154s (num_starts 12; 0.0235s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.282543s (num_starts 8; 0.0353s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon).: 0.282844s (num_starts 8; 0.0354s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.283775s (num_starts 3; 0.0946s/start)
check_equivalence_proof.: 0.331489s (num_starts 1; 0.3315s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.344202s (num_starts 9; 0.0382s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.359332s (num_starts 8; 0.0449s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.368517s (num_starts 8; 0.0461s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry).: 0.377388s (num_starts 25; 0.0151s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.388205s (num_starts 16; 0.0243s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 0.402868s (num_starts 17; 0.0237s/start)
check_preds_on_edge_compositions.: 0.412993s (num_starts 10; 0.0413s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.57054s (num_starts 13; 0.0439s/start)
decide_hoare_triple_helper;per-query-type;linear.: 0.597372s (num_starts 27; 0.0221s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.670854s (num_starts 12; 0.0559s/start)
query:smt.: 0.695574s (num_starts 32; 0.0217s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry).: 0.705064s (num_starts 24; 0.0294s/start)
spawn_smt_query.: 0.825388s (num_starts 32; 0.0258s/start)
solver_provable.: 1.08589s (num_starts 31; 0.0350s/start)
expr_is_provable.: 1.09461s (num_starts 31; 0.0353s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 1.09521s (num_starts 31; 0.0353s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 1.09703s (num_starts 31; 0.0354s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 1.09793s (num_starts 31; 0.0354s/start)
solver_satisfiable-cache-miss.: 1.10475s (num_starts 32; 0.0345s/start)
solver_satisfiable.: 1.10495s (num_starts 32; 0.0345s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 1.12206s (num_starts 31; 0.0362s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 1.14678s (num_starts 40; 0.0287s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 1.14763s (num_starts 40; 0.0287s/start)
update_invariant_state_for_edges.: 1.20868s (num_starts 3; 0.4029s/start)
cg_check_new_cg_ec.: 1.21161s (num_starts 3; 0.4039s/start)
correl_entry_apply.: 1.21177s (num_starts 3; 0.4039s/start)
is_expr_equal_using_lhs_set_and_precond.: 1.33786s (num_starts 40; 0.0334s/start)
prove.: 1.33821s (num_starts 40; 0.0335s/start)
prove_spawn_and_join_helper.: 1.33847s (num_starts 40; 0.0335s/start)
prove_spawn_and_join.: 1.39315s (num_starts 40; 0.0348s/start)
prove_wrapper.proof_query_not_trivial.: 1.39888s (num_starts 40; 0.0350s/start)
prove_wrapper.: 1.4171s (num_starts 70; 0.0202s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.47571s (num_starts 31; 0.0476s/start)
expandProductCFG.: 1.48251s (num_starts 4; 0.3706s/start)
decide_hoare_triple_check_ub.: 1.50523s (num_starts 61; 0.0247s/start)
decide_hoare_triple_helper.: 1.53103s (num_starts 61; 0.0251s/start)
bestFirstSearch.: 1.69875s (num_starts 1; 1.6988s/start)
decide_hoare_triple_with_alias_cons.: 1.7379s (num_starts 61; 0.0285s/start)
Time taken for equivalence check.: 2.03209s (num_starts 1; 2.0321s/start)

counters:
# of paths enumerated.: 12
# of paths expanded.: 3
# of queries to linear solver.: 15
# of smt-solver-queries.: 32
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 12
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 4
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 17
total-correlation-possibilities.: 7
total-correlation-possibilities-mod-lsprels.: 7
total-correlations-explored.: 4

flags:
dst-aloc.: 0
dst-edges.: 6
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 8
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 17
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 3
final-CG-edges.: 3
final-CG-nodes.: 3
final-CG-num-invariants.: 5
final-CG-super-edges.: 0
src-edges.: 16
src-nodes.: 14
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 1.40
final-CG-time-to-total-time-ratio.: 0.82
query-time-to-total-time-ratio.: 0.30

Context stats:
exprs: count: 146182
sorts: count: 148
num_proof_queries: 40
num_proof_queries_answered_by_syntactic_check: 9
cache_stats:
m_simplify:
	----------- total:	5218
	        hit ratio:	0.960905
m_simplify_solver:
	----------- total:	737
	        hit ratio:	0.776119
m_z3_solver_substitution:
	----------- total:	162
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	165
	        hit ratio:	0
m_expr_size:
	----------- total:	5098
	        hit ratio:	0.947823
m_expr_evaluates_to_constant_visitor:
	----------- total:	7124
	        hit ratio:	0.515441
m_sort_dfa_canonicalize:
	----------- total:	45492
	        hit ratio:	0.999714
m_expr_convert_to_iexpr:
	----------- total:	515
	        hit ratio:	0.413592

z3_solver expr_query_cache entry size: 32
	----------- total:	32
	             hits:	0
	        hit ratio:	0
histogram (time taken by solver in ms):
[ 8.0540,  9.4807) (avg.  8.3465)        : 2
[ 9.4807, 11.1602) (avg.  9.7320)        : 1
[11.1602, 13.1372) (avg. 12.0343)        : 3
[13.1372, 15.4644) (avg. 14.1803)        : 6
[15.4644, 18.2039) (avg. 16.5725)        : 2
[18.2039, 21.4287) (avg. 20.6080)        : 1
[21.4287, 25.2247) (avg. 23.8578)        : 6
[25.2247, 29.6931) (avg. 27.3095)        : 4
[29.6931, 34.9532) (avg. 31.7958)        : 4
[34.9532, 41.1450) (avg. 38.0730)        : 3
histogram (number of quantifiers in query)
[0, 2) (avg. 0)                          : 1
[2, 3) (avg. 2)                          : 31
[3, 4) (avg. 0)                          : 0
[4, 5) (avg. 0)                          : 0
[5, 6) (avg. 0)                          : 0
[6, 8) (avg. 0)                          : 0
[8, 9) (avg. 0)                          : 0
[9, 10) (avg. 0)                         : 0
[10, 11) (avg. 0)                        : 0
[11, 12) (avg. 0)                        : 0
histogram (number of nodes in z3 ast)
[ 40,  51) (avg.  40)                    : 1
[ 51,  61) (avg.   0)                    : 0
[ 61,  72) (avg.   0)                    : 0
[ 72,  82) (avg.   0)                    : 0
[ 82,  93) (avg.  92)                    : 3
[ 93, 103) (avg.  98)                    : 10
[103, 114) (avg. 106)                    : 5
[114, 124) (avg. 116)                    : 8
[124, 135) (avg. 128)                    : 4
[135, 145) (avg. 135)                    : 1
Top 10 highest time taking queries:
1. [0.040s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1
2. [0.037s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L0%0%d_L0%0%d.dstToPC.Lfor.cond%1%bbentry.from_pcL0%0%d_L0%0%d.cond_apply_set_.0
3. [0.037s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-unsigned.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_.0
4. [0.034s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_2.1
5. [0.034s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_2.0
6. [0.030s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.6.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
7. [0.030s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%6%bbentry_Lfor.cond%1%bbentry.dstToPC.Lfor.cond%1%bbentry.from_pcL3%6%bbent.0
8. [0.029s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%6%bbentry_Lfor.cond%1%bbentry.dstToPC.E0%0%d.from_pcL3%6%bbentry_Lfor.cond%.0
9. [0.028s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond.from_pcL3%6%bbentry_L.1
10. [0.026s] SOLVER_RES_FALSE decide_hoare_triple_check_ub.expr-group-bvs.linear2-32-free_var_idx.6.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0

<MSG>0:25 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 128 time spent: 0:0:0 [0.002828s total; 0.000022 per start]
tfg_computeWP: num_starts 542 time spent: 0:0:0 [0.059893s total; 0.000111 per start]
tfg_get_simplified_to_state_for_edge: num_starts 1649 time spent: 0:0:0 [0.003330s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 1616 time spent: 0:0:0 [0.003119s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 760 time spent: 0:0:0 [0.001439s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 19 time spent: 0:0:0 [0.162414s total; 0.008548 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 6 time spent: 0:0:0 [0.150892s total; 0.025149 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 334 time spent: 0:0:0 [0.259715s total; 0.000778 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 58 time spent: 0:0:0 [0.020681s total; 0.000357 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 279 time spent: 0:0:0 [0.233486s total; 0.000837 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 1127 time spent: 0:0:0 [0.238625s total; 0.000212 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 279 time spent: 0:0:0 [0.009133s total; 0.000033 per start]
tfg_graph_get_vars_written_on_edge: num_starts 279 time spent: 0:0:0 [0.007125s total; 0.000026 per start]
cg_with_rank_add_CE_at_pc: num_starts 32 time spent: 0:0:0 [0.063492s total; 0.001984 per start]
graph_with_ce_add_CE_at_pc: num_starts 22 time spent: 0:0:0 [0.000499s total; 0.000023 per start]
graph_with_guessing_add_CE_at_pc: num_starts 32 time spent: 0:0:0 [0.062808s total; 0.001963 per start]
point_set_add_point_using_CE: num_starts 120 time spent: 0:0:0 [0.016803s total; 0.000140 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 120 time spent: 0:0:0 [0.017135s total; 0.000143 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 18 time spent: 0:0:0 [0.057196s total; 0.003178 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 18 time spent: 0:0:0 [0.039554s total; 0.002197 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2115 time spent: 0:0:0 [0.021629s total; 0.000010 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 240 time spent: 0:0:0 [0.007646s total; 0.000032 per start]
expr_simplify_solver: num_starts 780 time spent: 0:0:0 [0.050371s total; 0.000065 per start]
expr_simplify_syntactic: num_starts 780 time spent: 0:0:0 [0.023053s total; 0.000030 per start]
expr_simplify_select_on_store: num_starts 4 time spent: 0:0:0 [0.011199s total; 0.002800 per start]
expr_simplify_using_lhs_set_helper: num_starts 347 time spent: 0:0:0 [0.150452s total; 0.000434 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 1635 time spent: 0:0:0 [0.148455s total; 0.000091 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 631 time spent: 0:0:0 [0.002965s total; 0.000005 per start]
expr_simplify_eq: num_starts 65 time spent: 0:0:0 [0.001001s total; 0.000015 per start]
expr_simplify_or: num_starts 28 time spent: 0:0:0 [0.000047s total; 0.000002 per start]
expr_simplify_and: num_starts 61 time spent: 0:0:0 [0.000439s total; 0.000007 per start]
expr_simplify_andnot1: num_starts 16 time spent: 0:0:0 [0.000208s total; 0.000013 per start]
expr_simplify_not: num_starts 19 time spent: 0:0:0 [0.000078s total; 0.000004 per start]
canonicalize_expr_tree: num_starts 197 time spent: 0:0:0 [0.005236s total; 0.000027 per start]
expr_simplify_memalloc_using_memlabel: num_starts 1 time spent: 0:0:0 [0.000003s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 4 time spent: 0:0:0 [0.011098s total; 0.002775 per start]
get_arithmetic_addsub_atoms: num_starts 1017 time spent: 0:0:0 [0.000838s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 317 time spent: 0:0:0 [0.002956s total; 0.000009 per start]
expr_is_consts_struct_constant: num_starts 1735 time spent: 0:0:0 [0.001094s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 5564 time spent: 0:0:0 [0.152532s total; 0.000027 per start]
expr_do_simplify_helper_cache: num_starts 5564 time spent: 0:0:0 [0.005372s total; 0.000001 per start]
evaluate_expr_and_check_bounds: num_starts 902 time spent: 0:0:0 [0.246046s total; 0.000273 per start]
array_constant_equals: num_starts 308 time spent: 0:0:0 [0.000513s total; 0.000002 per start]
sort_dfa_canonical: num_starts 187617 time spent: 0:0:1 [1.231676s total; 0.000007 per start]
expr_convert_to_iexpr: num_starts 539 time spent: 0:0:0 [0.278566s total; 0.000517 per start]
combo_dfa_xfer_and_meet: num_starts 62 time spent: 0:0:0 [0.113388s total; 0.001829 per start]
alias_val_xfer_and_meet: num_starts 62 time spent: 0:0:0 [0.055628s total; 0.000897 per start]
get_sprel_map_from_avail_exprs: num_starts 87 time spent: 0:0:0 [0.010049s total; 0.000116 per start]
update_memlabels_for_memslot_locs: num_starts 23 time spent: 0:0:0 [0.000108s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 158 time spent: 0:0:0 [0.018907s total; 0.000120 per start]
compute_simplified_loc_exprs_for_edge: num_starts 382 time spent: 0:0:0 [0.059420s total; 0.000156 per start]
compute_locs_definitely_written_on_edge: num_starts 158 time spent: 0:0:0 [0.000247s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 36 time spent: 0:0:0 [0.006416s total; 0.000178 per start]
edge_update_memlabel_map_for_mlvars: num_starts 79 time spent: 0:0:0 [0.001302s total; 0.000016 per start]
add_new_locs_based_on_edge: num_starts 62 time spent: 0:0:0 [0.040282s total; 0.000650 per start]
expand_locset_to_include_slots_for_memmask: num_starts 75 time spent: 0:0:0 [0.000163s total; 0.000002 per start]
total: num_starts 1 time spent: 0:0:31 [31.733477s total; 31.733477 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 2.33s.
ftmap_run_pointsto_analysis.: 0.151715s (num_starts 2; 0.0759s/start)s.
EQ Time after pointsto analysis: 2.17597s.
EQ Time after pointsto analysis and smt_query: 0.758872s.
EQ Time after pointsto analysis and smt_query and bv-solve: 0.751615s.
Equivalence proof found. The programs are equivalent.
